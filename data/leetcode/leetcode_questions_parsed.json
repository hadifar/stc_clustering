{"2169": {"label": "Easy", "title": "Count Operations to Obtain Zero", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7465999999999999, "total_accepted": 19500.0, "total_submissions": 26200.0, "testcase_example": "'2\\n3'", "body": "You are given two non-negative integers num1 and num2.\nIn one operation, if num1 >= num2, you must subtract num2 from num1, otherwise subtract num1 from num2.\nFor example, if num1 = 5 and num2 = 4, subtract num2 from num1, thus obtaining num1 = 1 and num2 = 4. However, if num1 = 4 and num2 = 5, after one operation, num1 = 4 and num2 = 1.\nReturn the number of operations required to make either num1 = 0 or num2 = 0.", "examples": [{"full_text": "Example 1:\nInput: num1 = 2, num2 = 3\nOutput: 3\nExplanation:\n- Operation 1: num1 = 2, num2 = 3. Since num1 < num2, we subtract num1 from num2 and get num1 = 2, num2 = 3 - 2 = 1.\n- Operation 2: num1 = 2, num2 = 1. Since num1 > num2, we subtract num2 from num1.\n- Operation 3: num1 = 1, num2 = 1. Since num1 == num2, we subtract num2 from num1.\nNow num1 = 0 and num2 = 1. Since num1 == 0, we do not need to perform any further operations.\nSo the total number of operations required is 3.", "input": "Input: num1 = 2, num2 = 3", "output": "Output: 3", "explanation": "Explanation:\n- Operation 1: num1 = 2, num2 = 3. Since num1 < num2, we subtract num1 from num2 and get num1 = 2, num2 = 3 - 2 = 1.\n- Operation 2: num1 = 2, num2 = 1. Since num1 > num2, we subtract num2 from num1.\n- Operation 3: num1 = 1, num2 = 1. Since num1 == num2, we subtract num2 from num1.\nNow num1 = 0 and num2 = 1. Since num1 == 0, we do not need to perform any further operations.\nSo the total number of operations required is 3."}, {"full_text": "Example 2:\nInput: num1 = 10, num2 = 10\nOutput: 1\nExplanation:\n- Operation 1: num1 = 10, num2 = 10. Since num1 == num2, we subtract num2 from num1 and get num1 = 10 - 10 = 0.\nNow num1 = 0 and num2 = 10. Since num1 == 0, we are done.\nSo the total number of operations required is 1.", "input": "Input: num1 = 10, num2 = 10", "output": "Output: 1", "explanation": "Explanation:\n- Operation 1: num1 = 10, num2 = 10. Since num1 == num2, we subtract num2 from num1 and get num1 = 10 - 10 = 0.\nNow num1 = 0 and num2 = 10. Since num1 == 0, we are done.\nSo the total number of operations required is 1."}], "constraints": "Constraints:\n0 <= num1, num2 <= 10^5", "notes": ""}, "2164": {"label": "Easy", "title": "Sort Even and Odd Indices Independently", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6773, "total_accepted": 19100.0, "total_submissions": 28100.0, "testcase_example": "'[4,1,2,3]'", "body": "You are given a 0-indexed integer array nums. Rearrange the values of nums according to the following rules:\nSort the values at odd indices of nums in non-increasing order.\n\nFor example, if nums = [4,1,2,3] before this step, it becomes [4,3,2,1] after. The values at odd indices 1 and 3 are sorted in non-increasing order.\n\n\nSort the values at even indices of nums in non-decreasing order.\n\nFor example, if nums = [4,1,2,3] before this step, it becomes [2,1,4,3] after. The values at even indices 0 and 2 are sorted in non-decreasing order.\n\n\nReturn the array formed after rearranging the values of nums.", "examples": [{"full_text": "Example 1:\nInput: nums = [4,1,2,3]\nOutput: [2,3,4,1]\nExplanation:\nFirst, we sort the values present at odd indices (1 and 3) in non-increasing order.\nSo, nums changes from [4,1,2,3] to [4,3,2,1].\nNext, we sort the values present at even indices (0 and 2) in non-decreasing order.\nSo, nums changes from [4,1,2,3] to [2,3,4,1].\nThus, the array formed after rearranging the values is [2,3,4,1].", "input": "Input: nums = [4,1,2,3]", "output": "Output: [2,3,4,1]", "explanation": "Explanation:\nFirst, we sort the values present at odd indices (1 and 3) in non-increasing order.\nSo, nums changes from [4,1,2,3] to [4,3,2,1].\nNext, we sort the values present at even indices (0 and 2) in non-decreasing order.\nSo, nums changes from [4,1,2,3] to [2,3,4,1].\nThus, the array formed after rearranging the values is [2,3,4,1]."}, {"full_text": "Example 2:\nInput: nums = [2,1]\nOutput: [2,1]\nExplanation:\nSince there is exactly one odd index and one even index, no rearrangement of values takes place.\nThe resultant array formed is [2,1], which is the same as the initial array.", "input": "Input: nums = [2,1]", "output": "Output: [2,1]", "explanation": "Explanation:\nSince there is exactly one odd index and one even index, no rearrangement of values takes place.\nThe resultant array formed is [2,1], which is the same as the initial array."}], "constraints": "Constraints:\n1 <= nums.length <= 100\n1 <= nums[i] <= 100", "notes": ""}, "2160": {"label": "Easy", "title": "Minimum Sum of Four Digit Number After Splitting Digits", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.8726, "total_accepted": 16400.0, "total_submissions": 18800.0, "testcase_example": "'2932'", "body": "You are given a positive integer num consisting of exactly four digits. Split num into two new integers new1 and new2 by using the digits found in num. Leading zeros are allowed in new1 and new2, and all the digits found in num must be used.\nFor example, given num = 2932, you have the following digits: two 2's, one 9 and one 3. Some of the possible pairs [new1, new2] are [22, 93], [23, 92], [223, 9] and [2, 329].\nReturn the minimum possible sum of new1 and new2.", "examples": [{"full_text": "Example 1:\nInput: num = 2932\nOutput: 52\nExplanation: Some possible pairs [new1, new2] are [29, 23], [223, 9], etc.\nThe minimum sum can be obtained by the pair [29, 23]: 29 + 23 = 52.", "input": "Input: num = 2932", "output": "Output: 52", "explanation": "Explanation: Some possible pairs [new1, new2] are [29, 23], [223, 9], etc.\nThe minimum sum can be obtained by the pair [29, 23]: 29 + 23 = 52."}, {"full_text": "Example 2:\nInput: num = 4009\nOutput: 13\nExplanation: Some possible pairs [new1, new2] are [0, 49], [490, 0], etc.\nThe minimum sum can be obtained by the pair [4, 9]: 4 + 9 = 13.", "input": "Input: num = 4009", "output": "Output: 13", "explanation": "Explanation: Some possible pairs [new1, new2] are [0, 49], [490, 0], etc.\nThe minimum sum can be obtained by the pair [4, 9]: 4 + 9 = 13."}], "constraints": "Constraints:\n1000 <= num <= 9999", "notes": ""}, "2154": {"label": "Easy", "title": "Keep Multiplying Found Values by Two", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7364, "total_accepted": 25700.0, "total_submissions": 34900.0, "testcase_example": "'[5,3,6,1,12]\\n3'", "body": "You are given an array of integers nums. You are also given an integer original which is the first number that needs to be searched for in nums.\nYou then do the following steps:\nIf original is found in nums, multiply it by two (i.e., set original = 2 * original).\nOtherwise, stop the process.\nRepeat this process with the new number as long as you keep finding the number.\nReturn the final value of original.", "examples": [{"full_text": "Example 1:\nInput: nums = [5,3,6,1,12], original = 3\nOutput: 24\nExplanation:\n- 3 is found in nums. 3 is multiplied by 2 to obtain 6.\n- 6 is found in nums. 6 is multiplied by 2 to obtain 12.\n- 12 is found in nums. 12 is multiplied by 2 to obtain 24.\n- 24 is not found in nums. Thus, 24 is returned.", "input": "Input: nums = [5,3,6,1,12], original = 3", "output": "Output: 24", "explanation": "Explanation:\n- 3 is found in nums. 3 is multiplied by 2 to obtain 6.\n- 6 is found in nums. 6 is multiplied by 2 to obtain 12.\n- 12 is found in nums. 12 is multiplied by 2 to obtain 24.\n- 24 is not found in nums. Thus, 24 is returned."}, {"full_text": "Example 2:\nInput: nums = [2,7,9], original = 4\nOutput: 4\nExplanation:\n- 4 is not found in nums. Thus, 4 is returned.", "input": "Input: nums = [2,7,9], original = 4", "output": "Output: 4", "explanation": "Explanation:\n- 4 is not found in nums. Thus, 4 is returned."}], "constraints": "Constraints:\n1 <= nums.length <= 1000\n1 <= nums[i], original <= 1000", "notes": ""}, "2148": {"label": "Easy", "title": "Count Elements With Strictly Smaller and Greater Elements", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6063000000000001, "total_accepted": 22000.0, "total_submissions": 36200.0, "testcase_example": "'[11,7,2,15]'", "body": "Given an integer array nums, return the number of elements that have both a strictly smaller and a strictly greater element appear in nums.", "examples": [{"full_text": "Example 1:\nInput: nums = [11,7,2,15]\nOutput: 2\nExplanation: The element 7 has the element 2 strictly smaller than it and the element 11 strictly greater than it.\nElement 11 has element 7 strictly smaller than it and element 15 strictly greater than it.\nIn total there are 2 elements having both a strictly smaller and a strictly greater element appear in nums.", "input": "Input: nums = [11,7,2,15]", "output": "Output: 2", "explanation": "Explanation: The element 7 has the element 2 strictly smaller than it and the element 11 strictly greater than it.\nElement 11 has element 7 strictly smaller than it and element 15 strictly greater than it.\nIn total there are 2 elements having both a strictly smaller and a strictly greater element appear in nums."}, {"full_text": "Example 2:\nInput: nums = [-3,3,3,90]\nOutput: 2\nExplanation: The element 3 has the element -3 strictly smaller than it and the element 90 strictly greater than it.\nSince there are two elements with the value 3, in total there are 2 elements having both a strictly smaller and a strictly greater element appear in nums.", "input": "Input: nums = [-3,3,3,90]", "output": "Output: 2", "explanation": "Explanation: The element 3 has the element -3 strictly smaller than it and the element 90 strictly greater than it.\nSince there are two elements with the value 3, in total there are 2 elements having both a strictly smaller and a strictly greater element appear in nums."}], "constraints": "Constraints:\n1 <= nums.length <= 100\n-10^5 <= nums[i] <= 10^5", "notes": ""}, "2144": {"label": "Easy", "title": "Minimum Cost of Buying Candies With Discount", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6035, "total_accepted": 17400.0, "total_submissions": 28900.0, "testcase_example": "'[1,2,3]'", "body": "A shop is selling candies at a discount. For every two candies sold, the shop gives a third candy for free.\nThe customer can choose any candy to take away for free as long as the cost of the chosen candy is less than or equal to the minimum cost of the two candies bought.\nFor example, if there are 4 candies with costs 1, 2, 3, and 4, and the customer buys candies with costs 2 and 3, they\ncan take the candy with cost 1 for free, but not the candy with cost 4.\nGiven a 0-indexed integer array cost, where cost[i] denotes the cost of the i^th candy, return the minimum cost of buying all the candies.", "examples": [{"full_text": "Example 1:\nInput: cost = [1,2,3]\nOutput: 5\nExplanation: We buy the candies with costs 2 and 3, and take the candy with cost 1 for free.\nThe total cost of buying all candies is 2 + 3 = 5. This is the only way we can buy the candies.\nNote that we cannot buy candies with costs 1 and 3, and then take the candy with cost 2 for free.\nThe cost of the free candy has to be less than or equal to the minimum cost of the purchased candies.", "input": "Input: cost = [1,2,3]", "output": "Output: 5", "explanation": "Explanation: We buy the candies with costs 2 and 3, and take the candy with cost 1 for free.\nThe total cost of buying all candies is 2 + 3 = 5. This is the only way we can buy the candies.\nNote that we cannot buy candies with costs 1 and 3, and then take the candy with cost 2 for free.\nThe cost of the free candy has to be less than or equal to the minimum cost of the purchased candies."}, {"full_text": "Example 2:\nInput: cost = [6,5,7,9,2,2]\nOutput: 23\nExplanation: The way in which we can get the minimum cost is described below:\n- Buy candies with costs 9 and 7\n- Take the candy with cost 6 for free\n- We buy candies with costs 5 and 2\n- Take the last remaining candy with cost 2 for free\nHence, the minimum cost to buy all candies is 9 + 7 + 5 + 2 = 23.", "input": "Input: cost = [6,5,7,9,2,2]", "output": "Output: 23", "explanation": "Explanation: The way in which we can get the minimum cost is described below:\n- Buy candies with costs 9 and 7\n- Take the candy with cost 6 for free\n- We buy candies with costs 5 and 2\n- Take the last remaining candy with cost 2 for free\nHence, the minimum cost to buy all candies is 9 + 7 + 5 + 2 = 23."}, {"full_text": "Example 3:\nInput: cost = [5,5]\nOutput: 10\nExplanation: Since there are only 2 candies, we buy both of them. There is not a third candy we can take for free.\nHence, the minimum cost to buy all candies is 5 + 5 = 10.", "input": "Input: cost = [5,5]", "output": "Output: 10", "explanation": "Explanation: Since there are only 2 candies, we buy both of them. There is not a third candy we can take for free.\nHence, the minimum cost to buy all candies is 5 + 5 = 10."}], "constraints": "Constraints:\n1 <= cost.length <= 100\n1 <= cost[i] <= 100", "notes": ""}, "2138": {"label": "Easy", "title": "Divide a String Into Groups of Size k", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6572, "total_accepted": 21300.0, "total_submissions": 32400.0, "testcase_example": "'\"abcdefghi\"\\n3\\n\"x\"'", "body": "A string s can be partitioned into groups of size k using the following procedure:\nThe first group consists of the first k characters of the string, the second group consists of the next k characters of the string, and so on. Each character can be a part of exactly one group.\nFor the last group, if the string does not have k characters remaining, a character fill is used to complete the group.\nNote that the partition is done so that after removing the fill character from the last group (if it exists) and concatenating all the groups in order, the resultant string should be s.\nGiven the string s, the size of each group k and the character fill, return a string array denoting the composition of every group s has been divided into, using the above procedure.", "examples": [{"full_text": "Example 1:\nInput: s = \"abcdefghi\", k = 3, fill = \"x\"\nOutput: [\"abc\",\"def\",\"ghi\"]\nExplanation:\nThe first 3 characters \"abc\" form the first group.\nThe next 3 characters \"def\" form the second group.\nThe last 3 characters \"ghi\" form the third group.\nSince all groups can be completely filled by characters from the string, we do not need to use fill.\nThus, the groups formed are \"abc\", \"def\", and \"ghi\".", "input": "Input: s = \"abcdefghi\", k = 3, fill = \"x\"", "output": "Output: [\"abc\",\"def\",\"ghi\"]", "explanation": "Explanation:\nThe first 3 characters \"abc\" form the first group.\nThe next 3 characters \"def\" form the second group.\nThe last 3 characters \"ghi\" form the third group.\nSince all groups can be completely filled by characters from the string, we do not need to use fill.\nThus, the groups formed are \"abc\", \"def\", and \"ghi\"."}, {"full_text": "Example 2:\nInput: s = \"abcdefghij\", k = 3, fill = \"x\"\nOutput: [\"abc\",\"def\",\"ghi\",\"jxx\"]\nExplanation:\nSimilar to the previous example, we are forming the first three groups \"abc\", \"def\", and \"ghi\".\nFor the last group, we can only use the character 'j' from the string. To complete this group, we add 'x' twice.\nThus, the 4 groups formed are \"abc\", \"def\", \"ghi\", and \"jxx\".", "input": "Input: s = \"abcdefghij\", k = 3, fill = \"x\"", "output": "Output: [\"abc\",\"def\",\"ghi\",\"jxx\"]", "explanation": "Explanation:\nSimilar to the previous example, we are forming the first three groups \"abc\", \"def\", and \"ghi\".\nFor the last group, we can only use the character 'j' from the string. To complete this group, we add 'x' twice.\nThus, the 4 groups formed are \"abc\", \"def\", \"ghi\", and \"jxx\"."}], "constraints": "Constraints:\n1 <= s.length <= 100\ns consists of lowercase English letters only.\n1 <= k <= 100\nfill is a lowercase English letter.", "notes": ""}, "2133": {"label": "Easy", "title": "Check if Every Row and Column Contains All Numbers", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5188, "total_accepted": 21200.0, "total_submissions": 40800.0, "testcase_example": "'[[1,2,3],[3,1,2],[2,3,1]]'", "body": "An n x n matrix is valid if every row and every column contains all the integers from 1 to n (inclusive).\nGiven an n x n integer matrix matrix, return true if the matrix is valid. Otherwise, return false.", "examples": [{"full_text": "Example 1:\nInput: matrix = [[1,2,3],[3,1,2],[2,3,1]]\nOutput: true\nExplanation: In this case, n = 3, and every row and column contains the numbers 1, 2, and 3.\nHence, we return true.", "input": "Input: matrix = [[1,2,3],[3,1,2],[2,3,1]]", "output": "Output: true", "explanation": "Explanation: In this case, n = 3, and every row and column contains the numbers 1, 2, and 3.\nHence, we return true."}, {"full_text": "Example 2:\nInput: matrix = [[1,1,1],[1,2,3],[1,2,3]]\nOutput: false\nExplanation: In this case, n = 3, but the first row and the first column do not contain the numbers 2 or 3.\nHence, we return false.", "input": "Input: matrix = [[1,1,1],[1,2,3],[1,2,3]]", "output": "Output: false", "explanation": "Explanation: In this case, n = 3, but the first row and the first column do not contain the numbers 2 or 3.\nHence, we return false."}], "constraints": "Constraints:\nn == matrix.length == matrix[i].length\n1 <= n <= 100\n1 <= matrix[i][j] <= n", "notes": ""}, "2129": {"label": "Easy", "title": "Capitalize the Title", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5901, "total_accepted": 18300.0, "total_submissions": 31100.0, "testcase_example": "'\"capiTalIze tHe titLe\"'", "body": "You are given a string title consisting of one or more words separated by a single space, where each word consists of English letters. Capitalize the string by changing the capitalization of each word such that:\nIf the length of the word is 1 or 2 letters, change all letters to lowercase.\nOtherwise, change the first letter to uppercase and the remaining letters to lowercase.\nReturn the capitalized title.", "examples": [{"full_text": "Example 1:\nInput: title = \"capiTalIze tHe titLe\"\nOutput: \"Capitalize The Title\"\nExplanation:\nSince all the words have a length of at least 3, the first letter of each word is uppercase, and the remaining letters are lowercase.", "input": "Input: title = \"capiTalIze tHe titLe\"", "output": "Output: \"Capitalize The Title\"", "explanation": "Explanation:\nSince all the words have a length of at least 3, the first letter of each word is uppercase, and the remaining letters are lowercase."}, {"full_text": "Example 2:\nInput: title = \"First leTTeR of EACH Word\"\nOutput: \"First Letter of Each Word\"\nExplanation:\nThe word \"of\" has length 2, so it is all lowercase.\nThe remaining words have a length of at least 3, so the first letter of each remaining word is uppercase, and the remaining letters are lowercase.", "input": "Input: title = \"First leTTeR of EACH Word\"", "output": "Output: \"First Letter of Each Word\"", "explanation": "Explanation:\nThe word \"of\" has length 2, so it is all lowercase.\nThe remaining words have a length of at least 3, so the first letter of each remaining word is uppercase, and the remaining letters are lowercase."}, {"full_text": "Example 3:\nInput: title = \"i lOve leetcode\"\nOutput: \"i Love Leetcode\"\nExplanation:\nThe word \"i\" has length 1, so it is lowercase.\nThe remaining words have a length of at least 3, so the first letter of each remaining word is uppercase, and the remaining letters are lowercase.", "input": "Input: title = \"i lOve leetcode\"", "output": "Output: \"i Love Leetcode\"", "explanation": "Explanation:\nThe word \"i\" has length 1, so it is lowercase.\nThe remaining words have a length of at least 3, so the first letter of each remaining word is uppercase, and the remaining letters are lowercase."}], "constraints": "Constraints:\n1 <= title.length <= 100\ntitle consists of words separated by a single space without any leading or trailing spaces.\nEach word consists of uppercase and lowercase English letters and is non-empty.", "notes": ""}, "2124": {"label": "Easy", "title": "Check if All A's Appears Before All B's", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7317, "total_accepted": 23300.0, "total_submissions": 31900.0, "testcase_example": "'\"aaabbb\"'", "body": "Given a string s consisting of only the characters 'a' and 'b', return true if every 'a' appears before every 'b' in the string. Otherwise, return false.", "examples": [{"full_text": "Example 1:\nInput: s = \"aaabbb\"\nOutput: true\nExplanation:\nThe 'a's are at indices 0, 1, and 2, while the 'b's are at indices 3, 4, and 5.\nHence, every 'a' appears before every 'b' and we return true.", "input": "Input: s = \"aaabbb\"", "output": "Output: true", "explanation": "Explanation:\nThe 'a's are at indices 0, 1, and 2, while the 'b's are at indices 3, 4, and 5.\nHence, every 'a' appears before every 'b' and we return true."}, {"full_text": "Example 2:\nInput: s = \"abab\"\nOutput: false\nExplanation:\nThere is an 'a' at index 2 and a 'b' at index 1.\nHence, not every 'a' appears before every 'b' and we return false.", "input": "Input: s = \"abab\"", "output": "Output: false", "explanation": "Explanation:\nThere is an 'a' at index 2 and a 'b' at index 1.\nHence, not every 'a' appears before every 'b' and we return false."}, {"full_text": "Example 3:\nInput: s = \"bbb\"\nOutput: true\nExplanation:\nThere are no 'a's, hence, every 'a' appears before every 'b' and we return true.", "input": "Input: s = \"bbb\"", "output": "Output: true", "explanation": "Explanation:\nThere are no 'a's, hence, every 'a' appears before every 'b' and we return true."}], "constraints": "Constraints:\n1 <= s.length <= 100\ns[i] is either 'a' or 'b'.", "notes": ""}, "2119": {"label": "Easy", "title": "A Number After a Double Reversal", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7726999999999999, "total_accepted": 22000.0, "total_submissions": 28500.0, "testcase_example": "'526'", "body": "Reversing an integer means to reverse all its digits.\nFor example, reversing 2021 gives 1202. Reversing 12300 gives 321 as the leading zeros are not retained.\nGiven an integer num, reverse num to get reversed1, then reverse reversed1 to get reversed2. Return true if reversed2 equals num. Otherwise return false.", "examples": [{"full_text": "Example 1:\nInput: num = 526\nOutput: true\nExplanation: Reverse num to get 625, then reverse 625 to get 526, which equals num.", "input": "Input: num = 526", "output": "Output: true", "explanation": "Explanation: Reverse num to get 625, then reverse 625 to get 526, which equals num."}, {"full_text": "Example 2:\nInput: num = 1800\nOutput: false\nExplanation: Reverse num to get 81, then reverse 81 to get 18, which does not equal num.", "input": "Input: num = 1800", "output": "Output: false", "explanation": "Explanation: Reverse num to get 81, then reverse 81 to get 18, which does not equal num."}, {"full_text": "Example 3:\nInput: num = 0\nOutput: true\nExplanation: Reverse num to get 0, then reverse 0 to get 0, which equals num.", "input": "Input: num = 0", "output": "Output: true", "explanation": "Explanation: Reverse num to get 0, then reverse 0 to get 0, which equals num."}], "constraints": "Constraints:\n0 <= num <= 10^6", "notes": ""}, "2114": {"label": "Easy", "title": "Maximum Number of Words Found in Sentences", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.8908, "total_accepted": 40200.0, "total_submissions": 45100.0, "testcase_example": "'[\"alice and bob love leetcode\",\"i think so too\",\"this is great thanks very much\"]'", "body": "A sentence is a list of words that are separated by a single space\nwith no leading or trailing spaces.\nYou are given an array of strings sentences, where each sentences[i] represents a single sentence.\nReturn the maximum number of words that appear in a single sentence.", "examples": [{"full_text": "Example 1:\nInput: sentences = [\"alice and bob love leetcode\", \"i think so too\", \"this is great thanks very much\"]\nOutput: 6\nExplanation:\n- The first sentence, \"alice and bob love leetcode\", has 5 words in total.\n- The second sentence, \"i think so too\", has 4 words in total.\n- The third sentence, \"this is great thanks very much\", has 6 words in total.\nThus, the maximum number of words in a single sentence comes from the third sentence, which has 6 words.", "input": "Input: sentences = [\"alice and bob love leetcode\", \"i think so too\", \"this is great thanks very much\"]", "output": "Output: 6", "explanation": "Explanation:\n- The first sentence, \"alice and bob love leetcode\", has 5 words in total.\n- The second sentence, \"i think so too\", has 4 words in total.\n- The third sentence, \"this is great thanks very much\", has 6 words in total.\nThus, the maximum number of words in a single sentence comes from the third sentence, which has 6 words."}, {"full_text": "Example 2:\nInput: sentences = [\"please wait\", \"continue to fight\", \"continue to win\"]\nOutput: 3\nExplanation: It is possible that multiple sentences contain the same number of words.\nIn this example, the second and third sentences (underlined) have the same number of words.", "input": "Input: sentences = [\"please wait\", \"continue to fight\", \"continue to win\"]", "output": "Output: 3", "explanation": "Explanation: It is possible that multiple sentences contain the same number of words.\nIn this example, the second and third sentences (underlined) have the same number of words."}], "constraints": "Constraints:\n1 <= sentences.length <= 100\n1 <= sentences[i].length <= 100\nsentences[i] consists only of lowercase English letters and ' ' only.\nsentences[i] does not have leading or trailing spaces.\nAll the words in sentences[i] are separated by a single space.", "notes": ""}, "2108": {"label": "Easy", "title": "Find First Palindromic String in the Array", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.8062999999999999, "total_accepted": 31000.0, "total_submissions": 38500.0, "testcase_example": "'[\"abc\",\"car\",\"ada\",\"racecar\",\"cool\"]'", "body": "Given an array of strings words, return the first palindromic string in the array. If there is no such string, return an empty string \"\".\nA string is palindromic if it reads the same forward and backward.", "examples": [{"full_text": "Example 1:\nInput: words = [\"abc\",\"car\",\"ada\",\"racecar\",\"cool\"]\nOutput: \"ada\"\nExplanation: The first string that is palindromic is \"ada\".\nNote that \"racecar\" is also palindromic, but it is not the first.", "input": "Input: words = [\"abc\",\"car\",\"ada\",\"racecar\",\"cool\"]", "output": "Output: \"ada\"", "explanation": "Explanation: The first string that is palindromic is \"ada\".\nNote that \"racecar\" is also palindromic, but it is not the first."}, {"full_text": "Example 2:\nInput: words = [\"notapalindrome\",\"racecar\"]\nOutput: \"racecar\"\nExplanation: The first and only string that is palindromic is \"racecar\".", "input": "Input: words = [\"notapalindrome\",\"racecar\"]", "output": "Output: \"racecar\"", "explanation": "Explanation: The first and only string that is palindromic is \"racecar\"."}, {"full_text": "Example 3:\nInput: words = [\"def\",\"ghi\"]\nOutput: \"\"\nExplanation: There are no palindromic strings, so the empty string is returned.", "input": "Input: words = [\"def\",\"ghi\"]", "output": "Output: \"\"", "explanation": "Explanation: There are no palindromic strings, so the empty string is returned."}], "constraints": "Constraints:\n1 <= words.length <= 100\n1 <= words[i].length <= 100\nwords[i] consists only of lowercase English letters.", "notes": ""}, "2103": {"label": "Easy", "title": "Rings and Rods", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.8166, "total_accepted": 22400.0, "total_submissions": 27400.0, "testcase_example": "'\"B0B6G0R6R0R6G9\"'", "body": "There are n rings and each ring is either red, green, or blue. The rings are distributed across ten rods labeled from 0 to 9.\nYou are given a string rings of length 2n that describes the n rings that are placed onto the rods. Every two characters in rings forms a color-position pair that is used to describe each ring where:\nThe first character of the i^th pair denotes the i^th ring's color ('R', 'G', 'B').\nThe second character of the i^th pair denotes the rod that the i^th ring is placed on ('0' to '9').\nFor example, \"R3G2B1\" describes n == 3 rings: a red ring placed onto the rod labeled 3, a green ring placed onto the rod labeled 2, and a blue ring placed onto the rod labeled 1.\nReturn the number of rods that have all three colors of rings on them.", "examples": [{"full_text": "Example 1:\nInput: rings = \"B0B6G0R6R0R6G9\"\nOutput: 1\nExplanation:\n- The rod labeled 0 holds 3 rings with all colors: red, green, and blue.\n- The rod labeled 6 holds 3 rings, but it only has red and blue.\n- The rod labeled 9 holds only a green ring.\nThus, the number of rods with all three colors is 1.", "input": "Input: rings = \"B0B6G0R6R0R6G9\"", "output": "Output: 1", "explanation": "Explanation:\n- The rod labeled 0 holds 3 rings with all colors: red, green, and blue.\n- The rod labeled 6 holds 3 rings, but it only has red and blue.\n- The rod labeled 9 holds only a green ring.\nThus, the number of rods with all three colors is 1."}, {"full_text": "Example 2:\nInput: rings = \"B0R0G0R9R0B0G0\"\nOutput: 1\nExplanation:\n- The rod labeled 0 holds 6 rings with all colors: red, green, and blue.\n- The rod labeled 9 holds only a red ring.\nThus, the number of rods with all three colors is 1.", "input": "Input: rings = \"B0R0G0R9R0B0G0\"", "output": "Output: 1", "explanation": "Explanation:\n- The rod labeled 0 holds 6 rings with all colors: red, green, and blue.\n- The rod labeled 9 holds only a red ring.\nThus, the number of rods with all three colors is 1."}, {"full_text": "Example 3:\nInput: rings = \"G4\"\nOutput: 0\nExplanation:\nOnly one ring is given. Thus, no rods have all three colors.", "input": "Input: rings = \"G4\"", "output": "Output: 0", "explanation": "Explanation:\nOnly one ring is given. Thus, no rods have all three colors."}], "constraints": "Constraints:\nrings.length == 2 * n\n1 <= n <= 100\nrings[i] where i is even is either 'R', 'G', or 'B' (0-indexed).\nrings[i] where i is odd is a digit from '0' to '9' (0-indexed).", "notes": ""}, "2099": {"label": "Easy", "title": "Find Subsequence of Length K With the Largest Sum", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4439, "total_accepted": 12000.0, "total_submissions": 27100.0, "testcase_example": "'[2,1,3,3]\\n2'", "body": "You are given an integer array nums and an integer k. You want to find a subsequence of nums of length k that has the largest sum.\nReturn any such subsequence as an integer array of length k.\nA subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.", "examples": [{"full_text": "Example 1:\nInput: nums = [2,1,3,3], k = 2\nOutput: [3,3]\nExplanation:\nThe subsequence has the largest sum of 3 + 3 = 6.", "input": "Input: nums = [2,1,3,3], k = 2", "output": "Output: [3,3]", "explanation": "Explanation:\nThe subsequence has the largest sum of 3 + 3 = 6."}, {"full_text": "Example 2:\nInput: nums = [-1,-2,3,4], k = 3\nOutput: [-1,3,4]\nExplanation:\nThe subsequence has the largest sum of -1 + 3 + 4 = 6.", "input": "Input: nums = [-1,-2,3,4], k = 3", "output": "Output: [-1,3,4]", "explanation": "Explanation:\nThe subsequence has the largest sum of -1 + 3 + 4 = 6."}, {"full_text": "Example 3:\nInput: nums = [3,4,3,3], k = 2\nOutput: [3,4]\nExplanation:\nThe subsequence has the largest sum of 3 + 4 = 7.\nAnother possible subsequence is [4, 3].", "input": "Input: nums = [3,4,3,3], k = 2", "output": "Output: [3,4]", "explanation": "Explanation:\nThe subsequence has the largest sum of 3 + 4 = 7.\nAnother possible subsequence is [4, 3]."}], "constraints": "Constraints:\n1 <= nums.length <= 1000\n-10^5\n<= nums[i] <= 10^5\n1 <= k <= nums.length", "notes": ""}, "2094": {"label": "Easy", "title": "Finding 3-Digit Even Numbers", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5561, "total_accepted": 13400.0, "total_submissions": 24100.0, "testcase_example": "'[2,1,3,0]'", "body": "You are given an integer array digits, where each element is a digit. The array may contain duplicates.\nYou need to find all the unique integers that follow the given requirements:\nThe integer consists of the concatenation of three elements from digits in any arbitrary order.\nThe integer does not have leading zeros.\nThe integer is even.\nFor example, if the given digits were [1, 2, 3], integers 132 and 312 follow the requirements.\nReturn a sorted array of the unique integers.", "examples": [{"full_text": "Example 1:\nInput: digits = [2,1,3,0]\nOutput: [102,120,130,132,210,230,302,310,312,320]\nExplanation: All the possible integers that follow the requirements are in the output array.\nNotice that there are no odd integers or integers with leading zeros.", "input": "Input: digits = [2,1,3,0]", "output": "Output: [102,120,130,132,210,230,302,310,312,320]", "explanation": "Explanation: All the possible integers that follow the requirements are in the output array.\nNotice that there are no odd integers or integers with leading zeros."}, {"full_text": "Example 2:\nInput: digits = [2,2,8,8,2]\nOutput: [222,228,282,288,822,828,882]\nExplanation: The same digit can be used as many times as it appears in digits.\nIn this example, the digit 8 is used twice each time in 288, 828, and 882.", "input": "Input: digits = [2,2,8,8,2]", "output": "Output: [222,228,282,288,822,828,882]", "explanation": "Explanation: The same digit can be used as many times as it appears in digits.\nIn this example, the digit 8 is used twice each time in 288, 828, and 882."}, {"full_text": "Example 3:\nInput: digits = [3,7,5]\nOutput: []\nExplanation: No even integers can be formed using the given digits.", "input": "Input: digits = [3,7,5]", "output": "Output: []", "explanation": "Explanation: No even integers can be formed using the given digits."}], "constraints": "Constraints:\n3 <= digits.length <= 100\n0 <= digits[i] <= 9", "notes": ""}, "2089": {"label": "Easy", "title": "Find Target Indices After Sorting Array", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.8101, "total_accepted": 38100.0, "total_submissions": 47000.0, "testcase_example": "'[1,2,5,2,3]\\n2'", "body": "You are given a 0-indexed integer array nums and a target element target.\nA target index is an index i such that nums[i] == target.\nReturn a list of the target indices of nums after sorting nums in non-decreasing order. If there are no target indices, return an empty list. The returned list must be sorted in increasing order.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,2,5,2,3], target = 2\nOutput: [1,2]\nExplanation: After sorting, nums is [1,2,2,3,5].\nThe indices where nums[i] == 2 are 1 and 2.", "input": "Input: nums = [1,2,5,2,3], target = 2", "output": "Output: [1,2]", "explanation": "Explanation: After sorting, nums is [1,2,2,3,5].\nThe indices where nums[i] == 2 are 1 and 2."}, {"full_text": "Example 2:\nInput: nums = [1,2,5,2,3], target = 3\nOutput: [3]\nExplanation: After sorting, nums is [1,2,2,3,5].\nThe index where nums[i] == 3 is 3.", "input": "Input: nums = [1,2,5,2,3], target = 3", "output": "Output: [3]", "explanation": "Explanation: After sorting, nums is [1,2,2,3,5].\nThe index where nums[i] == 3 is 3."}, {"full_text": "Example 3:\nInput: nums = [1,2,5,2,3], target = 5\nOutput: [4]\nExplanation: After sorting, nums is [1,2,2,3,5].\nThe index where nums[i] == 5 is 4.", "input": "Input: nums = [1,2,5,2,3], target = 5", "output": "Output: [4]", "explanation": "Explanation: After sorting, nums is [1,2,2,3,5].\nThe index where nums[i] == 5 is 4."}], "constraints": "Constraints:\n1 <= nums.length <= 100\n1 <= nums[i], target <= 100", "notes": ""}, "2085": {"label": "Easy", "title": "Count Common Words With One Occurrence", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7121, "total_accepted": 17400.0, "total_submissions": 24400.0, "testcase_example": "'[\"leetcode\",\"is\",\"amazing\",\"as\",\"is\"]\\n[\"amazing\",\"leetcode\",\"is\"]'", "body": "Given two string arrays words1 and words2, return the number of strings that appear exactly once in each\nof the two arrays.", "examples": [{"full_text": "Example 1:\nInput: words1 = [\"leetcode\",\"is\",\"amazing\",\"as\",\"is\"], words2 = [\"amazing\",\"leetcode\",\"is\"]\nOutput: 2\nExplanation:\n- \"leetcode\" appears exactly once in each of the two arrays. We count this string.\n- \"amazing\" appears exactly once in each of the two arrays. We count this string.\n- \"is\" appears in each of the two arrays, but there are 2 occurrences of it in words1. We do not count this string.\n- \"as\" appears once in words1, but does not appear in words2. We do not count this string.\nThus, there are 2 strings that appear exactly once in each of the two arrays.", "input": "Input: words1 = [\"leetcode\",\"is\",\"amazing\",\"as\",\"is\"], words2 = [\"amazing\",\"leetcode\",\"is\"]", "output": "Output: 2", "explanation": "Explanation:\n- \"leetcode\" appears exactly once in each of the two arrays. We count this string.\n- \"amazing\" appears exactly once in each of the two arrays. We count this string.\n- \"is\" appears in each of the two arrays, but there are 2 occurrences of it in words1. We do not count this string.\n- \"as\" appears once in words1, but does not appear in words2. We do not count this string.\nThus, there are 2 strings that appear exactly once in each of the two arrays."}, {"full_text": "Example 2:\nInput: words1 = [\"b\",\"bb\",\"bbb\"], words2 = [\"a\",\"aa\",\"aaa\"]\nOutput: 0\nExplanation: There are no strings that appear in each of the two arrays.", "input": "Input: words1 = [\"b\",\"bb\",\"bbb\"], words2 = [\"a\",\"aa\",\"aaa\"]", "output": "Output: 0", "explanation": "Explanation: There are no strings that appear in each of the two arrays."}, {"full_text": "Example 3:\nInput: words1 = [\"a\",\"ab\"], words2 = [\"a\",\"a\",\"a\",\"ab\"]\nOutput: 1\nExplanation: The only string that appears exactly once in each of the two arrays is \"ab\".", "input": "Input: words1 = [\"a\",\"ab\"], words2 = [\"a\",\"a\",\"a\",\"ab\"]", "output": "Output: 1", "explanation": "Explanation: The only string that appears exactly once in each of the two arrays is \"ab\"."}], "constraints": "Constraints:\n1 <= words1.length, words2.length <= 1000\n1 <= words1[i].length, words2[j].length <= 30\nwords1[i] and words2[j] consists only of lowercase English letters.", "notes": ""}, "2078": {"label": "Easy", "title": "Two Furthest Houses With Different Colors", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6920999999999999, "total_accepted": 19500.0, "total_submissions": 28200.0, "testcase_example": "'[1,1,1,6,1,1,1]'", "body": "There are n houses evenly lined up on the street, and each house is beautifully painted. You are given a 0-indexed integer array colors of length n, where colors[i] represents the color of the i^th house.\nReturn the maximum distance between two houses with different colors.\nThe distance between the i^th and j^th houses is abs(i - j), where abs(x) is the absolute value of x.", "examples": [{"full_text": "Example 1:\nInput: colors = [1,1,1,6,1,1,1]\nOutput: 3\nExplanation: In the above image, color 1 is blue, and color 6 is red.\nThe furthest two houses with different colors are house 0 and house 3.\nHouse 0 has color 1, and house 3 has color 6. The distance between them is abs(0 - 3) = 3.\nNote that houses 3 and 6 can also produce the optimal answer.", "input": "Input: colors = [1,1,1,6,1,1,1]", "output": "Output: 3", "explanation": "Explanation: In the above image, color 1 is blue, and color 6 is red.\nThe furthest two houses with different colors are house 0 and house 3.\nHouse 0 has color 1, and house 3 has color 6. The distance between them is abs(0 - 3) = 3.\nNote that houses 3 and 6 can also produce the optimal answer."}, {"full_text": "Example 2:\nInput: colors = [1,8,3,8,3]\nOutput: 4\nExplanation: In the above image, color 1 is blue, color 8 is yellow, and color 3 is green.\nThe furthest two houses with different colors are house 0 and house 4.\nHouse 0 has color 1, and house 4 has color 3. The distance between them is abs(0 - 4) = 4.", "input": "Input: colors = [1,8,3,8,3]", "output": "Output: 4", "explanation": "Explanation: In the above image, color 1 is blue, color 8 is yellow, and color 3 is green.\nThe furthest two houses with different colors are house 0 and house 4.\nHouse 0 has color 1, and house 4 has color 3. The distance between them is abs(0 - 4) = 4."}, {"full_text": "Example 3:\nInput: colors = [0,1]\nOutput: 1\nExplanation: The furthest two houses with different colors are house 0 and house 1.\nHouse 0 has color 0, and house 1 has color 1. The distance between them is abs(0 - 1) = 1.", "input": "Input: colors = [0,1]", "output": "Output: 1", "explanation": "Explanation: The furthest two houses with different colors are house 0 and house 1.\nHouse 0 has color 0, and house 1 has color 1. The distance between them is abs(0 - 1) = 1."}], "constraints": "Constraints:\nn ==\ncolors.length\n2 <= n <= 100\n0 <= colors[i] <= 100\nTest data are generated such that at least two houses have different colors.", "notes": ""}, "2073": {"label": "Easy", "title": "Time Needed to Buy Tickets", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6199, "total_accepted": 17300.0, "total_submissions": 27900.0, "testcase_example": "'[2,3,2]\\n2'", "body": "There are n people in a line queuing to buy tickets, where the 0^th person is at the front of the line and the (n - 1)^th person is at the back of the line.\nYou are given a 0-indexed integer array tickets of length n where the number of tickets that the i^th person would like to buy is tickets[i].\nEach person takes exactly 1 second to buy a ticket. A person can only buy 1 ticket at a time and has to go back to the end of the line (which happens instantaneously) in order to buy more tickets. If a person does not have any tickets left to buy, the person will leave the line.\nReturn the time taken for the person at position k\n(0-indexed)\nto finish buying tickets.", "examples": [{"full_text": "Example 1:\nInput: tickets = [2,3,2], k = 2\nOutput: 6\nExplanation:\n- In the first pass, everyone in the line buys a ticket and the line becomes [1, 2, 1].\n- In the second pass, everyone in the line buys a ticket and the line becomes [0, 1, 0].\nThe person at\nposition 2 has successfully bought 2 tickets and it took 3 + 3 = 6 seconds.", "input": "Input: tickets = [2,3,2], k = 2", "output": "Output: 6", "explanation": "Explanation:\n- In the first pass, everyone in the line buys a ticket and the line becomes [1, 2, 1].\n- In the second pass, everyone in the line buys a ticket and the line becomes [0, 1, 0].\nThe person at\nposition 2 has successfully bought 2 tickets and it took 3 + 3 = 6 seconds."}, {"full_text": "Example 2:\nInput: tickets = [5,1,1,1], k = 0\nOutput: 8\nExplanation:\n- In the first pass, everyone in the line buys a ticket and the line becomes [4, 0, 0, 0].\n- In the next 4 passes, only the person in position 0 is buying tickets.\nThe person at\nposition 0 has successfully bought 5 tickets and it took 4 + 1 + 1 + 1 + 1 = 8 seconds.", "input": "Input: tickets = [5,1,1,1], k = 0", "output": "Output: 8", "explanation": "Explanation:\n- In the first pass, everyone in the line buys a ticket and the line becomes [4, 0, 0, 0].\n- In the next 4 passes, only the person in position 0 is buying tickets.\nThe person at\nposition 0 has successfully bought 5 tickets and it took 4 + 1 + 1 + 1 + 1 = 8 seconds."}], "constraints": "Constraints:\nn == tickets.length\n1 <= n <= 100\n1 <= tickets[i] <= 100\n0 <= k < n", "notes": ""}, "2068": {"label": "Easy", "title": "Check Whether Two Strings are Almost Equivalent", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6683, "total_accepted": 14100.0, "total_submissions": 21100.0, "testcase_example": "'\"aaaa\"\\n\"bccb\"'", "body": "Two strings word1 and word2 are considered almost equivalent if the differences between the frequencies of each letter from 'a' to 'z' between word1 and word2 is at most 3.\nGiven two strings word1 and word2, each of length n, return true if word1 and word2 are almost equivalent, or false otherwise.\nThe frequency of a letter x is the number of times it occurs in the string.", "examples": [{"full_text": "Example 1:\nInput: word1 = \"aaaa\", word2 = \"bccb\"\nOutput: false\nExplanation: There are 4 'a's in \"aaaa\" but 0 'a's in \"bccb\".\nThe difference is 4, which is more than the allowed 3.", "input": "Input: word1 = \"aaaa\", word2 = \"bccb\"", "output": "Output: false", "explanation": "Explanation: There are 4 'a's in \"aaaa\" but 0 'a's in \"bccb\".\nThe difference is 4, which is more than the allowed 3."}, {"full_text": "Example 2:\nInput: word1 = \"abcdeef\", word2 = \"abaaacc\"\nOutput: true\nExplanation: The differences between the frequencies of each letter in word1 and word2 are at most 3:\n- 'a' appears 1 time in word1 and 4 times in word2. The difference is 3.\n- 'b' appears 1 time in word1 and 1 time in word2. The difference is 0.\n- 'c' appears 1 time in word1 and 2 times in word2. The difference is 1.\n- 'd' appears 1 time in word1 and 0 times in word2. The difference is 1.\n- 'e' appears 2 times in word1 and 0 times in word2. The difference is 2.\n- 'f' appears 1 time in word1 and 0 times in word2. The difference is 1.", "input": "Input: word1 = \"abcdeef\", word2 = \"abaaacc\"", "output": "Output: true", "explanation": "Explanation: The differences between the frequencies of each letter in word1 and word2 are at most 3:\n- 'a' appears 1 time in word1 and 4 times in word2. The difference is 3.\n- 'b' appears 1 time in word1 and 1 time in word2. The difference is 0.\n- 'c' appears 1 time in word1 and 2 times in word2. The difference is 1.\n- 'd' appears 1 time in word1 and 0 times in word2. The difference is 1.\n- 'e' appears 2 times in word1 and 0 times in word2. The difference is 2.\n- 'f' appears 1 time in word1 and 0 times in word2. The difference is 1."}, {"full_text": "Example 3:\nInput: word1 = \"cccddabba\", word2 = \"babababab\"\nOutput: true\nExplanation: The differences between the frequencies of each letter in word1 and word2 are at most 3:\n- 'a' appears 2 times in word1 and 4 times in word2. The difference is 2.\n- 'b' appears 2 times in word1 and 5 times in word2. The difference is 3.\n- 'c' appears 3 times in word1 and 0 times in word2. The difference is 3.\n- 'd' appears 2 times in word1 and 0 times in word2. The difference is 2.", "input": "Input: word1 = \"cccddabba\", word2 = \"babababab\"", "output": "Output: true", "explanation": "Explanation: The differences between the frequencies of each letter in word1 and word2 are at most 3:\n- 'a' appears 2 times in word1 and 4 times in word2. The difference is 2.\n- 'b' appears 2 times in word1 and 5 times in word2. The difference is 3.\n- 'c' appears 3 times in word1 and 0 times in word2. The difference is 3.\n- 'd' appears 2 times in word1 and 0 times in word2. The difference is 2."}], "constraints": "Constraints:\nn == word1.length == word2.length\n1 <= n <= 100\nword1 and word2 consist only of lowercase English letters.", "notes": ""}, "2062": {"label": "Easy", "title": "Count Vowel Substrings of a String", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6598, "total_accepted": 14300.0, "total_submissions": 21700.0, "testcase_example": "'\"aeiouu\"'", "body": "A substring is a contiguous (non-empty) sequence of characters within a string.\nA vowel substring is a substring that only consists of vowels ('a', 'e', 'i', 'o', and 'u') and has all five vowels present in it.\nGiven a string word, return the number of vowel substrings in word.", "examples": [{"full_text": "Example 1:\nInput: word = \"aeiouu\"\nOutput: 2\nExplanation: The vowel substrings of word are as follows (underlined):\n- \"aeiouu\"\n- \"aeiouu\"", "input": "Input: word = \"aeiouu\"", "output": "Output: 2", "explanation": "Explanation: The vowel substrings of word are as follows (underlined):\n- \"aeiouu\"\n- \"aeiouu\""}, {"full_text": "Example 2:\nInput: word = \"unicornarihan\"\nOutput: 0\nExplanation: Not all 5 vowels are present, so there are no vowel substrings.", "input": "Input: word = \"unicornarihan\"", "output": "Output: 0", "explanation": "Explanation: Not all 5 vowels are present, so there are no vowel substrings."}, {"full_text": "Example 3:\nInput: word = \"cuaieuouac\"\nOutput: 7\nExplanation: The vowel substrings of word are as follows (underlined):\n- \"cuaieuouac\"\n- \"cuaieuouac\"\n- \"cuaieuouac\"\n- \"cuaieuouac\"\n- \"cuaieuouac\"\n- \"cuaieuouac\"\n- \"cuaieuouac\"", "input": "Input: word = \"cuaieuouac\"", "output": "Output: 7", "explanation": "Explanation: The vowel substrings of word are as follows (underlined):\n- \"cuaieuouac\"\n- \"cuaieuouac\"\n- \"cuaieuouac\"\n- \"cuaieuouac\"\n- \"cuaieuouac\"\n- \"cuaieuouac\"\n- \"cuaieuouac\""}], "constraints": "Constraints:\n1 <= word.length <= 100\nword consists of lowercase English letters only.", "notes": ""}, "2057": {"label": "Easy", "title": "Smallest Index With Equal Value", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7367, "total_accepted": 20200.0, "total_submissions": 27400.0, "testcase_example": "'[0,1,2]'", "body": "Given a 0-indexed integer array nums, return the smallest index i of nums such that i mod 10 == nums[i], or -1 if such index does not exist.\nx mod y denotes the remainder when x is divided by y.", "examples": [{"full_text": "Example 1:\nInput: nums = [0,1,2]\nOutput: 0\nExplanation:\ni=0: 0 mod 10 = 0 == nums[0].\ni=1: 1 mod 10 = 1 == nums[1].\ni=2: 2 mod 10 = 2 == nums[2].\nAll indices have i mod 10 == nums[i], so we return the smallest index 0.", "input": "Input: nums = [0,1,2]", "output": "Output: 0", "explanation": "Explanation:\ni=0: 0 mod 10 = 0 == nums[0].\ni=1: 1 mod 10 = 1 == nums[1].\ni=2: 2 mod 10 = 2 == nums[2].\nAll indices have i mod 10 == nums[i], so we return the smallest index 0."}, {"full_text": "Example 2:\nInput: nums = [4,3,2,1]\nOutput: 2\nExplanation:\ni=0: 0 mod 10 = 0 != nums[0].\ni=1: 1 mod 10 = 1 != nums[1].\ni=2: 2 mod 10 = 2 == nums[2].\ni=3: 3 mod 10 = 3 != nums[3].\n2 is the only index which has i mod 10 == nums[i].", "input": "Input: nums = [4,3,2,1]", "output": "Output: 2", "explanation": "Explanation:\ni=0: 0 mod 10 = 0 != nums[0].\ni=1: 1 mod 10 = 1 != nums[1].\ni=2: 2 mod 10 = 2 == nums[2].\ni=3: 3 mod 10 = 3 != nums[3].\n2 is the only index which has i mod 10 == nums[i]."}, {"full_text": "Example 3:\nInput: nums = [1,2,3,4,5,6,7,8,9,0]\nOutput: -1\nExplanation: No index satisfies i mod 10 == nums[i].", "input": "Input: nums = [1,2,3,4,5,6,7,8,9,0]", "output": "Output: -1", "explanation": "Explanation: No index satisfies i mod 10 == nums[i]."}], "constraints": "Constraints:\n1 <= nums.length <= 100\n0 <= nums[i] <= 9", "notes": ""}, "2053": {"label": "Easy", "title": "Kth Distinct String in an Array", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7343000000000001, "total_accepted": 17800.0, "total_submissions": 24300.0, "testcase_example": "'[\"d\",\"b\",\"c\",\"b\",\"c\",\"a\"]\\n2'", "body": "A distinct string is a string that is present only once in an array.\nGiven an array of strings arr, and an integer k, return the k^th distinct string present in arr. If there are fewer than k distinct strings, return an empty string \"\".\nNote that the strings are considered in the order in which they appear in the array.", "examples": [{"full_text": "Example 1:\nInput: arr = [\"d\",\"b\",\"c\",\"b\",\"c\",\"a\"], k = 2\nOutput: \"a\"\nExplanation:\nThe only distinct strings in arr are \"d\" and \"a\".\n\"d\" appears 1^st, so it is the 1^st distinct string.\n\"a\" appears 2^nd, so it is the 2^nd distinct string.\nSince k == 2, \"a\" is returned.", "input": "Input: arr = [\"d\",\"b\",\"c\",\"b\",\"c\",\"a\"], k = 2", "output": "Output: \"a\"", "explanation": "Explanation:\nThe only distinct strings in arr are \"d\" and \"a\".\n\"d\" appears 1^st, so it is the 1^st distinct string.\n\"a\" appears 2^nd, so it is the 2^nd distinct string.\nSince k == 2, \"a\" is returned."}, {"full_text": "Example 2:\nInput: arr = [\"aaa\",\"aa\",\"a\"], k = 1\nOutput: \"aaa\"\nExplanation:\nAll strings in arr are distinct, so the 1^st string \"aaa\" is returned.", "input": "Input: arr = [\"aaa\",\"aa\",\"a\"], k = 1", "output": "Output: \"aaa\"", "explanation": "Explanation:\nAll strings in arr are distinct, so the 1^st string \"aaa\" is returned."}, {"full_text": "Example 3:\nInput: arr = [\"a\",\"b\",\"a\"], k = 3\nOutput: \"\"\nExplanation:\nThe only distinct string is \"b\". Since there are fewer than 3 distinct strings, we return an empty string \"\".", "input": "Input: arr = [\"a\",\"b\",\"a\"], k = 3", "output": "Output: \"\"", "explanation": "Explanation:\nThe only distinct string is \"b\". Since there are fewer than 3 distinct strings, we return an empty string \"\"."}], "constraints": "Constraints:\n1 <= k <= arr.length <= 1000\n1 <= arr[i].length <= 5\narr[i] consists of lowercase English letters.", "notes": ""}, "2047": {"label": "Easy", "title": "Number of Valid Words in a Sentence", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.2937, "total_accepted": 12400.0, "total_submissions": 42200.0, "testcase_example": "'\"cat and dog\"'", "body": "A sentence consists of lowercase letters ('a' to 'z'), digits ('0' to '9'), hyphens ('-'), punctuation marks ('!', '.', and ','), and spaces (' ') only. Each sentence can be broken down into one or more tokens separated by one or more spaces ' '.\nA token is a valid word if all three of the following are true:\nIt only contains lowercase letters, hyphens, and/or punctuation (no digits).\nThere is at most one hyphen '-'. If present, it must be surrounded by lowercase characters (\"a-b\" is valid, but \"-ab\" and \"ab-\" are not valid).\nThere is at most one punctuation mark. If present, it must be at the end of the token (\"ab,\", \"cd!\", and \".\" are valid, but \"a!b\" and \"c.,\" are not valid).\nExamples of valid words include \"a-b.\", \"afad\", \"ba-c\", \"a!\", and \"!\".\nGiven a string sentence, return the number of valid words in sentence.", "examples": [{"full_text": "Example 1:\nInput: sentence = \"cat and dog\"\nOutput: 3\nExplanation: The valid words in the sentence are \"cat\", \"and\", and \"dog\".", "input": "Input: sentence = \"cat and dog\"", "output": "Output: 3", "explanation": "Explanation: The valid words in the sentence are \"cat\", \"and\", and \"dog\"."}, {"full_text": "Example 2:\nInput: sentence = \"!this 1-s b8d!\"\nOutput: 0\nExplanation: There are no valid words in the sentence.\n\"!this\" is invalid because it starts with a punctuation mark.\n\"1-s\" and \"b8d\" are invalid because they contain digits.", "input": "Input: sentence = \"!this 1-s b8d!\"", "output": "Output: 0", "explanation": "Explanation: There are no valid words in the sentence.\n\"!this\" is invalid because it starts with a punctuation mark.\n\"1-s\" and \"b8d\" are invalid because they contain digits."}, {"full_text": "Example 3:\nInput: sentence = \"alice and bob are playing stone-game10\"\nOutput: 5\nExplanation: The valid words in the sentence are \"alice\", \"and\", \"bob\", \"are\", and \"playing\".\n\"stone-game10\" is invalid because it contains digits.", "input": "Input: sentence = \"alice and bob are playing stone-game10\"", "output": "Output: 5", "explanation": "Explanation: The valid words in the sentence are \"alice\", \"and\", \"bob\", \"are\", and \"playing\".\n\"stone-game10\" is invalid because it contains digits."}], "constraints": "Constraints:\n1 <= sentence.length <= 1000\nsentence only contains lowercase English letters, digits, ' ', '-', '!', '.', and ','.\nThere will be at least\n1 token.", "notes": ""}, "2042": {"label": "Easy", "title": "Check if Numbers Are Ascending in a Sentence", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6907, "total_accepted": 19600.0, "total_submissions": 28300.0, "testcase_example": "'\"1 box has 3 blue 4 red 6 green and 12 yellow marbles\"'", "body": "A sentence is a list of tokens separated by a single space with no leading or trailing spaces. Every token is either a positive number consisting of digits 0-9 with no leading zeros, or a word consisting of lowercase English letters.\nFor example, \"a puppy has 2 eyes 4 legs\" is a sentence with seven tokens: \"2\" and \"4\" are numbers and the other tokens such as \"puppy\" are words.\nGiven a string s representing a sentence, you need to check if all the numbers in s are strictly increasing from left to right (i.e., other than the last number, each number is strictly smaller than the number on its right in s).\nReturn true if so, or false otherwise.", "examples": [{"full_text": "Example 1:\nInput: s = \"1 box has 3 blue 4 red 6 green and 12 yellow marbles\"\nOutput: true\nExplanation: The numbers in s are: 1, 3, 4, 6, 12.\nThey are strictly increasing from left to right: 1 < 3 < 4 < 6 < 12.", "input": "Input: s = \"1 box has 3 blue 4 red 6 green and 12 yellow marbles\"", "output": "Output: true", "explanation": "Explanation: The numbers in s are: 1, 3, 4, 6, 12.\nThey are strictly increasing from left to right: 1 < 3 < 4 < 6 < 12."}, {"full_text": "Example 2:\nInput: s = \"hello world 5 x 5\"\nOutput: false\nExplanation: The numbers in s are: 5, 5. They are not strictly increasing.", "input": "Input: s = \"hello world 5 x 5\"", "output": "Output: false", "explanation": "Explanation: The numbers in s are: 5, 5. They are not strictly increasing."}, {"full_text": "Example 3:\nInput: s = \"sunset is at 7 51 pm overnight lows will be in the low 50 and 60 s\"\nOutput: false\nExplanation: The numbers in s are: 7, 51, 50, 60. They are not strictly increasing.", "input": "Input: s = \"sunset is at 7 51 pm overnight lows will be in the low 50 and 60 s\"", "output": "Output: false", "explanation": "Explanation: The numbers in s are: 7, 51, 50, 60. They are not strictly increasing."}], "constraints": "Constraints:\n3 <= s.length <= 200\ns consists of lowercase English letters, spaces, and digits from 0 to 9, inclusive.\nThe number of tokens in s is between 2 and 100, inclusive.\nThe tokens in s are separated by a single space.\nThere are at least two numbers in s.\nEach number in s is a positive number less than 100, with no leading zeros.\ns contains no leading or trailing spaces.", "notes": ""}, "2037": {"label": "Easy", "title": "Minimum Number of Moves to Seat Everyone", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.8301999999999999, "total_accepted": 18500.0, "total_submissions": 22300.0, "testcase_example": "'[3,1,5]\\n[2,7,4]'", "body": "There are n seats and n students in a room. You are given an array seats of length n, where seats[i] is the position of the i^th seat. You are also given the array students of length n, where students[j] is the position of the j^th student.\nYou may perform the following move any number of times:\nIncrease or decrease the position of the i^th student by 1 (i.e., moving the i^th student from position\nx\nto x + 1 or x - 1)\nReturn the minimum number of moves required to move each student to a seat such that no two students are in the same seat.\nNote that there may be multiple seats or students in the same position at the beginning.", "examples": [{"full_text": "Example 1:\nInput: seats = [3,1,5], students = [2,7,4]\nOutput: 4\nExplanation: The students are moved as follows:\n- The first student is moved from from position 2 to position 1 using 1 move.\n- The second student is moved from from position 7 to position 5 using 2 moves.\n- The third student is moved from from position 4 to position 3 using 1 move.\nIn total, 1 + 2 + 1 = 4 moves were used.", "input": "Input: seats = [3,1,5], students = [2,7,4]", "output": "Output: 4", "explanation": "Explanation: The students are moved as follows:\n- The first student is moved from from position 2 to position 1 using 1 move.\n- The second student is moved from from position 7 to position 5 using 2 moves.\n- The third student is moved from from position 4 to position 3 using 1 move.\nIn total, 1 + 2 + 1 = 4 moves were used."}, {"full_text": "Example 2:\nInput: seats = [4,1,5,9], students = [1,3,2,6]\nOutput: 7\nExplanation: The students are moved as follows:\n- The first student is not moved.\n- The second student is moved from from position 3 to position 4 using 1 move.\n- The third student is moved from from position 2 to position 5 using 3 moves.\n- The fourth student is moved from from position 6 to position 9 using 3 moves.\nIn total, 0 + 1 + 3 + 3 = 7 moves were used.", "input": "Input: seats = [4,1,5,9], students = [1,3,2,6]", "output": "Output: 7", "explanation": "Explanation: The students are moved as follows:\n- The first student is not moved.\n- The second student is moved from from position 3 to position 4 using 1 move.\n- The third student is moved from from position 2 to position 5 using 3 moves.\n- The fourth student is moved from from position 6 to position 9 using 3 moves.\nIn total, 0 + 1 + 3 + 3 = 7 moves were used."}, {"full_text": "Example 3:\nInput: seats = [2,2,6,6], students = [1,3,2,6]\nOutput: 4\nExplanation: Note that there are two seats at position 2 and two seats at position 6.\nThe students are moved as follows:\n- The first student is moved from from position 1 to position 2 using 1 move.\n- The second student is moved from from position 3 to position 6 using 3 moves.\n- The third student is not moved.\n- The fourth student is not moved.\nIn total, 1 + 3 + 0 + 0 = 4 moves were used.", "input": "Input: seats = [2,2,6,6], students = [1,3,2,6]", "output": "Output: 4", "explanation": "Explanation: Note that there are two seats at position 2 and two seats at position 6.\nThe students are moved as follows:\n- The first student is moved from from position 1 to position 2 using 1 move.\n- The second student is moved from from position 3 to position 6 using 3 moves.\n- The third student is not moved.\n- The fourth student is not moved.\nIn total, 1 + 3 + 0 + 0 = 4 moves were used."}], "constraints": "Constraints:\nn == seats.length == students.length\n1 <= n <= 100\n1 <= seats[i], students[j] <= 100", "notes": ""}, "2032": {"label": "Easy", "title": "Two Out of Three", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7265999999999999, "total_accepted": 21800.0, "total_submissions": 30000.0, "testcase_example": "'[1,1,3,2]\\n[2,3]\\n[3]'", "body": "Given three integer arrays nums1, nums2, and nums3, return a distinct array containing all the values that are present in at least two out of the three arrays. You may return the values in any order.", "examples": [{"full_text": "Example 1:\nInput: nums1 = [1,1,3,2], nums2 = [2,3], nums3 = [3]\nOutput: [3,2]\nExplanation: The values that are present in at least two arrays are:\n- 3, in all three arrays.\n- 2, in nums1 and nums2.", "input": "Input: nums1 = [1,1,3,2], nums2 = [2,3], nums3 = [3]", "output": "Output: [3,2]", "explanation": "Explanation: The values that are present in at least two arrays are:\n- 3, in all three arrays.\n- 2, in nums1 and nums2."}, {"full_text": "Example 2:\nInput: nums1 = [3,1], nums2 = [2,3], nums3 = [1,2]\nOutput: [2,3,1]\nExplanation: The values that are present in at least two arrays are:\n- 2, in nums2 and nums3.\n- 3, in nums1 and nums2.\n- 1, in nums1 and nums3.", "input": "Input: nums1 = [3,1], nums2 = [2,3], nums3 = [1,2]", "output": "Output: [2,3,1]", "explanation": "Explanation: The values that are present in at least two arrays are:\n- 2, in nums2 and nums3.\n- 3, in nums1 and nums2.\n- 1, in nums1 and nums3."}, {"full_text": "Example 3:\nInput: nums1 = [1,2,2], nums2 = [4,3,3], nums3 = [5]\nOutput: []\nExplanation: No value is present in at least two arrays.", "input": "Input: nums1 = [1,2,2], nums2 = [4,3,3], nums3 = [5]", "output": "Output: []", "explanation": "Explanation: No value is present in at least two arrays."}], "constraints": "Constraints:\n1 <= nums1.length, nums2.length, nums3.length <= 100\n1 <= nums1[i], nums2[j], nums3[k] <= 100", "notes": ""}, "2027": {"label": "Easy", "title": "Minimum Moves to Convert String", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5303, "total_accepted": 16200.0, "total_submissions": 30500.0, "testcase_example": "'\"XXX\"'", "body": "You are given a string s consisting of n characters which are either 'X' or 'O'.\nA move is defined as selecting three consecutive characters of s and converting them to 'O'. Note that if a move is applied to the character 'O', it will stay the same.\nReturn the minimum number of moves required so that all the characters of s are converted to 'O'.", "examples": [{"full_text": "Example 1:\nInput: s = \"XXX\"\nOutput: 1\nExplanation: XXX -> OOO\nWe select all the 3 characters and convert them in one move.", "input": "Input: s = \"XXX\"", "output": "Output: 1", "explanation": "Explanation: XXX -> OOO\nWe select all the 3 characters and convert them in one move."}, {"full_text": "Example 2:\nInput: s = \"XXOX\"\nOutput: 2\nExplanation: XXOX -> OOOX -> OOOO\nWe select the first 3 characters in the first move, and convert them to 'O'.\nThen we select the last 3 characters and convert them so that the final string contains all 'O's.", "input": "Input: s = \"XXOX\"", "output": "Output: 2", "explanation": "Explanation: XXOX -> OOOX -> OOOO\nWe select the first 3 characters in the first move, and convert them to 'O'.\nThen we select the last 3 characters and convert them so that the final string contains all 'O's."}, {"full_text": "Example 3:\nInput: s = \"OOOO\"\nOutput: 0\nExplanation: There are no 'X's in s to convert.", "input": "Input: s = \"OOOO\"", "output": "Output: 0", "explanation": "Explanation: There are no 'X's in s to convert."}], "constraints": "Constraints:\n3 <= s.length <= 1000\ns[i] is either 'X' or 'O'.", "notes": ""}, "2022": {"label": "Easy", "title": "Convert 1D Array Into 2D Array", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6047, "total_accepted": 22800.0, "total_submissions": 37600.0, "testcase_example": "'[1,2,3,4]\\n2\\n2'", "body": "You are given a 0-indexed 1-dimensional (1D) integer array original, and two integers, m and n. You are tasked with creating a 2-dimensional (2D) array with m rows and n columns using all the elements from original.\nThe elements from indices 0 to n - 1 (inclusive) of original should form the first row of the constructed 2D array, the elements from indices n to 2 * n - 1 (inclusive) should form the second row of the constructed 2D array, and so on.\nReturn an m x n 2D array constructed according to the above procedure, or an empty 2D array if it is impossible.", "examples": [{"full_text": "Example 1:\nInput: original = [1,2,3,4], m = 2, n = 2\nOutput: [[1,2],[3,4]]\nExplanation: The constructed 2D array should contain 2 rows and 2 columns.\nThe first group of n=2 elements in original, [1,2], becomes the first row in the constructed 2D array.\nThe second group of n=2 elements in original, [3,4], becomes the second row in the constructed 2D array.", "input": "Input: original = [1,2,3,4], m = 2, n = 2", "output": "Output: [[1,2],[3,4]]", "explanation": "Explanation: The constructed 2D array should contain 2 rows and 2 columns.\nThe first group of n=2 elements in original, [1,2], becomes the first row in the constructed 2D array.\nThe second group of n=2 elements in original, [3,4], becomes the second row in the constructed 2D array."}, {"full_text": "Example 2:\nInput: original = [1,2,3], m = 1, n = 3\nOutput: [[1,2,3]]\nExplanation: The constructed 2D array should contain 1 row and 3 columns.\nPut all three elements in original into the first row of the constructed 2D array.", "input": "Input: original = [1,2,3], m = 1, n = 3", "output": "Output: [[1,2,3]]", "explanation": "Explanation: The constructed 2D array should contain 1 row and 3 columns.\nPut all three elements in original into the first row of the constructed 2D array."}, {"full_text": "Example 3:\nInput: original = [1,2], m = 1, n = 1\nOutput: []\nExplanation: There are 2 elements in original.\nIt is impossible to fit 2 elements in a 1x1 2D array, so return an empty 2D array.", "input": "Input: original = [1,2], m = 1, n = 1", "output": "Output: []", "explanation": "Explanation: There are 2 elements in original.\nIt is impossible to fit 2 elements in a 1x1 2D array, so return an empty 2D array."}], "constraints": "Constraints:\n1 <= original.length <= 5 * 10^4\n1 <= original[i] <= 10^5\n1 <= m, n <= 4 * 10^4", "notes": ""}, "2016": {"label": "Easy", "title": "Maximum Difference Between Increasing Elements", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5502, "total_accepted": 25000.0, "total_submissions": 45400.0, "testcase_example": "'[7,1,5,4]'", "body": "Given a 0-indexed integer array nums of size n, find the maximum difference between nums[i] and nums[j] (i.e., nums[j] - nums[i]), such that 0 <= i < j < n and nums[i] < nums[j].\nReturn the maximum difference. If no such i and j exists, return -1.", "examples": [{"full_text": "Example 1:\nInput: nums = [7,1,5,4]\nOutput: 4\nExplanation:\nThe maximum difference occurs with i = 1 and j = 2, nums[j] - nums[i] = 5 - 1 = 4.\nNote that with i = 1 and j = 0, the difference nums[j] - nums[i] = 7 - 1 = 6, but i > j, so it is not valid.", "input": "Input: nums = [7,1,5,4]", "output": "Output: 4", "explanation": "Explanation:\nThe maximum difference occurs with i = 1 and j = 2, nums[j] - nums[i] = 5 - 1 = 4.\nNote that with i = 1 and j = 0, the difference nums[j] - nums[i] = 7 - 1 = 6, but i > j, so it is not valid."}, {"full_text": "Example 2:\nInput: nums = [9,4,3,2]\nOutput: -1\nExplanation:\nThere is no i and j such that i < j and nums[i] < nums[j].", "input": "Input: nums = [9,4,3,2]", "output": "Output: -1", "explanation": "Explanation:\nThere is no i and j such that i < j and nums[i] < nums[j]."}, {"full_text": "Example 3:\nInput: nums = [1,5,2,10]\nOutput: 9\nExplanation:\nThe maximum difference occurs with i = 0 and j = 3, nums[j] - nums[i] = 10 - 1 = 9.", "input": "Input: nums = [1,5,2,10]", "output": "Output: 9", "explanation": "Explanation:\nThe maximum difference occurs with i = 0 and j = 3, nums[j] - nums[i] = 10 - 1 = 9."}], "constraints": "Constraints:\nn == nums.length\n2 <= n <= 1000\n1 <= nums[i] <= 10^9", "notes": ""}, "2011": {"label": "Easy", "title": "Final Value of Variable After Performing Operations", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.8926999999999999, "total_accepted": 73500.0, "total_submissions": 82300.0, "testcase_example": "'[\"--X\",\"X++\",\"X++\"]'", "body": "There is a programming language with only four operations and one variable X:\n++X and X++ increments the value of the variable X by 1.\n--X and X-- decrements the value of the variable X by 1.\nInitially, the value of X is 0.\nGiven an array of strings operations containing a list of operations, return the final value of X after performing all the operations.", "examples": [{"full_text": "Example 1:\nInput: operations = [\"--X\",\"X++\",\"X++\"]\nOutput: 1\nExplanation:\nThe operations are performed as follows:\nInitially, X = 0.\n--X: X is decremented by 1, X = 0 - 1 = -1.\nX++: X is incremented by 1, X = -1 + 1 = 0.\nX++: X is incremented by 1, X = 0 + 1 = 1.", "input": "Input: operations = [\"--X\",\"X++\",\"X++\"]", "output": "Output: 1", "explanation": "Explanation:\nThe operations are performed as follows:\nInitially, X = 0.\n--X: X is decremented by 1, X = 0 - 1 = -1.\nX++: X is incremented by 1, X = -1 + 1 = 0.\nX++: X is incremented by 1, X = 0 + 1 = 1."}, {"full_text": "Example 2:\nInput: operations = [\"++X\",\"++X\",\"X++\"]\nOutput: 3\nExplanation: The operations are performed as follows:\nInitially, X = 0.\n++X: X is incremented by 1, X = 0 + 1 = 1.\n++X: X is incremented by 1, X = 1 + 1 = 2.\nX++: X is incremented by 1, X = 2 + 1 = 3.", "input": "Input: operations = [\"++X\",\"++X\",\"X++\"]", "output": "Output: 3", "explanation": "Explanation: The operations are performed as follows:\nInitially, X = 0.\n++X: X is incremented by 1, X = 0 + 1 = 1.\n++X: X is incremented by 1, X = 1 + 1 = 2.\nX++: X is incremented by 1, X = 2 + 1 = 3."}, {"full_text": "Example 3:\nInput: operations = [\"X++\",\"++X\",\"--X\",\"X--\"]\nOutput: 0\nExplanation:\nThe operations are performed as follows:\nInitially, X = 0.\nX++: X is incremented by 1, X = 0 + 1 = 1.\n++X: X is incremented by 1, X = 1 + 1 = 2.\n--X: X is decremented by 1, X = 2 - 1 = 1.\nX--: X is decremented by 1, X = 1 - 1 = 0.", "input": "Input: operations = [\"X++\",\"++X\",\"--X\",\"X--\"]", "output": "Output: 0", "explanation": "Explanation:\nThe operations are performed as follows:\nInitially, X = 0.\nX++: X is incremented by 1, X = 0 + 1 = 1.\n++X: X is incremented by 1, X = 1 + 1 = 2.\n--X: X is decremented by 1, X = 2 - 1 = 1.\nX--: X is decremented by 1, X = 1 - 1 = 0."}], "constraints": "Constraints:\n1 <= operations.length <= 100\noperations[i] will be either \"++X\", \"X++\", \"--X\", or \"X--\".", "notes": ""}, "2006": {"label": "Easy", "title": "Count Number of Pairs With Absolute Difference K", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.8334, "total_accepted": 36700.0, "total_submissions": 44100.0, "testcase_example": "'[1,2,2,1]\\n1'", "body": "Given an integer array nums and an integer k, return the number of pairs (i, j) where i < j such that |nums[i] - nums[j]| == k.\nThe value of |x| is defined as:\nx if x >= 0.\n-x if x < 0.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,2,2,1], k = 1\nOutput: 4\nExplanation: The pairs with an absolute difference of 1 are:\n- [1,2,2,1]\n- [1,2,2,1]\n- [1,2,2,1]\n- [1,2,2,1]", "input": "Input: nums = [1,2,2,1], k = 1", "output": "Output: 4", "explanation": "Explanation: The pairs with an absolute difference of 1 are:\n- [1,2,2,1]\n- [1,2,2,1]\n- [1,2,2,1]\n- [1,2,2,1]"}, {"full_text": "Example 2:\nInput: nums = [1,3], k = 3\nOutput: 0\nExplanation: There are no pairs with an absolute difference of 3.", "input": "Input: nums = [1,3], k = 3", "output": "Output: 0", "explanation": "Explanation: There are no pairs with an absolute difference of 3."}, {"full_text": "Example 3:\nInput: nums = [3,2,1,5,4], k = 2\nOutput: 3\nExplanation: The pairs with an absolute difference of 2 are:\n- [3,2,1,5,4]\n- [3,2,1,5,4]\n- [3,2,1,5,4]", "input": "Input: nums = [3,2,1,5,4], k = 2", "output": "Output: 3", "explanation": "Explanation: The pairs with an absolute difference of 2 are:\n- [3,2,1,5,4]\n- [3,2,1,5,4]\n- [3,2,1,5,4]"}], "constraints": "Constraints:\n1 <= nums.length <= 200\n1 <= nums[i] <= 100\n1 <= k <= 99", "notes": ""}, "2000": {"label": "Easy", "title": "Reverse Prefix of Word", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7818999999999999, "total_accepted": 27500.0, "total_submissions": 35200.0, "testcase_example": "'\"abcdefd\"\\n\"d\"'", "body": "Given a 0-indexed string word and a character ch, reverse the segment of word that starts at index 0 and ends at the index of the first occurrence of ch (inclusive). If the character ch does not exist in word, do nothing.\nFor example, if word = \"abcdefd\" and ch = \"d\", then you should reverse the segment that starts at 0 and ends at 3 (inclusive). The resulting string will be \"dcbaefd\".\nReturn the resulting string.", "examples": [{"full_text": "Example 1:\nInput: word = \"abcdefd\", ch = \"d\"\nOutput: \"dcbaefd\"\nExplanation:\nThe first occurrence of \"d\" is at index 3.\nReverse the part of word from 0 to 3 (inclusive), the resulting string is \"dcbaefd\".", "input": "Input: word = \"abcdefd\", ch = \"d\"", "output": "Output: \"dcbaefd\"", "explanation": "Explanation:\nThe first occurrence of \"d\" is at index 3.\nReverse the part of word from 0 to 3 (inclusive), the resulting string is \"dcbaefd\"."}, {"full_text": "Example 2:\nInput: word = \"xyxzxe\", ch = \"z\"\nOutput: \"zxyxxe\"\nExplanation:\nThe first and only occurrence of \"z\" is at index 3.\nReverse the part of word from 0 to 3 (inclusive), the resulting string is \"zxyxxe\".", "input": "Input: word = \"xyxzxe\", ch = \"z\"", "output": "Output: \"zxyxxe\"", "explanation": "Explanation:\nThe first and only occurrence of \"z\" is at index 3.\nReverse the part of word from 0 to 3 (inclusive), the resulting string is \"zxyxxe\"."}, {"full_text": "Example 3:\nInput: word = \"abcd\", ch = \"z\"\nOutput: \"abcd\"\nExplanation:\n\"z\" does not exist in word.\nYou should not do any reverse operation, the resulting string is \"abcd\".", "input": "Input: word = \"abcd\", ch = \"z\"", "output": "Output: \"abcd\"", "explanation": "Explanation:\n\"z\" does not exist in word.\nYou should not do any reverse operation, the resulting string is \"abcd\"."}], "constraints": "Constraints:\n1 <= word.length <= 250\nword consists of lowercase English letters.\nch is a lowercase English letter.", "notes": ""}, "1995": {"label": "Easy", "title": "Count Special Quadruplets", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5761, "total_accepted": 17200.0, "total_submissions": 29800.0, "testcase_example": "'[1,2,3,6]'", "body": "Given a 0-indexed integer array nums, return the number of distinct quadruplets (a, b, c, d) such that:\nnums[a] + nums[b] + nums[c] == nums[d], and\na < b < c < d", "examples": [{"full_text": "Example 1:\nInput: nums = [1,2,3,6]\nOutput: 1\nExplanation: The only quadruplet that satisfies the requirement is (0, 1, 2, 3) because 1 + 2 + 3 == 6.", "input": "Input: nums = [1,2,3,6]", "output": "Output: 1", "explanation": "Explanation: The only quadruplet that satisfies the requirement is (0, 1, 2, 3) because 1 + 2 + 3 == 6."}, {"full_text": "Example 2:\nInput: nums = [3,3,6,4,5]\nOutput: 0\nExplanation: There are no such quadruplets in [3,3,6,4,5].", "input": "Input: nums = [3,3,6,4,5]", "output": "Output: 0", "explanation": "Explanation: There are no such quadruplets in [3,3,6,4,5]."}, {"full_text": "Example 3:\nInput: nums = [1,1,1,3,5]\nOutput: 4\nExplanation: The 4 quadruplets that satisfy the requirement are:\n- (0, 1, 2, 3): 1 + 1 + 1 == 3\n- (0, 1, 3, 4): 1 + 1 + 3 == 5\n- (0, 2, 3, 4): 1 + 1 + 3 == 5\n- (1, 2, 3, 4): 1 + 1 + 3 == 5", "input": "Input: nums = [1,1,1,3,5]", "output": "Output: 4", "explanation": "Explanation: The 4 quadruplets that satisfy the requirement are:\n- (0, 1, 2, 3): 1 + 1 + 1 == 3\n- (0, 1, 3, 4): 1 + 1 + 3 == 5\n- (0, 2, 3, 4): 1 + 1 + 3 == 5\n- (1, 2, 3, 4): 1 + 1 + 3 == 5"}], "constraints": "Constraints:\n4 <= nums.length <= 50\n1 <= nums[i] <= 100", "notes": ""}, "1991": {"label": "Easy", "title": "Find the Middle Index in Array", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6647, "total_accepted": 21900.0, "total_submissions": 33000.0, "testcase_example": "'[2,3,-1,8,4]'", "body": "Given a 0-indexed integer array nums, find the leftmost middleIndex (i.e., the smallest amongst all the possible ones).\nA middleIndex is an index where nums[0] + nums[1] + ... + nums[middleIndex-1] == nums[middleIndex+1] + nums[middleIndex+2] + ... + nums[nums.length-1].\nIf middleIndex == 0, the left side sum is considered to be 0. Similarly, if middleIndex == nums.length - 1, the right side sum is considered to be 0.\nReturn the leftmost middleIndex that satisfies the condition, or -1 if there is no such index.", "examples": [{"full_text": "Example 1:\nInput: nums = [2,3,-1,8,4]\nOutput: 3\nExplanation: The sum of the numbers before index 3 is: 2 + 3 + -1 = 4\nThe sum of the numbers after index 3 is: 4 = 4", "input": "Input: nums = [2,3,-1,8,4]", "output": "Output: 3", "explanation": "Explanation: The sum of the numbers before index 3 is: 2 + 3 + -1 = 4\nThe sum of the numbers after index 3 is: 4 = 4"}, {"full_text": "Example 2:\nInput: nums = [1,-1,4]\nOutput: 2\nExplanation: The sum of the numbers before index 2 is: 1 + -1 = 0\nThe sum of the numbers after index 2 is: 0", "input": "Input: nums = [1,-1,4]", "output": "Output: 2", "explanation": "Explanation: The sum of the numbers before index 2 is: 1 + -1 = 0\nThe sum of the numbers after index 2 is: 0"}, {"full_text": "Example 3:\nInput: nums = [2,5]\nOutput: -1\nExplanation: There is no valid middleIndex.", "input": "Input: nums = [2,5]", "output": "Output: -1", "explanation": "Explanation: There is no valid middleIndex."}], "constraints": "Constraints:\n1 <= nums.length <= 100\n-1000 <= nums[i] <= 1000", "notes": "Note: This question is the same as\n724:\nhttps://leetcode.com/problems/find-pivot-index/"}, "1984": {"label": "Easy", "title": "Minimum Difference Between Highest and Lowest of K Scores", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5428000000000001, "total_accepted": 18100.0, "total_submissions": 33300.0, "testcase_example": "'[90]\\n1'", "body": "You are given a 0-indexed integer array nums, where nums[i] represents the score of the i^th student. You are also given an integer k.\nPick the scores of any k students from the array so that the difference between the highest and the lowest of the k scores is minimized.\nReturn the minimum possible difference.", "examples": [{"full_text": "Example 1:\nInput: nums = [90], k = 1\nOutput: 0\nExplanation: There is one way to pick score(s) of one student:\n- [90]. The difference between the highest and lowest score is 90 - 90 = 0.\nThe minimum possible difference is 0.", "input": "Input: nums = [90], k = 1", "output": "Output: 0", "explanation": "Explanation: There is one way to pick score(s) of one student:\n- [90]. The difference between the highest and lowest score is 90 - 90 = 0.\nThe minimum possible difference is 0."}, {"full_text": "Example 2:\nInput: nums = [9,4,1,7], k = 2\nOutput: 2\nExplanation: There are six ways to pick score(s) of two students:\n- [9,4,1,7]. The difference between the highest and lowest score is 9 - 4 = 5.\n- [9,4,1,7]. The difference between the highest and lowest score is 9 - 1 = 8.\n- [9,4,1,7]. The difference between the highest and lowest score is 9 - 7 = 2.\n- [9,4,1,7]. The difference between the highest and lowest score is 4 - 1 = 3.\n- [9,4,1,7]. The difference between the highest and lowest score is 7 - 4 = 3.\n- [9,4,1,7]. The difference between the highest and lowest score is 7 - 1 = 6.\nThe minimum possible difference is 2.", "input": "Input: nums = [9,4,1,7], k = 2", "output": "Output: 2", "explanation": "Explanation: There are six ways to pick score(s) of two students:\n- [9,4,1,7]. The difference between the highest and lowest score is 9 - 4 = 5.\n- [9,4,1,7]. The difference between the highest and lowest score is 9 - 1 = 8.\n- [9,4,1,7]. The difference between the highest and lowest score is 9 - 7 = 2.\n- [9,4,1,7]. The difference between the highest and lowest score is 4 - 1 = 3.\n- [9,4,1,7]. The difference between the highest and lowest score is 7 - 4 = 3.\n- [9,4,1,7]. The difference between the highest and lowest score is 7 - 1 = 6.\nThe minimum possible difference is 2."}], "constraints": "Constraints:\n1 <= k <= nums.length <= 1000\n0 <= nums[i] <= 10^5", "notes": ""}, "1979": {"label": "Easy", "title": "Find Greatest Common Divisor of Array", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7831, "total_accepted": 33600.0, "total_submissions": 42900.0, "testcase_example": "'[2,5,6,9,10]'", "body": "Given an integer array nums, return the greatest common divisor of the smallest number and largest number in nums.\nThe greatest common divisor of two numbers is the largest positive integer that evenly divides both numbers.", "examples": [{"full_text": "Example 1:\nInput: nums = [2,5,6,9,10]\nOutput: 2\nExplanation:\nThe smallest number in nums is 2.\nThe largest number in nums is 10.\nThe greatest common divisor of 2 and 10 is 2.", "input": "Input: nums = [2,5,6,9,10]", "output": "Output: 2", "explanation": "Explanation:\nThe smallest number in nums is 2.\nThe largest number in nums is 10.\nThe greatest common divisor of 2 and 10 is 2."}, {"full_text": "Example 2:\nInput: nums = [7,5,6,8,3]\nOutput: 1\nExplanation:\nThe smallest number in nums is 3.\nThe largest number in nums is 8.\nThe greatest common divisor of 3 and 8 is 1.", "input": "Input: nums = [7,5,6,8,3]", "output": "Output: 1", "explanation": "Explanation:\nThe smallest number in nums is 3.\nThe largest number in nums is 8.\nThe greatest common divisor of 3 and 8 is 1."}, {"full_text": "Example 3:\nInput: nums = [3,3]\nOutput: 3\nExplanation:\nThe smallest number in nums is 3.\nThe largest number in nums is 3.\nThe greatest common divisor of 3 and 3 is 3.", "input": "Input: nums = [3,3]", "output": "Output: 3", "explanation": "Explanation:\nThe smallest number in nums is 3.\nThe largest number in nums is 3.\nThe greatest common divisor of 3 and 3 is 3."}], "constraints": "Constraints:\n2 <= nums.length <= 1000\n1 <= nums[i] <= 1000", "notes": ""}, "1974": {"label": "Easy", "title": "Minimum Time to Type Word Using Special Typewriter", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7195999999999999, "total_accepted": 16700.0, "total_submissions": 23200.0, "testcase_example": "'\"abc\"'", "body": "There is a special typewriter with lowercase English letters 'a' to 'z' arranged in a circle with a pointer. A character can only be typed if the pointer is pointing to that character. The pointer is initially pointing to the character 'a'.\nEach second, you may perform one of the following operations:\nMove the pointer one character counterclockwise or clockwise.\nType the character the pointer is currently on.\nGiven a string word, return the minimum number of seconds to type out the characters in word.", "examples": [{"full_text": "Example 1:\nInput: word = \"abc\"\nOutput: 5\nExplanation:\nThe characters are printed as follows:\n- Type the character 'a' in 1 second since the pointer is initially on 'a'.\n- Move the pointer clockwise to 'b' in 1 second.\n- Type the character 'b' in 1 second.\n- Move the pointer clockwise to 'c' in 1 second.\n- Type the character 'c' in 1 second.", "input": "Input: word = \"abc\"", "output": "Output: 5", "explanation": "Explanation:\nThe characters are printed as follows:\n- Type the character 'a' in 1 second since the pointer is initially on 'a'.\n- Move the pointer clockwise to 'b' in 1 second.\n- Type the character 'b' in 1 second.\n- Move the pointer clockwise to 'c' in 1 second.\n- Type the character 'c' in 1 second."}, {"full_text": "Example 2:\nInput: word = \"bza\"\nOutput: 7\nExplanation:\nThe characters are printed as follows:\n- Move the pointer clockwise to 'b' in 1 second.\n- Type the character 'b' in 1 second.\n- Move the pointer counterclockwise to 'z' in 2 seconds.\n- Type the character 'z' in 1 second.\n- Move the pointer clockwise to 'a' in 1 second.\n- Type the character 'a' in 1 second.", "input": "Input: word = \"bza\"", "output": "Output: 7", "explanation": "Explanation:\nThe characters are printed as follows:\n- Move the pointer clockwise to 'b' in 1 second.\n- Type the character 'b' in 1 second.\n- Move the pointer counterclockwise to 'z' in 2 seconds.\n- Type the character 'z' in 1 second.\n- Move the pointer clockwise to 'a' in 1 second.\n- Type the character 'a' in 1 second."}, {"full_text": "Example 3:\nInput: word = \"zjpc\"\nOutput: 34\nExplanation:\nThe characters are printed as follows:\n- Move the pointer counterclockwise to 'z' in 1 second.\n- Type the character 'z' in 1 second.\n- Move the pointer clockwise to 'j' in 10 seconds.\n- Type the character 'j' in 1 second.\n- Move the pointer clockwise to 'p' in 6 seconds.\n- Type the character 'p' in 1 second.\n- Move the pointer counterclockwise to 'c' in 13 seconds.\n- Type the character 'c' in 1 second.", "input": "Input: word = \"zjpc\"", "output": "Output: 34", "explanation": "Explanation:\nThe characters are printed as follows:\n- Move the pointer counterclockwise to 'z' in 1 second.\n- Type the character 'z' in 1 second.\n- Move the pointer clockwise to 'j' in 10 seconds.\n- Type the character 'j' in 1 second.\n- Move the pointer clockwise to 'p' in 6 seconds.\n- Type the character 'p' in 1 second.\n- Move the pointer counterclockwise to 'c' in 13 seconds.\n- Type the character 'c' in 1 second."}], "constraints": "Constraints:\n1 <= word.length <= 100\nword consists of lowercase English letters.", "notes": ""}, "1971": {"label": "Easy", "title": "Find if Path Exists in Graph", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5042, "total_accepted": 63700.0, "total_submissions": 126400.0, "testcase_example": "'3\\n[[0,1],[1,2],[2,0]]\\n0\\n2'", "body": "There is a bi-directional graph with n vertices, where each vertex is labeled from 0 to n - 1 (inclusive). The edges in the graph are represented as a 2D integer array edges, where each edges[i] = [ui, vi] denotes a bi-directional edge between vertex ui and vertex vi. Every vertex pair is connected by at most one edge, and no vertex has an edge to itself.\nYou want to determine if there is a valid path that exists from vertex source to vertex destination.\nGiven edges and the integers n, source, and destination, return true if there is a valid path from source to destination, or false otherwise.", "examples": [{"full_text": "Example 1:\nInput: n = 3, edges = [[0,1],[1,2],[2,0]], source = 0, destination = 2\nOutput: true\nExplanation: There are two paths from vertex 0 to vertex 2:\n- 0 \u2192 1 \u2192 2\n- 0 \u2192 2", "input": "Input: n = 3, edges = [[0,1],[1,2],[2,0]], source = 0, destination = 2", "output": "Output: true", "explanation": "Explanation: There are two paths from vertex 0 to vertex 2:\n- 0 \u2192 1 \u2192 2\n- 0 \u2192 2"}, {"full_text": "Example 2:\nInput: n = 6, edges = [[0,1],[0,2],[3,5],[5,4],[4,3]], source = 0, destination = 5\nOutput: false\nExplanation: There is no path from vertex 0 to vertex 5.", "input": "Input: n = 6, edges = [[0,1],[0,2],[3,5],[5,4],[4,3]], source = 0, destination = 5", "output": "Output: false", "explanation": "Explanation: There is no path from vertex 0 to vertex 5."}], "constraints": "Constraints:\n1 <= n <= 2 * 10^5\n0 <= edges.length <= 2 * 10^5\nedges[i].length == 2\n0 <= ui, vi <= n - 1\nui != vi\n0 <= source, destination <= n - 1\nThere are no duplicate edges.\nThere are no self edges.", "notes": ""}, "1967": {"label": "Easy", "title": "Number of Strings That Appear as Substrings in Word", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7926000000000001, "total_accepted": 24300.0, "total_submissions": 30700.0, "testcase_example": "'[\"a\",\"abc\",\"bc\",\"d\"]\\n\"abc\"'", "body": "Given an array of strings patterns and a string word, return the number of strings in patterns that exist as a substring in word.\nA substring is a contiguous sequence of characters within a string.", "examples": [{"full_text": "Example 1:\nInput: patterns = [\"a\",\"abc\",\"bc\",\"d\"], word = \"abc\"\nOutput: 3\nExplanation:\n- \"a\" appears as a substring in \"abc\".\n- \"abc\" appears as a substring in \"abc\".\n- \"bc\" appears as a substring in \"abc\".\n- \"d\" does not appear as a substring in \"abc\".\n3 of the strings in patterns appear as a substring in word.", "input": "Input: patterns = [\"a\",\"abc\",\"bc\",\"d\"], word = \"abc\"", "output": "Output: 3", "explanation": "Explanation:\n- \"a\" appears as a substring in \"abc\".\n- \"abc\" appears as a substring in \"abc\".\n- \"bc\" appears as a substring in \"abc\".\n- \"d\" does not appear as a substring in \"abc\".\n3 of the strings in patterns appear as a substring in word."}, {"full_text": "Example 2:\nInput: patterns = [\"a\",\"b\",\"c\"], word = \"aaaaabbbbb\"\nOutput: 2\nExplanation:\n- \"a\" appears as a substring in \"aaaaabbbbb\".\n- \"b\" appears as a substring in \"aaaaabbbbb\".\n- \"c\" does not appear as a substring in \"aaaaabbbbb\".\n2 of the strings in patterns appear as a substring in word.", "input": "Input: patterns = [\"a\",\"b\",\"c\"], word = \"aaaaabbbbb\"", "output": "Output: 2", "explanation": "Explanation:\n- \"a\" appears as a substring in \"aaaaabbbbb\".\n- \"b\" appears as a substring in \"aaaaabbbbb\".\n- \"c\" does not appear as a substring in \"aaaaabbbbb\".\n2 of the strings in patterns appear as a substring in word."}, {"full_text": "Example 3:\nInput: patterns = [\"a\",\"a\",\"a\"], word = \"ab\"\nOutput: 3\nExplanation: Each of the patterns appears as a substring in word \"ab\".", "input": "Input: patterns = [\"a\",\"a\",\"a\"], word = \"ab\"", "output": "Output: 3", "explanation": "Explanation: Each of the patterns appears as a substring in word \"ab\"."}], "constraints": "Constraints:\n1 <= patterns.length <= 100\n1 <= patterns[i].length <= 100\n1 <= word.length <= 100\npatterns[i] and word consist of lowercase English letters.", "notes": ""}, "1961": {"label": "Easy", "title": "Check If String Is a Prefix of Array", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5484, "total_accepted": 22600.0, "total_submissions": 41200.0, "testcase_example": "'\"iloveleetcode\"\\n[\"i\",\"love\",\"leetcode\",\"apples\"]'", "body": "Given a string s and an array of strings words, determine whether s is a prefix string of words.\nA string s is a prefix string of words if s can be made by concatenating the first k strings in words for some positive k no larger than words.length.\nReturn true if s is a prefix string of words, or false otherwise.", "examples": [{"full_text": "Example 1:\nInput: s = \"iloveleetcode\", words = [\"i\",\"love\",\"leetcode\",\"apples\"]\nOutput: true\nExplanation:\ns can be made by concatenating \"i\", \"love\", and \"leetcode\" together.", "input": "Input: s = \"iloveleetcode\", words = [\"i\",\"love\",\"leetcode\",\"apples\"]", "output": "Output: true", "explanation": "Explanation:\ns can be made by concatenating \"i\", \"love\", and \"leetcode\" together."}, {"full_text": "Example 2:\nInput: s = \"iloveleetcode\", words = [\"apples\",\"i\",\"love\",\"leetcode\"]\nOutput: false\nExplanation:\nIt is impossible to make s using a prefix of arr.", "input": "Input: s = \"iloveleetcode\", words = [\"apples\",\"i\",\"love\",\"leetcode\"]", "output": "Output: false", "explanation": "Explanation:\nIt is impossible to make s using a prefix of arr."}], "constraints": "Constraints:\n1 <= words.length <= 100\n1 <= words[i].length <= 20\n1 <= s.length <= 1000\nwords[i] and s consist of only lowercase English letters.", "notes": ""}, "1957": {"label": "Easy", "title": "Delete Characters to Make Fancy String", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5632, "total_accepted": 17000.0, "total_submissions": 30200.0, "testcase_example": "'\"leeetcode\"'", "body": "A fancy string is a string where no three consecutive characters are equal.\nGiven a string s, delete the minimum possible number of characters from s to make it fancy.\nReturn the final string after the deletion. It can be shown that the answer will always be unique.", "examples": [{"full_text": "Example 1:\nInput: s = \"leeetcode\"\nOutput: \"leetcode\"\nExplanation:\nRemove an 'e' from the first group of 'e's to create \"leetcode\".\nNo three consecutive characters are equal, so return \"leetcode\".", "input": "Input: s = \"leeetcode\"", "output": "Output: \"leetcode\"", "explanation": "Explanation:\nRemove an 'e' from the first group of 'e's to create \"leetcode\".\nNo three consecutive characters are equal, so return \"leetcode\"."}, {"full_text": "Example 2:\nInput: s = \"aaabaaaa\"\nOutput: \"aabaa\"\nExplanation:\nRemove an 'a' from the first group of 'a's to create \"aabaaaa\".\nRemove two 'a's from the second group of 'a's to create \"aabaa\".\nNo three consecutive characters are equal, so return \"aabaa\".", "input": "Input: s = \"aaabaaaa\"", "output": "Output: \"aabaa\"", "explanation": "Explanation:\nRemove an 'a' from the first group of 'a's to create \"aabaaaa\".\nRemove two 'a's from the second group of 'a's to create \"aabaa\".\nNo three consecutive characters are equal, so return \"aabaa\"."}, {"full_text": "Example 3:\nInput: s = \"aab\"\nOutput: \"aab\"\nExplanation: No three consecutive characters are equal, so return \"aab\".", "input": "Input: s = \"aab\"", "output": "Output: \"aab\"", "explanation": "Explanation: No three consecutive characters are equal, so return \"aab\"."}], "constraints": "Constraints:\n1 <= s.length <= 10^5\ns consists only of lowercase English letters.", "notes": ""}, "1952": {"label": "Easy", "title": "Three Divisors", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5634, "total_accepted": 23400.0, "total_submissions": 41600.0, "testcase_example": "'2'", "body": "Given an integer n, return true if n has exactly three positive divisors. Otherwise, return false.\nAn integer m is a divisor of n if there exists an integer k such that n = k * m.", "examples": [{"full_text": "Example 1:\nInput: n = 2\nOutput: false\nExplantion: 2 has only two divisors: 1 and 2.", "input": "Input: n = 2", "output": "Output: false\nExplantion: 2 has only two divisors: 1 and 2.", "explanation": ""}, {"full_text": "Example 2:\nInput: n = 4\nOutput: true\nExplantion: 4 has three divisors: 1, 2, and 4.", "input": "Input: n = 4", "output": "Output: true\nExplantion: 4 has three divisors: 1, 2, and 4.", "explanation": ""}], "constraints": "Constraints:\n1 <= n <= 10^4", "notes": ""}, "1945": {"label": "Easy", "title": "Sum of Digits of String After Convert", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6167, "total_accepted": 22500.0, "total_submissions": 36500.0, "testcase_example": "'\"iiii\"\\n1'", "body": "You are given a string s consisting of lowercase English letters, and an integer k.\nFirst, convert s into an integer by replacing each letter with its position in the alphabet (i.e., replace 'a' with 1, 'b' with 2, ..., 'z' with 26). Then, transform the integer by replacing it with the sum of its digits. Repeat the transform operation k times in total.\nFor example, if s = \"zbax\" and k = 2, then the resulting integer would be 8 by the following operations:\nConvert: \"zbax\" \u279d \"(26)(2)(1)(24)\" \u279d \"262124\" \u279d 262124\nTransform #1: 262124 \u279d 2 + 6 + 2 + 1 + 2 + 4\n\u279d 17\nTransform #2: 17 \u279d 1 + 7 \u279d 8\nReturn the resulting integer after performing the operations described above.", "examples": [{"full_text": "Example 1:\nInput: s = \"iiii\", k = 1\nOutput: 36\nExplanation: The operations are as follows:\n- Convert: \"iiii\" \u279d \"(9)(9)(9)(9)\" \u279d \"9999\" \u279d 9999\n- Transform #1: 9999 \u279d 9 + 9 + 9 + 9 \u279d 36\nThus the resulting integer is 36.", "input": "Input: s = \"iiii\", k = 1", "output": "Output: 36", "explanation": "Explanation: The operations are as follows:\n- Convert: \"iiii\" \u279d \"(9)(9)(9)(9)\" \u279d \"9999\" \u279d 9999\n- Transform #1: 9999 \u279d 9 + 9 + 9 + 9 \u279d 36\nThus the resulting integer is 36."}, {"full_text": "Example 2:\nInput: s = \"leetcode\", k = 2\nOutput: 6\nExplanation: The operations are as follows:\n- Convert: \"leetcode\" \u279d \"(12)(5)(5)(20)(3)(15)(4)(5)\" \u279d \"12552031545\" \u279d 12552031545\n- Transform #1: 12552031545 \u279d 1 + 2 + 5 + 5 + 2 + 0 + 3 + 1 + 5 + 4 + 5 \u279d 33\n- Transform #2: 33 \u279d 3 + 3 \u279d 6\nThus the resulting integer is 6.", "input": "Input: s = \"leetcode\", k = 2", "output": "Output: 6", "explanation": "Explanation: The operations are as follows:\n- Convert: \"leetcode\" \u279d \"(12)(5)(5)(20)(3)(15)(4)(5)\" \u279d \"12552031545\" \u279d 12552031545\n- Transform #1: 12552031545 \u279d 1 + 2 + 5 + 5 + 2 + 0 + 3 + 1 + 5 + 4 + 5 \u279d 33\n- Transform #2: 33 \u279d 3 + 3 \u279d 6\nThus the resulting integer is 6."}, {"full_text": "Example 3:\nInput: s = \"zbax\", k = 2\nOutput: 8", "input": "Input: s = \"zbax\", k = 2", "output": "Output: 8", "explanation": ""}], "constraints": "Constraints:\n1 <= s.length <= 100\n1 <= k <= 10\ns consists of lowercase English letters.", "notes": ""}, "1941": {"label": "Easy", "title": "Check if All Characters Have Equal Number of Occurrences", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7698999999999999, "total_accepted": 29100.0, "total_submissions": 37700.0, "testcase_example": "'\"abacbc\"'", "body": "Given a string s, return true if s is a good string, or false otherwise.\nA string s is good if all the characters that appear in s have the same number of occurrences (i.e., the same frequency).", "examples": [{"full_text": "Example 1:\nInput: s = \"abacbc\"\nOutput: true\nExplanation: The characters that appear in s are 'a', 'b', and 'c'. All characters occur 2 times in s.", "input": "Input: s = \"abacbc\"", "output": "Output: true", "explanation": "Explanation: The characters that appear in s are 'a', 'b', and 'c'. All characters occur 2 times in s."}, {"full_text": "Example 2:\nInput: s = \"aaabb\"\nOutput: false\nExplanation: The characters that appear in s are 'a' and 'b'.\n'a' occurs 3 times while 'b' occurs 2 times, which is not the same number of times.", "input": "Input: s = \"aaabb\"", "output": "Output: false", "explanation": "Explanation: The characters that appear in s are 'a' and 'b'.\n'a' occurs 3 times while 'b' occurs 2 times, which is not the same number of times."}], "constraints": "Constraints:\n1 <= s.length <= 1000\ns consists of lowercase English letters.", "notes": ""}, "1935": {"label": "Easy", "title": "Maximum Number of Words You Can Type", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7161, "total_accepted": 25900.0, "total_submissions": 36200.0, "testcase_example": "'\"hello world\"\\n\"ad\"'", "body": "There is a malfunctioning keyboard where some letter keys do not work. All other keys on the keyboard work properly.\nGiven a string text of words separated by a single space (no leading or trailing spaces) and a string brokenLetters of all distinct letter keys that are broken, return the number of words in text you can fully type using this keyboard.", "examples": [{"full_text": "Example 1:\nInput: text = \"hello world\", brokenLetters = \"ad\"\nOutput: 1\nExplanation: We cannot type \"world\" because the 'd' key is broken.", "input": "Input: text = \"hello world\", brokenLetters = \"ad\"", "output": "Output: 1", "explanation": "Explanation: We cannot type \"world\" because the 'd' key is broken."}, {"full_text": "Example 2:\nInput: text = \"leet code\", brokenLetters = \"lt\"\nOutput: 1\nExplanation: We cannot type \"leet\" because the 'l' and 't' keys are broken.", "input": "Input: text = \"leet code\", brokenLetters = \"lt\"", "output": "Output: 1", "explanation": "Explanation: We cannot type \"leet\" because the 'l' and 't' keys are broken."}, {"full_text": "Example 3:\nInput: text = \"leet code\", brokenLetters = \"e\"\nOutput: 0\nExplanation: We cannot type either word because the 'e' key is broken.", "input": "Input: text = \"leet code\", brokenLetters = \"e\"", "output": "Output: 0", "explanation": "Explanation: We cannot type either word because the 'e' key is broken."}], "constraints": "Constraints:\n1 <= text.length <= 10^4\n0 <= brokenLetters.length <= 26\ntext consists of words separated by a single space without any leading or trailing spaces.\nEach word only consists of lowercase English letters.\nbrokenLetters consists of distinct lowercase English letters.", "notes": ""}, "1929": {"label": "Easy", "title": "Concatenation of Array", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.9179, "total_accepted": 138300.0, "total_submissions": 150700.0, "testcase_example": "'[1,2,1]'", "body": "Given an integer array nums of length n, you want to create an array ans of length 2n where ans[i] == nums[i] and ans[i + n] == nums[i] for 0 <= i < n (0-indexed).\nSpecifically, ans is the concatenation of two nums arrays.\nReturn the array ans.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,2,1]\nOutput: [1,2,1,1,2,1]\nExplanation: The array ans is formed as follows:\n- ans = [nums[0],nums[1],nums[2],nums[0],nums[1],nums[2]]\n- ans = [1,2,1,1,2,1]", "input": "Input: nums = [1,2,1]", "output": "Output: [1,2,1,1,2,1]", "explanation": "Explanation: The array ans is formed as follows:\n- ans = [nums[0],nums[1],nums[2],nums[0],nums[1],nums[2]]\n- ans = [1,2,1,1,2,1]"}, {"full_text": "Example 2:\nInput: nums = [1,3,2,1]\nOutput: [1,3,2,1,1,3,2,1]\nExplanation: The array ans is formed as follows:\n- ans = [nums[0],nums[1],nums[2],nums[3],nums[0],nums[1],nums[2],nums[3]]\n- ans = [1,3,2,1,1,3,2,1]", "input": "Input: nums = [1,3,2,1]", "output": "Output: [1,3,2,1,1,3,2,1]", "explanation": "Explanation: The array ans is formed as follows:\n- ans = [nums[0],nums[1],nums[2],nums[3],nums[0],nums[1],nums[2],nums[3]]\n- ans = [1,3,2,1,1,3,2,1]"}], "constraints": "Constraints:\nn == nums.length\n1 <= n <= 1000\n1 <= nums[i] <= 1000", "notes": ""}, "1925": {"label": "Easy", "title": "Count Square Sum Triples", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6703, "total_accepted": 18800.0, "total_submissions": 28000.0, "testcase_example": "'5'", "body": "A square triple (a,b,c) is a triple where a, b, and c are integers and a^2 + b^2 = c^2.\nGiven an integer n, return the number of square triples such that 1 <= a, b, c <= n.", "examples": [{"full_text": "Example 1:\nInput: n = 5\nOutput: 2\nExplanation: The square triples are (3,4,5) and (4,3,5).", "input": "Input: n = 5", "output": "Output: 2", "explanation": "Explanation: The square triples are (3,4,5) and (4,3,5)."}, {"full_text": "Example 2:\nInput: n = 10\nOutput: 4\nExplanation: The square triples are (3,4,5), (4,3,5), (6,8,10), and (8,6,10).", "input": "Input: n = 10", "output": "Output: 4", "explanation": "Explanation: The square triples are (3,4,5), (4,3,5), (6,8,10), and (8,6,10)."}], "constraints": "Constraints:\n1 <= n <= 250", "notes": ""}, "1920": {"label": "Easy", "title": "Build Array from Permutation", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.9177, "total_accepted": 118700.0, "total_submissions": 129400.0, "testcase_example": "'[0,2,1,5,3,4]'", "body": "Given a zero-based permutation nums (0-indexed), build an array ans of the same length where ans[i] = nums[nums[i]] for each 0 <= i < nums.length and return it.\nA zero-based permutation nums is an array of distinct integers from 0 to nums.length - 1 (inclusive).", "examples": [{"full_text": "Example 1:\nInput: nums = [0,2,1,5,3,4]\nOutput: [0,1,2,4,5,3]\nExplanation: The array ans is built as follows:\nans = [nums[nums[0]], nums[nums[1]], nums[nums[2]], nums[nums[3]], nums[nums[4]], nums[nums[5]]]\n= [nums[0], nums[2], nums[1], nums[5], nums[3], nums[4]]\n= [0,1,2,4,5,3]", "input": "Input: nums = [0,2,1,5,3,4]", "output": "Output: [0,1,2,4,5,3]", "explanation": "Explanation: The array ans is built as follows:\nans = [nums[nums[0]], nums[nums[1]], nums[nums[2]], nums[nums[3]], nums[nums[4]], nums[nums[5]]]\n= [nums[0], nums[2], nums[1], nums[5], nums[3], nums[4]]\n= [0,1,2,4,5,3]"}, {"full_text": "Example 2:\nInput: nums = [5,0,1,2,3,4]\nOutput: [4,5,0,1,2,3]\nExplanation: The array ans is built as follows:\nans = [nums[nums[0]], nums[nums[1]], nums[nums[2]], nums[nums[3]], nums[nums[4]], nums[nums[5]]]\n= [nums[5], nums[0], nums[1], nums[2], nums[3], nums[4]]\n= [4,5,0,1,2,3]", "input": "Input: nums = [5,0,1,2,3,4]", "output": "Output: [4,5,0,1,2,3]", "explanation": "Explanation: The array ans is built as follows:\nans = [nums[nums[0]], nums[nums[1]], nums[nums[2]], nums[nums[3]], nums[nums[4]], nums[nums[5]]]\n= [nums[5], nums[0], nums[1], nums[2], nums[3], nums[4]]\n= [4,5,0,1,2,3]"}], "constraints": "Constraints:\n1 <= nums.length <= 1000\n0 <= nums[i] < nums.length\nThe elements in nums are distinct.", "notes": "Follow-up: Can you solve it without using an extra space (i.e., O(1) memory)?"}, "1913": {"label": "Easy", "title": "Maximum Product Difference Between Two Pairs", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.8123999999999999, "total_accepted": 43000.0, "total_submissions": 52900.0, "testcase_example": "'[5,6,2,7,4]'", "body": "The product difference between two pairs (a, b) and (c, d) is defined as (a * b) - (c * d).\nFor example, the product difference between (5, 6) and (2, 7) is (5 * 6) - (2 * 7) = 16.\nGiven an integer array nums, choose four distinct indices w, x, y, and z such that the product difference between pairs (nums[w], nums[x]) and (nums[y], nums[z]) is maximized.\nReturn the maximum such product difference.", "examples": [{"full_text": "Example 1:\nInput: nums = [5,6,2,7,4]\nOutput: 34\nExplanation: We can choose indices 1 and 3 for the first pair (6, 7) and indices 2 and 4 for the second pair (2, 4).\nThe product difference is (6 * 7) - (2 * 4) = 34.", "input": "Input: nums = [5,6,2,7,4]", "output": "Output: 34", "explanation": "Explanation: We can choose indices 1 and 3 for the first pair (6, 7) and indices 2 and 4 for the second pair (2, 4).\nThe product difference is (6 * 7) - (2 * 4) = 34."}, {"full_text": "Example 2:\nInput: nums = [4,2,5,9,7,4,8]\nOutput: 64\nExplanation: We can choose indices 3 and 6 for the first pair (9, 8) and indices 1 and 5 for the second pair (2, 4).\nThe product difference is (9 * 8) - (2 * 4) = 64.", "input": "Input: nums = [4,2,5,9,7,4,8]", "output": "Output: 64", "explanation": "Explanation: We can choose indices 3 and 6 for the first pair (9, 8) and indices 1 and 5 for the second pair (2, 4).\nThe product difference is (9 * 8) - (2 * 4) = 64."}], "constraints": "Constraints:\n4 <= nums.length <= 10^4\n1 <= nums[i] <= 10^4", "notes": ""}, "1909": {"label": "Easy", "title": "Remove One Element to Make the Array Strictly Increasing", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.2785, "total_accepted": 21400.0, "total_submissions": 76800.0, "testcase_example": "'[1,2,10,5,7]'", "body": "Given a 0-indexed integer array nums, return true if it can be made strictly increasing after removing exactly one element, or false otherwise. If the array is already strictly increasing, return true.\nThe array nums is strictly increasing if nums[i - 1] < nums[i] for each index (1 <= i < nums.length).", "examples": [{"full_text": "Example 1:\nInput: nums = [1,2,10,5,7]\nOutput: true\nExplanation: By removing 10 at index 2 from nums, it becomes [1,2,5,7].\n[1,2,5,7] is strictly increasing, so return true.", "input": "Input: nums = [1,2,10,5,7]", "output": "Output: true", "explanation": "Explanation: By removing 10 at index 2 from nums, it becomes [1,2,5,7].\n[1,2,5,7] is strictly increasing, so return true."}, {"full_text": "Example 2:\nInput: nums = [2,3,1,2]\nOutput: false\nExplanation:\n[3,1,2] is the result of removing the element at index 0.\n[2,1,2] is the result of removing the element at index 1.\n[2,3,2] is the result of removing the element at index 2.\n[2,3,1] is the result of removing the element at index 3.\nNo resulting array is strictly increasing, so return false.", "input": "Input: nums = [2,3,1,2]", "output": "Output: false", "explanation": "Explanation:\n[3,1,2] is the result of removing the element at index 0.\n[2,1,2] is the result of removing the element at index 1.\n[2,3,2] is the result of removing the element at index 2.\n[2,3,1] is the result of removing the element at index 3.\nNo resulting array is strictly increasing, so return false."}, {"full_text": "Example 3:\nInput: nums = [1,1,1]\nOutput: false\nExplanation: The result of removing any element is [1,1].\n[1,1] is not strictly increasing, so return false.", "input": "Input: nums = [1,1,1]", "output": "Output: false", "explanation": "Explanation: The result of removing any element is [1,1].\n[1,1] is not strictly increasing, so return false."}], "constraints": "Constraints:\n2 <= nums.length <= 1000\n1 <= nums[i] <= 1000", "notes": ""}, "1903": {"label": "Easy", "title": "Largest Odd Number in String", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5704, "total_accepted": 28800.0, "total_submissions": 50400.0, "testcase_example": "'\"52\"'", "body": "You are given a string num, representing a large integer. Return the largest-valued odd integer (as a string) that is a non-empty substring of num, or an empty string \"\" if no odd integer exists.\nA substring is a contiguous sequence of characters within a string.", "examples": [{"full_text": "Example 1:\nInput: num = \"52\"\nOutput: \"5\"\nExplanation: The only non-empty substrings are \"5\", \"2\", and \"52\". \"5\" is the only odd number.", "input": "Input: num = \"52\"", "output": "Output: \"5\"", "explanation": "Explanation: The only non-empty substrings are \"5\", \"2\", and \"52\". \"5\" is the only odd number."}, {"full_text": "Example 2:\nInput: num = \"4206\"\nOutput: \"\"\nExplanation: There are no odd numbers in \"4206\".", "input": "Input: num = \"4206\"", "output": "Output: \"\"", "explanation": "Explanation: There are no odd numbers in \"4206\"."}, {"full_text": "Example 3:\nInput: num = \"35427\"\nOutput: \"35427\"\nExplanation: \"35427\" is already an odd number.", "input": "Input: num = \"35427\"", "output": "Output: \"35427\"", "explanation": "Explanation: \"35427\" is already an odd number."}], "constraints": "Constraints:\n1 <= num.length <= 10^5\nnum only consists of digits and does not contain any leading zeros.", "notes": ""}, "1897": {"label": "Easy", "title": "Redistribute Characters to Make All Strings Equal", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5993999999999999, "total_accepted": 20300.0, "total_submissions": 33900.0, "testcase_example": "'[\"abc\",\"aabc\",\"bc\"]'", "body": "You are given an array of strings words (0-indexed).\nIn one operation, pick two distinct indices i and j, where words[i] is a non-empty string, and move any character from words[i] to any position in words[j].\nReturn true if you can make every string in words equal using any number of operations, and false otherwise.", "examples": [{"full_text": "Example 1:\nInput: words = [\"abc\",\"aabc\",\"bc\"]\nOutput: true\nExplanation: Move the first 'a' in words[1] to the front of words[2],\nto make words[1] = \"abc\" and words[2] = \"abc\".\nAll the strings are now equal to \"abc\", so return true.", "input": "Input: words = [\"abc\",\"aabc\",\"bc\"]", "output": "Output: true", "explanation": "Explanation: Move the first 'a' in words[1] to the front of words[2],\nto make words[1] = \"abc\" and words[2] = \"abc\".\nAll the strings are now equal to \"abc\", so return true."}, {"full_text": "Example 2:\nInput: words = [\"ab\",\"a\"]\nOutput: false\nExplanation: It is impossible to make all the strings equal using the operation.", "input": "Input: words = [\"ab\",\"a\"]", "output": "Output: false", "explanation": "Explanation: It is impossible to make all the strings equal using the operation."}], "constraints": "Constraints:\n1 <= words.length <= 100\n1 <= words[i].length <= 100\nwords[i] consists of lowercase English letters.", "notes": ""}, "1893": {"label": "Easy", "title": "Check if All the Integers in a Range Are Covered", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5092, "total_accepted": 19100.0, "total_submissions": 37600.0, "testcase_example": "'[[1,2],[3,4],[5,6]]\\n2\\n5'", "body": "You are given a 2D integer array ranges and two integers left and right. Each ranges[i] = [starti, endi] represents an inclusive interval between starti and endi.\nReturn true if each integer in the inclusive range [left, right] is covered by at least one interval in ranges. Return false otherwise.\nAn integer x is covered by an interval ranges[i] = [starti, endi] if starti <= x <= endi.", "examples": [{"full_text": "Example 1:\nInput: ranges = [[1,2],[3,4],[5,6]], left = 2, right = 5\nOutput: true\nExplanation: Every integer between 2 and 5 is covered:\n- 2 is covered by the first range.\n- 3 and 4 are covered by the second range.\n- 5 is covered by the third range.", "input": "Input: ranges = [[1,2],[3,4],[5,6]], left = 2, right = 5", "output": "Output: true", "explanation": "Explanation: Every integer between 2 and 5 is covered:\n- 2 is covered by the first range.\n- 3 and 4 are covered by the second range.\n- 5 is covered by the third range."}, {"full_text": "Example 2:\nInput: ranges = [[1,10],[10,20]], left = 21, right = 21\nOutput: false\nExplanation: 21 is not covered by any range.", "input": "Input: ranges = [[1,10],[10,20]], left = 21, right = 21", "output": "Output: false", "explanation": "Explanation: 21 is not covered by any range."}], "constraints": "Constraints:\n1 <= ranges.length <= 50\n1 <= starti <= endi <= 50\n1 <= left <= right <= 50", "notes": ""}, "1886": {"label": "Easy", "title": "Determine Whether Matrix Can Be Obtained By Rotation", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5478000000000001, "total_accepted": 24800.0, "total_submissions": 45300.0, "testcase_example": "'[[0,1],[1,0]]\\n[[1,0],[0,1]]'", "body": "Given two n x n binary matrices mat and target, return true if it is possible to make mat equal to target by rotating mat in 90-degree increments, or false otherwise.", "examples": [{"full_text": "Example 1:\nInput: mat = [[0,1],[1,0]], target = [[1,0],[0,1]]\nOutput: true\nExplanation: We can rotate mat 90 degrees clockwise to make mat equal target.", "input": "Input: mat = [[0,1],[1,0]], target = [[1,0],[0,1]]", "output": "Output: true", "explanation": "Explanation: We can rotate mat 90 degrees clockwise to make mat equal target."}, {"full_text": "Example 2:\nInput: mat = [[0,1],[1,1]], target = [[1,0],[0,1]]\nOutput: false\nExplanation: It is impossible to make mat equal to target by rotating mat.", "input": "Input: mat = [[0,1],[1,1]], target = [[1,0],[0,1]]", "output": "Output: false", "explanation": "Explanation: It is impossible to make mat equal to target by rotating mat."}, {"full_text": "Example 3:\nInput: mat = [[0,0,0],[0,1,0],[1,1,1]], target = [[1,1,1],[0,1,0],[0,0,0]]\nOutput: true\nExplanation: We can rotate mat 90 degrees clockwise two times to make mat equal target.", "input": "Input: mat = [[0,0,0],[0,1,0],[1,1,1]], target = [[1,1,1],[0,1,0],[0,0,0]]", "output": "Output: true", "explanation": "Explanation: We can rotate mat 90 degrees clockwise two times to make mat equal target."}], "constraints": "Constraints:\nn == mat.length == target.length\nn == mat[i].length == target[i].length\n1 <= n <= 10\nmat[i][j] and target[i][j] are either 0 or 1.", "notes": ""}, "1880": {"label": "Easy", "title": "Check if Word Equals Summation of Two Words", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7304999999999999, "total_accepted": 37000.0, "total_submissions": 50700.0, "testcase_example": "'\"acb\"\\n\"cba\"\\n\"cdb\"'", "body": "The letter value of a letter is its position in the alphabet starting from 0 (i.e. 'a' -> 0, 'b' -> 1, 'c' -> 2, etc.).\nThe numerical value of some string of lowercase English letters s is the concatenation of the letter values of each letter in s, which is then converted into an integer.\nFor example, if s = \"acb\", we concatenate each letter's letter value, resulting in \"021\". After converting it, we get 21.\nYou are given three strings firstWord, secondWord, and targetWord, each consisting of lowercase English letters 'a' through 'j' inclusive.\nReturn true if the summation of the numerical values of firstWord and secondWord equals the numerical value of targetWord, or false otherwise.", "examples": [{"full_text": "Example 1:\nInput: firstWord = \"acb\", secondWord = \"cba\", targetWord = \"cdb\"\nOutput: true\nExplanation:\nThe numerical value of firstWord is \"acb\" -> \"021\" -> 21.\nThe numerical value of secondWord is \"cba\" -> \"210\" -> 210.\nThe numerical value of targetWord is \"cdb\" -> \"231\" -> 231.\nWe return true because 21 + 210 == 231.", "input": "Input: firstWord = \"acb\", secondWord = \"cba\", targetWord = \"cdb\"", "output": "Output: true", "explanation": "Explanation:\nThe numerical value of firstWord is \"acb\" -> \"021\" -> 21.\nThe numerical value of secondWord is \"cba\" -> \"210\" -> 210.\nThe numerical value of targetWord is \"cdb\" -> \"231\" -> 231.\nWe return true because 21 + 210 == 231."}, {"full_text": "Example 2:\nInput: firstWord = \"aaa\", secondWord = \"a\", targetWord = \"aab\"\nOutput: false\nExplanation:\nThe numerical value of firstWord is \"aaa\" -> \"000\" -> 0.\nThe numerical value of secondWord is \"a\" -> \"0\" -> 0.\nThe numerical value of targetWord is \"aab\" -> \"001\" -> 1.\nWe return false because 0 + 0 != 1.", "input": "Input: firstWord = \"aaa\", secondWord = \"a\", targetWord = \"aab\"", "output": "Output: false", "explanation": "Explanation:\nThe numerical value of firstWord is \"aaa\" -> \"000\" -> 0.\nThe numerical value of secondWord is \"a\" -> \"0\" -> 0.\nThe numerical value of targetWord is \"aab\" -> \"001\" -> 1.\nWe return false because 0 + 0 != 1."}, {"full_text": "Example 3:\nInput: firstWord = \"aaa\", secondWord = \"a\", targetWord = \"aaaa\"\nOutput: true\nExplanation:\nThe numerical value of firstWord is \"aaa\" -> \"000\" -> 0.\nThe numerical value of secondWord is \"a\" -> \"0\" -> 0.\nThe numerical value of targetWord is \"aaaa\" -> \"0000\" -> 0.\nWe return true because 0 + 0 == 0.", "input": "Input: firstWord = \"aaa\", secondWord = \"a\", targetWord = \"aaaa\"", "output": "Output: true", "explanation": "Explanation:\nThe numerical value of firstWord is \"aaa\" -> \"000\" -> 0.\nThe numerical value of secondWord is \"a\" -> \"0\" -> 0.\nThe numerical value of targetWord is \"aaaa\" -> \"0000\" -> 0.\nWe return true because 0 + 0 == 0."}], "constraints": "Constraints:\n1 <= firstWord.length, secondWord.length, targetWord.length <= 8\nfirstWord, secondWord, and targetWord consist of lowercase English letters from 'a' to 'j' inclusive.", "notes": ""}, "1876": {"label": "Easy", "title": "Substrings of Size Three with Distinct Characters", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6951, "total_accepted": 34500.0, "total_submissions": 49600.0, "testcase_example": "'\"xyzzaz\"'", "body": "A string is good if there are no repeated characters.\nGiven a string s\u200b\u200b\u200b\u200b\u200b, return the number of good substrings of length three in s\u200b\u200b\u200b\u200b\u200b\u200b.\nNote that if there are multiple occurrences of the same substring, every occurrence should be counted.\nA substring is a contiguous sequence of characters in a string.", "examples": [{"full_text": "Example 1:\nInput: s = \"xyzzaz\"\nOutput: 1\nExplanation: There are 4 substrings of size 3: \"xyz\", \"yzz\", \"zza\", and \"zaz\".\nThe only good substring of length 3 is \"xyz\".", "input": "Input: s = \"xyzzaz\"", "output": "Output: 1", "explanation": "Explanation: There are 4 substrings of size 3: \"xyz\", \"yzz\", \"zza\", and \"zaz\".\nThe only good substring of length 3 is \"xyz\"."}, {"full_text": "Example 2:\nInput: s = \"aababcabc\"\nOutput: 4\nExplanation: There are 7 substrings of size 3: \"aab\", \"aba\", \"bab\", \"abc\", \"bca\", \"cab\", and \"abc\".\nThe good substrings are \"abc\", \"bca\", \"cab\", and \"abc\".", "input": "Input: s = \"aababcabc\"", "output": "Output: 4", "explanation": "Explanation: There are 7 substrings of size 3: \"aab\", \"aba\", \"bab\", \"abc\", \"bca\", \"cab\", and \"abc\".\nThe good substrings are \"abc\", \"bca\", \"cab\", and \"abc\"."}], "constraints": "Constraints:\n1 <= s.length <= 100\ns\u200b\u200b\u200b\u200b\u200b\u200b consists of lowercase English letters.", "notes": ""}, "1869": {"label": "Easy", "title": "Longer Contiguous Segments of Ones than Zeros", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6001, "total_accepted": 26400.0, "total_submissions": 43900.0, "testcase_example": "'\"1101\"'", "body": "Given a binary string s, return true if the longest contiguous segment of 1's is strictly longer than the longest contiguous segment of 0's in s, or return false otherwise.\nFor example, in s = \"110100010\" the longest continuous segment of 1s has length 2, and the longest continuous segment of 0s has length 3.\nNote that if there are no 0's, then the longest continuous segment of 0's is considered to have a length 0. The same applies if there is no 1's.", "examples": [{"full_text": "Example 1:\nInput: s = \"1101\"\nOutput: true\nExplanation:\nThe longest contiguous segment of 1s has length 2: \"1101\"\nThe longest contiguous segment of 0s has length 1: \"1101\"\nThe segment of 1s is longer, so return true.", "input": "Input: s = \"1101\"", "output": "Output: true", "explanation": "Explanation:\nThe longest contiguous segment of 1s has length 2: \"1101\"\nThe longest contiguous segment of 0s has length 1: \"1101\"\nThe segment of 1s is longer, so return true."}, {"full_text": "Example 2:\nInput: s = \"111000\"\nOutput: false\nExplanation:\nThe longest contiguous segment of 1s has length 3: \"111000\"\nThe longest contiguous segment of 0s has length 3: \"111000\"\nThe segment of 1s is not longer, so return false.", "input": "Input: s = \"111000\"", "output": "Output: false", "explanation": "Explanation:\nThe longest contiguous segment of 1s has length 3: \"111000\"\nThe longest contiguous segment of 0s has length 3: \"111000\"\nThe segment of 1s is not longer, so return false."}, {"full_text": "Example 3:\nInput: s = \"110100010\"\nOutput: false\nExplanation:\nThe longest contiguous segment of 1s has length 2: \"110100010\"\nThe longest contiguous segment of 0s has length 3: \"110100010\"\nThe segment of 1s is not longer, so return false.", "input": "Input: s = \"110100010\"", "output": "Output: false", "explanation": "Explanation:\nThe longest contiguous segment of 1s has length 2: \"110100010\"\nThe longest contiguous segment of 0s has length 3: \"110100010\"\nThe segment of 1s is not longer, so return false."}], "constraints": "Constraints:\n1 <= s.length <= 100\ns[i] is either '0' or '1'.", "notes": ""}, "1863": {"label": "Easy", "title": "Sum of All Subset XOR Totals", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7854000000000001, "total_accepted": 29000.0, "total_submissions": 36900.0, "testcase_example": "'[1,3]'", "body": "The XOR total of an array is defined as the bitwise XOR of all its elements, or 0 if the array is empty.\nFor example, the XOR total of the array [2,5,6] is 2 XOR 5 XOR 6 = 1.\nGiven an array nums, return the sum of all XOR totals for every subset of nums.\nNote: Subsets with the same elements should be counted multiple times.\nAn array a is a subset of an array b if a can be obtained from b by deleting some (possibly zero) elements of b.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,3]\nOutput: 6\nExplanation: The 4 subsets of [1,3] are:\n- The empty subset has an XOR total of 0.\n- [1] has an XOR total of 1.\n- [3] has an XOR total of 3.\n- [1,3] has an XOR total of 1 XOR 3 = 2.\n0 + 1 + 3 + 2 = 6", "input": "Input: nums = [1,3]", "output": "Output: 6", "explanation": "Explanation: The 4 subsets of [1,3] are:\n- The empty subset has an XOR total of 0.\n- [1] has an XOR total of 1.\n- [3] has an XOR total of 3.\n- [1,3] has an XOR total of 1 XOR 3 = 2.\n0 + 1 + 3 + 2 = 6"}, {"full_text": "Example 2:\nInput: nums = [5,1,6]\nOutput: 28\nExplanation: The 8 subsets of [5,1,6] are:\n- The empty subset has an XOR total of 0.\n- [5] has an XOR total of 5.\n- [1] has an XOR total of 1.\n- [6] has an XOR total of 6.\n- [5,1] has an XOR total of 5 XOR 1 = 4.\n- [5,6] has an XOR total of 5 XOR 6 = 3.\n- [1,6] has an XOR total of 1 XOR 6 = 7.\n- [5,1,6] has an XOR total of 5 XOR 1 XOR 6 = 2.\n0 + 5 + 1 + 6 + 4 + 3 + 7 + 2 = 28", "input": "Input: nums = [5,1,6]", "output": "Output: 28", "explanation": "Explanation: The 8 subsets of [5,1,6] are:\n- The empty subset has an XOR total of 0.\n- [5] has an XOR total of 5.\n- [1] has an XOR total of 1.\n- [6] has an XOR total of 6.\n- [5,1] has an XOR total of 5 XOR 1 = 4.\n- [5,6] has an XOR total of 5 XOR 6 = 3.\n- [1,6] has an XOR total of 1 XOR 6 = 7.\n- [5,1,6] has an XOR total of 5 XOR 1 XOR 6 = 2.\n0 + 5 + 1 + 6 + 4 + 3 + 7 + 2 = 28"}, {"full_text": "Example 3:\nInput: nums = [3,4,5,6,7,8]\nOutput: 480\nExplanation: The sum of all XOR totals for every subset is 480.", "input": "Input: nums = [3,4,5,6,7,8]", "output": "Output: 480", "explanation": "Explanation: The sum of all XOR totals for every subset is 480."}], "constraints": "Constraints:\n1 <= nums.length <= 12\n1 <= nums[i] <= 20", "notes": ""}, "1859": {"label": "Easy", "title": "Sorting the Sentence", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.8454999999999999, "total_accepted": 53600.0, "total_submissions": 63400.0, "testcase_example": "'\"is2 sentence4 This1 a3\"'", "body": "A sentence is a list of words that are separated by a single space with no leading or trailing spaces. Each word consists of lowercase and uppercase English letters.\nA sentence can be shuffled by appending the 1-indexed word position to each word then rearranging the words in the sentence.\nFor example, the sentence \"This is a sentence\" can be shuffled as \"sentence4 a3 is2 This1\" or \"is2 sentence4 This1 a3\".\nGiven a shuffled sentence s containing no more than 9 words, reconstruct and return the original sentence.", "examples": [{"full_text": "Example 1:\nInput: s = \"is2 sentence4 This1 a3\"\nOutput: \"This is a sentence\"\nExplanation: Sort the words in s to their original positions \"This1 is2 a3 sentence4\", then remove the numbers.", "input": "Input: s = \"is2 sentence4 This1 a3\"", "output": "Output: \"This is a sentence\"", "explanation": "Explanation: Sort the words in s to their original positions \"This1 is2 a3 sentence4\", then remove the numbers."}, {"full_text": "Example 2:\nInput: s = \"Myself2 Me1 I4 and3\"\nOutput: \"Me Myself and I\"\nExplanation: Sort the words in s to their original positions \"Me1 Myself2 and3 I4\", then remove the numbers.", "input": "Input: s = \"Myself2 Me1 I4 and3\"", "output": "Output: \"Me Myself and I\"", "explanation": "Explanation: Sort the words in s to their original positions \"Me1 Myself2 and3 I4\", then remove the numbers."}], "constraints": "Constraints:\n2 <= s.length <= 200\ns consists of lowercase and uppercase English letters, spaces, and digits from 1 to 9.\nThe number of words in s is between 1 and 9.\nThe words in s are separated by a single space.\ns contains no leading or trailing spaces.", "notes": ""}, "1854": {"label": "Easy", "title": "Maximum Population Year", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.585, "total_accepted": 26000.0, "total_submissions": 44400.0, "testcase_example": "'[[1993,1999],[2000,2010]]'", "body": "You are given a 2D integer array logs where each logs[i] = [birthi, deathi] indicates the birth and death years of the i^th person.\nThe population of some year x is the number of people alive during that year. The i^th person is counted in year x's population if x is in the inclusive range [birthi, deathi - 1]. Note that the person is not counted in the year that they die.\nReturn the earliest year with the maximum population.", "examples": [{"full_text": "Example 1:\nInput: logs = [[1993,1999],[2000,2010]]\nOutput: 1993\nExplanation: The maximum population is 1, and 1993 is the earliest year with this population.", "input": "Input: logs = [[1993,1999],[2000,2010]]", "output": "Output: 1993", "explanation": "Explanation: The maximum population is 1, and 1993 is the earliest year with this population."}, {"full_text": "Example 2:\nInput: logs = [[1950,1961],[1960,1971],[1970,1981]]\nOutput: 1960\nExplanation:\nThe maximum population is 2, and it had happened in years 1960 and 1970.\nThe earlier year between them is 1960.", "input": "Input: logs = [[1950,1961],[1960,1971],[1970,1981]]", "output": "Output: 1960", "explanation": "Explanation:\nThe maximum population is 2, and it had happened in years 1960 and 1970.\nThe earlier year between them is 1960."}], "constraints": "Constraints:\n1 <= logs.length <= 100\n1950 <= birthi < deathi <= 2050", "notes": ""}, "1848": {"label": "Easy", "title": "Minimum Distance to the Target Element", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5987, "total_accepted": 23100.0, "total_submissions": 38600.0, "testcase_example": "'[1,2,3,4,5]\\n5\\n3'", "body": "Given an integer array nums (0-indexed) and two integers target and start, find an index i such that nums[i] == target and abs(i - start) is minimized. Note that\nabs(x)\nis the absolute value of x.\nReturn abs(i - start).\nIt is guaranteed that target exists in nums.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,2,3,4,5], target = 5, start = 3\nOutput: 1\nExplanation: nums[4] = 5 is the only value equal to target, so the answer is abs(4 - 3) = 1.", "input": "Input: nums = [1,2,3,4,5], target = 5, start = 3", "output": "Output: 1", "explanation": "Explanation: nums[4] = 5 is the only value equal to target, so the answer is abs(4 - 3) = 1."}, {"full_text": "Example 2:\nInput: nums = [1], target = 1, start = 0\nOutput: 0\nExplanation: nums[0] = 1 is the only value equal to target, so the answer is abs(0 - 0) = 0.", "input": "Input: nums = [1], target = 1, start = 0", "output": "Output: 0", "explanation": "Explanation: nums[0] = 1 is the only value equal to target, so the answer is abs(0 - 0) = 0."}, {"full_text": "Example 3:\nInput: nums = [1,1,1,1,1,1,1,1,1,1], target = 1, start = 0\nOutput: 0\nExplanation: Every value of nums is 1, but nums[0] minimizes abs(i - start), which is abs(0 - 0) = 0.", "input": "Input: nums = [1,1,1,1,1,1,1,1,1,1], target = 1, start = 0", "output": "Output: 0", "explanation": "Explanation: Every value of nums is 1, but nums[0] minimizes abs(i - start), which is abs(0 - 0) = 0."}], "constraints": "Constraints:\n1 <= nums.length <= 1000\n1 <= nums[i] <= 10^4\n0 <= start < nums.length\ntarget is in nums.", "notes": ""}, "1844": {"label": "Easy", "title": "Replace All Digits with Characters", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.8022, "total_accepted": 35300.0, "total_submissions": 44000.0, "testcase_example": "'\"a1c1e1\"'", "body": "You are given a 0-indexed string s that has lowercase English letters in its even indices and digits in its odd indices.\nThere is a function shift(c, x), where c is a character and x is a digit, that returns the x^th character after c.\nFor example, shift('a', 5) = 'f' and shift('x', 0) = 'x'.\nFor every odd\nindex i, you want to replace the digit s[i] with shift(s[i-1], s[i]).\nReturn s after replacing all digits. It is guaranteed that shift(s[i-1], s[i]) will never exceed 'z'.", "examples": [{"full_text": "Example 1:\nInput: s = \"a1c1e1\"\nOutput: \"abcdef\"\nExplanation: The digits are replaced as follows:\n- s[1] -> shift('a',1) = 'b'\n- s[3] -> shift('c',1) = 'd'\n- s[5] -> shift('e',1) = 'f'", "input": "Input: s = \"a1c1e1\"", "output": "Output: \"abcdef\"", "explanation": "Explanation: The digits are replaced as follows:\n- s[1] -> shift('a',1) = 'b'\n- s[3] -> shift('c',1) = 'd'\n- s[5] -> shift('e',1) = 'f'"}, {"full_text": "Example 2:\nInput: s = \"a1b2c3d4e\"\nOutput: \"abbdcfdhe\"\nExplanation: The digits are replaced as follows:\n- s[1] -> shift('a',1) = 'b'\n- s[3] -> shift('b',2) = 'd'\n- s[5] -> shift('c',3) = 'f'\n- s[7] -> shift('d',4) = 'h'", "input": "Input: s = \"a1b2c3d4e\"", "output": "Output: \"abbdcfdhe\"", "explanation": "Explanation: The digits are replaced as follows:\n- s[1] -> shift('a',1) = 'b'\n- s[3] -> shift('b',2) = 'd'\n- s[5] -> shift('c',3) = 'f'\n- s[7] -> shift('d',4) = 'h'"}], "constraints": "Constraints:\n1 <= s.length <= 100\ns consists only of lowercase English letters and digits.\nshift(s[i-1], s[i]) <= 'z' for all odd indices i.", "notes": ""}, "1837": {"label": "Easy", "title": "Sum of Digits in Base K", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7623000000000001, "total_accepted": 25500.0, "total_submissions": 33500.0, "testcase_example": "'34\\n6'", "body": "Given an integer n (in base 10) and a base k, return the sum of the digits of n after converting n from base 10 to base k.\nAfter converting, each digit should be interpreted as a base 10 number, and the sum should be returned in base 10.", "examples": [{"full_text": "Example 1:\nInput: n = 34, k = 6\nOutput: 9\nExplanation: 34 (base 10) expressed in base 6 is 54. 5 + 4 = 9.", "input": "Input: n = 34, k = 6", "output": "Output: 9", "explanation": "Explanation: 34 (base 10) expressed in base 6 is 54. 5 + 4 = 9."}, {"full_text": "Example 2:\nInput: n = 10, k = 10\nOutput: 1\nExplanation: n is already in base 10. 1 + 0 = 1.", "input": "Input: n = 10, k = 10", "output": "Output: 1", "explanation": "Explanation: n is already in base 10. 1 + 0 = 1."}], "constraints": "Constraints:\n1 <= n <= 100\n2 <= k <= 10", "notes": ""}, "1832": {"label": "Easy", "title": "Check if the Sentence Is Pangram", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.8142, "total_accepted": 71200.0, "total_submissions": 87400.0, "testcase_example": "'\"thequickbrownfoxjumpsoverthelazydog\"'", "body": "A pangram is a sentence where every letter of the English alphabet appears at least once.\nGiven a string sentence containing only lowercase English letters, return true if sentence is a pangram, or false otherwise.", "examples": [{"full_text": "Example 1:\nInput: sentence = \"thequickbrownfoxjumpsoverthelazydog\"\nOutput: true\nExplanation: sentence contains at least one of every letter of the English alphabet.", "input": "Input: sentence = \"thequickbrownfoxjumpsoverthelazydog\"", "output": "Output: true", "explanation": "Explanation: sentence contains at least one of every letter of the English alphabet."}, {"full_text": "Example 2:\nInput: sentence = \"leetcode\"\nOutput: false", "input": "Input: sentence = \"leetcode\"", "output": "Output: false", "explanation": ""}], "constraints": "Constraints:\n1 <= sentence.length <= 1000\nsentence consists of lowercase English letters.", "notes": ""}, "1827": {"label": "Easy", "title": "Minimum Operations to Make the Array Increasing", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7831, "total_accepted": 37300.0, "total_submissions": 47600.0, "testcase_example": "'[1,1,1]'", "body": "You are given an integer array nums (0-indexed). In one operation, you can choose an element of the array and increment it by 1.\nFor example, if nums = [1,2,3], you can choose to increment nums[1] to make nums = [1,3,3].\nReturn the minimum number of operations needed to make nums strictly increasing.\nAn array nums is strictly increasing if nums[i] < nums[i+1] for all 0 <= i < nums.length - 1. An array of length 1 is trivially strictly increasing.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,1,1]\nOutput: 3\nExplanation: You can do the following operations:\n1) Increment nums[2], so nums becomes [1,1,2].\n2) Increment nums[1], so nums becomes [1,2,2].\n3) Increment nums[2], so nums becomes [1,2,3].", "input": "Input: nums = [1,1,1]", "output": "Output: 3", "explanation": "Explanation: You can do the following operations:\n1) Increment nums[2], so nums becomes [1,1,2].\n2) Increment nums[1], so nums becomes [1,2,2].\n3) Increment nums[2], so nums becomes [1,2,3]."}, {"full_text": "Example 2:\nInput: nums = [1,5,2,4,1]\nOutput: 14", "input": "Input: nums = [1,5,2,4,1]", "output": "Output: 14", "explanation": ""}, {"full_text": "Example 3:\nInput: nums = [8]\nOutput: 0", "input": "Input: nums = [8]", "output": "Output: 0", "explanation": ""}], "constraints": "Constraints:\n1 <= nums.length <= 5000\n1 <= nums[i] <= 10^4", "notes": ""}, "1822": {"label": "Easy", "title": "Sign of the Product of an Array", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6747, "total_accepted": 67700.0, "total_submissions": 100300.0, "testcase_example": "'[-1,-2,-3,-4,3,2,1]'", "body": "There is a function signFunc(x) that returns:\n1 if x is positive.\n-1 if x is negative.\n0 if x is equal to 0.\nYou are given an integer array nums. Let product be the product of all values in the array nums.\nReturn signFunc(product).", "examples": [{"full_text": "Example 1:\nInput: nums = [-1,-2,-3,-4,3,2,1]\nOutput: 1\nExplanation: The product of all values in the array is 144, and signFunc(144) = 1", "input": "Input: nums = [-1,-2,-3,-4,3,2,1]", "output": "Output: 1", "explanation": "Explanation: The product of all values in the array is 144, and signFunc(144) = 1"}, {"full_text": "Example 2:\nInput: nums = [1,5,0,2,-3]\nOutput: 0\nExplanation: The product of all values in the array is 0, and signFunc(0) = 0", "input": "Input: nums = [1,5,0,2,-3]", "output": "Output: 0", "explanation": "Explanation: The product of all values in the array is 0, and signFunc(0) = 0"}, {"full_text": "Example 3:\nInput: nums = [-1,1,-1,1,-1]\nOutput: -1\nExplanation: The product of all values in the array is -1, and signFunc(-1) = -1", "input": "Input: nums = [-1,1,-1,1,-1]", "output": "Output: -1", "explanation": "Explanation: The product of all values in the array is -1, and signFunc(-1) = -1"}], "constraints": "Constraints:\n1 <= nums.length <= 1000\n-100 <= nums[i] <= 100", "notes": ""}, "1816": {"label": "Easy", "title": "Truncate Sentence", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.8096, "total_accepted": 52500.0, "total_submissions": 64900.00000000001, "testcase_example": "'\"Hello how are you Contestant\"\\n4'", "body": "A sentence is a list of words that are separated by a single space with no leading or trailing spaces. Each of the words consists of only uppercase and lowercase English letters (no punctuation).\nFor example, \"Hello World\", \"HELLO\", and \"hello world hello world\" are all sentences.\nYou are given a sentence s\u200b\u200b\u200b\u200b\u200b\u200b and an integer k\u200b\u200b\u200b\u200b\u200b\u200b. You want to truncate s\u200b\u200b\u200b\u200b\u200b\u200b such that it contains only the first k\u200b\u200b\u200b\u200b\u200b\u200b words. Return s\u200b\u200b\u200b\u200b\u200b\u200b after truncating it.", "examples": [{"full_text": "Example 1:\nInput: s = \"Hello how are you Contestant\", k = 4\nOutput: \"Hello how are you\"\nExplanation:\nThe words in s are [\"Hello\", \"how\" \"are\", \"you\", \"Contestant\"].\nThe first 4 words are [\"Hello\", \"how\", \"are\", \"you\"].\nHence, you should return \"Hello how are you\".", "input": "Input: s = \"Hello how are you Contestant\", k = 4", "output": "Output: \"Hello how are you\"", "explanation": "Explanation:\nThe words in s are [\"Hello\", \"how\" \"are\", \"you\", \"Contestant\"].\nThe first 4 words are [\"Hello\", \"how\", \"are\", \"you\"].\nHence, you should return \"Hello how are you\"."}, {"full_text": "Example 2:\nInput: s = \"What is the solution to this problem\", k = 4\nOutput: \"What is the solution\"\nExplanation:\nThe words in s are [\"What\", \"is\" \"the\", \"solution\", \"to\", \"this\", \"problem\"].\nThe first 4 words are [\"What\", \"is\", \"the\", \"solution\"].\nHence, you should return \"What is the solution\".", "input": "Input: s = \"What is the solution to this problem\", k = 4", "output": "Output: \"What is the solution\"", "explanation": "Explanation:\nThe words in s are [\"What\", \"is\" \"the\", \"solution\", \"to\", \"this\", \"problem\"].\nThe first 4 words are [\"What\", \"is\", \"the\", \"solution\"].\nHence, you should return \"What is the solution\"."}, {"full_text": "Example 3:\nInput: s = \"chopper is not a tanuki\", k = 5\nOutput: \"chopper is not a tanuki\"", "input": "Input: s = \"chopper is not a tanuki\", k = 5", "output": "Output: \"chopper is not a tanuki\"", "explanation": ""}], "constraints": "Constraints:\n1 <= s.length <= 500\nk is in the range [1, the number of words in s].\ns consist of only lowercase and uppercase English letters and spaces.\nThe words in s are separated by a single space.\nThere are no leading or trailing spaces.", "notes": ""}, "1812": {"label": "Easy", "title": "Determine Color of a Chessboard Square", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7762, "total_accepted": 32800.0, "total_submissions": 42300.0, "testcase_example": "'\"a1\"'", "body": "You are given coordinates, a string that represents the coordinates of a square of the chessboard. Below is a chessboard for your reference.\nReturn true if the square is white, and false if the square is black.\nThe coordinate will always represent a valid chessboard square. The coordinate will always have the letter first, and the number second.", "examples": [{"full_text": "Example 1:\nInput: coordinates = \"a1\"\nOutput: false\nExplanation: From the chessboard above, the square with coordinates \"a1\" is black, so return false.", "input": "Input: coordinates = \"a1\"", "output": "Output: false", "explanation": "Explanation: From the chessboard above, the square with coordinates \"a1\" is black, so return false."}, {"full_text": "Example 2:\nInput: coordinates = \"h3\"\nOutput: true\nExplanation: From the chessboard above, the square with coordinates \"h3\" is white, so return true.", "input": "Input: coordinates = \"h3\"", "output": "Output: true", "explanation": "Explanation: From the chessboard above, the square with coordinates \"h3\" is white, so return true."}, {"full_text": "Example 3:\nInput: coordinates = \"c7\"\nOutput: false", "input": "Input: coordinates = \"c7\"", "output": "Output: false", "explanation": ""}], "constraints": "Constraints:\ncoordinates.length == 2\n'a' <= coordinates[0] <= 'h'\n'1' <= coordinates[1] <= '8'", "notes": ""}, "1805": {"label": "Easy", "title": "Number of Different Integers in a String", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.35450000000000004, "total_accepted": 23400.0, "total_submissions": 65900.0, "testcase_example": "'\"a123bc34d8ef34\"'", "body": "You are given a string word that consists of digits and lowercase English letters.\nYou will replace every non-digit character with a space. For example, \"a123bc34d8ef34\" will become \" 123\n34 8\n34\". Notice that you are left with some integers that are separated by at least one space: \"123\", \"34\", \"8\", and \"34\".\nReturn the number of different integers after performing the replacement operations on word.\nTwo integers are considered different if their decimal representations without any leading zeros are different.", "examples": [{"full_text": "Example 1:\nInput: word = \"a123bc34d8ef34\"\nOutput: 3\nExplanation: The three different integers are \"123\", \"34\", and \"8\". Notice that \"34\" is only counted once.", "input": "Input: word = \"a123bc34d8ef34\"", "output": "Output: 3", "explanation": "Explanation: The three different integers are \"123\", \"34\", and \"8\". Notice that \"34\" is only counted once."}, {"full_text": "Example 2:\nInput: word = \"leet1234code234\"\nOutput: 2", "input": "Input: word = \"leet1234code234\"", "output": "Output: 2", "explanation": ""}, {"full_text": "Example 3:\nInput: word = \"a1b01c001\"\nOutput: 1\nExplanation: The three integers \"1\", \"01\", and \"001\" all represent the same integer because\nthe leading zeros are ignored when comparing their decimal values.", "input": "Input: word = \"a1b01c001\"", "output": "Output: 1", "explanation": "Explanation: The three integers \"1\", \"01\", and \"001\" all represent the same integer because\nthe leading zeros are ignored when comparing their decimal values."}], "constraints": "Constraints:\n1 <= word.length <= 1000\nword consists of digits and lowercase English letters.", "notes": ""}, "1800": {"label": "Easy", "title": "Maximum Ascending Subarray Sum", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6474, "total_accepted": 27200.0, "total_submissions": 42100.0, "testcase_example": "'[10,20,30,5,10,50]'", "body": "Given an array of positive integers nums, return the maximum possible sum of an ascending subarray in nums.\nA subarray is defined as a contiguous sequence of numbers in an array.\nA subarray [numsl, numsl+1, ..., numsr-1, numsr] is ascending if for all i where l <= i < r, numsi < numsi+1. Note that a subarray of size 1 is ascending.", "examples": [{"full_text": "Example 1:\nInput: nums = [10,20,30,5,10,50]\nOutput: 65\nExplanation: [5,10,50] is the ascending subarray with the maximum sum of 65.", "input": "Input: nums = [10,20,30,5,10,50]", "output": "Output: 65", "explanation": "Explanation: [5,10,50] is the ascending subarray with the maximum sum of 65."}, {"full_text": "Example 2:\nInput: nums = [10,20,30,40,50]\nOutput: 150\nExplanation: [10,20,30,40,50] is the ascending subarray with the maximum sum of 150.", "input": "Input: nums = [10,20,30,40,50]", "output": "Output: 150", "explanation": "Explanation: [10,20,30,40,50] is the ascending subarray with the maximum sum of 150."}, {"full_text": "Example 3:\nInput: nums = [12,17,15,13,10,11,12]\nOutput: 33\nExplanation: [10,11,12] is the ascending subarray with the maximum sum of 33.", "input": "Input: nums = [12,17,15,13,10,11,12]", "output": "Output: 33", "explanation": "Explanation: [10,11,12] is the ascending subarray with the maximum sum of 33."}], "constraints": "Constraints:\n1 <= nums.length <= 100\n1 <= nums[i] <= 100", "notes": ""}, "1796": {"label": "Easy", "title": "Second Largest Digit in a String", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4894, "total_accepted": 22800.0, "total_submissions": 46700.0, "testcase_example": "'\"dfa12321afd\"'", "body": "Given an alphanumeric string s, return the second largest numerical digit that appears in s, or -1 if it does not exist.\nAn alphanumeric string is a string consisting of lowercase English letters and digits.", "examples": [{"full_text": "Example 1:\nInput: s = \"dfa12321afd\"\nOutput: 2\nExplanation: The digits that appear in s are [1, 2, 3]. The second largest digit is 2.", "input": "Input: s = \"dfa12321afd\"", "output": "Output: 2", "explanation": "Explanation: The digits that appear in s are [1, 2, 3]. The second largest digit is 2."}, {"full_text": "Example 2:\nInput: s = \"abc1111\"\nOutput: -1\nExplanation: The digits that appear in s are [1]. There is no second largest digit.", "input": "Input: s = \"abc1111\"", "output": "Output: -1", "explanation": "Explanation: The digits that appear in s are [1]. There is no second largest digit."}], "constraints": "Constraints:\n1 <= s.length <= 500\ns consists of only lowercase English letters and/or digits.", "notes": ""}, "1791": {"label": "Easy", "title": "Find Center of Star Graph", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.8369, "total_accepted": 69300.0, "total_submissions": 82800.0, "testcase_example": "'[[1,2],[2,3],[4,2]]'", "body": "There is an undirected star graph consisting of n nodes labeled from 1 to n. A star graph is a graph where there is one center node and exactly n - 1 edges that connect the center node with every other node.\nYou are given a 2D integer array edges where each edges[i] = [ui, vi] indicates that there is an edge between the nodes ui and vi. Return the center of the given star graph.", "examples": [{"full_text": "Example 1:\nInput: edges = [[1,2],[2,3],[4,2]]\nOutput: 2\nExplanation: As shown in the figure above, node 2 is connected to every other node, so 2 is the center.", "input": "Input: edges = [[1,2],[2,3],[4,2]]", "output": "Output: 2", "explanation": "Explanation: As shown in the figure above, node 2 is connected to every other node, so 2 is the center."}, {"full_text": "Example 2:\nInput: edges = [[1,2],[5,1],[1,3],[1,4]]\nOutput: 1", "input": "Input: edges = [[1,2],[5,1],[1,3],[1,4]]", "output": "Output: 1", "explanation": ""}], "constraints": "Constraints:\n3 <= n <= 10^5\nedges.length == n - 1\nedges[i].length == 2\n1 <= ui, vi <= n\nui != vi\nThe given edges represent a valid star graph.", "notes": ""}, "1790": {"label": "Easy", "title": "Check if One String Swap Can Make Strings Equal", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4562, "total_accepted": 26700.0, "total_submissions": 58400.0, "testcase_example": "'\"bank\"\\n\"kanb\"'", "body": "You are given two strings s1 and s2 of equal length. A string swap is an operation where you choose two indices in a string (not necessarily different) and swap the characters at these indices.\nReturn true if it is possible to make both strings equal by performing at most one string swap on exactly one of the strings. Otherwise, return false.", "examples": [{"full_text": "Example 1:\nInput: s1 = \"bank\", s2 = \"kanb\"\nOutput: true\nExplanation: For example, swap the first character with the last character of s2 to make \"bank\".", "input": "Input: s1 = \"bank\", s2 = \"kanb\"", "output": "Output: true", "explanation": "Explanation: For example, swap the first character with the last character of s2 to make \"bank\"."}, {"full_text": "Example 2:\nInput: s1 = \"attack\", s2 = \"defend\"\nOutput: false\nExplanation: It is impossible to make them equal with one string swap.", "input": "Input: s1 = \"attack\", s2 = \"defend\"", "output": "Output: false", "explanation": "Explanation: It is impossible to make them equal with one string swap."}, {"full_text": "Example 3:\nInput: s1 = \"kelb\", s2 = \"kelb\"\nOutput: true\nExplanation: The two strings are already equal, so no string swap operation is required.", "input": "Input: s1 = \"kelb\", s2 = \"kelb\"", "output": "Output: true", "explanation": "Explanation: The two strings are already equal, so no string swap operation is required."}], "constraints": "Constraints:\n1 <= s1.length, s2.length <= 100\ns1.length == s2.length\ns1 and s2 consist of only lowercase English letters.", "notes": ""}, "1784": {"label": "Easy", "title": "Check if Binary String Has at Most One Segment of Ones", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4097, "total_accepted": 22200.0, "total_submissions": 54200.0, "testcase_example": "'\"1001\"'", "body": "Given a binary string s \u200b\u200b\u200b\u200b\u200bwithout leading zeros, return true\u200b\u200b\u200b if s contains at most one contiguous segment of ones. Otherwise, return false.", "examples": [{"full_text": "Example 1:\nInput: s = \"1001\"\nOutput: false\nExplanation: The ones do not form a contiguous segment.", "input": "Input: s = \"1001\"", "output": "Output: false", "explanation": "Explanation: The ones do not form a contiguous segment."}, {"full_text": "Example 2:\nInput: s = \"110\"\nOutput: true", "input": "Input: s = \"110\"", "output": "Output: true", "explanation": ""}], "constraints": "Constraints:\n1 <= s.length <= 100\ns[i]\u200b\u200b\u200b\u200b is either '0' or '1'.\ns[0] is\n'1'.", "notes": ""}, "1779": {"label": "Easy", "title": "Find Nearest Point That Has the Same X or Y Coordinate", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6827, "total_accepted": 28900.0, "total_submissions": 42300.0, "testcase_example": "'3\\n4\\n[[1,2],[3,1],[2,4],[2,3],[4,4]]'", "body": "You are given two integers, x and y, which represent your current location on a Cartesian grid: (x, y). You are also given an array points where each points[i] = [ai, bi] represents that a point exists at (ai, bi). A point is valid if it shares the same x-coordinate or the same y-coordinate as your location.\nReturn the index (0-indexed) of the valid point with the smallest Manhattan distance from your current location. If there are multiple, return the valid point with the smallest index. If there are no valid points, return -1.\nThe Manhattan distance between two points (x1, y1) and (x2, y2) is abs(x1 - x2) + abs(y1 - y2).", "examples": [{"full_text": "Example 1:\nInput: x = 3, y = 4, points = [[1,2],[3,1],[2,4],[2,3],[4,4]]\nOutput: 2\nExplanation: Of all the points, only [3,1], [2,4] and [4,4] are valid. Of the valid points, [2,4] and [4,4] have the smallest Manhattan distance from your current location, with a distance of 1. [2,4] has the smallest index, so return 2.", "input": "Input: x = 3, y = 4, points = [[1,2],[3,1],[2,4],[2,3],[4,4]]", "output": "Output: 2", "explanation": "Explanation: Of all the points, only [3,1], [2,4] and [4,4] are valid. Of the valid points, [2,4] and [4,4] have the smallest Manhattan distance from your current location, with a distance of 1. [2,4] has the smallest index, so return 2."}, {"full_text": "Example 2:\nInput: x = 3, y = 4, points = [[3,4]]\nOutput: 0\nExplanation: The answer is allowed to be on the same location as your current location.", "input": "Input: x = 3, y = 4, points = [[3,4]]", "output": "Output: 0", "explanation": "Explanation: The answer is allowed to be on the same location as your current location."}, {"full_text": "Example 3:\nInput: x = 3, y = 4, points = [[2,3]]\nOutput: -1\nExplanation: There are no valid points.", "input": "Input: x = 3, y = 4, points = [[2,3]]", "output": "Output: -1", "explanation": "Explanation: There are no valid points."}], "constraints": "Constraints:\n1 <= points.length <= 10^4\npoints[i].length == 2\n1 <= x, y, ai, bi <= 10^4", "notes": ""}, "1773": {"label": "Easy", "title": "Count Items Matching a Rule", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.8454, "total_accepted": 89500.0, "total_submissions": 105900.0, "testcase_example": "'[[\"phone\",\"blue\",\"pixel\"],[\"computer\",\"silver\",\"lenovo\"],[\"phone\",\"gold\",\"iphone\"]]\\n' +\n  '\"color\"\\n' +\n  '\"silver\"'", "body": "You are given an array items, where each items[i] = [typei, colori, namei] describes the type, color, and name of the i^th item. You are also given a rule represented by two strings, ruleKey and ruleValue.\nThe i^th item is said to match the rule if one of the following is true:\nruleKey == \"type\" and ruleValue == typei.\nruleKey == \"color\" and ruleValue == colori.\nruleKey == \"name\" and ruleValue == namei.\nReturn the number of items that match the given rule.", "examples": [{"full_text": "Example 1:\nInput: items = [[\"phone\",\"blue\",\"pixel\"],[\"computer\",\"silver\",\"lenovo\"],[\"phone\",\"gold\",\"iphone\"]], ruleKey = \"color\", ruleValue = \"silver\"\nOutput: 1\nExplanation: There is only one item matching the given rule, which is [\"computer\",\"silver\",\"lenovo\"].", "input": "Input: items = [[\"phone\",\"blue\",\"pixel\"],[\"computer\",\"silver\",\"lenovo\"],[\"phone\",\"gold\",\"iphone\"]], ruleKey = \"color\", ruleValue = \"silver\"", "output": "Output: 1", "explanation": "Explanation: There is only one item matching the given rule, which is [\"computer\",\"silver\",\"lenovo\"]."}, {"full_text": "Example 2:\nInput: items = [[\"phone\",\"blue\",\"pixel\"],[\"computer\",\"silver\",\"phone\"],[\"phone\",\"gold\",\"iphone\"]], ruleKey = \"type\", ruleValue = \"phone\"\nOutput: 2\nExplanation: There are only two items matching the given rule, which are [\"phone\",\"blue\",\"pixel\"] and [\"phone\",\"gold\",\"iphone\"]. Note that the item [\"computer\",\"silver\",\"phone\"] does not match.", "input": "Input: items = [[\"phone\",\"blue\",\"pixel\"],[\"computer\",\"silver\",\"phone\"],[\"phone\",\"gold\",\"iphone\"]], ruleKey = \"type\", ruleValue = \"phone\"", "output": "Output: 2", "explanation": "Explanation: There are only two items matching the given rule, which are [\"phone\",\"blue\",\"pixel\"] and [\"phone\",\"gold\",\"iphone\"]. Note that the item [\"computer\",\"silver\",\"phone\"] does not match."}], "constraints": "Constraints:\n1 <= items.length <= 10^4\n1 <= typei.length, colori.length, namei.length, ruleValue.length <= 10\nruleKey is equal to either \"type\", \"color\", or \"name\".\nAll strings consist only of lowercase letters.", "notes": ""}, "1768": {"label": "Easy", "title": "Merge Strings Alternately", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7468, "total_accepted": 44100.0, "total_submissions": 59100.0, "testcase_example": "'\"abc\"\\n\"pqr\"'", "body": "You are given two strings word1 and word2. Merge the strings by adding letters in alternating order, starting with word1. If a string is longer than the other, append the additional letters onto the end of the merged string.\nReturn the merged string.", "examples": [{"full_text": "Example 1:\nInput: word1 = \"abc\", word2 = \"pqr\"\nOutput: \"apbqcr\"\nExplanation:\nThe merged string will be merged as so:\nword1: a b c\nword2: p q r\nmerged: a p b q c r", "input": "Input: word1 = \"abc\", word2 = \"pqr\"", "output": "Output: \"apbqcr\"", "explanation": "Explanation:\nThe merged string will be merged as so:\nword1: a b c\nword2: p q r\nmerged: a p b q c r"}, {"full_text": "Example 2:\nInput: word1 = \"ab\", word2 = \"pqrs\"\nOutput: \"apbqrs\"\nExplanation:\nNotice that as word2 is longer, \"rs\" is appended to the end.\nword1: a b\nword2: p q r s\nmerged: a p b q r s", "input": "Input: word1 = \"ab\", word2 = \"pqrs\"", "output": "Output: \"apbqrs\"", "explanation": "Explanation:\nNotice that as word2 is longer, \"rs\" is appended to the end.\nword1: a b\nword2: p q r s\nmerged: a p b q r s"}, {"full_text": "Example 3:\nInput: word1 = \"abcd\", word2 = \"pq\"\nOutput: \"apbqcd\"\nExplanation:\nNotice that as word1 is longer, \"cd\" is appended to the end.\nword1: a b c d\nword2: p q\nmerged: a p b q c d", "input": "Input: word1 = \"abcd\", word2 = \"pq\"", "output": "Output: \"apbqcd\"", "explanation": "Explanation:\nNotice that as word1 is longer, \"cd\" is appended to the end.\nword1: a b c d\nword2: p q\nmerged: a p b q c d"}], "constraints": "Constraints:\n1 <= word1.length, word2.length <= 100\nword1 and word2 consist of lowercase English letters.", "notes": ""}, "1763": {"label": "Easy", "title": "Longest Nice Substring", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6196, "total_accepted": 19800.0, "total_submissions": 31900.0, "testcase_example": "'\"YazaAay\"'", "body": "A string s is nice if, for every letter of the alphabet that s contains, it appears both in uppercase and lowercase. For example, \"abABB\" is nice because 'A' and 'a' appear, and 'B' and 'b' appear. However, \"abA\" is not because 'b' appears, but 'B' does not.\nGiven a string s, return the longest substring of s that is nice. If there are multiple, return the substring of the earliest occurrence. If there are none, return an empty string.", "examples": [{"full_text": "Example 1:\nInput: s = \"YazaAay\"\nOutput: \"aAa\"\nExplanation: \"aAa\" is a nice string because 'A/a' is the only letter of the alphabet in s, and both 'A' and 'a' appear.\n\"aAa\" is the longest nice substring.", "input": "Input: s = \"YazaAay\"", "output": "Output: \"aAa\"", "explanation": "Explanation: \"aAa\" is a nice string because 'A/a' is the only letter of the alphabet in s, and both 'A' and 'a' appear.\n\"aAa\" is the longest nice substring."}, {"full_text": "Example 2:\nInput: s = \"Bb\"\nOutput: \"Bb\"\nExplanation: \"Bb\" is a nice string because both 'B' and 'b' appear. The whole string is a substring.", "input": "Input: s = \"Bb\"", "output": "Output: \"Bb\"", "explanation": "Explanation: \"Bb\" is a nice string because both 'B' and 'b' appear. The whole string is a substring."}, {"full_text": "Example 3:\nInput: s = \"c\"\nOutput: \"\"\nExplanation: There are no nice substrings.", "input": "Input: s = \"c\"", "output": "Output: \"\"", "explanation": "Explanation: There are no nice substrings."}], "constraints": "Constraints:\n1 <= s.length <= 100\ns consists of uppercase and lowercase English letters.", "notes": ""}, "1758": {"label": "Easy", "title": "Minimum Changes To Make Alternating Binary String", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5917, "total_accepted": 25400.0, "total_submissions": 43000.0, "testcase_example": "'\"0100\"'", "body": "You are given a string s consisting only of the characters '0' and '1'. In one operation, you can change any '0' to '1' or vice versa.\nThe string is called alternating if no two adjacent characters are equal. For example, the string \"010\" is alternating, while the string \"0100\" is not.\nReturn the minimum number of operations needed to make s alternating.", "examples": [{"full_text": "Example 1:\nInput: s = \"0100\"\nOutput: 1\nExplanation: If you change the last character to '1', s will be \"0101\", which is alternating.", "input": "Input: s = \"0100\"", "output": "Output: 1", "explanation": "Explanation: If you change the last character to '1', s will be \"0101\", which is alternating."}, {"full_text": "Example 2:\nInput: s = \"10\"\nOutput: 0\nExplanation: s is already alternating.", "input": "Input: s = \"10\"", "output": "Output: 0", "explanation": "Explanation: s is already alternating."}, {"full_text": "Example 3:\nInput: s = \"1111\"\nOutput: 2\nExplanation: You need two operations to reach \"0101\" or \"1010\".", "input": "Input: s = \"1111\"", "output": "Output: 2", "explanation": "Explanation: You need two operations to reach \"0101\" or \"1010\"."}], "constraints": "Constraints:\n1 <= s.length <= 10^4\ns[i] is either '0' or '1'.", "notes": ""}, "1752": {"label": "Easy", "title": "Check if Array Is Sorted and Rotated", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4717, "total_accepted": 29600.0, "total_submissions": 62800.0, "testcase_example": "'[3,4,5,1,2]'", "body": "Given an array nums, return true if the array was originally sorted in non-decreasing order, then rotated some number of positions (including zero). Otherwise, return false.\nThere may be duplicates in the original array.\nNote: An array A rotated by x positions results in an array B of the same length such that A[i] == B[(i+x) % A.length], where % is the modulo operation.", "examples": [{"full_text": "Example 1:\nInput: nums = [3,4,5,1,2]\nOutput: true\nExplanation: [1,2,3,4,5] is the original sorted array.\nYou can rotate the array by x = 3 positions to begin on the the element of value 3: [3,4,5,1,2].", "input": "Input: nums = [3,4,5,1,2]", "output": "Output: true", "explanation": "Explanation: [1,2,3,4,5] is the original sorted array.\nYou can rotate the array by x = 3 positions to begin on the the element of value 3: [3,4,5,1,2]."}, {"full_text": "Example 2:\nInput: nums = [2,1,3,4]\nOutput: false\nExplanation: There is no sorted array once rotated that can make nums.", "input": "Input: nums = [2,1,3,4]", "output": "Output: false", "explanation": "Explanation: There is no sorted array once rotated that can make nums."}, {"full_text": "Example 3:\nInput: nums = [1,2,3]\nOutput: true\nExplanation: [1,2,3] is the original sorted array.\nYou can rotate the array by x = 0 positions (i.e. no rotation) to make nums.", "input": "Input: nums = [1,2,3]", "output": "Output: true", "explanation": "Explanation: [1,2,3] is the original sorted array.\nYou can rotate the array by x = 0 positions (i.e. no rotation) to make nums."}], "constraints": "Constraints:\n1 <= nums.length <= 100\n1 <= nums[i] <= 100", "notes": ""}, "1748": {"label": "Easy", "title": "Sum of Unique Elements", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7537999999999999, "total_accepted": 66200.0, "total_submissions": 87800.0, "testcase_example": "'[1,2,3,2]'", "body": "You are given an integer array nums. The unique elements of an array are the elements that appear exactly once in the array.\nReturn the sum of all the unique elements of nums.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,2,3,2]\nOutput: 4\nExplanation: The unique elements are [1,3], and the sum is 4.", "input": "Input: nums = [1,2,3,2]", "output": "Output: 4", "explanation": "Explanation: The unique elements are [1,3], and the sum is 4."}, {"full_text": "Example 2:\nInput: nums = [1,1,1,1,1]\nOutput: 0\nExplanation: There are no unique elements, and the sum is 0.", "input": "Input: nums = [1,1,1,1,1]", "output": "Output: 0", "explanation": "Explanation: There are no unique elements, and the sum is 0."}, {"full_text": "Example 3:\nInput: nums = [1,2,3,4,5]\nOutput: 15\nExplanation: The unique elements are [1,2,3,4,5], and the sum is 15.", "input": "Input: nums = [1,2,3,4,5]", "output": "Output: 15", "explanation": "Explanation: The unique elements are [1,2,3,4,5], and the sum is 15."}], "constraints": "Constraints:\n1 <= nums.length <= 100\n1 <= nums[i] <= 100", "notes": ""}, "1742": {"label": "Easy", "title": "Maximum Number of Balls in a Box", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7359, "total_accepted": 35900.0, "total_submissions": 48900.0, "testcase_example": "'1\\n10'", "body": "You are working in a ball factory where you have n balls numbered from lowLimit up to highLimit inclusive (i.e., n == highLimit - lowLimit + 1), and an infinite number of boxes numbered from 1 to infinity.\nYour job at this factory is to put each ball in the box with a number equal to the sum of digits of the ball's number. For example, the ball number 321 will be put in the box number 3 + 2 + 1 = 6 and the ball number 10 will be put in the box number 1 + 0 = 1.\nGiven two integers lowLimit and highLimit, return the number of balls in the box with the most balls.", "examples": [{"full_text": "Example 1:\nInput: lowLimit = 1, highLimit = 10\nOutput: 2\nExplanation:\nBox Number: 1 2 3 4 5 6 7 8 9 10 11 ...\nBall Count: 2 1 1 1 1 1 1 1 1 0 0 ...\nBox 1 has the most number of balls with 2 balls.", "input": "Input: lowLimit = 1, highLimit = 10", "output": "Output: 2", "explanation": "Explanation:\nBox Number: 1 2 3 4 5 6 7 8 9 10 11 ...\nBall Count: 2 1 1 1 1 1 1 1 1 0 0 ...\nBox 1 has the most number of balls with 2 balls."}, {"full_text": "Example 2:\nInput: lowLimit = 5, highLimit = 15\nOutput: 2\nExplanation:\nBox Number: 1 2 3 4 5 6 7 8 9 10 11 ...\nBall Count: 1 1 1 1 2 2 1 1 1 0 0 ...\nBoxes 5 and 6 have the most number of balls with 2 balls in each.", "input": "Input: lowLimit = 5, highLimit = 15", "output": "Output: 2", "explanation": "Explanation:\nBox Number: 1 2 3 4 5 6 7 8 9 10 11 ...\nBall Count: 1 1 1 1 2 2 1 1 1 0 0 ...\nBoxes 5 and 6 have the most number of balls with 2 balls in each."}, {"full_text": "Example 3:\nInput: lowLimit = 19, highLimit = 28\nOutput: 2\nExplanation:\nBox Number: 1 2 3 4 5 6 7 8 9 10 11 12 ...\nBall Count: 0 1 1 1 1 1 1 1 1 2 0 0 ...\nBox 10 has the most number of balls with 2 balls.", "input": "Input: lowLimit = 19, highLimit = 28", "output": "Output: 2", "explanation": "Explanation:\nBox Number: 1 2 3 4 5 6 7 8 9 10 11 12 ...\nBall Count: 0 1 1 1 1 1 1 1 1 2 0 0 ...\nBox 10 has the most number of balls with 2 balls."}], "constraints": "Constraints:\n1 <= lowLimit <= highLimit <= 10^5", "notes": ""}, "1736": {"label": "Easy", "title": "Latest Time by Replacing Hidden Digits", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4191, "total_accepted": 20900.0, "total_submissions": 49800.0, "testcase_example": "'\"2?:?0\"'", "body": "You are given a string time in the form of hh:mm, where some of the digits in the string are hidden (represented by ?).\nThe valid times are those inclusively between 00:00 and 23:59.\nReturn the latest valid time you can get from time by replacing the hidden digits.", "examples": [{"full_text": "Example 1:\nInput: time = \"2?:?0\"\nOutput: \"23:50\"\nExplanation: The latest hour beginning with the digit '2' is 23 and the latest minute ending with the digit '0' is 50.", "input": "Input: time = \"2?:?0\"", "output": "Output: \"23:50\"", "explanation": "Explanation: The latest hour beginning with the digit '2' is 23 and the latest minute ending with the digit '0' is 50."}, {"full_text": "Example 2:\nInput: time = \"0?:3?\"\nOutput: \"09:39\"", "input": "Input: time = \"0?:3?\"", "output": "Output: \"09:39\"", "explanation": ""}, {"full_text": "Example 3:\nInput: time = \"1?:22\"\nOutput: \"19:22\"", "input": "Input: time = \"1?:22\"", "output": "Output: \"19:22\"", "explanation": ""}], "constraints": "Constraints:\ntime is in the format hh:mm.\nIt is guaranteed that you can produce a valid time from the given string.", "notes": ""}, "1732": {"label": "Easy", "title": "Find the Highest Altitude", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7894, "total_accepted": 64000.0, "total_submissions": 81100.0, "testcase_example": "'[-5,1,5,0,-7]'", "body": "There is a biker going on a road trip. The road trip consists of n + 1 points at different altitudes. The biker starts his trip on point 0 with altitude equal 0.\nYou are given an integer array gain of length n where gain[i] is the net gain in altitude between points i\u200b\u200b\u200b\u200b\u200b\u200b and i + 1 for all (0 <= i < n). Return the highest altitude of a point.", "examples": [{"full_text": "Example 1:\nInput: gain = [-5,1,5,0,-7]\nOutput: 1\nExplanation: The altitudes are [0,-5,-4,1,1,-6]. The highest is 1.", "input": "Input: gain = [-5,1,5,0,-7]", "output": "Output: 1", "explanation": "Explanation: The altitudes are [0,-5,-4,1,1,-6]. The highest is 1."}, {"full_text": "Example 2:\nInput: gain = [-4,-3,-2,-1,4,3,2]\nOutput: 0\nExplanation: The altitudes are [0,-4,-7,-9,-10,-6,-3,-1]. The highest is 0.", "input": "Input: gain = [-4,-3,-2,-1,4,3,2]", "output": "Output: 0", "explanation": "Explanation: The altitudes are [0,-4,-7,-9,-10,-6,-3,-1]. The highest is 0."}], "constraints": "Constraints:\nn == gain.length\n1 <= n <= 100\n-100 <= gain[i] <= 100", "notes": ""}, "1725": {"label": "Easy", "title": "Number Of Rectangles That Can Form The Largest Square", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7870999999999999, "total_accepted": 38100.0, "total_submissions": 48400.0, "testcase_example": "'[[5,8],[3,9],[5,12],[16,5]]'", "body": "You are given an array rectangles where rectangles[i] = [li, wi] represents the i^th rectangle of length li and width wi.\nYou can cut the i^th rectangle to form a square with a side length of k if both k <= li and k <= wi. For example, if you have a rectangle [4,6], you can cut it to get a square with a side length of at most 4.\nLet maxLen be the side length of the largest square you can obtain from any of the given rectangles.\nReturn the number of rectangles that can make a square with a side length of maxLen.", "examples": [{"full_text": "Example 1:\nInput: rectangles = [[5,8],[3,9],[5,12],[16,5]]\nOutput: 3\nExplanation: The largest squares you can get from each rectangle are of lengths [5,3,5,5].\nThe largest possible square is of length 5, and you can get it out of 3 rectangles.", "input": "Input: rectangles = [[5,8],[3,9],[5,12],[16,5]]", "output": "Output: 3", "explanation": "Explanation: The largest squares you can get from each rectangle are of lengths [5,3,5,5].\nThe largest possible square is of length 5, and you can get it out of 3 rectangles."}, {"full_text": "Example 2:\nInput: rectangles = [[2,3],[3,7],[4,3],[3,7]]\nOutput: 3", "input": "Input: rectangles = [[2,3],[3,7],[4,3],[3,7]]", "output": "Output: 3", "explanation": ""}], "constraints": "Constraints:\n1 <= rectangles.length <= 1000\nrectangles[i].length == 2\n1 <= li, wi <= 10^9\nli != wi", "notes": ""}, "1720": {"label": "Easy", "title": "Decode XORed Array", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.8589, "total_accepted": 62000.0, "total_submissions": 72200.0, "testcase_example": "'[1,2,3]\\n1'", "body": "There is a hidden integer array arr that consists of n non-negative integers.\nIt was encoded into another integer array encoded of length n - 1, such that encoded[i] = arr[i] XOR arr[i + 1]. For example, if arr = [1,0,2,1], then encoded = [1,2,3].\nYou are given the encoded array. You are also given an integer first, that is the first element of arr, i.e. arr[0].\nReturn the original array arr. It can be proved that the answer exists and is unique.", "examples": [{"full_text": "Example 1:\nInput: encoded = [1,2,3], first = 1\nOutput: [1,0,2,1]\nExplanation: If arr = [1,0,2,1], then first = 1 and encoded = [1 XOR 0, 0 XOR 2, 2 XOR 1] = [1,2,3]", "input": "Input: encoded = [1,2,3], first = 1", "output": "Output: [1,0,2,1]", "explanation": "Explanation: If arr = [1,0,2,1], then first = 1 and encoded = [1 XOR 0, 0 XOR 2, 2 XOR 1] = [1,2,3]"}, {"full_text": "Example 2:\nInput: encoded = [6,2,7,3], first = 4\nOutput: [4,2,0,7,4]", "input": "Input: encoded = [6,2,7,3], first = 4", "output": "Output: [4,2,0,7,4]", "explanation": ""}], "constraints": "Constraints:\n2 <= n <= 10^4\nencoded.length == n - 1\n0 <= encoded[i] <= 10^5\n0 <= first <= 10^5", "notes": ""}, "1716": {"label": "Easy", "title": "Calculate Money in Leetcode Bank", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.647, "total_accepted": 27700.0, "total_submissions": 42800.0, "testcase_example": "'4'", "body": "Hercy wants to save money for his first car. He puts money in the Leetcode\nbank every day.\nHe starts by putting in $1 on Monday, the first day. Every day from Tuesday to Sunday, he will put in $1 more than the day before. On every subsequent Monday, he will put in $1 more than the previous Monday.\nGiven n, return the total amount of money he will have in the Leetcode bank at the end of the n^th day.", "examples": [{"full_text": "Example 1:\nInput: n = 4\nOutput: 10\nExplanation:\nAfter the 4^th day, the total is 1 + 2 + 3 + 4 = 10.", "input": "Input: n = 4", "output": "Output: 10", "explanation": "Explanation:\nAfter the 4^th day, the total is 1 + 2 + 3 + 4 = 10."}, {"full_text": "Example 2:\nInput: n = 10\nOutput: 37\nExplanation:\nAfter the 10^th day, the total is (1 + 2 + 3 + 4 + 5 + 6 + 7) + (2 + 3 + 4) = 37. Notice that on the 2^nd Monday, Hercy only puts in $2.", "input": "Input: n = 10", "output": "Output: 37", "explanation": "Explanation:\nAfter the 10^th day, the total is (1 + 2 + 3 + 4 + 5 + 6 + 7) + (2 + 3 + 4) = 37. Notice that on the 2^nd Monday, Hercy only puts in $2."}, {"full_text": "Example 3:\nInput: n = 20\nOutput: 96\nExplanation:\nAfter the 20^th day, the total is (1 + 2 + 3 + 4 + 5 + 6 + 7) + (2 + 3 + 4 + 5 + 6 + 7 + 8) + (3 + 4 + 5 + 6 + 7 + 8) = 96.", "input": "Input: n = 20", "output": "Output: 96", "explanation": "Explanation:\nAfter the 20^th day, the total is (1 + 2 + 3 + 4 + 5 + 6 + 7) + (2 + 3 + 4 + 5 + 6 + 7 + 8) + (3 + 4 + 5 + 6 + 7 + 8) = 96."}], "constraints": "Constraints:\n1 <= n <= 1000", "notes": ""}, "1710": {"label": "Easy", "title": "Maximum Units on a Truck", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7209, "total_accepted": 122400.0, "total_submissions": 169700.0, "testcase_example": "'[[1,3],[2,2],[3,1]]\\n4'", "body": "You are assigned to put some amount of boxes onto one truck. You are given a 2D array boxTypes, where boxTypes[i] = [numberOfBoxesi, numberOfUnitsPerBoxi]:\nnumberOfBoxesi is the number of boxes of type i.\nnumberOfUnitsPerBoxi is the number of units in each box of the type i.\nYou are also given an integer truckSize, which is the maximum number of boxes that can be put on the truck. You can choose any boxes to put on the truck as long as the number\nof boxes does not exceed truckSize.\nReturn the maximum total number of units that can be put on the truck.", "examples": [{"full_text": "Example 1:\nInput: boxTypes = [[1,3],[2,2],[3,1]], truckSize = 4\nOutput: 8\nExplanation: There are:\n- 1 box of the first type that contains 3 units.\n- 2 boxes of the second type that contain 2 units each.\n- 3 boxes of the third type that contain 1 unit each.\nYou can take all the boxes of the first and second types, and one box of the third type.\nThe total number of units will be = (1 * 3) + (2 * 2) + (1 * 1) = 8.", "input": "Input: boxTypes = [[1,3],[2,2],[3,1]], truckSize = 4", "output": "Output: 8", "explanation": "Explanation: There are:\n- 1 box of the first type that contains 3 units.\n- 2 boxes of the second type that contain 2 units each.\n- 3 boxes of the third type that contain 1 unit each.\nYou can take all the boxes of the first and second types, and one box of the third type.\nThe total number of units will be = (1 * 3) + (2 * 2) + (1 * 1) = 8."}, {"full_text": "Example 2:\nInput: boxTypes = [[5,10],[2,5],[4,7],[3,9]], truckSize = 10\nOutput: 91", "input": "Input: boxTypes = [[5,10],[2,5],[4,7],[3,9]], truckSize = 10", "output": "Output: 91", "explanation": ""}], "constraints": "Constraints:\n1 <= boxTypes.length <= 1000\n1 <= numberOfBoxesi, numberOfUnitsPerBoxi <= 1000\n1 <= truckSize <= 10^6", "notes": ""}, "1704": {"label": "Easy", "title": "Determine if String Halves Are Alike", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.782, "total_accepted": 79500.0, "total_submissions": 101700.0, "testcase_example": "'\"book\"'", "body": "You are given a string s of even length. Split this string into two halves of equal lengths, and let a be the first half and b be the second half.\nTwo strings are alike if they have the same number of vowels ('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'). Notice that s contains uppercase and lowercase letters.\nReturn true if a and b are alike. Otherwise, return false.", "examples": [{"full_text": "Example 1:\nInput: s = \"book\"\nOutput: true\nExplanation: a = \"bo\" and b = \"ok\". a has 1 vowel and b has 1 vowel. Therefore, they are alike.", "input": "Input: s = \"book\"", "output": "Output: true", "explanation": "Explanation: a = \"bo\" and b = \"ok\". a has 1 vowel and b has 1 vowel. Therefore, they are alike."}, {"full_text": "Example 2:\nInput: s = \"textbook\"\nOutput: false\nExplanation: a = \"text\" and b = \"book\". a has 1 vowel whereas b has 2. Therefore, they are not alike.\nNotice that the vowel o is counted twice.", "input": "Input: s = \"textbook\"", "output": "Output: false", "explanation": "Explanation: a = \"text\" and b = \"book\". a has 1 vowel whereas b has 2. Therefore, they are not alike.\nNotice that the vowel o is counted twice."}], "constraints": "Constraints:\n2 <= s.length <= 1000\ns.length is even.\ns consists of uppercase and lowercase letters.", "notes": ""}, "1700": {"label": "Easy", "title": "Number of Students Unable to Eat Lunch", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6787000000000001, "total_accepted": 33800.0, "total_submissions": 49800.0, "testcase_example": "'[1,1,0,0]\\n[0,1,0,1]'", "body": "The school cafeteria offers circular and square sandwiches at lunch break, referred to by numbers 0 and 1 respectively. All students stand in a queue. Each student either prefers square or circular sandwiches.\nThe number of sandwiches in the cafeteria is equal to the number of students. The sandwiches are placed in a stack. At each step:\nIf the student at the front of the queue prefers the sandwich on the top of the stack, they will take it and leave the queue.\nOtherwise, they will leave it and go to the queue's end.\nThis continues until none of the queue students want to take the top sandwich and are thus unable to eat.\nYou are given two integer arrays students and sandwiches where sandwiches[i] is the type of the i^\u200b\u200b\u200b\u200b\u200b\u200bth sandwich in the stack (i = 0 is the top of the stack) and students[j] is the preference of the j^\u200b\u200b\u200b\u200b\u200b\u200bth student in the initial queue (j = 0 is the front of the queue). Return the number of students that are unable to eat.", "examples": [{"full_text": "Example 1:\nInput: students = [1,1,0,0], sandwiches = [0,1,0,1]\nOutput: 0\nExplanation:\n- Front student leaves the top sandwich and returns to the end of the line making students = [1,0,0,1].\n- Front student leaves the top sandwich and returns to the end of the line making students = [0,0,1,1].\n- Front student takes the top sandwich and leaves the line making students = [0,1,1] and sandwiches = [1,0,1].\n- Front student leaves the top sandwich and returns to the end of the line making students = [1,1,0].\n- Front student takes the top sandwich and leaves the line making students = [1,0] and sandwiches = [0,1].\n- Front student leaves the top sandwich and returns to the end of the line making students = [0,1].\n- Front student takes the top sandwich and leaves the line making students = [1] and sandwiches = [1].\n- Front student takes the top sandwich and leaves the line making students = [] and sandwiches = [].\nHence all students are able to eat.", "input": "Input: students = [1,1,0,0], sandwiches = [0,1,0,1]", "output": "Output: 0", "explanation": "Explanation:\n- Front student leaves the top sandwich and returns to the end of the line making students = [1,0,0,1].\n- Front student leaves the top sandwich and returns to the end of the line making students = [0,0,1,1].\n- Front student takes the top sandwich and leaves the line making students = [0,1,1] and sandwiches = [1,0,1].\n- Front student leaves the top sandwich and returns to the end of the line making students = [1,1,0].\n- Front student takes the top sandwich and leaves the line making students = [1,0] and sandwiches = [0,1].\n- Front student leaves the top sandwich and returns to the end of the line making students = [0,1].\n- Front student takes the top sandwich and leaves the line making students = [1] and sandwiches = [1].\n- Front student takes the top sandwich and leaves the line making students = [] and sandwiches = [].\nHence all students are able to eat."}, {"full_text": "Example 2:\nInput: students = [1,1,1,0,0,1], sandwiches = [1,0,0,0,1,1]\nOutput: 3", "input": "Input: students = [1,1,1,0,0,1], sandwiches = [1,0,0,0,1,1]", "output": "Output: 3", "explanation": ""}], "constraints": "Constraints:\n1 <= students.length, sandwiches.length <= 100\nstudents.length == sandwiches.length\nsandwiches[i] is 0 or 1.\nstudents[i] is 0 or 1.", "notes": ""}, "1694": {"label": "Easy", "title": "Reformat Phone Number", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6511, "total_accepted": 23000.0, "total_submissions": 35300.0, "testcase_example": "'\"1-23-45 6\"'", "body": "You are given a phone number as a string number. number consists of digits, spaces ' ', and/or dashes '-'.\nYou would like to reformat the phone number in a certain manner. Firstly, remove all spaces and dashes. Then, group the digits from left to right into blocks of length 3 until there are 4 or fewer digits. The final digits are then grouped as follows:\n2 digits: A single block of length 2.\n3 digits: A single block of length 3.\n4 digits: Two blocks of length 2 each.\nThe blocks are then joined by dashes. Notice that the reformatting process should never produce any blocks of length 1 and produce at most two blocks of length 2.\nReturn the phone number after formatting.", "examples": [{"full_text": "Example 1:\nInput: number = \"1-23-45 6\"\nOutput: \"123-456\"\nExplanation: The digits are \"123456\".\nStep 1: There are more than 4 digits, so group the next 3 digits. The 1st block is \"123\".\nStep 2: There are 3 digits remaining, so put them in a single block of length 3. The 2nd block is \"456\".\nJoining the blocks gives \"123-456\".", "input": "Input: number = \"1-23-45 6\"", "output": "Output: \"123-456\"", "explanation": "Explanation: The digits are \"123456\".\nStep 1: There are more than 4 digits, so group the next 3 digits. The 1st block is \"123\".\nStep 2: There are 3 digits remaining, so put them in a single block of length 3. The 2nd block is \"456\".\nJoining the blocks gives \"123-456\"."}, {"full_text": "Example 2:\nInput: number = \"123 4-567\"\nOutput: \"123-45-67\"\nExplanation: The digits are \"1234567\".\nStep 1: There are more than 4 digits, so group the next 3 digits. The 1st block is \"123\".\nStep 2: There are 4 digits left, so split them into two blocks of length 2. The blocks are \"45\" and \"67\".\nJoining the blocks gives \"123-45-67\".", "input": "Input: number = \"123 4-567\"", "output": "Output: \"123-45-67\"", "explanation": "Explanation: The digits are \"1234567\".\nStep 1: There are more than 4 digits, so group the next 3 digits. The 1st block is \"123\".\nStep 2: There are 4 digits left, so split them into two blocks of length 2. The blocks are \"45\" and \"67\".\nJoining the blocks gives \"123-45-67\"."}, {"full_text": "Example 3:\nInput: number = \"123 4-5678\"\nOutput: \"123-456-78\"\nExplanation: The digits are \"12345678\".\nStep 1: The 1st block is \"123\".\nStep 2: The 2nd block is \"456\".\nStep 3: There are 2 digits left, so put them in a single block of length 2. The 3rd block is \"78\".\nJoining the blocks gives \"123-456-78\".", "input": "Input: number = \"123 4-5678\"", "output": "Output: \"123-456-78\"", "explanation": "Explanation: The digits are \"12345678\".\nStep 1: The 1st block is \"123\".\nStep 2: The 2nd block is \"456\".\nStep 3: There are 2 digits left, so put them in a single block of length 2. The 3rd block is \"78\".\nJoining the blocks gives \"123-456-78\"."}], "constraints": "Constraints:\n2 <= number.length <= 100\nnumber consists of digits and the characters '-' and ' '.\nThere are at least two digits in number.", "notes": ""}, "1688": {"label": "Easy", "title": "Count of Matches in Tournament", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.8255, "total_accepted": 62200.0, "total_submissions": 75300.0, "testcase_example": "'7'", "body": "You are given an integer n, the number of teams in a tournament that has strange rules:\nIf the current number of teams is even, each team gets paired with another team. A total of n / 2 matches are played, and n / 2 teams advance to the next round.\nIf the current number of teams is odd, one team randomly advances in the tournament, and the rest gets paired. A total of (n - 1) / 2 matches are played, and (n - 1) / 2 + 1 teams advance to the next round.\nReturn the number of matches played in the tournament until a winner is decided.", "examples": [{"full_text": "Example 1:\nInput: n = 7\nOutput: 6\nExplanation: Details of the tournament:\n- 1st Round: Teams = 7, Matches = 3, and 4 teams advance.\n- 2nd Round: Teams = 4, Matches = 2, and 2 teams advance.\n- 3rd Round: Teams = 2, Matches = 1, and 1 team is declared the winner.\nTotal number of matches = 3 + 2 + 1 = 6.", "input": "Input: n = 7", "output": "Output: 6", "explanation": "Explanation: Details of the tournament:\n- 1st Round: Teams = 7, Matches = 3, and 4 teams advance.\n- 2nd Round: Teams = 4, Matches = 2, and 2 teams advance.\n- 3rd Round: Teams = 2, Matches = 1, and 1 team is declared the winner.\nTotal number of matches = 3 + 2 + 1 = 6."}, {"full_text": "Example 2:\nInput: n = 14\nOutput: 13\nExplanation: Details of the tournament:\n- 1st Round: Teams = 14, Matches = 7, and 7 teams advance.\n- 2nd Round: Teams = 7, Matches = 3, and 4 teams advance.\n- 3rd Round: Teams = 4, Matches = 2, and 2 teams advance.\n- 4th Round: Teams = 2, Matches = 1, and 1 team is declared the winner.\nTotal number of matches = 7 + 3 + 2 + 1 = 13.", "input": "Input: n = 14", "output": "Output: 13", "explanation": "Explanation: Details of the tournament:\n- 1st Round: Teams = 14, Matches = 7, and 7 teams advance.\n- 2nd Round: Teams = 7, Matches = 3, and 4 teams advance.\n- 3rd Round: Teams = 4, Matches = 2, and 2 teams advance.\n- 4th Round: Teams = 2, Matches = 1, and 1 team is declared the winner.\nTotal number of matches = 7 + 3 + 2 + 1 = 13."}], "constraints": "Constraints:\n1 <= n <= 200", "notes": ""}, "1684": {"label": "Easy", "title": "Count the Number of Consistent Strings", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.8177, "total_accepted": 77400.0, "total_submissions": 94700.0, "testcase_example": "'\"ab\"\\n[\"ad\",\"bd\",\"aaab\",\"baa\",\"badab\"]'", "body": "You are given a string allowed consisting of distinct characters and an array of strings words. A string is consistent if all characters in the string appear in the string allowed.\nReturn the number of consistent strings in the array words.", "examples": [{"full_text": "Example 1:\nInput: allowed = \"ab\", words = [\"ad\",\"bd\",\"aaab\",\"baa\",\"badab\"]\nOutput: 2\nExplanation: Strings \"aaab\" and \"baa\" are consistent since they only contain characters 'a' and 'b'.", "input": "Input: allowed = \"ab\", words = [\"ad\",\"bd\",\"aaab\",\"baa\",\"badab\"]", "output": "Output: 2", "explanation": "Explanation: Strings \"aaab\" and \"baa\" are consistent since they only contain characters 'a' and 'b'."}, {"full_text": "Example 2:\nInput: allowed = \"abc\", words = [\"a\",\"b\",\"c\",\"ab\",\"ac\",\"bc\",\"abc\"]\nOutput: 7\nExplanation: All strings are consistent.", "input": "Input: allowed = \"abc\", words = [\"a\",\"b\",\"c\",\"ab\",\"ac\",\"bc\",\"abc\"]", "output": "Output: 7", "explanation": "Explanation: All strings are consistent."}, {"full_text": "Example 3:\nInput: allowed = \"cad\", words = [\"cc\",\"acd\",\"b\",\"ba\",\"bac\",\"bad\",\"ac\",\"d\"]\nOutput: 4\nExplanation: Strings \"cc\", \"acd\", \"ac\", and \"d\" are consistent.", "input": "Input: allowed = \"cad\", words = [\"cc\",\"acd\",\"b\",\"ba\",\"bac\",\"bad\",\"ac\",\"d\"]", "output": "Output: 4", "explanation": "Explanation: Strings \"cc\", \"acd\", \"ac\", and \"d\" are consistent."}], "constraints": "Constraints:\n1 <= words.length <= 10^4\n1 <= allowed.length <=^ 26\n1 <= words[i].length <= 10\nThe characters in allowed are distinct.\nwords[i] and allowed contain only lowercase English letters.", "notes": ""}, "1678": {"label": "Easy", "title": "Goal Parser Interpretation", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.8539, "total_accepted": 89900.0, "total_submissions": 105200.0, "testcase_example": "'\"G()(al)\"'", "body": "You own a Goal Parser that can interpret a string command. The command consists of an alphabet of \"G\", \"()\" and/or \"(al)\" in some order. The Goal Parser will interpret \"G\" as the string \"G\", \"()\" as the string \"o\", and \"(al)\" as the string \"al\". The interpreted strings are then concatenated in the original order.\nGiven the string command, return the Goal Parser's interpretation of command.", "examples": [{"full_text": "Example 1:\nInput: command = \"G()(al)\"\nOutput: \"Goal\"\nExplanation:\nThe Goal Parser interprets the command as follows:\nG -> G\n() -> o\n(al) -> al\nThe final concatenated result is \"Goal\".", "input": "Input: command = \"G()(al)\"", "output": "Output: \"Goal\"", "explanation": "Explanation:\nThe Goal Parser interprets the command as follows:\nG -> G\n() -> o\n(al) -> al\nThe final concatenated result is \"Goal\"."}, {"full_text": "Example 2:\nInput: command = \"G()()()()(al)\"\nOutput: \"Gooooal\"", "input": "Input: command = \"G()()()()(al)\"", "output": "Output: \"Gooooal\"", "explanation": ""}, {"full_text": "Example 3:\nInput: command = \"(al)G(al)()()G\"\nOutput: \"alGalooG\"", "input": "Input: command = \"(al)G(al)()()G\"", "output": "Output: \"alGalooG\"", "explanation": ""}], "constraints": "Constraints:\n1 <= command.length <= 100\ncommand consists of \"G\", \"()\", and/or \"(al)\" in some order.", "notes": ""}, "1672": {"label": "Easy", "title": "Richest Customer Wealth", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.8937, "total_accepted": 246200.0, "total_submissions": 275500.0, "testcase_example": "'[[1,2,3],[3,2,1]]'", "body": "You are given an m x n integer grid accounts where accounts[i][j] is the amount of money the i\u200b\u200b\u200b\u200b\u200b^\u200b\u200b\u200b\u200b\u200b\u200bth\u200b\u200b\u200b\u200b customer has in the j\u200b\u200b\u200b\u200b\u200b^\u200b\u200b\u200b\u200b\u200b\u200bth\u200b\u200b\u200b\u200b bank. Return the wealth that the richest customer has.\nA customer's wealth is the amount of money they have in all their bank accounts. The richest customer is the customer that has the maximum wealth.", "examples": [{"full_text": "Example 1:\nInput: accounts = [[1,2,3],[3,2,1]]\nOutput: 6\nExplanation:\n1st customer has wealth = 1 + 2 + 3 = 6\n2nd customer has wealth = 3 + 2 + 1 = 6\nBoth customers are considered the richest with a wealth of 6 each, so return 6.", "input": "Input: accounts = [[1,2,3],[3,2,1]]", "output": "Output: 6", "explanation": "Explanation:\n1st customer has wealth = 1 + 2 + 3 = 6\n2nd customer has wealth = 3 + 2 + 1 = 6\nBoth customers are considered the richest with a wealth of 6 each, so return 6."}, {"full_text": "Example 2:\nInput: accounts = [[1,5],[7,3],[3,5]]\nOutput: 10\nExplanation:\n1st customer has wealth = 6\n2nd customer has wealth = 10\n3rd customer has wealth = 8\nThe 2nd customer is the richest with a wealth of 10.", "input": "Input: accounts = [[1,5],[7,3],[3,5]]", "output": "Output: 10", "explanation": "Explanation:\n1st customer has wealth = 6\n2nd customer has wealth = 10\n3rd customer has wealth = 8\nThe 2nd customer is the richest with a wealth of 10."}, {"full_text": "Example 3:\nInput: accounts = [[2,8,7],[7,1,3],[1,9,5]]\nOutput: 17", "input": "Input: accounts = [[2,8,7],[7,1,3],[1,9,5]]", "output": "Output: 17", "explanation": ""}], "constraints": "Constraints:\nm ==\naccounts.length\nn ==\naccounts[i].length\n1 <= m, n <= 50\n1 <= accounts[i][j] <= 100", "notes": ""}, "1668": {"label": "Easy", "title": "Maximum Repeating Substring", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3948, "total_accepted": 21900.0, "total_submissions": 55600.0, "testcase_example": "'\"ababc\"\\n\"ab\"'", "body": "For a string sequence, a string word is k-repeating if word concatenated k times is a substring of sequence. The word's maximum k-repeating value is the highest value k where word is k-repeating in sequence. If word is not a substring of sequence, word's maximum k-repeating value is 0.\nGiven strings sequence and word, return the maximum k-repeating value of word in sequence.", "examples": [{"full_text": "Example 1:\nInput: sequence = \"ababc\", word = \"ab\"\nOutput: 2\nExplanation: \"abab\" is a substring in \"ababc\".", "input": "Input: sequence = \"ababc\", word = \"ab\"", "output": "Output: 2", "explanation": "Explanation: \"abab\" is a substring in \"ababc\"."}, {"full_text": "Example 2:\nInput: sequence = \"ababc\", word = \"ba\"\nOutput: 1\nExplanation: \"ba\" is a substring in \"ababc\". \"baba\" is not a substring in \"ababc\".", "input": "Input: sequence = \"ababc\", word = \"ba\"", "output": "Output: 1", "explanation": "Explanation: \"ba\" is a substring in \"ababc\". \"baba\" is not a substring in \"ababc\"."}, {"full_text": "Example 3:\nInput: sequence = \"ababc\", word = \"ac\"\nOutput: 0\nExplanation: \"ac\" is not a substring in \"ababc\".", "input": "Input: sequence = \"ababc\", word = \"ac\"", "output": "Output: 0", "explanation": "Explanation: \"ac\" is not a substring in \"ababc\"."}], "constraints": "Constraints:\n1 <= sequence.length <= 100\n1 <= word.length <= 100\nsequence and word\ncontains only lowercase English letters.", "notes": ""}, "1662": {"label": "Easy", "title": "Check If Two String Arrays are Equivalent", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.8193, "total_accepted": 130300.00000000001, "total_submissions": 159000.0, "testcase_example": "'[\"ab\", \"c\"]\\n[\"a\", \"bc\"]'", "body": "Given two string arrays word1 and word2, return true if the two arrays represent the same string, and false otherwise.\nA string is represented by an array if the array elements concatenated in order forms the string.", "examples": [{"full_text": "Example 1:\nInput: word1 = [\"ab\", \"c\"], word2 = [\"a\", \"bc\"]\nOutput: true\nExplanation:\nword1 represents string \"ab\" + \"c\" -> \"abc\"\nword2 represents string \"a\" + \"bc\" -> \"abc\"\nThe strings are the same, so return true.", "input": "Input: word1 = [\"ab\", \"c\"], word2 = [\"a\", \"bc\"]", "output": "Output: true", "explanation": "Explanation:\nword1 represents string \"ab\" + \"c\" -> \"abc\"\nword2 represents string \"a\" + \"bc\" -> \"abc\"\nThe strings are the same, so return true."}, {"full_text": "Example 2:\nInput: word1 = [\"a\", \"cb\"], word2 = [\"ab\", \"c\"]\nOutput: false", "input": "Input: word1 = [\"a\", \"cb\"], word2 = [\"ab\", \"c\"]", "output": "Output: false", "explanation": ""}, {"full_text": "Example 3:\nInput: word1 = [\"abc\", \"d\", \"defg\"], word2 = [\"abcddefg\"]\nOutput: true", "input": "Input: word1 = [\"abc\", \"d\", \"defg\"], word2 = [\"abcddefg\"]", "output": "Output: true", "explanation": ""}], "constraints": "Constraints:\n1 <= word1.length, word2.length <= 10^3\n1 <= word1[i].length, word2[i].length <= 10^3\n1 <= sum(word1[i].length), sum(word2[i].length) <= 10^3\nword1[i] and word2[i] consist of lowercase letters.", "notes": ""}, "1656": {"label": "Easy", "title": "Design an Ordered Stream", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.8323999999999999, "total_accepted": 32200.000000000004, "total_submissions": 38700.0, "testcase_example": "'[\"OrderedStream\",\"insert\",\"insert\",\"insert\",\"insert\",\"insert\"]\\n' +\n  '[[5],[3,\"ccccc\"],[1,\"aaaaa\"],[2,\"bbbbb\"],[5,\"eeeee\"],[4,\"ddddd\"]]'", "body": "There is a stream of n (idKey, value) pairs arriving in an arbitrary order, where idKey is an integer between 1 and n and value is a string. No two pairs have the same id.\nDesign a stream that returns the values in increasing order of their IDs by returning a chunk (list) of values after each insertion. The concatenation of all the chunks should result in a list of the sorted values.\nImplement the OrderedStream class:\nOrderedStream(int n) Constructs the stream to take n values.\nString[] insert(int idKey, String value) Inserts the pair (idKey, value) into the stream, then returns the largest possible chunk of currently inserted values that appear next in the order.", "examples": [{"full_text": "Example:\nInput\n[\"OrderedStream\", \"insert\", \"insert\", \"insert\", \"insert\", \"insert\"]\n[[5], [3, \"ccccc\"], [1, \"aaaaa\"], [2, \"bbbbb\"], [5, \"eeeee\"], [4, \"ddddd\"]]\nOutput\n[null, [], [\"aaaaa\"], [\"bbbbb\", \"ccccc\"], [], [\"ddddd\", \"eeeee\"]]\nExplanation\n// Note that the values ordered by ID is [\"aaaaa\", \"bbbbb\", \"ccccc\", \"ddddd\", \"eeeee\"].\nOrderedStream os = new OrderedStream(5);\nos.insert(3, \"ccccc\"); // Inserts (3, \"ccccc\"), returns [].\nos.insert(1, \"aaaaa\"); // Inserts (1, \"aaaaa\"), returns [\"aaaaa\"].\nos.insert(2, \"bbbbb\"); // Inserts (2, \"bbbbb\"), returns [\"bbbbb\", \"ccccc\"].\nos.insert(5, \"eeeee\"); // Inserts (5, \"eeeee\"), returns [].\nos.insert(4, \"ddddd\"); // Inserts (4, \"ddddd\"), returns [\"ddddd\", \"eeeee\"].\n// Concatentating all the chunks returned:\n// [] + [\"aaaaa\"] + [\"bbbbb\", \"ccccc\"] + [] + [\"ddddd\", \"eeeee\"] = [\"aaaaa\", \"bbbbb\", \"ccccc\", \"ddddd\", \"eeeee\"]\n// The resulting order is the same as the order above.", "input": "Input\n[\"OrderedStream\", \"insert\", \"insert\", \"insert\", \"insert\", \"insert\"]\n[[5], [3, \"ccccc\"], [1, \"aaaaa\"], [2, \"bbbbb\"], [5, \"eeeee\"], [4, \"ddddd\"]]", "output": "Output\n[null, [], [\"aaaaa\"], [\"bbbbb\", \"ccccc\"], [], [\"ddddd\", \"eeeee\"]]", "explanation": "Explanation\n// Note that the values ordered by ID is [\"aaaaa\", \"bbbbb\", \"ccccc\", \"ddddd\", \"eeeee\"].\nOrderedStream os = new OrderedStream(5);\nos.insert(3, \"ccccc\"); // Inserts (3, \"ccccc\"), returns [].\nos.insert(1, \"aaaaa\"); // Inserts (1, \"aaaaa\"), returns [\"aaaaa\"].\nos.insert(2, \"bbbbb\"); // Inserts (2, \"bbbbb\"), returns [\"bbbbb\", \"ccccc\"].\nos.insert(5, \"eeeee\"); // Inserts (5, \"eeeee\"), returns [].\nos.insert(4, \"ddddd\"); // Inserts (4, \"ddddd\"), returns [\"ddddd\", \"eeeee\"].\n// Concatentating all the chunks returned:\n// [] + [\"aaaaa\"] + [\"bbbbb\", \"ccccc\"] + [] + [\"ddddd\", \"eeeee\"] = [\"aaaaa\", \"bbbbb\", \"ccccc\", \"ddddd\", \"eeeee\"]\n// The resulting order is the same as the order above."}], "constraints": "Constraints:\n1 <= n <= 1000\n1 <= id <= n\nvalue.length == 5\nvalue\nconsists only of lowercase letters.\nEach call to insert\nwill have a unique id.\nExactly n calls will be made to insert.", "notes": ""}, "1652": {"label": "Easy", "title": "Defuse the Bomb", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6078, "total_accepted": 21400.0, "total_submissions": 35300.0, "testcase_example": "'[5,7,1,4]\\n3'", "body": "You have a bomb to defuse, and your time is running out! Your informer will provide you with a circular array code\nof length of n\nand a key k.\nTo decrypt the code, you must replace every number. All the numbers are replaced simultaneously.\nIf k > 0, replace the i^th number with the sum of the next k numbers.\nIf k < 0, replace the i^th number with the sum of the previous k numbers.\nIf k == 0, replace the i^th number with 0.\nAs code is circular, the next element of code[n-1] is code[0], and the previous element of code[0] is code[n-1].\nGiven the circular array code and an integer key k, return the decrypted code to defuse the bomb!", "examples": [{"full_text": "Example 1:\nInput: code = [5,7,1,4], k = 3\nOutput: [12,10,16,13]\nExplanation: Each number is replaced by the sum of the next 3 numbers. The decrypted code is [7+1+4, 1+4+5, 4+5+7, 5+7+1]. Notice that the numbers wrap around.", "input": "Input: code = [5,7,1,4], k = 3", "output": "Output: [12,10,16,13]", "explanation": "Explanation: Each number is replaced by the sum of the next 3 numbers. The decrypted code is [7+1+4, 1+4+5, 4+5+7, 5+7+1]. Notice that the numbers wrap around."}, {"full_text": "Example 2:\nInput: code = [1,2,3,4], k = 0\nOutput: [0,0,0,0]\nExplanation: When k is zero, the numbers are replaced by 0.", "input": "Input: code = [1,2,3,4], k = 0", "output": "Output: [0,0,0,0]", "explanation": "Explanation: When k is zero, the numbers are replaced by 0."}, {"full_text": "Example 3:\nInput: code = [2,4,9,3], k = -2\nOutput: [12,5,6,13]\nExplanation: The decrypted code is [3+9, 2+3, 4+2, 9+4]. Notice that the numbers wrap around again. If k is negative, the sum is of the previous numbers.", "input": "Input: code = [2,4,9,3], k = -2", "output": "Output: [12,5,6,13]", "explanation": "Explanation: The decrypted code is [3+9, 2+3, 4+2, 9+4]. Notice that the numbers wrap around again. If k is negative, the sum is of the previous numbers."}], "constraints": "Constraints:\nn == code.length\n1 <= n\n<= 100\n1 <= code[i] <= 100\n-(n - 1) <= k <= n - 1", "notes": ""}, "1646": {"label": "Easy", "title": "Get Maximum in Generated Array", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5105, "total_accepted": 53700.0, "total_submissions": 105200.0, "testcase_example": "'7'", "body": "You are given an integer n. A 0-indexed integer array nums of length n + 1 is generated in the following way:\nnums[0] = 0\nnums[1] = 1\nnums[2 * i] = nums[i] when 2 <= 2 * i <= n\nnums[2 * i + 1] = nums[i] + nums[i + 1] when 2 <= 2 * i + 1 <= n\nReturn the maximum integer in the array nums\u200b\u200b\u200b.", "examples": [{"full_text": "Example 1:\nInput: n = 7\nOutput: 3\nExplanation: According to the given rules:\nnums[0] = 0\nnums[1] = 1\nnums[(1 * 2) = 2] = nums[1] = 1\nnums[(1 * 2) + 1 = 3] = nums[1] + nums[2] = 1 + 1 = 2\nnums[(2 * 2) = 4] = nums[2] = 1\nnums[(2 * 2) + 1 = 5] = nums[2] + nums[3] = 1 + 2 = 3\nnums[(3 * 2) = 6] = nums[3] = 2\nnums[(3 * 2) + 1 = 7] = nums[3] + nums[4] = 2 + 1 = 3\nHence, nums = [0,1,1,2,1,3,2,3], and the maximum is max(0,1,1,2,1,3,2,3) = 3.", "input": "Input: n = 7", "output": "Output: 3", "explanation": "Explanation: According to the given rules:\nnums[0] = 0\nnums[1] = 1\nnums[(1 * 2) = 2] = nums[1] = 1\nnums[(1 * 2) + 1 = 3] = nums[1] + nums[2] = 1 + 1 = 2\nnums[(2 * 2) = 4] = nums[2] = 1\nnums[(2 * 2) + 1 = 5] = nums[2] + nums[3] = 1 + 2 = 3\nnums[(3 * 2) = 6] = nums[3] = 2\nnums[(3 * 2) + 1 = 7] = nums[3] + nums[4] = 2 + 1 = 3\nHence, nums = [0,1,1,2,1,3,2,3], and the maximum is max(0,1,1,2,1,3,2,3) = 3."}, {"full_text": "Example 2:\nInput: n = 2\nOutput: 1\nExplanation: According to the given rules, nums = [0,1,1]. The maximum is max(0,1,1) = 1.", "input": "Input: n = 2", "output": "Output: 1", "explanation": "Explanation: According to the given rules, nums = [0,1,1]. The maximum is max(0,1,1) = 1."}, {"full_text": "Example 3:\nInput: n = 3\nOutput: 2\nExplanation: According to the given rules, nums = [0,1,1,2]. The maximum is max(0,1,1,2) = 2.", "input": "Input: n = 3", "output": "Output: 2", "explanation": "Explanation: According to the given rules, nums = [0,1,1,2]. The maximum is max(0,1,1,2) = 2."}], "constraints": "Constraints:\n0 <= n <= 100", "notes": ""}, "1640": {"label": "Easy", "title": "Check Array Formation Through Concatenation", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5567, "total_accepted": 65099.99999999999, "total_submissions": 116900.0, "testcase_example": "'[15,88]\\n[[88],[15]]'", "body": "You are given an array of distinct integers arr and an array of integer arrays pieces, where the integers in pieces are distinct. Your goal is to form arr by concatenating the arrays in pieces in any order. However, you are not allowed to reorder the integers in each array pieces[i].\nReturn true if it is possible to form the array arr from pieces. Otherwise, return false.", "examples": [{"full_text": "Example 1:\nInput: arr = [15,88], pieces = [[88],[15]]\nOutput: true\nExplanation: Concatenate [15] then [88]", "input": "Input: arr = [15,88], pieces = [[88],[15]]", "output": "Output: true", "explanation": "Explanation: Concatenate [15] then [88]"}, {"full_text": "Example 2:\nInput: arr = [49,18,16], pieces = [[16,18,49]]\nOutput: false\nExplanation: Even though the numbers match, we cannot reorder pieces[0].", "input": "Input: arr = [49,18,16], pieces = [[16,18,49]]", "output": "Output: false", "explanation": "Explanation: Even though the numbers match, we cannot reorder pieces[0]."}, {"full_text": "Example 3:\nInput: arr = [91,4,64,78], pieces = [[78],[4,64],[91]]\nOutput: true\nExplanation: Concatenate [91] then [4,64] then [78]", "input": "Input: arr = [91,4,64,78], pieces = [[78],[4,64],[91]]", "output": "Output: true", "explanation": "Explanation: Concatenate [91] then [4,64] then [78]"}], "constraints": "Constraints:\n1 <= pieces.length <= arr.length <= 100\nsum(pieces[i].length) == arr.length\n1 <= pieces[i].length <= arr.length\n1 <= arr[i], pieces[i][j] <= 100\nThe integers in arr are distinct.\nThe integers in pieces are distinct (i.e., If we flatten pieces in a 1D array, all the integers in this array are distinct).", "notes": ""}, "1636": {"label": "Easy", "title": "Sort Array by Increasing Frequency", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6826000000000001, "total_accepted": 51600.0, "total_submissions": 75600.0, "testcase_example": "'[1,1,2,2,2,3]'", "body": "Given an array of integers nums, sort the array in increasing order based on the frequency of the values. If multiple values have the same frequency, sort them in decreasing order.\nReturn the sorted array.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,1,2,2,2,3]\nOutput: [3,1,1,2,2,2]\nExplanation: '3' has a frequency of 1, '1' has a frequency of 2, and '2' has a frequency of 3.", "input": "Input: nums = [1,1,2,2,2,3]", "output": "Output: [3,1,1,2,2,2]", "explanation": "Explanation: '3' has a frequency of 1, '1' has a frequency of 2, and '2' has a frequency of 3."}, {"full_text": "Example 2:\nInput: nums = [2,3,1,3,2]\nOutput: [1,3,3,2,2]\nExplanation: '2' and '3' both have a frequency of 2, so they are sorted in decreasing order.", "input": "Input: nums = [2,3,1,3,2]", "output": "Output: [1,3,3,2,2]", "explanation": "Explanation: '2' and '3' both have a frequency of 2, so they are sorted in decreasing order."}, {"full_text": "Example 3:\nInput: nums = [-1,1,-6,4,5,-6,1,4,1]\nOutput: [5,-1,4,4,-6,-6,1,1,1]", "input": "Input: nums = [-1,1,-6,4,5,-6,1,4,1]", "output": "Output: [5,-1,4,4,-6,-6,1,1,1]", "explanation": ""}], "constraints": "Constraints:\n1 <= nums.length <= 100\n-100 <= nums[i] <= 100", "notes": ""}, "1629": {"label": "Easy", "title": "Slowest Key", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5972, "total_accepted": 72700.0, "total_submissions": 121800.0, "testcase_example": "'[9,29,49,50]\\n\"cbcd\"'", "body": "A newly designed keypad was tested, where a tester pressed a sequence of n keys, one at a time.\nYou are given a string keysPressed of length n, where keysPressed[i] was the i^th key pressed in the testing sequence, and a sorted list releaseTimes, where releaseTimes[i] was the time the i^th key was released. Both arrays are 0-indexed. The 0^th key was pressed at the time 0,\nand every subsequent key was pressed at the exact time the previous key was released.\nThe tester wants to know the key of the keypress that had the longest duration. The i^th^ keypress had a duration of releaseTimes[i] - releaseTimes[i - 1], and the 0^th keypress had a duration of releaseTimes[0].\nNote that the same key could have been pressed multiple times during the test, and these multiple presses of the same key may not have had the same duration.\nReturn the key of the keypress that had the longest duration. If there are multiple such keypresses, return the lexicographically largest key of the keypresses.", "examples": [{"full_text": "Example 1:\nInput: releaseTimes = [9,29,49,50], keysPressed = \"cbcd\"\nOutput: \"c\"\nExplanation: The keypresses were as follows:\nKeypress for 'c' had a duration of 9 (pressed at time 0 and released at time 9).\nKeypress for 'b' had a duration of 29 - 9 = 20 (pressed at time 9 right after the release of the previous character and released at time 29).\nKeypress for 'c' had a duration of 49 - 29 = 20 (pressed at time 29 right after the release of the previous character and released at time 49).\nKeypress for 'd' had a duration of 50 - 49 = 1 (pressed at time 49 right after the release of the previous character and released at time 50).\nThe longest of these was the keypress for 'b' and the second keypress for 'c', both with duration 20.\n'c' is lexicographically larger than 'b', so the answer is 'c'.", "input": "Input: releaseTimes = [9,29,49,50], keysPressed = \"cbcd\"", "output": "Output: \"c\"", "explanation": "Explanation: The keypresses were as follows:\nKeypress for 'c' had a duration of 9 (pressed at time 0 and released at time 9).\nKeypress for 'b' had a duration of 29 - 9 = 20 (pressed at time 9 right after the release of the previous character and released at time 29).\nKeypress for 'c' had a duration of 49 - 29 = 20 (pressed at time 29 right after the release of the previous character and released at time 49).\nKeypress for 'd' had a duration of 50 - 49 = 1 (pressed at time 49 right after the release of the previous character and released at time 50).\nThe longest of these was the keypress for 'b' and the second keypress for 'c', both with duration 20.\n'c' is lexicographically larger than 'b', so the answer is 'c'."}, {"full_text": "Example 2:\nInput: releaseTimes = [12,23,36,46,62], keysPressed = \"spuda\"\nOutput: \"a\"\nExplanation: The keypresses were as follows:\nKeypress for 's' had a duration of 12.\nKeypress for 'p' had a duration of 23 - 12 = 11.\nKeypress for 'u' had a duration of 36 - 23 = 13.\nKeypress for 'd' had a duration of 46 - 36 = 10.\nKeypress for 'a' had a duration of 62 - 46 = 16.\nThe longest of these was the keypress for 'a' with duration 16.", "input": "Input: releaseTimes = [12,23,36,46,62], keysPressed = \"spuda\"", "output": "Output: \"a\"", "explanation": "Explanation: The keypresses were as follows:\nKeypress for 's' had a duration of 12.\nKeypress for 'p' had a duration of 23 - 12 = 11.\nKeypress for 'u' had a duration of 36 - 23 = 13.\nKeypress for 'd' had a duration of 46 - 36 = 10.\nKeypress for 'a' had a duration of 62 - 46 = 16.\nThe longest of these was the keypress for 'a' with duration 16."}], "constraints": "Constraints:\nreleaseTimes.length == n\nkeysPressed.length == n\n2 <= n <= 1000\n1 <= releaseTimes[i] <= 10^9\nreleaseTimes[i] < releaseTimes[i+1]\nkeysPressed contains only lowercase English letters.", "notes": ""}, "1624": {"label": "Easy", "title": "Largest Substring Between Two Equal Characters", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5922, "total_accepted": 29400.0, "total_submissions": 49600.0, "testcase_example": "'\"aa\"'", "body": "Given a string s, return the length of the longest substring between two equal characters, excluding the two characters. If there is no such substring return -1.\nA substring is a contiguous sequence of characters within a string.", "examples": [{"full_text": "Example 1:\nInput: s = \"aa\"\nOutput: 0\nExplanation: The optimal substring here is an empty substring between the two 'a's.", "input": "Input: s = \"aa\"", "output": "Output: 0", "explanation": "Explanation: The optimal substring here is an empty substring between the two 'a's."}, {"full_text": "Example 2:\nInput: s = \"abca\"\nOutput: 2\nExplanation: The optimal substring here is \"bc\".", "input": "Input: s = \"abca\"", "output": "Output: 2", "explanation": "Explanation: The optimal substring here is \"bc\"."}, {"full_text": "Example 3:\nInput: s = \"cbzxy\"\nOutput: -1\nExplanation: There are no characters that appear twice in s.", "input": "Input: s = \"cbzxy\"", "output": "Output: -1", "explanation": "Explanation: There are no characters that appear twice in s."}], "constraints": "Constraints:\n1 <= s.length <= 300\ns contains only lowercase English letters.", "notes": ""}, "1619": {"label": "Easy", "title": "Mean of Array After Removing Some Elements", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6455, "total_accepted": 29400.0, "total_submissions": 45500.0, "testcase_example": "'[1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3]'", "body": "Given an integer array arr, return the mean of the remaining integers after removing the smallest 5% and the largest 5% of the elements.\nAnswers within 10^-5 of the actual answer will be considered accepted.", "examples": [{"full_text": "Example 1:\nInput: arr = [1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3]\nOutput: 2.00000\nExplanation: After erasing the minimum and the maximum values of this array, all elements are equal to 2, so the mean is 2.", "input": "Input: arr = [1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3]", "output": "Output: 2.00000", "explanation": "Explanation: After erasing the minimum and the maximum values of this array, all elements are equal to 2, so the mean is 2."}, {"full_text": "Example 2:\nInput: arr = [6,2,7,5,1,2,0,3,10,2,5,0,5,5,0,8,7,6,8,0]\nOutput: 4.00000", "input": "Input: arr = [6,2,7,5,1,2,0,3,10,2,5,0,5,5,0,8,7,6,8,0]", "output": "Output: 4.00000", "explanation": ""}, {"full_text": "Example 3:\nInput: arr = [6,0,7,0,7,5,7,8,3,4,0,7,8,1,6,8,1,1,2,4,8,1,9,5,4,3,8,5,10,8,6,6,1,0,6,10,8,2,3,4]\nOutput: 4.77778", "input": "Input: arr = [6,0,7,0,7,5,7,8,3,4,0,7,8,1,6,8,1,1,2,4,8,1,9,5,4,3,8,5,10,8,6,6,1,0,6,10,8,2,3,4]", "output": "Output: 4.77778", "explanation": ""}], "constraints": "Constraints:\n20 <= arr.length <= 1000\narr.length is a multiple of 20.\n0 <= arr[i] <= 10^5", "notes": ""}, "1614": {"label": "Easy", "title": "Maximum Nesting Depth of the Parentheses", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.8295, "total_accepted": 76000.0, "total_submissions": 91600.0, "testcase_example": "'\"(1+(2*3)+((8)/4))+1\"'", "body": "A string is a valid parentheses string (denoted VPS) if it meets one of the following:\nIt is an empty string \"\", or a single character not equal to \"(\" or \")\",\nIt can be written as AB (A concatenated with B), where A and B are VPS's, or\nIt can be written as (A), where A is a VPS.\nWe can similarly define the nesting depth depth(S) of any VPS S as follows:\ndepth(\"\") = 0\ndepth(C) = 0, where C is a string with a single character not equal to \"(\" or \")\".\ndepth(A + B) = max(depth(A), depth(B)), where A and B are VPS's.\ndepth(\"(\" + A + \")\") = 1 + depth(A), where A is a VPS.\nFor example, \"\", \"()()\", and \"()(()())\" are VPS's (with nesting depths 0, 1, and 2), and \")(\" and \"(()\" are not VPS's.\nGiven a VPS represented as string s, return the nesting depth of s.", "examples": [{"full_text": "Example 1:\nInput: s = \"(1+(2*3)+((8)/4))+1\"\nOutput: 3\nExplanation: Digit 8 is inside of 3 nested parentheses in the string.", "input": "Input: s = \"(1+(2*3)+((8)/4))+1\"", "output": "Output: 3", "explanation": "Explanation: Digit 8 is inside of 3 nested parentheses in the string."}, {"full_text": "Example 2:\nInput: s = \"(1)+((2))+(((3)))\"\nOutput: 3", "input": "Input: s = \"(1)+((2))+(((3)))\"", "output": "Output: 3", "explanation": ""}], "constraints": "Constraints:\n1 <= s.length <= 100\ns consists of digits 0-9 and characters '+', '-', '*', '/', '(', and ')'.\nIt is guaranteed that parentheses expression s is a VPS.", "notes": ""}, "1608": {"label": "Easy", "title": "Special Array With X Elements Greater Than or Equal X", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6046, "total_accepted": 31700.0, "total_submissions": 52400.0, "testcase_example": "'[3,5]'", "body": "You are given an array nums of non-negative integers. nums is considered special if there exists a number x such that there are exactly x numbers in nums that are greater than or equal to x.\nNotice that x does not have to be an element in nums.\nReturn x if the array is special, otherwise, return -1. It can be proven that if nums is special, the value for x is unique.", "examples": [{"full_text": "Example 1:\nInput: nums = [3,5]\nOutput: 2\nExplanation: There are 2 values (3 and 5) that are greater than or equal to 2.", "input": "Input: nums = [3,5]", "output": "Output: 2", "explanation": "Explanation: There are 2 values (3 and 5) that are greater than or equal to 2."}, {"full_text": "Example 2:\nInput: nums = [0,0]\nOutput: -1\nExplanation: No numbers fit the criteria for x.\nIf x = 0, there should be 0 numbers >= x, but there are 2.\nIf x = 1, there should be 1 number >= x, but there are 0.\nIf x = 2, there should be 2 numbers >= x, but there are 0.\nx cannot be greater since there are only 2 numbers in nums.", "input": "Input: nums = [0,0]", "output": "Output: -1", "explanation": "Explanation: No numbers fit the criteria for x.\nIf x = 0, there should be 0 numbers >= x, but there are 2.\nIf x = 1, there should be 1 number >= x, but there are 0.\nIf x = 2, there should be 2 numbers >= x, but there are 0.\nx cannot be greater since there are only 2 numbers in nums."}, {"full_text": "Example 3:\nInput: nums = [0,4,3,0,4]\nOutput: 3\nExplanation: There are 3 values that are greater than or equal to 3.", "input": "Input: nums = [0,4,3,0,4]", "output": "Output: 3", "explanation": "Explanation: There are 3 values that are greater than or equal to 3."}], "constraints": "Constraints:\n1 <= nums.length <= 100\n0 <= nums[i] <= 1000", "notes": ""}, "1603": {"label": "Easy", "title": "Design Parking System", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.8723000000000001, "total_accepted": 103600.0, "total_submissions": 118700.0, "testcase_example": "'[\"ParkingSystem\",\"addCar\",\"addCar\",\"addCar\",\"addCar\"]\\n' +\n  '[[1,1,0],[1],[2],[3],[1]]'", "body": "Design a parking system for a parking lot. The parking lot has three kinds of parking spaces: big, medium, and small, with a fixed number of slots for each size.\nImplement the ParkingSystem class:\nParkingSystem(int big, int medium, int small) Initializes object of the ParkingSystem class. The number of slots for each parking space are given as part of the constructor.\nbool addCar(int carType) Checks whether there is a parking space of carType for the car that wants to get into the parking lot. carType can be of three kinds: big, medium, or small, which are represented by 1, 2, and 3 respectively. A car can only park in a parking space of its carType. If there is no space available, return false, else park the car in that size space and return true.", "examples": [{"full_text": "Example 1:\nInput\n[\"ParkingSystem\", \"addCar\", \"addCar\", \"addCar\", \"addCar\"]\n[[1, 1, 0], [1], [2], [3], [1]]\nOutput\n[null, true, true, false, false]\nExplanation\nParkingSystem parkingSystem = new ParkingSystem(1, 1, 0);\nparkingSystem.addCar(1); // return true because there is 1 available slot for a big car\nparkingSystem.addCar(2); // return true because there is 1 available slot for a medium car\nparkingSystem.addCar(3); // return false because there is no available slot for a small car\nparkingSystem.addCar(1); // return false because there is no available slot for a big car. It is already occupied.", "input": "Input\n[\"ParkingSystem\", \"addCar\", \"addCar\", \"addCar\", \"addCar\"]\n[[1, 1, 0], [1], [2], [3], [1]]", "output": "Output\n[null, true, true, false, false]", "explanation": "Explanation\nParkingSystem parkingSystem = new ParkingSystem(1, 1, 0);\nparkingSystem.addCar(1); // return true because there is 1 available slot for a big car\nparkingSystem.addCar(2); // return true because there is 1 available slot for a medium car\nparkingSystem.addCar(3); // return false because there is no available slot for a small car\nparkingSystem.addCar(1); // return false because there is no available slot for a big car. It is already occupied."}], "constraints": "Constraints:\n0 <= big, medium, small <= 1000\ncarType is 1, 2, or 3\nAt most 1000 calls will be made to addCar", "notes": ""}, "1598": {"label": "Easy", "title": "Crawler Log Folder", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6425, "total_accepted": 36300.0, "total_submissions": 56500.0, "testcase_example": "'[\"d1/\",\"d2/\",\"../\",\"d21/\",\"./\"]'", "body": "The Leetcode file system keeps a log each time some user performs a change folder operation.\nThe operations are described below:\n\"../\" : Move to the parent folder of the current folder. (If you are already in the main folder, remain in the same folder).\n\"./\" : Remain in the same folder.\n\"x/\" : Move to the child folder named x (This folder is guaranteed to always exist).\nYou are given a list of strings logs where logs[i] is the operation performed by the user at the i^th step.\nThe file system starts in the main folder, then the operations in logs are performed.\nReturn the minimum number of operations needed to go back to the main folder after the change folder operations.", "examples": [{"full_text": "Example 1:\nInput: logs = [\"d1/\",\"d2/\",\"../\",\"d21/\",\"./\"]\nOutput: 2\nExplanation: Use this change folder operation \"../\" 2 times and go back to the main folder.", "input": "Input: logs = [\"d1/\",\"d2/\",\"../\",\"d21/\",\"./\"]", "output": "Output: 2", "explanation": "Explanation: Use this change folder operation \"../\" 2 times and go back to the main folder."}, {"full_text": "Example 2:\nInput: logs = [\"d1/\",\"d2/\",\"./\",\"d3/\",\"../\",\"d31/\"]\nOutput: 3", "input": "Input: logs = [\"d1/\",\"d2/\",\"./\",\"d3/\",\"../\",\"d31/\"]", "output": "Output: 3", "explanation": ""}, {"full_text": "Example 3:\nInput: logs = [\"d1/\",\"../\",\"../\",\"../\"]\nOutput: 0", "input": "Input: logs = [\"d1/\",\"../\",\"../\",\"../\"]", "output": "Output: 0", "explanation": ""}], "constraints": "Constraints:\n1 <= logs.length <= 10^3\n2 <= logs[i].length <= 10\nlogs[i] contains lowercase English letters, digits, '.', and '/'.\nlogs[i] follows the format described in the statement.\nFolder names consist of lowercase English letters and digits.", "notes": ""}, "1592": {"label": "Easy", "title": "Rearrange Spaces Between Words", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.44, "total_accepted": 31900.0, "total_submissions": 72500.0, "testcase_example": "'\" this is a sentence \"'", "body": "You are given a string text of words that are placed among some number of spaces. Each word consists of one or more lowercase English letters and are separated by at least one space. It's guaranteed that text contains at least one word.\nRearrange the spaces so that there is an equal number of spaces between every pair of adjacent words and that number is maximized. If you cannot redistribute all the spaces equally, place the extra spaces at the end, meaning the returned string should be the same length as text.\nReturn the string after rearranging the spaces.", "examples": [{"full_text": "Example 1:\nInput: text = \" this is a sentence \"\nOutput: \"this is a sentence\"\nExplanation: There are a total of 9 spaces and 4 words. We can evenly divide the 9 spaces between the words: 9 / (4-1) = 3 spaces.", "input": "Input: text = \" this is a sentence \"", "output": "Output: \"this is a sentence\"", "explanation": "Explanation: There are a total of 9 spaces and 4 words. We can evenly divide the 9 spaces between the words: 9 / (4-1) = 3 spaces."}, {"full_text": "Example 2:\nInput: text = \" practice makes perfect\"\nOutput: \"practice makes perfect \"\nExplanation: There are a total of 7 spaces and 3 words. 7 / (3-1) = 3 spaces plus 1 extra space. We place this extra space at the end of the string.", "input": "Input: text = \" practice makes perfect\"", "output": "Output: \"practice makes perfect \"", "explanation": "Explanation: There are a total of 7 spaces and 3 words. 7 / (3-1) = 3 spaces plus 1 extra space. We place this extra space at the end of the string."}], "constraints": "Constraints:\n1 <= text.length <= 100\ntext consists of lowercase English letters and ' '.\ntext contains at least one word.", "notes": ""}, "1588": {"label": "Easy", "title": "Sum of All Odd Length Subarrays", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.8289, "total_accepted": 79100.0, "total_submissions": 95500.0, "testcase_example": "'[1,4,2,5,3]'", "body": "Given an array of positive integers\narr, calculate the sum of all possible odd-length subarrays.\nA subarray is a contiguous\nsubsequence of the array.\nReturn\nthe sum of all odd-length subarrays of\narr.", "examples": [{"full_text": "Example 1:\nInput: arr = [1,4,2,5,3]\nOutput: 58\nExplanation: The odd-length subarrays of arr and their sums are:\n[1] = 1\n[4] = 4\n[2] = 2\n[5] = 5\n[3] = 3\n[1,4,2] = 7\n[4,2,5] = 11\n[2,5,3] = 10\n[1,4,2,5,3] = 15\nIf we add all these together we get 1 + 4 + 2 + 5 + 3 + 7 + 11 + 10 + 15 = 58", "input": "Input: arr = [1,4,2,5,3]", "output": "Output: 58", "explanation": "Explanation: The odd-length subarrays of arr and their sums are:\n[1] = 1\n[4] = 4\n[2] = 2\n[5] = 5\n[3] = 3\n[1,4,2] = 7\n[4,2,5] = 11\n[2,5,3] = 10\n[1,4,2,5,3] = 15\nIf we add all these together we get 1 + 4 + 2 + 5 + 3 + 7 + 11 + 10 + 15 = 58"}, {"full_text": "Example 2:\nInput: arr = [1,2]\nOutput: 3\nExplanation: There are only 2 subarrays of odd length, [1] and [2]. Their sum is 3.", "input": "Input: arr = [1,2]", "output": "Output: 3", "explanation": "Explanation: There are only 2 subarrays of odd length, [1] and [2]. Their sum is 3."}, {"full_text": "Example 3:\nInput: arr = [10,11,12]\nOutput: 66", "input": "Input: arr = [10,11,12]", "output": "Output: 66", "explanation": ""}], "constraints": "Constraints:\n1 <= arr.length <= 100\n1 <= arr[i] <= 1000", "notes": ""}, "1582": {"label": "Easy", "title": "Special Positions in a Binary Matrix", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6486, "total_accepted": 29300.0, "total_submissions": 45200.0, "testcase_example": "'[[1,0,0],[0,0,1],[1,0,0]]'", "body": "Given an m x n binary matrix mat, return the number of special positions in mat.\nA position (i, j) is called special if mat[i][j] == 1 and all other elements in row i and column j are 0 (rows and columns are 0-indexed).", "examples": [{"full_text": "Example 1:\nInput: mat = [[1,0,0],[0,0,1],[1,0,0]]\nOutput: 1\nExplanation: (1, 2) is a special position because mat[1][2] == 1 and all other elements in row 1 and column 2 are 0.", "input": "Input: mat = [[1,0,0],[0,0,1],[1,0,0]]", "output": "Output: 1", "explanation": "Explanation: (1, 2) is a special position because mat[1][2] == 1 and all other elements in row 1 and column 2 are 0."}, {"full_text": "Example 2:\nInput: mat = [[1,0,0],[0,1,0],[0,0,1]]\nOutput: 3\nExplanation: (0, 0), (1, 1) and (2, 2) are special positions.", "input": "Input: mat = [[1,0,0],[0,1,0],[0,0,1]]", "output": "Output: 3", "explanation": "Explanation: (0, 0), (1, 1) and (2, 2) are special positions."}], "constraints": "Constraints:\nm == mat.length\nn == mat[i].length\n1 <= m, n <= 100\nmat[i][j] is either 0 or 1.", "notes": ""}, "1576": {"label": "Easy", "title": "Replace All ?'s to Avoid Consecutive Repeating Characters", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5012, "total_accepted": 42100.0, "total_submissions": 84000.0, "testcase_example": "'\"?zs\"'", "body": "Given a string s containing only lowercase English letters and the '?' character, convert all the '?' characters into lowercase letters such that the final string does not contain any consecutive repeating characters. You cannot modify the non '?' characters.\nIt is guaranteed that there are no consecutive repeating characters in the given string except for '?'.\nReturn the final string after all the conversions (possibly zero) have been made. If there is more than one solution, return any of them. It can be shown that an answer is always possible with the given constraints.", "examples": [{"full_text": "Example 1:\nInput: s = \"?zs\"\nOutput: \"azs\"\nExplanation: There are 25 solutions for this problem. From \"azs\" to \"yzs\", all are valid. Only \"z\" is an invalid modification as the string will consist of consecutive repeating characters in \"zzs\".", "input": "Input: s = \"?zs\"", "output": "Output: \"azs\"", "explanation": "Explanation: There are 25 solutions for this problem. From \"azs\" to \"yzs\", all are valid. Only \"z\" is an invalid modification as the string will consist of consecutive repeating characters in \"zzs\"."}, {"full_text": "Example 2:\nInput: s = \"ubv?w\"\nOutput: \"ubvaw\"\nExplanation: There are 24 solutions for this problem. Only \"v\" and \"w\" are invalid modifications as the strings will consist of consecutive repeating characters in \"ubvvw\" and \"ubvww\".", "input": "Input: s = \"ubv?w\"", "output": "Output: \"ubvaw\"", "explanation": "Explanation: There are 24 solutions for this problem. Only \"v\" and \"w\" are invalid modifications as the strings will consist of consecutive repeating characters in \"ubvvw\" and \"ubvww\"."}], "constraints": "Constraints:\n1 <= s.length <= 100\ns consist of lowercase English letters and '?'.", "notes": ""}, "1572": {"label": "Easy", "title": "Matrix Diagonal Sum", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7856000000000001, "total_accepted": 86000.0, "total_submissions": 109500.0, "testcase_example": "'[[1,2,3],[4,5,6],[7,8,9]]'", "body": "Given a\nsquare\nmatrix\nmat, return the sum of the matrix diagonals.\nOnly include the sum of all the elements on the primary diagonal and all the elements on the secondary diagonal that are not part of the primary diagonal.", "examples": [{"full_text": "Example 1:\nInput: mat = [[1,2,3],\n[4,5,6],\n[7,8,9]]\nOutput: 25\nExplanation: Diagonals sum: 1 + 5 + 9 + 3 + 7 = 25\nNotice that element mat[1][1] = 5 is counted only once.", "input": "Input: mat = [[1,2,3],\n[4,5,6],\n[7,8,9]]", "output": "Output: 25", "explanation": "Explanation: Diagonals sum: 1 + 5 + 9 + 3 + 7 = 25\nNotice that element mat[1][1] = 5 is counted only once."}, {"full_text": "Example 2:\nInput: mat = [[1,1,1,1],\n[1,1,1,1],\n[1,1,1,1],\n[1,1,1,1]]\nOutput: 8", "input": "Input: mat = [[1,1,1,1],\n[1,1,1,1],\n[1,1,1,1],\n[1,1,1,1]]", "output": "Output: 8", "explanation": ""}, {"full_text": "Example 3:\nInput: mat = [[5]]\nOutput: 5", "input": "Input: mat = [[5]]", "output": "Output: 5", "explanation": ""}], "constraints": "Constraints:\nn == mat.length == mat[i].length\n1 <= n <= 100\n1 <= mat[i][j] <= 100", "notes": ""}, "1566": {"label": "Easy", "title": "Detect Pattern of Length M Repeated K or More Times", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4361, "total_accepted": 23000.0, "total_submissions": 52800.0, "testcase_example": "'[1,2,4,4,4,4]\\n1\\n3'", "body": "Given an array of positive integers arr, find a pattern of length m that is repeated k or more times.\nA pattern is a subarray (consecutive sub-sequence) that consists of one or more values, repeated multiple times consecutively without overlapping. A pattern is defined by its length and the number of repetitions.\nReturn true if there exists a pattern of length m that is repeated k or more times, otherwise return false.", "examples": [{"full_text": "Example 1:\nInput: arr = [1,2,4,4,4,4], m = 1, k = 3\nOutput: true\nExplanation: The pattern (4) of length 1 is repeated 4 consecutive times. Notice that pattern can be repeated k or more times but not less.", "input": "Input: arr = [1,2,4,4,4,4], m = 1, k = 3", "output": "Output: true", "explanation": "Explanation: The pattern (4) of length 1 is repeated 4 consecutive times. Notice that pattern can be repeated k or more times but not less."}, {"full_text": "Example 2:\nInput: arr = [1,2,1,2,1,1,1,3], m = 2, k = 2\nOutput: true\nExplanation: The pattern (1,2) of length 2 is repeated 2 consecutive times. Another valid pattern (2,1) is also repeated 2 times.", "input": "Input: arr = [1,2,1,2,1,1,1,3], m = 2, k = 2", "output": "Output: true", "explanation": "Explanation: The pattern (1,2) of length 2 is repeated 2 consecutive times. Another valid pattern (2,1) is also repeated 2 times."}, {"full_text": "Example 3:\nInput: arr = [1,2,1,2,1,3], m = 2, k = 3\nOutput: false\nExplanation: The pattern (1,2) is of length 2 but is repeated only 2 times. There is no pattern of length 2 that is repeated 3 or more times.", "input": "Input: arr = [1,2,1,2,1,3], m = 2, k = 3", "output": "Output: false", "explanation": "Explanation: The pattern (1,2) is of length 2 but is repeated only 2 times. There is no pattern of length 2 that is repeated 3 or more times."}], "constraints": "Constraints:\n2 <= arr.length <= 100\n1 <= arr[i] <= 100\n1 <= m <= 100\n2 <= k <= 100", "notes": ""}, "1560": {"label": "Easy", "title": "Most Visited Sector in a Circular Track", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5798, "total_accepted": 20100.0, "total_submissions": 34700.0, "testcase_example": "'4\\n[1,3,1,2]'", "body": "Given an integer n and an integer array rounds. We have a circular track which consists of n sectors labeled from 1 to n. A marathon will be held on this track, the marathon consists of m rounds. The i^th round starts at sector rounds[i - 1] and ends at sector rounds[i]. For example, round 1 starts at sector rounds[0] and ends at sector rounds[1]\nReturn an array of the most visited sectors sorted in ascending order.\nNotice that you circulate the track in ascending order of sector numbers in the counter-clockwise direction (See the first example).", "examples": [{"full_text": "Example 1:\nInput: n = 4, rounds = [1,3,1,2]\nOutput: [1,2]\nExplanation: The marathon starts at sector 1. The order of the visited sectors is as follows:\n1 --> 2 --> 3 (end of round 1) --> 4 --> 1 (end of round 2) --> 2 (end of round 3 and the marathon)\nWe can see that both sectors 1 and 2 are visited twice and they are the most visited sectors. Sectors 3 and 4 are visited only once.", "input": "Input: n = 4, rounds = [1,3,1,2]", "output": "Output: [1,2]", "explanation": "Explanation: The marathon starts at sector 1. The order of the visited sectors is as follows:\n1 --> 2 --> 3 (end of round 1) --> 4 --> 1 (end of round 2) --> 2 (end of round 3 and the marathon)\nWe can see that both sectors 1 and 2 are visited twice and they are the most visited sectors. Sectors 3 and 4 are visited only once."}, {"full_text": "Example 2:\nInput: n = 2, rounds = [2,1,2,1,2,1,2,1,2]\nOutput: [2]", "input": "Input: n = 2, rounds = [2,1,2,1,2,1,2,1,2]", "output": "Output: [2]", "explanation": ""}, {"full_text": "Example 3:\nInput: n = 7, rounds = [1,3,5,7]\nOutput: [1,2,3,4,5,6,7]", "input": "Input: n = 7, rounds = [1,3,5,7]", "output": "Output: [1,2,3,4,5,6,7]", "explanation": ""}], "constraints": "Constraints:\n2 <= n <= 100\n1 <= m <= 100\nrounds.length == m + 1\n1 <= rounds[i] <= n\nrounds[i] != rounds[i + 1] for 0 <= i < m", "notes": ""}, "1556": {"label": "Easy", "title": "Thousand Separator", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5642, "total_accepted": 31200.0, "total_submissions": 55300.0, "testcase_example": "'987'", "body": "Given an integer n, add a dot (\".\") as the thousands separator and return it in string format.", "examples": [{"full_text": "Example 1:\nInput: n = 987\nOutput: \"987\"", "input": "Input: n = 987", "output": "Output: \"987\"", "explanation": ""}, {"full_text": "Example 2:\nInput: n = 1234\nOutput: \"1.234\"", "input": "Input: n = 1234", "output": "Output: \"1.234\"", "explanation": ""}], "constraints": "Constraints:\n0 <= n <= 2^31 - 1", "notes": ""}, "1550": {"label": "Easy", "title": "Three Consecutive Odds", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6423000000000001, "total_accepted": 47100.0, "total_submissions": 73300.0, "testcase_example": "'[2,6,4,1]'", "body": "Given an integer array arr, return true\nif there are three consecutive odd numbers in the array. Otherwise, return\nfalse.", "examples": [{"full_text": "Example 1:\nInput: arr = [2,6,4,1]\nOutput: false\nExplanation: There are no three consecutive odds.", "input": "Input: arr = [2,6,4,1]", "output": "Output: false", "explanation": "Explanation: There are no three consecutive odds."}, {"full_text": "Example 2:\nInput: arr = [1,2,34,3,4,5,7,23,12]\nOutput: true\nExplanation: [5,7,23] are three consecutive odds.", "input": "Input: arr = [1,2,34,3,4,5,7,23,12]", "output": "Output: true", "explanation": "Explanation: [5,7,23] are three consecutive odds."}], "constraints": "Constraints:\n1 <= arr.length <= 1000\n1 <= arr[i] <= 1000", "notes": ""}, "1544": {"label": "Easy", "title": "Make The String Great", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.563, "total_accepted": 45300.0, "total_submissions": 80500.0, "testcase_example": "'\"leEeetcode\"'", "body": "Given a string s of lower and upper case English letters.\nA good string is a string which doesn't have two adjacent characters s[i] and s[i + 1] where:\n0 <= i <= s.length - 2\ns[i] is a lower-case letter and s[i + 1] is the same letter but in upper-case or vice-versa.\nTo make the string good, you can choose two adjacent characters that make the string bad and remove them. You can keep doing this until the string becomes good.\nReturn the string after making it good. The answer is guaranteed to be unique under the given constraints.\nNotice that an empty string is also good.", "examples": [{"full_text": "Example 1:\nInput: s = \"leEeetcode\"\nOutput: \"leetcode\"\nExplanation: In the first step, either you choose i = 1 or i = 2, both will result \"leEeetcode\" to be reduced to \"leetcode\".", "input": "Input: s = \"leEeetcode\"", "output": "Output: \"leetcode\"", "explanation": "Explanation: In the first step, either you choose i = 1 or i = 2, both will result \"leEeetcode\" to be reduced to \"leetcode\"."}, {"full_text": "Example 2:\nInput: s = \"abBAcC\"\nOutput: \"\"\nExplanation: We have many possible scenarios, and all lead to the same answer. For example:\n\"abBAcC\" --> \"aAcC\" --> \"cC\" --> \"\"\n\"abBAcC\" --> \"abBA\" --> \"aA\" --> \"\"", "input": "Input: s = \"abBAcC\"", "output": "Output: \"\"", "explanation": "Explanation: We have many possible scenarios, and all lead to the same answer. For example:\n\"abBAcC\" --> \"aAcC\" --> \"cC\" --> \"\"\n\"abBAcC\" --> \"abBA\" --> \"aA\" --> \"\""}, {"full_text": "Example 3:\nInput: s = \"s\"\nOutput: \"s\"", "input": "Input: s = \"s\"", "output": "Output: \"s\"", "explanation": ""}], "constraints": "Constraints:\n1 <= s.length <= 100\ns contains only lower and upper case English letters.", "notes": ""}, "1539": {"label": "Easy", "title": "Kth Missing Positive Number", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.552, "total_accepted": 141900.0, "total_submissions": 257100.00000000003, "testcase_example": "'[2,3,4,7,11]\\n5'", "body": "Given an array arr\nof positive integers\nsorted in a strictly increasing order, and an integer k.\nFind the k^th\npositive integer that is missing from this array.", "examples": [{"full_text": "Example 1:\nInput: arr = [2,3,4,7,11], k = 5\nOutput: 9\nExplanation: The missing positive integers are [1,5,6,8,9,10,12,13,...]. The 5^th\nmissing positive integer is 9.", "input": "Input: arr = [2,3,4,7,11], k = 5", "output": "Output: 9", "explanation": "Explanation: The missing positive integers are [1,5,6,8,9,10,12,13,...]. The 5^th\nmissing positive integer is 9."}, {"full_text": "Example 2:\nInput: arr = [1,2,3,4], k = 2\nOutput: 6\nExplanation: The missing positive integers are [5,6,7,...]. The 2^nd missing positive integer is 6.", "input": "Input: arr = [1,2,3,4], k = 2", "output": "Output: 6", "explanation": "Explanation: The missing positive integers are [5,6,7,...]. The 2^nd missing positive integer is 6."}], "constraints": "Constraints:\n1 <= arr.length <= 1000\n1 <= arr[i] <= 1000\n1 <= k <= 1000\narr[i] < arr[j] for 1 <= i < j <= arr.length", "notes": ""}, "1534": {"label": "Easy", "title": "Count Good Triplets", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.8047, "total_accepted": 70100.0, "total_submissions": 87100.0, "testcase_example": "'[3,0,1,1,9,7]\\n7\\n2\\n3'", "body": "Given an array of integers arr, and three integers\na,\nb\nand\nc. You need to find the number of good triplets.\nA triplet (arr[i], arr[j], arr[k])\nis good if the following conditions are true:\n0 <= i < j < k <\narr.length\n|arr[i] - arr[j]| <= a\n|arr[j] - arr[k]| <= b\n|arr[i] - arr[k]| <= c\nWhere |x| denotes the absolute value of x.\nReturn the number of good triplets.", "examples": [{"full_text": "Example 1:\nInput: arr = [3,0,1,1,9,7], a = 7, b = 2, c = 3\nOutput: 4\nExplanation:\nThere are 4 good triplets: [(3,0,1), (3,0,1), (3,1,1), (0,1,1)].", "input": "Input: arr = [3,0,1,1,9,7], a = 7, b = 2, c = 3", "output": "Output: 4", "explanation": "Explanation:\nThere are 4 good triplets: [(3,0,1), (3,0,1), (3,1,1), (0,1,1)]."}, {"full_text": "Example 2:\nInput: arr = [1,1,2,2,3], a = 0, b = 0, c = 1\nOutput: 0\nExplanation: No triplet satisfies all conditions.", "input": "Input: arr = [1,1,2,2,3], a = 0, b = 0, c = 1", "output": "Output: 0", "explanation": "Explanation: No triplet satisfies all conditions."}], "constraints": "Constraints:\n3 <= arr.length <= 100\n0 <= arr[i] <= 1000\n0 <= a, b, c <= 1000", "notes": ""}, "1528": {"label": "Easy", "title": "Shuffle String", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.8581, "total_accepted": 183300.0, "total_submissions": 213600.0, "testcase_example": "'\"codeleet\"\\n[4,5,6,7,0,2,1,3]'", "body": "You are given a string s and an integer array indices of the same length. The string s will be shuffled such that the character at the i^th position moves to indices[i] in the shuffled string.\nReturn the shuffled string.", "examples": [{"full_text": "Example 1:\nInput: s = \"codeleet\", indices = [4,5,6,7,0,2,1,3]\nOutput: \"leetcode\"\nExplanation: As shown, \"codeleet\" becomes \"leetcode\" after shuffling.", "input": "Input: s = \"codeleet\", indices = [4,5,6,7,0,2,1,3]", "output": "Output: \"leetcode\"", "explanation": "Explanation: As shown, \"codeleet\" becomes \"leetcode\" after shuffling."}, {"full_text": "Example 2:\nInput: s = \"abc\", indices = [0,1,2]\nOutput: \"abc\"\nExplanation: After shuffling, each character remains in its position.", "input": "Input: s = \"abc\", indices = [0,1,2]", "output": "Output: \"abc\"", "explanation": "Explanation: After shuffling, each character remains in its position."}], "constraints": "Constraints:\ns.length == indices.length == n\n1 <= n <= 100\ns consists of only lowercase English letters.\n0 <= indices[i] < n\nAll values of indices are unique.", "notes": ""}, "1523": {"label": "Easy", "title": "Count Odd Numbers in an Interval Range", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5392, "total_accepted": 31200.0, "total_submissions": 57900.0, "testcase_example": "'3\\n7'", "body": "Given two non-negative integers low and high. Return the count of odd numbers between low and high\n(inclusive).", "examples": [{"full_text": "Example 1:\nInput: low = 3, high = 7\nOutput: 3\nExplanation: The odd numbers between 3 and 7 are [3,5,7].", "input": "Input: low = 3, high = 7", "output": "Output: 3", "explanation": "Explanation: The odd numbers between 3 and 7 are [3,5,7]."}, {"full_text": "Example 2:\nInput: low = 8, high = 10\nOutput: 1\nExplanation: The odd numbers between 8 and 10 are [9].", "input": "Input: low = 8, high = 10", "output": "Output: 1", "explanation": "Explanation: The odd numbers between 8 and 10 are [9]."}], "constraints": "Constraints:\n0 <= low <= high\n<= 10^9", "notes": ""}, "1518": {"label": "Easy", "title": "Water Bottles", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6049, "total_accepted": 46700.0, "total_submissions": 77200.0, "testcase_example": "'9\\n3'", "body": "There are numBottles water bottles that are initially full of water. You can exchange numExchange empty water bottles from the market with one full water bottle.\nThe operation of drinking a full water bottle turns it into an empty bottle.\nGiven the two integers numBottles and numExchange, return the maximum number of water bottles you can drink.", "examples": [{"full_text": "Example 1:\nInput: numBottles = 9, numExchange = 3\nOutput: 13\nExplanation: You can exchange 3 empty bottles to get 1 full water bottle.\nNumber of water bottles you can drink: 9 + 3 + 1 = 13.", "input": "Input: numBottles = 9, numExchange = 3", "output": "Output: 13", "explanation": "Explanation: You can exchange 3 empty bottles to get 1 full water bottle.\nNumber of water bottles you can drink: 9 + 3 + 1 = 13."}, {"full_text": "Example 2:\nInput: numBottles = 15, numExchange = 4\nOutput: 19\nExplanation: You can exchange 4 empty bottles to get 1 full water bottle.\nNumber of water bottles you can drink: 15 + 3 + 1 = 19.", "input": "Input: numBottles = 15, numExchange = 4", "output": "Output: 19", "explanation": "Explanation: You can exchange 4 empty bottles to get 1 full water bottle.\nNumber of water bottles you can drink: 15 + 3 + 1 = 19."}], "constraints": "Constraints:\n1 <= numBottles <= 100\n2 <= numExchange <= 100", "notes": ""}, "1512": {"label": "Easy", "title": "Number of Good Pairs", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.8786, "total_accepted": 266300.0, "total_submissions": 303000.0, "testcase_example": "'[1,2,3,1,1,3]'", "body": "Given an array of integers nums, return the number of good pairs.\nA pair (i, j) is called good if nums[i] == nums[j] and i < j.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,2,3,1,1,3]\nOutput: 4\nExplanation: There are 4 good pairs (0,3), (0,4), (3,4), (2,5) 0-indexed.", "input": "Input: nums = [1,2,3,1,1,3]", "output": "Output: 4", "explanation": "Explanation: There are 4 good pairs (0,3), (0,4), (3,4), (2,5) 0-indexed."}, {"full_text": "Example 2:\nInput: nums = [1,1,1,1]\nOutput: 6\nExplanation: Each pair in the array are good.", "input": "Input: nums = [1,1,1,1]", "output": "Output: 6", "explanation": "Explanation: Each pair in the array are good."}, {"full_text": "Example 3:\nInput: nums = [1,2,3]\nOutput: 0", "input": "Input: nums = [1,2,3]", "output": "Output: 0", "explanation": ""}], "constraints": "Constraints:\n1 <= nums.length <= 100\n1 <= nums[i] <= 100", "notes": ""}, "1507": {"label": "Easy", "title": "Reformat Date", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6148, "total_accepted": 34400.0, "total_submissions": 55900.0, "testcase_example": "'\"20th Oct 2052\"'", "body": "Given a date string in the form\nDay Month Year, where:\nDay\nis in the set {\"1st\", \"2nd\", \"3rd\", \"4th\", ..., \"30th\", \"31st\"}.\nMonth\nis in the set {\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"}.\nYear\nis in the range [1900, 2100].\nConvert the date string to the format YYYY-MM-DD, where:\nYYYY denotes the 4 digit year.\nMM denotes the 2 digit month.\nDD denotes the 2 digit day.", "examples": [{"full_text": "Example 1:\nInput: date = \"20th Oct 2052\"\nOutput: \"2052-10-20\"", "input": "Input: date = \"20th Oct 2052\"", "output": "Output: \"2052-10-20\"", "explanation": ""}, {"full_text": "Example 2:\nInput: date = \"6th Jun 1933\"\nOutput: \"1933-06-06\"", "input": "Input: date = \"6th Jun 1933\"", "output": "Output: \"1933-06-06\"", "explanation": ""}, {"full_text": "Example 3:\nInput: date = \"26th May 1960\"\nOutput: \"1960-05-26\"", "input": "Input: date = \"26th May 1960\"", "output": "Output: \"1960-05-26\"", "explanation": ""}], "constraints": "Constraints:\nThe given dates are guaranteed to be valid, so no error handling is necessary.", "notes": ""}, "1502": {"label": "Easy", "title": "Can Make Arithmetic Progression From Sequence", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7029000000000001, "total_accepted": 63300.0, "total_submissions": 90100.0, "testcase_example": "'[3,5,1]'", "body": "A sequence of numbers is called an arithmetic progression if the difference between any two consecutive elements is the same.\nGiven an array of numbers arr, return true if the array can be rearranged to form an arithmetic progression. Otherwise, return false.", "examples": [{"full_text": "Example 1:\nInput: arr = [3,5,1]\nOutput: true\nExplanation: We can reorder the elements as [1,3,5] or [5,3,1] with differences 2 and -2 respectively, between each consecutive elements.", "input": "Input: arr = [3,5,1]", "output": "Output: true", "explanation": "Explanation: We can reorder the elements as [1,3,5] or [5,3,1] with differences 2 and -2 respectively, between each consecutive elements."}, {"full_text": "Example 2:\nInput: arr = [1,2,4]\nOutput: false\nExplanation: There is no way to reorder the elements to obtain an arithmetic progression.", "input": "Input: arr = [1,2,4]", "output": "Output: false", "explanation": "Explanation: There is no way to reorder the elements to obtain an arithmetic progression."}], "constraints": "Constraints:\n2 <= arr.length <= 1000\n-10^6 <= arr[i] <= 10^6", "notes": ""}, "1496": {"label": "Easy", "title": "Path Crossing", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5564, "total_accepted": 33700.0, "total_submissions": 60600.0, "testcase_example": "'\"NES\"'", "body": "Given a string path, where path[i] = 'N', 'S', 'E' or 'W', each representing moving one unit north, south, east, or west, respectively. You start at the origin (0, 0) on a 2D plane and walk on the path specified by path.\nReturn true if the path crosses itself at any point, that is, if at any time you are on a location you have previously visited. Return false otherwise.", "examples": [{"full_text": "Example 1:\nInput: path = \"NES\"\nOutput: false\nExplanation: Notice that the path doesn't cross any point more than once.", "input": "Input: path = \"NES\"", "output": "Output: false", "explanation": "Explanation: Notice that the path doesn't cross any point more than once."}, {"full_text": "Example 2:\nInput: path = \"NESWW\"\nOutput: true\nExplanation: Notice that the path visits the origin twice.", "input": "Input: path = \"NESWW\"", "output": "Output: true", "explanation": "Explanation: Notice that the path visits the origin twice."}], "constraints": "Constraints:\n1 <= path.length <= 10^4\npath[i] is either 'N', 'S', 'E', or 'W'.", "notes": ""}, "1491": {"label": "Easy", "title": "Average Salary Excluding the Minimum and Maximum Salary", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6755, "total_accepted": 59400.0, "total_submissions": 87900.0, "testcase_example": "'[4000,3000,1000,2000]'", "body": "You are given an array of unique integers salary where salary[i] is the salary of the i^th employee.\nReturn the average salary of employees excluding the minimum and maximum salary. Answers within 10^-5 of the actual answer will be accepted.", "examples": [{"full_text": "Example 1:\nInput: salary = [4000,3000,1000,2000]\nOutput: 2500.00000\nExplanation: Minimum salary and maximum salary are 1000 and 4000 respectively.\nAverage salary excluding minimum and maximum salary is (2000+3000) / 2 = 2500", "input": "Input: salary = [4000,3000,1000,2000]", "output": "Output: 2500.00000", "explanation": "Explanation: Minimum salary and maximum salary are 1000 and 4000 respectively.\nAverage salary excluding minimum and maximum salary is (2000+3000) / 2 = 2500"}, {"full_text": "Example 2:\nInput: salary = [1000,2000,3000]\nOutput: 2000.00000\nExplanation: Minimum salary and maximum salary are 1000 and 3000 respectively.\nAverage salary excluding minimum and maximum salary is (2000) / 1 = 2000", "input": "Input: salary = [1000,2000,3000]", "output": "Output: 2000.00000", "explanation": "Explanation: Minimum salary and maximum salary are 1000 and 3000 respectively.\nAverage salary excluding minimum and maximum salary is (2000) / 1 = 2000"}], "constraints": "Constraints:\n3 <= salary.length <= 100\n1000 <= salary[i] <= 10^6\nAll the integers of salary are unique.", "notes": ""}, "1486": {"label": "Easy", "title": "XOR Operation in an Array", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.8414, "total_accepted": 114600.0, "total_submissions": 136200.0, "testcase_example": "'5\\n0'", "body": "You are given an integer n and an integer start.\nDefine an array nums where nums[i] = start + 2 * i (0-indexed) and n == nums.length.\nReturn the bitwise XOR of all elements of nums.", "examples": [{"full_text": "Example 1:\nInput: n = 5, start = 0\nOutput: 8\nExplanation: Array nums is equal to [0, 2, 4, 6, 8] where (0 ^ 2 ^ 4 ^ 6 ^ 8) = 8.\nWhere \"^\" corresponds to bitwise XOR operator.", "input": "Input: n = 5, start = 0", "output": "Output: 8", "explanation": "Explanation: Array nums is equal to [0, 2, 4, 6, 8] where (0 ^ 2 ^ 4 ^ 6 ^ 8) = 8.\nWhere \"^\" corresponds to bitwise XOR operator."}, {"full_text": "Example 2:\nInput: n = 4, start = 3\nOutput: 8\nExplanation: Array nums is equal to [3, 5, 7, 9] where (3 ^ 5 ^ 7 ^ 9) = 8.", "input": "Input: n = 4, start = 3", "output": "Output: 8", "explanation": "Explanation: Array nums is equal to [3, 5, 7, 9] where (3 ^ 5 ^ 7 ^ 9) = 8."}], "constraints": "Constraints:\n1 <= n <= 1000\n0 <= start <= 1000\nn == nums.length", "notes": ""}, "1480": {"label": "Easy", "title": "Running Sum of 1d Array", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.8948999999999999, "total_accepted": 481800.0, "total_submissions": 538500.0, "testcase_example": "'[1,2,3,4]'", "body": "Given an array nums. We define a running sum of an array as\nrunningSum[i] = sum(nums[0]\u2026nums[i]).\nReturn the running sum of nums.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,2,3,4]\nOutput: [1,3,6,10]\nExplanation: Running sum is obtained as follows: [1, 1+2, 1+2+3, 1+2+3+4].", "input": "Input: nums = [1,2,3,4]", "output": "Output: [1,3,6,10]", "explanation": "Explanation: Running sum is obtained as follows: [1, 1+2, 1+2+3, 1+2+3+4]."}, {"full_text": "Example 2:\nInput: nums = [1,1,1,1,1]\nOutput: [1,2,3,4,5]\nExplanation: Running sum is obtained as follows: [1, 1+1, 1+1+1, 1+1+1+1, 1+1+1+1+1].", "input": "Input: nums = [1,1,1,1,1]", "output": "Output: [1,2,3,4,5]", "explanation": "Explanation: Running sum is obtained as follows: [1, 1+1, 1+1+1, 1+1+1+1, 1+1+1+1+1]."}, {"full_text": "Example 3:\nInput: nums = [3,1,2,10,1]\nOutput: [3,4,6,16,17]", "input": "Input: nums = [3,1,2,10,1]", "output": "Output: [3,4,6,16,17]", "explanation": ""}], "constraints": "Constraints:\n1 <= nums.length <= 1000\n-10^6\n<= nums[i] <=\n10^6", "notes": ""}, "1475": {"label": "Easy", "title": "Final Prices With a Special Discount in a Shop", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7509999999999999, "total_accepted": 68600.0, "total_submissions": 91300.0, "testcase_example": "'[8,4,6,2,3]'", "body": "Given the array prices where prices[i] is the price of the ith item in a shop. There is a special discount for items in the shop, if you buy the ith item, then you will receive a discount equivalent to prices[j] where j is the minimum\nindex such that j > i and prices[j] <= prices[i], otherwise, you will not receive any discount at all.\nReturn an array where the ith element is the final price you will pay for the ith item of the shop considering the special discount.", "examples": [{"full_text": "Example 1:\nInput: prices = [8,4,6,2,3]\nOutput: [4,2,4,2,3]\nExplanation:\nFor item 0 with price[0]=8 you will receive a discount equivalent to prices[1]=4, therefore, the final price you will pay is 8 - 4 = 4.\nFor item 1 with price[1]=4 you will receive a discount equivalent to prices[3]=2, therefore, the final price you will pay is 4 - 2 = 2.\nFor item 2 with price[2]=6 you will receive a discount equivalent to prices[3]=2, therefore, the final price you will pay is 6 - 2 = 4.\nFor items 3 and 4 you will not receive any discount at all.", "input": "Input: prices = [8,4,6,2,3]", "output": "Output: [4,2,4,2,3]", "explanation": "Explanation:\nFor item 0 with price[0]=8 you will receive a discount equivalent to prices[1]=4, therefore, the final price you will pay is 8 - 4 = 4.\nFor item 1 with price[1]=4 you will receive a discount equivalent to prices[3]=2, therefore, the final price you will pay is 4 - 2 = 2.\nFor item 2 with price[2]=6 you will receive a discount equivalent to prices[3]=2, therefore, the final price you will pay is 6 - 2 = 4.\nFor items 3 and 4 you will not receive any discount at all."}, {"full_text": "Example 2:\nInput: prices = [1,2,3,4,5]\nOutput: [1,2,3,4,5]\nExplanation: In this case, for all items, you will not receive any discount at all.", "input": "Input: prices = [1,2,3,4,5]", "output": "Output: [1,2,3,4,5]", "explanation": "Explanation: In this case, for all items, you will not receive any discount at all."}, {"full_text": "Example 3:\nInput: prices = [10,1,1,6]\nOutput: [9,0,1,6]", "input": "Input: prices = [10,1,1,6]", "output": "Output: [9,0,1,6]", "explanation": ""}], "constraints": "Constraints:\n1 <= prices.length <= 500\n1 <= prices[i] <= 10^3", "notes": ""}, "1470": {"label": "Easy", "title": "Shuffle the Array", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.8828, "total_accepted": 291600.0, "total_submissions": 330200.0, "testcase_example": "'[2,5,1,3,4,7]\\n3'", "body": "Given the array nums consisting of 2n elements in the form [x1,x2,...,xn,y1,y2,...,yn].\nReturn the array in the form [x1,y1,x2,y2,...,xn,yn].", "examples": [{"full_text": "Example 1:\nInput: nums = [2,5,1,3,4,7], n = 3\nOutput: [2,3,5,4,1,7]\nExplanation: Since x1=2, x2=5, x3=1, y1=3, y2=4, y3=7 then the answer is [2,3,5,4,1,7].", "input": "Input: nums = [2,5,1,3,4,7], n = 3", "output": "Output: [2,3,5,4,1,7]", "explanation": "Explanation: Since x1=2, x2=5, x3=1, y1=3, y2=4, y3=7 then the answer is [2,3,5,4,1,7]."}, {"full_text": "Example 2:\nInput: nums = [1,2,3,4,4,3,2,1], n = 4\nOutput: [1,4,2,3,3,2,4,1]", "input": "Input: nums = [1,2,3,4,4,3,2,1], n = 4", "output": "Output: [1,4,2,3,3,2,4,1]", "explanation": ""}, {"full_text": "Example 3:\nInput: nums = [1,1,2,2], n = 2\nOutput: [1,2,1,2]", "input": "Input: nums = [1,1,2,2], n = 2", "output": "Output: [1,2,1,2]", "explanation": ""}], "constraints": "Constraints:\n1 <= n <= 500\nnums.length == 2n\n1 <= nums[i] <= 10^3", "notes": ""}, "1464": {"label": "Easy", "title": "Maximum Product of Two Elements in an Array", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7816, "total_accepted": 119600.0, "total_submissions": 153000.0, "testcase_example": "'[3,4,5,2]'", "body": "Given the array of integers nums, you will choose two different indices i and j of that array. Return the maximum value of (nums[i]-1)*(nums[j]-1).", "examples": [{"full_text": "Example 1:\nInput: nums = [3,4,5,2]\nOutput: 12\nExplanation: If you choose the indices i=1 and j=2 (indexed from 0), you will get the maximum value, that is, (nums[1]-1)*(nums[2]-1) = (4-1)*(5-1) = 3*4 = 12.", "input": "Input: nums = [3,4,5,2]", "output": "Output: 12", "explanation": "Explanation: If you choose the indices i=1 and j=2 (indexed from 0), you will get the maximum value, that is, (nums[1]-1)*(nums[2]-1) = (4-1)*(5-1) = 3*4 = 12."}, {"full_text": "Example 2:\nInput: nums = [1,5,4,5]\nOutput: 16\nExplanation: Choosing the indices i=1 and j=3 (indexed from 0), you will get the maximum value of (5-1)*(5-1) = 16.", "input": "Input: nums = [1,5,4,5]", "output": "Output: 16", "explanation": "Explanation: Choosing the indices i=1 and j=3 (indexed from 0), you will get the maximum value of (5-1)*(5-1) = 16."}, {"full_text": "Example 3:\nInput: nums = [3,7]\nOutput: 12", "input": "Input: nums = [3,7]", "output": "Output: 12", "explanation": ""}], "constraints": "Constraints:\n2 <= nums.length <= 500\n1 <= nums[i] <= 10^3", "notes": ""}, "1460": {"label": "Easy", "title": "Make Two Arrays Equal by Reversing Sub-arrays", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7254999999999999, "total_accepted": 79300.0, "total_submissions": 109300.0, "testcase_example": "'[1,2,3,4]\\n[2,4,1,3]'", "body": "You are given two integer arrays of equal length target and arr. In one step, you can select any non-empty sub-array of arr and reverse it. You are allowed to make any number of steps.\nReturn true if you can make arr equal to target\nor false otherwise.", "examples": [{"full_text": "Example 1:\nInput: target = [1,2,3,4], arr = [2,4,1,3]\nOutput: true\nExplanation: You can follow the next steps to convert arr to target:\n1- Reverse sub-array [2,4,1], arr becomes [1,4,2,3]\n2- Reverse sub-array [4,2], arr becomes [1,2,4,3]\n3- Reverse sub-array [4,3], arr becomes [1,2,3,4]\nThere are multiple ways to convert arr to target, this is not the only way to do so.", "input": "Input: target = [1,2,3,4], arr = [2,4,1,3]", "output": "Output: true", "explanation": "Explanation: You can follow the next steps to convert arr to target:\n1- Reverse sub-array [2,4,1], arr becomes [1,4,2,3]\n2- Reverse sub-array [4,2], arr becomes [1,2,4,3]\n3- Reverse sub-array [4,3], arr becomes [1,2,3,4]\nThere are multiple ways to convert arr to target, this is not the only way to do so."}, {"full_text": "Example 2:\nInput: target = [7], arr = [7]\nOutput: true\nExplanation: arr is equal to target without any reverses.", "input": "Input: target = [7], arr = [7]", "output": "Output: true", "explanation": "Explanation: arr is equal to target without any reverses."}, {"full_text": "Example 3:\nInput: target = [3,7,9], arr = [3,7,11]\nOutput: false\nExplanation: arr does not have value 9 and it can never be converted to target.", "input": "Input: target = [3,7,9], arr = [3,7,11]", "output": "Output: false", "explanation": "Explanation: arr does not have value 9 and it can never be converted to target."}], "constraints": "Constraints:\ntarget.length == arr.length\n1 <= target.length <= 1000\n1 <= target[i] <= 1000\n1 <= arr[i] <= 1000", "notes": ""}, "1455": {"label": "Easy", "title": "Check If a Word Occurs As a Prefix of Any Word in a Sentence", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6448, "total_accepted": 46200.0, "total_submissions": 71600.0, "testcase_example": "'\"i love eating burger\"\\n\"burg\"'", "body": "Given a sentence that consists of some words separated by a single space, and a searchWord, check if searchWord is a prefix of any word in sentence.\nReturn the index of the word in sentence (1-indexed) where searchWord is a prefix of this word. If searchWord is a prefix of more than one word, return the index of the first word (minimum index). If there is no such word return -1.\nA prefix of a string s is any leading contiguous substring of s.", "examples": [{"full_text": "Example 1:\nInput: sentence = \"i love eating burger\", searchWord = \"burg\"\nOutput: 4\nExplanation: \"burg\" is prefix of \"burger\" which is the 4th word in the sentence.", "input": "Input: sentence = \"i love eating burger\", searchWord = \"burg\"", "output": "Output: 4", "explanation": "Explanation: \"burg\" is prefix of \"burger\" which is the 4th word in the sentence."}, {"full_text": "Example 2:\nInput: sentence = \"this problem is an easy problem\", searchWord = \"pro\"\nOutput: 2\nExplanation: \"pro\" is prefix of \"problem\" which is the 2nd and the 6th word in the sentence, but we return 2 as it's the minimal index.", "input": "Input: sentence = \"this problem is an easy problem\", searchWord = \"pro\"", "output": "Output: 2", "explanation": "Explanation: \"pro\" is prefix of \"problem\" which is the 2nd and the 6th word in the sentence, but we return 2 as it's the minimal index."}, {"full_text": "Example 3:\nInput: sentence = \"i am tired\", searchWord = \"you\"\nOutput: -1\nExplanation: \"you\" is not a prefix of any word in the sentence.", "input": "Input: sentence = \"i am tired\", searchWord = \"you\"", "output": "Output: -1", "explanation": "Explanation: \"you\" is not a prefix of any word in the sentence."}], "constraints": "Constraints:\n1 <= sentence.length <= 100\n1 <= searchWord.length <= 10\nsentence consists of lowercase English letters and spaces.\nsearchWord consists of lowercase English letters.", "notes": ""}, "1450": {"label": "Easy", "title": "Number of Students Doing Homework at a Given Time", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7652, "total_accepted": 79800.0, "total_submissions": 104300.0, "testcase_example": "'[1,2,3]\\n[3,2,7]\\n4'", "body": "Given two integer arrays startTime and endTime and given an integer queryTime.\nThe ith student started doing their homework at the time startTime[i] and finished it at time endTime[i].\nReturn the number of students doing their homework at time queryTime. More formally, return the number of students where queryTime lays in the interval [startTime[i], endTime[i]] inclusive.", "examples": [{"full_text": "Example 1:\nInput: startTime = [1,2,3], endTime = [3,2,7], queryTime = 4\nOutput: 1\nExplanation: We have 3 students where:\nThe first student started doing homework at time 1 and finished at time 3 and wasn't doing anything at time 4.\nThe second student started doing homework at time 2 and finished at time 2 and also wasn't doing anything at time 4.\nThe third student started doing homework at time 3 and finished at time 7 and was the only student doing homework at time 4.", "input": "Input: startTime = [1,2,3], endTime = [3,2,7], queryTime = 4", "output": "Output: 1", "explanation": "Explanation: We have 3 students where:\nThe first student started doing homework at time 1 and finished at time 3 and wasn't doing anything at time 4.\nThe second student started doing homework at time 2 and finished at time 2 and also wasn't doing anything at time 4.\nThe third student started doing homework at time 3 and finished at time 7 and was the only student doing homework at time 4."}, {"full_text": "Example 2:\nInput: startTime = [4], endTime = [4], queryTime = 4\nOutput: 1\nExplanation: The only student was doing their homework at the queryTime.", "input": "Input: startTime = [4], endTime = [4], queryTime = 4", "output": "Output: 1", "explanation": "Explanation: The only student was doing their homework at the queryTime."}], "constraints": "Constraints:\nstartTime.length == endTime.length\n1 <= startTime.length <= 100\n1 <= startTime[i] <= endTime[i] <= 1000\n1 <= queryTime <= 1000", "notes": ""}, "1446": {"label": "Easy", "title": "Consecutive Characters", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6201, "total_accepted": 114100.0, "total_submissions": 183900.0, "testcase_example": "'\"leetcode\"'", "body": "The power of the string is the maximum length of a non-empty substring that contains only one unique character.\nGiven a string s, return the power of s.", "examples": [{"full_text": "Example 1:\nInput: s = \"leetcode\"\nOutput: 2\nExplanation: The substring \"ee\" is of length 2 with the character 'e' only.", "input": "Input: s = \"leetcode\"", "output": "Output: 2", "explanation": "Explanation: The substring \"ee\" is of length 2 with the character 'e' only."}, {"full_text": "Example 2:\nInput: s = \"abbcccddddeeeeedcba\"\nOutput: 5\nExplanation: The substring \"eeeee\" is of length 5 with the character 'e' only.", "input": "Input: s = \"abbcccddddeeeeedcba\"", "output": "Output: 5", "explanation": "Explanation: The substring \"eeeee\" is of length 5 with the character 'e' only."}], "constraints": "Constraints:\n1 <= s.length <= 500\ns consists of only lowercase English letters.", "notes": ""}, "1441": {"label": "Easy", "title": "Build an Array With Stack Operations", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7081999999999999, "total_accepted": 55600.0, "total_submissions": 78500.0, "testcase_example": "'[1,3]\\n3'", "body": "You are given an array target and an integer n.\nIn each iteration, you will read a number from list = [1, 2, 3, ..., n].\nBuild the target array using the following operations:\n\"Push\": Reads a new element from the beginning list, and pushes it in the array.\n\"Pop\": Deletes the last element of the array.\nIf the target array is already built, stop reading more elements.\nReturn a list of the operations needed to build target. The test cases are generated so that the answer is unique.", "examples": [{"full_text": "Example 1:\nInput: target = [1,3], n = 3\nOutput: [\"Push\",\"Push\",\"Pop\",\"Push\"]\nExplanation:\nRead number 1 and automatically push in the array -> [1]\nRead number 2 and automatically push in the array then Pop it -> [1]\nRead number 3 and automatically push in the array -> [1,3]", "input": "Input: target = [1,3], n = 3", "output": "Output: [\"Push\",\"Push\",\"Pop\",\"Push\"]", "explanation": "Explanation:\nRead number 1 and automatically push in the array -> [1]\nRead number 2 and automatically push in the array then Pop it -> [1]\nRead number 3 and automatically push in the array -> [1,3]"}, {"full_text": "Example 2:\nInput: target = [1,2,3], n = 3\nOutput: [\"Push\",\"Push\",\"Push\"]", "input": "Input: target = [1,2,3], n = 3", "output": "Output: [\"Push\",\"Push\",\"Push\"]", "explanation": ""}, {"full_text": "Example 3:\nInput: target = [1,2], n = 4\nOutput: [\"Push\",\"Push\"]\nExplanation: You only need to read the first 2 numbers and stop.", "input": "Input: target = [1,2], n = 4", "output": "Output: [\"Push\",\"Push\"]", "explanation": "Explanation: You only need to read the first 2 numbers and stop."}], "constraints": "Constraints:\n1 <= target.length <= 100\n1 <= n <= 100\n1 <= target[i] <= n\ntarget is strictly increasing.", "notes": ""}, "1437": {"label": "Easy", "title": "Check If All 1's Are at Least Length K Places Away", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6031, "total_accepted": 56000.0, "total_submissions": 92900.0, "testcase_example": "'[1,0,0,0,1,0,0,1]\\n2'", "body": "Given an binary array nums and an integer k, return true if all 1's are at least k places away from each other, otherwise return false.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,0,0,0,1,0,0,1], k = 2\nOutput: true\nExplanation: Each of the 1s are at least 2 places away from each other.", "input": "Input: nums = [1,0,0,0,1,0,0,1], k = 2", "output": "Output: true", "explanation": "Explanation: Each of the 1s are at least 2 places away from each other."}, {"full_text": "Example 2:\nInput: nums = [1,0,0,1,0,1], k = 2\nOutput: false\nExplanation: The second 1 and third 1 are only one apart from each other.", "input": "Input: nums = [1,0,0,1,0,1], k = 2", "output": "Output: false", "explanation": "Explanation: The second 1 and third 1 are only one apart from each other."}], "constraints": "Constraints:\n1 <= nums.length <= 10^5\n0 <= k <= nums.length\nnums[i] is 0 or 1", "notes": ""}, "1436": {"label": "Easy", "title": "Destination City", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7767000000000001, "total_accepted": 93400.0, "total_submissions": 120300.0, "testcase_example": "'[[\"London\",\"New York\"],[\"New York\",\"Lima\"],[\"Lima\",\"Sao Paulo\"]]'", "body": "You are given the array paths, where paths[i] = [cityAi, cityBi] means there exists a direct path going from cityAi to cityBi. Return the destination city, that is, the city without any path outgoing to another city.\nIt is guaranteed that the graph of paths forms a line without any loop, therefore, there will be exactly one destination city.", "examples": [{"full_text": "Example 1:\nInput: paths = [[\"London\",\"New York\"],[\"New York\",\"Lima\"],[\"Lima\",\"Sao Paulo\"]]\nOutput: \"Sao Paulo\"\nExplanation: Starting at \"London\" city you will reach \"Sao Paulo\" city which is the destination city. Your trip consist of: \"London\" -> \"New York\" -> \"Lima\" -> \"Sao Paulo\".", "input": "Input: paths = [[\"London\",\"New York\"],[\"New York\",\"Lima\"],[\"Lima\",\"Sao Paulo\"]]", "output": "Output: \"Sao Paulo\"", "explanation": "Explanation: Starting at \"London\" city you will reach \"Sao Paulo\" city which is the destination city. Your trip consist of: \"London\" -> \"New York\" -> \"Lima\" -> \"Sao Paulo\"."}, {"full_text": "Example 2:\nInput: paths = [[\"B\",\"C\"],[\"D\",\"B\"],[\"C\",\"A\"]]\nOutput: \"A\"\nExplanation: All possible trips are:\n\"D\" -> \"B\" -> \"C\" -> \"A\".\n\"B\" -> \"C\" -> \"A\".\n\"C\" -> \"A\".\n\"A\".\nClearly the destination city is \"A\".", "input": "Input: paths = [[\"B\",\"C\"],[\"D\",\"B\"],[\"C\",\"A\"]]", "output": "Output: \"A\"", "explanation": "Explanation: All possible trips are:\n\"D\" -> \"B\" -> \"C\" -> \"A\".\n\"B\" -> \"C\" -> \"A\".\n\"C\" -> \"A\".\n\"A\".\nClearly the destination city is \"A\"."}, {"full_text": "Example 3:\nInput: paths = [[\"A\",\"Z\"]]\nOutput: \"Z\"", "input": "Input: paths = [[\"A\",\"Z\"]]", "output": "Output: \"Z\"", "explanation": ""}], "constraints": "Constraints:\n1 <= paths.length <= 100\npaths[i].length == 2\n1 <= cityAi.length, cityBi.length <= 10\ncityAi != cityBi\nAll strings consist of lowercase and uppercase English letters and the space character.", "notes": ""}, "1431": {"label": "Easy", "title": "Kids With the Greatest Number of Candies", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.8778, "total_accepted": 290900.0, "total_submissions": 331400.0, "testcase_example": "'[2,3,5,1,3]\\n3'", "body": "There are n kids with candies. You are given an integer array candies, where each candies[i] represents the number of candies the i^th kid has, and an integer extraCandies, denoting the number of extra candies that you have.\nReturn a boolean array result of length n, where result[i] is true if, after giving the i^th kid all the extraCandies, they will have the greatest number of candies among all the kids, or false otherwise.\nNote that multiple kids can have the greatest number of candies.", "examples": [{"full_text": "Example 1:\nInput: candies = [2,3,5,1,3], extraCandies = 3\nOutput: [true,true,true,false,true]\nExplanation: If you give all extraCandies to:\n- Kid 1, they will have 2 + 3 = 5 candies, which is the greatest among the kids.\n- Kid 2, they will have 3 + 3 = 6 candies, which is the greatest among the kids.\n- Kid 3, they will have 5 + 3 = 8 candies, which is the greatest among the kids.\n- Kid 4, they will have 1 + 3 = 4 candies, which is not the greatest among the kids.\n- Kid 5, they will have 3 + 3 = 6 candies, which is the greatest among the kids.", "input": "Input: candies = [2,3,5,1,3], extraCandies = 3", "output": "Output: [true,true,true,false,true]", "explanation": "Explanation: If you give all extraCandies to:\n- Kid 1, they will have 2 + 3 = 5 candies, which is the greatest among the kids.\n- Kid 2, they will have 3 + 3 = 6 candies, which is the greatest among the kids.\n- Kid 3, they will have 5 + 3 = 8 candies, which is the greatest among the kids.\n- Kid 4, they will have 1 + 3 = 4 candies, which is not the greatest among the kids.\n- Kid 5, they will have 3 + 3 = 6 candies, which is the greatest among the kids."}, {"full_text": "Example 2:\nInput: candies = [4,2,1,1,2], extraCandies = 1\nOutput: [true,false,false,false,false]\nExplanation: There is only 1 extra candy.\nKid 1 will always have the greatest number of candies, even if a different kid is given the extra candy.", "input": "Input: candies = [4,2,1,1,2], extraCandies = 1", "output": "Output: [true,false,false,false,false]", "explanation": "Explanation: There is only 1 extra candy.\nKid 1 will always have the greatest number of candies, even if a different kid is given the extra candy."}, {"full_text": "Example 3:\nInput: candies = [12,1,12], extraCandies = 10\nOutput: [true,false,true]", "input": "Input: candies = [12,1,12], extraCandies = 10", "output": "Output: [true,false,true]", "explanation": ""}], "constraints": "Constraints:\nn == candies.length\n2 <= n <= 100\n1 <= candies[i] <= 100\n1 <= extraCandies <= 50", "notes": ""}, "1422": {"label": "Easy", "title": "Maximum Score After Splitting a String", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5771000000000001, "total_accepted": 37000.0, "total_submissions": 64200.0, "testcase_example": "'\"011101\"'", "body": "Given a\nstring s\nof zeros and ones, return the maximum score after splitting the string into two non-empty substrings (i.e. left substring and right substring).\nThe score after splitting a string is the number of zeros in the left substring plus the number of ones in the right substring.", "examples": [{"full_text": "Example 1:\nInput: s = \"011101\"\nOutput: 5\nExplanation:\nAll possible ways of splitting s into two non-empty substrings are:\nleft = \"0\" and right = \"11101\", score = 1 + 4 = 5\nleft = \"01\" and right = \"1101\", score = 1 + 3 = 4\nleft = \"011\" and right = \"101\", score = 1 + 2 = 3\nleft = \"0111\" and right = \"01\", score = 1 + 1 = 2\nleft = \"01110\" and right = \"1\", score = 2 + 1 = 3", "input": "Input: s = \"011101\"", "output": "Output: 5", "explanation": "Explanation:\nAll possible ways of splitting s into two non-empty substrings are:\nleft = \"0\" and right = \"11101\", score = 1 + 4 = 5\nleft = \"01\" and right = \"1101\", score = 1 + 3 = 4\nleft = \"011\" and right = \"101\", score = 1 + 2 = 3\nleft = \"0111\" and right = \"01\", score = 1 + 1 = 2\nleft = \"01110\" and right = \"1\", score = 2 + 1 = 3"}, {"full_text": "Example 2:\nInput: s = \"00111\"\nOutput: 5\nExplanation: When left = \"00\" and right = \"111\", we get the maximum score = 2 + 3 = 5", "input": "Input: s = \"00111\"", "output": "Output: 5", "explanation": "Explanation: When left = \"00\" and right = \"111\", we get the maximum score = 2 + 3 = 5"}, {"full_text": "Example 3:\nInput: s = \"1111\"\nOutput: 3", "input": "Input: s = \"1111\"", "output": "Output: 3", "explanation": ""}], "constraints": "Constraints:\n2 <= s.length <= 500\nThe string s consists of characters '0' and '1' only.", "notes": ""}, "1417": {"label": "Easy", "title": "Reformat The String", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5647, "total_accepted": 41000.0, "total_submissions": 72600.0, "testcase_example": "'\"a0b1c2\"'", "body": "You are given an alphanumeric string s. (Alphanumeric string is a string consisting of lowercase English letters and digits).\nYou have to find a permutation of the string where no letter is followed by another letter and no digit is followed by another digit. That is, no two adjacent characters have the same type.\nReturn the reformatted string or return an empty string if it is impossible to reformat the string.", "examples": [{"full_text": "Example 1:\nInput: s = \"a0b1c2\"\nOutput: \"0a1b2c\"\nExplanation: No two adjacent characters have the same type in \"0a1b2c\". \"a0b1c2\", \"0a1b2c\", \"0c2a1b\" are also valid permutations.", "input": "Input: s = \"a0b1c2\"", "output": "Output: \"0a1b2c\"", "explanation": "Explanation: No two adjacent characters have the same type in \"0a1b2c\". \"a0b1c2\", \"0a1b2c\", \"0c2a1b\" are also valid permutations."}, {"full_text": "Example 2:\nInput: s = \"leetcode\"\nOutput: \"\"\nExplanation: \"leetcode\" has only characters so we cannot separate them by digits.", "input": "Input: s = \"leetcode\"", "output": "Output: \"\"", "explanation": "Explanation: \"leetcode\" has only characters so we cannot separate them by digits."}, {"full_text": "Example 3:\nInput: s = \"1229857369\"\nOutput: \"\"\nExplanation: \"1229857369\" has only digits so we cannot separate them by characters.", "input": "Input: s = \"1229857369\"", "output": "Output: \"\"", "explanation": "Explanation: \"1229857369\" has only digits so we cannot separate them by characters."}], "constraints": "Constraints:\n1 <= s.length <= 500\ns consists of only lowercase English letters and/or digits.", "notes": ""}, "1413": {"label": "Easy", "title": "Minimum Value to Get Positive Step by Step Sum", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.687, "total_accepted": 65800.0, "total_submissions": 95800.0, "testcase_example": "'[-3,2,-3,4,2]'", "body": "Given an array of integers\nnums, you start with an initial positive value startValue.\nIn each iteration, you calculate the step by step sum of startValue\nplus\nelements in nums\n(from left to right).\nReturn the minimum positive value of\nstartValue such that the step by step sum is never less than 1.", "examples": [{"full_text": "Example 1:\nInput: nums = [-3,2,-3,4,2]\nOutput: 5\nExplanation: If you choose startValue = 4, in the third iteration your step by step sum is less than 1.\nstep by step sum\nstartValue = 4 | startValue = 5 | nums\n(4 -3 ) = 1 | (5 -3 ) = 2 | -3\n(1 +2 ) = 3 | (2 +2 ) = 4 | 2\n(3 -3 ) = 0 | (4 -3 ) = 1 | -3\n(0 +4 ) = 4 | (1 +4 ) = 5 | 4\n(4 +2 ) = 6 | (5 +2 ) = 7 | 2", "input": "Input: nums = [-3,2,-3,4,2]", "output": "Output: 5", "explanation": "Explanation: If you choose startValue = 4, in the third iteration your step by step sum is less than 1.\nstep by step sum\nstartValue = 4 | startValue = 5 | nums\n(4 -3 ) = 1 | (5 -3 ) = 2 | -3\n(1 +2 ) = 3 | (2 +2 ) = 4 | 2\n(3 -3 ) = 0 | (4 -3 ) = 1 | -3\n(0 +4 ) = 4 | (1 +4 ) = 5 | 4\n(4 +2 ) = 6 | (5 +2 ) = 7 | 2"}, {"full_text": "Example 2:\nInput: nums = [1,2]\nOutput: 1\nExplanation: Minimum start value should be positive.", "input": "Input: nums = [1,2]", "output": "Output: 1", "explanation": "Explanation: Minimum start value should be positive."}, {"full_text": "Example 3:\nInput: nums = [1,-2,-3]\nOutput: 5", "input": "Input: nums = [1,-2,-3]", "output": "Output: 5", "explanation": ""}], "constraints": "Constraints:\n1 <= nums.length <= 100\n-100 <= nums[i] <= 100", "notes": ""}, "1408": {"label": "Easy", "title": "String Matching in an Array", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.638, "total_accepted": 51900.0, "total_submissions": 81300.0, "testcase_example": "'[\"mass\",\"as\",\"hero\",\"superhero\"]'", "body": "Given an array of string words. Return all strings in words which is substring of another word in any order.\nString words[i] is substring of words[j],\nif\ncan be obtained removing some characters to left and/or right side of words[j].", "examples": [{"full_text": "Example 1:\nInput: words = [\"mass\",\"as\",\"hero\",\"superhero\"]\nOutput: [\"as\",\"hero\"]\nExplanation: \"as\" is substring of \"mass\" and \"hero\" is substring of \"superhero\".\n[\"hero\",\"as\"] is also a valid answer.", "input": "Input: words = [\"mass\",\"as\",\"hero\",\"superhero\"]", "output": "Output: [\"as\",\"hero\"]", "explanation": "Explanation: \"as\" is substring of \"mass\" and \"hero\" is substring of \"superhero\".\n[\"hero\",\"as\"] is also a valid answer."}, {"full_text": "Example 2:\nInput: words = [\"leetcode\",\"et\",\"code\"]\nOutput: [\"et\",\"code\"]\nExplanation: \"et\", \"code\" are substring of \"leetcode\".", "input": "Input: words = [\"leetcode\",\"et\",\"code\"]", "output": "Output: [\"et\",\"code\"]", "explanation": "Explanation: \"et\", \"code\" are substring of \"leetcode\"."}, {"full_text": "Example 3:\nInput: words = [\"blue\",\"green\",\"bu\"]\nOutput: []", "input": "Input: words = [\"blue\",\"green\",\"bu\"]", "output": "Output: []", "explanation": ""}], "constraints": "Constraints:\n1 <= words.length <= 100\n1 <= words[i].length <= 30\nwords[i] contains only lowercase English letters.\nIt's guaranteed\nthat words[i]\nwill be unique.", "notes": ""}, "1403": {"label": "Easy", "title": "Minimum Subsequence in Non-Increasing Order", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7211, "total_accepted": 47700.0, "total_submissions": 66100.0, "testcase_example": "'[4,3,10,9,8]'", "body": "Given the array nums, obtain a subsequence of the array whose sum of elements is strictly greater than the sum of the non\nincluded elements in such subsequence.\nIf there are multiple solutions, return the subsequence with minimum size and if there still exist multiple solutions, return the subsequence with the maximum total sum of all its elements. A subsequence of an array can be obtained by erasing some (possibly zero) elements from the array.\nNote that the solution with the given constraints is guaranteed to be\nunique. Also return the answer sorted in non-increasing order.", "examples": [{"full_text": "Example 1:\nInput: nums = [4,3,10,9,8]\nOutput: [10,9]\nExplanation: The subsequences [10,9] and [10,8] are minimal such that the sum of their elements is strictly greater than the sum of elements not included, however, the subsequence [10,9] has the maximum total sum of its elements.", "input": "Input: nums = [4,3,10,9,8]", "output": "Output: [10,9]", "explanation": "Explanation: The subsequences [10,9] and [10,8] are minimal such that the sum of their elements is strictly greater than the sum of elements not included, however, the subsequence [10,9] has the maximum total sum of its elements."}, {"full_text": "Example 2:\nInput: nums = [4,4,7,6,7]\nOutput: [7,7,6]\nExplanation: The subsequence [7,7] has the sum of its elements equal to 14 which is not strictly greater than the sum of elements not included (14 = 4 + 4 + 6). Therefore, the subsequence [7,6,7] is the minimal satisfying the conditions. Note the subsequence has to returned in non-decreasing order.", "input": "Input: nums = [4,4,7,6,7]", "output": "Output: [7,7,6]", "explanation": "Explanation: The subsequence [7,7] has the sum of its elements equal to 14 which is not strictly greater than the sum of elements not included (14 = 4 + 4 + 6). Therefore, the subsequence [7,6,7] is the minimal satisfying the conditions. Note the subsequence has to returned in non-decreasing order."}, {"full_text": "Example 3:\nInput: nums = [6]\nOutput: [6]", "input": "Input: nums = [6]", "output": "Output: [6]", "explanation": ""}], "constraints": "Constraints:\n1 <= nums.length <= 500\n1 <= nums[i] <= 100", "notes": ""}, "1399": {"label": "Easy", "title": "Count Largest Group", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6653, "total_accepted": 29200.0, "total_submissions": 43900.0, "testcase_example": "'13'", "body": "You are given an integer n.\nEach number from 1 to n is grouped according to the sum of its digits.\nReturn the number of groups that have the largest size.", "examples": [{"full_text": "Example 1:\nInput: n = 13\nOutput: 4\nExplanation: There are 9 groups in total, they are grouped according sum of its digits of numbers from 1 to 13:\n[1,10], [2,11], [3,12], [4,13], [5], [6], [7], [8], [9].\nThere are 4 groups with largest size.", "input": "Input: n = 13", "output": "Output: 4", "explanation": "Explanation: There are 9 groups in total, they are grouped according sum of its digits of numbers from 1 to 13:\n[1,10], [2,11], [3,12], [4,13], [5], [6], [7], [8], [9].\nThere are 4 groups with largest size."}, {"full_text": "Example 2:\nInput: n = 2\nOutput: 2\nExplanation: There are 2 groups [1], [2] of size 1.", "input": "Input: n = 2", "output": "Output: 2", "explanation": "Explanation: There are 2 groups [1], [2] of size 1."}], "constraints": "Constraints:\n1 <= n <= 10^4", "notes": ""}, "1394": {"label": "Easy", "title": "Find Lucky Integer in an Array", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6349, "total_accepted": 65000.0, "total_submissions": 102400.0, "testcase_example": "'[2,2,3,4]'", "body": "Given an array of integers arr, a lucky integer is an integer that has a frequency in the array equal to its value.\nReturn the largest lucky integer in the array. If there is no lucky integer return -1.", "examples": [{"full_text": "Example 1:\nInput: arr = [2,2,3,4]\nOutput: 2\nExplanation: The only lucky number in the array is 2 because frequency[2] == 2.", "input": "Input: arr = [2,2,3,4]", "output": "Output: 2", "explanation": "Explanation: The only lucky number in the array is 2 because frequency[2] == 2."}, {"full_text": "Example 2:\nInput: arr = [1,2,2,3,3,3]\nOutput: 3\nExplanation: 1, 2 and 3 are all lucky numbers, return the largest of them.", "input": "Input: arr = [1,2,2,3,3,3]", "output": "Output: 3", "explanation": "Explanation: 1, 2 and 3 are all lucky numbers, return the largest of them."}, {"full_text": "Example 3:\nInput: arr = [2,2,2,3,3]\nOutput: -1\nExplanation: There are no lucky numbers in the array.", "input": "Input: arr = [2,2,2,3,3]", "output": "Output: -1", "explanation": "Explanation: There are no lucky numbers in the array."}], "constraints": "Constraints:\n1 <= arr.length <= 500\n1 <= arr[i] <= 500", "notes": ""}, "1389": {"label": "Easy", "title": "Create Target Array in the Given Order", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.8548, "total_accepted": 133000.0, "total_submissions": 155600.0, "testcase_example": "'[0,1,2,3,4]\\n[0,1,2,2,1]'", "body": "Given two arrays of integers\nnums and index. Your task is to create target array under the following rules:\nInitially target array is empty.\nFrom left to right read nums[i] and index[i], insert at index index[i]\nthe value nums[i]\nin\ntarget array.\nRepeat the previous step until there are no elements to read in nums and index.\nReturn the target array.\nIt is guaranteed that the insertion operations will be valid.", "examples": [{"full_text": "Example 1:\nInput: nums = [0,1,2,3,4], index = [0,1,2,2,1]\nOutput: [0,4,1,3,2]\nExplanation:\nnums index target\n0 0 [0]\n1 1 [0,1]\n2 2 [0,1,2]\n3 2 [0,1,3,2]\n4 1 [0,4,1,3,2]", "input": "Input: nums = [0,1,2,3,4], index = [0,1,2,2,1]", "output": "Output: [0,4,1,3,2]", "explanation": "Explanation:\nnums index target\n0 0 [0]\n1 1 [0,1]\n2 2 [0,1,2]\n3 2 [0,1,3,2]\n4 1 [0,4,1,3,2]"}, {"full_text": "Example 2:\nInput: nums = [1,2,3,4,0], index = [0,1,2,3,0]\nOutput: [0,1,2,3,4]\nExplanation:\nnums index target\n1 0 [1]\n2 1 [1,2]\n3 2 [1,2,3]\n4 3 [1,2,3,4]\n0 0 [0,1,2,3,4]", "input": "Input: nums = [1,2,3,4,0], index = [0,1,2,3,0]", "output": "Output: [0,1,2,3,4]", "explanation": "Explanation:\nnums index target\n1 0 [1]\n2 1 [1,2]\n3 2 [1,2,3]\n4 3 [1,2,3,4]\n0 0 [0,1,2,3,4]"}, {"full_text": "Example 3:\nInput: nums = [1], index = [0]\nOutput: [1]", "input": "Input: nums = [1], index = [0]", "output": "Output: [1]", "explanation": ""}], "constraints": "Constraints:\n1 <= nums.length, index.length <= 100\nnums.length == index.length\n0 <= nums[i] <= 100\n0 <= index[i] <= i", "notes": ""}, "1385": {"label": "Easy", "title": "Find the Distance Value Between Two Arrays", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6607, "total_accepted": 37300.0, "total_submissions": 56400.0, "testcase_example": "'[4,5,8]\\n[10,9,1,8]\\n2'", "body": "Given two integer arrays arr1 and arr2, and the integer d, return the distance value between the two arrays.\nThe distance value is defined as the number of elements arr1[i] such that there is not any element arr2[j] where |arr1[i]-arr2[j]| <= d.", "examples": [{"full_text": "Example 1:\nInput: arr1 = [4,5,8], arr2 = [10,9,1,8], d = 2\nOutput: 2\nExplanation:\nFor arr1[0]=4 we have:\n|4-10|=6 > d=2\n|4-9|=5 > d=2\n|4-1|=3 > d=2\n|4-8|=4 > d=2\nFor arr1[1]=5 we have:\n|5-10|=5 > d=2\n|5-9|=4 > d=2\n|5-1|=4 > d=2\n|5-8|=3 > d=2\nFor arr1[2]=8 we have:\n|8-10|=2 <= d=2\n|8-9|=1 <= d=2\n|8-1|=7 > d=2\n|8-8|=0 <= d=2", "input": "Input: arr1 = [4,5,8], arr2 = [10,9,1,8], d = 2", "output": "Output: 2", "explanation": "Explanation:\nFor arr1[0]=4 we have:\n|4-10|=6 > d=2\n|4-9|=5 > d=2\n|4-1|=3 > d=2\n|4-8|=4 > d=2\nFor arr1[1]=5 we have:\n|5-10|=5 > d=2\n|5-9|=4 > d=2\n|5-1|=4 > d=2\n|5-8|=3 > d=2\nFor arr1[2]=8 we have:\n|8-10|=2 <= d=2\n|8-9|=1 <= d=2\n|8-1|=7 > d=2\n|8-8|=0 <= d=2"}, {"full_text": "Example 2:\nInput: arr1 = [1,4,2,3], arr2 = [-4,-3,6,10,20,30], d = 3\nOutput: 2", "input": "Input: arr1 = [1,4,2,3], arr2 = [-4,-3,6,10,20,30], d = 3", "output": "Output: 2", "explanation": ""}, {"full_text": "Example 3:\nInput: arr1 = [2,1,100,3], arr2 = [-5,-2,10,-3,7], d = 6\nOutput: 1", "input": "Input: arr1 = [2,1,100,3], arr2 = [-5,-2,10,-3,7], d = 6", "output": "Output: 1", "explanation": ""}], "constraints": "Constraints:\n1 <= arr1.length, arr2.length <= 500\n-1000 <= arr1[i], arr2[j] <= 1000\n0 <= d <= 100", "notes": ""}, "1380": {"label": "Easy", "title": "Lucky Numbers in a Matrix", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7094, "total_accepted": 59900.0, "total_submissions": 84400.0, "testcase_example": "'[[3,7,8],[9,11,13],[15,16,17]]'", "body": "Given an m x n matrix of distinct numbers, return all lucky numbers in the matrix in any order.\nA lucky number is an element of the matrix such that it is the minimum element in its row and maximum in its column.", "examples": [{"full_text": "Example 1:\nInput: matrix = [[3,7,8],[9,11,13],[15,16,17]]\nOutput: [15]\nExplanation: 15 is the only lucky number since it is the minimum in its row and the maximum in its column.", "input": "Input: matrix = [[3,7,8],[9,11,13],[15,16,17]]", "output": "Output: [15]", "explanation": "Explanation: 15 is the only lucky number since it is the minimum in its row and the maximum in its column."}, {"full_text": "Example 2:\nInput: matrix = [[1,10,4,2],[9,3,8,7],[15,16,17,12]]\nOutput: [12]\nExplanation: 12 is the only lucky number since it is the minimum in its row and the maximum in its column.", "input": "Input: matrix = [[1,10,4,2],[9,3,8,7],[15,16,17,12]]", "output": "Output: [12]", "explanation": "Explanation: 12 is the only lucky number since it is the minimum in its row and the maximum in its column."}, {"full_text": "Example 3:\nInput: matrix = [[7,8],[1,2]]\nOutput: [7]\nExplanation: 7 is the only lucky number since it is the minimum in its row and the maximum in its column.", "input": "Input: matrix = [[7,8],[1,2]]", "output": "Output: [7]", "explanation": "Explanation: 7 is the only lucky number since it is the minimum in its row and the maximum in its column."}], "constraints": "Constraints:\nm == mat.length\nn == mat[i].length\n1 <= n, m <= 50\n1 <= matrix[i][j] <= 10^5.\nAll elements in the matrix are distinct.", "notes": ""}, "1374": {"label": "Easy", "title": "Generate a String With Characters That Have Odd Counts", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7731999999999999, "total_accepted": 62900.0, "total_submissions": 81300.0, "testcase_example": "'4'", "body": "Given an\ninteger n, return a string with n\ncharacters such that each character in such string occurs an odd number of times.\nThe returned string must contain only lowercase English letters. If there are multiples valid strings, return any of them.", "examples": [{"full_text": "Example 1:\nInput: n = 4\nOutput: \"pppz\"\nExplanation: \"pppz\" is a valid string since the character 'p' occurs three times and the character 'z' occurs once. Note that there are many other valid strings such as \"ohhh\" and \"love\".", "input": "Input: n = 4", "output": "Output: \"pppz\"", "explanation": "Explanation: \"pppz\" is a valid string since the character 'p' occurs three times and the character 'z' occurs once. Note that there are many other valid strings such as \"ohhh\" and \"love\"."}, {"full_text": "Example 2:\nInput: n = 2\nOutput: \"xy\"\nExplanation: \"xy\" is a valid string since the characters 'x' and 'y' occur once. Note that there are many other valid strings such as \"ag\" and \"ur\".", "input": "Input: n = 2", "output": "Output: \"xy\"", "explanation": "Explanation: \"xy\" is a valid string since the characters 'x' and 'y' occur once. Note that there are many other valid strings such as \"ag\" and \"ur\"."}, {"full_text": "Example 3:\nInput: n = 7\nOutput: \"holasss\"", "input": "Input: n = 7", "output": "Output: \"holasss\"", "explanation": ""}], "constraints": "Constraints:\n1 <= n <= 500", "notes": ""}, "1370": {"label": "Easy", "title": "Increasing Decreasing String", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7775, "total_accepted": 51800.0, "total_submissions": 66700.0, "testcase_example": "'\"aaaabbbbcccc\"'", "body": "You are given a string s. Reorder the string using the following algorithm:\nPick the smallest character from s and append it to the result.\nPick the smallest character from s which is greater than the last appended character to the result and append it.\nRepeat step 2 until you cannot pick more characters.\nPick the largest character from s and append it to the result.\nPick the largest character from s which is smaller than the last appended character to the result and append it.\nRepeat step 5 until you cannot pick more characters.\nRepeat the steps from 1 to 6 until you pick all characters from s.\nIn each step, If the smallest or the largest character appears more than once you can choose any occurrence and append it to the result.\nReturn the result string after sorting s with this algorithm.", "examples": [{"full_text": "Example 1:\nInput: s = \"aaaabbbbcccc\"\nOutput: \"abccbaabccba\"\nExplanation: After steps 1, 2 and 3 of the first iteration, result = \"abc\"\nAfter steps 4, 5 and 6 of the first iteration, result = \"abccba\"\nFirst iteration is done. Now s = \"aabbcc\" and we go back to step 1\nAfter steps 1, 2 and 3 of the second iteration, result = \"abccbaabc\"\nAfter steps 4, 5 and 6 of the second iteration, result = \"abccbaabccba\"", "input": "Input: s = \"aaaabbbbcccc\"", "output": "Output: \"abccbaabccba\"", "explanation": "Explanation: After steps 1, 2 and 3 of the first iteration, result = \"abc\"\nAfter steps 4, 5 and 6 of the first iteration, result = \"abccba\"\nFirst iteration is done. Now s = \"aabbcc\" and we go back to step 1\nAfter steps 1, 2 and 3 of the second iteration, result = \"abccbaabc\"\nAfter steps 4, 5 and 6 of the second iteration, result = \"abccbaabccba\""}, {"full_text": "Example 2:\nInput: s = \"rat\"\nOutput: \"art\"\nExplanation: The word \"rat\" becomes \"art\" after re-ordering it with the mentioned algorithm.", "input": "Input: s = \"rat\"", "output": "Output: \"art\"", "explanation": "Explanation: The word \"rat\" becomes \"art\" after re-ordering it with the mentioned algorithm."}], "constraints": "Constraints:\n1 <= s.length <= 500\ns consists of only lowercase English letters.", "notes": ""}, "1365": {"label": "Easy", "title": "How Many Numbers Are Smaller Than the Current Number", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.8621, "total_accepted": 284600.0, "total_submissions": 330100.0, "testcase_example": "'[8,1,2,2,3]'", "body": "Given the array nums, for each nums[i] find out how many numbers in the array are smaller than it. That is, for each nums[i] you have to count the number of valid j's\nsuch that\nj != i and nums[j] < nums[i].\nReturn the answer in an array.", "examples": [{"full_text": "Example 1:\nInput: nums = [8,1,2,2,3]\nOutput: [4,0,1,1,3]\nExplanation:\nFor nums[0]=8 there exist four smaller numbers than it (1, 2, 2 and 3).\nFor nums[1]=1 does not exist any smaller number than it.\nFor nums[2]=2 there exist one smaller number than it (1).\nFor nums[3]=2 there exist one smaller number than it (1).\nFor nums[4]=3 there exist three smaller numbers than it (1, 2 and 2).", "input": "Input: nums = [8,1,2,2,3]", "output": "Output: [4,0,1,1,3]", "explanation": "Explanation:\nFor nums[0]=8 there exist four smaller numbers than it (1, 2, 2 and 3).\nFor nums[1]=1 does not exist any smaller number than it.\nFor nums[2]=2 there exist one smaller number than it (1).\nFor nums[3]=2 there exist one smaller number than it (1).\nFor nums[4]=3 there exist three smaller numbers than it (1, 2 and 2)."}, {"full_text": "Example 2:\nInput: nums = [6,5,4,8]\nOutput: [2,1,0,3]", "input": "Input: nums = [6,5,4,8]", "output": "Output: [2,1,0,3]", "explanation": ""}, {"full_text": "Example 3:\nInput: nums = [7,7,7,7]\nOutput: [0,0,0,0]", "input": "Input: nums = [7,7,7,7]", "output": "Output: [0,0,0,0]", "explanation": ""}], "constraints": "Constraints:\n2 <= nums.length <= 500\n0 <= nums[i] <= 100", "notes": ""}, "1360": {"label": "Easy", "title": "Number of Days Between Two Dates", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4664, "total_accepted": 27100.0, "total_submissions": 58000.0, "testcase_example": "'\"2019-06-29\"\\n\"2019-06-30\"'", "body": "Write a program to count the number of days between two dates.\nThe two dates are given as strings, their format is YYYY-MM-DD\nas shown in the examples.", "examples": [{"full_text": "Example 1:\nInput: date1 = \"2019-06-29\", date2 = \"2019-06-30\"\nOutput: 1", "input": "Input: date1 = \"2019-06-29\", date2 = \"2019-06-30\"", "output": "Output: 1", "explanation": ""}, {"full_text": "Example 2:\nInput: date1 = \"2020-01-15\", date2 = \"2019-12-31\"\nOutput: 15", "input": "Input: date1 = \"2020-01-15\", date2 = \"2019-12-31\"", "output": "Output: 15", "explanation": ""}], "constraints": "Constraints:\nThe given dates are valid\ndates between the years 1971 and 2100.", "notes": ""}, "1356": {"label": "Easy", "title": "Sort Integers by The Number of 1 Bits", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7086, "total_accepted": 57800.0, "total_submissions": 81600.0, "testcase_example": "'[0,1,2,3,4,5,6,7,8]'", "body": "You are given an integer array arr. Sort the integers in the array\nin ascending order by the number of 1's\nin their binary representation and in case of two or more integers have the same number of 1's you have to sort them in ascending order.\nReturn the array after sorting it.", "examples": [{"full_text": "Example 1:\nInput: arr = [0,1,2,3,4,5,6,7,8]\nOutput: [0,1,2,4,8,3,5,6,7]\nExplantion: [0] is the only integer with 0 bits.\n[1,2,4,8] all have 1 bit.\n[3,5,6] have 2 bits.\n[7] has 3 bits.\nThe sorted array by bits is [0,1,2,4,8,3,5,6,7]", "input": "Input: arr = [0,1,2,3,4,5,6,7,8]", "output": "Output: [0,1,2,4,8,3,5,6,7]\nExplantion: [0] is the only integer with 0 bits.\n[1,2,4,8] all have 1 bit.\n[3,5,6] have 2 bits.\n[7] has 3 bits.\nThe sorted array by bits is [0,1,2,4,8,3,5,6,7]", "explanation": ""}, {"full_text": "Example 2:\nInput: arr = [1024,512,256,128,64,32,16,8,4,2,1]\nOutput: [1,2,4,8,16,32,64,128,256,512,1024]\nExplantion: All integers have 1 bit in the binary representation, you should just sort them in ascending order.", "input": "Input: arr = [1024,512,256,128,64,32,16,8,4,2,1]", "output": "Output: [1,2,4,8,16,32,64,128,256,512,1024]\nExplantion: All integers have 1 bit in the binary representation, you should just sort them in ascending order.", "explanation": ""}], "constraints": "Constraints:\n1 <= arr.length <= 500\n0 <= arr[i] <= 10^4", "notes": ""}, "1351": {"label": "Easy", "title": "Count Negative Numbers in a Sorted Matrix", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.752, "total_accepted": 156000.0, "total_submissions": 207400.0, "testcase_example": "'[[4,3,2,-1],[3,2,1,-1],[1,1,-1,-2],[-1,-1,-2,-3]]'", "body": "Given a m x n matrix grid which is sorted in non-increasing order both row-wise and column-wise, return the number of negative numbers in grid.", "examples": [{"full_text": "Example 1:\nInput: grid = [[4,3,2,-1],[3,2,1,-1],[1,1,-1,-2],[-1,-1,-2,-3]]\nOutput: 8\nExplanation: There are 8 negatives number in the matrix.", "input": "Input: grid = [[4,3,2,-1],[3,2,1,-1],[1,1,-1,-2],[-1,-1,-2,-3]]", "output": "Output: 8", "explanation": "Explanation: There are 8 negatives number in the matrix."}, {"full_text": "Example 2:\nInput: grid = [[3,2],[1,0]]\nOutput: 0", "input": "Input: grid = [[3,2],[1,0]]", "output": "Output: 0", "explanation": ""}], "constraints": "Constraints:\nm == grid.length\nn == grid[i].length\n1 <= m, n <= 100\n-100 <= grid[i][j] <= 100\nFollow up: Could you find an O(n + m) solution?", "notes": ""}, "1346": {"label": "Easy", "title": "Check If N and Its Double Exist", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3546, "total_accepted": 171200.0, "total_submissions": 482800.0, "testcase_example": "'[10,2,5,3]'", "body": "Given an array arr of integers, check if there exists two integers N and M such that N is the double of M ( i.e. N = 2 * M).\nMore formally check if there exists\ntwo indices i and j such that :\ni != j\n0 <= i, j < arr.length\narr[i] == 2 * arr[j]", "examples": [{"full_text": "Example 1:\nInput: arr = [10,2,5,3]\nOutput: true\nExplanation: N = 10 is the double of M = 5,that is, 10 = 2 * 5.", "input": "Input: arr = [10,2,5,3]", "output": "Output: true", "explanation": "Explanation: N = 10 is the double of M = 5,that is, 10 = 2 * 5."}, {"full_text": "Example 2:\nInput: arr = [7,1,14,11]\nOutput: true\nExplanation: N = 14 is the double of M = 7,that is, 14 = 2 * 7.", "input": "Input: arr = [7,1,14,11]", "output": "Output: true", "explanation": "Explanation: N = 14 is the double of M = 7,that is, 14 = 2 * 7."}, {"full_text": "Example 3:\nInput: arr = [3,1,7,11]\nOutput: false\nExplanation: In this case does not exist N and M, such that N = 2 * M.", "input": "Input: arr = [3,1,7,11]", "output": "Output: false", "explanation": "Explanation: In this case does not exist N and M, such that N = 2 * M."}], "constraints": "Constraints:\n2 <= arr.length <= 500\n-10^3 <= arr[i] <= 10^3", "notes": ""}, "1342": {"label": "Easy", "title": "Number of Steps to Reduce a Number to Zero", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.8569, "total_accepted": 238300.0, "total_submissions": 278100.0, "testcase_example": "'14'", "body": "Given an integer num, return the number of steps to reduce it to zero.\nIn one step, if the current number is even, you have to divide it by 2, otherwise, you have to subtract 1 from it.", "examples": [{"full_text": "Example 1:\nInput: num = 14\nOutput: 6\nExplanation:\nStep 1) 14 is even; divide by 2 and obtain 7.\nStep 2) 7 is odd; subtract 1 and obtain 6.\nStep 3) 6 is even; divide by 2 and obtain 3.\nStep 4) 3 is odd; subtract 1 and obtain 2.\nStep 5) 2 is even; divide by 2 and obtain 1.\nStep 6) 1 is odd; subtract 1 and obtain 0.", "input": "Input: num = 14", "output": "Output: 6", "explanation": "Explanation:\nStep 1) 14 is even; divide by 2 and obtain 7.\nStep 2) 7 is odd; subtract 1 and obtain 6.\nStep 3) 6 is even; divide by 2 and obtain 3.\nStep 4) 3 is odd; subtract 1 and obtain 2.\nStep 5) 2 is even; divide by 2 and obtain 1.\nStep 6) 1 is odd; subtract 1 and obtain 0."}, {"full_text": "Example 2:\nInput: num = 8\nOutput: 4\nExplanation:\nStep 1) 8 is even; divide by 2 and obtain 4.\nStep 2) 4 is even; divide by 2 and obtain 2.\nStep 3) 2 is even; divide by 2 and obtain 1.\nStep 4) 1 is odd; subtract 1 and obtain 0.", "input": "Input: num = 8", "output": "Output: 4", "explanation": "Explanation:\nStep 1) 8 is even; divide by 2 and obtain 4.\nStep 2) 4 is even; divide by 2 and obtain 2.\nStep 3) 2 is even; divide by 2 and obtain 1.\nStep 4) 1 is odd; subtract 1 and obtain 0."}, {"full_text": "Example 3:\nInput: num = 123\nOutput: 12", "input": "Input: num = 123", "output": "Output: 12", "explanation": ""}], "constraints": "Constraints:\n0 <= num <= 10^6", "notes": ""}, "1337": {"label": "Easy", "title": "The K Weakest Rows in a Matrix", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7217, "total_accepted": 102400.0, "total_submissions": 141800.0, "testcase_example": "'[[1,1,0,0,0],[1,1,1,1,0],[1,0,0,0,0],[1,1,0,0,0],[1,1,1,1,1]]\\n3'", "body": "You are given an m x n binary matrix mat of 1's (representing soldiers) and 0's (representing civilians). The soldiers are positioned in front of the civilians. That is, all the 1's will appear to the left of all the 0's in each row.\nA row i is weaker than a row j if one of the following is true:\nThe number of soldiers in row i is less than the number of soldiers in row j.\nBoth rows have the same number of soldiers and i < j.\nReturn the indices of the k weakest rows in the matrix ordered from weakest to strongest.", "examples": [{"full_text": "Example 1:\nInput: mat =\n[[1,1,0,0,0],\n[1,1,1,1,0],\n[1,0,0,0,0],\n[1,1,0,0,0],\n[1,1,1,1,1]],\nk = 3\nOutput: [2,0,3]\nExplanation:\nThe number of soldiers in each row is:\n- Row 0: 2\n- Row 1: 4\n- Row 2: 1\n- Row 3: 2\n- Row 4: 5\nThe rows ordered from weakest to strongest are [2,0,3,1,4].", "input": "Input: mat =\n[[1,1,0,0,0],\n[1,1,1,1,0],\n[1,0,0,0,0],\n[1,1,0,0,0],\n[1,1,1,1,1]],\nk = 3", "output": "Output: [2,0,3]", "explanation": "Explanation:\nThe number of soldiers in each row is:\n- Row 0: 2\n- Row 1: 4\n- Row 2: 1\n- Row 3: 2\n- Row 4: 5\nThe rows ordered from weakest to strongest are [2,0,3,1,4]."}, {"full_text": "Example 2:\nInput: mat =\n[[1,0,0,0],\n[1,1,1,1],\n[1,0,0,0],\n[1,0,0,0]],\nk = 2\nOutput: [0,2]\nExplanation:\nThe number of soldiers in each row is:\n- Row 0: 1\n- Row 1: 4\n- Row 2: 1\n- Row 3: 1\nThe rows ordered from weakest to strongest are [0,2,3,1].", "input": "Input: mat =\n[[1,0,0,0],\n[1,1,1,1],\n[1,0,0,0],\n[1,0,0,0]],\nk = 2", "output": "Output: [0,2]", "explanation": "Explanation:\nThe number of soldiers in each row is:\n- Row 0: 1\n- Row 1: 4\n- Row 2: 1\n- Row 3: 1\nThe rows ordered from weakest to strongest are [0,2,3,1]."}], "constraints": "Constraints:\nm == mat.length\nn == mat[i].length\n2 <= n, m <= 100\n1 <= k <= m\nmatrix[i][j] is either 0 or 1.", "notes": ""}, "1332": {"label": "Easy", "title": "Remove Palindromic Subsequences", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6938, "total_accepted": 52400.0, "total_submissions": 75500.0, "testcase_example": "'\"ababa\"'", "body": "You are given a string s consisting only of letters 'a' and 'b'. In a single step you can remove one palindromic subsequence from s.\nReturn the minimum number of steps to make the given string empty.\nA string is a subsequence of a given string if it is generated by deleting some characters of a given string without changing its order. Note that a subsequence does not necessarily need to be contiguous.\nA string is called palindrome if is one that reads the same backward as well as forward.", "examples": [{"full_text": "Example 1:\nInput: s = \"ababa\"\nOutput: 1\nExplanation: s is already a palindrome, so its entirety can be removed in a single step.", "input": "Input: s = \"ababa\"", "output": "Output: 1", "explanation": "Explanation: s is already a palindrome, so its entirety can be removed in a single step."}, {"full_text": "Example 2:\nInput: s = \"abb\"\nOutput: 2\nExplanation: \"abb\" -> \"bb\" -> \"\".\nRemove palindromic subsequence \"a\" then \"bb\".", "input": "Input: s = \"abb\"", "output": "Output: 2", "explanation": "Explanation: \"abb\" -> \"bb\" -> \"\".\nRemove palindromic subsequence \"a\" then \"bb\"."}, {"full_text": "Example 3:\nInput: s = \"baabb\"\nOutput: 2\nExplanation: \"baabb\" -> \"b\" -> \"\".\nRemove palindromic subsequence \"baab\" then \"b\".", "input": "Input: s = \"baabb\"", "output": "Output: 2", "explanation": "Explanation: \"baabb\" -> \"b\" -> \"\".\nRemove palindromic subsequence \"baab\" then \"b\"."}], "constraints": "Constraints:\n1 <= s.length <= 1000\ns[i] is either 'a' or 'b'.", "notes": ""}, "1331": {"label": "Easy", "title": "Rank Transform of an Array", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5837, "total_accepted": 53100.0, "total_submissions": 90900.0, "testcase_example": "'[40,10,20,30]'", "body": "Given an array of integers\narr, replace each element with its rank.\nThe rank represents how large the element is. The rank has the following rules:\nRank is an integer starting from 1.\nThe larger the element, the larger the rank. If two elements are equal, their rank must be the same.\nRank should be as small as possible.", "examples": [{"full_text": "Example 1:\nInput: arr = [40,10,20,30]\nOutput: [4,1,2,3]\nExplanation: 40 is the largest element. 10 is the smallest. 20 is the second smallest. 30 is the third smallest.", "input": "Input: arr = [40,10,20,30]", "output": "Output: [4,1,2,3]", "explanation": "Explanation: 40 is the largest element. 10 is the smallest. 20 is the second smallest. 30 is the third smallest."}, {"full_text": "Example 2:\nInput: arr = [100,100,100]\nOutput: [1,1,1]\nExplanation: Same elements share the same rank.", "input": "Input: arr = [100,100,100]", "output": "Output: [1,1,1]", "explanation": "Explanation: Same elements share the same rank."}, {"full_text": "Example 3:\nInput: arr = [37,12,28,9,100,56,80,5,12]\nOutput: [5,3,4,2,8,6,7,1,3]", "input": "Input: arr = [37,12,28,9,100,56,80,5,12]", "output": "Output: [5,3,4,2,8,6,7,1,3]", "explanation": ""}], "constraints": "Constraints:\n0 <= arr.length <= 10^5\n-10^9\n<= arr[i] <= 10^9", "notes": ""}, "1323": {"label": "Easy", "title": "Maximum 69 Number", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7873, "total_accepted": 103900.0, "total_submissions": 132000.0, "testcase_example": "'9669'", "body": "You are given a positive integer num consisting only of digits 6 and 9.\nReturn the maximum number you can get by changing at most one digit (6 becomes 9, and 9 becomes 6).", "examples": [{"full_text": "Example 1:\nInput: num = 9669\nOutput: 9969\nExplanation:\nChanging the first digit results in 6669.\nChanging the second digit results in 9969.\nChanging the third digit results in 9699.\nChanging the fourth digit results in 9666.\nThe maximum number is 9969.", "input": "Input: num = 9669", "output": "Output: 9969", "explanation": "Explanation:\nChanging the first digit results in 6669.\nChanging the second digit results in 9969.\nChanging the third digit results in 9699.\nChanging the fourth digit results in 9666.\nThe maximum number is 9969."}, {"full_text": "Example 2:\nInput: num = 9996\nOutput: 9999\nExplanation: Changing the last digit 6 to 9 results in the maximum number.", "input": "Input: num = 9996", "output": "Output: 9999", "explanation": "Explanation: Changing the last digit 6 to 9 results in the maximum number."}, {"full_text": "Example 3:\nInput: num = 9999\nOutput: 9999\nExplanation: It is better not to apply any change.", "input": "Input: num = 9999", "output": "Output: 9999", "explanation": "Explanation: It is better not to apply any change."}], "constraints": "Constraints:\n1 <= num <= 10^4\nnum\nconsists of only 6 and 9 digits.", "notes": ""}, "1317": {"label": "Easy", "title": "Convert Integer to the Sum of Two No-Zero Integers", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5722, "total_accepted": 28600.0, "total_submissions": 49900.0, "testcase_example": "'2'", "body": "No-Zero integer is a positive integer that does not contain any 0 in its decimal representation.\nGiven an integer n, return a list of two integers [A, B] where:\nA and B are No-Zero integers.\nA + B = n\nThe test cases are generated so that there is at least one valid solution. If there are many valid solutions you can return any of them.", "examples": [{"full_text": "Example 1:\nInput: n = 2\nOutput: [1,1]\nExplanation: A = 1, B = 1. A + B = n and both A and B do not contain any 0 in their decimal representation.", "input": "Input: n = 2", "output": "Output: [1,1]", "explanation": "Explanation: A = 1, B = 1. A + B = n and both A and B do not contain any 0 in their decimal representation."}, {"full_text": "Example 2:\nInput: n = 11\nOutput: [2,9]", "input": "Input: n = 11", "output": "Output: [2,9]", "explanation": ""}], "constraints": "Constraints:\n2 <= n <= 10^4", "notes": ""}, "1313": {"label": "Easy", "title": "Decompress Run-Length Encoded List", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.8582, "total_accepted": 170600.0, "total_submissions": 198800.0, "testcase_example": "'[1,2,3,4]'", "body": "We are given a list nums of integers representing a list compressed with run-length encoding.\nConsider each adjacent pair\nof elements [freq, val] = [nums[2*i], nums[2*i+1]]\n(with i >= 0).\nFor each such pair, there are freq elements with value val concatenated in a sublist. Concatenate all the sublists from left to right to generate the decompressed list.\nReturn the decompressed list.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,2,3,4]\nOutput: [2,4,4,4]\nExplanation: The first pair [1,2] means we have freq = 1 and val = 2 so we generate the array [2].\nThe second pair [3,4] means we have freq = 3 and val = 4 so we generate [4,4,4].\nAt the end the concatenation [2] + [4,4,4] is [2,4,4,4].", "input": "Input: nums = [1,2,3,4]", "output": "Output: [2,4,4,4]", "explanation": "Explanation: The first pair [1,2] means we have freq = 1 and val = 2 so we generate the array [2].\nThe second pair [3,4] means we have freq = 3 and val = 4 so we generate [4,4,4].\nAt the end the concatenation [2] + [4,4,4] is [2,4,4,4]."}, {"full_text": "Example 2:\nInput: nums = [1,1,2,3]\nOutput: [1,3,3]", "input": "Input: nums = [1,1,2,3]", "output": "Output: [1,3,3]", "explanation": ""}], "constraints": "Constraints:\n2 <= nums.length <= 100\nnums.length % 2 == 0\n1 <= nums[i] <= 100", "notes": ""}, "1309": {"label": "Easy", "title": "Decrypt String from Alphabet to Integer Mapping", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7811, "total_accepted": 69000.0, "total_submissions": 88300.0, "testcase_example": "'\"10#11#12\"'", "body": "You are given a string s formed by digits and '#'. We want to map s to English lowercase characters as follows:\nCharacters ('a' to 'i') are represented by ('1' to '9') respectively.\nCharacters ('j' to 'z') are represented by ('10#' to '26#') respectively.\nReturn the string formed after mapping.\nThe test cases are generated so that a unique mapping will always exist.", "examples": [{"full_text": "Example 1:\nInput: s = \"10#11#12\"\nOutput: \"jkab\"\nExplanation: \"j\" -> \"10#\" , \"k\" -> \"11#\" , \"a\" -> \"1\" , \"b\" -> \"2\".", "input": "Input: s = \"10#11#12\"", "output": "Output: \"jkab\"", "explanation": "Explanation: \"j\" -> \"10#\" , \"k\" -> \"11#\" , \"a\" -> \"1\" , \"b\" -> \"2\"."}, {"full_text": "Example 2:\nInput: s = \"1326#\"\nOutput: \"acz\"", "input": "Input: s = \"1326#\"", "output": "Output: \"acz\"", "explanation": ""}], "constraints": "Constraints:\n1 <= s.length <= 1000\ns consists of digits and the '#' letter.\ns will be a valid string such that mapping is always possible.", "notes": ""}, "1304": {"label": "Easy", "title": "Find N Unique Integers Sum up to Zero", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7687, "total_accepted": 125600.0, "total_submissions": 163300.0, "testcase_example": "'5'", "body": "Given an integer n, return any array containing n unique integers such that they add up to 0.", "examples": [{"full_text": "Example 1:\nInput: n = 5\nOutput: [-7,-1,1,3,4]\nExplanation: These arrays also are accepted [-5,-1,1,2,3] , [-3,-1,2,-2,4].", "input": "Input: n = 5", "output": "Output: [-7,-1,1,3,4]", "explanation": "Explanation: These arrays also are accepted [-5,-1,1,2,3] , [-3,-1,2,-2,4]."}, {"full_text": "Example 2:\nInput: n = 3\nOutput: [-1,0,1]", "input": "Input: n = 3", "output": "Output: [-1,0,1]", "explanation": ""}, {"full_text": "Example 3:\nInput: n = 1\nOutput: [0]", "input": "Input: n = 1", "output": "Output: [0]", "explanation": ""}], "constraints": "Constraints:\n1 <= n <= 1000", "notes": ""}, "1299": {"label": "Easy", "title": "Replace Elements with Greatest Element on Right Side", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7439, "total_accepted": 189600.0, "total_submissions": 254900.0, "testcase_example": "'[17,18,5,4,6,1]'", "body": "Given an array arr,\nreplace every element in that array with the greatest element among the elements to its\nright, and replace the last element with -1.\nAfter doing so, return the array.", "examples": [{"full_text": "Example 1:\nInput: arr = [17,18,5,4,6,1]\nOutput: [18,6,6,6,1,-1]\nExplanation:\n- index 0 --> the greatest element to the right of index 0 is index 1 (18).\n- index 1 --> the greatest element to the right of index 1 is index 4 (6).\n- index 2 --> the greatest element to the right of index 2 is index 4 (6).\n- index 3 --> the greatest element to the right of index 3 is index 4 (6).\n- index 4 --> the greatest element to the right of index 4 is index 5 (1).\n- index 5 --> there are no elements to the right of index 5, so we put -1.", "input": "Input: arr = [17,18,5,4,6,1]", "output": "Output: [18,6,6,6,1,-1]", "explanation": "Explanation:\n- index 0 --> the greatest element to the right of index 0 is index 1 (18).\n- index 1 --> the greatest element to the right of index 1 is index 4 (6).\n- index 2 --> the greatest element to the right of index 2 is index 4 (6).\n- index 3 --> the greatest element to the right of index 3 is index 4 (6).\n- index 4 --> the greatest element to the right of index 4 is index 5 (1).\n- index 5 --> there are no elements to the right of index 5, so we put -1."}, {"full_text": "Example 2:\nInput: arr = [400]\nOutput: [-1]\nExplanation: There are no elements to the right of index 0.", "input": "Input: arr = [400]", "output": "Output: [-1]", "explanation": "Explanation: There are no elements to the right of index 0."}], "constraints": "Constraints:\n1 <= arr.length <= 10^4\n1 <= arr[i] <= 10^5", "notes": ""}, "1295": {"label": "Easy", "title": "Find Numbers with Even Number of Digits", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7726000000000001, "total_accepted": 397500.0, "total_submissions": 514500.0, "testcase_example": "'[12,345,2,6,7896]'", "body": "Given an array nums of integers, return how many of them contain an even number of digits.", "examples": [{"full_text": "Example 1:\nInput: nums = [12,345,2,6,7896]\nOutput: 2\nExplanation:\n12 contains 2 digits (even number of digits).\n345 contains 3 digits (odd number of digits).\n2 contains 1 digit (odd number of digits).\n6 contains 1 digit (odd number of digits).\n7896 contains 4 digits (even number of digits).\nTherefore only 12 and 7896 contain an even number of digits.", "input": "Input: nums = [12,345,2,6,7896]", "output": "Output: 2", "explanation": "Explanation:\n12 contains 2 digits (even number of digits).\n345 contains 3 digits (odd number of digits).\n2 contains 1 digit (odd number of digits).\n6 contains 1 digit (odd number of digits).\n7896 contains 4 digits (even number of digits).\nTherefore only 12 and 7896 contain an even number of digits."}, {"full_text": "Example 2:\nInput: nums = [555,901,482,1771]\nOutput: 1\nExplanation:\nOnly 1771 contains an even number of digits.", "input": "Input: nums = [555,901,482,1771]", "output": "Output: 1", "explanation": "Explanation:\nOnly 1771 contains an even number of digits."}], "constraints": "Constraints:\n1 <= nums.length <= 500\n1 <= nums[i] <= 10^5", "notes": ""}, "1290": {"label": "Easy", "title": "Convert Binary Number in a Linked List to Integer", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.8267, "total_accepted": 264700.0, "total_submissions": 320200.0, "testcase_example": "'[1,0,1]'", "body": "Given head which is a reference node to a singly-linked list. The value of each node in the linked list is either 0 or 1. The linked list holds the binary representation of a number.\nReturn the decimal value of the number in the linked list.", "examples": [{"full_text": "Example 1:\nInput: head = [1,0,1]\nOutput: 5\nExplanation: (101) in base 2 = (5) in base 10", "input": "Input: head = [1,0,1]", "output": "Output: 5", "explanation": "Explanation: (101) in base 2 = (5) in base 10"}, {"full_text": "Example 2:\nInput: head = [0]\nOutput: 0", "input": "Input: head = [0]", "output": "Output: 0", "explanation": ""}], "constraints": "Constraints:\nThe Linked List is not empty.\nNumber of nodes\nwill not exceed 30.\nEach node's value is either\n0 or 1.", "notes": ""}, "1287": {"label": "Easy", "title": "Element Appearing More Than 25% In Sorted Array", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5952000000000001, "total_accepted": 58800.0, "total_submissions": 98800.0, "testcase_example": "'[1,2,2,6,6,6,6,7,10]'", "body": "Given an integer array sorted in non-decreasing order, there is exactly one integer in the array that occurs more than 25% of the time, return that integer.", "examples": [{"full_text": "Example 1:\nInput: arr = [1,2,2,6,6,6,6,7,10]\nOutput: 6", "input": "Input: arr = [1,2,2,6,6,6,6,7,10]", "output": "Output: 6", "explanation": ""}, {"full_text": "Example 2:\nInput: arr = [1,1]\nOutput: 1", "input": "Input: arr = [1,1]", "output": "Output: 1", "explanation": ""}], "constraints": "Constraints:\n1 <= arr.length <= 10^4\n0 <= arr[i] <= 10^5", "notes": ""}, "1281": {"label": "Easy", "title": "Subtract the Product and Sum of Digits of an Integer", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.8590000000000001, "total_accepted": 192500.0, "total_submissions": 224100.0, "testcase_example": "'234'", "body": "Given an integer number n, return the difference between the product of its digits and the sum of its digits.", "examples": [{"full_text": "Example 1:\nInput: n = 234\nOutput: 15\nExplanation:\nProduct of digits = 2 * 3 * 4 = 24\nSum of digits = 2 + 3 + 4 = 9\nResult = 24 - 9 = 15", "input": "Input: n = 234", "output": "Output: 15", "explanation": "Explanation:\nProduct of digits = 2 * 3 * 4 = 24\nSum of digits = 2 + 3 + 4 = 9\nResult = 24 - 9 = 15"}, {"full_text": "Example 2:\nInput: n = 4421\nOutput: 21\nExplanation:\nProduct of digits = 4 * 4 * 2 * 1 = 32\nSum of digits = 4 + 4 + 2 + 1 = 11\nResult = 32 - 11 = 21", "input": "Input: n = 4421", "output": "Output: 21", "explanation": "Explanation:\nProduct of digits = 4 * 4 * 2 * 1 = 32\nSum of digits = 4 + 4 + 2 + 1 = 11\nResult = 32 - 11 = 21"}], "constraints": "Constraints:\n1 <= n <= 10^5", "notes": ""}, "1275": {"label": "Easy", "title": "Find Winner on a Tic Tac Toe Game", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.552, "total_accepted": 64500.0, "total_submissions": 116800.0, "testcase_example": "'[[0,0],[2,0],[1,1],[2,1],[2,2]]'", "body": "Tic-tac-toe is played by two players A and B on a 3 x 3 grid. The rules of Tic-Tac-Toe are:\nPlayers take turns placing characters into empty squares ' '.\nThe first player A always places 'X' characters, while the second player B always places 'O' characters.\n'X' and 'O' characters are always placed into empty squares, never on filled ones.\nThe game ends when there are three of the same (non-empty) character filling any row, column, or diagonal.\nThe game also ends if all squares are non-empty.\nNo more moves can be played if the game is over.\nGiven a 2D integer array moves where moves[i] = [rowi, coli] indicates that the i^th move will be played on grid[rowi][coli]. return the winner of the game if it exists (A or B). In case the game ends in a draw return \"Draw\". If there are still movements to play return \"Pending\".\nYou can assume that moves is valid (i.e., it follows the rules of Tic-Tac-Toe), the grid is initially empty, and A will play first.", "examples": [{"full_text": "Example 1:\nInput: moves = [[0,0],[2,0],[1,1],[2,1],[2,2]]\nOutput: \"A\"\nExplanation: A wins, they always play first.", "input": "Input: moves = [[0,0],[2,0],[1,1],[2,1],[2,2]]", "output": "Output: \"A\"", "explanation": "Explanation: A wins, they always play first."}, {"full_text": "Example 2:\nInput: moves = [[0,0],[1,1],[0,1],[0,2],[1,0],[2,0]]\nOutput: \"B\"\nExplanation: B wins.", "input": "Input: moves = [[0,0],[1,1],[0,1],[0,2],[1,0],[2,0]]", "output": "Output: \"B\"", "explanation": "Explanation: B wins."}, {"full_text": "Example 3:\nInput: moves = [[0,0],[1,1],[2,0],[1,0],[1,2],[2,1],[0,1],[0,2],[2,2]]\nOutput: \"Draw\"\nExplanation: The game ends in a draw since there are no moves to make.", "input": "Input: moves = [[0,0],[1,1],[2,0],[1,0],[1,2],[2,1],[0,1],[0,2],[2,2]]", "output": "Output: \"Draw\"", "explanation": "Explanation: The game ends in a draw since there are no moves to make."}], "constraints": "Constraints:\n1 <= moves.length <= 9\nmoves[i].length == 2\n0 <= rowi, coli <= 2\nThere are no repeated elements on moves.\nmoves follow the rules of tic tac toe.", "notes": ""}, "1266": {"label": "Easy", "title": "Minimum Time Visiting All Points", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7911, "total_accepted": 110100.0, "total_submissions": 139200.0, "testcase_example": "'[[1,1],[3,4],[-1,0]]'", "body": "On a 2D plane, there are n points with integer coordinates points[i] = [xi, yi]. Return the minimum time in seconds to visit all the points in the order given by points.\nYou can move according to these rules:\nIn 1 second, you can either:\n\nmove vertically by one\nunit,\nmove horizontally by one unit, or\nmove diagonally sqrt(2) units (in other words, move one unit vertically then one unit horizontally in 1 second).\n\n\nYou have to visit the points in the same order as they appear in the array.\nYou are allowed to pass through points that appear later in the order, but these do not count as visits.", "examples": [{"full_text": "Example 1:\nInput: points = [[1,1],[3,4],[-1,0]]\nOutput: 7\nExplanation: One optimal path is [1,1] -> [2,2] -> [3,3] -> [3,4] -> [2,3] -> [1,2] -> [0,1] -> [-1,0]\nTime from [1,1] to [3,4] = 3 seconds\nTime from [3,4] to [-1,0] = 4 seconds\nTotal time = 7 seconds", "input": "Input: points = [[1,1],[3,4],[-1,0]]", "output": "Output: 7", "explanation": "Explanation: One optimal path is [1,1] -> [2,2] -> [3,3] -> [3,4] -> [2,3] -> [1,2] -> [0,1] -> [-1,0]\nTime from [1,1] to [3,4] = 3 seconds\nTime from [3,4] to [-1,0] = 4 seconds\nTotal time = 7 seconds"}, {"full_text": "Example 2:\nInput: points = [[3,2],[-2,2]]\nOutput: 5", "input": "Input: points = [[3,2],[-2,2]]", "output": "Output: 5", "explanation": ""}], "constraints": "Constraints:\npoints.length == n\n1 <= n\n<= 100\npoints[i].length == 2\n-1000\n<= points[i][0], points[i][1]\n<= 1000", "notes": ""}, "1260": {"label": "Easy", "title": "Shift 2D Grid", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6254, "total_accepted": 32700.000000000004, "total_submissions": 52300.0, "testcase_example": "'[[1,2,3],[4,5,6],[7,8,9]]\\n1'", "body": "Given a 2D grid of size m x n\nand an integer k. You need to shift the grid\nk times.\nIn one shift operation:\nElement at grid[i][j] moves to grid[i][j + 1].\nElement at grid[i][n - 1] moves to grid[i + 1][0].\nElement at grid[m\n- 1][n - 1] moves to grid[0][0].\nReturn the 2D grid after applying shift operation k times.", "examples": [{"full_text": "Example 1:\nInput: grid = [[1,2,3],[4,5,6],[7,8,9]], k = 1\nOutput: [[9,1,2],[3,4,5],[6,7,8]]", "input": "Input: grid = [[1,2,3],[4,5,6],[7,8,9]], k = 1", "output": "Output: [[9,1,2],[3,4,5],[6,7,8]]", "explanation": ""}, {"full_text": "Example 2:\nInput: grid = [[3,8,1,9],[19,7,2,5],[4,6,11,10],[12,0,21,13]], k = 4\nOutput: [[12,0,21,13],[3,8,1,9],[19,7,2,5],[4,6,11,10]]", "input": "Input: grid = [[3,8,1,9],[19,7,2,5],[4,6,11,10],[12,0,21,13]], k = 4", "output": "Output: [[12,0,21,13],[3,8,1,9],[19,7,2,5],[4,6,11,10]]", "explanation": ""}, {"full_text": "Example 3:\nInput: grid = [[1,2,3],[4,5,6],[7,8,9]], k = 9\nOutput: [[1,2,3],[4,5,6],[7,8,9]]", "input": "Input: grid = [[1,2,3],[4,5,6],[7,8,9]], k = 9", "output": "Output: [[1,2,3],[4,5,6],[7,8,9]]", "explanation": ""}], "constraints": "Constraints:\nm ==\ngrid.length\nn ==\ngrid[i].length\n1 <= m <= 50\n1 <= n <= 50\n-1000 <= grid[i][j] <= 1000\n0 <= k <= 100", "notes": ""}, "1252": {"label": "Easy", "title": "Cells with Odd Values in a Matrix", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7854000000000001, "total_accepted": 76000.0, "total_submissions": 96700.0, "testcase_example": "'2\\n3\\n[[0,1],[1,1]]'", "body": "There is an m x n matrix that is initialized to all 0's. There is also a 2D array indices where each indices[i] = [ri, ci] represents a 0-indexed location to perform some increment operations on the matrix.\nFor each location indices[i], do both of the following:\nIncrement all the cells on row ri.\nIncrement all the cells on column ci.\nGiven m, n, and indices, return the number of odd-valued cells in the matrix after applying the increment to all locations in indices.", "examples": [{"full_text": "Example 1:\nInput: m = 2, n = 3, indices = [[0,1],[1,1]]\nOutput: 6\nExplanation: Initial matrix = [[0,0,0],[0,0,0]].\nAfter applying first increment it becomes [[1,2,1],[0,1,0]].\nThe final matrix is [[1,3,1],[1,3,1]], which contains 6 odd numbers.", "input": "Input: m = 2, n = 3, indices = [[0,1],[1,1]]", "output": "Output: 6", "explanation": "Explanation: Initial matrix = [[0,0,0],[0,0,0]].\nAfter applying first increment it becomes [[1,2,1],[0,1,0]].\nThe final matrix is [[1,3,1],[1,3,1]], which contains 6 odd numbers."}, {"full_text": "Example 2:\nInput: m = 2, n = 2, indices = [[1,1],[0,0]]\nOutput: 0\nExplanation: Final matrix = [[2,2],[2,2]]. There are no odd numbers in the final matrix.", "input": "Input: m = 2, n = 2, indices = [[1,1],[0,0]]", "output": "Output: 0", "explanation": "Explanation: Final matrix = [[2,2],[2,2]]. There are no odd numbers in the final matrix."}], "constraints": "Constraints:\n1 <= m, n <= 50\n1 <= indices.length <= 100\n0 <= ri < m\n0 <= ci < n\nFollow up: Could you solve this in O(n + m + indices.length) time with only O(n + m) extra space?", "notes": ""}, "1232": {"label": "Easy", "title": "Check If It Is a Straight Line", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4215, "total_accepted": 103500.0, "total_submissions": 245500.0, "testcase_example": "'[[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]]'", "body": "You are given an array\ncoordinates, coordinates[i] = [x, y], where [x, y] represents the coordinate of a point. Check if these points\nmake a straight line in the XY plane.", "examples": [{"full_text": "Example 1:\nInput: coordinates = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]]\nOutput: true", "input": "Input: coordinates = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]]", "output": "Output: true", "explanation": ""}, {"full_text": "Example 2:\nInput: coordinates = [[1,1],[2,2],[3,4],[4,5],[5,6],[7,7]]\nOutput: false", "input": "Input: coordinates = [[1,1],[2,2],[3,4],[4,5],[5,6],[7,7]]", "output": "Output: false", "explanation": ""}], "constraints": "Constraints:\n2 <=\ncoordinates.length <= 1000\ncoordinates[i].length == 2\n-10^4 <=\ncoordinates[i][0],\ncoordinates[i][1] <= 10^4\ncoordinates\ncontains no duplicate point.", "notes": ""}, "1221": {"label": "Easy", "title": "Split a String in Balanced Strings", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.8473999999999999, "total_accepted": 188800.0, "total_submissions": 222800.0, "testcase_example": "'\"RLRRLLRLRL\"'", "body": "Balanced strings are those that have an equal quantity of 'L' and 'R' characters.\nGiven a balanced string s, split it in the maximum amount of balanced strings.\nReturn the maximum amount of split balanced strings.", "examples": [{"full_text": "Example 1:\nInput: s = \"RLRRLLRLRL\"\nOutput: 4\nExplanation: s can be split into \"RL\", \"RRLL\", \"RL\", \"RL\", each substring contains same number of 'L' and 'R'.", "input": "Input: s = \"RLRRLLRLRL\"", "output": "Output: 4", "explanation": "Explanation: s can be split into \"RL\", \"RRLL\", \"RL\", \"RL\", each substring contains same number of 'L' and 'R'."}, {"full_text": "Example 2:\nInput: s = \"RLLLLRRRLR\"\nOutput: 3\nExplanation: s can be split into \"RL\", \"LLLRRR\", \"LR\", each substring contains same number of 'L' and 'R'.", "input": "Input: s = \"RLLLLRRRLR\"", "output": "Output: 3", "explanation": "Explanation: s can be split into \"RL\", \"LLLRRR\", \"LR\", each substring contains same number of 'L' and 'R'."}, {"full_text": "Example 3:\nInput: s = \"LLLLRRRR\"\nOutput: 1\nExplanation: s can be split into \"LLLLRRRR\".", "input": "Input: s = \"LLLLRRRR\"", "output": "Output: 1", "explanation": "Explanation: s can be split into \"LLLLRRRR\"."}], "constraints": "Constraints:\n1 <= s.length <= 1000\ns[i] is either 'L' or 'R'.\ns is a balanced string.", "notes": ""}, "1217": {"label": "Easy", "title": "Minimum Cost to Move Chips to The Same Position", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7273999999999999, "total_accepted": 91500.0, "total_submissions": 125800.0, "testcase_example": "'[1,2,3]'", "body": "We have n chips, where the position of the i^th chip is position[i].\nWe need to move all the chips to the same position. In one step, we can change the position of the i^th chip from position[i] to:\nposition[i] + 2 or position[i] - 2 with cost = 0.\nposition[i] + 1 or position[i] - 1 with cost = 1.\nReturn the minimum cost needed to move all the chips to the same position.", "examples": [{"full_text": "Example 1:\nInput: position = [1,2,3]\nOutput: 1\nExplanation: First step: Move the chip at position 3 to position 1 with cost = 0.\nSecond step: Move the chip at position 2 to position 1 with cost = 1.\nTotal cost is 1.", "input": "Input: position = [1,2,3]", "output": "Output: 1", "explanation": "Explanation: First step: Move the chip at position 3 to position 1 with cost = 0.\nSecond step: Move the chip at position 2 to position 1 with cost = 1.\nTotal cost is 1."}, {"full_text": "Example 2:\nInput: position = [2,2,2,3,3]\nOutput: 2\nExplanation: We can move the two chips at position 3 to position 2. Each move has cost = 1. The total cost = 2.", "input": "Input: position = [2,2,2,3,3]", "output": "Output: 2", "explanation": "Explanation: We can move the two chips at position 3 to position 2. Each move has cost = 1. The total cost = 2."}, {"full_text": "Example 3:\nInput: position = [1,1000000000]\nOutput: 1", "input": "Input: position = [1,1000000000]", "output": "Output: 1", "explanation": ""}], "constraints": "Constraints:\n1 <= position.length <= 100\n1 <= position[i] <= 10^9", "notes": ""}, "1207": {"label": "Easy", "title": "Unique Number of Occurrences", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7206, "total_accepted": 113000.0, "total_submissions": 156900.0, "testcase_example": "'[1,2,2,1,1,3]'", "body": "Given an array of integers arr, return true if the number of occurrences of each value in the array is unique, or false otherwise.", "examples": [{"full_text": "Example 1:\nInput: arr = [1,2,2,1,1,3]\nOutput: true\nExplanation:\nThe value 1 has 3 occurrences, 2 has 2 and 3 has 1. No two values have the same number of occurrences.", "input": "Input: arr = [1,2,2,1,1,3]", "output": "Output: true", "explanation": "Explanation:\nThe value 1 has 3 occurrences, 2 has 2 and 3 has 1. No two values have the same number of occurrences."}, {"full_text": "Example 2:\nInput: arr = [1,2]\nOutput: false", "input": "Input: arr = [1,2]", "output": "Output: false", "explanation": ""}, {"full_text": "Example 3:\nInput: arr = [-3,0,1,-3,1,1,1,-3,10,0]\nOutput: true", "input": "Input: arr = [-3,0,1,-3,1,1,1,-3,10,0]", "output": "Output: true", "explanation": ""}], "constraints": "Constraints:\n1 <= arr.length\n<= 1000\n-1000 <= arr[i] <= 1000", "notes": ""}, "1200": {"label": "Easy", "title": "Minimum Absolute Difference", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6979000000000001, "total_accepted": 112900.0, "total_submissions": 161700.0, "testcase_example": "'[4,2,1,3]'", "body": "Given an array of distinct integers arr, find all pairs of elements with the minimum absolute difference of any two elements.\nReturn a list of pairs in ascending order(with respect to pairs), each pair [a, b] follows\na, b are from arr\na < b\nb - a equals to the minimum absolute difference of any two elements in arr", "examples": [{"full_text": "Example 1:\nInput: arr = [4,2,1,3]\nOutput: [[1,2],[2,3],[3,4]]\nExplanation: The minimum absolute difference is 1. List all pairs with difference equal to 1 in ascending order.", "input": "Input: arr = [4,2,1,3]", "output": "Output: [[1,2],[2,3],[3,4]]", "explanation": "Explanation: The minimum absolute difference is 1. List all pairs with difference equal to 1 in ascending order."}, {"full_text": "Example 2:\nInput: arr = [1,3,6,10,15]\nOutput: [[1,3]]", "input": "Input: arr = [1,3,6,10,15]", "output": "Output: [[1,3]]", "explanation": ""}, {"full_text": "Example 3:\nInput: arr = [3,8,-10,23,19,-4,-14,27]\nOutput: [[-14,-10],[19,23],[23,27]]", "input": "Input: arr = [3,8,-10,23,19,-4,-14,27]", "output": "Output: [[-14,-10],[19,23],[23,27]]", "explanation": ""}], "constraints": "Constraints:\n2 <= arr.length <= 10^5\n-10^6 <= arr[i] <= 10^6", "notes": ""}, "1189": {"label": "Easy", "title": "Maximum Number of Balloons", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6252, "total_accepted": 106300.0, "total_submissions": 170100.0, "testcase_example": "'\"nlaebolko\"'", "body": "Given a string text, you want to use the characters of text to form as many instances of the word \"balloon\" as possible.\nYou can use each character in text at most once. Return the maximum number of instances that can be formed.", "examples": [{"full_text": "Example 1:\nInput: text = \"nlaebolko\"\nOutput: 1", "input": "Input: text = \"nlaebolko\"", "output": "Output: 1", "explanation": ""}, {"full_text": "Example 2:\nInput: text = \"loonbalxballpoon\"\nOutput: 2", "input": "Input: text = \"loonbalxballpoon\"", "output": "Output: 2", "explanation": ""}, {"full_text": "Example 3:\nInput: text = \"leetcode\"\nOutput: 0", "input": "Input: text = \"leetcode\"", "output": "Output: 0", "explanation": ""}], "constraints": "Constraints:\n1 <= text.length <= 10^4\ntext consists of lower case English letters only.", "notes": ""}, "1185": {"label": "Easy", "title": "Day of the Week", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5876, "total_accepted": 41000.0, "total_submissions": 69900.0, "testcase_example": "'31\\n8\\n2019'", "body": "Given a date, return the corresponding day of the week for that date.\nThe input is given as three integers representing the day, month and year respectively.\nReturn the answer as one of the following values\n{\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"}.", "examples": [{"full_text": "Example 1:\nInput: day = 31, month = 8, year = 2019\nOutput: \"Saturday\"", "input": "Input: day = 31, month = 8, year = 2019", "output": "Output: \"Saturday\"", "explanation": ""}, {"full_text": "Example 2:\nInput: day = 18, month = 7, year = 1999\nOutput: \"Sunday\"", "input": "Input: day = 18, month = 7, year = 1999", "output": "Output: \"Sunday\"", "explanation": ""}, {"full_text": "Example 3:\nInput: day = 15, month = 8, year = 1993\nOutput: \"Sunday\"", "input": "Input: day = 15, month = 8, year = 1993", "output": "Output: \"Sunday\"", "explanation": ""}], "constraints": "Constraints:\nThe given dates are valid dates between the years 1971 and 2100.", "notes": ""}, "1184": {"label": "Easy", "title": "Distance Between Bus Stops", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5407, "total_accepted": 39700.0, "total_submissions": 73400.0, "testcase_example": "'[1,2,3,4]\\n0\\n1'", "body": "A bus\nhas n stops numbered from 0 to n - 1 that form\na circle. We know the distance between all pairs of neighboring stops where distance[i] is the distance between the stops number\ni and (i + 1) % n.\nThe bus goes along both directions\ni.e. clockwise and counterclockwise.\nReturn the shortest distance between the given\nstart\nand destination\nstops.", "examples": [{"full_text": "Example 1:\nInput: distance = [1,2,3,4], start = 0, destination = 1\nOutput: 1\nExplanation: Distance between 0 and 1 is 1 or 9, minimum is 1.", "input": "Input: distance = [1,2,3,4], start = 0, destination = 1", "output": "Output: 1", "explanation": "Explanation: Distance between 0 and 1 is 1 or 9, minimum is 1."}, {"full_text": "Example 2:\nInput: distance = [1,2,3,4], start = 0, destination = 2\nOutput: 3\nExplanation: Distance between 0 and 2 is 3 or 7, minimum is 3.", "input": "Input: distance = [1,2,3,4], start = 0, destination = 2", "output": "Output: 3", "explanation": "Explanation: Distance between 0 and 2 is 3 or 7, minimum is 3."}, {"full_text": "Example 3:\nInput: distance = [1,2,3,4], start = 0, destination = 3\nOutput: 4\nExplanation: Distance between 0 and 3 is 6 or 4, minimum is 4.", "input": "Input: distance = [1,2,3,4], start = 0, destination = 3", "output": "Output: 4", "explanation": "Explanation: Distance between 0 and 3 is 6 or 4, minimum is 4."}], "constraints": "Constraints:\n1 <= n\n<= 10^4\ndistance.length == n\n0 <= start, destination < n\n0 <= distance[i] <= 10^4", "notes": ""}, "1179": {"label": "Easy", "title": "Reformat Department Table", "tags": "database", "langs": "mssql,mysql,oraclesql", "related_topics": "database", "acceptance_ratio": 0.823, "total_accepted": 64200.0, "total_submissions": 78000.0, "testcase_example": "'{\"headers\":{\"Department\":[\"id\",\"revenue\",\"month\"]},\"rows\":{\"Department\":[[1,8000,\"Jan\"],[2,9000,\"Jan\"],[3,10000,\"Feb\"],[1,7000,\"Feb\"],[1,6000,\"Mar\"]]}}'", "body": "Table: Department\n+-------------+---------+\n| Column Name | Type |\n+-------------+---------+\n| id | int |\n| revenue | int |\n| month | varchar |\n+-------------+---------+\n(id, month) is the primary key of this table.\nThe table has information about the revenue of each department per month.\nThe month has values in [\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"].\nWrite an SQL query to reformat the table such that there is a department id column and a revenue column for each month.\nReturn the result table in any order.\nThe query result format is in the following example.", "examples": [{"full_text": "Example 1:\nInput:\nDepartment table:\n+------+---------+-------+\n| id | revenue | month |\n+------+---------+-------+\n| 1 | 8000 | Jan |\n| 2 | 9000 | Jan |\n| 3 | 10000 | Feb |\n| 1 | 7000 | Feb |\n| 1 | 6000 | Mar |\n+------+---------+-------+\nOutput:\n+------+-------------+-------------+-------------+-----+-------------+\n| id | Jan_Revenue | Feb_Revenue | Mar_Revenue | ... | Dec_Revenue |\n+------+-------------+-------------+-------------+-----+-------------+\n| 1 | 8000 | 7000 | 6000 | ... | null |\n| 2 | 9000 | null | null | ... | null |\n| 3 | null | 10000 | null | ... | null |\n+------+-------------+-------------+-------------+-----+-------------+\nExplanation: The revenue from Apr to Dec is null.\nNote that the result table has 13 columns (1 for the department id + 12 for the months).", "input": "Input:\nDepartment table:\n+------+---------+-------+\n| id | revenue | month |\n+------+---------+-------+\n| 1 | 8000 | Jan |\n| 2 | 9000 | Jan |\n| 3 | 10000 | Feb |\n| 1 | 7000 | Feb |\n| 1 | 6000 | Mar |\n+------+---------+-------+", "output": "Output:\n+------+-------------+-------------+-------------+-----+-------------+\n| id | Jan_Revenue | Feb_Revenue | Mar_Revenue | ... | Dec_Revenue |\n+------+-------------+-------------+-------------+-----+-------------+\n| 1 | 8000 | 7000 | 6000 | ... | null |\n| 2 | 9000 | null | null | ... | null |\n| 3 | null | 10000 | null | ... | null |\n+------+-------------+-------------+-------------+-----+-------------+", "explanation": "Explanation: The revenue from Apr to Dec is null.\nNote that the result table has 13 columns (1 for the department id + 12 for the months)."}], "constraints": "", "notes": ""}, "1175": {"label": "Easy", "title": "Prime Arrangements", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5252, "total_accepted": 19200.0, "total_submissions": 36500.0, "testcase_example": "'5'", "body": "Return the number of permutations of 1 to n so that prime numbers are at prime indices (1-indexed.)\n(Recall that an integer\nis prime if and only if it is greater than 1, and cannot be written as a product of two positive integers\nboth smaller than it.)\nSince the answer may be large, return the answer modulo 10^9 + 7.", "examples": [{"full_text": "Example 1:\nInput: n = 5\nOutput: 12\nExplanation: For example [1,2,5,4,3] is a valid permutation, but [5,2,3,4,1] is not because the prime number 5 is at index 1.", "input": "Input: n = 5", "output": "Output: 12", "explanation": "Explanation: For example [1,2,5,4,3] is a valid permutation, but [5,2,3,4,1] is not because the prime number 5 is at index 1."}, {"full_text": "Example 2:\nInput: n = 100\nOutput: 682289015", "input": "Input: n = 100", "output": "Output: 682289015", "explanation": ""}], "constraints": "Constraints:\n1 <= n <= 100", "notes": ""}, "1160": {"label": "Easy", "title": "Find Words That Can Be Formed by Characters", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6775, "total_accepted": 105900.0, "total_submissions": 156400.0, "testcase_example": "'[\"cat\",\"bt\",\"hat\",\"tree\"]\\n\"atach\"'", "body": "You are given an array of strings words and a string chars.\nA string is good if it can be formed by characters from chars (each character can only be used once).\nReturn the sum of lengths of all good strings in words.", "examples": [{"full_text": "Example 1:\nInput: words = [\"cat\",\"bt\",\"hat\",\"tree\"], chars = \"atach\"\nOutput: 6\nExplanation: The strings that can be formed are \"cat\" and \"hat\" so the answer is 3 + 3 = 6.", "input": "Input: words = [\"cat\",\"bt\",\"hat\",\"tree\"], chars = \"atach\"", "output": "Output: 6", "explanation": "Explanation: The strings that can be formed are \"cat\" and \"hat\" so the answer is 3 + 3 = 6."}, {"full_text": "Example 2:\nInput: words = [\"hello\",\"world\",\"leetcode\"], chars = \"welldonehoneyr\"\nOutput: 10\nExplanation: The strings that can be formed are \"hello\" and \"world\" so the answer is 5 + 5 = 10.", "input": "Input: words = [\"hello\",\"world\",\"leetcode\"], chars = \"welldonehoneyr\"", "output": "Output: 10", "explanation": "Explanation: The strings that can be formed are \"hello\" and \"world\" so the answer is 5 + 5 = 10."}], "constraints": "Constraints:\n1 <= words.length <= 1000\n1 <= words[i].length, chars.length <= 100\nwords[i] and chars consist of lowercase English letters.", "notes": ""}, "1154": {"label": "Easy", "title": "Day of the Year", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5108, "total_accepted": 31000.0, "total_submissions": 60800.0, "testcase_example": "'\"2019-01-09\"'", "body": "Given a string date representing a Gregorian calendar date formatted as YYYY-MM-DD, return the day number of the year.", "examples": [{"full_text": "Example 1:\nInput: date = \"2019-01-09\"\nOutput: 9\nExplanation: Given date is the 9th day of the year in 2019.", "input": "Input: date = \"2019-01-09\"", "output": "Output: 9", "explanation": "Explanation: Given date is the 9th day of the year in 2019."}, {"full_text": "Example 2:\nInput: date = \"2019-02-10\"\nOutput: 41", "input": "Input: date = \"2019-02-10\"", "output": "Output: 41", "explanation": ""}], "constraints": "Constraints:\ndate.length == 10\ndate[4] == date[7] == '-', and all other date[i]'s are digits\ndate represents a calendar date between Jan 1^st, 1900 and Dec 31^th, 2019.", "notes": ""}, "1137": {"label": "Easy", "title": "N-th Tribonacci Number", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6245, "total_accepted": 224400.0, "total_submissions": 359300.0, "testcase_example": "'4'", "body": "The Tribonacci sequence Tn is defined as follows:\nT0 = 0, T1 = 1, T2 = 1, and Tn+3 = Tn + Tn+1 + Tn+2 for n >= 0.\nGiven n, return the value of Tn.", "examples": [{"full_text": "Example 1:\nInput: n = 4\nOutput: 4\nExplanation:\nT_3 = 0 + 1 + 1 = 2\nT_4 = 1 + 1 + 2 = 4", "input": "Input: n = 4", "output": "Output: 4", "explanation": "Explanation:\nT_3 = 0 + 1 + 1 = 2\nT_4 = 1 + 1 + 2 = 4"}, {"full_text": "Example 2:\nInput: n = 25\nOutput: 1389537", "input": "Input: n = 25", "output": "Output: 1389537", "explanation": ""}], "constraints": "Constraints:\n0 <= n <= 37\nThe answer is guaranteed to fit within a 32-bit integer, ie. answer <= 2^31 - 1.", "notes": ""}, "1128": {"label": "Easy", "title": "Number of Equivalent Domino Pairs", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4612, "total_accepted": 44600.0, "total_submissions": 96800.0, "testcase_example": "'[[1,2],[2,1],[3,4],[5,6]]'", "body": "Given a list of dominoes, dominoes[i] = [a, b] is equivalent to dominoes[j] = [c, d] if and only if either (a == c and b == d), or (a == d and b == c) - that is, one domino can be rotated to be equal to another domino.\nReturn the number of pairs (i, j) for which 0 <= i < j < dominoes.length, and dominoes[i] is equivalent to dominoes[j].", "examples": [{"full_text": "Example 1:\nInput: dominoes = [[1,2],[2,1],[3,4],[5,6]]\nOutput: 1", "input": "Input: dominoes = [[1,2],[2,1],[3,4],[5,6]]", "output": "Output: 1", "explanation": ""}, {"full_text": "Example 2:\nInput: dominoes = [[1,2],[1,2],[1,1],[1,2],[2,2]]\nOutput: 3", "input": "Input: dominoes = [[1,2],[1,2],[1,1],[1,2],[2,2]]", "output": "Output: 3", "explanation": ""}], "constraints": "Constraints:\n1 <= dominoes.length <= 4 * 10^4\ndominoes[i].length == 2\n1 <= dominoes[i][j] <= 9", "notes": ""}, "1122": {"label": "Easy", "title": "Relative Sort Array", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6806, "total_accepted": 118400.0, "total_submissions": 173900.0, "testcase_example": "'[2,3,1,3,2,4,6,7,9,2,19]\\n[2,1,4,3,9,6]'", "body": "Given two arrays arr1 and arr2, the elements of arr2 are distinct, and all elements in arr2 are also in arr1.\nSort the elements of arr1 such that the relative ordering of items in arr1 are the same as in arr2. Elements that do not appear in arr2 should be placed at the end of arr1 in ascending order.", "examples": [{"full_text": "Example 1:\nInput: arr1 = [2,3,1,3,2,4,6,7,9,2,19], arr2 = [2,1,4,3,9,6]\nOutput: [2,2,2,1,4,3,3,9,6,7,19]", "input": "Input: arr1 = [2,3,1,3,2,4,6,7,9,2,19], arr2 = [2,1,4,3,9,6]", "output": "Output: [2,2,2,1,4,3,3,9,6,7,19]", "explanation": ""}, {"full_text": "Example 2:\nInput: arr1 = [28,6,22,8,44,17], arr2 = [22,28,8,6]\nOutput: [22,28,8,6,17,44]", "input": "Input: arr1 = [28,6,22,8,44,17], arr2 = [22,28,8,6]", "output": "Output: [22,28,8,6,17,44]", "explanation": ""}], "constraints": "Constraints:\n1 <= arr1.length, arr2.length <= 1000\n0 <= arr1[i], arr2[i] <= 1000\nAll the elements of arr2 are distinct.\nEach\narr2[i] is in arr1.", "notes": ""}, "1108": {"label": "Easy", "title": "Defanging an IP Address", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.8884000000000001, "total_accepted": 388100.0, "total_submissions": 436800.0, "testcase_example": "'\"1.1.1.1\"'", "body": "Given a valid (IPv4) IP address, return a defanged version of that IP address.\nA defanged\nIP address\nreplaces every period \".\" with \"[.]\".", "examples": [{"full_text": "Example 1:\nInput: address = \"1.1.1.1\"\nOutput: \"1[.]1[.]1[.]1\"", "input": "Input: address = \"1.1.1.1\"", "output": "Output: \"1[.]1[.]1[.]1\"", "explanation": ""}, {"full_text": "Example 2:\nInput: address = \"255.100.50.0\"\nOutput: \"255[.]100[.]50[.]0\"", "input": "Input: address = \"255.100.50.0\"", "output": "Output: \"255[.]100[.]50[.]0\"", "explanation": ""}], "constraints": "Constraints:\nThe given address is a valid IPv4 address.", "notes": ""}, "1103": {"label": "Easy", "title": "Distribute Candies to People", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.637, "total_accepted": 65300.0, "total_submissions": 102500.0, "testcase_example": "'7\\n4'", "body": "We distribute some\nnumber of candies, to a row of n =\nnum_people\npeople in the following way:\nWe then give 1 candy to the first person, 2 candies to the second person, and so on until we give n\ncandies to the last person.\nThen, we go back to the start of the row, giving n\n+ 1 candies to the first person, n\n+ 2 candies to the second person, and so on until we give 2 * n\ncandies to the last person.\nThis process repeats (with us giving one more candy each time, and moving to the start of the row after we reach the end) until we run out of candies.\nThe last person will receive all of our remaining candies (not necessarily one more than the previous gift).\nReturn an array (of length num_people\nand sum candies) that represents the final distribution of candies.", "examples": [{"full_text": "Example 1:\nInput: candies = 7, num_people = 4\nOutput: [1,2,3,1]\nExplanation:\nOn the first turn, ans[0] += 1, and the array is [1,0,0,0].\nOn the second turn, ans[1] += 2, and the array is [1,2,0,0].\nOn the third turn, ans[2] += 3, and the array is [1,2,3,0].\nOn the fourth turn, ans[3] += 1 (because there is only one candy left), and the final array is [1,2,3,1].", "input": "Input: candies = 7, num_people = 4", "output": "Output: [1,2,3,1]", "explanation": "Explanation:\nOn the first turn, ans[0] += 1, and the array is [1,0,0,0].\nOn the second turn, ans[1] += 2, and the array is [1,2,0,0].\nOn the third turn, ans[2] += 3, and the array is [1,2,3,0].\nOn the fourth turn, ans[3] += 1 (because there is only one candy left), and the final array is [1,2,3,1]."}, {"full_text": "Example 2:\nInput: candies = 10, num_people = 3\nOutput: [5,2,3]\nExplanation:\nOn the first turn, ans[0] += 1, and the array is [1,0,0].\nOn the second turn, ans[1] += 2, and the array is [1,2,0].\nOn the third turn, ans[2] += 3, and the array is [1,2,3].\nOn the fourth turn, ans[0] += 4, and the final array is [5,2,3].", "input": "Input: candies = 10, num_people = 3", "output": "Output: [5,2,3]", "explanation": "Explanation:\nOn the first turn, ans[0] += 1, and the array is [1,0,0].\nOn the second turn, ans[1] += 2, and the array is [1,2,0].\nOn the third turn, ans[2] += 3, and the array is [1,2,3].\nOn the fourth turn, ans[0] += 4, and the final array is [5,2,3]."}], "constraints": "Constraints:\n1 <= candies <= 10^9\n1 <= num_people <= 1000", "notes": ""}, "1089": {"label": "Easy", "title": "Duplicate Zeros", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.511, "total_accepted": 243700.0, "total_submissions": 476900.0, "testcase_example": "'[1,0,2,3,0,4,5,0]'", "body": "Given a fixed-length integer array arr, duplicate each occurrence of zero, shifting the remaining elements to the right.\nNote that elements beyond the length of the original array are not written. Do the above modifications to the input array in place and do not return anything.", "examples": [{"full_text": "Example 1:\nInput: arr = [1,0,2,3,0,4,5,0]\nOutput: [1,0,0,2,3,0,0,4]\nExplanation: After calling your function, the input array is modified to: [1,0,0,2,3,0,0,4]", "input": "Input: arr = [1,0,2,3,0,4,5,0]", "output": "Output: [1,0,0,2,3,0,0,4]", "explanation": "Explanation: After calling your function, the input array is modified to: [1,0,0,2,3,0,0,4]"}, {"full_text": "Example 2:\nInput: arr = [1,2,3]\nOutput: [1,2,3]\nExplanation: After calling your function, the input array is modified to: [1,2,3]", "input": "Input: arr = [1,2,3]", "output": "Output: [1,2,3]", "explanation": "Explanation: After calling your function, the input array is modified to: [1,2,3]"}], "constraints": "Constraints:\n1 <= arr.length <= 10^4\n0 <= arr[i] <= 9", "notes": ""}, "1078": {"label": "Easy", "title": "Occurrences After Bigram", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6433, "total_accepted": 49300.0, "total_submissions": 76600.0, "testcase_example": "'\"alice is a good girl she is a good student\"\\n\"a\"\\n\"good\"'", "body": "Given two strings first and second, consider occurrences in some text of the form \"first second third\", where second comes immediately after first, and third comes immediately after second.\nReturn an array of all the words third for each occurrence of \"first second third\".", "examples": [{"full_text": "Example 1:\nInput: text = \"alice is a good girl she is a good student\", first = \"a\", second = \"good\"\nOutput: [\"girl\",\"student\"]", "input": "Input: text = \"alice is a good girl she is a good student\", first = \"a\", second = \"good\"", "output": "Output: [\"girl\",\"student\"]", "explanation": ""}, {"full_text": "Example 2:\nInput: text = \"we will we will rock you\", first = \"we\", second = \"will\"\nOutput: [\"we\",\"rock\"]", "input": "Input: text = \"we will we will rock you\", first = \"we\", second = \"will\"", "output": "Output: [\"we\",\"rock\"]", "explanation": ""}], "constraints": "Constraints:\n1 <= text.length <= 1000\ntext consists of lowercase English letters and spaces.\nAll the words in text a separated by a single space.\n1 <= first.length, second.length <= 10\nfirst and second consist of lowercase English letters.", "notes": ""}, "1071": {"label": "Easy", "title": "Greatest Common Divisor of Strings", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.516, "total_accepted": 67300.0, "total_submissions": 130400.0, "testcase_example": "'\"ABCABC\"\\n\"ABC\"'", "body": "For two strings s and t, we say \"t divides s\" if and only if s = t + ... + t (i.e., t is concatenated with itself one or more times).\nGiven two strings str1 and str2, return the largest string x such that x divides both str1 and str2.", "examples": [{"full_text": "Example 1:\nInput: str1 = \"ABCABC\", str2 = \"ABC\"\nOutput: \"ABC\"", "input": "Input: str1 = \"ABCABC\", str2 = \"ABC\"", "output": "Output: \"ABC\"", "explanation": ""}, {"full_text": "Example 2:\nInput: str1 = \"ABABAB\", str2 = \"ABAB\"\nOutput: \"AB\"", "input": "Input: str1 = \"ABABAB\", str2 = \"ABAB\"", "output": "Output: \"AB\"", "explanation": ""}, {"full_text": "Example 3:\nInput: str1 = \"LEET\", str2 = \"CODE\"\nOutput: \"\"", "input": "Input: str1 = \"LEET\", str2 = \"CODE\"", "output": "Output: \"\"", "explanation": ""}], "constraints": "Constraints:\n1 <= str1.length, str2.length <= 1000\nstr1 and str2 consist of English uppercase letters.", "notes": ""}, "1051": {"label": "Easy", "title": "Height Checker", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7406999999999999, "total_accepted": 183600.0, "total_submissions": 247900.0, "testcase_example": "'[1,1,4,2,1,3]'", "body": "A school is trying to take an annual photo of all the students. The students are asked to stand in a single file line in non-decreasing order by height. Let this ordering be represented by the integer array expected where expected[i] is the expected height of the i^th student in line.\nYou are given an integer array heights representing the current order that the students are standing in. Each heights[i] is the height of the i^th student in line (0-indexed).\nReturn the number of indices where heights[i] != expected[i].", "examples": [{"full_text": "Example 1:\nInput: heights = [1,1,4,2,1,3]\nOutput: 3\nExplanation:\nheights: [1,1,4,2,1,3]\nexpected: [1,1,1,2,3,4]\nIndices 2, 4, and 5 do not match.", "input": "Input: heights = [1,1,4,2,1,3]", "output": "Output: 3", "explanation": "Explanation:\nheights: [1,1,4,2,1,3]\nexpected: [1,1,1,2,3,4]\nIndices 2, 4, and 5 do not match."}, {"full_text": "Example 2:\nInput: heights = [5,1,2,3,4]\nOutput: 5\nExplanation:\nheights: [5,1,2,3,4]\nexpected: [1,2,3,4,5]\nAll indices do not match.", "input": "Input: heights = [5,1,2,3,4]", "output": "Output: 5", "explanation": "Explanation:\nheights: [5,1,2,3,4]\nexpected: [1,2,3,4,5]\nAll indices do not match."}, {"full_text": "Example 3:\nInput: heights = [1,2,3,4,5]\nOutput: 0\nExplanation:\nheights: [1,2,3,4,5]\nexpected: [1,2,3,4,5]\nAll indices match.", "input": "Input: heights = [1,2,3,4,5]", "output": "Output: 0", "explanation": "Explanation:\nheights: [1,2,3,4,5]\nexpected: [1,2,3,4,5]\nAll indices match."}], "constraints": "Constraints:\n1 <= heights.length <= 100\n1 <= heights[i] <= 100", "notes": ""}, "1047": {"label": "Easy", "title": "Remove All Adjacent Duplicates In String", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7103, "total_accepted": 255700.0, "total_submissions": 360000.0, "testcase_example": "'\"abbaca\"'", "body": "You are given a string s consisting of lowercase English letters. A duplicate removal consists of choosing two adjacent and equal letters and removing them.\nWe repeatedly make duplicate removals on s until we no longer can.\nReturn the final string after all such duplicate removals have been made. It can be proven that the answer is unique.", "examples": [{"full_text": "Example 1:\nInput: s = \"abbaca\"\nOutput: \"ca\"\nExplanation:\nFor example, in \"abbaca\" we could remove \"bb\" since the letters are adjacent and equal, and this is the only possible move. The result of this move is that the string is \"aaca\", of which only \"aa\" is possible, so the final string is \"ca\".", "input": "Input: s = \"abbaca\"", "output": "Output: \"ca\"", "explanation": "Explanation:\nFor example, in \"abbaca\" we could remove \"bb\" since the letters are adjacent and equal, and this is the only possible move. The result of this move is that the string is \"aaca\", of which only \"aa\" is possible, so the final string is \"ca\"."}, {"full_text": "Example 2:\nInput: s = \"azxxzy\"\nOutput: \"ay\"", "input": "Input: s = \"azxxzy\"", "output": "Output: \"ay\"", "explanation": ""}], "constraints": "Constraints:\n1 <= s.length <= 10^5\ns consists of lowercase English letters.", "notes": ""}, "1046": {"label": "Easy", "title": "Last Stone Weight", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.63, "total_accepted": 210700.0, "total_submissions": 334400.0, "testcase_example": "'[2,7,4,1,8,1]'", "body": "You are given an array of integers stones where stones[i] is the weight of the i^th stone.\nWe are playing a game with the stones. On each turn, we choose the heaviest two stones and smash them together. Suppose the heaviest two stones have weights x and y with x <= y. The result of this smash is:\nIf x == y, both stones are destroyed, and\nIf x != y, the stone of weight x is destroyed, and the stone of weight y has new weight y - x.\nAt the end of the game, there is at most one stone left.\nReturn the smallest possible weight of the left stone. If there are no stones left, return 0.", "examples": [{"full_text": "Example 1:\nInput: stones = [2,7,4,1,8,1]\nOutput: 1\nExplanation:\nWe combine 7 and 8 to get 1 so the array converts to [2,4,1,1,1] then,\nwe combine 2 and 4 to get 2 so the array converts to [2,1,1,1] then,\nwe combine 2 and 1 to get 1 so the array converts to [1,1,1] then,\nwe combine 1 and 1 to get 0 so the array converts to [1] then that's the value of the last stone.", "input": "Input: stones = [2,7,4,1,8,1]", "output": "Output: 1", "explanation": "Explanation:\nWe combine 7 and 8 to get 1 so the array converts to [2,4,1,1,1] then,\nwe combine 2 and 4 to get 2 so the array converts to [2,1,1,1] then,\nwe combine 2 and 1 to get 1 so the array converts to [1,1,1] then,\nwe combine 1 and 1 to get 0 so the array converts to [1] then that's the value of the last stone."}, {"full_text": "Example 2:\nInput: stones = [1]\nOutput: 1", "input": "Input: stones = [1]", "output": "Output: 1", "explanation": ""}], "constraints": "Constraints:\n1 <= stones.length <= 30\n1 <= stones[i] <= 1000", "notes": ""}, "1037": {"label": "Easy", "title": "Valid Boomerang", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3747, "total_accepted": 29800.0, "total_submissions": 79500.0, "testcase_example": "'[[1,1],[2,3],[3,2]]'", "body": "Given an array points where points[i] = [xi, yi] represents a point on the X-Y plane, return true if these points are a boomerang.\nA boomerang is a set of three points that are all distinct and not in a straight line.", "examples": [{"full_text": "Example 1:\nInput: points = [[1,1],[2,3],[3,2]]\nOutput: true", "input": "Input: points = [[1,1],[2,3],[3,2]]", "output": "Output: true", "explanation": ""}, {"full_text": "Example 2:\nInput: points = [[1,1],[2,2],[3,3]]\nOutput: false", "input": "Input: points = [[1,1],[2,2],[3,3]]", "output": "Output: false", "explanation": ""}], "constraints": "Constraints:\npoints.length == 3\npoints[i].length == 2\n0 <= xi, yi <= 100", "notes": ""}, "1030": {"label": "Easy", "title": "Matrix Cells in Distance Order", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6888, "total_accepted": 40100.0, "total_submissions": 58200.0, "testcase_example": "'1\\n2\\n0\\n0'", "body": "You are given four integers row, cols, rCenter, and cCenter. There is a rows x cols matrix and you are on the cell with the coordinates (rCenter, cCenter).\nReturn the coordinates of all cells in the matrix, sorted by their distance from (rCenter, cCenter) from the smallest distance to the largest distance. You may return the answer in any order that satisfies this condition.\nThe distance between two cells (r1, c1) and (r2, c2) is |r1 - r2| + |c1 - c2|.", "examples": [{"full_text": "Example 1:\nInput: rows = 1, cols = 2, rCenter = 0, cCenter = 0\nOutput: [[0,0],[0,1]]\nExplanation: The distances from (0, 0) to other cells are: [0,1]", "input": "Input: rows = 1, cols = 2, rCenter = 0, cCenter = 0", "output": "Output: [[0,0],[0,1]]", "explanation": "Explanation: The distances from (0, 0) to other cells are: [0,1]"}, {"full_text": "Example 2:\nInput: rows = 2, cols = 2, rCenter = 0, cCenter = 1\nOutput: [[0,1],[0,0],[1,1],[1,0]]\nExplanation: The distances from (0, 1) to other cells are: [0,1,1,2]\nThe answer [[0,1],[1,1],[0,0],[1,0]] would also be accepted as correct.", "input": "Input: rows = 2, cols = 2, rCenter = 0, cCenter = 1", "output": "Output: [[0,1],[0,0],[1,1],[1,0]]", "explanation": "Explanation: The distances from (0, 1) to other cells are: [0,1,1,2]\nThe answer [[0,1],[1,1],[0,0],[1,0]] would also be accepted as correct."}, {"full_text": "Example 3:\nInput: rows = 2, cols = 3, rCenter = 1, cCenter = 2\nOutput: [[1,2],[0,2],[1,1],[0,1],[1,0],[0,0]]\nExplanation: The distances from (1, 2) to other cells are: [0,1,1,2,2,3]\nThere are other answers that would also be accepted as correct, such as [[1,2],[1,1],[0,2],[1,0],[0,1],[0,0]].", "input": "Input: rows = 2, cols = 3, rCenter = 1, cCenter = 2", "output": "Output: [[1,2],[0,2],[1,1],[0,1],[1,0],[0,0]]", "explanation": "Explanation: The distances from (1, 2) to other cells are: [0,1,1,2,2,3]\nThere are other answers that would also be accepted as correct, such as [[1,2],[1,1],[0,2],[1,0],[0,1],[0,0]]."}], "constraints": "Constraints:\n1 <= rows, cols <= 100\n0 <= rCenter < rows\n0 <= cCenter < cols", "notes": ""}, "1025": {"label": "Easy", "title": "Divisor Game", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6648000000000001, "total_accepted": 143700.0, "total_submissions": 216200.0, "testcase_example": "'2'", "body": "Alice and Bob take turns playing a game, with Alice starting first.\nInitially, there is a number n on the chalkboard. On each player's turn, that player makes a move consisting of:\nChoosing any x with 0 < x < n and n % x == 0.\nReplacing the number n on the chalkboard with n - x.\nAlso, if a player cannot make a move, they lose the game.\nReturn true if and only if Alice wins the game, assuming both players play optimally.", "examples": [{"full_text": "Example 1:\nInput: n = 2\nOutput: true\nExplanation: Alice chooses 1, and Bob has no more moves.", "input": "Input: n = 2", "output": "Output: true", "explanation": "Explanation: Alice chooses 1, and Bob has no more moves."}, {"full_text": "Example 2:\nInput: n = 3\nOutput: false\nExplanation: Alice chooses 1, Bob chooses 1, and Alice has no more moves.", "input": "Input: n = 3", "output": "Output: false", "explanation": "Explanation: Alice chooses 1, Bob chooses 1, and Alice has no more moves."}], "constraints": "Constraints:\n1 <= n <= 1000", "notes": ""}, "1022": {"label": "Easy", "title": "Sum of Root To Leaf Binary Numbers", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7394, "total_accepted": 153900.0, "total_submissions": 208200.0, "testcase_example": "'[1,0,1,0,1,0,1]'", "body": "You are given the root of a binary tree where each node has a value 0 or 1. Each root-to-leaf path represents a binary number starting with the most significant bit.\nFor example, if the path is 0 -> 1 -> 1 -> 0 -> 1, then this could represent 01101 in binary, which is 13.\nFor all leaves in the tree, consider the numbers represented by the path from the root to that leaf. Return the sum of these numbers.\nThe test cases are generated so that the answer fits in a 32-bits integer.", "examples": [{"full_text": "Example 1:\nInput: root = [1,0,1,0,1,0,1]\nOutput: 22\nExplanation: (100) + (101) + (110) + (111) = 4 + 5 + 6 + 7 = 22", "input": "Input: root = [1,0,1,0,1,0,1]", "output": "Output: 22", "explanation": "Explanation: (100) + (101) + (110) + (111) = 4 + 5 + 6 + 7 = 22"}, {"full_text": "Example 2:\nInput: root = [0]\nOutput: 0", "input": "Input: root = [0]", "output": "Output: 0", "explanation": ""}], "constraints": "Constraints:\nThe number of nodes in the tree is in the range [1, 1000].\nNode.val is 0 or 1.", "notes": ""}, "1021": {"label": "Easy", "title": "Remove Outermost Parentheses", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7970999999999999, "total_accepted": 163500.0, "total_submissions": 205200.0, "testcase_example": "'\"(()())(())\"'", "body": "A valid parentheses string is either empty \"\", \"(\" + A + \")\", or A + B, where A and B are valid parentheses strings, and + represents string concatenation.\nFor example, \"\", \"()\", \"(())()\", and \"(()(()))\" are all valid parentheses strings.\nA valid parentheses string s is primitive if it is nonempty, and there does not exist a way to split it into s = A + B, with A and B nonempty valid parentheses strings.\nGiven a valid parentheses string s, consider its primitive decomposition: s = P1 + P2 + ... + Pk, where Pi are primitive valid parentheses strings.\nReturn s after removing the outermost parentheses of every primitive string in the primitive decomposition of s.", "examples": [{"full_text": "Example 1:\nInput: s = \"(()())(())\"\nOutput: \"()()()\"\nExplanation:\nThe input string is \"(()())(())\", with primitive decomposition \"(()())\" + \"(())\".\nAfter removing outer parentheses of each part, this is \"()()\" + \"()\" = \"()()()\".", "input": "Input: s = \"(()())(())\"", "output": "Output: \"()()()\"", "explanation": "Explanation:\nThe input string is \"(()())(())\", with primitive decomposition \"(()())\" + \"(())\".\nAfter removing outer parentheses of each part, this is \"()()\" + \"()\" = \"()()()\"."}, {"full_text": "Example 2:\nInput: s = \"(()())(())(()(()))\"\nOutput: \"()()()()(())\"\nExplanation:\nThe input string is \"(()())(())(()(()))\", with primitive decomposition \"(()())\" + \"(())\" + \"(()(()))\".\nAfter removing outer parentheses of each part, this is \"()()\" + \"()\" + \"()(())\" = \"()()()()(())\".", "input": "Input: s = \"(()())(())(()(()))\"", "output": "Output: \"()()()()(())\"", "explanation": "Explanation:\nThe input string is \"(()())(())(()(()))\", with primitive decomposition \"(()())\" + \"(())\" + \"(()(()))\".\nAfter removing outer parentheses of each part, this is \"()()\" + \"()\" + \"()(())\" = \"()()()()(())\"."}, {"full_text": "Example 3:\nInput: s = \"()()\"\nOutput: \"\"\nExplanation:\nThe input string is \"()()\", with primitive decomposition \"()\" + \"()\".\nAfter removing outer parentheses of each part, this is \"\" + \"\" = \"\".", "input": "Input: s = \"()()\"", "output": "Output: \"\"", "explanation": "Explanation:\nThe input string is \"()()\", with primitive decomposition \"()\" + \"()\".\nAfter removing outer parentheses of each part, this is \"\" + \"\" = \"\"."}], "constraints": "Constraints:\n1 <= s.length <= 10^5\ns[i] is either '(' or ')'.\ns is a valid parentheses string.", "notes": ""}, "1018": {"label": "Easy", "title": "Binary Prefix Divisible By 5", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4757, "total_accepted": 37400.0, "total_submissions": 78600.0, "testcase_example": "'[0,1,1]'", "body": "You are given a binary array nums (0-indexed).\nWe define xi as the number whose binary representation is the subarray nums[0..i] (from most-significant-bit to least-significant-bit).\nFor example, if nums = [1,0,1], then x0 = 1, x1 = 2, and x2 = 5.\nReturn an array of booleans answer where answer[i] is true if xi is divisible by 5.", "examples": [{"full_text": "Example 1:\nInput: nums = [0,1,1]\nOutput: [true,false,false]\nExplanation: The input numbers in binary are 0, 01, 011; which are 0, 1, and 3 in base-10.\nOnly the first number is divisible by 5, so answer[0] is true.", "input": "Input: nums = [0,1,1]", "output": "Output: [true,false,false]", "explanation": "Explanation: The input numbers in binary are 0, 01, 011; which are 0, 1, and 3 in base-10.\nOnly the first number is divisible by 5, so answer[0] is true."}, {"full_text": "Example 2:\nInput: nums = [1,1,1]\nOutput: [false,false,false]", "input": "Input: nums = [1,1,1]", "output": "Output: [false,false,false]", "explanation": ""}], "constraints": "Constraints:\n1 <= nums.length <= 10^5\nnums[i] is either 0 or 1.", "notes": ""}, "1013": {"label": "Easy", "title": "Partition Array Into Three Parts With Equal Sum", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.44920000000000004, "total_accepted": 60400.0, "total_submissions": 134400.0, "testcase_example": "'[0,2,1,-6,6,-7,9,1,2,0,1]'", "body": "Given an array of integers arr, return true if we can partition the array into three non-empty parts with equal sums.\nFormally, we can partition the array if we can find indexes i + 1 < j with (arr[0] + arr[1] + ... + arr[i] == arr[i + 1] + arr[i + 2] + ... + arr[j - 1] == arr[j] + arr[j + 1] + ... + arr[arr.length - 1])", "examples": [{"full_text": "Example 1:\nInput: arr = [0,2,1,-6,6,-7,9,1,2,0,1]\nOutput: true\nExplanation: 0 + 2 + 1 = -6 + 6 - 7 + 9 + 1 = 2 + 0 + 1", "input": "Input: arr = [0,2,1,-6,6,-7,9,1,2,0,1]", "output": "Output: true", "explanation": "Explanation: 0 + 2 + 1 = -6 + 6 - 7 + 9 + 1 = 2 + 0 + 1"}, {"full_text": "Example 2:\nInput: arr = [0,2,1,-6,6,7,9,-1,2,0,1]\nOutput: false", "input": "Input: arr = [0,2,1,-6,6,7,9,-1,2,0,1]", "output": "Output: false", "explanation": ""}, {"full_text": "Example 3:\nInput: arr = [3,3,6,5,-2,2,5,1,-9,4]\nOutput: true\nExplanation: 3 + 3 = 6 = 5 - 2 + 2 + 5 + 1 - 9 + 4", "input": "Input: arr = [3,3,6,5,-2,2,5,1,-9,4]", "output": "Output: true", "explanation": "Explanation: 3 + 3 = 6 = 5 - 2 + 2 + 5 + 1 - 9 + 4"}], "constraints": "Constraints:\n3 <= arr.length <= 5 * 10^4\n-10^4 <= arr[i] <= 10^4", "notes": ""}, "1009": {"label": "Easy", "title": "Complement of Base 10 Integer", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6238, "total_accepted": 119900.0, "total_submissions": 192200.0, "testcase_example": "'5'", "body": "The complement of an integer is the integer you get when you flip all the 0's to 1's and all the 1's to 0's in its binary representation.\nFor example, The integer 5 is \"101\" in binary and its complement is \"010\" which is the integer 2.\nGiven an integer n, return its complement.", "examples": [{"full_text": "Example 1:\nInput: n = 5\nOutput: 2\nExplanation: 5 is \"101\" in binary, with complement \"010\" in binary, which is 2 in base-10.", "input": "Input: n = 5", "output": "Output: 2", "explanation": "Explanation: 5 is \"101\" in binary, with complement \"010\" in binary, which is 2 in base-10."}, {"full_text": "Example 2:\nInput: n = 7\nOutput: 0\nExplanation: 7 is \"111\" in binary, with complement \"000\" in binary, which is 0 in base-10.", "input": "Input: n = 7", "output": "Output: 0", "explanation": "Explanation: 7 is \"111\" in binary, with complement \"000\" in binary, which is 0 in base-10."}, {"full_text": "Example 3:\nInput: n = 10\nOutput: 5\nExplanation: 10 is \"1010\" in binary, with complement \"0101\" in binary, which is 5 in base-10.", "input": "Input: n = 10", "output": "Output: 5", "explanation": "Explanation: 10 is \"1010\" in binary, with complement \"0101\" in binary, which is 5 in base-10."}], "constraints": "Constraints:\n0 <= n < 10^9", "notes": "Note: This question is the same as 476: https://leetcode.com/problems/number-complement/"}, "1005": {"label": "Easy", "title": "Maximize Sum Of Array After K Negations", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5161, "total_accepted": 50800.0, "total_submissions": 98500.0, "testcase_example": "'[4,2,3]\\n1'", "body": "Given an integer array nums and an integer k, modify the array in the following way:\nchoose an index i and replace nums[i] with -nums[i].\nYou should apply this process exactly k times. You may choose the same index i multiple times.\nReturn the largest possible sum of the array after modifying it in this way.", "examples": [{"full_text": "Example 1:\nInput: nums = [4,2,3], k = 1\nOutput: 5\nExplanation: Choose index 1 and nums becomes [4,-2,3].", "input": "Input: nums = [4,2,3], k = 1", "output": "Output: 5", "explanation": "Explanation: Choose index 1 and nums becomes [4,-2,3]."}, {"full_text": "Example 2:\nInput: nums = [3,-1,0,2], k = 3\nOutput: 6\nExplanation: Choose indices (1, 2, 2) and nums becomes [3,1,0,2].", "input": "Input: nums = [3,-1,0,2], k = 3", "output": "Output: 6", "explanation": "Explanation: Choose indices (1, 2, 2) and nums becomes [3,1,0,2]."}, {"full_text": "Example 3:\nInput: nums = [2,-3,-1,5,-4], k = 2\nOutput: 13\nExplanation: Choose indices (1, 4) and nums becomes [2,3,-1,5,4].", "input": "Input: nums = [2,-3,-1,5,-4], k = 2", "output": "Output: 13", "explanation": "Explanation: Choose indices (1, 4) and nums becomes [2,3,-1,5,4]."}], "constraints": "Constraints:\n1 <= nums.length <= 10^4\n-100 <= nums[i] <= 100\n1 <= k <= 10^4", "notes": ""}, "1002": {"label": "Easy", "title": "Find Common Characters", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6842, "total_accepted": 135200.0, "total_submissions": 197700.0, "testcase_example": "'[\"bella\",\"label\",\"roller\"]'", "body": "Given a string array words, return an array of all characters that show up in all strings within the words (including duplicates). You may return the answer in any order.", "examples": [{"full_text": "Example 1:\nInput: words = [\"bella\",\"label\",\"roller\"]\nOutput: [\"e\",\"l\",\"l\"]", "input": "Input: words = [\"bella\",\"label\",\"roller\"]", "output": "Output: [\"e\",\"l\",\"l\"]", "explanation": ""}, {"full_text": "Example 2:\nInput: words = [\"cool\",\"lock\",\"cook\"]\nOutput: [\"c\",\"o\"]", "input": "Input: words = [\"cool\",\"lock\",\"cook\"]", "output": "Output: [\"c\",\"o\"]", "explanation": ""}], "constraints": "Constraints:\n1 <= words.length <= 100\n1 <= words[i].length <= 100\nwords[i] consists of lowercase English letters.", "notes": ""}, "999": {"label": "Easy", "title": "Available Captures for Rook", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6781, "total_accepted": 48100.0, "total_submissions": 71000.0, "testcase_example": "'[[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"p\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"R\",\".\",\".\",\".\",\"p\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"p\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"]]'", "body": "On an 8 x 8 chessboard, there is exactly one white rook 'R' and some number of white bishops 'B', black pawns 'p', and empty squares '.'.\nWhen the rook moves, it chooses one of four cardinal directions (north, east, south, or west), then moves in that direction until it chooses to stop, reaches the edge of the board, captures a black pawn, or is blocked by a white bishop. A rook is considered attacking a pawn if the rook can capture the pawn on the rook's turn. The number of available captures for the white rook is the number of pawns that the rook is attacking.\nReturn the number of available captures for the white rook.", "examples": [{"full_text": "Example 1:\nInput: board = [[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"p\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"R\",\".\",\".\",\".\",\"p\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"p\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"]]\nOutput: 3\nExplanation: In this example, the rook is attacking all the pawns.", "input": "Input: board = [[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"p\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"R\",\".\",\".\",\".\",\"p\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"p\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"]]", "output": "Output: 3", "explanation": "Explanation: In this example, the rook is attacking all the pawns."}, {"full_text": "Example 2:\nInput: board = [[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\"p\",\"p\",\"p\",\"p\",\"p\",\".\",\".\"],[\".\",\"p\",\"p\",\"B\",\"p\",\"p\",\".\",\".\"],[\".\",\"p\",\"B\",\"R\",\"B\",\"p\",\".\",\".\"],[\".\",\"p\",\"p\",\"B\",\"p\",\"p\",\".\",\".\"],[\".\",\"p\",\"p\",\"p\",\"p\",\"p\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"]]\nOutput: 0\nExplanation: The bishops are blocking the rook from attacking any of the pawns.", "input": "Input: board = [[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\"p\",\"p\",\"p\",\"p\",\"p\",\".\",\".\"],[\".\",\"p\",\"p\",\"B\",\"p\",\"p\",\".\",\".\"],[\".\",\"p\",\"B\",\"R\",\"B\",\"p\",\".\",\".\"],[\".\",\"p\",\"p\",\"B\",\"p\",\"p\",\".\",\".\"],[\".\",\"p\",\"p\",\"p\",\"p\",\"p\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"]]", "output": "Output: 0", "explanation": "Explanation: The bishops are blocking the rook from attacking any of the pawns."}, {"full_text": "Example 3:\nInput: board = [[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"p\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"p\",\".\",\".\",\".\",\".\"],[\"p\",\"p\",\".\",\"R\",\".\",\"p\",\"B\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"B\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"p\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"]]\nOutput: 3\nExplanation: The rook is attacking the pawns at positions b5, d6, and f5.", "input": "Input: board = [[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"p\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"p\",\".\",\".\",\".\",\".\"],[\"p\",\"p\",\".\",\"R\",\".\",\"p\",\"B\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"B\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"p\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"]]", "output": "Output: 3", "explanation": "Explanation: The rook is attacking the pawns at positions b5, d6, and f5."}], "constraints": "Constraints:\nboard.length == 8\nboard[i].length == 8\nboard[i][j] is either 'R', '.', 'B', or 'p'\nThere is exactly one cell with board[i][j] == 'R'", "notes": ""}, "997": {"label": "Easy", "title": "Find the Town Judge", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4999, "total_accepted": 257899.99999999997, "total_submissions": 515799.99999999994, "testcase_example": "'2\\n[[1,2]]'", "body": "In a town, there are n people labeled from 1 to n. There is a rumor that one of these people is secretly the town judge.\nIf the town judge exists, then:\nThe town judge trusts nobody.\nEverybody (except for the town judge) trusts the town judge.\nThere is exactly one person that satisfies properties 1 and 2.\nYou are given an array trust where trust[i] = [ai, bi] representing that the person labeled ai trusts the person labeled bi.\nReturn the label of the town judge if the town judge exists and can be identified, or return -1 otherwise.", "examples": [{"full_text": "Example 1:\nInput: n = 2, trust = [[1,2]]\nOutput: 2", "input": "Input: n = 2, trust = [[1,2]]", "output": "Output: 2", "explanation": ""}, {"full_text": "Example 2:\nInput: n = 3, trust = [[1,3],[2,3]]\nOutput: 3", "input": "Input: n = 3, trust = [[1,3],[2,3]]", "output": "Output: 3", "explanation": ""}, {"full_text": "Example 3:\nInput: n = 3, trust = [[1,3],[2,3],[3,1]]\nOutput: -1", "input": "Input: n = 3, trust = [[1,3],[2,3],[3,1]]", "output": "Output: -1", "explanation": ""}], "constraints": "Constraints:\n1 <= n <= 1000\n0 <= trust.length <= 10^4\ntrust[i].length == 2\nAll the pairs of trust are unique.\nai != bi\n1 <= ai, bi <= n", "notes": ""}, "993": {"label": "Easy", "title": "Cousins in Binary Tree", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5372, "total_accepted": 198400.0, "total_submissions": 369300.0, "testcase_example": "'[1,2,3,4]\\n4\\n3'", "body": "Given the root of a binary tree with unique values and the values of two different nodes of the tree x and y, return true if the nodes corresponding to the values x and y in the tree are cousins, or false otherwise.\nTwo nodes of a binary tree are cousins if they have the same depth with different parents.\nNote that in a binary tree, the root node is at the depth 0, and children of each depth k node are at the depth k + 1.", "examples": [{"full_text": "Example 1:\nInput: root = [1,2,3,4], x = 4, y = 3\nOutput: false", "input": "Input: root = [1,2,3,4], x = 4, y = 3", "output": "Output: false", "explanation": ""}, {"full_text": "Example 2:\nInput: root = [1,2,3,null,4,null,5], x = 5, y = 4\nOutput: true", "input": "Input: root = [1,2,3,null,4,null,5], x = 5, y = 4", "output": "Output: true", "explanation": ""}, {"full_text": "Example 3:\nInput: root = [1,2,3,null,4], x = 2, y = 3\nOutput: false", "input": "Input: root = [1,2,3,null,4], x = 2, y = 3", "output": "Output: false", "explanation": ""}], "constraints": "Constraints:\nThe number of nodes in the tree is in the range [2, 100].\n1 <= Node.val <= 100\nEach node has a unique value.\nx != y\nx and y are exist in the tree.", "notes": ""}, "989": {"label": "Easy", "title": "Add to Array-Form of Integer", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4523, "total_accepted": 99400.0, "total_submissions": 219800.0, "testcase_example": "'[1,2,0,0]\\n34'", "body": "The array-form of an integer num is an array representing its digits in left to right order.\nFor example, for num = 1321, the array form is [1,3,2,1].\nGiven num, the array-form of an integer, and an integer k, return the array-form of the integer num + k.", "examples": [{"full_text": "Example 1:\nInput: num = [1,2,0,0], k = 34\nOutput: [1,2,3,4]\nExplanation: 1200 + 34 = 1234", "input": "Input: num = [1,2,0,0], k = 34", "output": "Output: [1,2,3,4]", "explanation": "Explanation: 1200 + 34 = 1234"}, {"full_text": "Example 2:\nInput: num = [2,7,4], k = 181\nOutput: [4,5,5]\nExplanation: 274 + 181 = 455", "input": "Input: num = [2,7,4], k = 181", "output": "Output: [4,5,5]", "explanation": "Explanation: 274 + 181 = 455"}, {"full_text": "Example 3:\nInput: num = [2,1,5], k = 806\nOutput: [1,0,2,1]\nExplanation: 215 + 806 = 1021", "input": "Input: num = [2,1,5], k = 806", "output": "Output: [1,0,2,1]", "explanation": "Explanation: 215 + 806 = 1021"}], "constraints": "Constraints:\n1 <= num.length <= 10^4\n0 <= num[i] <= 9\nnum does not contain any leading zeros except for the zero itself.\n1 <= k <= 10^4", "notes": ""}, "977": {"label": "Easy", "title": "Squares of a Sorted Array", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7154, "total_accepted": 856900.0, "total_submissions": 1200000.0, "testcase_example": "'[-4,-1,0,3,10]'", "body": "Given an integer array nums sorted in non-decreasing order, return an array of the squares of each number sorted in non-decreasing order.", "examples": [{"full_text": "Example 1:\nInput: nums = [-4,-1,0,3,10]\nOutput: [0,1,9,16,100]\nExplanation: After squaring, the array becomes [16,1,0,9,100].\nAfter sorting, it becomes [0,1,9,16,100].", "input": "Input: nums = [-4,-1,0,3,10]", "output": "Output: [0,1,9,16,100]", "explanation": "Explanation: After squaring, the array becomes [16,1,0,9,100].\nAfter sorting, it becomes [0,1,9,16,100]."}, {"full_text": "Example 2:\nInput: nums = [-7,-3,2,3,11]\nOutput: [4,9,9,49,121]", "input": "Input: nums = [-7,-3,2,3,11]", "output": "Output: [4,9,9,49,121]", "explanation": ""}], "constraints": "Constraints:\n1 <= nums.length <= 10^4\n-10^4 <= nums[i] <= 10^4\nnums is sorted in non-decreasing order.\nFollow up: Squaring each element and sorting the new array is very trivial, could you find an O(n) solution using a different approach?", "notes": ""}, "976": {"label": "Easy", "title": "Largest Perimeter Triangle", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5954999999999999, "total_accepted": 60100.0, "total_submissions": 100900.0, "testcase_example": "'[2,1,2]'", "body": "Given an integer array nums, return the largest perimeter of a triangle with a non-zero area, formed from three of these lengths. If it is impossible to form any triangle of a non-zero area, return 0.", "examples": [{"full_text": "Example 1:\nInput: nums = [2,1,2]\nOutput: 5", "input": "Input: nums = [2,1,2]", "output": "Output: 5", "explanation": ""}, {"full_text": "Example 2:\nInput: nums = [1,2,1]\nOutput: 0", "input": "Input: nums = [1,2,1]", "output": "Output: 0", "explanation": ""}], "constraints": "Constraints:\n3 <= nums.length <= 10^4\n1 <= nums[i] <= 10^6", "notes": ""}, "965": {"label": "Easy", "title": "Univalued Binary Tree", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6875, "total_accepted": 150900.0, "total_submissions": 219500.0, "testcase_example": "'[1,1,1,1,1,null,1]'", "body": "A binary tree is uni-valued if every node in the tree has the same value.\nGiven the root of a binary tree, return true if the given tree is uni-valued, or false otherwise.", "examples": [{"full_text": "Example 1:\nInput: root = [1,1,1,1,1,null,1]\nOutput: true", "input": "Input: root = [1,1,1,1,1,null,1]", "output": "Output: true", "explanation": ""}, {"full_text": "Example 2:\nInput: root = [2,2,2,5,2]\nOutput: false", "input": "Input: root = [2,2,2,5,2]", "output": "Output: false", "explanation": ""}], "constraints": "Constraints:\nThe number of nodes in the tree is in the range [1, 100].\n0 <= Node.val < 100", "notes": ""}, "961": {"label": "Easy", "title": "N-Repeated Element in Size 2N Array", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.753, "total_accepted": 170900.0, "total_submissions": 227000.0, "testcase_example": "'[1,2,3,3]'", "body": "You are given an integer array nums with the following properties:\nnums.length == 2 * n.\nnums contains n + 1 unique elements.\nExactly one element of nums is repeated n times.\nReturn the element that is repeated n times.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,2,3,3]\nOutput: 3", "input": "Input: nums = [1,2,3,3]", "output": "Output: 3", "explanation": ""}, {"full_text": "Example 2:\nInput: nums = [2,1,2,5,3,2]\nOutput: 2", "input": "Input: nums = [2,1,2,5,3,2]", "output": "Output: 2", "explanation": ""}, {"full_text": "Example 3:\nInput: nums = [5,1,5,2,5,3,5,4]\nOutput: 5", "input": "Input: nums = [5,1,5,2,5,3,5,4]", "output": "Output: 5", "explanation": ""}], "constraints": "Constraints:\n2 <= n <= 5000\nnums.length == 2 * n\n0 <= nums[i] <= 10^4\nnums contains n + 1 unique elements and one of them is repeated exactly n times.", "notes": ""}, "953": {"label": "Easy", "title": "Verifying an Alien Dictionary", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5233, "total_accepted": 328200.0, "total_submissions": 627100.0, "testcase_example": "'[\"hello\",\"leetcode\"]\\n\"hlabcdefgijkmnopqrstuvwxyz\"'", "body": "In an alien language, surprisingly, they also use English lowercase letters, but possibly in a different order. The order of the alphabet is some permutation of lowercase letters.\nGiven a sequence of words written in the alien language, and the order of the alphabet, return true if and only if the given words are sorted lexicographically in this alien language.", "examples": [{"full_text": "Example 1:\nInput: words = [\"hello\",\"leetcode\"], order = \"hlabcdefgijkmnopqrstuvwxyz\"\nOutput: true\nExplanation: As 'h' comes before 'l' in this language, then the sequence is sorted.", "input": "Input: words = [\"hello\",\"leetcode\"], order = \"hlabcdefgijkmnopqrstuvwxyz\"", "output": "Output: true", "explanation": "Explanation: As 'h' comes before 'l' in this language, then the sequence is sorted."}, {"full_text": "Example 2:\nInput: words = [\"word\",\"world\",\"row\"], order = \"worldabcefghijkmnpqstuvxyz\"\nOutput: false\nExplanation: As 'd' comes after 'l' in this language, then words[0] > words[1], hence the sequence is unsorted.", "input": "Input: words = [\"word\",\"world\",\"row\"], order = \"worldabcefghijkmnpqstuvxyz\"", "output": "Output: false", "explanation": "Explanation: As 'd' comes after 'l' in this language, then words[0] > words[1], hence the sequence is unsorted."}, {"full_text": "Example 3:\nInput: words = [\"apple\",\"app\"], order = \"abcdefghijklmnopqrstuvwxyz\"\nOutput: false\nExplanation: The first three characters \"app\" match, and the second string is shorter (in size.) According to lexicographical rules \"apple\" > \"app\", because 'l' > '\u2205', where '\u2205' is defined as the blank character which is less than any other character (More info).", "input": "Input: words = [\"apple\",\"app\"], order = \"abcdefghijklmnopqrstuvwxyz\"", "output": "Output: false", "explanation": "Explanation: The first three characters \"app\" match, and the second string is shorter (in size.) According to lexicographical rules \"apple\" > \"app\", because 'l' > '\u2205', where '\u2205' is defined as the blank character which is less than any other character (More info)."}], "constraints": "Constraints:\n1 <= words.length <= 100\n1 <= words[i].length <= 20\norder.length == 26\nAll characters in words[i] and order are English lowercase letters.", "notes": ""}, "944": {"label": "Easy", "title": "Delete Columns to Make Sorted", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7011, "total_accepted": 64000.0, "total_submissions": 91200.0, "testcase_example": "'[\"cba\",\"daf\",\"ghi\"]'", "body": "You are given an array of n strings strs, all of the same length.\nThe strings can be arranged such that there is one on each line, making a grid. For example, strs = [\"abc\", \"bce\", \"cae\"] can be arranged as:\nabc\nbce\ncae\nYou want to delete the columns that are not sorted lexicographically. In the above example (0-indexed), columns 0 ('a', 'b', 'c') and 2 ('c', 'e', 'e') are sorted while column 1 ('b', 'c', 'a') is not, so you would delete column 1.\nReturn the number of columns that you will delete.", "examples": [{"full_text": "Example 1:\nInput: strs = [\"cba\",\"daf\",\"ghi\"]\nOutput: 1\nExplanation: The grid looks as follows:\ncba\ndaf\nghi\nColumns 0 and 2 are sorted, but column 1 is not, so you only need to delete 1 column.", "input": "Input: strs = [\"cba\",\"daf\",\"ghi\"]", "output": "Output: 1", "explanation": "Explanation: The grid looks as follows:\ncba\ndaf\nghi\nColumns 0 and 2 are sorted, but column 1 is not, so you only need to delete 1 column."}, {"full_text": "Example 2:\nInput: strs = [\"a\",\"b\"]\nOutput: 0\nExplanation: The grid looks as follows:\na\nb\nColumn 0 is the only column and is sorted, so you will not delete any columns.", "input": "Input: strs = [\"a\",\"b\"]", "output": "Output: 0", "explanation": "Explanation: The grid looks as follows:\na\nb\nColumn 0 is the only column and is sorted, so you will not delete any columns."}, {"full_text": "Example 3:\nInput: strs = [\"zyx\",\"wvu\",\"tsr\"]\nOutput: 3\nExplanation: The grid looks as follows:\nzyx\nwvu\ntsr\nAll 3 columns are not sorted, so you will delete all 3.", "input": "Input: strs = [\"zyx\",\"wvu\",\"tsr\"]", "output": "Output: 3", "explanation": "Explanation: The grid looks as follows:\nzyx\nwvu\ntsr\nAll 3 columns are not sorted, so you will delete all 3."}], "constraints": "Constraints:\nn == strs.length\n1 <= n <= 100\n1 <= strs[i].length <= 1000\nstrs[i] consists of lowercase English letters.", "notes": ""}, "942": {"label": "Easy", "title": "DI String Match", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.755, "total_accepted": 101300.0, "total_submissions": 134100.0, "testcase_example": "'\"IDID\"'", "body": "A permutation perm of n + 1 integers of all the integers in the range [0, n] can be represented as a string s of length n where:\ns[i] == 'I' if perm[i] < perm[i + 1], and\ns[i] == 'D' if perm[i] > perm[i + 1].\nGiven a string s, reconstruct the permutation perm and return it. If there are multiple valid permutations perm, return any of them.", "examples": [{"full_text": "Example 1:\nInput: s = \"IDID\"\nOutput: [0,4,1,3,2]", "input": "Input: s = \"IDID\"", "output": "Output: [0,4,1,3,2]", "explanation": ""}, {"full_text": "Example 2:\nInput: s = \"III\"\nOutput: [0,1,2,3]", "input": "Input: s = \"III\"", "output": "Output: [0,1,2,3]", "explanation": ""}, {"full_text": "Example 3:\nInput: s = \"DDI\"\nOutput: [3,2,0,1]", "input": "Input: s = \"DDI\"", "output": "Output: [3,2,0,1]", "explanation": ""}], "constraints": "Constraints:\n1 <= s.length <= 10^5\ns[i] is either 'I' or 'D'.", "notes": ""}, "941": {"label": "Easy", "title": "Valid Mountain Array", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.33880000000000005, "total_accepted": 274100.0, "total_submissions": 809100.0, "testcase_example": "'[2,1]'", "body": "Given an array of integers arr, return true if and only if it is a valid mountain array.\nRecall that arr is a mountain array if and only if:\narr.length >= 3\nThere exists some i with 0 < i < arr.length - 1 such that:\n\narr[0] < arr[1] < ... < arr[i - 1] < arr[i]\narr[i] > arr[i + 1] > ... > arr[arr.length - 1]\n\n", "examples": [{"full_text": "Example 1:\nInput: arr = [2,1]\nOutput: false", "input": "Input: arr = [2,1]", "output": "Output: false", "explanation": ""}, {"full_text": "Example 2:\nInput: arr = [3,5,5]\nOutput: false", "input": "Input: arr = [3,5,5]", "output": "Output: false", "explanation": ""}, {"full_text": "Example 3:\nInput: arr = [0,3,2,1]\nOutput: true", "input": "Input: arr = [0,3,2,1]", "output": "Output: true", "explanation": ""}], "constraints": "Constraints:\n1 <= arr.length <= 10^4\n0 <= arr[i] <= 10^4", "notes": ""}, "938": {"label": "Easy", "title": "Range Sum of BST", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.8484, "total_accepted": 562500.0, "total_submissions": 663000.0, "testcase_example": "'[10,5,15,3,7,null,18]\\n7\\n15'", "body": "Given the root node of a binary search tree and two integers low and high, return the sum of values of all nodes with a value in the inclusive range [low, high].", "examples": [{"full_text": "Example 1:\nInput: root = [10,5,15,3,7,null,18], low = 7, high = 15\nOutput: 32\nExplanation: Nodes 7, 10, and 15 are in the range [7, 15]. 7 + 10 + 15 = 32.", "input": "Input: root = [10,5,15,3,7,null,18], low = 7, high = 15", "output": "Output: 32", "explanation": "Explanation: Nodes 7, 10, and 15 are in the range [7, 15]. 7 + 10 + 15 = 32."}, {"full_text": "Example 2:\nInput: root = [10,5,15,3,7,13,18,1,null,6], low = 6, high = 10\nOutput: 23\nExplanation: Nodes 6, 7, and 10 are in the range [6, 10]. 6 + 7 + 10 = 23.", "input": "Input: root = [10,5,15,3,7,13,18,1,null,6], low = 6, high = 10", "output": "Output: 23", "explanation": "Explanation: Nodes 6, 7, and 10 are in the range [6, 10]. 6 + 7 + 10 = 23."}], "constraints": "Constraints:\nThe number of nodes in the tree is in the range [1, 2 * 10^4].\n1 <= Node.val <= 10^5\n1 <= low <= high <= 10^5\nAll Node.val are unique.", "notes": ""}, "937": {"label": "Easy", "title": "Reorder Data in Log Files", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5586, "total_accepted": 277300.0, "total_submissions": 496500.0, "testcase_example": "'[\"dig1 8 1 5 1\",\"let1 art can\",\"dig2 3 6\",\"let2 own kit dig\",\"let3 art zero\"]'", "body": "You are given an array of logs. Each log is a space-delimited string of words, where the first word is the identifier.\nThere are two types of logs:\nLetter-logs: All words (except the identifier) consist of lowercase English letters.\nDigit-logs: All words (except the identifier) consist of digits.\nReorder these logs so that:\nThe letter-logs come before all digit-logs.\nThe letter-logs are sorted lexicographically by their contents. If their contents are the same, then sort them lexicographically by their identifiers.\nThe digit-logs maintain their relative ordering.\nReturn the final order of the logs.", "examples": [{"full_text": "Example 1:\nInput: logs = [\"dig1 8 1 5 1\",\"let1 art can\",\"dig2 3 6\",\"let2 own kit dig\",\"let3 art zero\"]\nOutput: [\"let1 art can\",\"let3 art zero\",\"let2 own kit dig\",\"dig1 8 1 5 1\",\"dig2 3 6\"]\nExplanation:\nThe letter-log contents are all different, so their ordering is \"art can\", \"art zero\", \"own kit dig\".\nThe digit-logs have a relative order of \"dig1 8 1 5 1\", \"dig2 3 6\".", "input": "Input: logs = [\"dig1 8 1 5 1\",\"let1 art can\",\"dig2 3 6\",\"let2 own kit dig\",\"let3 art zero\"]", "output": "Output: [\"let1 art can\",\"let3 art zero\",\"let2 own kit dig\",\"dig1 8 1 5 1\",\"dig2 3 6\"]", "explanation": "Explanation:\nThe letter-log contents are all different, so their ordering is \"art can\", \"art zero\", \"own kit dig\".\nThe digit-logs have a relative order of \"dig1 8 1 5 1\", \"dig2 3 6\"."}, {"full_text": "Example 2:\nInput: logs = [\"a1 9 2 3 1\",\"g1 act car\",\"zo4 4 7\",\"ab1 off key dog\",\"a8 act zoo\"]\nOutput: [\"g1 act car\",\"a8 act zoo\",\"ab1 off key dog\",\"a1 9 2 3 1\",\"zo4 4 7\"]", "input": "Input: logs = [\"a1 9 2 3 1\",\"g1 act car\",\"zo4 4 7\",\"ab1 off key dog\",\"a8 act zoo\"]", "output": "Output: [\"g1 act car\",\"a8 act zoo\",\"ab1 off key dog\",\"a1 9 2 3 1\",\"zo4 4 7\"]", "explanation": ""}], "constraints": "Constraints:\n1 <= logs.length <= 100\n3 <= logs[i].length <= 100\nAll the tokens of logs[i] are separated by a single space.\nlogs[i] is guaranteed to have an identifier and at least one word after the identifier.", "notes": ""}, "933": {"label": "Easy", "title": "Number of Recent Calls", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7304999999999999, "total_accepted": 117100.0, "total_submissions": 160300.0, "testcase_example": "'[\"RecentCounter\",\"ping\",\"ping\",\"ping\",\"ping\"]\\n[[],[1],[100],[3001],[3002]]'", "body": "You have a RecentCounter class which counts the number of recent requests within a certain time frame.\nImplement the RecentCounter class:\nRecentCounter() Initializes the counter with zero recent requests.\nint ping(int t) Adds a new request at time t, where t represents some time in milliseconds, and returns the number of requests that has happened in the past 3000 milliseconds (including the new request). Specifically, return the number of requests that have happened in the inclusive range [t - 3000, t].\nIt is guaranteed that every call to ping uses a strictly larger value of t than the previous call.", "examples": [{"full_text": "Example 1:\nInput\n[\"RecentCounter\", \"ping\", \"ping\", \"ping\", \"ping\"]\n[[], [1], [100], [3001], [3002]]\nOutput\n[null, 1, 2, 3, 3]\nExplanation\nRecentCounter recentCounter = new RecentCounter();\nrecentCounter.ping(1); // requests = [1], range is [-2999,1], return 1\nrecentCounter.ping(100); // requests = [1, 100], range is [-2900,100], return 2\nrecentCounter.ping(3001); // requests = [1, 100, 3001], range is [1,3001], return 3\nrecentCounter.ping(3002); // requests = [1, 100, 3001, 3002], range is [2,3002], return 3", "input": "Input\n[\"RecentCounter\", \"ping\", \"ping\", \"ping\", \"ping\"]\n[[], [1], [100], [3001], [3002]]", "output": "Output\n[null, 1, 2, 3, 3]", "explanation": "Explanation\nRecentCounter recentCounter = new RecentCounter();\nrecentCounter.ping(1); // requests = [1], range is [-2999,1], return 1\nrecentCounter.ping(100); // requests = [1, 100], range is [-2900,100], return 2\nrecentCounter.ping(3001); // requests = [1, 100, 3001], range is [1,3001], return 3\nrecentCounter.ping(3002); // requests = [1, 100, 3001, 3002], range is [2,3002], return 3"}], "constraints": "Constraints:\n1 <= t <= 10^9\nEach test case will call ping with strictly increasing values of t.\nAt most 10^4 calls will be made to ping.", "notes": ""}, "929": {"label": "Easy", "title": "Unique Email Addresses", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6739, "total_accepted": 336100.0, "total_submissions": 498700.0, "testcase_example": "'[\"test.email+alex@leetcode.com\",\"test.e.mail+bob.cathy@leetcode.com\",\"testemail+david@lee.tcode.com\"]'", "body": "Every valid email consists of a local name and a domain name, separated by the '@' sign. Besides lowercase letters, the email may contain one or more '.' or '+'.\nFor example, in \"alice@leetcode.com\", \"alice\" is the local name, and \"leetcode.com\" is the domain name.\nIf you add periods '.' between some characters in the local name part of an email address, mail sent there will be forwarded to the same address without dots in the local name. Note that this rule does not apply to domain names.\nFor example, \"alice.z@leetcode.com\" and \"alicez@leetcode.com\" forward to the same email address.\nIf you add a plus '+' in the local name, everything after the first plus sign will be ignored. This allows certain emails to be filtered. Note that this rule does not apply to domain names.\nFor example, \"m.y+name@email.com\" will be forwarded to \"my@email.com\".\nIt is possible to use both of these rules at the same time.\nGiven an array of strings emails where we send one email to each emails[i], return the number of different addresses that actually receive mails.", "examples": [{"full_text": "Example 1:\nInput: emails = [\"test.email+alex@leetcode.com\",\"test.e.mail+bob.cathy@leetcode.com\",\"testemail+david@lee.tcode.com\"]\nOutput: 2\nExplanation: \"testemail@leetcode.com\" and \"testemail@lee.tcode.com\" actually receive mails.", "input": "Input: emails = [\"test.email+alex@leetcode.com\",\"test.e.mail+bob.cathy@leetcode.com\",\"testemail+david@lee.tcode.com\"]", "output": "Output: 2", "explanation": "Explanation: \"testemail@leetcode.com\" and \"testemail@lee.tcode.com\" actually receive mails."}, {"full_text": "Example 2:\nInput: emails = [\"a@leetcode.com\",\"b@leetcode.com\",\"c@leetcode.com\"]\nOutput: 3", "input": "Input: emails = [\"a@leetcode.com\",\"b@leetcode.com\",\"c@leetcode.com\"]", "output": "Output: 3", "explanation": ""}], "constraints": "Constraints:\n1 <= emails.length <= 100\n1 <= emails[i].length <= 100\nemails[i] consist of lowercase English letters, '+', '.' and '@'.\nEach emails[i] contains exactly one '@' character.\nAll local and domain names are non-empty.\nLocal names do not start with a '+' character.\nDomain names end with the \".com\" suffix.", "notes": ""}, "925": {"label": "Easy", "title": "Long Pressed Name", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.34979999999999994, "total_accepted": 87500.0, "total_submissions": 250000.0, "testcase_example": "'\"alex\"\\n\"aaleex\"'", "body": "Your friend is typing his name into a keyboard. Sometimes, when typing a character c, the key might get long pressed, and the character will be typed 1 or more times.\nYou examine the typed characters of the keyboard. Return True if it is possible that it was your friends name, with some characters (possibly none) being long pressed.", "examples": [{"full_text": "Example 1:\nInput: name = \"alex\", typed = \"aaleex\"\nOutput: true\nExplanation: 'a' and 'e' in 'alex' were long pressed.", "input": "Input: name = \"alex\", typed = \"aaleex\"", "output": "Output: true", "explanation": "Explanation: 'a' and 'e' in 'alex' were long pressed."}, {"full_text": "Example 2:\nInput: name = \"saeed\", typed = \"ssaaedd\"\nOutput: false\nExplanation: 'e' must have been pressed twice, but it was not in the typed output.", "input": "Input: name = \"saeed\", typed = \"ssaaedd\"", "output": "Output: false", "explanation": "Explanation: 'e' must have been pressed twice, but it was not in the typed output."}], "constraints": "Constraints:\n1 <= name.length, typed.length <= 1000\nname and typed consist of only lowercase English letters.", "notes": ""}, "922": {"label": "Easy", "title": "Sort Array By Parity II", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7061, "total_accepted": 176400.0, "total_submissions": 249800.0, "testcase_example": "'[4,2,5,7]'", "body": "Given an array of integers nums, half of the integers in nums are odd, and the other half are even.\nSort the array so that whenever nums[i] is odd, i is odd, and whenever nums[i] is even, i is even.\nReturn any answer array that satisfies this condition.", "examples": [{"full_text": "Example 1:\nInput: nums = [4,2,5,7]\nOutput: [4,5,2,7]\nExplanation: [4,7,2,5], [2,5,4,7], [2,7,4,5] would also have been accepted.", "input": "Input: nums = [4,2,5,7]", "output": "Output: [4,5,2,7]", "explanation": "Explanation: [4,7,2,5], [2,5,4,7], [2,7,4,5] would also have been accepted."}, {"full_text": "Example 2:\nInput: nums = [2,3]\nOutput: [2,3]", "input": "Input: nums = [2,3]", "output": "Output: [2,3]", "explanation": ""}], "constraints": "Constraints:\n2 <= nums.length <= 2 * 10^4\nnums.length is even.\nHalf of the integers in nums are even.\n0 <= nums[i] <= 1000\nFollow Up: Could you solve it in-place?", "notes": ""}, "917": {"label": "Easy", "title": "Reverse Only Letters", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6083, "total_accepted": 127600.0, "total_submissions": 209700.0, "testcase_example": "'\"ab-cd\"'", "body": "Given a string s, reverse the string according to the following rules:\nAll the characters that are not English letters remain in the same position.\nAll the English letters (lowercase or uppercase) should be reversed.\nReturn s after reversing it.", "examples": [{"full_text": "Example 1:\nInput: s = \"ab-cd\"\nOutput: \"dc-ba\"", "input": "Input: s = \"ab-cd\"", "output": "Output: \"dc-ba\"", "explanation": ""}, {"full_text": "Example 2:\nInput: s = \"a-bC-dEf-ghIj\"\nOutput: \"j-Ih-gfE-dCba\"", "input": "Input: s = \"a-bC-dEf-ghIj\"", "output": "Output: \"j-Ih-gfE-dCba\"", "explanation": ""}, {"full_text": "Example 3:\nInput: s = \"Test1ng-Leet=code-Q!\"\nOutput: \"Qedo1ct-eeLg=ntse-T!\"", "input": "Input: s = \"Test1ng-Leet=code-Q!\"", "output": "Output: \"Qedo1ct-eeLg=ntse-T!\"", "explanation": ""}], "constraints": "Constraints:\n1 <= s.length <= 100\ns consists of characters with ASCII values in the range [33, 122].\ns does not contain '\\\"' or '\\\\'.", "notes": ""}, "914": {"label": "Easy", "title": "X of a Kind in a Deck of Cards", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.33299999999999996, "total_accepted": 81400.0, "total_submissions": 244300.0, "testcase_example": "'[1,2,3,4,4,3,2,1]'", "body": "In a deck of cards, each card has an integer written on it.\nReturn true if and only if you can choose X >= 2 such that it is possible to split the entire deck into 1 or more groups of cards, where:\nEach group has exactly X cards.\nAll the cards in each group have the same integer.", "examples": [{"full_text": "Example 1:\nInput: deck = [1,2,3,4,4,3,2,1]\nOutput: true\nExplanation: Possible partition [1,1],[2,2],[3,3],[4,4].", "input": "Input: deck = [1,2,3,4,4,3,2,1]", "output": "Output: true", "explanation": "Explanation: Possible partition [1,1],[2,2],[3,3],[4,4]."}, {"full_text": "Example 2:\nInput: deck = [1,1,1,2,2,2,3,3]\nOutput: false\nExplanation: No possible partition.", "input": "Input: deck = [1,1,1,2,2,2,3,3]", "output": "Output: false", "explanation": "Explanation: No possible partition."}], "constraints": "Constraints:\n1 <= deck.length <= 10^4\n0 <= deck[i] < 10^4", "notes": ""}, "908": {"label": "Easy", "title": "Smallest Range I", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6709, "total_accepted": 57800.0, "total_submissions": 86200.0, "testcase_example": "'[1]\\n0'", "body": "You are given an integer array nums and an integer k.\nIn one operation, you can choose any index i where 0 <= i < nums.length and change nums[i] to nums[i] + x where x is an integer from the range [-k, k]. You can apply this operation at most once for each index i.\nThe score of nums is the difference between the maximum and minimum elements in nums.\nReturn the minimum score of nums after applying the mentioned operation at most once for each index in it.", "examples": [{"full_text": "Example 1:\nInput: nums = [1], k = 0\nOutput: 0\nExplanation: The score is max(nums) - min(nums) = 1 - 1 = 0.", "input": "Input: nums = [1], k = 0", "output": "Output: 0", "explanation": "Explanation: The score is max(nums) - min(nums) = 1 - 1 = 0."}, {"full_text": "Example 2:\nInput: nums = [0,10], k = 2\nOutput: 6\nExplanation: Change nums to be [2, 8]. The score is max(nums) - min(nums) = 8 - 2 = 6.", "input": "Input: nums = [0,10], k = 2", "output": "Output: 6", "explanation": "Explanation: Change nums to be [2, 8]. The score is max(nums) - min(nums) = 8 - 2 = 6."}, {"full_text": "Example 3:\nInput: nums = [1,3,6], k = 3\nOutput: 0\nExplanation: Change nums to be [4, 4, 4]. The score is max(nums) - min(nums) = 4 - 4 = 0.", "input": "Input: nums = [1,3,6], k = 3", "output": "Output: 0", "explanation": "Explanation: Change nums to be [4, 4, 4]. The score is max(nums) - min(nums) = 4 - 4 = 0."}], "constraints": "Constraints:\n1 <= nums.length <= 10^4\n0 <= nums[i] <= 10^4\n0 <= k <= 10^4", "notes": ""}, "905": {"label": "Easy", "title": "Sort Array By Parity", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.748, "total_accepted": 416500.0, "total_submissions": 556800.0, "testcase_example": "'[3,1,2,4]'", "body": "Given an integer array nums, move all the even integers at the beginning of the array followed by all the odd integers.\nReturn any array that satisfies this condition.", "examples": [{"full_text": "Example 1:\nInput: nums = [3,1,2,4]\nOutput: [2,4,3,1]\nExplanation: The outputs [4,2,3,1], [2,4,1,3], and [4,2,1,3] would also be accepted.", "input": "Input: nums = [3,1,2,4]", "output": "Output: [2,4,3,1]", "explanation": "Explanation: The outputs [4,2,3,1], [2,4,1,3], and [4,2,1,3] would also be accepted."}, {"full_text": "Example 2:\nInput: nums = [0]\nOutput: [0]", "input": "Input: nums = [0]", "output": "Output: [0]", "explanation": ""}], "constraints": "Constraints:\n1 <= nums.length <= 5000\n0 <= nums[i] <= 5000", "notes": ""}, "897": {"label": "Easy", "title": "Increasing Order Search Tree", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7598999999999999, "total_accepted": 160500.0, "total_submissions": 211200.0, "testcase_example": "'[5,3,6,2,4,null,8,1,null,null,null,7,9]'", "body": "Given the root of a binary search tree, rearrange the tree in in-order so that the leftmost node in the tree is now the root of the tree, and every node has no left child and only one right child.", "examples": [{"full_text": "Example 1:\nInput: root = [5,3,6,2,4,null,8,1,null,null,null,7,9]\nOutput: [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9]", "input": "Input: root = [5,3,6,2,4,null,8,1,null,null,null,7,9]", "output": "Output: [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9]", "explanation": ""}, {"full_text": "Example 2:\nInput: root = [5,1,7]\nOutput: [1,null,5,null,7]", "input": "Input: root = [5,1,7]", "output": "Output: [1,null,5,null,7]", "explanation": ""}], "constraints": "Constraints:\nThe number of nodes in the given tree will be in the range [1, 100].\n0 <= Node.val <= 1000", "notes": ""}, "896": {"label": "Easy", "title": "Monotonic Array", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5842, "total_accepted": 188700.0, "total_submissions": 323000.0, "testcase_example": "'[1,2,2,3]'", "body": "An array is monotonic if it is either monotone increasing or monotone decreasing.\nAn array nums is monotone increasing if for all i <= j, nums[i] <= nums[j]. An array nums is monotone decreasing if for all i <= j, nums[i] >= nums[j].\nGiven an integer array nums, return true if the given array is monotonic, or false otherwise.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,2,2,3]\nOutput: true", "input": "Input: nums = [1,2,2,3]", "output": "Output: true", "explanation": ""}, {"full_text": "Example 2:\nInput: nums = [6,5,4,4]\nOutput: true", "input": "Input: nums = [6,5,4,4]", "output": "Output: true", "explanation": ""}, {"full_text": "Example 3:\nInput: nums = [1,3,2]\nOutput: false", "input": "Input: nums = [1,3,2]", "output": "Output: false", "explanation": ""}], "constraints": "Constraints:\n1 <= nums.length <= 10^5\n-10^5 <= nums[i] <= 10^5", "notes": ""}, "892": {"label": "Easy", "title": "Surface Area of 3D Shapes", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6142, "total_accepted": 27400.0, "total_submissions": 44600.0, "testcase_example": "'[[1,2],[3,4]]'", "body": "You are given an n x n grid where you have placed some 1 x 1 x 1 cubes. Each value v = grid[i][j] represents a tower of v cubes placed on top of cell (i, j).\nAfter placing these cubes, you have decided to glue any directly adjacent cubes to each other, forming several irregular 3D shapes.\nReturn the total surface area of the resulting shapes.\nNote: The bottom face of each shape counts toward its surface area.", "examples": [{"full_text": "Example 1:\nInput: grid = [[1,2],[3,4]]\nOutput: 34", "input": "Input: grid = [[1,2],[3,4]]", "output": "Output: 34", "explanation": ""}, {"full_text": "Example 2:\nInput: grid = [[1,1,1],[1,0,1],[1,1,1]]\nOutput: 32", "input": "Input: grid = [[1,1,1],[1,0,1],[1,1,1]]", "output": "Output: 32", "explanation": ""}, {"full_text": "Example 3:\nInput: grid = [[2,2,2],[2,1,2],[2,2,2]]\nOutput: 46", "input": "Input: grid = [[2,2,2],[2,1,2],[2,2,2]]", "output": "Output: 46", "explanation": ""}], "constraints": "Constraints:\nn == grid.length == grid[i].length\n1 <= n <= 50\n0 <= grid[i][j] <= 50", "notes": ""}, "888": {"label": "Easy", "title": "Fair Candy Swap", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6031, "total_accepted": 77200.0, "total_submissions": 128000.0, "testcase_example": "'[1,1]\\n[2,2]'", "body": "Alice and Bob have a different total number of candies. You are given two integer arrays aliceSizes and bobSizes where aliceSizes[i] is the number of candies of the i^th box of candy that Alice has and bobSizes[j] is the number of candies of the j^th box of candy that Bob has.\nSince they are friends, they would like to exchange one candy box each so that after the exchange, they both have the same total amount of candy. The total amount of candy a person has is the sum of the number of candies in each box they have.\nReturn an integer array answer where answer[0] is the number of candies in the box that Alice must exchange, and answer[1] is the number of candies in the box that Bob must exchange. If there are multiple answers, you may return any one of them. It is guaranteed that at least one answer exists.", "examples": [{"full_text": "Example 1:\nInput: aliceSizes = [1,1], bobSizes = [2,2]\nOutput: [1,2]", "input": "Input: aliceSizes = [1,1], bobSizes = [2,2]", "output": "Output: [1,2]", "explanation": ""}, {"full_text": "Example 2:\nInput: aliceSizes = [1,2], bobSizes = [2,3]\nOutput: [1,2]", "input": "Input: aliceSizes = [1,2], bobSizes = [2,3]", "output": "Output: [1,2]", "explanation": ""}, {"full_text": "Example 3:\nInput: aliceSizes = [2], bobSizes = [1,3]\nOutput: [2,3]", "input": "Input: aliceSizes = [2], bobSizes = [1,3]", "output": "Output: [2,3]", "explanation": ""}], "constraints": "Constraints:\n1 <= aliceSizes.length, bobSizes.length <= 10^4\n1 <= aliceSizes[i], bobSizes[j] <= 10^5\nAlice and Bob have a different total number of candies.\nThere will be at least one valid answer for the given input.", "notes": ""}, "884": {"label": "Easy", "title": "Uncommon Words from Two Sentences", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6534, "total_accepted": 92800.0, "total_submissions": 142000.0, "testcase_example": "'\"this apple is sweet\"\\n\"this apple is sour\"'", "body": "A sentence is a string of single-space separated words where each word consists only of lowercase letters.\nA word is uncommon if it appears exactly once in one of the sentences, and does not appear in the other sentence.\nGiven two sentences s1 and s2, return a list of all the uncommon words. You may return the answer in any order.", "examples": [{"full_text": "Example 1:\nInput: s1 = \"this apple is sweet\", s2 = \"this apple is sour\"\nOutput: [\"sweet\",\"sour\"]", "input": "Input: s1 = \"this apple is sweet\", s2 = \"this apple is sour\"", "output": "Output: [\"sweet\",\"sour\"]", "explanation": ""}, {"full_text": "Example 2:\nInput: s1 = \"apple apple\", s2 = \"banana\"\nOutput: [\"banana\"]", "input": "Input: s1 = \"apple apple\", s2 = \"banana\"", "output": "Output: [\"banana\"]", "explanation": ""}], "constraints": "Constraints:\n1 <= s1.length, s2.length <= 200\ns1 and s2 consist of lowercase English letters and spaces.\ns1 and s2 do not have leading or trailing spaces.\nAll the words in s1 and s2 are separated by a single space.", "notes": ""}, "883": {"label": "Easy", "title": "Projection Area of 3D Shapes", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6979000000000001, "total_accepted": 39100.0, "total_submissions": 56000.0, "testcase_example": "'[[1,2],[3,4]]'", "body": "You are given an n x n grid where we place some 1 x 1 x 1 cubes that are axis-aligned with the x, y, and z axes.\nEach value v = grid[i][j] represents a tower of v cubes placed on top of the cell (i, j).\nWe view the projection of these cubes onto the xy, yz, and zx planes.\nA projection is like a shadow, that maps our 3-dimensional figure to a 2-dimensional plane. We are viewing the \"shadow\" when looking at the cubes from the top, the front, and the side.\nReturn the total area of all three projections.", "examples": [{"full_text": "Example 1:\nInput: grid = [[1,2],[3,4]]\nOutput: 17\nExplanation: Here are the three projections (\"shadows\") of the shape made with each axis-aligned plane.", "input": "Input: grid = [[1,2],[3,4]]", "output": "Output: 17", "explanation": "Explanation: Here are the three projections (\"shadows\") of the shape made with each axis-aligned plane."}, {"full_text": "Example 2:\nInput: grid = [[2]]\nOutput: 5", "input": "Input: grid = [[2]]", "output": "Output: 5", "explanation": ""}, {"full_text": "Example 3:\nInput: grid = [[1,0],[0,2]]\nOutput: 8", "input": "Input: grid = [[1,0],[0,2]]", "output": "Output: 8", "explanation": ""}], "constraints": "Constraints:\nn == grid.length == grid[i].length\n1 <= n <= 50\n0 <= grid[i][j] <= 50", "notes": ""}, "876": {"label": "Easy", "title": "Middle of the Linked List", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7214, "total_accepted": 560300.0, "total_submissions": 776700.0, "testcase_example": "'[1,2,3,4,5]'", "body": "Given the head of a singly linked list, return the middle node of the linked list.\nIf there are two middle nodes, return the second middle node.", "examples": [{"full_text": "Example 1:\nInput: head = [1,2,3,4,5]\nOutput: [3,4,5]\nExplanation: The middle node of the list is node 3.", "input": "Input: head = [1,2,3,4,5]", "output": "Output: [3,4,5]", "explanation": "Explanation: The middle node of the list is node 3."}, {"full_text": "Example 2:\nInput: head = [1,2,3,4,5,6]\nOutput: [4,5,6]\nExplanation: Since the list has two middle nodes with values 3 and 4, we return the second one.", "input": "Input: head = [1,2,3,4,5,6]", "output": "Output: [4,5,6]", "explanation": "Explanation: Since the list has two middle nodes with values 3 and 4, we return the second one."}], "constraints": "Constraints:\nThe number of nodes in the list is in the range [1, 100].\n1 <= Node.val <= 100", "notes": ""}, "872": {"label": "Easy", "title": "Leaf-Similar Trees", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6486, "total_accepted": 156200.0, "total_submissions": 240900.0, "testcase_example": "'[3,5,1,6,2,9,8,null,null,7,4]\\n' +\n  '[3,5,1,6,7,4,2,null,null,null,null,null,null,9,8]'", "body": "Consider all the leaves of a binary tree, from\nleft to right order, the values of those\nleaves form a leaf value sequence.\nFor example, in the given tree above, the leaf value sequence is (6, 7, 4, 9, 8).\nTwo binary trees are considered leaf-similar\nif their leaf value sequence is the same.\nReturn true if and only if the two given trees with head nodes root1 and root2 are leaf-similar.", "examples": [{"full_text": "Example 1:\nInput: root1 = [3,5,1,6,2,9,8,null,null,7,4], root2 = [3,5,1,6,7,4,2,null,null,null,null,null,null,9,8]\nOutput: true", "input": "Input: root1 = [3,5,1,6,2,9,8,null,null,7,4], root2 = [3,5,1,6,7,4,2,null,null,null,null,null,null,9,8]", "output": "Output: true", "explanation": ""}, {"full_text": "Example 2:\nInput: root1 = [1,2,3], root2 = [1,3,2]\nOutput: false", "input": "Input: root1 = [1,2,3], root2 = [1,3,2]", "output": "Output: false", "explanation": ""}], "constraints": "Constraints:\nThe number of nodes in each tree will be in the range [1, 200].\nBoth of the given trees will have values in the range [0, 200].", "notes": ""}, "868": {"label": "Easy", "title": "Binary Gap", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6171, "total_accepted": 56200.0, "total_submissions": 91000.0, "testcase_example": "'22'", "body": "Given a positive integer n, find and return the longest distance between any two adjacent 1's in the binary representation of n. If there are no two adjacent 1's, return 0.\nTwo 1's are adjacent if there are only 0's separating them (possibly no 0's). The distance between two 1's is the absolute difference between their bit positions. For example, the two 1's in \"1001\" have a distance of 3.", "examples": [{"full_text": "Example 1:\nInput: n = 22\nOutput: 2\nExplanation: 22 in binary is \"10110\".\nThe first adjacent pair of 1's is \"10110\" with a distance of 2.\nThe second adjacent pair of 1's is \"10110\" with a distance of 1.\nThe answer is the largest of these two distances, which is 2.\nNote that \"10110\" is not a valid pair since there is a 1 separating the two 1's underlined.", "input": "Input: n = 22", "output": "Output: 2", "explanation": "Explanation: 22 in binary is \"10110\".\nThe first adjacent pair of 1's is \"10110\" with a distance of 2.\nThe second adjacent pair of 1's is \"10110\" with a distance of 1.\nThe answer is the largest of these two distances, which is 2.\nNote that \"10110\" is not a valid pair since there is a 1 separating the two 1's underlined."}, {"full_text": "Example 2:\nInput: n = 8\nOutput: 0\nExplanation: 8 in binary is \"1000\".\nThere are not any adjacent pairs of 1's in the binary representation of 8, so we return 0.", "input": "Input: n = 8", "output": "Output: 0", "explanation": "Explanation: 8 in binary is \"1000\".\nThere are not any adjacent pairs of 1's in the binary representation of 8, so we return 0."}, {"full_text": "Example 3:\nInput: n = 5\nOutput: 2\nExplanation: 5 in binary is \"101\".", "input": "Input: n = 5", "output": "Output: 2", "explanation": "Explanation: 5 in binary is \"101\"."}], "constraints": "Constraints:\n1 <= n <= 10^9", "notes": ""}, "867": {"label": "Easy", "title": "Transpose Matrix", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6124, "total_accepted": 124900.0, "total_submissions": 203900.0, "testcase_example": "'[[1,2,3],[4,5,6],[7,8,9]]'", "body": "Given a 2D integer array matrix, return the transpose of matrix.\nThe transpose of a matrix is the matrix flipped over its main diagonal, switching the matrix's row and column indices.", "examples": [{"full_text": "Example 1:\nInput: matrix = [[1,2,3],[4,5,6],[7,8,9]]\nOutput: [[1,4,7],[2,5,8],[3,6,9]]", "input": "Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]", "output": "Output: [[1,4,7],[2,5,8],[3,6,9]]", "explanation": ""}, {"full_text": "Example 2:\nInput: matrix = [[1,2,3],[4,5,6]]\nOutput: [[1,4],[2,5],[3,6]]", "input": "Input: matrix = [[1,2,3],[4,5,6]]", "output": "Output: [[1,4],[2,5],[3,6]]", "explanation": ""}], "constraints": "Constraints:\nm == matrix.length\nn == matrix[i].length\n1 <= m, n <= 1000\n1 <= m * n <= 10^5\n-10^9 <= matrix[i][j] <= 10^9", "notes": ""}, "860": {"label": "Easy", "title": "Lemonade Change", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5229, "total_accepted": 90200.0, "total_submissions": 172600.0, "testcase_example": "'[5,5,5,10,20]'", "body": "At a lemonade stand, each lemonade costs $5. Customers are standing in a queue to buy from you and order one at a time (in the order specified by bills). Each customer will only buy one lemonade and pay with either a $5, $10, or $20 bill. You must provide the correct change to each customer so that the net transaction is that the customer pays $5.\nNote that you do not have any change in hand at first.\nGiven an integer array bills where bills[i] is the bill the i^th customer pays, return true if you can provide every customer with the correct change, or false otherwise.", "examples": [{"full_text": "Example 1:\nInput: bills = [5,5,5,10,20]\nOutput: true\nExplanation:\nFrom the first 3 customers, we collect three $5 bills in order.\nFrom the fourth customer, we collect a $10 bill and give back a $5.\nFrom the fifth customer, we give a $10 bill and a $5 bill.\nSince all customers got correct change, we output true.", "input": "Input: bills = [5,5,5,10,20]", "output": "Output: true", "explanation": "Explanation:\nFrom the first 3 customers, we collect three $5 bills in order.\nFrom the fourth customer, we collect a $10 bill and give back a $5.\nFrom the fifth customer, we give a $10 bill and a $5 bill.\nSince all customers got correct change, we output true."}, {"full_text": "Example 2:\nInput: bills = [5,5,10,10,20]\nOutput: false\nExplanation:\nFrom the first two customers in order, we collect two $5 bills.\nFor the next two customers in order, we collect a $10 bill and give back a $5 bill.\nFor the last customer, we can not give the change of $15 back because we only have two $10 bills.\nSince not every customer received the correct change, the answer is false.", "input": "Input: bills = [5,5,10,10,20]", "output": "Output: false", "explanation": "Explanation:\nFrom the first two customers in order, we collect two $5 bills.\nFor the next two customers in order, we collect a $10 bill and give back a $5 bill.\nFor the last customer, we can not give the change of $15 back because we only have two $10 bills.\nSince not every customer received the correct change, the answer is false."}], "constraints": "Constraints:\n1 <= bills.length <= 10^5\nbills[i] is either 5, 10, or 20.", "notes": ""}, "859": {"label": "Easy", "title": "Buddy Strings", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.2875, "total_accepted": 112900.0, "total_submissions": 392600.0, "testcase_example": "'\"ab\"\\n\"ba\"'", "body": "Given two strings s and goal, return true if you can swap two letters in s so the result is equal to goal, otherwise, return false.\nSwapping letters is defined as taking two indices i and j (0-indexed) such that i != j and swapping the characters at s[i] and s[j].\nFor example, swapping at indices 0 and 2 in \"abcd\" results in \"cbad\".", "examples": [{"full_text": "Example 1:\nInput: s = \"ab\", goal = \"ba\"\nOutput: true\nExplanation: You can swap s[0] = 'a' and s[1] = 'b' to get \"ba\", which is equal to goal.", "input": "Input: s = \"ab\", goal = \"ba\"", "output": "Output: true", "explanation": "Explanation: You can swap s[0] = 'a' and s[1] = 'b' to get \"ba\", which is equal to goal."}, {"full_text": "Example 2:\nInput: s = \"ab\", goal = \"ab\"\nOutput: false\nExplanation: The only letters you can swap are s[0] = 'a' and s[1] = 'b', which results in \"ba\" != goal.", "input": "Input: s = \"ab\", goal = \"ab\"", "output": "Output: false", "explanation": "Explanation: The only letters you can swap are s[0] = 'a' and s[1] = 'b', which results in \"ba\" != goal."}, {"full_text": "Example 3:\nInput: s = \"aa\", goal = \"aa\"\nOutput: true\nExplanation: You can swap s[0] = 'a' and s[1] = 'a' to get \"aa\", which is equal to goal.", "input": "Input: s = \"aa\", goal = \"aa\"", "output": "Output: true", "explanation": "Explanation: You can swap s[0] = 'a' and s[1] = 'a' to get \"aa\", which is equal to goal."}], "constraints": "Constraints:\n1 <= s.length, goal.length <= 2 * 10^4\ns and goal consist of lowercase letters.", "notes": ""}, "852": {"label": "Easy", "title": "Peak Index in a Mountain Array", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7108, "total_accepted": 322900.0, "total_submissions": 454200.0, "testcase_example": "'[0,1,0]'", "body": "Let's call an array arr a mountain\nif the following properties hold:\narr.length >= 3\nThere exists some i with\n0 < i\n< arr.length - 1\nsuch that:\n\narr[0] < arr[1] < ... arr[i-1] < arr[i]\narr[i] > arr[i+1] > ... > arr[arr.length - 1]\n\n\nGiven an integer array arr that is guaranteed to be\na mountain, return any\ni\nsuch that\narr[0] < arr[1] < ... arr[i - 1] < arr[i] > arr[i + 1] > ... > arr[arr.length - 1].", "examples": [{"full_text": "Example 1:\nInput: arr = [0,1,0]\nOutput: 1", "input": "Input: arr = [0,1,0]", "output": "Output: 1", "explanation": ""}, {"full_text": "Example 2:\nInput: arr = [0,2,1,0]\nOutput: 1", "input": "Input: arr = [0,2,1,0]", "output": "Output: 1", "explanation": ""}, {"full_text": "Example 3:\nInput: arr = [0,10,5,2]\nOutput: 1", "input": "Input: arr = [0,10,5,2]", "output": "Output: 1", "explanation": ""}], "constraints": "Constraints:\n3 <= arr.length <= 10^4\n0 <= arr[i] <= 10^6\narr is guaranteed to be a mountain array.\nFollow up: Finding the O(n) is straightforward, could you find an O(log(n)) solution?", "notes": ""}, "844": {"label": "Easy", "title": "Backspace String Compare", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.47369999999999995, "total_accepted": 383200.0, "total_submissions": 808900.0, "testcase_example": "'\"ab#c\"\\n\"ad#c\"'", "body": "Given two strings s and t, return true if they are equal when both are typed into empty text editors. '#' means a backspace character.\nNote that after backspacing an empty text, the text will continue empty.", "examples": [{"full_text": "Example 1:\nInput: s = \"ab#c\", t = \"ad#c\"\nOutput: true\nExplanation: Both s and t become \"ac\".", "input": "Input: s = \"ab#c\", t = \"ad#c\"", "output": "Output: true", "explanation": "Explanation: Both s and t become \"ac\"."}, {"full_text": "Example 2:\nInput: s = \"ab##\", t = \"c#d#\"\nOutput: true\nExplanation: Both s and t become \"\".", "input": "Input: s = \"ab##\", t = \"c#d#\"", "output": "Output: true", "explanation": "Explanation: Both s and t become \"\"."}, {"full_text": "Example 3:\nInput: s = \"a#c\", t = \"b\"\nOutput: false\nExplanation: s becomes \"c\" while t becomes \"b\".", "input": "Input: s = \"a#c\", t = \"b\"", "output": "Output: false", "explanation": "Explanation: s becomes \"c\" while t becomes \"b\"."}], "constraints": "Constraints:\n1 <= s.length, t.length <= 200\ns and t only contain lowercase letters and '#' characters.\nFollow up: Can you solve it in O(n) time and O(1) space?", "notes": ""}, "836": {"label": "Easy", "title": "Rectangle Overlap", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4315, "total_accepted": 96500.0, "total_submissions": 223700.0, "testcase_example": "'[0,0,2,2]\\n[1,1,3,3]'", "body": "An axis-aligned rectangle is represented as a list [x1, y1, x2, y2], where (x1, y1) is the coordinate of its bottom-left corner, and (x2, y2) is the coordinate of its top-right corner. Its top and bottom edges are parallel to the X-axis, and its left and right edges are parallel to the Y-axis.\nTwo rectangles overlap if the area of their intersection is positive. To be clear, two rectangles that only touch at the corner or edges do not overlap.\nGiven two axis-aligned rectangles rec1 and rec2, return true if they overlap, otherwise return false.", "examples": [{"full_text": "Example 1:\nInput: rec1 = [0,0,2,2], rec2 = [1,1,3,3]\nOutput: true", "input": "Input: rec1 = [0,0,2,2], rec2 = [1,1,3,3]", "output": "Output: true", "explanation": ""}, {"full_text": "Example 2:\nInput: rec1 = [0,0,1,1], rec2 = [1,0,2,1]\nOutput: false", "input": "Input: rec1 = [0,0,1,1], rec2 = [1,0,2,1]", "output": "Output: false", "explanation": ""}, {"full_text": "Example 3:\nInput: rec1 = [0,0,1,1], rec2 = [2,2,3,3]\nOutput: false", "input": "Input: rec1 = [0,0,1,1], rec2 = [2,2,3,3]", "output": "Output: false", "explanation": ""}], "constraints": "Constraints:\nrect1.length == 4\nrect2.length == 4\n-10^9 <= rec1[i], rec2[i] <= 10^9\nrec1 and rec2 represent a valid rectangle with a non-zero area.", "notes": ""}, "832": {"label": "Easy", "title": "Flipping an Image", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7944, "total_accepted": 281200.0, "total_submissions": 354000.0, "testcase_example": "'[[1,1,0],[1,0,1],[0,0,0]]'", "body": "Given an n x n binary matrix image, flip the image horizontally, then invert it, and return the resulting image.\nTo flip an image horizontally means that each row of the image is reversed.\nFor example, flipping [1,1,0] horizontally results in [0,1,1].\nTo invert an image means that each 0 is replaced by 1, and each 1 is replaced by 0.\nFor example, inverting [0,1,1] results in [1,0,0].", "examples": [{"full_text": "Example 1:\nInput: image = [[1,1,0],[1,0,1],[0,0,0]]\nOutput: [[1,0,0],[0,1,0],[1,1,1]]\nExplanation: First reverse each row: [[0,1,1],[1,0,1],[0,0,0]].\nThen, invert the image: [[1,0,0],[0,1,0],[1,1,1]]", "input": "Input: image = [[1,1,0],[1,0,1],[0,0,0]]", "output": "Output: [[1,0,0],[0,1,0],[1,1,1]]", "explanation": "Explanation: First reverse each row: [[0,1,1],[1,0,1],[0,0,0]].\nThen, invert the image: [[1,0,0],[0,1,0],[1,1,1]]"}, {"full_text": "Example 2:\nInput: image = [[1,1,0,0],[1,0,0,1],[0,1,1,1],[1,0,1,0]]\nOutput: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]\nExplanation: First reverse each row: [[0,0,1,1],[1,0,0,1],[1,1,1,0],[0,1,0,1]].\nThen invert the image: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]", "input": "Input: image = [[1,1,0,0],[1,0,0,1],[0,1,1,1],[1,0,1,0]]", "output": "Output: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]", "explanation": "Explanation: First reverse each row: [[0,0,1,1],[1,0,0,1],[1,1,1,0],[0,1,0,1]].\nThen invert the image: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]"}], "constraints": "Constraints:\nn == image.length\nn == image[i].length\n1 <= n <= 20\nimages[i][j] is either 0 or 1.", "notes": ""}, "830": {"label": "Easy", "title": "Positions of Large Groups", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5127, "total_accepted": 68400.0, "total_submissions": 133400.0, "testcase_example": "'\"abbxxxxzzy\"'", "body": "In a string s\nof lowercase letters, these letters form consecutive groups of the same character.\nFor example, a string like s = \"abbxxxxzyy\" has the groups \"a\", \"bb\", \"xxxx\", \"z\", and\n\"yy\".\nA group is identified by an interval\n[start, end], where\nstart\nand\nend\ndenote the start and end\nindices (inclusive) of the group. In the above example,\n\"xxxx\"\nhas the interval\n[3,6].\nA group is considered\nlarge\nif it has 3 or more characters.\nReturn\nthe intervals of every large group sorted in\nincreasing order by start index.", "examples": [{"full_text": "Example 1:\nInput: s = \"abbxxxxzzy\"\nOutput: [[3,6]]\nExplanation: \"xxxx\" is the only large group with start index 3 and end index 6.", "input": "Input: s = \"abbxxxxzzy\"", "output": "Output: [[3,6]]", "explanation": "Explanation: \"xxxx\" is the only large group with start index 3 and end index 6."}, {"full_text": "Example 2:\nInput: s = \"abc\"\nOutput: []\nExplanation: We have groups \"a\", \"b\", and \"c\", none of which are large groups.", "input": "Input: s = \"abc\"", "output": "Output: []", "explanation": "Explanation: We have groups \"a\", \"b\", and \"c\", none of which are large groups."}, {"full_text": "Example 3:\nInput: s = \"abcdddeeeeaabbbcd\"\nOutput: [[3,5],[6,9],[12,14]]\nExplanation: The large groups are \"ddd\", \"eeee\", and \"bbb\".", "input": "Input: s = \"abcdddeeeeaabbbcd\"", "output": "Output: [[3,5],[6,9],[12,14]]", "explanation": "Explanation: The large groups are \"ddd\", \"eeee\", and \"bbb\"."}], "constraints": "Constraints:\n1 <= s.length <= 1000\ns contains lowercase English letters only.", "notes": ""}, "824": {"label": "Easy", "title": "Goat Latin", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6746, "total_accepted": 137600.0, "total_submissions": 204000.0, "testcase_example": "'\"I speak Goat Latin\"'", "body": "You are given a string sentence that consist of words separated by spaces. Each word consists of lowercase and uppercase letters only.\nWe would like to convert the sentence to \"Goat Latin\" (a made-up language similar to Pig Latin.) The rules of Goat Latin are as follows:\nIf a word begins with a vowel ('a', 'e', 'i', 'o', or 'u'), append \"ma\" to the end of the word.\n\nFor example, the word \"apple\" becomes \"applema\".\n\n\nIf a word begins with a consonant (i.e., not a vowel), remove the first letter and append it to the end, then add \"ma\".\n\nFor example, the word \"goat\" becomes \"oatgma\".\n\n\nAdd one letter 'a' to the end of each word per its word index in the sentence, starting with 1.\n\nFor example, the first word gets \"a\" added to the end, the second word gets \"aa\" added to the end, and so on.\n\n\nReturn the final sentence representing the conversion from sentence to Goat Latin.", "examples": [{"full_text": "Example 1:\nInput: sentence = \"I speak Goat Latin\"\nOutput: \"Imaa peaksmaaa oatGmaaaa atinLmaaaaa\"", "input": "Input: sentence = \"I speak Goat Latin\"", "output": "Output: \"Imaa peaksmaaa oatGmaaaa atinLmaaaaa\"", "explanation": ""}, {"full_text": "Example 2:\nInput: sentence = \"The quick brown fox jumped over the lazy dog\"\nOutput: \"heTmaa uickqmaaa rownbmaaaa oxfmaaaaa umpedjmaaaaaa overmaaaaaaa hetmaaaaaaaa azylmaaaaaaaaa ogdmaaaaaaaaaa\"", "input": "Input: sentence = \"The quick brown fox jumped over the lazy dog\"", "output": "Output: \"heTmaa uickqmaaa rownbmaaaa oxfmaaaaa umpedjmaaaaaa overmaaaaaaa hetmaaaaaaaa azylmaaaaaaaaa ogdmaaaaaaaaaa\"", "explanation": ""}], "constraints": "Constraints:\n1 <= sentence.length <= 150\nsentence consists of English letters and spaces.\nsentence has no leading or trailing spaces.\nAll the words in sentence are separated by a single space.", "notes": ""}, "821": {"label": "Easy", "title": "Shortest Distance to a Character", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7082999999999999, "total_accepted": 126600.0, "total_submissions": 178700.0, "testcase_example": "'\"loveleetcode\"\\n\"e\"'", "body": "Given a string s and a character c that occurs in s, return an array of integers answer where answer.length == s.length and answer[i] is the distance from index i to the closest occurrence of character c in s.\nThe distance between two indices i and j is abs(i - j), where abs is the absolute value function.", "examples": [{"full_text": "Example 1:\nInput: s = \"loveleetcode\", c = \"e\"\nOutput: [3,2,1,0,1,0,0,1,2,2,1,0]\nExplanation: The character 'e' appears at indices 3, 5, 6, and 11 (0-indexed).\nThe closest occurrence of 'e' for index 0 is at index 3, so the distance is abs(0 - 3) = 3.\nThe closest occurrence of 'e' for index 1 is at index 3, so the distance is abs(1 - 3) = 2.\nFor index 4, there is a tie between the 'e' at index 3 and the 'e' at index 5, but the distance is still the same: abs(4 - 3) == abs(4 - 5) = 1.\nThe closest occurrence of 'e' for index 8 is at index 6, so the distance is abs(8 - 6) = 2.", "input": "Input: s = \"loveleetcode\", c = \"e\"", "output": "Output: [3,2,1,0,1,0,0,1,2,2,1,0]", "explanation": "Explanation: The character 'e' appears at indices 3, 5, 6, and 11 (0-indexed).\nThe closest occurrence of 'e' for index 0 is at index 3, so the distance is abs(0 - 3) = 3.\nThe closest occurrence of 'e' for index 1 is at index 3, so the distance is abs(1 - 3) = 2.\nFor index 4, there is a tie between the 'e' at index 3 and the 'e' at index 5, but the distance is still the same: abs(4 - 3) == abs(4 - 5) = 1.\nThe closest occurrence of 'e' for index 8 is at index 6, so the distance is abs(8 - 6) = 2."}, {"full_text": "Example 2:\nInput: s = \"aaab\", c = \"b\"\nOutput: [3,2,1,0]", "input": "Input: s = \"aaab\", c = \"b\"", "output": "Output: [3,2,1,0]", "explanation": ""}], "constraints": "Constraints:\n1 <= s.length <= 10^4\ns[i] and c are lowercase English letters.\nIt is guaranteed that c occurs at least once in s.", "notes": ""}, "819": {"label": "Easy", "title": "Most Common Word", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.45280000000000004, "total_accepted": 274400.0, "total_submissions": 606100.0, "testcase_example": "'\"Bob hit a ball, the hit BALL flew far after it was hit.\"\\n[\"hit\"]'", "body": "Given a string paragraph and a string array of the banned words banned, return the most frequent word that is not banned. It is guaranteed there is at least one word that is not banned, and that the answer is unique.\nThe words in paragraph are case-insensitive and the answer should be returned in lowercase.", "examples": [{"full_text": "Example 1:\nInput: paragraph = \"Bob hit a ball, the hit BALL flew far after it was hit.\", banned = [\"hit\"]\nOutput: \"ball\"\nExplanation:\n\"hit\" occurs 3 times, but it is a banned word.\n\"ball\" occurs twice (and no other word does), so it is the most frequent non-banned word in the paragraph.\nNote that words in the paragraph are not case sensitive,\nthat punctuation is ignored (even if adjacent to words, such as \"ball,\"),\nand that \"hit\" isn't the answer even though it occurs more because it is banned.", "input": "Input: paragraph = \"Bob hit a ball, the hit BALL flew far after it was hit.\", banned = [\"hit\"]", "output": "Output: \"ball\"", "explanation": "Explanation:\n\"hit\" occurs 3 times, but it is a banned word.\n\"ball\" occurs twice (and no other word does), so it is the most frequent non-banned word in the paragraph.\nNote that words in the paragraph are not case sensitive,\nthat punctuation is ignored (even if adjacent to words, such as \"ball,\"),\nand that \"hit\" isn't the answer even though it occurs more because it is banned."}, {"full_text": "Example 2:\nInput: paragraph = \"a.\", banned = []\nOutput: \"a\"", "input": "Input: paragraph = \"a.\", banned = []", "output": "Output: \"a\"", "explanation": ""}], "constraints": "Constraints:\n1 <= paragraph.length <= 1000\nparagraph consists of English letters, space ' ', or one of the symbols: \"!?',;.\".\n0 <= banned.length <= 100\n1 <= banned[i].length <= 10\nbanned[i] consists of only lowercase English letters.", "notes": ""}, "812": {"label": "Easy", "title": "Largest Triangle Area", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5947, "total_accepted": 31100.0, "total_submissions": 52300.0, "testcase_example": "'[[0,0],[0,1],[1,0],[0,2],[2,0]]'", "body": "Given an array of points on the X-Y plane points where points[i] = [xi, yi], return the area of the largest triangle that can be formed by any three different points. Answers within 10^-5 of the actual answer will be accepted.", "examples": [{"full_text": "Example 1:\nInput: points = [[0,0],[0,1],[1,0],[0,2],[2,0]]\nOutput: 2.00000\nExplanation: The five points are shown in the above figure. The red triangle is the largest.", "input": "Input: points = [[0,0],[0,1],[1,0],[0,2],[2,0]]", "output": "Output: 2.00000", "explanation": "Explanation: The five points are shown in the above figure. The red triangle is the largest."}, {"full_text": "Example 2:\nInput: points = [[1,0],[0,0],[0,1]]\nOutput: 0.50000", "input": "Input: points = [[1,0],[0,0],[0,1]]", "output": "Output: 0.50000", "explanation": ""}], "constraints": "Constraints:\n3 <= points.length <= 50\n-50 <= xi, yi <= 50\nAll the given points are unique.", "notes": ""}, "806": {"label": "Easy", "title": "Number of Lines To Write String", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6598999999999999, "total_accepted": 51700.0, "total_submissions": 78300.0, "testcase_example": "'[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]\\n' +\n  '\"abcdefghijklmnopqrstuvwxyz\"'", "body": "You are given a string s of lowercase English letters and an array widths denoting how many pixels wide each lowercase English letter is. Specifically, widths[0] is the width of 'a', widths[1] is the width of 'b', and so on.\nYou are trying to write s across several lines, where each line is no longer than 100 pixels. Starting at the beginning of s, write as many letters on the first line such that the total width does not exceed 100 pixels. Then, from where you stopped in s, continue writing as many letters as you can on the second line. Continue this process until you have written all of s.\nReturn an array result of length 2 where:\nresult[0] is the total number of lines.\nresult[1] is the width of the last line in pixels.", "examples": [{"full_text": "Example 1:\nInput: widths = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10], s = \"abcdefghijklmnopqrstuvwxyz\"\nOutput: [3,60]\nExplanation: You can write s as follows:\nabcdefghij // 100 pixels wide\nklmnopqrst // 100 pixels wide\nuvwxyz // 60 pixels wide\nThere are a total of 3 lines, and the last line is 60 pixels wide.", "input": "Input: widths = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10], s = \"abcdefghijklmnopqrstuvwxyz\"", "output": "Output: [3,60]", "explanation": "Explanation: You can write s as follows:\nabcdefghij // 100 pixels wide\nklmnopqrst // 100 pixels wide\nuvwxyz // 60 pixels wide\nThere are a total of 3 lines, and the last line is 60 pixels wide."}, {"full_text": "Example 2:\nInput: widths = [4,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10], s = \"bbbcccdddaaa\"\nOutput: [2,4]\nExplanation: You can write s as follows:\nbbbcccdddaa // 98 pixels wide\na // 4 pixels wide\nThere are a total of 2 lines, and the last line is 4 pixels wide.", "input": "Input: widths = [4,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10], s = \"bbbcccdddaaa\"", "output": "Output: [2,4]", "explanation": "Explanation: You can write s as follows:\nbbbcccdddaa // 98 pixels wide\na // 4 pixels wide\nThere are a total of 2 lines, and the last line is 4 pixels wide."}], "constraints": "Constraints:\nwidths.length == 26\n2 <= widths[i] <= 10\n1 <= s.length <= 1000\ns contains only lowercase English letters.", "notes": ""}, "804": {"label": "Easy", "title": "Unique Morse Code Words", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7981999999999999, "total_accepted": 209000.0, "total_submissions": 261800.0, "testcase_example": "'[\"gin\",\"zen\",\"gig\",\"msg\"]'", "body": "International Morse Code defines a standard encoding where each letter is mapped to a series of dots and dashes, as follows:\n'a' maps to \".-\",\n'b' maps to \"-...\",\n'c' maps to \"-.-.\", and so on.\nFor convenience, the full table for the 26 letters of the English alphabet is given below:\n[\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\nGiven an array of strings words where each word can be written as a concatenation of the Morse code of each letter.\nFor example, \"cab\" can be written as \"-.-..--...\", which is the concatenation of \"-.-.\", \".-\", and \"-...\". We will call such a concatenation the transformation of a word.\nReturn the number of different transformations among all words we have.", "examples": [{"full_text": "Example 1:\nInput: words = [\"gin\",\"zen\",\"gig\",\"msg\"]\nOutput: 2\nExplanation: The transformation of each word is:\n\"gin\" -> \"--...-.\"\n\"zen\" -> \"--...-.\"\n\"gig\" -> \"--...--.\"\n\"msg\" -> \"--...--.\"\nThere are 2 different transformations: \"--...-.\" and \"--...--.\".", "input": "Input: words = [\"gin\",\"zen\",\"gig\",\"msg\"]", "output": "Output: 2", "explanation": "Explanation: The transformation of each word is:\n\"gin\" -> \"--...-.\"\n\"zen\" -> \"--...-.\"\n\"gig\" -> \"--...--.\"\n\"msg\" -> \"--...--.\"\nThere are 2 different transformations: \"--...-.\" and \"--...--.\"."}, {"full_text": "Example 2:\nInput: words = [\"a\"]\nOutput: 1", "input": "Input: words = [\"a\"]", "output": "Output: 1", "explanation": ""}], "constraints": "Constraints:\n1 <= words.length <= 100\n1 <= words[i].length <= 12\nwords[i] consists of lowercase English letters.", "notes": ""}, "796": {"label": "Easy", "title": "Rotate String", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5144, "total_accepted": 136100.0, "total_submissions": 264500.0, "testcase_example": "'\"abcde\"\\n\"cdeab\"'", "body": "Given two strings s and goal, return true if and only if s can become goal after some number of shifts on s.\nA shift on s consists of moving the leftmost character of s to the rightmost position.\nFor example, if s = \"abcde\", then it will be \"bcdea\" after one shift.", "examples": [{"full_text": "Example 1:\nInput: s = \"abcde\", goal = \"cdeab\"\nOutput: true", "input": "Input: s = \"abcde\", goal = \"cdeab\"", "output": "Output: true", "explanation": ""}, {"full_text": "Example 2:\nInput: s = \"abcde\", goal = \"abced\"\nOutput: false", "input": "Input: s = \"abcde\", goal = \"abced\"", "output": "Output: false", "explanation": ""}], "constraints": "Constraints:\n1 <= s.length, goal.length <= 100\ns and goal consist of lowercase English letters.", "notes": ""}, "783": {"label": "Easy", "title": "Minimum Distance Between BST Nodes", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5579, "total_accepted": 114300.0, "total_submissions": 204800.0, "testcase_example": "'[4,2,6,1,3]'", "body": "Given the root of a Binary Search Tree (BST), return the minimum difference between the values of any two different nodes in the tree.", "examples": [{"full_text": "Example 1:\nInput: root = [4,2,6,1,3]\nOutput: 1", "input": "Input: root = [4,2,6,1,3]", "output": "Output: 1", "explanation": ""}, {"full_text": "Example 2:\nInput: root = [1,0,48,null,null,12,49]\nOutput: 1", "input": "Input: root = [1,0,48,null,null,12,49]", "output": "Output: 1", "explanation": ""}], "constraints": "Constraints:\nThe number of nodes in the tree is in the range [2, 100].\n0 <= Node.val <= 10^5", "notes": "Note: This question is the same as 530: https://leetcode.com/problems/minimum-absolute-difference-in-bst/"}, "771": {"label": "Easy", "title": "Jewels and Stones", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.8759, "total_accepted": 712200.0, "total_submissions": 813200.0, "testcase_example": "'\"aA\"\\n\"aAAbbbb\"'", "body": "You're given strings jewels representing the types of stones that are jewels, and stones representing the stones you have. Each character in stones is a type of stone you have. You want to know how many of the stones you have are also jewels.\nLetters are case sensitive, so \"a\" is considered a different type of stone from \"A\".", "examples": [{"full_text": "Example 1:\nInput: jewels = \"aA\", stones = \"aAAbbbb\"\nOutput: 3", "input": "Input: jewels = \"aA\", stones = \"aAAbbbb\"", "output": "Output: 3", "explanation": ""}, {"full_text": "Example 2:\nInput: jewels = \"z\", stones = \"ZZ\"\nOutput: 0", "input": "Input: jewels = \"z\", stones = \"ZZ\"", "output": "Output: 0", "explanation": ""}], "constraints": "Constraints:\n1 <=\njewels.length, stones.length <= 50\njewels and stones consist of only English letters.\nAll the characters of\njewels are unique.", "notes": ""}, "766": {"label": "Easy", "title": "Toeplitz Matrix", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6753, "total_accepted": 171300.0, "total_submissions": 253700.0, "testcase_example": "'[[1,2,3,4],[5,1,2,3],[9,5,1,2]]'", "body": "Given an m x n matrix, return\ntrue\nif the matrix is Toeplitz. Otherwise, return false.\nA matrix is Toeplitz if every diagonal from top-left to bottom-right has the same elements.", "examples": [{"full_text": "Example 1:\nInput: matrix = [[1,2,3,4],[5,1,2,3],[9,5,1,2]]\nOutput: true\nExplanation:\nIn the above grid, the\ndiagonals are:\n\"[9]\", \"[5, 5]\", \"[1, 1, 1]\", \"[2, 2, 2]\", \"[3, 3]\", \"[4]\".\nIn each diagonal all elements are the same, so the answer is True.", "input": "Input: matrix = [[1,2,3,4],[5,1,2,3],[9,5,1,2]]", "output": "Output: true", "explanation": "Explanation:\nIn the above grid, the\ndiagonals are:\n\"[9]\", \"[5, 5]\", \"[1, 1, 1]\", \"[2, 2, 2]\", \"[3, 3]\", \"[4]\".\nIn each diagonal all elements are the same, so the answer is True."}, {"full_text": "Example 2:\nInput: matrix = [[1,2],[2,2]]\nOutput: false\nExplanation:\nThe diagonal \"[1, 2]\" has different elements.", "input": "Input: matrix = [[1,2],[2,2]]", "output": "Output: false", "explanation": "Explanation:\nThe diagonal \"[1, 2]\" has different elements."}], "constraints": "Constraints:\nm == matrix.length\nn == matrix[i].length\n1 <= m, n <= 20\n0 <= matrix[i][j] <= 99\nFollow up:\nWhat if the matrix is stored on disk, and the memory is limited such that you can only load at most one row of the matrix into the memory at once?\nWhat if the matrix is so large that you can only load up a partial row into the memory at once?", "notes": ""}, "762": {"label": "Easy", "title": "Prime Number of Set Bits in Binary Representation", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6629999999999999, "total_accepted": 65700.0, "total_submissions": 99100.0, "testcase_example": "'6\\n10'", "body": "Given two integers left and right, return the count of numbers in the inclusive range [left, right] having a prime number of set bits in their binary representation.\nRecall that the number of set bits an integer has is the number of 1's present when written in binary.\nFor example, 21 written in binary is 10101, which has 3 set bits.", "examples": [{"full_text": "Example 1:\nInput: left = 6, right = 10\nOutput: 4\nExplanation:\n6 -> 110 (2 set bits, 2 is prime)\n7 -> 111 (3 set bits, 3 is prime)\n8 -> 1000 (1 set bit, 1 is not prime)\n9 -> 1001 (2 set bits, 2 is prime)\n10 -> 1010 (2 set bits, 2 is prime)\n4 numbers have a prime number of set bits.", "input": "Input: left = 6, right = 10", "output": "Output: 4", "explanation": "Explanation:\n6 -> 110 (2 set bits, 2 is prime)\n7 -> 111 (3 set bits, 3 is prime)\n8 -> 1000 (1 set bit, 1 is not prime)\n9 -> 1001 (2 set bits, 2 is prime)\n10 -> 1010 (2 set bits, 2 is prime)\n4 numbers have a prime number of set bits."}, {"full_text": "Example 2:\nInput: left = 10, right = 15\nOutput: 5\nExplanation:\n10 -> 1010 (2 set bits, 2 is prime)\n11 -> 1011 (3 set bits, 3 is prime)\n12 -> 1100 (2 set bits, 2 is prime)\n13 -> 1101 (3 set bits, 3 is prime)\n14 -> 1110 (3 set bits, 3 is prime)\n15 -> 1111 (4 set bits, 4 is not prime)\n5 numbers have a prime number of set bits.", "input": "Input: left = 10, right = 15", "output": "Output: 5", "explanation": "Explanation:\n10 -> 1010 (2 set bits, 2 is prime)\n11 -> 1011 (3 set bits, 3 is prime)\n12 -> 1100 (2 set bits, 2 is prime)\n13 -> 1101 (3 set bits, 3 is prime)\n14 -> 1110 (3 set bits, 3 is prime)\n15 -> 1111 (4 set bits, 4 is not prime)\n5 numbers have a prime number of set bits."}], "constraints": "Constraints:\n1 <= left <= right <= 10^6\n0 <= right - left <= 10^4", "notes": ""}, "748": {"label": "Easy", "title": "Shortest Completing Word", "tags": "algorithms,depth-first-search", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5870000000000001, "total_accepted": 47700.0, "total_submissions": 81200.0, "testcase_example": "'\"1s3 PSt\"\\n[\"step\",\"steps\",\"stripe\",\"stepple\"]'", "body": "Given a string licensePlate and an array of strings words, find the shortest completing word in words.\nA completing word is a word that contains all the letters in licensePlate. Ignore numbers and spaces in licensePlate, and treat letters as case insensitive. If a letter appears more than once in licensePlate, then it must appear in the word the same number of times or more.\nFor example, if licensePlate = \"aBc 12c\", then it contains letters 'a', 'b' (ignoring case), and 'c' twice. Possible completing words are \"abccdef\", \"caaacab\", and \"cbca\".\nReturn the shortest completing word in words. It is guaranteed an answer exists. If there are multiple shortest completing words, return the first one that occurs in words.", "examples": [{"full_text": "Example 1:\nInput: licensePlate = \"1s3 PSt\", words = [\"step\",\"steps\",\"stripe\",\"stepple\"]\nOutput: \"steps\"\nExplanation: licensePlate contains letters 's', 'p', 's' (ignoring case), and 't'.\n\"step\" contains 't' and 'p', but only contains 1 's'.\n\"steps\" contains 't', 'p', and both 's' characters.\n\"stripe\" is missing an 's'.\n\"stepple\" is missing an 's'.\nSince \"steps\" is the only word containing all the letters, that is the answer.", "input": "Input: licensePlate = \"1s3 PSt\", words = [\"step\",\"steps\",\"stripe\",\"stepple\"]", "output": "Output: \"steps\"", "explanation": "Explanation: licensePlate contains letters 's', 'p', 's' (ignoring case), and 't'.\n\"step\" contains 't' and 'p', but only contains 1 's'.\n\"steps\" contains 't', 'p', and both 's' characters.\n\"stripe\" is missing an 's'.\n\"stepple\" is missing an 's'.\nSince \"steps\" is the only word containing all the letters, that is the answer."}, {"full_text": "Example 2:\nInput: licensePlate = \"1s3 456\", words = [\"looks\",\"pest\",\"stew\",\"show\"]\nOutput: \"pest\"\nExplanation: licensePlate only contains the letter 's'. All the words contain 's', but among these \"pest\", \"stew\", and \"show\" are shortest. The answer is \"pest\" because it is the word that appears earliest of the 3.", "input": "Input: licensePlate = \"1s3 456\", words = [\"looks\",\"pest\",\"stew\",\"show\"]", "output": "Output: \"pest\"", "explanation": "Explanation: licensePlate only contains the letter 's'. All the words contain 's', but among these \"pest\", \"stew\", and \"show\" are shortest. The answer is \"pest\" because it is the word that appears earliest of the 3."}], "constraints": "Constraints:\n1 <= licensePlate.length <= 7\nlicensePlate contains digits, letters (uppercase or lowercase), or space ' '.\n1 <= words.length <= 1000\n1 <= words[i].length <= 15\nwords[i] consists of lower case English letters.", "notes": ""}, "747": {"label": "Easy", "title": "Largest Number At Least Twice of Others", "tags": "algorithms,hash-table", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4487, "total_accepted": 146900.0, "total_submissions": 327500.0, "testcase_example": "'[3,6,1,0]'", "body": "You are given an integer array nums where the largest integer is unique.\nDetermine whether the largest element in the array is at least twice as much as every other number in the array. If it is, return the index of the largest element, or return -1 otherwise.", "examples": [{"full_text": "Example 1:\nInput: nums = [3,6,1,0]\nOutput: 1\nExplanation: 6 is the largest integer.\nFor every other number in the array x, 6 is at least twice as big as x.\nThe index of value 6 is 1, so we return 1.", "input": "Input: nums = [3,6,1,0]", "output": "Output: 1", "explanation": "Explanation: 6 is the largest integer.\nFor every other number in the array x, 6 is at least twice as big as x.\nThe index of value 6 is 1, so we return 1."}, {"full_text": "Example 2:\nInput: nums = [1,2,3,4]\nOutput: -1\nExplanation: 4 is less than twice the value of 3, so we return -1.", "input": "Input: nums = [1,2,3,4]", "output": "Output: -1", "explanation": "Explanation: 4 is less than twice the value of 3, so we return -1."}, {"full_text": "Example 3:\nInput: nums = [1]\nOutput: 0\nExplanation: 1 is trivially at least twice the value as any other number because there are no other numbers.", "input": "Input: nums = [1]", "output": "Output: 0", "explanation": "Explanation: 1 is trivially at least twice the value as any other number because there are no other numbers."}], "constraints": "Constraints:\n1 <= nums.length <= 50\n0 <= nums[i] <= 100\nThe largest element in nums is unique.", "notes": ""}, "746": {"label": "Easy", "title": "Min Cost Climbing Stairs", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5784, "total_accepted": 412800.0, "total_submissions": 713700.0, "testcase_example": "'[10,15,20]'", "body": "You are given an integer array cost where cost[i] is the cost of i^th step on a staircase. Once you pay the cost, you can either climb one or two steps.\nYou can either start from the step with index 0, or the step with index 1.\nReturn the minimum cost to reach the top of the floor.", "examples": [{"full_text": "Example 1:\nInput: cost = [10,15,20]\nOutput: 15\nExplanation: You will start at index 1.\n- Pay 15 and climb two steps to reach the top.\nThe total cost is 15.", "input": "Input: cost = [10,15,20]", "output": "Output: 15", "explanation": "Explanation: You will start at index 1.\n- Pay 15 and climb two steps to reach the top.\nThe total cost is 15."}, {"full_text": "Example 2:\nInput: cost = [1,100,1,1,1,100,1,1,100,1]\nOutput: 6\nExplanation: You will start at index 0.\n- Pay 1 and climb two steps to reach index 2.\n- Pay 1 and climb two steps to reach index 4.\n- Pay 1 and climb two steps to reach index 6.\n- Pay 1 and climb one step to reach index 7.\n- Pay 1 and climb two steps to reach index 9.\n- Pay 1 and climb one step to reach the top.\nThe total cost is 6.", "input": "Input: cost = [1,100,1,1,1,100,1,1,100,1]", "output": "Output: 6", "explanation": "Explanation: You will start at index 0.\n- Pay 1 and climb two steps to reach index 2.\n- Pay 1 and climb two steps to reach index 4.\n- Pay 1 and climb two steps to reach index 6.\n- Pay 1 and climb one step to reach index 7.\n- Pay 1 and climb two steps to reach index 9.\n- Pay 1 and climb one step to reach the top.\nThe total cost is 6."}], "constraints": "Constraints:\n2 <= cost.length <= 1000\n0 <= cost[i] <= 999", "notes": ""}, "744": {"label": "Easy", "title": "Find Smallest Letter Greater Than Target", "tags": "algorithms,trie", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.45539999999999997, "total_accepted": 164100.0, "total_submissions": 360400.0, "testcase_example": "'[\"c\",\"f\",\"j\"]\\n\"a\"'", "body": "Given a characters array letters that is sorted in non-decreasing order and a character target, return the smallest character in the array that is larger than target.\nNote that the letters wrap around.\nFor example, if target == 'z' and letters == ['a', 'b'], the answer is 'a'.", "examples": [{"full_text": "Example 1:\nInput: letters = [\"c\",\"f\",\"j\"], target = \"a\"\nOutput: \"c\"", "input": "Input: letters = [\"c\",\"f\",\"j\"], target = \"a\"", "output": "Output: \"c\"", "explanation": ""}, {"full_text": "Example 2:\nInput: letters = [\"c\",\"f\",\"j\"], target = \"c\"\nOutput: \"f\"", "input": "Input: letters = [\"c\",\"f\",\"j\"], target = \"c\"", "output": "Output: \"f\"", "explanation": ""}, {"full_text": "Example 3:\nInput: letters = [\"c\",\"f\",\"j\"], target = \"d\"\nOutput: \"f\"", "input": "Input: letters = [\"c\",\"f\",\"j\"], target = \"d\"", "output": "Output: \"f\"", "explanation": ""}], "constraints": "Constraints:\n2 <= letters.length <= 10^4\nletters[i] is a lowercase English letter.\nletters is sorted in non-decreasing order.\nletters contains at least two different characters.\ntarget is a lowercase English letter.", "notes": ""}, "733": {"label": "Easy", "title": "Flood Fill", "tags": "algorithms,depth-first-search", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5761999999999999, "total_accepted": 348800.0, "total_submissions": 605400.0, "testcase_example": "'[[1,1,1],[1,1,0],[1,0,1]]\\n1\\n1\\n2'", "body": "An image is represented by an m x n integer grid image where image[i][j] represents the pixel value of the image.\nYou are also given three integers sr, sc, and newColor. You should perform a flood fill on the image starting from the pixel image[sr][sc].\nTo perform a flood fill, consider the starting pixel, plus any pixels connected 4-directionally to the starting pixel of the same color as the starting pixel, plus any pixels connected 4-directionally to those pixels (also with the same color), and so on. Replace the color of all of the aforementioned pixels with newColor.\nReturn the modified image after performing the flood fill.", "examples": [{"full_text": "Example 1:\nInput: image = [[1,1,1],[1,1,0],[1,0,1]], sr = 1, sc = 1, newColor = 2\nOutput: [[2,2,2],[2,2,0],[2,0,1]]\nExplanation: From the center of the image with position (sr, sc) = (1, 1) (i.e., the red pixel), all pixels connected by a path of the same color as the starting pixel (i.e., the blue pixels) are colored with the new color.\nNote the bottom corner is not colored 2, because it is not 4-directionally connected to the starting pixel.", "input": "Input: image = [[1,1,1],[1,1,0],[1,0,1]], sr = 1, sc = 1, newColor = 2", "output": "Output: [[2,2,2],[2,2,0],[2,0,1]]", "explanation": "Explanation: From the center of the image with position (sr, sc) = (1, 1) (i.e., the red pixel), all pixels connected by a path of the same color as the starting pixel (i.e., the blue pixels) are colored with the new color.\nNote the bottom corner is not colored 2, because it is not 4-directionally connected to the starting pixel."}, {"full_text": "Example 2:\nInput: image = [[0,0,0],[0,0,0]], sr = 0, sc = 0, newColor = 2\nOutput: [[2,2,2],[2,2,2]]", "input": "Input: image = [[0,0,0],[0,0,0]], sr = 0, sc = 0, newColor = 2", "output": "Output: [[2,2,2],[2,2,2]]", "explanation": ""}], "constraints": "Constraints:\nm == image.length\nn == image[i].length\n1 <= m, n <= 50\n0 <= image[i][j], newColor < 2^16\n0 <= sr <\nm\n0 <= sc <\nn", "notes": ""}, "728": {"label": "Easy", "title": "Self Dividing Numbers", "tags": "algorithms,math", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7673000000000001, "total_accepted": 170700.0, "total_submissions": 222500.0, "testcase_example": "'1\\n22'", "body": "A self-dividing number is a number that is divisible by every digit it contains.\nFor example, 128 is a self-dividing number because 128 % 1 == 0, 128 % 2 == 0, and 128 % 8 == 0.\nA self-dividing number is not allowed to contain the digit zero.\nGiven two integers left and right, return a list of all the self-dividing numbers in the range [left, right].", "examples": [{"full_text": "Example 1:\nInput: left = 1, right = 22\nOutput: [1,2,3,4,5,6,7,8,9,11,12,15,22]", "input": "Input: left = 1, right = 22", "output": "Output: [1,2,3,4,5,6,7,8,9,11,12,15,22]", "explanation": ""}, {"full_text": "Example 2:\nInput: left = 47, right = 85\nOutput: [48,55,66,77]", "input": "Input: left = 47, right = 85", "output": "Output: [48,55,66,77]", "explanation": ""}], "constraints": "Constraints:\n1 <= left <= right <= 10^4", "notes": ""}, "724": {"label": "Easy", "title": "Find Pivot Index", "tags": "algorithms,array", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5081, "total_accepted": 281200.0, "total_submissions": 553400.0, "testcase_example": "'[1,7,3,6,5,6]'", "body": "Given an array of integers nums, calculate the pivot index of this array.\nThe pivot index is the index where the sum of all the numbers strictly to the left of the index is equal to the sum of all the numbers strictly to the index's right.\nIf the index is on the left edge of the array, then the left sum is 0 because there are no elements to the left. This also applies to the right edge of the array.\nReturn the leftmost pivot index. If no such index exists, return -1.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,7,3,6,5,6]\nOutput: 3\nExplanation:\nThe pivot index is 3.\nLeft sum = nums[0] + nums[1] + nums[2] = 1 + 7 + 3 = 11\nRight sum = nums[4] + nums[5] = 5 + 6 = 11", "input": "Input: nums = [1,7,3,6,5,6]", "output": "Output: 3", "explanation": "Explanation:\nThe pivot index is 3.\nLeft sum = nums[0] + nums[1] + nums[2] = 1 + 7 + 3 = 11\nRight sum = nums[4] + nums[5] = 5 + 6 = 11"}, {"full_text": "Example 2:\nInput: nums = [1,2,3]\nOutput: -1\nExplanation:\nThere is no index that satisfies the conditions in the problem statement.", "input": "Input: nums = [1,2,3]", "output": "Output: -1", "explanation": "Explanation:\nThere is no index that satisfies the conditions in the problem statement."}, {"full_text": "Example 3:\nInput: nums = [2,1,-1]\nOutput: 0\nExplanation:\nThe pivot index is 0.\nLeft sum = 0 (no elements to the left of index 0)\nRight sum = nums[1] + nums[2] = 1 + -1 = 0", "input": "Input: nums = [2,1,-1]", "output": "Output: 0", "explanation": "Explanation:\nThe pivot index is 0.\nLeft sum = 0 (no elements to the left of index 0)\nRight sum = nums[1] + nums[2] = 1 + -1 = 0"}], "constraints": "Constraints:\n1 <= nums.length <= 10^4\n-1000 <= nums[i] <= 1000", "notes": "Note: This question is the same as\n1991:\nhttps://leetcode.com/problems/find-the-middle-index-in-array/"}, "717": {"label": "Easy", "title": "1-bit and 2-bit Characters", "tags": "algorithms,array", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4622, "total_accepted": 100500.0, "total_submissions": 217500.0, "testcase_example": "'[1,0,0]'", "body": "We have two special characters:\nThe first character can be represented by one bit 0.\nThe second character can be represented by two bits (10 or 11).\nGiven a binary array bits that ends with 0, return true if the last character must be a one-bit character.", "examples": [{"full_text": "Example 1:\nInput: bits = [1,0,0]\nOutput: true\nExplanation: The only way to decode it is two-bit character and one-bit character.\nSo the last character is one-bit character.", "input": "Input: bits = [1,0,0]", "output": "Output: true", "explanation": "Explanation: The only way to decode it is two-bit character and one-bit character.\nSo the last character is one-bit character."}, {"full_text": "Example 2:\nInput: bits = [1,1,1,0]\nOutput: false\nExplanation: The only way to decode it is two-bit character and two-bit character.\nSo the last character is not one-bit character.", "input": "Input: bits = [1,1,1,0]", "output": "Output: false", "explanation": "Explanation: The only way to decode it is two-bit character and two-bit character.\nSo the last character is not one-bit character."}], "constraints": "Constraints:\n1 <= bits.length <= 1000\nbits[i] is either 0 or 1.", "notes": ""}, "709": {"label": "Easy", "title": "To Lower Case", "tags": "algorithms,tree", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.8107, "total_accepted": 322300.0, "total_submissions": 397600.0, "testcase_example": "'\"Hello\"'", "body": "Given a string s, return the string after replacing every uppercase letter with the same lowercase letter.", "examples": [{"full_text": "Example 1:\nInput: s = \"Hello\"\nOutput: \"hello\"", "input": "Input: s = \"Hello\"", "output": "Output: \"hello\"", "explanation": ""}, {"full_text": "Example 2:\nInput: s = \"here\"\nOutput: \"here\"", "input": "Input: s = \"here\"", "output": "Output: \"here\"", "explanation": ""}, {"full_text": "Example 3:\nInput: s = \"LOVELY\"\nOutput: \"lovely\"", "input": "Input: s = \"LOVELY\"", "output": "Output: \"lovely\"", "explanation": ""}], "constraints": "Constraints:\n1 <= s.length <= 100\ns consists of printable ASCII characters.", "notes": ""}, "706": {"label": "Easy", "title": "Design HashMap", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6378, "total_accepted": 262500.0, "total_submissions": 411500.0, "testcase_example": "'[\"MyHashMap\",\"put\",\"put\",\"get\",\"get\",\"put\",\"get\",\"remove\",\"get\"]\\n' +\n  '[[],[1,1],[2,2],[1],[3],[2,1],[2],[2],[2]]'", "body": "Design a HashMap without using any built-in hash table libraries.\nImplement the MyHashMap class:\nMyHashMap() initializes the object with an empty map.\nvoid put(int key, int value) inserts a (key, value) pair into the HashMap. If the key already exists in the map, update the corresponding value.\nint get(int key) returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key.\nvoid remove(key) removes the key and its corresponding value if the map contains the mapping for the key.", "examples": [{"full_text": "Example 1:\nInput\n[\"MyHashMap\", \"put\", \"put\", \"get\", \"get\", \"put\", \"get\", \"remove\", \"get\"]\n[[], [1, 1], [2, 2], [1], [3], [2, 1], [2], [2], [2]]\nOutput\n[null, null, null, 1, -1, null, 1, null, -1]\nExplanation\nMyHashMap myHashMap = new MyHashMap();\nmyHashMap.put(1, 1); // The map is now [[1,1]]\nmyHashMap.put(2, 2); // The map is now [[1,1], [2,2]]\nmyHashMap.get(1); // return 1, The map is now [[1,1], [2,2]]\nmyHashMap.get(3); // return -1 (i.e., not found), The map is now [[1,1], [2,2]]\nmyHashMap.put(2, 1); // The map is now [[1,1], [2,1]] (i.e., update the existing value)\nmyHashMap.get(2); // return 1, The map is now [[1,1], [2,1]]\nmyHashMap.remove(2); // remove the mapping for 2, The map is now [[1,1]]\nmyHashMap.get(2); // return -1 (i.e., not found), The map is now [[1,1]]", "input": "Input\n[\"MyHashMap\", \"put\", \"put\", \"get\", \"get\", \"put\", \"get\", \"remove\", \"get\"]\n[[], [1, 1], [2, 2], [1], [3], [2, 1], [2], [2], [2]]", "output": "Output\n[null, null, null, 1, -1, null, 1, null, -1]", "explanation": "Explanation\nMyHashMap myHashMap = new MyHashMap();\nmyHashMap.put(1, 1); // The map is now [[1,1]]\nmyHashMap.put(2, 2); // The map is now [[1,1], [2,2]]\nmyHashMap.get(1); // return 1, The map is now [[1,1], [2,2]]\nmyHashMap.get(3); // return -1 (i.e., not found), The map is now [[1,1], [2,2]]\nmyHashMap.put(2, 1); // The map is now [[1,1], [2,1]] (i.e., update the existing value)\nmyHashMap.get(2); // return 1, The map is now [[1,1], [2,1]]\nmyHashMap.remove(2); // remove the mapping for 2, The map is now [[1,1]]\nmyHashMap.get(2); // return -1 (i.e., not found), The map is now [[1,1]]"}], "constraints": "Constraints:\n0 <= key, value <= 10^6\nAt most 10^4 calls will be made to put, get, and remove.", "notes": ""}, "705": {"label": "Easy", "title": "Design HashSet", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6379, "total_accepted": 163900.0, "total_submissions": 256899.99999999997, "testcase_example": "'[\"MyHashSet\",\"add\",\"add\",\"contains\",\"contains\",\"add\",\"contains\",\"remove\",\"contains\"]\\n' +\n  '[[],[1],[2],[1],[3],[2],[2],[2],[2]]'", "body": "Design a HashSet without using any built-in hash table libraries.\nImplement MyHashSet class:\nvoid add(key) Inserts the value key into the HashSet.\nbool contains(key) Returns whether the value key exists in the HashSet or not.\nvoid remove(key) Removes the value key in the HashSet. If key does not exist in the HashSet, do nothing.", "examples": [{"full_text": "Example 1:\nInput\n[\"MyHashSet\", \"add\", \"add\", \"contains\", \"contains\", \"add\", \"contains\", \"remove\", \"contains\"]\n[[], [1], [2], [1], [3], [2], [2], [2], [2]]\nOutput\n[null, null, null, true, false, null, true, null, false]\nExplanation\nMyHashSet myHashSet = new MyHashSet();\nmyHashSet.add(1); // set = [1]\nmyHashSet.add(2); // set = [1, 2]\nmyHashSet.contains(1); // return True\nmyHashSet.contains(3); // return False, (not found)\nmyHashSet.add(2); // set = [1, 2]\nmyHashSet.contains(2); // return True\nmyHashSet.remove(2); // set = [1]\nmyHashSet.contains(2); // return False, (already removed)", "input": "Input\n[\"MyHashSet\", \"add\", \"add\", \"contains\", \"contains\", \"add\", \"contains\", \"remove\", \"contains\"]\n[[], [1], [2], [1], [3], [2], [2], [2], [2]]", "output": "Output\n[null, null, null, true, false, null, true, null, false]", "explanation": "Explanation\nMyHashSet myHashSet = new MyHashSet();\nmyHashSet.add(1); // set = [1]\nmyHashSet.add(2); // set = [1, 2]\nmyHashSet.contains(1); // return True\nmyHashSet.contains(3); // return False, (not found)\nmyHashSet.add(2); // set = [1, 2]\nmyHashSet.contains(2); // return True\nmyHashSet.remove(2); // set = [1]\nmyHashSet.contains(2); // return False, (already removed)"}], "constraints": "Constraints:\n0 <= key <= 10^6\nAt most 10^4 calls will be made to add, remove, and contains.", "notes": ""}, "704": {"label": "Easy", "title": "Binary Search", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5461, "total_accepted": 647900.0, "total_submissions": 1200000.0, "testcase_example": "'[-1,0,3,5,9,12]\\n9'", "body": "Given an array of integers nums which is sorted in ascending order, and an integer target, write a function to search target in nums. If target exists, then return its index. Otherwise, return -1.\nYou must write an algorithm with O(log n) runtime complexity.", "examples": [{"full_text": "Example 1:\nInput: nums = [-1,0,3,5,9,12], target = 9\nOutput: 4\nExplanation: 9 exists in nums and its index is 4", "input": "Input: nums = [-1,0,3,5,9,12], target = 9", "output": "Output: 4", "explanation": "Explanation: 9 exists in nums and its index is 4"}, {"full_text": "Example 2:\nInput: nums = [-1,0,3,5,9,12], target = 2\nOutput: -1\nExplanation: 2 does not exist in nums so return -1", "input": "Input: nums = [-1,0,3,5,9,12], target = 2", "output": "Output: -1", "explanation": "Explanation: 2 does not exist in nums so return -1"}], "constraints": "Constraints:\n1 <= nums.length <= 10^4\n-10^4 < nums[i], target < 10^4\nAll the integers in nums are unique.\nnums is sorted in ascending order.", "notes": ""}, "703": {"label": "Easy", "title": "Kth Largest Element in a Stream", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5252, "total_accepted": 183900.0, "total_submissions": 350100.0, "testcase_example": "'[\"KthLargest\",\"add\",\"add\",\"add\",\"add\",\"add\"]\\n' +\n  '[[3,[4,5,8,2]],[3],[5],[10],[9],[4]]'", "body": "Design a class to find the k^th largest element in a stream. Note that it is the k^th largest element in the sorted order, not the k^th distinct element.\nImplement KthLargest class:\nKthLargest(int k, int[] nums) Initializes the object with the integer k and the stream of integers nums.\nint add(int val) Appends the integer val to the stream and returns the element representing the k^th largest element in the stream.", "examples": [{"full_text": "Example 1:\nInput\n[\"KthLargest\", \"add\", \"add\", \"add\", \"add\", \"add\"]\n[[3, [4, 5, 8, 2]], [3], [5], [10], [9], [4]]\nOutput\n[null, 4, 5, 5, 8, 8]\nExplanation\nKthLargest kthLargest = new KthLargest(3, [4, 5, 8, 2]);\nkthLargest.add(3); // return 4\nkthLargest.add(5); // return 5\nkthLargest.add(10); // return 5\nkthLargest.add(9); // return 8\nkthLargest.add(4); // return 8", "input": "Input\n[\"KthLargest\", \"add\", \"add\", \"add\", \"add\", \"add\"]\n[[3, [4, 5, 8, 2]], [3], [5], [10], [9], [4]]", "output": "Output\n[null, 4, 5, 5, 8, 8]", "explanation": "Explanation\nKthLargest kthLargest = new KthLargest(3, [4, 5, 8, 2]);\nkthLargest.add(3); // return 4\nkthLargest.add(5); // return 5\nkthLargest.add(10); // return 5\nkthLargest.add(9); // return 8\nkthLargest.add(4); // return 8"}], "constraints": "Constraints:\n1 <= k <= 10^4\n0 <= nums.length <= 10^4\n-10^4 <= nums[i] <= 10^4\n-10^4 <= val <= 10^4\nAt most 10^4 calls will be made to add.\nIt is guaranteed that there will be at least k elements in the array when you search for the k^th element.", "notes": ""}, "700": {"label": "Easy", "title": "Search in a Binary Search Tree", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7506, "total_accepted": 393400.0, "total_submissions": 524100.0, "testcase_example": "'[4,2,7,1,3]\\n2'", "body": "You are given the root of a binary search tree (BST) and an integer val.\nFind the node in the BST that the node's value equals val and return the subtree rooted with that node. If such a node does not exist, return null.", "examples": [{"full_text": "Example 1:\nInput: root = [4,2,7,1,3], val = 2\nOutput: [2,1,3]", "input": "Input: root = [4,2,7,1,3], val = 2", "output": "Output: [2,1,3]", "explanation": ""}, {"full_text": "Example 2:\nInput: root = [4,2,7,1,3], val = 5\nOutput: []", "input": "Input: root = [4,2,7,1,3], val = 5", "output": "Output: []", "explanation": ""}], "constraints": "Constraints:\nThe number of nodes in the tree is in the range [1, 5000].\n1 <= Node.val <= 10^7\nroot is a binary search tree.\n1 <= val <= 10^7", "notes": ""}, "697": {"label": "Easy", "title": "Degree of an Array", "tags": "algorithms,array", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5552, "total_accepted": 141100.0, "total_submissions": 254200.0, "testcase_example": "'[1,2,2,3,1]'", "body": "Given a non-empty array of non-negative integers nums, the degree of this array is defined as the maximum frequency of any one of its elements.\nYour task is to find the smallest possible length of a (contiguous) subarray of nums, that has the same degree as nums.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,2,2,3,1]\nOutput: 2\nExplanation:\nThe input array has a degree of 2 because both elements 1 and 2 appear twice.\nOf the subarrays that have the same degree:\n[1, 2, 2, 3, 1], [1, 2, 2, 3], [2, 2, 3, 1], [1, 2, 2], [2, 2, 3], [2, 2]\nThe shortest length is 2. So return 2.", "input": "Input: nums = [1,2,2,3,1]", "output": "Output: 2", "explanation": "Explanation:\nThe input array has a degree of 2 because both elements 1 and 2 appear twice.\nOf the subarrays that have the same degree:\n[1, 2, 2, 3, 1], [1, 2, 2, 3], [2, 2, 3, 1], [1, 2, 2], [2, 2, 3], [2, 2]\nThe shortest length is 2. So return 2."}, {"full_text": "Example 2:\nInput: nums = [1,2,2,3,1,4,2]\nOutput: 6\nExplanation:\nThe degree is 3 because the element 2 is repeated 3 times.\nSo [2,2,3,1,4,2] is the shortest subarray, therefore returning 6.", "input": "Input: nums = [1,2,2,3,1,4,2]", "output": "Output: 6", "explanation": "Explanation:\nThe degree is 3 because the element 2 is repeated 3 times.\nSo [2,2,3,1,4,2] is the shortest subarray, therefore returning 6."}], "constraints": "Constraints:\nnums.length will be between 1 and 50,000.\nnums[i] will be an integer between 0 and 49,999.", "notes": ""}, "696": {"label": "Easy", "title": "Count Binary Substrings", "tags": "algorithms,string", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6439, "total_accepted": 132000.0, "total_submissions": 205000.0, "testcase_example": "'\"00110011\"'", "body": "Give a binary string s, return the number of non-empty substrings that have the same number of 0's and 1's, and all the 0's and all the 1's in these substrings are grouped consecutively.\nSubstrings that occur multiple times are counted the number of times they occur.", "examples": [{"full_text": "Example 1:\nInput: s = \"00110011\"\nOutput: 6\nExplanation: There are 6 substrings that have equal number of consecutive 1's and 0's: \"0011\", \"01\", \"1100\", \"10\", \"0011\", and \"01\".\nNotice that some of these substrings repeat and are counted the number of times they occur.\nAlso, \"00110011\" is not a valid substring because all the 0's (and 1's) are not grouped together.", "input": "Input: s = \"00110011\"", "output": "Output: 6", "explanation": "Explanation: There are 6 substrings that have equal number of consecutive 1's and 0's: \"0011\", \"01\", \"1100\", \"10\", \"0011\", and \"01\".\nNotice that some of these substrings repeat and are counted the number of times they occur.\nAlso, \"00110011\" is not a valid substring because all the 0's (and 1's) are not grouped together."}, {"full_text": "Example 2:\nInput: s = \"10101\"\nOutput: 4\nExplanation: There are 4 substrings: \"10\", \"01\", \"10\", \"01\" that have equal number of consecutive 1's and 0's.", "input": "Input: s = \"10101\"", "output": "Output: 4", "explanation": "Explanation: There are 4 substrings: \"10\", \"01\", \"10\", \"01\" that have equal number of consecutive 1's and 0's."}], "constraints": "Constraints:\n1 <= s.length <= 10^5\ns[i] is either '0' or '1'.", "notes": ""}, "693": {"label": "Easy", "title": "Binary Number with Alternating Bits", "tags": "algorithms,bit-manipulation", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6068, "total_accepted": 88600.0, "total_submissions": 146000.0, "testcase_example": "'5'", "body": "Given a positive integer, check whether it has alternating bits: namely, if two adjacent bits will always have different values.", "examples": [{"full_text": "Example 1:\nInput: n = 5\nOutput: true\nExplanation: The binary representation of 5 is: 101", "input": "Input: n = 5", "output": "Output: true", "explanation": "Explanation: The binary representation of 5 is: 101"}, {"full_text": "Example 2:\nInput: n = 7\nOutput: false\nExplanation: The binary representation of 7 is: 111.", "input": "Input: n = 7", "output": "Output: false", "explanation": "Explanation: The binary representation of 7 is: 111."}, {"full_text": "Example 3:\nInput: n = 11\nOutput: false\nExplanation: The binary representation of 11 is: 1011.", "input": "Input: n = 11", "output": "Output: false", "explanation": "Explanation: The binary representation of 11 is: 1011."}], "constraints": "Constraints:\n1 <= n <= 2^31 - 1", "notes": ""}, "682": {"label": "Easy", "title": "Baseball Game", "tags": "algorithms,amazon,stack", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6920000000000001, "total_accepted": 138100.0, "total_submissions": 199600.0, "testcase_example": "'[\"5\",\"2\",\"C\",\"D\",\"+\"]'", "body": "You are keeping score for a baseball game with strange rules. The game consists of several rounds, where the scores of past rounds may affect future rounds' scores.\nAt the beginning of the game, you start with an empty record. You are given a list of strings ops, where ops[i] is the i^th operation you must apply to the record and is one of the following:\nAn integer x - Record a new score of x.\n\"+\" - Record a new score that is the sum of the previous two scores. It is guaranteed there will always be two previous scores.\n\"D\" - Record a new score that is double the previous score. It is guaranteed there will always be a previous score.\n\"C\" - Invalidate the previous score, removing it from the record. It is guaranteed there will always be a previous score.\nReturn the sum of all the scores on the record.", "examples": [{"full_text": "Example 1:\nInput: ops = [\"5\",\"2\",\"C\",\"D\",\"+\"]\nOutput: 30\nExplanation:\n\"5\" - Add 5 to the record, record is now [5].\n\"2\" - Add 2 to the record, record is now [5, 2].\n\"C\" - Invalidate and remove the previous score, record is now [5].\n\"D\" - Add 2 * 5 = 10 to the record, record is now [5, 10].\n\"+\" - Add 5 + 10 = 15 to the record, record is now [5, 10, 15].\nThe total sum is 5 + 10 + 15 = 30.", "input": "Input: ops = [\"5\",\"2\",\"C\",\"D\",\"+\"]", "output": "Output: 30", "explanation": "Explanation:\n\"5\" - Add 5 to the record, record is now [5].\n\"2\" - Add 2 to the record, record is now [5, 2].\n\"C\" - Invalidate and remove the previous score, record is now [5].\n\"D\" - Add 2 * 5 = 10 to the record, record is now [5, 10].\n\"+\" - Add 5 + 10 = 15 to the record, record is now [5, 10, 15].\nThe total sum is 5 + 10 + 15 = 30."}, {"full_text": "Example 2:\nInput: ops = [\"5\",\"-2\",\"4\",\"C\",\"D\",\"9\",\"+\",\"+\"]\nOutput: 27\nExplanation:\n\"5\" - Add 5 to the record, record is now [5].\n\"-2\" - Add -2 to the record, record is now [5, -2].\n\"4\" - Add 4 to the record, record is now [5, -2, 4].\n\"C\" - Invalidate and remove the previous score, record is now [5, -2].\n\"D\" - Add 2 * -2 = -4 to the record, record is now [5, -2, -4].\n\"9\" - Add 9 to the record, record is now [5, -2, -4, 9].\n\"+\" - Add -4 + 9 = 5 to the record, record is now [5, -2, -4, 9, 5].\n\"+\" - Add 9 + 5 = 14 to the record, record is now [5, -2, -4, 9, 5, 14].\nThe total sum is 5 + -2 + -4 + 9 + 5 + 14 = 27.", "input": "Input: ops = [\"5\",\"-2\",\"4\",\"C\",\"D\",\"9\",\"+\",\"+\"]", "output": "Output: 27", "explanation": "Explanation:\n\"5\" - Add 5 to the record, record is now [5].\n\"-2\" - Add -2 to the record, record is now [5, -2].\n\"4\" - Add 4 to the record, record is now [5, -2, 4].\n\"C\" - Invalidate and remove the previous score, record is now [5, -2].\n\"D\" - Add 2 * -2 = -4 to the record, record is now [5, -2, -4].\n\"9\" - Add 9 to the record, record is now [5, -2, -4, 9].\n\"+\" - Add -4 + 9 = 5 to the record, record is now [5, -2, -4, 9, 5].\n\"+\" - Add 9 + 5 = 14 to the record, record is now [5, -2, -4, 9, 5, 14].\nThe total sum is 5 + -2 + -4 + 9 + 5 + 14 = 27."}, {"full_text": "Example 3:\nInput: ops = [\"1\"]\nOutput: 1", "input": "Input: ops = [\"1\"]", "output": "Output: 1", "explanation": ""}], "constraints": "Constraints:\n1 <= ops.length <= 1000\nops[i] is \"C\", \"D\", \"+\", or a string representing an integer in the range [-3 * 10^4, 3 * 10^4].\nFor operation \"+\", there will always be at least two previous scores on the record.\nFor operations \"C\" and \"D\", there will always be at least one previous score on the record.", "notes": ""}, "680": {"label": "Easy", "title": "Valid Palindrome II", "tags": "algorithms,facebook,string", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.38439999999999996, "total_accepted": 399500.0, "total_submissions": 1000000.0, "testcase_example": "'\"aba\"'", "body": "Given a string s, return true if the s can be palindrome after deleting at most one character from it.", "examples": [{"full_text": "Example 1:\nInput: s = \"aba\"\nOutput: true", "input": "Input: s = \"aba\"", "output": "Output: true", "explanation": ""}, {"full_text": "Example 2:\nInput: s = \"abca\"\nOutput: true\nExplanation: You could delete the character 'c'.", "input": "Input: s = \"abca\"", "output": "Output: true", "explanation": "Explanation: You could delete the character 'c'."}, {"full_text": "Example 3:\nInput: s = \"abc\"\nOutput: false", "input": "Input: s = \"abc\"", "output": "Output: false", "explanation": ""}], "constraints": "Constraints:\n1 <= s.length <= 10^5\ns consists of lowercase English letters.", "notes": ""}, "674": {"label": "Easy", "title": "Longest Continuous Increasing Subsequence", "tags": "algorithms,facebook,array", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4808, "total_accepted": 183800.0, "total_submissions": 382400.0, "testcase_example": "'[1,3,5,4,7]'", "body": "Given an unsorted array of integers nums, return the length of the longest continuous increasing subsequence (i.e. subarray). The subsequence must be strictly increasing.\nA continuous increasing subsequence is defined by two indices l and r (l < r) such that it is [nums[l], nums[l + 1], ..., nums[r - 1], nums[r]] and for each l <= i < r, nums[i] < nums[i + 1].", "examples": [{"full_text": "Example 1:\nInput: nums = [1,3,5,4,7]\nOutput: 3\nExplanation: The longest continuous increasing subsequence is [1,3,5] with length 3.\nEven though [1,3,5,7] is an increasing subsequence, it is not continuous as elements 5 and 7 are separated by element\n4.", "input": "Input: nums = [1,3,5,4,7]", "output": "Output: 3", "explanation": "Explanation: The longest continuous increasing subsequence is [1,3,5] with length 3.\nEven though [1,3,5,7] is an increasing subsequence, it is not continuous as elements 5 and 7 are separated by element\n4."}, {"full_text": "Example 2:\nInput: nums = [2,2,2,2,2]\nOutput: 1\nExplanation: The longest continuous increasing subsequence is [2] with length 1. Note that it must be strictly\nincreasing.", "input": "Input: nums = [2,2,2,2,2]", "output": "Output: 1", "explanation": "Explanation: The longest continuous increasing subsequence is [2] with length 1. Note that it must be strictly\nincreasing."}], "constraints": "Constraints:\n1 <= nums.length <= 10^4\n-10^9 <= nums[i] <= 10^9", "notes": ""}, "671": {"label": "Easy", "title": "Second Minimum Node In a Binary Tree", "tags": "algorithms,linkedin,tree", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.43439999999999995, "total_accepted": 130400.0, "total_submissions": 300200.0, "testcase_example": "'[2,2,5,null,null,5,7]'", "body": "Given a non-empty special binary tree consisting of nodes with the non-negative value, where each node in this tree has exactly two or zero sub-node. If the node has two sub-nodes, then this node's value is the smaller value among its two sub-nodes. More formally, the property\nroot.val = min(root.left.val, root.right.val)\nalways holds.\nGiven such a binary tree, you need to output the second minimum value in the set made of all the nodes' value in the whole tree.\nIf no such second minimum value exists, output -1 instead.", "examples": [{"full_text": "Example 1:\nInput: root = [2,2,5,null,null,5,7]\nOutput: 5\nExplanation: The smallest value is 2, the second smallest value is 5.", "input": "Input: root = [2,2,5,null,null,5,7]", "output": "Output: 5", "explanation": "Explanation: The smallest value is 2, the second smallest value is 5."}, {"full_text": "Example 2:\nInput: root = [2,2,2]\nOutput: -1\nExplanation: The smallest value is 2, but there isn't any second smallest value.", "input": "Input: root = [2,2,2]", "output": "Output: -1", "explanation": "Explanation: The smallest value is 2, but there isn't any second smallest value."}], "constraints": "Constraints:\nThe number of nodes in the tree is in the range [1, 25].\n1 <= Node.val <= 2^31 - 1\nroot.val == min(root.left.val, root.right.val)\nfor each internal node of the tree.", "notes": ""}, "661": {"label": "Easy", "title": "Image Smoother", "tags": "algorithms,amazon,array", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5387, "total_accepted": 62100.0, "total_submissions": 115300.0, "testcase_example": "'[[1,1,1],[1,0,1],[1,1,1]]'", "body": "An image smoother is a filter of the size 3 x 3 that can be applied to each cell of an image by rounding down the average of the cell and the eight surrounding cells (i.e., the average of the nine cells in the blue smoother). If one or more of the surrounding cells of a cell is not present, we do not consider it in the average (i.e., the average of the four cells in the red smoother).\nGiven an m x n integer matrix img representing the grayscale of an image, return the image after applying the smoother on each cell of it.", "examples": [{"full_text": "Example 1:\nInput: img = [[1,1,1],[1,0,1],[1,1,1]]\nOutput: [[0,0,0],[0,0,0],[0,0,0]]\nExplanation:\nFor the points (0,0), (0,2), (2,0), (2,2): floor(3/4) = floor(0.75) = 0\nFor the points (0,1), (1,0), (1,2), (2,1): floor(5/6) = floor(0.83333333) = 0\nFor the point (1,1): floor(8/9) = floor(0.88888889) = 0", "input": "Input: img = [[1,1,1],[1,0,1],[1,1,1]]", "output": "Output: [[0,0,0],[0,0,0],[0,0,0]]", "explanation": "Explanation:\nFor the points (0,0), (0,2), (2,0), (2,2): floor(3/4) = floor(0.75) = 0\nFor the points (0,1), (1,0), (1,2), (2,1): floor(5/6) = floor(0.83333333) = 0\nFor the point (1,1): floor(8/9) = floor(0.88888889) = 0"}, {"full_text": "Example 2:\nInput: img = [[100,200,100],[200,50,200],[100,200,100]]\nOutput: [[137,141,137],[141,138,141],[137,141,137]]\nExplanation:\nFor the points (0,0), (0,2), (2,0), (2,2): floor((100+200+200+50)/4) = floor(137.5) = 137\nFor the points (0,1), (1,0), (1,2), (2,1): floor((200+200+50+200+100+100)/6) = floor(141.666667) = 141\nFor the point (1,1): floor((50+200+200+200+200+100+100+100+100)/9) = floor(138.888889) = 138", "input": "Input: img = [[100,200,100],[200,50,200],[100,200,100]]", "output": "Output: [[137,141,137],[141,138,141],[137,141,137]]", "explanation": "Explanation:\nFor the points (0,0), (0,2), (2,0), (2,2): floor((100+200+200+50)/4) = floor(137.5) = 137\nFor the points (0,1), (1,0), (1,2), (2,1): floor((200+200+50+200+100+100)/6) = floor(141.666667) = 141\nFor the point (1,1): floor((50+200+200+200+200+100+100+100+100)/9) = floor(138.888889) = 138"}], "constraints": "Constraints:\nm == img.length\nn == img[i].length\n1 <= m, n <= 200\n0 <= img[i][j] <= 255", "notes": ""}, "657": {"label": "Easy", "title": "Robot Return to Origin", "tags": "algorithms,google,string", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7495999999999999, "total_accepted": 319900.0, "total_submissions": 426800.0, "testcase_example": "'\"UD\"'", "body": "There is a robot starting at the position (0, 0), the origin, on a 2D plane. Given a sequence of its moves, judge if this robot ends up at (0, 0) after it completes its moves.\nYou are given a string moves that represents the move sequence of the robot where moves[i] represents its i^th move. Valid moves are 'R' (right), 'L' (left), 'U' (up), and 'D' (down).\nReturn true if the robot returns to the origin after it finishes all of its moves, or false otherwise.\nNote: The way that the robot is \"facing\" is irrelevant. 'R' will always make the robot move to the right once, 'L' will always make it move left, etc. Also, assume that the magnitude of the robot's movement is the same for each move.", "examples": [{"full_text": "Example 1:\nInput: moves = \"UD\"\nOutput: true\nExplanation: The robot moves up once, and then down once. All moves have the same magnitude, so it ended up at the origin where it started. Therefore, we return true.", "input": "Input: moves = \"UD\"", "output": "Output: true", "explanation": "Explanation: The robot moves up once, and then down once. All moves have the same magnitude, so it ended up at the origin where it started. Therefore, we return true."}, {"full_text": "Example 2:\nInput: moves = \"LL\"\nOutput: false\nExplanation: The robot moves left twice. It ends up two \"moves\" to the left of the origin. We return false because it is not at the origin at the end of its moves.", "input": "Input: moves = \"LL\"", "output": "Output: false", "explanation": "Explanation: The robot moves left twice. It ends up two \"moves\" to the left of the origin. We return false because it is not at the origin at the end of its moves."}], "constraints": "Constraints:\n1 <= moves.length <= 2 * 10^4\nmoves only contains the characters 'U', 'D', 'L' and 'R'.", "notes": ""}, "653": {"label": "Easy", "title": "Two Sum IV - Input is a BST", "tags": "algorithms,facebook,tree", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5854, "total_accepted": 286200.0, "total_submissions": 488900.0, "testcase_example": "'[5,3,6,2,4,null,7]\\n9'", "body": "Given the root of a Binary Search Tree and a target number k, return true if there exist two elements in the BST such that their sum is equal to the given target.", "examples": [{"full_text": "Example 1:\nInput: root = [5,3,6,2,4,null,7], k = 9\nOutput: true", "input": "Input: root = [5,3,6,2,4,null,7], k = 9", "output": "Output: true", "explanation": ""}, {"full_text": "Example 2:\nInput: root = [5,3,6,2,4,null,7], k = 28\nOutput: false", "input": "Input: root = [5,3,6,2,4,null,7], k = 28", "output": "Output: false", "explanation": ""}], "constraints": "Constraints:\nThe number of nodes in the tree is in the range [1, 10^4].\n-10^4\n<= Node.val <= 10^4\nroot is guaranteed to be a valid binary search tree.\n-10^5\n<= k <= 10^5", "notes": ""}, "645": {"label": "Easy", "title": "Set Mismatch", "tags": "algorithms,amazon,hash-table,math", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4122, "total_accepted": 158400.0, "total_submissions": 384400.0, "testcase_example": "'[1,2,2,4]'", "body": "You have a set of integers s, which originally contains all the numbers from 1 to n. Unfortunately, due to some error, one of the numbers in s got duplicated to another number in the set, which results in repetition of one number and loss of another number.\nYou are given an integer array nums representing the data status of this set after the error.\nFind the number that occurs twice and the number that is missing and return them in the form of an array.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,2,2,4]\nOutput: [2,3]", "input": "Input: nums = [1,2,2,4]", "output": "Output: [2,3]", "explanation": ""}, {"full_text": "Example 2:\nInput: nums = [1,1]\nOutput: [1,2]", "input": "Input: nums = [1,1]", "output": "Output: [1,2]", "explanation": ""}], "constraints": "Constraints:\n2 <= nums.length <= 10^4\n1 <= nums[i] <= 10^4", "notes": ""}, "643": {"label": "Easy", "title": "Maximum Average Subarray I", "tags": "algorithms,google,array", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.43310000000000004, "total_accepted": 131600.0, "total_submissions": 304000.0, "testcase_example": "'[1,12,-5,-6,50,3]\\n4'", "body": "You are given an integer array nums consisting of n elements, and an integer k.\nFind a contiguous subarray whose length is equal to k that has the maximum average value and return this value. Any answer with a calculation error less than 10^-5 will be accepted.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,12,-5,-6,50,3], k = 4\nOutput: 12.75000\nExplanation: Maximum average is (12 - 5 - 6 + 50) / 4 = 51 / 4 = 12.75", "input": "Input: nums = [1,12,-5,-6,50,3], k = 4", "output": "Output: 12.75000", "explanation": "Explanation: Maximum average is (12 - 5 - 6 + 50) / 4 = 51 / 4 = 12.75"}, {"full_text": "Example 2:\nInput: nums = [5], k = 1\nOutput: 5.00000", "input": "Input: nums = [5], k = 1", "output": "Output: 5.00000", "explanation": ""}], "constraints": "Constraints:\nn == nums.length\n1 <= k <= n <= 10^5\n-10^4 <= nums[i] <= 10^4", "notes": ""}, "637": {"label": "Easy", "title": "Average of Levels in Binary Tree", "tags": "algorithms,facebook,tree", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6819, "total_accepted": 250800.0, "total_submissions": 367700.0, "testcase_example": "'[3,9,20,null,null,15,7]'", "body": "Given the root of a binary tree, return the average value of the nodes on each level in the form of an array. Answers within 10^-5 of the actual answer will be accepted.", "examples": [{"full_text": "Example 1:\nInput: root = [3,9,20,null,null,15,7]\nOutput: [3.00000,14.50000,11.00000]\nExplanation: The average value of nodes on level 0 is 3, on level 1 is 14.5, and on level 2 is 11.\nHence return [3, 14.5, 11].", "input": "Input: root = [3,9,20,null,null,15,7]", "output": "Output: [3.00000,14.50000,11.00000]", "explanation": "Explanation: The average value of nodes on level 0 is 3, on level 1 is 14.5, and on level 2 is 11.\nHence return [3, 14.5, 11]."}, {"full_text": "Example 2:\nInput: root = [3,9,20,15,7]\nOutput: [3.00000,14.50000,11.00000]", "input": "Input: root = [3,9,20,15,7]", "output": "Output: [3.00000,14.50000,11.00000]", "explanation": ""}], "constraints": "Constraints:\nThe number of nodes in the tree is in the range [1, 10^4].\n-2^31 <= Node.val <= 2^31 - 1", "notes": ""}, "628": {"label": "Easy", "title": "Maximum Product of Three Numbers", "tags": "algorithms,array,math", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4678, "total_accepted": 196100.0, "total_submissions": 419200.0, "testcase_example": "'[1,2,3]'", "body": "Given an integer array nums, find three numbers whose product is maximum and return the maximum product.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,2,3]\nOutput: 6", "input": "Input: nums = [1,2,3]", "output": "Output: 6", "explanation": ""}, {"full_text": "Example 2:\nInput: nums = [1,2,3,4]\nOutput: 24", "input": "Input: nums = [1,2,3,4]", "output": "Output: 24", "explanation": ""}, {"full_text": "Example 3:\nInput: nums = [-1,-2,-3]\nOutput: -6", "input": "Input: nums = [-1,-2,-3]", "output": "Output: -6", "explanation": ""}], "constraints": "Constraints:\n3 <= nums.length <=\n10^4\n-1000 <= nums[i] <= 1000", "notes": ""}, "627": {"label": "Easy", "title": "Swap Salary", "tags": "database", "langs": "mssql,mysql,oraclesql", "related_topics": "database", "acceptance_ratio": 0.8016, "total_accepted": 175600.0, "total_submissions": 219100.0, "testcase_example": "'{\"headers\":{\"Salary\":[\"id\",\"name\",\"sex\",\"salary\"]},\"rows\":{\"Salary\":[[1,\"A\",\"m\",2500],[2,\"B\",\"f\",1500],[3,\"C\",\"m\",5500],[4,\"D\",\"f\",500]]}}'", "body": "Table: Salary\n+-------------+----------+\n| Column Name | Type |\n+-------------+----------+\n| id | int |\n| name | varchar |\n| sex | ENUM |\n| salary | int |\n+-------------+----------+\nid is the primary key for this table.\nThe sex column is ENUM value of type ('m', 'f').\nThe table contains information about an employee.\nWrite an SQL query to swap all 'f' and 'm' values (i.e., change all 'f' values to 'm' and vice versa) with a single update statement and no intermediate temporary tables.\nNote that you must write a single update statement, do not write any select statement for this problem.\nThe query result format is in the following example.", "examples": [{"full_text": "Example 1:\nInput:\nSalary table:\n+----+------+-----+--------+\n| id | name | sex | salary |\n+----+------+-----+--------+\n| 1 | A | m | 2500 |\n| 2 | B | f | 1500 |\n| 3 | C | m | 5500 |\n| 4 | D | f | 500 |\n+----+------+-----+--------+\nOutput:\n+----+------+-----+--------+\n| id | name | sex | salary |\n+----+------+-----+--------+\n| 1 | A | f | 2500 |\n| 2 | B | m | 1500 |\n| 3 | C | f | 5500 |\n| 4 | D | m | 500 |\n+----+------+-----+--------+\nExplanation:\n(1, A) and (3, C) were changed from 'm' to 'f'.\n(2, B) and (4, D) were changed from 'f' to 'm'.", "input": "Input:\nSalary table:\n+----+------+-----+--------+\n| id | name | sex | salary |\n+----+------+-----+--------+\n| 1 | A | m | 2500 |\n| 2 | B | f | 1500 |\n| 3 | C | m | 5500 |\n| 4 | D | f | 500 |\n+----+------+-----+--------+", "output": "Output:\n+----+------+-----+--------+\n| id | name | sex | salary |\n+----+------+-----+--------+\n| 1 | A | f | 2500 |\n| 2 | B | m | 1500 |\n| 3 | C | f | 5500 |\n| 4 | D | m | 500 |\n+----+------+-----+--------+", "explanation": "Explanation:\n(1, A) and (3, C) were changed from 'm' to 'f'.\n(2, B) and (4, D) were changed from 'f' to 'm'."}], "constraints": "", "notes": ""}, "620": {"label": "Easy", "title": "Not Boring Movies", "tags": "database", "langs": "mssql,mysql,oraclesql", "related_topics": "database", "acceptance_ratio": 0.7227, "total_accepted": 174700.0, "total_submissions": 241700.0, "testcase_example": "'{\"headers\":{\"cinema\":[\"id\", \"movie\", \"description\", \"rating\"]},\"rows\":{\"cinema\":[[1, \"War\", \"great 3D\", 8.9], [2, \"Science\", \"fiction\", 8.5], [3, \"irish\", \"boring\", 6.2], [4, \"Ice song\", \"Fantacy\", 8.6], [5, \"House card\", \"Interesting\", 9.1]]}}'", "body": "Table: Cinema\n+----------------+----------+\n| Column Name | Type |\n+----------------+----------+\n| id | int |\n| movie | varchar |\n| description | varchar |\n| rating | float |\n+----------------+----------+\nid is the primary key for this table.\nEach row contains information about the name of a movie, its genre, and its rating.\nrating is a 2 decimal places float in the range [0, 10]\nWrite an SQL query to report the movies with an odd-numbered ID and a description that is not \"boring\".\nReturn the result table ordered by rating in descending order.\nThe query result format is in the following example.", "examples": [{"full_text": "Example 1:\nInput:\nCinema table:\n+----+------------+-------------+--------+\n| id | movie | description | rating |\n+----+------------+-------------+--------+\n| 1 | War | great 3D | 8.9 |\n| 2 | Science | fiction | 8.5 |\n| 3 | irish | boring | 6.2 |\n| 4 | Ice song | Fantacy | 8.6 |\n| 5 | House card | Interesting | 9.1 |\n+----+------------+-------------+--------+\nOutput:\n+----+------------+-------------+--------+\n| id | movie | description | rating |\n+----+------------+-------------+--------+\n| 5 | House card | Interesting | 9.1 |\n| 1 | War | great 3D | 8.9 |\n+----+------------+-------------+--------+\nExplanation:\nWe have three movies with odd-numbered IDs: 1, 3, and 5. The movie with ID = 3 is boring so we do not include it in the answer.", "input": "Input:\nCinema table:\n+----+------------+-------------+--------+\n| id | movie | description | rating |\n+----+------------+-------------+--------+\n| 1 | War | great 3D | 8.9 |\n| 2 | Science | fiction | 8.5 |\n| 3 | irish | boring | 6.2 |\n| 4 | Ice song | Fantacy | 8.6 |\n| 5 | House card | Interesting | 9.1 |\n+----+------------+-------------+--------+", "output": "Output:\n+----+------------+-------------+--------+\n| id | movie | description | rating |\n+----+------------+-------------+--------+\n| 5 | House card | Interesting | 9.1 |\n| 1 | War | great 3D | 8.9 |\n+----+------------+-------------+--------+", "explanation": "Explanation:\nWe have three movies with odd-numbered IDs: 1, 3, and 5. The movie with ID = 3 is boring so we do not include it in the answer."}], "constraints": "", "notes": ""}, "617": {"label": "Easy", "title": "Merge Two Binary Trees", "tags": "algorithms,amazon,tree", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7753, "total_accepted": 520000.0, "total_submissions": 670700.0, "testcase_example": "'[1,3,2,5]\\n[2,1,3,null,4,null,7]'", "body": "You are given two binary trees root1 and root2.\nImagine that when you put one of them to cover the other, some nodes of the two trees are overlapped while the others are not. You need to merge the two trees into a new binary tree. The merge rule is that if two nodes overlap, then sum node values up as the new value of the merged node. Otherwise, the NOT null node will be used as the node of the new tree.\nReturn the merged tree.\nNote: The merging process must start from the root nodes of both trees.", "examples": [{"full_text": "Example 1:\nInput: root1 = [1,3,2,5], root2 = [2,1,3,null,4,null,7]\nOutput: [3,4,5,5,4,null,7]", "input": "Input: root1 = [1,3,2,5], root2 = [2,1,3,null,4,null,7]", "output": "Output: [3,4,5,5,4,null,7]", "explanation": ""}, {"full_text": "Example 2:\nInput: root1 = [1], root2 = [1,2]\nOutput: [2,2]", "input": "Input: root1 = [1], root2 = [1,2]", "output": "Output: [2,2]", "explanation": ""}], "constraints": "Constraints:\nThe number of nodes in both trees is in the range [0, 2000].\n-10^4 <= Node.val <= 10^4", "notes": ""}, "606": {"label": "Easy", "title": "Construct String from Binary Tree", "tags": "algorithms,amazon,string,tree", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5732, "total_accepted": 123500.0, "total_submissions": 215400.0, "testcase_example": "'[1,2,3,4]'", "body": "Given the root of a binary tree, construct a string consisting of parenthesis and integers from a binary tree with the preorder traversal way, and return it.\nOmit all the empty parenthesis pairs that do not affect the one-to-one mapping relationship between the string and the original binary tree.", "examples": [{"full_text": "Example 1:\nInput: root = [1,2,3,4]\nOutput: \"1(2(4))(3)\"\nExplanation: Originally, it needs to be \"1(2(4)())(3()())\", but you need to omit all the unnecessary empty parenthesis pairs. And it will be \"1(2(4))(3)\"", "input": "Input: root = [1,2,3,4]", "output": "Output: \"1(2(4))(3)\"", "explanation": "Explanation: Originally, it needs to be \"1(2(4)())(3()())\", but you need to omit all the unnecessary empty parenthesis pairs. And it will be \"1(2(4))(3)\""}, {"full_text": "Example 2:\nInput: root = [1,2,3,null,4]\nOutput: \"1(2()(4))(3)\"\nExplanation: Almost the same as the first example, except we cannot omit the first parenthesis pair to break the one-to-one mapping relationship between the input and the output.", "input": "Input: root = [1,2,3,null,4]", "output": "Output: \"1(2()(4))(3)\"", "explanation": "Explanation: Almost the same as the first example, except we cannot omit the first parenthesis pair to break the one-to-one mapping relationship between the input and the output."}], "constraints": "Constraints:\nThe number of nodes in the tree is in the range [1, 10^4].\n-1000 <= Node.val <= 1000", "notes": ""}, "605": {"label": "Easy", "title": "Can Place Flowers", "tags": "algorithms,linkedin,array", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3297, "total_accepted": 274800.0, "total_submissions": 833500.0, "testcase_example": "'[1,0,0,0,1]\\n1'", "body": "You have a long flowerbed in which some of the plots are planted, and some are not. However, flowers cannot be planted in adjacent plots.\nGiven an integer array flowerbed containing 0's and 1's, where 0 means empty and 1 means not empty, and an integer n, return if n new flowers can be planted in the flowerbed without violating the no-adjacent-flowers rule.", "examples": [{"full_text": "Example 1:\nInput: flowerbed = [1,0,0,0,1], n = 1\nOutput: true", "input": "Input: flowerbed = [1,0,0,0,1], n = 1", "output": "Output: true", "explanation": ""}, {"full_text": "Example 2:\nInput: flowerbed = [1,0,0,0,1], n = 2\nOutput: false", "input": "Input: flowerbed = [1,0,0,0,1], n = 2", "output": "Output: false", "explanation": ""}], "constraints": "Constraints:\n1 <= flowerbed.length <= 2 * 10^4\nflowerbed[i] is 0 or 1.\nThere are no two adjacent flowers in flowerbed.\n0 <= n <= flowerbed.length", "notes": ""}, "599": {"label": "Easy", "title": "Minimum Index Sum of Two Lists", "tags": "algorithms,yelp,hash-table", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5289, "total_accepted": 141500.0, "total_submissions": 267600.0, "testcase_example": "'[\"Shogun\",\"Tapioca Express\",\"Burger King\",\"KFC\"]\\n' +\n  '[\"Piatti\",\"The Grill at Torrey Pines\",\"Hungry Hunter Steakhouse\",\"Shogun\"]'", "body": "Suppose Andy and Doris want to choose a restaurant for dinner, and they both have a list of favorite restaurants represented by strings.\nYou need to help them find out their common interest with the least list index sum. If there is a choice tie between answers, output all of them with no order requirement. You could assume there always exists an answer.", "examples": [{"full_text": "Example 1:\nInput: list1 = [\"Shogun\",\"Tapioca Express\",\"Burger King\",\"KFC\"], list2 = [\"Piatti\",\"The Grill at Torrey Pines\",\"Hungry Hunter Steakhouse\",\"Shogun\"]\nOutput: [\"Shogun\"]\nExplanation: The only restaurant they both like is \"Shogun\".", "input": "Input: list1 = [\"Shogun\",\"Tapioca Express\",\"Burger King\",\"KFC\"], list2 = [\"Piatti\",\"The Grill at Torrey Pines\",\"Hungry Hunter Steakhouse\",\"Shogun\"]", "output": "Output: [\"Shogun\"]", "explanation": "Explanation: The only restaurant they both like is \"Shogun\"."}, {"full_text": "Example 2:\nInput: list1 = [\"Shogun\",\"Tapioca Express\",\"Burger King\",\"KFC\"], list2 = [\"KFC\",\"Shogun\",\"Burger King\"]\nOutput: [\"Shogun\"]\nExplanation: The restaurant they both like and have the least index sum is \"Shogun\" with index sum 1 (0+1).", "input": "Input: list1 = [\"Shogun\",\"Tapioca Express\",\"Burger King\",\"KFC\"], list2 = [\"KFC\",\"Shogun\",\"Burger King\"]", "output": "Output: [\"Shogun\"]", "explanation": "Explanation: The restaurant they both like and have the least index sum is \"Shogun\" with index sum 1 (0+1)."}], "constraints": "Constraints:\n1 <= list1.length, list2.length <= 1000\n1 <= list1[i].length, list2[i].length <= 30\nlist1[i] and list2[i] consist of spaces ' ' and English letters.\nAll the stings of list1 are unique.\nAll the stings of list2\nare unique.", "notes": ""}, "598": {"label": "Easy", "title": "Range Addition II", "tags": "algorithms,math", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5452, "total_accepted": 75400.0, "total_submissions": 138300.0, "testcase_example": "'3\\n3\\n[[2,2],[3,3]]'", "body": "You are given an m x n matrix M initialized with all 0's and an array of operations ops, where ops[i] = [ai, bi] means M[x][y] should be incremented by one for all 0 <= x < ai and 0 <= y < bi.\nCount and return the number of maximum integers in the matrix after performing all the operations.", "examples": [{"full_text": "Example 1:\nInput: m = 3, n = 3, ops = [[2,2],[3,3]]\nOutput: 4\nExplanation: The maximum integer in M is 2, and there are four of it in M. So return 4.", "input": "Input: m = 3, n = 3, ops = [[2,2],[3,3]]", "output": "Output: 4", "explanation": "Explanation: The maximum integer in M is 2, and there are four of it in M. So return 4."}, {"full_text": "Example 2:\nInput: m = 3, n = 3, ops = [[2,2],[3,3],[3,3],[3,3],[2,2],[3,3],[3,3],[3,3],[2,2],[3,3],[3,3],[3,3]]\nOutput: 4", "input": "Input: m = 3, n = 3, ops = [[2,2],[3,3],[3,3],[3,3],[2,2],[3,3],[3,3],[3,3],[2,2],[3,3],[3,3],[3,3]]", "output": "Output: 4", "explanation": ""}, {"full_text": "Example 3:\nInput: m = 3, n = 3, ops = []\nOutput: 9", "input": "Input: m = 3, n = 3, ops = []", "output": "Output: 9", "explanation": ""}], "constraints": "Constraints:\n1 <= m, n <= 4 * 10^4\n0 <= ops.length <= 10^4\nops[i].length == 2\n1 <= ai <= m\n1 <= bi <= n", "notes": ""}, "596": {"label": "Easy", "title": "Classes More Than 5 Students", "tags": "database", "langs": "mssql,mysql,oraclesql", "related_topics": "database", "acceptance_ratio": 0.4131, "total_accepted": 146800.0, "total_submissions": 355300.0, "testcase_example": "'{\"headers\": {\"Courses\": [\"student\", \"class\"]}, \"rows\": {\"Courses\": [[\"A\", \"Math\"], [\"B\", \"English\"], [\"C\", \"Math\"], [\"D\", \"Biology\"], [\"E\", \"Math\"], [\"F\", \"Computer\"], [\"G\", \"Math\"], [\"H\", \"Math\"], [\"I\", \"Math\"]]}}'", "body": "Table: Courses\n+-------------+---------+\n| Column Name | Type |\n+-------------+---------+\n| student | varchar |\n| class | varchar |\n+-------------+---------+\n(student, class) is the primary key column for this table.\nEach row of this table indicates the name of a student and the class in which they are enrolled.\nWrite an SQL query to report all the classes that have at least five students.\nReturn the result table in any order.\nThe query result format is in the following example.", "examples": [{"full_text": "Example 1:\nInput:\nCourses table:\n+---------+----------+\n| student | class |\n+---------+----------+\n| A | Math |\n| B | English |\n| C | Math |\n| D | Biology |\n| E | Math |\n| F | Computer |\n| G | Math |\n| H | Math |\n| I | Math |\n+---------+----------+\nOutput:\n+---------+\n| class |\n+---------+\n| Math |\n+---------+\nExplanation:\n- Math has 6 students, so we include it.\n- English has 1 student, so we do not include it.\n- Biology has 1 student, so we do not include it.\n- Computer has 1 student, so we do not include it.", "input": "Input:\nCourses table:\n+---------+----------+\n| student | class |\n+---------+----------+\n| A | Math |\n| B | English |\n| C | Math |\n| D | Biology |\n| E | Math |\n| F | Computer |\n| G | Math |\n| H | Math |\n| I | Math |\n+---------+----------+", "output": "Output:\n+---------+\n| class |\n+---------+\n| Math |\n+---------+", "explanation": "Explanation:\n- Math has 6 students, so we include it.\n- English has 1 student, so we do not include it.\n- Biology has 1 student, so we do not include it.\n- Computer has 1 student, so we do not include it."}], "constraints": "", "notes": ""}, "595": {"label": "Easy", "title": "Big Countries", "tags": "database", "langs": "mssql,mysql,oraclesql", "related_topics": "database", "acceptance_ratio": 0.7841, "total_accepted": 258100.00000000003, "total_submissions": 329100.0, "testcase_example": "'{\"headers\": {\"World\": [\"name\", \"continent\",\\t\"area\",\\t\"population\", \"gdp\"]}, \"rows\": {\"World\": [[\"Afghanistan\", \"Asia\", 652230, 25500100, 20343000000], [\"Albania\", \"Europe\", 28748, 2831741, 12960000000], [\"Algeria\", \"Africa\", 2381741, 37100000, 188681000000], [\"Andorra\", \"Europe\", 468, 78115,\\t3712000000], [\"Angola\", \"Africa\", 1246700, 20609294, 100990000000]]}}'", "body": "Table: World\n+-------------+---------+\n| Column Name | Type |\n+-------------+---------+\n| name | varchar |\n| continent | varchar |\n| area | int |\n| population | int |\n| gdp | int |\n+-------------+---------+\nname is the primary key column for this table.\nEach row of this table gives information about the name of a country, the continent to which it belongs, its area, the population, and its GDP value.\nA country is big if:\nit has an area of at least\nthree million (i.e., 3000000 km^2), or\nit has a population of at least\ntwenty-five million (i.e., 25000000).\nWrite an SQL query to report the name, population, and area of the big countries.\nReturn the result table in any order.\nThe query result format is in the following example.", "examples": [{"full_text": "Example 1:\nInput:\nWorld table:\n+-------------+-----------+---------+------------+--------------+\n| name | continent | area | population | gdp |\n+-------------+-----------+---------+------------+--------------+\n| Afghanistan | Asia | 652230 | 25500100 | 20343000000 |\n| Albania | Europe | 28748 | 2831741 | 12960000000 |\n| Algeria | Africa | 2381741 | 37100000 | 188681000000 |\n| Andorra | Europe | 468 | 78115 | 3712000000 |\n| Angola | Africa | 1246700 | 20609294 | 100990000000 |\n+-------------+-----------+---------+------------+--------------+\nOutput:\n+-------------+------------+---------+\n| name | population | area |\n+-------------+------------+---------+\n| Afghanistan | 25500100 | 652230 |\n| Algeria | 37100000 | 2381741 |\n+-------------+------------+---------+", "input": "Input:\nWorld table:\n+-------------+-----------+---------+------------+--------------+\n| name | continent | area | population | gdp |\n+-------------+-----------+---------+------------+--------------+\n| Afghanistan | Asia | 652230 | 25500100 | 20343000000 |\n| Albania | Europe | 28748 | 2831741 | 12960000000 |\n| Algeria | Africa | 2381741 | 37100000 | 188681000000 |\n| Andorra | Europe | 468 | 78115 | 3712000000 |\n| Angola | Africa | 1246700 | 20609294 | 100990000000 |\n+-------------+-----------+---------+------------+--------------+", "output": "Output:\n+-------------+------------+---------+\n| name | population | area |\n+-------------+------------+---------+\n| Afghanistan | 25500100 | 652230 |\n| Algeria | 37100000 | 2381741 |\n+-------------+------------+---------+", "explanation": ""}], "constraints": "", "notes": ""}, "594": {"label": "Easy", "title": "Longest Harmonious Subsequence", "tags": "algorithms,hash-table", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5246999999999999, "total_accepted": 111800.0, "total_submissions": 213000.0, "testcase_example": "'[1,3,2,2,5,2,3,7]'", "body": "We define a harmonious array as an array where the difference between its maximum value and its minimum value is exactly 1.\nGiven an integer array nums, return the length of its longest harmonious subsequence among all its possible subsequences.\nA subsequence of array is a sequence that can be derived from the array by deleting some or no elements without changing the order of the remaining elements.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,3,2,2,5,2,3,7]\nOutput: 5\nExplanation: The longest harmonious subsequence is [3,2,2,2,3].", "input": "Input: nums = [1,3,2,2,5,2,3,7]", "output": "Output: 5", "explanation": "Explanation: The longest harmonious subsequence is [3,2,2,2,3]."}, {"full_text": "Example 2:\nInput: nums = [1,2,3,4]\nOutput: 2", "input": "Input: nums = [1,2,3,4]", "output": "Output: 2", "explanation": ""}, {"full_text": "Example 3:\nInput: nums = [1,1,1,1]\nOutput: 0", "input": "Input: nums = [1,1,1,1]", "output": "Output: 0", "explanation": ""}], "constraints": "Constraints:\n1 <= nums.length <= 2 * 10^4\n-10^9 <= nums[i] <= 10^9", "notes": ""}, "590": {"label": "Easy", "title": "N-ary Tree Postorder Traversal", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.758, "total_accepted": 170300.0, "total_submissions": 224600.0, "testcase_example": "'[1,null,3,2,4,null,5,6]'", "body": "Given the root of an n-ary tree, return the postorder traversal of its nodes' values.\nNary-Tree input serialization is represented in their level order traversal. Each group of children is separated by the null value (See examples)", "examples": [{"full_text": "Example 1:\nInput: root = [1,null,3,2,4,null,5,6]\nOutput: [5,6,3,2,4,1]", "input": "Input: root = [1,null,3,2,4,null,5,6]", "output": "Output: [5,6,3,2,4,1]", "explanation": ""}, {"full_text": "Example 2:\nInput: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]\nOutput: [2,6,14,11,7,3,12,8,4,13,9,10,5,1]", "input": "Input: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]", "output": "Output: [2,6,14,11,7,3,12,8,4,13,9,10,5,1]", "explanation": ""}], "constraints": "Constraints:\nThe number of nodes in the tree is in the range [0, 10^4].\n0 <= Node.val <= 10^4\nThe height of the n-ary tree is less than or equal to 1000.\nFollow up: Recursive solution is trivial, could you do it iteratively?", "notes": ""}, "589": {"label": "Easy", "title": "N-ary Tree Preorder Traversal", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7567, "total_accepted": 208200.0, "total_submissions": 275200.0, "testcase_example": "'[1,null,3,2,4,null,5,6]'", "body": "Given the root of an n-ary tree, return the preorder traversal of its nodes' values.\nNary-Tree input serialization is represented in their level order traversal. Each group of children is separated by the null value (See examples)", "examples": [{"full_text": "Example 1:\nInput: root = [1,null,3,2,4,null,5,6]\nOutput: [1,3,5,6,2,4]", "input": "Input: root = [1,null,3,2,4,null,5,6]", "output": "Output: [1,3,5,6,2,4]", "explanation": ""}, {"full_text": "Example 2:\nInput: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]\nOutput: [1,2,3,6,7,11,14,4,8,12,5,9,13,10]", "input": "Input: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]", "output": "Output: [1,2,3,6,7,11,14,4,8,12,5,9,13,10]", "explanation": ""}], "constraints": "Constraints:\nThe number of nodes in the tree is in the range [0, 10^4].\n0 <= Node.val <= 10^4\nThe height of the n-ary tree is less than or equal to 1000.\nFollow up: Recursive solution is trivial, could you do it iteratively?", "notes": ""}, "575": {"label": "Easy", "title": "Distribute Candies", "tags": "algorithms,hash-table", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6543000000000001, "total_accepted": 196100.0, "total_submissions": 299700.0, "testcase_example": "'[1,1,2,2,3,3]'", "body": "Alice has n candies, where the i^th candy is of type candyType[i]. Alice noticed that she started to gain weight, so she visited a doctor.\nThe doctor advised Alice to only eat n / 2 of the candies she has (n is always even). Alice likes her candies very much, and she wants to eat the maximum number of different types of candies while still following the doctor's advice.\nGiven the integer array candyType of length n, return the maximum number of different types of candies she can eat if she only eats n / 2 of them.", "examples": [{"full_text": "Example 1:\nInput: candyType = [1,1,2,2,3,3]\nOutput: 3\nExplanation: Alice can only eat 6 / 2 = 3 candies. Since there are only 3 types, she can eat one of each type.", "input": "Input: candyType = [1,1,2,2,3,3]", "output": "Output: 3", "explanation": "Explanation: Alice can only eat 6 / 2 = 3 candies. Since there are only 3 types, she can eat one of each type."}, {"full_text": "Example 2:\nInput: candyType = [1,1,2,3]\nOutput: 2\nExplanation: Alice can only eat 4 / 2 = 2 candies. Whether she eats types [1,2], [1,3], or [2,3], she still can only eat 2 different types.", "input": "Input: candyType = [1,1,2,3]", "output": "Output: 2", "explanation": "Explanation: Alice can only eat 4 / 2 = 2 candies. Whether she eats types [1,2], [1,3], or [2,3], she still can only eat 2 different types."}, {"full_text": "Example 3:\nInput: candyType = [6,6,6,6]\nOutput: 1\nExplanation: Alice can only eat 4 / 2 = 2 candies. Even though she can eat 2 candies, she only has 1 type.", "input": "Input: candyType = [6,6,6,6]", "output": "Output: 1", "explanation": "Explanation: Alice can only eat 4 / 2 = 2 candies. Even though she can eat 2 candies, she only has 1 type."}], "constraints": "Constraints:\nn == candyType.length\n2 <= n <= 10^4\nn\nis even.\n-10^5 <= candyType[i] <= 10^5", "notes": ""}, "572": {"label": "Easy", "title": "Subtree of Another Tree", "tags": "algorithms,ebay,facebook,google,tree", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4517, "total_accepted": 422800.0, "total_submissions": 936000.0, "testcase_example": "'[3,4,5,1,2]\\n[4,1,2]'", "body": "Given the roots of two binary trees root and subRoot, return true if there is a subtree of root with the same structure and node values of subRoot and false otherwise.\nA subtree of a binary tree tree is a tree that consists of a node in tree and all of this node's descendants. The tree tree could also be considered as a subtree of itself.", "examples": [{"full_text": "Example 1:\nInput: root = [3,4,5,1,2], subRoot = [4,1,2]\nOutput: true", "input": "Input: root = [3,4,5,1,2], subRoot = [4,1,2]", "output": "Output: true", "explanation": ""}, {"full_text": "Example 2:\nInput: root = [3,4,5,1,2,null,null,null,null,0], subRoot = [4,1,2]\nOutput: false", "input": "Input: root = [3,4,5,1,2,null,null,null,null,0], subRoot = [4,1,2]", "output": "Output: false", "explanation": ""}], "constraints": "Constraints:\nThe number of nodes in the root tree is in the range [1, 2000].\nThe number of nodes in the subRoot tree is in the range [1, 1000].\n-10^4 <= root.val <= 10^4\n-10^4 <= subRoot.val <= 10^4", "notes": ""}, "566": {"label": "Easy", "title": "Reshape the Matrix", "tags": "algorithms,mathworks,array", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6212, "total_accepted": 205200.0, "total_submissions": 330400.0, "testcase_example": "'[[1,2],[3,4]]\\n1\\n4'", "body": "In MATLAB, there is a handy function called reshape which can reshape an m x n matrix into a new one with a different size r x c keeping its original data.\nYou are given an m x n matrix mat and two integers r and c representing the number of rows and the number of columns of the wanted reshaped matrix.\nThe reshaped matrix should be filled with all the elements of the original matrix in the same row-traversing order as they were.\nIf the reshape operation with given parameters is possible and legal, output the new reshaped matrix; Otherwise, output the original matrix.", "examples": [{"full_text": "Example 1:\nInput: mat = [[1,2],[3,4]], r = 1, c = 4\nOutput: [[1,2,3,4]]", "input": "Input: mat = [[1,2],[3,4]], r = 1, c = 4", "output": "Output: [[1,2,3,4]]", "explanation": ""}, {"full_text": "Example 2:\nInput: mat = [[1,2],[3,4]], r = 2, c = 4\nOutput: [[1,2],[3,4]]", "input": "Input: mat = [[1,2],[3,4]], r = 2, c = 4", "output": "Output: [[1,2],[3,4]]", "explanation": ""}], "constraints": "Constraints:\nm == mat.length\nn == mat[i].length\n1 <= m, n <= 100\n-1000 <= mat[i][j] <= 1000\n1 <= r, c <= 300", "notes": ""}, "563": {"label": "Easy", "title": "Binary Tree Tilt", "tags": "algorithms,indeed,tree", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5817, "total_accepted": 161000.0, "total_submissions": 276800.0, "testcase_example": "'[1,2,3]'", "body": "Given the root of a binary tree, return the sum of every tree node's tilt.\nThe tilt of a tree node is the absolute difference between the sum of all left subtree node values and all right subtree node values. If a node does not have a left child, then the sum of the left subtree node values is treated as 0. The rule is similar if the node does not have a right child.", "examples": [{"full_text": "Example 1:\nInput: root = [1,2,3]\nOutput: 1\nExplanation:\nTilt of node 2 : |0-0| = 0 (no children)\nTilt of node 3 : |0-0| = 0 (no children)\nTilt of node 1 : |2-3| = 1 (left subtree is just left child, so sum is 2; right subtree is just right child, so sum is 3)\nSum of every tilt : 0 + 0 + 1 = 1", "input": "Input: root = [1,2,3]", "output": "Output: 1", "explanation": "Explanation:\nTilt of node 2 : |0-0| = 0 (no children)\nTilt of node 3 : |0-0| = 0 (no children)\nTilt of node 1 : |2-3| = 1 (left subtree is just left child, so sum is 2; right subtree is just right child, so sum is 3)\nSum of every tilt : 0 + 0 + 1 = 1"}, {"full_text": "Example 2:\nInput: root = [4,2,9,3,5,null,7]\nOutput: 15\nExplanation:\nTilt of node 3 : |0-0| = 0 (no children)\nTilt of node 5 : |0-0| = 0 (no children)\nTilt of node 7 : |0-0| = 0 (no children)\nTilt of node 2 : |3-5| = 2 (left subtree is just left child, so sum is 3; right subtree is just right child, so sum is 5)\nTilt of node 9 : |0-7| = 7 (no left child, so sum is 0; right subtree is just right child, so sum is 7)\nTilt of node 4 : |(3+5+2)-(9+7)| = |10-16| = 6 (left subtree values are 3, 5, and 2, which sums to 10; right subtree values are 9 and 7, which sums to 16)\nSum of every tilt : 0 + 0 + 0 + 2 + 7 + 6 = 15", "input": "Input: root = [4,2,9,3,5,null,7]", "output": "Output: 15", "explanation": "Explanation:\nTilt of node 3 : |0-0| = 0 (no children)\nTilt of node 5 : |0-0| = 0 (no children)\nTilt of node 7 : |0-0| = 0 (no children)\nTilt of node 2 : |3-5| = 2 (left subtree is just left child, so sum is 3; right subtree is just right child, so sum is 5)\nTilt of node 9 : |0-7| = 7 (no left child, so sum is 0; right subtree is just right child, so sum is 7)\nTilt of node 4 : |(3+5+2)-(9+7)| = |10-16| = 6 (left subtree values are 3, 5, and 2, which sums to 10; right subtree values are 9 and 7, which sums to 16)\nSum of every tilt : 0 + 0 + 0 + 2 + 7 + 6 = 15"}, {"full_text": "Example 3:\nInput: root = [21,7,14,1,1,2,2,3,3]\nOutput: 9", "input": "Input: root = [21,7,14,1,1,2,2,3,3]", "output": "Output: 9", "explanation": ""}], "constraints": "Constraints:\nThe number of nodes in the tree is in the range [0, 10^4].\n-1000 <= Node.val <= 1000", "notes": ""}, "561": {"label": "Easy", "title": "Array Partition I", "tags": "algorithms,array", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7526999999999999, "total_accepted": 312200.0, "total_submissions": 414800.0, "testcase_example": "'[1,4,3,2]'", "body": "Given an integer array nums of 2n integers, group these integers into n pairs (a1, b1), (a2, b2), ..., (an, bn) such that the sum of min(ai, bi) for all i is maximized. Return the maximized sum.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,4,3,2]\nOutput: 4\nExplanation: All possible pairings (ignoring the ordering of elements) are:\n1. (1, 4), (2, 3) -> min(1, 4) + min(2, 3) = 1 + 2 = 3\n2. (1, 3), (2, 4) -> min(1, 3) + min(2, 4) = 1 + 2 = 3\n3. (1, 2), (3, 4) -> min(1, 2) + min(3, 4) = 1 + 3 = 4\nSo the maximum possible sum is 4.", "input": "Input: nums = [1,4,3,2]", "output": "Output: 4", "explanation": "Explanation: All possible pairings (ignoring the ordering of elements) are:\n1. (1, 4), (2, 3) -> min(1, 4) + min(2, 3) = 1 + 2 = 3\n2. (1, 3), (2, 4) -> min(1, 3) + min(2, 4) = 1 + 2 = 3\n3. (1, 2), (3, 4) -> min(1, 2) + min(3, 4) = 1 + 3 = 4\nSo the maximum possible sum is 4."}, {"full_text": "Example 2:\nInput: nums = [6,2,6,5,1,2]\nOutput: 9\nExplanation: The optimal pairing is (2, 1), (2, 5), (6, 6). min(2, 1) + min(2, 5) + min(6, 6) = 1 + 2 + 6 = 9.", "input": "Input: nums = [6,2,6,5,1,2]", "output": "Output: 9", "explanation": "Explanation: The optimal pairing is (2, 1), (2, 5), (6, 6). min(2, 1) + min(2, 5) + min(6, 6) = 1 + 2 + 6 = 9."}], "constraints": "Constraints:\n1 <= n <= 10^4\nnums.length == 2 * n\n-10^4 <= nums[i] <= 10^4", "notes": ""}, "559": {"label": "Easy", "title": "Maximum Depth of N-ary Tree", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7077, "total_accepted": 199700.0, "total_submissions": 282200.0, "testcase_example": "'[1,null,3,2,4,null,5,6]'", "body": "Given a n-ary tree, find its maximum depth.\nThe maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.\nNary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See examples).", "examples": [{"full_text": "Example 1:\nInput: root = [1,null,3,2,4,null,5,6]\nOutput: 3", "input": "Input: root = [1,null,3,2,4,null,5,6]", "output": "Output: 3", "explanation": ""}, {"full_text": "Example 2:\nInput: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]\nOutput: 5", "input": "Input: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]", "output": "Output: 5", "explanation": ""}], "constraints": "Constraints:\nThe total number of nodes is in the range [0, 10^4].\nThe depth of the n-ary tree is less than or equal to 1000.", "notes": ""}, "557": {"label": "Easy", "title": "Reverse Words in a String III", "tags": "algorithms,zappos,string", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7765000000000001, "total_accepted": 393100.0, "total_submissions": 506300.0, "testcase_example": "`\"Let's take LeetCode contest\"`", "body": "Given a string s, reverse the order of characters in each word within a sentence while still preserving whitespace and initial word order.", "examples": [{"full_text": "Example 1:\nInput: s = \"Let's take LeetCode contest\"\nOutput: \"s'teL ekat edoCteeL tsetnoc\"", "input": "Input: s = \"Let's take LeetCode contest\"", "output": "Output: \"s'teL ekat edoCteeL tsetnoc\"", "explanation": ""}, {"full_text": "Example 2:\nInput: s = \"God Ding\"\nOutput: \"doG gniD\"", "input": "Input: s = \"God Ding\"", "output": "Output: \"doG gniD\"", "explanation": ""}], "constraints": "Constraints:\n1 <= s.length <= 5 * 10^4\ns contains printable ASCII characters.\ns does not contain any leading or trailing spaces.\nThere is at least one word in s.\nAll the words in s are separated by a single space.", "notes": ""}, "551": {"label": "Easy", "title": "Student Attendance Record I", "tags": "algorithms,google,string", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4733, "total_accepted": 135700.0, "total_submissions": 286700.0, "testcase_example": "'\"PPALLP\"'", "body": "You are given a string s representing an attendance record for a student where each character signifies whether the student was absent, late, or present on that day. The record only contains the following three characters:\n'A': Absent.\n'L': Late.\n'P': Present.\nThe student is eligible for an attendance award if they meet both of the following criteria:\nThe student was absent ('A') for strictly fewer than 2 days total.\nThe student was never late ('L') for 3 or more consecutive days.\nReturn true if the student is eligible for an attendance award, or false otherwise.", "examples": [{"full_text": "Example 1:\nInput: s = \"PPALLP\"\nOutput: true\nExplanation: The student has fewer than 2 absences and was never late 3 or more consecutive days.", "input": "Input: s = \"PPALLP\"", "output": "Output: true", "explanation": "Explanation: The student has fewer than 2 absences and was never late 3 or more consecutive days."}, {"full_text": "Example 2:\nInput: s = \"PPALLL\"\nOutput: false\nExplanation: The student was late 3 consecutive days in the last 3 days, so is not eligible for the award.", "input": "Input: s = \"PPALLL\"", "output": "Output: false", "explanation": "Explanation: The student was late 3 consecutive days in the last 3 days, so is not eligible for the award."}], "constraints": "Constraints:\n1 <= s.length <= 1000\ns[i] is either 'A', 'L', or 'P'.", "notes": ""}, "543": {"label": "Easy", "title": "Diameter of Binary Tree", "tags": "algorithms,facebook,google,tree", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5347, "total_accepted": 664400.0, "total_submissions": 1200000.0, "testcase_example": "'[1,2,3,4,5]'", "body": "Given the root of a binary tree, return the length of the diameter of the tree.\nThe diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.\nThe length of a path between two nodes is represented by the number of edges between them.", "examples": [{"full_text": "Example 1:\nInput: root = [1,2,3,4,5]\nOutput: 3\nExplanation: 3 is the length of the path [4,2,1,3] or [5,2,1,3].", "input": "Input: root = [1,2,3,4,5]", "output": "Output: 3", "explanation": "Explanation: 3 is the length of the path [4,2,1,3] or [5,2,1,3]."}, {"full_text": "Example 2:\nInput: root = [1,2]\nOutput: 1", "input": "Input: root = [1,2]", "output": "Output: 1", "explanation": ""}], "constraints": "Constraints:\nThe number of nodes in the tree is in the range [1, 10^4].\n-100 <= Node.val <= 100", "notes": ""}, "541": {"label": "Easy", "title": "Reverse String II", "tags": "algorithms,google,string", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5002, "total_accepted": 142100.0, "total_submissions": 284100.0, "testcase_example": "'\"abcdefg\"\\n2'", "body": "Given a string s and an integer k, reverse the first k characters for every 2k characters counting from the start of the string.\nIf there are fewer than k characters left, reverse all of them. If there are less than 2k but greater than or equal to k characters, then reverse the first k characters and leave the other as original.", "examples": [{"full_text": "Example 1:\nInput: s = \"abcdefg\", k = 2\nOutput: \"bacdfeg\"", "input": "Input: s = \"abcdefg\", k = 2", "output": "Output: \"bacdfeg\"", "explanation": ""}, {"full_text": "Example 2:\nInput: s = \"abcd\", k = 2\nOutput: \"bacd\"", "input": "Input: s = \"abcd\", k = 2", "output": "Output: \"bacd\"", "explanation": ""}], "constraints": "Constraints:\n1 <= s.length <= 10^4\ns consists of only lowercase English letters.\n1 <= k <= 10^4", "notes": ""}, "530": {"label": "Easy", "title": "Minimum Absolute Difference in BST", "tags": "algorithms,google,array,depth-first-search,binary-search-tree", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5606, "total_accepted": 146900.0, "total_submissions": 262000.0, "testcase_example": "'[4,2,6,1,3]'", "body": "Given the root of a Binary Search Tree (BST), return the minimum absolute difference between the values of any two different nodes in the tree.", "examples": [{"full_text": "Example 1:\nInput: root = [4,2,6,1,3]\nOutput: 1", "input": "Input: root = [4,2,6,1,3]", "output": "Output: 1", "explanation": ""}, {"full_text": "Example 2:\nInput: root = [1,0,48,null,null,12,49]\nOutput: 1", "input": "Input: root = [1,0,48,null,null,12,49]", "output": "Output: 1", "explanation": ""}], "constraints": "Constraints:\nThe number of nodes in the tree is in the range [2, 10^4].\n0 <= Node.val <= 10^5", "notes": "Note: This question is the same as 783: https://leetcode.com/problems/minimum-distance-between-bst-nodes/"}, "521": {"label": "Easy", "title": "Longest Uncommon Subsequence I", "tags": "algorithms,google,string", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5998, "total_accepted": 81700.0, "total_submissions": 136200.0, "testcase_example": "'\"aba\"\\n\"cdc\"'", "body": "Given two strings a and b, return the length of the longest uncommon subsequence between a and b. If the longest uncommon subsequence does not exist, return -1.\nAn uncommon subsequence between two strings is a string that is a subsequence of one but not the other.\nA subsequence of a string s is a string that can be obtained after deleting any number of characters from s.\nFor example, \"abc\" is a subsequence of \"aebdc\" because you can delete the underlined characters in \"aebdc\" to get \"abc\". Other subsequences of \"aebdc\" include \"aebdc\", \"aeb\", and \"\" (empty string).", "examples": [{"full_text": "Example 1:\nInput: a = \"aba\", b = \"cdc\"\nOutput: 3\nExplanation: One longest uncommon subsequence is \"aba\" because \"aba\" is a subsequence of \"aba\" but not \"cdc\".\nNote that \"cdc\" is also a longest uncommon subsequence.", "input": "Input: a = \"aba\", b = \"cdc\"", "output": "Output: 3", "explanation": "Explanation: One longest uncommon subsequence is \"aba\" because \"aba\" is a subsequence of \"aba\" but not \"cdc\".\nNote that \"cdc\" is also a longest uncommon subsequence."}, {"full_text": "Example 2:\nInput: a = \"aaa\", b = \"bbb\"\nOutput: 3\nExplanation:\nThe longest uncommon subsequences are \"aaa\" and \"bbb\".", "input": "Input: a = \"aaa\", b = \"bbb\"", "output": "Output: 3", "explanation": "Explanation:\nThe longest uncommon subsequences are \"aaa\" and \"bbb\"."}, {"full_text": "Example 3:\nInput: a = \"aaa\", b = \"aaa\"\nOutput: -1\nExplanation:\nEvery subsequence of string a is also a subsequence of string b. Similarly, every subsequence of string b is also a subsequence of string a.", "input": "Input: a = \"aaa\", b = \"aaa\"", "output": "Output: -1", "explanation": "Explanation:\nEvery subsequence of string a is also a subsequence of string b. Similarly, every subsequence of string b is also a subsequence of string a."}], "constraints": "Constraints:\n1 <= a.length, b.length <= 100\na and b consist of lower-case English letters.", "notes": ""}, "520": {"label": "Easy", "title": "Detect Capital", "tags": "algorithms,google,string", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5573, "total_accepted": 256899.99999999997, "total_submissions": 461000.0, "testcase_example": "'\"USA\"'", "body": "We define the usage of capitals in a word to be right when one of the following cases holds:\nAll letters in this word are capitals, like \"USA\".\nAll letters in this word are not capitals, like \"leetcode\".\nOnly the first letter in this word is capital, like \"Google\".\nGiven a string word, return true if the usage of capitals in it is right.", "examples": [{"full_text": "Example 1:\nInput: word = \"USA\"\nOutput: true", "input": "Input: word = \"USA\"", "output": "Output: true", "explanation": ""}, {"full_text": "Example 2:\nInput: word = \"FlaG\"\nOutput: false", "input": "Input: word = \"FlaG\"", "output": "Output: false", "explanation": ""}], "constraints": "Constraints:\n1 <= word.length <= 100\nword consists of lowercase and uppercase English letters.", "notes": ""}, "509": {"label": "Easy", "title": "Fibonacci Number", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6805, "total_accepted": 660900.0, "total_submissions": 971200.0, "testcase_example": "'2'", "body": "The Fibonacci numbers, commonly denoted F(n) form a sequence, called the Fibonacci sequence, such that each number is the sum of the two preceding ones, starting from 0 and 1. That is,\nF(0) = 0, F(1) = 1\nF(n) = F(n - 1) + F(n - 2), for n > 1.\nGiven n, calculate F(n).", "examples": [{"full_text": "Example 1:\nInput: n = 2\nOutput: 1\nExplanation: F(2) = F(1) + F(0) = 1 + 0 = 1.", "input": "Input: n = 2", "output": "Output: 1", "explanation": "Explanation: F(2) = F(1) + F(0) = 1 + 0 = 1."}, {"full_text": "Example 2:\nInput: n = 3\nOutput: 2\nExplanation: F(3) = F(2) + F(1) = 1 + 1 = 2.", "input": "Input: n = 3", "output": "Output: 2", "explanation": "Explanation: F(3) = F(2) + F(1) = 1 + 1 = 2."}, {"full_text": "Example 3:\nInput: n = 4\nOutput: 3\nExplanation: F(4) = F(3) + F(2) = 2 + 1 = 3.", "input": "Input: n = 4", "output": "Output: 3", "explanation": "Explanation: F(4) = F(3) + F(2) = 2 + 1 = 3."}], "constraints": "Constraints:\n0 <= n <= 30", "notes": ""}, "507": {"label": "Easy", "title": "Perfect Number", "tags": "algorithms,math", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.375, "total_accepted": 97600.0, "total_submissions": 260300.0, "testcase_example": "'28'", "body": "A perfect number is a positive integer that is equal to the sum of its positive divisors, excluding the number itself. A divisor of an integer x is an integer that can divide x evenly.\nGiven an integer n, return true if n is a perfect number, otherwise return false.", "examples": [{"full_text": "Example 1:\nInput: num = 28\nOutput: true\nExplanation: 28 = 1 + 2 + 4 + 7 + 14\n1, 2, 4, 7, and 14 are all divisors of 28.", "input": "Input: num = 28", "output": "Output: true", "explanation": "Explanation: 28 = 1 + 2 + 4 + 7 + 14\n1, 2, 4, 7, and 14 are all divisors of 28."}, {"full_text": "Example 2:\nInput: num = 7\nOutput: false", "input": "Input: num = 7", "output": "Output: false", "explanation": ""}], "constraints": "Constraints:\n1 <= num <= 10^8", "notes": ""}, "506": {"label": "Easy", "title": "Relative Ranks", "tags": "algorithms,google", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5578, "total_accepted": 82800.0, "total_submissions": 148500.0, "testcase_example": "'[5,4,3,2,1]'", "body": "You are given an integer array score of size n, where score[i] is the score of the i^th athlete in a competition. All the scores are guaranteed to be unique.\nThe athletes are placed based on their scores, where the 1^st place athlete has the highest score, the 2^nd place athlete has the 2^nd highest score, and so on. The placement of each athlete determines their rank:\nThe 1^st place athlete's rank is \"Gold Medal\".\nThe 2^nd place athlete's rank is \"Silver Medal\".\nThe 3^rd place athlete's rank is \"Bronze Medal\".\nFor the 4^th place to the n^th place athlete, their rank is their placement number (i.e., the x^th place athlete's rank is \"x\").\nReturn an array answer of size n where answer[i] is the rank of the i^th athlete.", "examples": [{"full_text": "Example 1:\nInput: score = [5,4,3,2,1]\nOutput: [\"Gold Medal\",\"Silver Medal\",\"Bronze Medal\",\"4\",\"5\"]\nExplanation: The placements are [1^st, 2^nd, 3^rd, 4^th, 5^th].", "input": "Input: score = [5,4,3,2,1]", "output": "Output: [\"Gold Medal\",\"Silver Medal\",\"Bronze Medal\",\"4\",\"5\"]", "explanation": "Explanation: The placements are [1^st, 2^nd, 3^rd, 4^th, 5^th]."}, {"full_text": "Example 2:\nInput: score = [10,3,8,9,4]\nOutput: [\"Gold Medal\",\"5\",\"Bronze Medal\",\"Silver Medal\",\"4\"]\nExplanation: The placements are [1^st, 5^th, 3^rd, 2^nd, 4^th].", "input": "Input: score = [10,3,8,9,4]", "output": "Output: [\"Gold Medal\",\"5\",\"Bronze Medal\",\"Silver Medal\",\"4\"]", "explanation": "Explanation: The placements are [1^st, 5^th, 3^rd, 2^nd, 4^th]."}], "constraints": "Constraints:\nn == score.length\n1 <= n <= 10^4\n0 <= score[i] <= 10^6\nAll the values in score are unique.", "notes": ""}, "504": {"label": "Easy", "title": "Base 7", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.473, "total_accepted": 81900.0, "total_submissions": 173100.0, "testcase_example": "'100'", "body": "Given an integer num, return a string of its base 7 representation.", "examples": [{"full_text": "Example 1:\nInput: num = 100\nOutput: \"202\"", "input": "Input: num = 100", "output": "Output: \"202\"", "explanation": ""}, {"full_text": "Example 2:\nInput: num = -7\nOutput: \"-10\"", "input": "Input: num = -7", "output": "Output: \"-10\"", "explanation": ""}], "constraints": "Constraints:\n-10^7 <= num <= 10^7", "notes": ""}, "501": {"label": "Easy", "title": "Find Mode in Binary Search Tree", "tags": "algorithms,google,tree", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4667, "total_accepted": 142200.0, "total_submissions": 304700.0, "testcase_example": "'[1,null,2,2]'", "body": "Given the root of a binary search tree (BST) with duplicates, return all the mode(s) (i.e., the most frequently occurred element) in it.\nIf the tree has more than one mode, return them in any order.\nAssume a BST is defined as follows:\nThe left subtree of a node contains only nodes with keys less than or equal to the node's key.\nThe right subtree of a node contains only nodes with keys greater than or equal to the node's key.\nBoth the left and right subtrees must also be binary search trees.", "examples": [{"full_text": "Example 1:\nInput: root = [1,null,2,2]\nOutput: [2]", "input": "Input: root = [1,null,2,2]", "output": "Output: [2]", "explanation": ""}, {"full_text": "Example 2:\nInput: root = [0]\nOutput: [0]", "input": "Input: root = [0]", "output": "Output: [0]", "explanation": ""}], "constraints": "Constraints:\nThe number of nodes in the tree is in the range [1, 10^4].\n-10^5 <= Node.val <= 10^5\nFollow up: Could you do that without using any extra space? (Assume that the implicit stack space incurred due to recursion does not count).", "notes": ""}, "500": {"label": "Easy", "title": "Keyboard Row", "tags": "algorithms,mathworks,hash-table", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6765000000000001, "total_accepted": 145600.0, "total_submissions": 215300.0, "testcase_example": "'[\"Hello\",\"Alaska\",\"Dad\",\"Peace\"]'", "body": "Given an array of strings words, return the words that can be typed using letters of the alphabet on only one row of American keyboard like the image below.\nIn the American keyboard:\nthe first row consists of the characters \"qwertyuiop\",\nthe second row consists of the characters \"asdfghjkl\", and\nthe third row consists of the characters \"zxcvbnm\".", "examples": [{"full_text": "Example 1:\nInput: words = [\"Hello\",\"Alaska\",\"Dad\",\"Peace\"]\nOutput: [\"Alaska\",\"Dad\"]", "input": "Input: words = [\"Hello\",\"Alaska\",\"Dad\",\"Peace\"]", "output": "Output: [\"Alaska\",\"Dad\"]", "explanation": ""}, {"full_text": "Example 2:\nInput: words = [\"omk\"]\nOutput: []", "input": "Input: words = [\"omk\"]", "output": "Output: []", "explanation": ""}, {"full_text": "Example 3:\nInput: words = [\"adsdf\",\"sfd\"]\nOutput: [\"adsdf\",\"sfd\"]", "input": "Input: words = [\"adsdf\",\"sfd\"]", "output": "Output: [\"adsdf\",\"sfd\"]", "explanation": ""}], "constraints": "Constraints:\n1 <= words.length <= 20\n1 <= words[i].length <= 100\nwords[i] consists of English letters (both lowercase and uppercase).", "notes": ""}, "496": {"label": "Easy", "title": "Next Greater Element I", "tags": "algorithms,stack", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6947, "total_accepted": 319100.0, "total_submissions": 459400.0, "testcase_example": "'[4,1,2]\\n[1,3,4,2]'", "body": "The next greater element of some element x in an array is the first greater element that is to the right of x in the same array.\nYou are given two distinct 0-indexed integer arrays nums1 and nums2, where nums1 is a subset of nums2.\nFor each 0 <= i < nums1.length, find the index j such that nums1[i] == nums2[j] and determine the next greater element of nums2[j] in nums2. If there is no next greater element, then the answer for this query is -1.\nReturn an array ans of length nums1.length such that ans[i] is the next greater element as described above.", "examples": [{"full_text": "Example 1:\nInput: nums1 = [4,1,2], nums2 = [1,3,4,2]\nOutput: [-1,3,-1]\nExplanation: The next greater element for each value of nums1 is as follows:\n- 4 is underlined in nums2 = [1,3,4,2]. There is no next greater element, so the answer is -1.\n- 1 is underlined in nums2 = [1,3,4,2]. The next greater element is 3.\n- 2 is underlined in nums2 = [1,3,4,2]. There is no next greater element, so the answer is -1.", "input": "Input: nums1 = [4,1,2], nums2 = [1,3,4,2]", "output": "Output: [-1,3,-1]", "explanation": "Explanation: The next greater element for each value of nums1 is as follows:\n- 4 is underlined in nums2 = [1,3,4,2]. There is no next greater element, so the answer is -1.\n- 1 is underlined in nums2 = [1,3,4,2]. The next greater element is 3.\n- 2 is underlined in nums2 = [1,3,4,2]. There is no next greater element, so the answer is -1."}, {"full_text": "Example 2:\nInput: nums1 = [2,4], nums2 = [1,2,3,4]\nOutput: [3,-1]\nExplanation: The next greater element for each value of nums1 is as follows:\n- 2 is underlined in nums2 = [1,2,3,4]. The next greater element is 3.\n- 4 is underlined in nums2 = [1,2,3,4]. There is no next greater element, so the answer is -1.", "input": "Input: nums1 = [2,4], nums2 = [1,2,3,4]", "output": "Output: [3,-1]", "explanation": "Explanation: The next greater element for each value of nums1 is as follows:\n- 2 is underlined in nums2 = [1,2,3,4]. The next greater element is 3.\n- 4 is underlined in nums2 = [1,2,3,4]. There is no next greater element, so the answer is -1."}], "constraints": "Constraints:\n1 <= nums1.length <= nums2.length <= 1000\n0 <= nums1[i], nums2[i] <= 10^4\nAll integers in nums1 and nums2 are unique.\nAll the integers of nums1 also appear in nums2.\nFollow up: Could you find an O(nums1.length + nums2.length) solution?", "notes": ""}, "495": {"label": "Easy", "title": "Teemo Attacking", "tags": "algorithms,array", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.568, "total_accepted": 93800.0, "total_submissions": 165100.0, "testcase_example": "'[1,4]\\n2'", "body": "Our hero Teemo is attacking an enemy Ashe with poison attacks! When Teemo attacks Ashe, Ashe gets poisoned for a exactly duration seconds. More formally, an attack at second t will mean Ashe is poisoned during the inclusive time interval [t, t + duration - 1]. If Teemo attacks again before the poison effect ends, the timer for it is reset, and the poison effect will end duration seconds after the new attack.\nYou are given a non-decreasing integer array timeSeries, where timeSeries[i] denotes that Teemo attacks Ashe at second timeSeries[i], and an integer duration.\nReturn the total number of seconds that Ashe is poisoned.", "examples": [{"full_text": "Example 1:\nInput: timeSeries = [1,4], duration = 2\nOutput: 4\nExplanation: Teemo's attacks on Ashe go as follows:\n- At second 1, Teemo attacks, and Ashe is poisoned for seconds 1 and 2.\n- At second 4, Teemo attacks, and Ashe is poisoned for seconds 4 and 5.\nAshe is poisoned for seconds 1, 2, 4, and 5, which is 4 seconds in total.", "input": "Input: timeSeries = [1,4], duration = 2", "output": "Output: 4", "explanation": "Explanation: Teemo's attacks on Ashe go as follows:\n- At second 1, Teemo attacks, and Ashe is poisoned for seconds 1 and 2.\n- At second 4, Teemo attacks, and Ashe is poisoned for seconds 4 and 5.\nAshe is poisoned for seconds 1, 2, 4, and 5, which is 4 seconds in total."}, {"full_text": "Example 2:\nInput: timeSeries = [1,2], duration = 2\nOutput: 3\nExplanation: Teemo's attacks on Ashe go as follows:\n- At second 1, Teemo attacks, and Ashe is poisoned for seconds 1 and 2.\n- At second 2 however, Teemo attacks again and resets the poison timer. Ashe is poisoned for seconds 2 and 3.\nAshe is poisoned for seconds 1, 2, and 3, which is 3 seconds in total.", "input": "Input: timeSeries = [1,2], duration = 2", "output": "Output: 3", "explanation": "Explanation: Teemo's attacks on Ashe go as follows:\n- At second 1, Teemo attacks, and Ashe is poisoned for seconds 1 and 2.\n- At second 2 however, Teemo attacks again and resets the poison timer. Ashe is poisoned for seconds 2 and 3.\nAshe is poisoned for seconds 1, 2, and 3, which is 3 seconds in total."}], "constraints": "Constraints:\n1 <= timeSeries.length <= 10^4\n0 <= timeSeries[i], duration <= 10^7\ntimeSeries is sorted in non-decreasing order.", "notes": ""}, "492": {"label": "Easy", "title": "Construct the Rectangle", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.523, "total_accepted": 75500.0, "total_submissions": 144400.0, "testcase_example": "'4'", "body": "A web developer needs to know how to design a web page's size. So, given a specific rectangular web page\u2019s area, your job by now is to design a rectangular web page, whose length L and width W satisfy the following requirements:\nThe area of the rectangular web page you designed must equal to the given target area.\nThe width W should not be larger than the length L, which means L >= W.\nThe difference between length L and width W should be as small as possible.\nReturn an array [L, W] where L and W are the length and width of the\nweb page you designed in sequence.", "examples": [{"full_text": "Example 1:\nInput: area = 4\nOutput: [2,2]\nExplanation: The target area is 4, and all the possible ways to construct it are [1,4], [2,2], [4,1].\nBut according to requirement 2, [1,4] is illegal; according to requirement 3, [4,1] is not optimal compared to [2,2]. So the length L is 2, and the width W is 2.", "input": "Input: area = 4", "output": "Output: [2,2]", "explanation": "Explanation: The target area is 4, and all the possible ways to construct it are [1,4], [2,2], [4,1].\nBut according to requirement 2, [1,4] is illegal; according to requirement 3, [4,1] is not optimal compared to [2,2]. So the length L is 2, and the width W is 2."}, {"full_text": "Example 2:\nInput: area = 37\nOutput: [37,1]", "input": "Input: area = 37", "output": "Output: [37,1]", "explanation": ""}, {"full_text": "Example 3:\nInput: area = 122122\nOutput: [427,286]", "input": "Input: area = 122122", "output": "Output: [427,286]", "explanation": ""}], "constraints": "Constraints:\n1 <= area <= 10^7", "notes": ""}, "485": {"label": "Easy", "title": "Max Consecutive Ones", "tags": "algorithms,google,array", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5482, "total_accepted": 604100.0, "total_submissions": 1100000.0, "testcase_example": "'[1,1,0,1,1,1]'", "body": "Given a binary array nums, return the maximum number of consecutive 1's in the array.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,1,0,1,1,1]\nOutput: 3\nExplanation: The first two digits or the last three digits are consecutive 1s. The maximum number of consecutive 1s is 3.", "input": "Input: nums = [1,1,0,1,1,1]", "output": "Output: 3", "explanation": "Explanation: The first two digits or the last three digits are consecutive 1s. The maximum number of consecutive 1s is 3."}, {"full_text": "Example 2:\nInput: nums = [1,0,1,1,0,1]\nOutput: 2", "input": "Input: nums = [1,0,1,1,0,1]", "output": "Output: 2", "explanation": ""}], "constraints": "Constraints:\n1 <= nums.length <= 10^5\nnums[i] is either 0 or 1.", "notes": ""}, "482": {"label": "Easy", "title": "License Key Formatting", "tags": "algorithms,google", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4313, "total_accepted": 202500.0, "total_submissions": 469600.0, "testcase_example": "'\"5F3Z-2e-9-w\"\\n4'", "body": "You are given a license key represented as a string s that consists of only alphanumeric characters and dashes. The string is separated into n + 1 groups by n dashes. You are also given an integer k.\nWe want to reformat the string s such that each group contains exactly k characters, except for the first group, which could be shorter than k but still must contain at least one character. Furthermore, there must be a dash inserted between two groups, and you should convert all lowercase letters to uppercase.\nReturn the reformatted license key.", "examples": [{"full_text": "Example 1:\nInput: s = \"5F3Z-2e-9-w\", k = 4\nOutput: \"5F3Z-2E9W\"\nExplanation: The string s has been split into two parts, each part has 4 characters.\nNote that the two extra dashes are not needed and can be removed.", "input": "Input: s = \"5F3Z-2e-9-w\", k = 4", "output": "Output: \"5F3Z-2E9W\"", "explanation": "Explanation: The string s has been split into two parts, each part has 4 characters.\nNote that the two extra dashes are not needed and can be removed."}, {"full_text": "Example 2:\nInput: s = \"2-5g-3-J\", k = 2\nOutput: \"2-5G-3J\"\nExplanation: The string s has been split into three parts, each part has 2 characters except the first part as it could be shorter as mentioned above.", "input": "Input: s = \"2-5g-3-J\", k = 2", "output": "Output: \"2-5G-3J\"", "explanation": "Explanation: The string s has been split into three parts, each part has 2 characters except the first part as it could be shorter as mentioned above."}], "constraints": "Constraints:\n1 <= s.length <= 10^5\ns consists of English letters, digits, and dashes '-'.\n1 <= k <= 10^4", "notes": ""}, "476": {"label": "Easy", "title": "Number Complement", "tags": "algorithms,bit-manipulation", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6656, "total_accepted": 257500.0, "total_submissions": 386900.0, "testcase_example": "'5'", "body": "The complement of an integer is the integer you get when you flip all the 0's to 1's and all the 1's to 0's in its binary representation.\nFor example, The integer 5 is \"101\" in binary and its complement is \"010\" which is the integer 2.\nGiven an integer num, return its complement.", "examples": [{"full_text": "Example 1:\nInput: num = 5\nOutput: 2\nExplanation: The binary representation of 5 is 101 (no leading zero bits), and its complement is 010. So you need to output 2.", "input": "Input: num = 5", "output": "Output: 2", "explanation": "Explanation: The binary representation of 5 is 101 (no leading zero bits), and its complement is 010. So you need to output 2."}, {"full_text": "Example 2:\nInput: num = 1\nOutput: 0\nExplanation: The binary representation of 1 is 1 (no leading zero bits), and its complement is 0. So you need to output 0.", "input": "Input: num = 1", "output": "Output: 0", "explanation": "Explanation: The binary representation of 1 is 1 (no leading zero bits), and its complement is 0. So you need to output 0."}], "constraints": "Constraints:\n1 <= num < 2^31", "notes": "Note: This question is the same as 1009: https://leetcode.com/problems/complement-of-base-10-integer/"}, "463": {"label": "Easy", "title": "Island Perimeter", "tags": "algorithms,google,hash-table", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6872, "total_accepted": 348400.0, "total_submissions": 507000.0, "testcase_example": "'[[0,1,0,0],[1,1,1,0],[0,1,0,0],[1,1,0,0]]'", "body": "You are given row x col grid representing a map where grid[i][j] = 1 represents\nland and grid[i][j] = 0 represents water.\nGrid cells are connected horizontally/vertically (not diagonally). The grid is completely surrounded by water, and there is exactly one island (i.e., one or more connected land cells).\nThe island doesn't have \"lakes\", meaning the water inside isn't connected to the water around the island. One cell is a square with side length 1. The grid is rectangular, width and height don't exceed 100. Determine the perimeter of the island.", "examples": [{"full_text": "Example 1:\nInput: grid = [[0,1,0,0],[1,1,1,0],[0,1,0,0],[1,1,0,0]]\nOutput: 16\nExplanation: The perimeter is the 16 yellow stripes in the image above.", "input": "Input: grid = [[0,1,0,0],[1,1,1,0],[0,1,0,0],[1,1,0,0]]", "output": "Output: 16", "explanation": "Explanation: The perimeter is the 16 yellow stripes in the image above."}, {"full_text": "Example 2:\nInput: grid = [[1]]\nOutput: 4", "input": "Input: grid = [[1]]", "output": "Output: 4", "explanation": ""}, {"full_text": "Example 3:\nInput: grid = [[1,0]]\nOutput: 4", "input": "Input: grid = [[1,0]]", "output": "Output: 4", "explanation": ""}], "constraints": "Constraints:\nrow == grid.length\ncol == grid[i].length\n1 <= row, col <= 100\ngrid[i][j] is 0 or 1.\nThere is exactly one island in grid.", "notes": ""}, "461": {"label": "Easy", "title": "Hamming Distance", "tags": "algorithms,facebook,bit-manipulation", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7441, "total_accepted": 461500.0, "total_submissions": 620300.0, "testcase_example": "'1\\n4'", "body": "The Hamming distance between two integers is the number of positions at which the corresponding bits are different.\nGiven two integers x and y, return the Hamming distance between them.", "examples": [{"full_text": "Example 1:\nInput: x = 1, y = 4\nOutput: 2\nExplanation:\n1 (0 0 0 1)\n4 (0 1 0 0)\n\u2191 \u2191\nThe above arrows point to positions where the corresponding bits are different.", "input": "Input: x = 1, y = 4", "output": "Output: 2", "explanation": "Explanation:\n1 (0 0 0 1)\n4 (0 1 0 0)\n\u2191 \u2191\nThe above arrows point to positions where the corresponding bits are different."}, {"full_text": "Example 2:\nInput: x = 3, y = 1\nOutput: 1", "input": "Input: x = 3, y = 1", "output": "Output: 1", "explanation": ""}], "constraints": "Constraints:\n0 <=\nx, y <= 2^31 - 1", "notes": ""}, "459": {"label": "Easy", "title": "Repeated Substring Pattern", "tags": "algorithms,amazon,google,string", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.43520000000000003, "total_accepted": 228100.0, "total_submissions": 524200.00000000006, "testcase_example": "'\"abab\"'", "body": "Given a string s, check if it can be constructed by taking a substring of it and appending multiple copies of the substring together.", "examples": [{"full_text": "Example 1:\nInput: s = \"abab\"\nOutput: true\nExplanation: It is the substring \"ab\" twice.", "input": "Input: s = \"abab\"", "output": "Output: true", "explanation": "Explanation: It is the substring \"ab\" twice."}, {"full_text": "Example 2:\nInput: s = \"aba\"\nOutput: false", "input": "Input: s = \"aba\"", "output": "Output: false", "explanation": ""}, {"full_text": "Example 3:\nInput: s = \"abcabcabcabc\"\nOutput: true\nExplanation: It is the substring \"abc\" four times or the substring \"abcabc\" twice.", "input": "Input: s = \"abcabcabcabc\"", "output": "Output: true", "explanation": "Explanation: It is the substring \"abc\" four times or the substring \"abcabc\" twice."}], "constraints": "Constraints:\n1 <= s.length <= 10^4\ns consists of lowercase English letters.", "notes": ""}, "455": {"label": "Easy", "title": "Assign Cookies", "tags": "algorithms,greedy", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5072, "total_accepted": 155000.0, "total_submissions": 305600.0, "testcase_example": "'[1,2,3]\\n[1,1]'", "body": "Assume you are an awesome parent and want to give your children some cookies. But, you should give each child at most one cookie.\nEach child i has a greed factor g[i], which is the minimum size of a cookie that the child will be content with; and each cookie j has a size s[j]. If s[j] >= g[i], we can assign the cookie j to the child i, and the child i will be content. Your goal is to maximize the number of your content children and output the maximum number.", "examples": [{"full_text": "Example 1:\nInput: g = [1,2,3], s = [1,1]\nOutput: 1\nExplanation: You have 3 children and 2 cookies. The greed factors of 3 children are 1, 2, 3.\nAnd even though you have 2 cookies, since their size is both 1, you could only make the child whose greed factor is 1 content.\nYou need to output 1.", "input": "Input: g = [1,2,3], s = [1,1]", "output": "Output: 1", "explanation": "Explanation: You have 3 children and 2 cookies. The greed factors of 3 children are 1, 2, 3.\nAnd even though you have 2 cookies, since their size is both 1, you could only make the child whose greed factor is 1 content.\nYou need to output 1."}, {"full_text": "Example 2:\nInput: g = [1,2], s = [1,2,3]\nOutput: 2\nExplanation: You have 2 children and 3 cookies. The greed factors of 2 children are 1, 2.\nYou have 3 cookies and their sizes are big enough to gratify all of the children,\nYou need to output 2.", "input": "Input: g = [1,2], s = [1,2,3]", "output": "Output: 2", "explanation": "Explanation: You have 2 children and 3 cookies. The greed factors of 2 children are 1, 2.\nYou have 3 cookies and their sizes are big enough to gratify all of the children,\nYou need to output 2."}], "constraints": "Constraints:\n1 <= g.length <= 3 * 10^4\n0 <= s.length <= 3 * 10^4\n1 <= g[i], s[j] <= 2^31 - 1", "notes": ""}, "448": {"label": "Easy", "title": "Find All Numbers Disappeared in an Array", "tags": "algorithms,google,array", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5876, "total_accepted": 532800.0, "total_submissions": 906700.0, "testcase_example": "'[4,3,2,7,8,2,3,1]'", "body": "Given an array nums of n integers where nums[i] is in the range [1, n], return an array of all the integers in the range [1, n] that do not appear in nums.", "examples": [{"full_text": "Example 1:\nInput: nums = [4,3,2,7,8,2,3,1]\nOutput: [5,6]", "input": "Input: nums = [4,3,2,7,8,2,3,1]", "output": "Output: [5,6]", "explanation": ""}, {"full_text": "Example 2:\nInput: nums = [1,1]\nOutput: [2]", "input": "Input: nums = [1,1]", "output": "Output: [2]", "explanation": ""}], "constraints": "Constraints:\nn == nums.length\n1 <= n <= 10^5\n1 <= nums[i] <= n\nFollow up: Could you do it without extra space and in O(n) runtime? You may assume the returned list does not count as extra space.", "notes": ""}, "441": {"label": "Easy", "title": "Arranging Coins", "tags": "algorithms,binary-search,math", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4498, "total_accepted": 260100.00000000003, "total_submissions": 578100.0, "testcase_example": "'5'", "body": "You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the i^th row has exactly i coins. The last row of the staircase may be incomplete.\nGiven the integer n, return the number of complete rows of the staircase you will build.", "examples": [{"full_text": "Example 1:\nInput: n = 5\nOutput: 2\nExplanation: Because the 3^rd row is incomplete, we return 2.", "input": "Input: n = 5", "output": "Output: 2", "explanation": "Explanation: Because the 3^rd row is incomplete, we return 2."}, {"full_text": "Example 2:\nInput: n = 8\nOutput: 3\nExplanation: Because the 4^th row is incomplete, we return 3.", "input": "Input: n = 8", "output": "Output: 3", "explanation": "Explanation: Because the 4^th row is incomplete, we return 3."}], "constraints": "Constraints:\n1 <= n <= 2^31 - 1", "notes": ""}, "434": {"label": "Easy", "title": "Number of Segments in a String", "tags": "algorithms,string", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.37929999999999997, "total_accepted": 110500.0, "total_submissions": 291300.0, "testcase_example": "'\"Hello, my name is John\"'", "body": "Given a string s, return the number of segments in the string.\nA segment is defined to be a contiguous sequence of non-space characters.", "examples": [{"full_text": "Example 1:\nInput: s = \"Hello, my name is John\"\nOutput: 5\nExplanation: The five segments are [\"Hello,\", \"my\", \"name\", \"is\", \"John\"]", "input": "Input: s = \"Hello, my name is John\"", "output": "Output: 5", "explanation": "Explanation: The five segments are [\"Hello,\", \"my\", \"name\", \"is\", \"John\"]"}, {"full_text": "Example 2:\nInput: s = \"Hello\"\nOutput: 1", "input": "Input: s = \"Hello\"", "output": "Output: 1", "explanation": ""}], "constraints": "Constraints:\n0 <= s.length <= 300\ns consists of lowercase and uppercase English letters, digits, or one of the following characters \"!@#$%^&*()_+-=',.:\".\nThe only space character in s is ' '.", "notes": ""}, "415": {"label": "Easy", "title": "Add Strings", "tags": "algorithms,airbnb,google,math", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.517, "total_accepted": 438400.0, "total_submissions": 848000.0, "testcase_example": "'\"11\"\\n\"123\"'", "body": "Given two non-negative integers, num1 and num2 represented as string, return the sum of num1 and num2 as a string.\nYou must solve the problem without using any built-in library for handling large integers (such as BigInteger). You must also not convert the inputs to integers directly.", "examples": [{"full_text": "Example 1:\nInput: num1 = \"11\", num2 = \"123\"\nOutput: \"134\"", "input": "Input: num1 = \"11\", num2 = \"123\"", "output": "Output: \"134\"", "explanation": ""}, {"full_text": "Example 2:\nInput: num1 = \"456\", num2 = \"77\"\nOutput: \"533\"", "input": "Input: num1 = \"456\", num2 = \"77\"", "output": "Output: \"533\"", "explanation": ""}, {"full_text": "Example 3:\nInput: num1 = \"0\", num2 = \"0\"\nOutput: \"0\"", "input": "Input: num1 = \"0\", num2 = \"0\"", "output": "Output: \"0\"", "explanation": ""}], "constraints": "Constraints:\n1 <= num1.length, num2.length <= 10^4\nnum1 and num2 consist of only digits.\nnum1 and num2 don't have any leading zeros except for the zero itself.", "notes": ""}, "414": {"label": "Easy", "title": "Third Maximum Number", "tags": "algorithms,amazon,array", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3154, "total_accepted": 303500.0, "total_submissions": 962200.0, "testcase_example": "'[3,2,1]'", "body": "Given an integer array nums, return the third distinct maximum number in this array. If the third maximum does not exist, return the maximum number.", "examples": [{"full_text": "Example 1:\nInput: nums = [3,2,1]\nOutput: 1\nExplanation:\nThe first distinct maximum is 3.\nThe second distinct maximum is 2.\nThe third distinct maximum is 1.", "input": "Input: nums = [3,2,1]", "output": "Output: 1", "explanation": "Explanation:\nThe first distinct maximum is 3.\nThe second distinct maximum is 2.\nThe third distinct maximum is 1."}, {"full_text": "Example 2:\nInput: nums = [1,2]\nOutput: 2\nExplanation:\nThe first distinct maximum is 2.\nThe second distinct maximum is 1.\nThe third distinct maximum does not exist, so the maximum (2) is returned instead.", "input": "Input: nums = [1,2]", "output": "Output: 2", "explanation": "Explanation:\nThe first distinct maximum is 2.\nThe second distinct maximum is 1.\nThe third distinct maximum does not exist, so the maximum (2) is returned instead."}, {"full_text": "Example 3:\nInput: nums = [2,2,3,1]\nOutput: 1\nExplanation:\nThe first distinct maximum is 3.\nThe second distinct maximum is 2 (both 2's are counted together since they have the same value).\nThe third distinct maximum is 1.", "input": "Input: nums = [2,2,3,1]", "output": "Output: 1", "explanation": "Explanation:\nThe first distinct maximum is 3.\nThe second distinct maximum is 2 (both 2's are counted together since they have the same value).\nThe third distinct maximum is 1."}], "constraints": "Constraints:\n1 <= nums.length <= 10^4\n-2^31 <= nums[i] <= 2^31 - 1\nFollow up: Can you find an O(n) solution?", "notes": ""}, "412": {"label": "Easy", "title": "Fizz Buzz", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6607999999999999, "total_accepted": 578800.0, "total_submissions": 875800.0, "testcase_example": "'3'", "body": "Given an integer n, return a string array answer (1-indexed) where:\nanswer[i] == \"FizzBuzz\" if i is divisible by 3 and 5.\nanswer[i] == \"Fizz\" if i is divisible by 3.\nanswer[i] == \"Buzz\" if i is divisible by 5.\nanswer[i] == i (as a string) if none of the above conditions are true.", "examples": [{"full_text": "Example 1:\nInput: n = 3\nOutput: [\"1\",\"2\",\"Fizz\"]", "input": "Input: n = 3", "output": "Output: [\"1\",\"2\",\"Fizz\"]", "explanation": ""}, {"full_text": "Example 2:\nInput: n = 5\nOutput: [\"1\",\"2\",\"Fizz\",\"4\",\"Buzz\"]", "input": "Input: n = 5", "output": "Output: [\"1\",\"2\",\"Fizz\",\"4\",\"Buzz\"]", "explanation": ""}, {"full_text": "Example 3:\nInput: n = 15\nOutput: [\"1\",\"2\",\"Fizz\",\"4\",\"Buzz\",\"Fizz\",\"7\",\"8\",\"Fizz\",\"Buzz\",\"11\",\"Fizz\",\"13\",\"14\",\"FizzBuzz\"]", "input": "Input: n = 15", "output": "Output: [\"1\",\"2\",\"Fizz\",\"4\",\"Buzz\",\"Fizz\",\"7\",\"8\",\"Fizz\",\"Buzz\",\"11\",\"Fizz\",\"13\",\"14\",\"FizzBuzz\"]", "explanation": ""}], "constraints": "Constraints:\n1 <= n <= 10^4", "notes": ""}, "409": {"label": "Easy", "title": "Longest Palindrome", "tags": "algorithms,google,hash-table", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5327000000000001, "total_accepted": 252800.0, "total_submissions": 474500.0, "testcase_example": "'\"abccccdd\"'", "body": "Given a string s which consists of lowercase or uppercase letters, return the length of the longest palindrome\nthat can be built with those letters.\nLetters are case sensitive, for example,\n\"Aa\" is not considered a palindrome here.", "examples": [{"full_text": "Example 1:\nInput: s = \"abccccdd\"\nOutput: 7\nExplanation:\nOne longest palindrome that can be built is \"dccaccd\", whose length is 7.", "input": "Input: s = \"abccccdd\"", "output": "Output: 7", "explanation": "Explanation:\nOne longest palindrome that can be built is \"dccaccd\", whose length is 7."}, {"full_text": "Example 2:\nInput: s = \"a\"\nOutput: 1", "input": "Input: s = \"a\"", "output": "Output: 1", "explanation": ""}, {"full_text": "Example 3:\nInput: s = \"bb\"\nOutput: 2", "input": "Input: s = \"bb\"", "output": "Output: 2", "explanation": ""}], "constraints": "Constraints:\n1 <= s.length <= 2000\ns consists of lowercase and/or uppercase English\nletters only.", "notes": ""}, "405": {"label": "Easy", "title": "Convert a Number to Hexadecimal", "tags": "algorithms,bit-manipulation", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.456, "total_accepted": 94500.0, "total_submissions": 207300.0, "testcase_example": "'26'", "body": "Given an integer num, return a string representing its hexadecimal representation. For negative integers, two\u2019s complement method is used.\nAll the letters in the answer string should be lowercase characters, and there should not be any leading zeros in the answer except for the zero itself.\nNote:\nYou are not allowed to use any built-in library method to directly solve this problem.", "examples": [{"full_text": "Example 1:\nInput: num = 26\nOutput: \"1a\"", "input": "Input: num = 26", "output": "Output: \"1a\"", "explanation": ""}, {"full_text": "Example 2:\nInput: num = -1\nOutput: \"ffffffff\"", "input": "Input: num = -1", "output": "Output: \"ffffffff\"", "explanation": ""}], "constraints": "Constraints:\n-2^31 <= num <= 2^31 - 1", "notes": ""}, "404": {"label": "Easy", "title": "Sum of Left Leaves", "tags": "algorithms,facebook,tree", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.546, "total_accepted": 326000.0, "total_submissions": 597100.0, "testcase_example": "'[3,9,20,null,null,15,7]'", "body": "Given the root of a binary tree, return the sum of all left leaves.", "examples": [{"full_text": "Example 1:\nInput: root = [3,9,20,null,null,15,7]\nOutput: 24\nExplanation: There are two left leaves in the binary tree, with values 9 and 15 respectively.", "input": "Input: root = [3,9,20,null,null,15,7]", "output": "Output: 24", "explanation": "Explanation: There are two left leaves in the binary tree, with values 9 and 15 respectively."}, {"full_text": "Example 2:\nInput: root = [1]\nOutput: 0", "input": "Input: root = [1]", "output": "Output: 0", "explanation": ""}], "constraints": "Constraints:\nThe number of nodes in the tree is in the range [1, 1000].\n-1000 <= Node.val <= 1000", "notes": ""}, "401": {"label": "Easy", "title": "Binary Watch", "tags": "algorithms,google,backtracking,bit-manipulation", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5017, "total_accepted": 106800.0, "total_submissions": 212900.0, "testcase_example": "'1'", "body": "A binary watch has 4 LEDs on the top which represent the hours (0-11), and the 6 LEDs on the bottom represent the minutes (0-59). Each LED represents a zero or one, with the least significant bit on the right.\nFor example, the below binary watch reads \"4:51\".\nGiven an integer turnedOn which represents the number of LEDs that are currently on, return all possible times the watch could represent. You may return the answer in any order.\nThe hour must not contain a leading zero.\nFor example, \"01:00\" is not valid. It should be \"1:00\".\nThe minute must be consist of two digits and may contain a leading zero.\nFor example, \"10:2\" is not valid. It should be \"10:02\".", "examples": [{"full_text": "Example 1:\nInput: turnedOn = 1\nOutput: [\"0:01\",\"0:02\",\"0:04\",\"0:08\",\"0:16\",\"0:32\",\"1:00\",\"2:00\",\"4:00\",\"8:00\"]", "input": "Input: turnedOn = 1", "output": "Output: [\"0:01\",\"0:02\",\"0:04\",\"0:08\",\"0:16\",\"0:32\",\"1:00\",\"2:00\",\"4:00\",\"8:00\"]", "explanation": ""}, {"full_text": "Example 2:\nInput: turnedOn = 9\nOutput: []", "input": "Input: turnedOn = 9", "output": "Output: []", "explanation": ""}], "constraints": "Constraints:\n0 <= turnedOn <= 10", "notes": ""}, "392": {"label": "Easy", "title": "Is Subsequence", "tags": "algorithms,binary-search,dynamic-programming,greedy", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5012, "total_accepted": 384700.0, "total_submissions": 767500.0, "testcase_example": "'\"abc\"\\n\"ahbgdc\"'", "body": "Given two strings s and t, return true if s is a subsequence of t, or false otherwise.\nA subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., \"ace\" is a subsequence of \"abcde\" while \"aec\" is not).", "examples": [{"full_text": "Example 1:\nInput: s = \"abc\", t = \"ahbgdc\"\nOutput: true", "input": "Input: s = \"abc\", t = \"ahbgdc\"", "output": "Output: true", "explanation": ""}, {"full_text": "Example 2:\nInput: s = \"axc\", t = \"ahbgdc\"\nOutput: false", "input": "Input: s = \"axc\", t = \"ahbgdc\"", "output": "Output: false", "explanation": ""}], "constraints": "Constraints:\n0 <= s.length <= 100\n0 <= t.length <= 10^4\ns and t consist only of lowercase English letters.\nFollow up: Suppose there are lots of incoming s, say s1, s2, ..., sk where k >= 10^9, and you want to check one by one to see if t has its subsequence. In this scenario, how would you change your code?", "notes": ""}, "389": {"label": "Easy", "title": "Find the Difference", "tags": "algorithms,google,bit-manipulation,hash-table", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6045, "total_accepted": 366500.0, "total_submissions": 606300.0, "testcase_example": "'\"abcd\"\\n\"abcde\"'", "body": "You are given two strings s and t.\nString t is generated by random shuffling string s and then add one more letter at a random position.\nReturn the letter that was added to t.", "examples": [{"full_text": "Example 1:\nInput: s = \"abcd\", t = \"abcde\"\nOutput: \"e\"\nExplanation: 'e' is the letter that was added.", "input": "Input: s = \"abcd\", t = \"abcde\"", "output": "Output: \"e\"", "explanation": "Explanation: 'e' is the letter that was added."}, {"full_text": "Example 2:\nInput: s = \"\", t = \"y\"\nOutput: \"y\"", "input": "Input: s = \"\", t = \"y\"", "output": "Output: \"y\"", "explanation": ""}], "constraints": "Constraints:\n0 <= s.length <= 1000\nt.length == s.length + 1\ns and t consist of lowercase English letters.", "notes": ""}, "387": {"label": "Easy", "title": "First Unique Character in a String", "tags": "algorithms,amazon,bloomberg,microsoft,hash-table,string", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5655, "total_accepted": 971100.0, "total_submissions": 1700000.0, "testcase_example": "'\"leetcode\"'", "body": "Given a string s, find the first non-repeating character in it and return its index. If it does not exist, return -1.", "examples": [{"full_text": "Example 1:\nInput: s = \"leetcode\"\nOutput: 0", "input": "Input: s = \"leetcode\"", "output": "Output: 0", "explanation": ""}, {"full_text": "Example 2:\nInput: s = \"loveleetcode\"\nOutput: 2", "input": "Input: s = \"loveleetcode\"", "output": "Output: 2", "explanation": ""}, {"full_text": "Example 3:\nInput: s = \"aabb\"\nOutput: -1", "input": "Input: s = \"aabb\"", "output": "Output: -1", "explanation": ""}], "constraints": "Constraints:\n1 <= s.length <= 10^5\ns consists of only lowercase English letters.", "notes": ""}, "383": {"label": "Easy", "title": "Ransom Note", "tags": "algorithms,apple,string", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5549000000000001, "total_accepted": 342100.0, "total_submissions": 616500.0, "testcase_example": "'\"a\"\\n\"b\"'", "body": "Given two strings ransomNote and magazine, return true if ransomNote can be constructed from magazine and false otherwise.\nEach letter in magazine can only be used once in ransomNote.", "examples": [{"full_text": "Example 1:\nInput: ransomNote = \"a\", magazine = \"b\"\nOutput: false", "input": "Input: ransomNote = \"a\", magazine = \"b\"", "output": "Output: false", "explanation": ""}, {"full_text": "Example 2:\nInput: ransomNote = \"aa\", magazine = \"ab\"\nOutput: false", "input": "Input: ransomNote = \"aa\", magazine = \"ab\"", "output": "Output: false", "explanation": ""}, {"full_text": "Example 3:\nInput: ransomNote = \"aa\", magazine = \"aab\"\nOutput: true", "input": "Input: ransomNote = \"aa\", magazine = \"aab\"", "output": "Output: true", "explanation": ""}], "constraints": "Constraints:\n1 <= ransomNote.length, magazine.length <= 10^5\nransomNote and magazine consist of lowercase English letters.", "notes": ""}, "374": {"label": "Easy", "title": "Guess Number Higher or Lower", "tags": "algorithms,google,binary-search", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4833, "total_accepted": 281800.0, "total_submissions": 583100.0, "testcase_example": "'10\\n6'", "body": "We are playing the Guess Game. The game is as follows:\nI pick a number from 1 to n. You have to guess which number I picked.\nEvery time you guess wrong, I will tell you whether the number I picked is higher or lower than your guess.\nYou call a pre-defined API int guess(int num), which returns three possible results:\n-1: Your guess is higher than the number I picked (i.e. num > pick).\n1: Your guess is lower than the number I picked (i.e. num < pick).\n0: your guess is equal to the number I picked (i.e. num == pick).\nReturn the number that I picked.", "examples": [{"full_text": "Example 1:\nInput: n = 10, pick = 6\nOutput: 6", "input": "Input: n = 10, pick = 6", "output": "Output: 6", "explanation": ""}, {"full_text": "Example 2:\nInput: n = 1, pick = 1\nOutput: 1", "input": "Input: n = 1, pick = 1", "output": "Output: 1", "explanation": ""}, {"full_text": "Example 3:\nInput: n = 2, pick = 1\nOutput: 1", "input": "Input: n = 2, pick = 1", "output": "Output: 1", "explanation": ""}], "constraints": "Constraints:\n1 <= n <= 2^31 - 1\n1 <= pick <= n", "notes": ""}, "367": {"label": "Easy", "title": "Valid Perfect Square", "tags": "algorithms,linkedin,binary-search,math", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.42829999999999996, "total_accepted": 333500.0, "total_submissions": 778600.0, "testcase_example": "'16'", "body": "Given a positive integer num, write a function which returns True if num is a perfect square else False.\nFollow up: Do not use any built-in library function such as sqrt.", "examples": [{"full_text": "Example 1:\nInput: num = 16\nOutput: true", "input": "Input: num = 16", "output": "Output: true", "explanation": ""}, {"full_text": "Example 2:\nInput: num = 14\nOutput: false", "input": "Input: num = 14", "output": "Output: false", "explanation": ""}], "constraints": "Constraints:\n1 <= num <= 2^31 - 1", "notes": ""}, "350": {"label": "Easy", "title": "Intersection of Two Arrays II", "tags": "algorithms,binary-search,hash-table,sort,two-pointers", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.545, "total_accepted": 726500.0, "total_submissions": 1300000.0, "testcase_example": "'[1,2,2,1]\\n[2,2]'", "body": "Given two integer arrays nums1 and nums2, return an array of their intersection. Each element in the result must appear as many times as it shows in both arrays and you may return the result in any order.", "examples": [{"full_text": "Example 1:\nInput: nums1 = [1,2,2,1], nums2 = [2,2]\nOutput: [2,2]", "input": "Input: nums1 = [1,2,2,1], nums2 = [2,2]", "output": "Output: [2,2]", "explanation": ""}, {"full_text": "Example 2:\nInput: nums1 = [4,9,5], nums2 = [9,4,9,8,4]\nOutput: [4,9]\nExplanation: [9,4] is also accepted.", "input": "Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]", "output": "Output: [4,9]", "explanation": "Explanation: [9,4] is also accepted."}], "constraints": "Constraints:\n1 <= nums1.length, nums2.length <= 1000\n0 <= nums1[i], nums2[i] <= 1000\nFollow up:\nWhat if the given array is already sorted? How would you optimize your algorithm?\nWhat if nums1's size is small compared to nums2's size? Which algorithm is better?\nWhat if elements of nums2 are stored on disk, and the memory is limited such that you cannot load all elements into the memory at once?", "notes": ""}, "349": {"label": "Easy", "title": "Intersection of Two Arrays", "tags": "algorithms,twosigma,binary-search,hash-table,sort,two-pointers", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6840999999999999, "total_accepted": 616300.0, "total_submissions": 900900.0, "testcase_example": "'[1,2,2,1]\\n[2,2]'", "body": "Given two integer arrays nums1 and nums2, return an array of their intersection. Each element in the result must be unique and you may return the result in any order.", "examples": [{"full_text": "Example 1:\nInput: nums1 = [1,2,2,1], nums2 = [2,2]\nOutput: [2]", "input": "Input: nums1 = [1,2,2,1], nums2 = [2,2]", "output": "Output: [2]", "explanation": ""}, {"full_text": "Example 2:\nInput: nums1 = [4,9,5], nums2 = [9,4,9,8,4]\nOutput: [9,4]\nExplanation: [4,9] is also accepted.", "input": "Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]", "output": "Output: [9,4]", "explanation": "Explanation: [4,9] is also accepted."}], "constraints": "Constraints:\n1 <= nums1.length, nums2.length <= 1000\n0 <= nums1[i], nums2[i] <= 1000", "notes": ""}, "345": {"label": "Easy", "title": "Reverse Vowels of a String", "tags": "algorithms,google,string,two-pointers", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.46649999999999997, "total_accepted": 332600.0, "total_submissions": 712800.0, "testcase_example": "'\"hello\"'", "body": "Given a string s, reverse only all the vowels in the string and return it.\nThe vowels are 'a', 'e', 'i', 'o', and 'u', and they can appear in both cases.", "examples": [{"full_text": "Example 1:\nInput: s = \"hello\"\nOutput: \"holle\"", "input": "Input: s = \"hello\"", "output": "Output: \"holle\"", "explanation": ""}, {"full_text": "Example 2:\nInput: s = \"leetcode\"\nOutput: \"leotcede\"", "input": "Input: s = \"leetcode\"", "output": "Output: \"leotcede\"", "explanation": ""}], "constraints": "Constraints:\n1 <= s.length <= 3 * 10^5\ns consist of printable ASCII characters.", "notes": ""}, "344": {"label": "Easy", "title": "Reverse String", "tags": "algorithms,string,two-pointers", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7365, "total_accepted": 1400000.0, "total_submissions": 1900000.0, "testcase_example": "'[\"h\",\"e\",\"l\",\"l\",\"o\"]'", "body": "Write a function that reverses a string. The input string is given as an array of characters s.\nYou must do this by modifying the input array in-place with O(1) extra memory.", "examples": [{"full_text": "Example 1:\nInput: s = [\"h\",\"e\",\"l\",\"l\",\"o\"]\nOutput: [\"o\",\"l\",\"l\",\"e\",\"h\"]", "input": "Input: s = [\"h\",\"e\",\"l\",\"l\",\"o\"]", "output": "Output: [\"o\",\"l\",\"l\",\"e\",\"h\"]", "explanation": ""}, {"full_text": "Example 2:\nInput: s = [\"H\",\"a\",\"n\",\"n\",\"a\",\"h\"]\nOutput: [\"h\",\"a\",\"n\",\"n\",\"a\",\"H\"]", "input": "Input: s = [\"H\",\"a\",\"n\",\"n\",\"a\",\"h\"]", "output": "Output: [\"h\",\"a\",\"n\",\"n\",\"a\",\"H\"]", "explanation": ""}], "constraints": "Constraints:\n1 <= s.length <= 10^5\ns[i] is a printable ascii character.", "notes": ""}, "342": {"label": "Easy", "title": "Power of Four", "tags": "algorithms,twosigma,bit-manipulation", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4355, "total_accepted": 279200.0, "total_submissions": 641200.0, "testcase_example": "'16'", "body": "Given an integer n, return true if it is a power of four. Otherwise, return false.\nAn integer n is a power of four, if there exists an integer x such that n == 4^x.", "examples": [{"full_text": "Example 1:\nInput: n = 16\nOutput: true", "input": "Input: n = 16", "output": "Output: true", "explanation": ""}, {"full_text": "Example 2:\nInput: n = 5\nOutput: false", "input": "Input: n = 5", "output": "Output: false", "explanation": ""}, {"full_text": "Example 3:\nInput: n = 1\nOutput: true", "input": "Input: n = 1", "output": "Output: true", "explanation": ""}], "constraints": "Constraints:\n-2^31 <= n <= 2^31 - 1\nFollow up: Could you solve it without loops/recursion?", "notes": ""}, "338": {"label": "Easy", "title": "Counting Bits", "tags": "algorithms,bit-manipulation,dynamic-programming", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7256, "total_accepted": 478100.0, "total_submissions": 658800.0, "testcase_example": "'2'", "body": "Given an integer n, return an array ans of length n + 1 such that for each i (0 <= i <= n), ans[i] is the number of 1's in the binary representation of i.", "examples": [{"full_text": "Example 1:\nInput: n = 2\nOutput: [0,1,1]\nExplanation:\n0 --> 0\n1 --> 1\n2 --> 10", "input": "Input: n = 2", "output": "Output: [0,1,1]", "explanation": "Explanation:\n0 --> 0\n1 --> 1\n2 --> 10"}, {"full_text": "Example 2:\nInput: n = 5\nOutput: [0,1,1,2,1,2]\nExplanation:\n0 --> 0\n1 --> 1\n2 --> 10\n3 --> 11\n4 --> 100\n5 --> 101", "input": "Input: n = 5", "output": "Output: [0,1,1,2,1,2]", "explanation": "Explanation:\n0 --> 0\n1 --> 1\n2 --> 10\n3 --> 11\n4 --> 100\n5 --> 101"}], "constraints": "Constraints:\n0 <= n <= 10^5\nFollow up:\nIt is very easy to come up with a solution with a runtime of O(n log n). Can you do it in linear time O(n) and possibly in a single pass?\nCan you do it without using any built-in function (i.e., like __builtin_popcount in C++)?", "notes": ""}, "326": {"label": "Easy", "title": "Power of Three", "tags": "algorithms,google,math", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.43270000000000003, "total_accepted": 435900.0, "total_submissions": 1000000.0, "testcase_example": "'27'", "body": "Given an integer n, return true if it is a power of three. Otherwise, return false.\nAn integer n is a power of three, if there exists an integer x such that n == 3^x.", "examples": [{"full_text": "Example 1:\nInput: n = 27\nOutput: true", "input": "Input: n = 27", "output": "Output: true", "explanation": ""}, {"full_text": "Example 2:\nInput: n = 0\nOutput: false", "input": "Input: n = 0", "output": "Output: false", "explanation": ""}, {"full_text": "Example 3:\nInput: n = 9\nOutput: true", "input": "Input: n = 9", "output": "Output: true", "explanation": ""}], "constraints": "Constraints:\n-2^31 <= n <= 2^31 - 1\nFollow up: Could you solve it without loops/recursion?", "notes": ""}, "303": {"label": "Easy", "title": "Range Sum Query - Immutable", "tags": "algorithms,palantir,dynamic-programming", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5425, "total_accepted": 331100.0, "total_submissions": 610300.0, "testcase_example": "'[\"NumArray\",\"sumRange\",\"sumRange\",\"sumRange\"]\\n' +\n  '[[[-2,0,3,-5,2,-1]],[0,2],[2,5],[0,5]]'", "body": "Given an integer array nums, handle multiple queries of the following type:\nCalculate the sum of the elements of nums between indices left and right inclusive where left <= right.\nImplement the NumArray class:\nNumArray(int[] nums) Initializes the object with the integer array nums.\nint sumRange(int left, int right) Returns the sum of the elements of nums between indices left and right inclusive (i.e. nums[left] + nums[left + 1] + ... + nums[right]).", "examples": [{"full_text": "Example 1:\nInput\n[\"NumArray\", \"sumRange\", \"sumRange\", \"sumRange\"]\n[[[-2, 0, 3, -5, 2, -1]], [0, 2], [2, 5], [0, 5]]\nOutput\n[null, 1, -1, -3]\nExplanation\nNumArray numArray = new NumArray([-2, 0, 3, -5, 2, -1]);\nnumArray.sumRange(0, 2); // return (-2) + 0 + 3 = 1\nnumArray.sumRange(2, 5); // return 3 + (-5) + 2 + (-1) = -1\nnumArray.sumRange(0, 5); // return (-2) + 0 + 3 + (-5) + 2 + (-1) = -3", "input": "Input\n[\"NumArray\", \"sumRange\", \"sumRange\", \"sumRange\"]\n[[[-2, 0, 3, -5, 2, -1]], [0, 2], [2, 5], [0, 5]]", "output": "Output\n[null, 1, -1, -3]", "explanation": "Explanation\nNumArray numArray = new NumArray([-2, 0, 3, -5, 2, -1]);\nnumArray.sumRange(0, 2); // return (-2) + 0 + 3 = 1\nnumArray.sumRange(2, 5); // return 3 + (-5) + 2 + (-1) = -1\nnumArray.sumRange(0, 5); // return (-2) + 0 + 3 + (-5) + 2 + (-1) = -3"}], "constraints": "Constraints:\n1 <= nums.length <= 10^4\n-10^5 <= nums[i] <= 10^5\n0 <= left <= right < nums.length\nAt most 10^4 calls will be made to sumRange.", "notes": ""}, "292": {"label": "Easy", "title": "Nim Game", "tags": "algorithms,adobe", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5539000000000001, "total_accepted": 270000.0, "total_submissions": 487500.0, "testcase_example": "'4'", "body": "You are playing the following Nim Game with your friend:\nInitially, there is a heap of stones on the table.\nYou and your friend will alternate taking turns, and you go first.\nOn each turn, the person whose turn it is will remove 1 to 3 stones from the heap.\nThe one who removes the last stone is the winner.\nGiven n, the number of stones in the heap, return true if you can win the game assuming both you and your friend play optimally, otherwise return false.", "examples": [{"full_text": "Example 1:\nInput: n = 4\nOutput: false\nExplanation: These are the possible outcomes:\n1. You remove 1 stone. Your friend removes 3 stones, including the last stone. Your friend wins.\n2. You remove 2 stones. Your friend removes 2 stones, including the last stone. Your friend wins.\n3. You remove 3 stones. Your friend removes the last stone. Your friend wins.\nIn all outcomes, your friend wins.", "input": "Input: n = 4", "output": "Output: false", "explanation": "Explanation: These are the possible outcomes:\n1. You remove 1 stone. Your friend removes 3 stones, including the last stone. Your friend wins.\n2. You remove 2 stones. Your friend removes 2 stones, including the last stone. Your friend wins.\n3. You remove 3 stones. Your friend removes the last stone. Your friend wins.\nIn all outcomes, your friend wins."}, {"full_text": "Example 2:\nInput: n = 1\nOutput: true", "input": "Input: n = 1", "output": "Output: true", "explanation": ""}, {"full_text": "Example 3:\nInput: n = 2\nOutput: true", "input": "Input: n = 2", "output": "Output: true", "explanation": ""}], "constraints": "Constraints:\n1 <= n <= 2^31 - 1", "notes": ""}, "290": {"label": "Easy", "title": "Word Pattern", "tags": "algorithms,dropbox,uber,hash-table", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4011, "total_accepted": 343100.0, "total_submissions": 855600.0, "testcase_example": "'\"abba\"\\n\"dog cat cat dog\"'", "body": "Given a pattern and a string s, find if s\nfollows the same pattern.\nHere follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in s.", "examples": [{"full_text": "Example 1:\nInput: pattern = \"abba\", s = \"dog cat cat dog\"\nOutput: true", "input": "Input: pattern = \"abba\", s = \"dog cat cat dog\"", "output": "Output: true", "explanation": ""}, {"full_text": "Example 2:\nInput: pattern = \"abba\", s = \"dog cat cat fish\"\nOutput: false", "input": "Input: pattern = \"abba\", s = \"dog cat cat fish\"", "output": "Output: false", "explanation": ""}, {"full_text": "Example 3:\nInput: pattern = \"aaaa\", s = \"dog cat cat dog\"\nOutput: false", "input": "Input: pattern = \"aaaa\", s = \"dog cat cat dog\"", "output": "Output: false", "explanation": ""}], "constraints": "Constraints:\n1 <= pattern.length <= 300\npattern contains only lower-case English letters.\n1 <= s.length <= 3000\ns contains only lowercase English letters and spaces ' '.\ns does not contain any leading or trailing spaces.\nAll the words in s are separated by a single space.", "notes": ""}, "283": {"label": "Easy", "title": "Move Zeroes", "tags": "algorithms,bloomberg,facebook,array,two-pointers", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6024, "total_accepted": 1500000.0, "total_submissions": 2500000.0, "testcase_example": "'[0,1,0,3,12]'", "body": "Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.\nNote that you must do this in-place without making a copy of the array.", "examples": [{"full_text": "Example 1:\nInput: nums = [0,1,0,3,12]\nOutput: [1,3,12,0,0]", "input": "Input: nums = [0,1,0,3,12]", "output": "Output: [1,3,12,0,0]", "explanation": ""}, {"full_text": "Example 2:\nInput: nums = [0]\nOutput: [0]", "input": "Input: nums = [0]", "output": "Output: [0]", "explanation": ""}], "constraints": "Constraints:\n1 <= nums.length <= 10^4\n-2^31 <= nums[i] <= 2^31 - 1\nFollow up: Could you minimize the total number of operations done?", "notes": ""}, "278": {"label": "Easy", "title": "First Bad Version", "tags": "algorithms,facebook,binary-search", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4102, "total_accepted": 873500.0, "total_submissions": 2100000.0, "testcase_example": "'5\\n4'", "body": "You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad.\nSuppose you have n versions [1, 2, ..., n] and you want to find out the first bad one, which causes all the following ones to be bad.\nYou are given an API bool isBadVersion(version) which returns whether version is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API.", "examples": [{"full_text": "Example 1:\nInput: n = 5, bad = 4\nOutput: 4\nExplanation:\ncall isBadVersion(3) -> false\ncall isBadVersion(5)\n-> true\ncall isBadVersion(4)\n-> true\nThen 4 is the first bad version.", "input": "Input: n = 5, bad = 4", "output": "Output: 4", "explanation": "Explanation:\ncall isBadVersion(3) -> false\ncall isBadVersion(5)\n-> true\ncall isBadVersion(4)\n-> true\nThen 4 is the first bad version."}, {"full_text": "Example 2:\nInput: n = 1, bad = 1\nOutput: 1", "input": "Input: n = 1, bad = 1", "output": "Output: 1", "explanation": ""}], "constraints": "Constraints:\n1 <= bad <= n <= 2^31 - 1", "notes": ""}, "268": {"label": "Easy", "title": "Missing Number", "tags": "algorithms,bloomberg,microsoft,array,bit-manipulation,math", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5877, "total_accepted": 914800.0, "total_submissions": 1600000.0, "testcase_example": "'[3,0,1]'", "body": "Given an array nums containing n distinct numbers in the range [0, n], return the only number in the range that is missing from the array.", "examples": [{"full_text": "Example 1:\nInput: nums = [3,0,1]\nOutput: 2\nExplanation: n = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is the missing number in the range since it does not appear in nums.", "input": "Input: nums = [3,0,1]", "output": "Output: 2", "explanation": "Explanation: n = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is the missing number in the range since it does not appear in nums."}, {"full_text": "Example 2:\nInput: nums = [0,1]\nOutput: 2\nExplanation: n = 2 since there are 2 numbers, so all numbers are in the range [0,2]. 2 is the missing number in the range since it does not appear in nums.", "input": "Input: nums = [0,1]", "output": "Output: 2", "explanation": "Explanation: n = 2 since there are 2 numbers, so all numbers are in the range [0,2]. 2 is the missing number in the range since it does not appear in nums."}, {"full_text": "Example 3:\nInput: nums = [9,6,4,2,3,5,7,0,1]\nOutput: 8\nExplanation: n = 9 since there are 9 numbers, so all numbers are in the range [0,9]. 8 is the missing number in the range since it does not appear in nums.", "input": "Input: nums = [9,6,4,2,3,5,7,0,1]", "output": "Output: 8", "explanation": "Explanation: n = 9 since there are 9 numbers, so all numbers are in the range [0,9]. 8 is the missing number in the range since it does not appear in nums."}], "constraints": "Constraints:\nn == nums.length\n1 <= n <= 10^4\n0 <= nums[i] <= n\nAll the numbers of nums are unique.\nFollow up: Could you implement a solution using only O(1) extra space complexity and O(n) runtime complexity?", "notes": ""}, "263": {"label": "Easy", "title": "Ugly Number", "tags": "algorithms,math", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.41859999999999997, "total_accepted": 282600.0, "total_submissions": 674900.0, "testcase_example": "'6'", "body": "An ugly number is a positive integer whose prime factors are limited to 2, 3, and 5.\nGiven an integer n, return true if n is an ugly number.", "examples": [{"full_text": "Example 1:\nInput: n = 6\nOutput: true\nExplanation: 6 = 2 \u00d7 3", "input": "Input: n = 6", "output": "Output: true", "explanation": "Explanation: 6 = 2 \u00d7 3"}, {"full_text": "Example 2:\nInput: n = 1\nOutput: true\nExplanation: 1 has no prime factors, therefore all of its prime factors are limited to 2, 3, and 5.", "input": "Input: n = 1", "output": "Output: true", "explanation": "Explanation: 1 has no prime factors, therefore all of its prime factors are limited to 2, 3, and 5."}, {"full_text": "Example 3:\nInput: n = 14\nOutput: false\nExplanation: 14 is not ugly since it includes the prime factor 7.", "input": "Input: n = 14", "output": "Output: false", "explanation": "Explanation: 14 is not ugly since it includes the prime factor 7."}], "constraints": "Constraints:\n-2^31 <= n <= 2^31 - 1", "notes": ""}, "258": {"label": "Easy", "title": "Add Digits", "tags": "algorithms,adobe,microsoft,math", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6214, "total_accepted": 452400.0, "total_submissions": 728100.0, "testcase_example": "'38'", "body": "Given an integer num, repeatedly add all its digits until the result has only one digit, and return it.", "examples": [{"full_text": "Example 1:\nInput: num = 38\nOutput: 2\nExplanation: The process is\n38 --> 3 + 8 --> 11\n11 --> 1 + 1 --> 2\nSince 2 has only one digit, return it.", "input": "Input: num = 38", "output": "Output: 2", "explanation": "Explanation: The process is\n38 --> 3 + 8 --> 11\n11 --> 1 + 1 --> 2\nSince 2 has only one digit, return it."}, {"full_text": "Example 2:\nInput: num = 0\nOutput: 0", "input": "Input: num = 0", "output": "Output: 0", "explanation": ""}], "constraints": "Constraints:\n0 <= num <= 2^31 - 1\nFollow up: Could you do it without any loop/recursion in O(1) runtime?", "notes": ""}, "257": {"label": "Easy", "title": "Binary Tree Paths", "tags": "algorithms,apple,facebook,google,depth-first-search,tree", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5779, "total_accepted": 481600.0, "total_submissions": 833400.0, "testcase_example": "'[1,2,3,null,5]'", "body": "Given the root of a binary tree, return all root-to-leaf paths in any order.\nA leaf is a node with no children.", "examples": [{"full_text": "Example 1:\nInput: root = [1,2,3,null,5]\nOutput: [\"1->2->5\",\"1->3\"]", "input": "Input: root = [1,2,3,null,5]", "output": "Output: [\"1->2->5\",\"1->3\"]", "explanation": ""}, {"full_text": "Example 2:\nInput: root = [1]\nOutput: [\"1\"]", "input": "Input: root = [1]", "output": "Output: [\"1\"]", "explanation": ""}], "constraints": "Constraints:\nThe number of nodes in the tree is in the range [1, 100].\n-100 <= Node.val <= 100", "notes": ""}, "242": {"label": "Easy", "title": "Valid Anagram", "tags": "algorithms,amazon,uber,yelp,hash-table,sort", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6098, "total_accepted": 1100000.0, "total_submissions": 1800000.0, "testcase_example": "'\"anagram\"\\n\"nagaram\"'", "body": "Given two strings s and t, return true if t is an anagram of s, and false otherwise.\nAn Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.", "examples": [{"full_text": "Example 1:\nInput: s = \"anagram\", t = \"nagaram\"\nOutput: true", "input": "Input: s = \"anagram\", t = \"nagaram\"", "output": "Output: true", "explanation": ""}, {"full_text": "Example 2:\nInput: s = \"rat\", t = \"car\"\nOutput: false", "input": "Input: s = \"rat\", t = \"car\"", "output": "Output: false", "explanation": ""}], "constraints": "Constraints:\n1 <= s.length, t.length <= 5 * 10^4\ns and t consist of lowercase English letters.\nFollow up: What if the inputs contain Unicode characters? How would you adapt your solution to such a case?", "notes": ""}, "237": {"label": "Easy", "title": "Delete Node in a Linked List", "tags": "algorithms,adobe,apple,microsoft,linked-list", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7115, "total_accepted": 752900.0, "total_submissions": 1100000.0, "testcase_example": "'[4,5,1,9]\\n5'", "body": "Write a function to delete a node in a singly-linked list. You will not be given access to the head of the list, instead you will be given access to the node to be deleted directly.\nIt is guaranteed that the node to be deleted is not a tail node in the list.", "examples": [{"full_text": "Example 1:\nInput: head = [4,5,1,9], node = 5\nOutput: [4,1,9]\nExplanation: You are given the second node with value 5, the linked list should become 4 -> 1 -> 9 after calling your function.", "input": "Input: head = [4,5,1,9], node = 5", "output": "Output: [4,1,9]", "explanation": "Explanation: You are given the second node with value 5, the linked list should become 4 -> 1 -> 9 after calling your function."}, {"full_text": "Example 2:\nInput: head = [4,5,1,9], node = 1\nOutput: [4,5,9]\nExplanation: You are given the third node with value 1, the linked list should become 4 -> 5 -> 9 after calling your function.", "input": "Input: head = [4,5,1,9], node = 1", "output": "Output: [4,5,9]", "explanation": "Explanation: You are given the third node with value 1, the linked list should become 4 -> 5 -> 9 after calling your function."}], "constraints": "Constraints:\nThe number of the nodes in the given list is in the range [2, 1000].\n-1000 <= Node.val <= 1000\nThe value of each node in the list is unique.\nThe node to be deleted is in the list and is not a tail node", "notes": ""}, "235": {"label": "Easy", "title": "Lowest Common Ancestor of a Binary Search Tree", "tags": "algorithms,amazon,facebook,microsoft,twitter,tree", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5619, "total_accepted": 685200.0, "total_submissions": 1200000.0, "testcase_example": "'[6,2,8,0,4,7,9,null,null,3,5]\\n2\\n8'", "body": "Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST.\nAccording to the definition of LCA on Wikipedia: \u201cThe lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).\u201d", "examples": [{"full_text": "Example 1:\nInput: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8\nOutput: 6\nExplanation: The LCA of nodes 2 and 8 is 6.", "input": "Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8", "output": "Output: 6", "explanation": "Explanation: The LCA of nodes 2 and 8 is 6."}, {"full_text": "Example 2:\nInput: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4\nOutput: 2\nExplanation: The LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the LCA definition.", "input": "Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4", "output": "Output: 2", "explanation": "Explanation: The LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the LCA definition."}, {"full_text": "Example 3:\nInput: root = [2,1], p = 2, q = 1\nOutput: 2", "input": "Input: root = [2,1], p = 2, q = 1", "output": "Output: 2", "explanation": ""}], "constraints": "Constraints:\nThe number of nodes in the tree is in the range [2, 10^5].\n-10^9 <= Node.val <= 10^9\nAll Node.val are unique.\np != q\np and q will exist in the BST.", "notes": ""}, "234": {"label": "Easy", "title": "Palindrome Linked List", "tags": "algorithms,amazon,facebook,linked-list,two-pointers", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4581, "total_accepted": 878200.0, "total_submissions": 1900000.0, "testcase_example": "'[1,2,2,1]'", "body": "Given the head of a singly linked list, return true if it is a palindrome.", "examples": [{"full_text": "Example 1:\nInput: head = [1,2,2,1]\nOutput: true", "input": "Input: head = [1,2,2,1]", "output": "Output: true", "explanation": ""}, {"full_text": "Example 2:\nInput: head = [1,2]\nOutput: false", "input": "Input: head = [1,2]", "output": "Output: false", "explanation": ""}], "constraints": "Constraints:\nThe number of nodes in the list is in the range [1, 10^5].\n0 <= Node.val <= 9\nFollow up: Could you do it in O(n) time and O(1) space?", "notes": ""}, "232": {"label": "Easy", "title": "Implement Queue using Stacks", "tags": "algorithms,bloomberg,microsoft,design,stack", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5696, "total_accepted": 369000.0, "total_submissions": 647700.0, "testcase_example": "'[\"MyQueue\",\"push\",\"push\",\"peek\",\"pop\",\"empty\"]\\n[[],[1],[2],[],[],[]]'", "body": "Implement a first in first out (FIFO) queue using only two stacks. The implemented queue should support all the functions of a normal queue (push, peek, pop, and empty).\nImplement the MyQueue class:\nvoid push(int x) Pushes element x to the back of the queue.\nint pop() Removes the element from the front of the queue and returns it.\nint peek() Returns the element at the front of the queue.\nboolean empty() Returns true if the queue is empty, false otherwise.\nNotes:\nYou must use only standard operations of a stack, which means only push to top, peek/pop from top, size, and is empty operations are valid.\nDepending on your language, the stack may not be supported natively. You may simulate a stack using a list or deque (double-ended queue) as long as you use only a stack's standard operations.", "examples": [{"full_text": "Example 1:\nInput\n[\"MyQueue\", \"push\", \"push\", \"peek\", \"pop\", \"empty\"]\n[[], [1], [2], [], [], []]\nOutput\n[null, null, null, 1, 1, false]\nExplanation\nMyQueue myQueue = new MyQueue();\nmyQueue.push(1); // queue is: [1]\nmyQueue.push(2); // queue is: [1, 2] (leftmost is front of the queue)\nmyQueue.peek(); // return 1\nmyQueue.pop(); // return 1, queue is [2]\nmyQueue.empty(); // return false", "input": "Input\n[\"MyQueue\", \"push\", \"push\", \"peek\", \"pop\", \"empty\"]\n[[], [1], [2], [], [], []]", "output": "Output\n[null, null, null, 1, 1, false]", "explanation": "Explanation\nMyQueue myQueue = new MyQueue();\nmyQueue.push(1); // queue is: [1]\nmyQueue.push(2); // queue is: [1, 2] (leftmost is front of the queue)\nmyQueue.peek(); // return 1\nmyQueue.pop(); // return 1, queue is [2]\nmyQueue.empty(); // return false"}], "constraints": "Constraints:\n1 <= x <= 9\nAt most 100\ncalls will be made to push, pop, peek, and empty.\nAll the calls to pop and peek are valid.", "notes": "Follow-up: Can you implement the queue such that each operation is amortized O(1) time complexity? In other words, performing n operations will take overall O(n) time even if one of those operations may take longer."}, "231": {"label": "Easy", "title": "Power of Two", "tags": "algorithms,google,bit-manipulation,math", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.44799999999999995, "total_accepted": 575100.0, "total_submissions": 1300000.0, "testcase_example": "'1'", "body": "Given an integer n, return true if it is a power of two. Otherwise, return false.\nAn integer n is a power of two, if there exists an integer x such that n == 2^x.", "examples": [{"full_text": "Example 1:\nInput: n = 1\nOutput: true\nExplanation: 2^0 = 1", "input": "Input: n = 1", "output": "Output: true", "explanation": "Explanation: 2^0 = 1"}, {"full_text": "Example 2:\nInput: n = 16\nOutput: true\nExplanation: 2^4 = 16", "input": "Input: n = 16", "output": "Output: true", "explanation": "Explanation: 2^4 = 16"}, {"full_text": "Example 3:\nInput: n = 3\nOutput: false", "input": "Input: n = 3", "output": "Output: false", "explanation": ""}], "constraints": "Constraints:\n-2^31 <= n <= 2^31 - 1\nFollow up: Could you solve it without loops/recursion?", "notes": ""}, "228": {"label": "Easy", "title": "Summary Ranges", "tags": "algorithms,google,array", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4458, "total_accepted": 249600.0, "total_submissions": 559800.0, "testcase_example": "'[0,1,2,4,5,7]'", "body": "You are given a sorted unique integer array nums.\nReturn the smallest sorted list of ranges that cover all the numbers in the array exactly. That is, each element of nums is covered by exactly one of the ranges, and there is no integer x such that x is in one of the ranges but not in nums.\nEach range [a,b] in the list should be output as:\n\"a->b\" if a != b\n\"a\" if a == b", "examples": [{"full_text": "Example 1:\nInput: nums = [0,1,2,4,5,7]\nOutput: [\"0->2\",\"4->5\",\"7\"]\nExplanation: The ranges are:\n[0,2] --> \"0->2\"\n[4,5] --> \"4->5\"\n[7,7] --> \"7\"", "input": "Input: nums = [0,1,2,4,5,7]", "output": "Output: [\"0->2\",\"4->5\",\"7\"]", "explanation": "Explanation: The ranges are:\n[0,2] --> \"0->2\"\n[4,5] --> \"4->5\"\n[7,7] --> \"7\""}, {"full_text": "Example 2:\nInput: nums = [0,2,3,4,6,8,9]\nOutput: [\"0\",\"2->4\",\"6\",\"8->9\"]\nExplanation: The ranges are:\n[0,0] --> \"0\"\n[2,4] --> \"2->4\"\n[6,6] --> \"6\"\n[8,9] --> \"8->9\"", "input": "Input: nums = [0,2,3,4,6,8,9]", "output": "Output: [\"0\",\"2->4\",\"6\",\"8->9\"]", "explanation": "Explanation: The ranges are:\n[0,0] --> \"0\"\n[2,4] --> \"2->4\"\n[6,6] --> \"6\"\n[8,9] --> \"8->9\""}], "constraints": "Constraints:\n0 <= nums.length <= 20\n-2^31 <= nums[i] <= 2^31 - 1\nAll the values of nums are unique.\nnums is sorted in ascending order.", "notes": ""}, "226": {"label": "Easy", "title": "Invert Binary Tree", "tags": "algorithms,tree", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7084999999999999, "total_accepted": 938400.0, "total_submissions": 1300000.0, "testcase_example": "'[4,2,7,1,3,6,9]'", "body": "Given the root of a binary tree, invert the tree, and return its root.", "examples": [{"full_text": "Example 1:\nInput: root = [4,2,7,1,3,6,9]\nOutput: [4,7,2,9,6,3,1]", "input": "Input: root = [4,2,7,1,3,6,9]", "output": "Output: [4,7,2,9,6,3,1]", "explanation": ""}, {"full_text": "Example 2:\nInput: root = [2,1,3]\nOutput: [2,3,1]", "input": "Input: root = [2,1,3]", "output": "Output: [2,3,1]", "explanation": ""}, {"full_text": "Example 3:\nInput: root = []\nOutput: []", "input": "Input: root = []", "output": "Output: []", "explanation": ""}], "constraints": "Constraints:\nThe number of nodes in the tree is in the range [0, 100].\n-100 <= Node.val <= 100", "notes": ""}, "225": {"label": "Easy", "title": "Implement Stack using Queues", "tags": "algorithms,bloomberg,design,stack", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5175, "total_accepted": 276000.0, "total_submissions": 533300.0, "testcase_example": "'[\"MyStack\",\"push\",\"push\",\"top\",\"pop\",\"empty\"]\\n[[],[1],[2],[],[],[]]'", "body": "Implement a last-in-first-out (LIFO) stack using only two queues. The implemented stack should support all the functions of a normal stack (push, top, pop, and empty).\nImplement the MyStack class:\nvoid push(int x) Pushes element x to the top of the stack.\nint pop() Removes the element on the top of the stack and returns it.\nint top() Returns the element on the top of the stack.\nboolean empty() Returns true if the stack is empty, false otherwise.\nNotes:\nYou must use only standard operations of a queue, which means that only push to back, peek/pop from front, size and is empty operations are valid.\nDepending on your language, the queue may not be supported natively. You may simulate a queue using a list or deque (double-ended queue) as long as you use only a queue's standard operations.", "examples": [{"full_text": "Example 1:\nInput\n[\"MyStack\", \"push\", \"push\", \"top\", \"pop\", \"empty\"]\n[[], [1], [2], [], [], []]\nOutput\n[null, null, null, 2, 2, false]\nExplanation\nMyStack myStack = new MyStack();\nmyStack.push(1);\nmyStack.push(2);\nmyStack.top(); // return 2\nmyStack.pop(); // return 2\nmyStack.empty(); // return False", "input": "Input\n[\"MyStack\", \"push\", \"push\", \"top\", \"pop\", \"empty\"]\n[[], [1], [2], [], [], []]", "output": "Output\n[null, null, null, 2, 2, false]", "explanation": "Explanation\nMyStack myStack = new MyStack();\nmyStack.push(1);\nmyStack.push(2);\nmyStack.top(); // return 2\nmyStack.pop(); // return 2\nmyStack.empty(); // return False"}], "constraints": "Constraints:\n1 <= x <= 9\nAt most 100 calls will be made to push, pop, top, and empty.\nAll the calls to pop and top are valid.", "notes": "Follow-up: Can you implement the stack using only one queue?"}, "219": {"label": "Easy", "title": "Contains Duplicate II", "tags": "algorithms,airbnb,palantir,array,hash-table", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4045, "total_accepted": 426400.0, "total_submissions": 1100000.0, "testcase_example": "'[1,2,3,1]\\n3'", "body": "Given an integer array nums and an integer k, return true if there are two distinct indices i and j in the array such that nums[i] == nums[j] and abs(i - j) <= k.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,2,3,1], k = 3\nOutput: true", "input": "Input: nums = [1,2,3,1], k = 3", "output": "Output: true", "explanation": ""}, {"full_text": "Example 2:\nInput: nums = [1,0,1,1], k = 1\nOutput: true", "input": "Input: nums = [1,0,1,1], k = 1", "output": "Output: true", "explanation": ""}, {"full_text": "Example 3:\nInput: nums = [1,2,3,1,2,3], k = 2\nOutput: false", "input": "Input: nums = [1,2,3,1,2,3], k = 2", "output": "Output: false", "explanation": ""}], "constraints": "Constraints:\n1 <= nums.length <= 10^5\n-10^9 <= nums[i] <= 10^9\n0 <= k <= 10^5", "notes": ""}, "217": {"label": "Easy", "title": "Contains Duplicate", "tags": "algorithms,airbnb,palantir,yahoo,array,hash-table", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6023, "total_accepted": 1300000.0, "total_submissions": 2200000.0, "testcase_example": "'[1,2,3,1]'", "body": "Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,2,3,1]\nOutput: true", "input": "Input: nums = [1,2,3,1]", "output": "Output: true", "explanation": ""}, {"full_text": "Example 2:\nInput: nums = [1,2,3,4]\nOutput: false", "input": "Input: nums = [1,2,3,4]", "output": "Output: false", "explanation": ""}, {"full_text": "Example 3:\nInput: nums = [1,1,1,3,3,4,3,2,4,2]\nOutput: true", "input": "Input: nums = [1,1,1,3,3,4,3,2,4,2]", "output": "Output: true", "explanation": ""}], "constraints": "Constraints:\n1 <= nums.length <= 10^5\n-10^9 <= nums[i] <= 10^9", "notes": ""}, "206": {"label": "Easy", "title": "Reverse Linked List", "tags": "algorithms,adobe,amazon,apple,bloomberg,facebook,microsoft,snapchat,twitter,uber,yahoo,yelp,zenefits,linked-list", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6949, "total_accepted": 1900000.0, "total_submissions": 2800000.0, "testcase_example": "'[1,2,3,4,5]'", "body": "Given the head of a singly linked list, reverse the list, and return the reversed list.", "examples": [{"full_text": "Example 1:\nInput: head = [1,2,3,4,5]\nOutput: [5,4,3,2,1]", "input": "Input: head = [1,2,3,4,5]", "output": "Output: [5,4,3,2,1]", "explanation": ""}, {"full_text": "Example 2:\nInput: head = [1,2]\nOutput: [2,1]", "input": "Input: head = [1,2]", "output": "Output: [2,1]", "explanation": ""}, {"full_text": "Example 3:\nInput: head = []\nOutput: []", "input": "Input: head = []", "output": "Output: []", "explanation": ""}], "constraints": "Constraints:\nThe number of nodes in the list is the range [0, 5000].\n-5000 <= Node.val <= 5000\nFollow up: A linked list can be reversed either iteratively or recursively. Could you implement both?", "notes": ""}, "205": {"label": "Easy", "title": "Isomorphic Strings", "tags": "algorithms,linkedin,hash-table", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.419, "total_accepted": 470400.0, "total_submissions": 1100000.0, "testcase_example": "'\"egg\"\\n\"add\"'", "body": "Given two strings s and t, determine if they are isomorphic.\nTwo strings s and t are isomorphic if the characters in s can be replaced to get t.\nAll occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character, but a character may map to itself.", "examples": [{"full_text": "Example 1:\nInput: s = \"egg\", t = \"add\"\nOutput: true", "input": "Input: s = \"egg\", t = \"add\"", "output": "Output: true", "explanation": ""}, {"full_text": "Example 2:\nInput: s = \"foo\", t = \"bar\"\nOutput: false", "input": "Input: s = \"foo\", t = \"bar\"", "output": "Output: false", "explanation": ""}, {"full_text": "Example 3:\nInput: s = \"paper\", t = \"title\"\nOutput: true", "input": "Input: s = \"paper\", t = \"title\"", "output": "Output: true", "explanation": ""}], "constraints": "Constraints:\n1 <= s.length <= 5 * 10^4\nt.length == s.length\ns and t consist of any valid ascii character.", "notes": ""}, "203": {"label": "Easy", "title": "Remove Linked List Elements", "tags": "algorithms,linked-list", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4291, "total_accepted": 649000.0, "total_submissions": 1500000.0, "testcase_example": "'[1,2,6,3,4,5,6]\\n6'", "body": "Given the head of a linked list and an integer val, remove all the nodes of the linked list that has Node.val == val, and return the new head.", "examples": [{"full_text": "Example 1:\nInput: head = [1,2,6,3,4,5,6], val = 6\nOutput: [1,2,3,4,5]", "input": "Input: head = [1,2,6,3,4,5,6], val = 6", "output": "Output: [1,2,3,4,5]", "explanation": ""}, {"full_text": "Example 2:\nInput: head = [], val = 1\nOutput: []", "input": "Input: head = [], val = 1", "output": "Output: []", "explanation": ""}, {"full_text": "Example 3:\nInput: head = [7,7,7,7], val = 7\nOutput: []", "input": "Input: head = [7,7,7,7], val = 7", "output": "Output: []", "explanation": ""}], "constraints": "Constraints:\nThe number of nodes in the list is in the range [0, 10^4].\n1 <= Node.val <= 50\n0 <= val <= 50", "notes": ""}, "202": {"label": "Easy", "title": "Happy Number", "tags": "algorithms,airbnb,twitter,uber,hash-table,math", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5275, "total_accepted": 753900.0, "total_submissions": 1400000.0, "testcase_example": "'19'", "body": "Write an algorithm to determine if a number n is happy.\nA happy number is a number defined by the following process:\nStarting with any positive integer, replace the number by the sum of the squares of its digits.\nRepeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1.\nThose numbers for which this process ends in 1 are happy.\nReturn true if n is a happy number, and false if not.", "examples": [{"full_text": "Example 1:\nInput: n = 19\nOutput: true\nExplanation:\n1^2 + 9^2 = 82\n8^2 + 2^2 = 68\n6^2 + 8^2 = 100\n1^2 + 0^2 + 0^2 = 1", "input": "Input: n = 19", "output": "Output: true", "explanation": "Explanation:\n1^2 + 9^2 = 82\n8^2 + 2^2 = 68\n6^2 + 8^2 = 100\n1^2 + 0^2 + 0^2 = 1"}, {"full_text": "Example 2:\nInput: n = 2\nOutput: false", "input": "Input: n = 2", "output": "Output: false", "explanation": ""}], "constraints": "Constraints:\n1 <= n <= 2^31 - 1", "notes": ""}, "197": {"label": "Easy", "title": "Rising Temperature", "tags": "database", "langs": "mssql,mysql,oraclesql", "related_topics": "database", "acceptance_ratio": 0.4204, "total_accepted": 204000.0, "total_submissions": 485300.0, "testcase_example": "'{\"headers\": {\"Weather\": [\"id\", \"recordDate\", \"temperature\"]}, \"rows\": {\"Weather\": [[1, \"2015-01-01\", 10], [2, \"2015-01-02\", 25], [3, \"2015-01-03\", 20], [4, \"2015-01-04\", 30]]}}'", "body": "Table: Weather\n+---------------+---------+\n| Column Name | Type |\n+---------------+---------+\n| id | int |\n| recordDate | date |\n| temperature | int |\n+---------------+---------+\nid is the primary key for this table.\nThis table contains information about the temperature on a certain day.\nWrite an SQL query to find all dates' Id with higher temperatures compared to its previous dates (yesterday).\nReturn the result table in any order.\nThe query result format is in the following example.", "examples": [{"full_text": "Example 1:\nInput:\nWeather table:\n+----+------------+-------------+\n| id | recordDate | temperature |\n+----+------------+-------------+\n| 1 | 2015-01-01 | 10 |\n| 2 | 2015-01-02 | 25 |\n| 3 | 2015-01-03 | 20 |\n| 4 | 2015-01-04 | 30 |\n+----+------------+-------------+\nOutput:\n+----+\n| id |\n+----+\n| 2 |\n| 4 |\n+----+\nExplanation:\nIn 2015-01-02, the temperature was higher than the previous day (10 -> 25).\nIn 2015-01-04, the temperature was higher than the previous day (20 -> 30).", "input": "Input:\nWeather table:\n+----+------------+-------------+\n| id | recordDate | temperature |\n+----+------------+-------------+\n| 1 | 2015-01-01 | 10 |\n| 2 | 2015-01-02 | 25 |\n| 3 | 2015-01-03 | 20 |\n| 4 | 2015-01-04 | 30 |\n+----+------------+-------------+", "output": "Output:\n+----+\n| id |\n+----+\n| 2 |\n| 4 |\n+----+", "explanation": "Explanation:\nIn 2015-01-02, the temperature was higher than the previous day (10 -> 25).\nIn 2015-01-04, the temperature was higher than the previous day (20 -> 30)."}], "constraints": "", "notes": ""}, "196": {"label": "Easy", "title": "Delete Duplicate Emails", "tags": "database", "langs": "mysql", "related_topics": "database", "acceptance_ratio": 0.5075999999999999, "total_accepted": 198300.0, "total_submissions": 390600.0, "testcase_example": "'{\"headers\": {\"Person\": [\"id\", \"email\"]}, \"rows\": {\"Person\": [[1, \"john@example.com\"], [2, \"bob@example.com\"], [3, \"john@example.com\"]]}}'", "body": "Table: Person\n+-------------+---------+\n| Column Name | Type |\n+-------------+---------+\n| id | int |\n| email | varchar |\n+-------------+---------+\nid is the primary key column for this table.\nEach row of this table contains an email. The emails will not contain uppercase letters.\nWrite an SQL query to delete all the duplicate emails, keeping only one unique email with the smallest id. Note that you are supposed to write a DELETE statement and not a SELECT one.\nReturn the result table in any order.\nThe query result format is in the following example.", "examples": [{"full_text": "Example 1:\nInput:\nPerson table:\n+----+------------------+\n| id | email |\n+----+------------------+\n| 1 | john@example.com |\n| 2 | bob@example.com |\n| 3 | john@example.com |\n+----+------------------+\nOutput:\n+----+------------------+\n| id | email |\n+----+------------------+\n| 1 | john@example.com |\n| 2 | bob@example.com |\n+----+------------------+\nExplanation: john@example.com is repeated two times. We keep the row with the smallest Id = 1.", "input": "Input:\nPerson table:\n+----+------------------+\n| id | email |\n+----+------------------+\n| 1 | john@example.com |\n| 2 | bob@example.com |\n| 3 | john@example.com |\n+----+------------------+", "output": "Output:\n+----+------------------+\n| id | email |\n+----+------------------+\n| 1 | john@example.com |\n| 2 | bob@example.com |\n+----+------------------+", "explanation": "Explanation: john@example.com is repeated two times. We keep the row with the smallest Id = 1."}], "constraints": "", "notes": ""}, "195": {"label": "Easy", "title": "Tenth Line", "tags": "shell,adobe", "langs": "bash", "related_topics": "shell", "acceptance_ratio": 0.32799999999999996, "total_accepted": 70600.0, "total_submissions": 215200.0, "testcase_example": "", "body": "Given a text file\nfile.txt, print\njust the 10th line of the\nfile.", "examples": [{"full_text": "Example:\nAssume that file.txt has the following content:\nLine 1\nLine 2\nLine 3\nLine 4\nLine 5\nLine 6\nLine 7\nLine 8\nLine 9\nLine 10\nYour script should output the tenth line, which is:\nLine 10", "input": "", "output": "", "explanation": ""}], "constraints": "", "notes": "Note:\n1. If the file contains less than 10 lines, what should you output?\n2. There's at least three different solutions. Try to explore all possibilities."}, "193": {"label": "Easy", "title": "Valid Phone Numbers", "tags": "shell", "langs": "bash", "related_topics": "shell", "acceptance_ratio": 0.2579, "total_accepted": 53400.0, "total_submissions": 207200.0, "testcase_example": "", "body": "Given a text file file.txt that contains a list of phone numbers (one per line), write a one-liner bash script to print all valid phone numbers.\nYou may assume that a valid phone number must appear in one of the following two formats: (xxx) xxx-xxxx or xxx-xxx-xxxx. (x means a digit)\nYou may also assume each line in the text file must not contain leading or trailing white spaces.", "examples": [{"full_text": "Example:\nAssume that file.txt has the following content:\n987-123-4567\n123 456 7890\n(123) 456-7890\nYour script should output the following valid phone numbers:\n987-123-4567\n(123) 456-7890", "input": "", "output": "", "explanation": ""}], "constraints": "", "notes": ""}, "191": {"label": "Easy", "title": "Number of 1 Bits", "tags": "algorithms,apple,microsoft,bit-manipulation", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.589, "total_accepted": 639600.0, "total_submissions": 1100000.0, "testcase_example": "'00000000000000000000000000001011'", "body": "Write a function that takes an unsigned integer and returns the number of '1' bits it has (also known as the Hamming weight).\nNote:\nNote that in some languages, such as Java, there is no unsigned integer type. In this case, the input will be given as a signed integer type. It should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned.\nIn Java, the compiler represents the signed integers using 2's complement notation. Therefore, in Example 3, the input represents the signed integer. -3.", "examples": [{"full_text": "Example 1:\nInput: n = 00000000000000000000000000001011\nOutput: 3\nExplanation: The input binary string 00000000000000000000000000001011 has a total of three '1' bits.", "input": "Input: n = 00000000000000000000000000001011", "output": "Output: 3", "explanation": "Explanation: The input binary string 00000000000000000000000000001011 has a total of three '1' bits."}, {"full_text": "Example 2:\nInput: n = 00000000000000000000000010000000\nOutput: 1\nExplanation: The input binary string 00000000000000000000000010000000 has a total of one '1' bit.", "input": "Input: n = 00000000000000000000000010000000", "output": "Output: 1", "explanation": "Explanation: The input binary string 00000000000000000000000010000000 has a total of one '1' bit."}, {"full_text": "Example 3:\nInput: n = 11111111111111111111111111111101\nOutput: 31\nExplanation: The input binary string 11111111111111111111111111111101 has a total of thirty one '1' bits.", "input": "Input: n = 11111111111111111111111111111101", "output": "Output: 31", "explanation": "Explanation: The input binary string 11111111111111111111111111111101 has a total of thirty one '1' bits."}], "constraints": "Constraints:\nThe input must be a binary string of length 32.\nFollow up: If this function is called many times, how would you optimize it?", "notes": ""}, "190": {"label": "Easy", "title": "Reverse Bits", "tags": "algorithms,airbnb,apple,bit-manipulation", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.47619999999999996, "total_accepted": 435300.0, "total_submissions": 914100.0, "testcase_example": "'00000010100101000001111010011100'", "body": "Reverse bits of a given 32 bits unsigned integer.\nNote:\nNote that in some languages, such as Java, there is no unsigned integer type. In this case, both input and output will be given as a signed integer type. They should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned.\nIn Java, the compiler represents the signed integers using 2's complement notation. Therefore, in Example 2 above, the input represents the signed integer -3 and the output represents the signed integer -1073741825.", "examples": [{"full_text": "Example 1:\nInput: n = 00000010100101000001111010011100\nOutput: 964176192 (00111001011110000010100101000000)\nExplanation: The input binary string 00000010100101000001111010011100 represents the unsigned integer 43261596, so return 964176192 which its binary representation is 00111001011110000010100101000000.", "input": "Input: n = 00000010100101000001111010011100", "output": "Output: 964176192 (00111001011110000010100101000000)", "explanation": "Explanation: The input binary string 00000010100101000001111010011100 represents the unsigned integer 43261596, so return 964176192 which its binary representation is 00111001011110000010100101000000."}, {"full_text": "Example 2:\nInput: n = 11111111111111111111111111111101\nOutput: 3221225471 (10111111111111111111111111111111)\nExplanation: The input binary string 11111111111111111111111111111101 represents the unsigned integer 4294967293, so return 3221225471 which its binary representation is 10111111111111111111111111111111.", "input": "Input: n = 11111111111111111111111111111101", "output": "Output: 3221225471 (10111111111111111111111111111111)", "explanation": "Explanation: The input binary string 11111111111111111111111111111101 represents the unsigned integer 4294967293, so return 3221225471 which its binary representation is 10111111111111111111111111111111."}], "constraints": "Constraints:\nThe input must be a binary string of length 32\nFollow up: If this function is called many times, how would you optimize it?", "notes": ""}, "183": {"label": "Easy", "title": "Customers Who Never Order", "tags": "database", "langs": "mssql,mysql,oraclesql", "related_topics": "database", "acceptance_ratio": 0.6184000000000001, "total_accepted": 308300.0, "total_submissions": 498600.0, "testcase_example": "'{\"headers\": {\"Customers\": [\"id\", \"name\"], \"Orders\": [\"id\", \"customerId\"]}, \"rows\": {\"Customers\": [[1, \"Joe\"], [2, \"Henry\"], [3, \"Sam\"], [4, \"Max\"]], \"Orders\": [[1, 3], [2, 1]]}}'", "body": "Table: Customers\n+-------------+---------+\n| Column Name | Type |\n+-------------+---------+\n| id | int |\n| name | varchar |\n+-------------+---------+\nid is the primary key column for this table.\nEach row of this table indicates the ID and name of a customer.\nTable: Orders\n+-------------+------+\n| Column Name | Type |\n+-------------+------+\n| id | int |\n| customerId | int |\n+-------------+------+\nid is the primary key column for this table.\ncustomerId is a foreign key of the ID from the Customers table.\nEach row of this table indicates the ID of an order and the ID of the customer who ordered it.\nWrite an SQL query to report all customers who never order anything.\nReturn the result table in any order.\nThe query result format is in the following example.", "examples": [{"full_text": "Example 1:\nInput:\nCustomers table:\n+----+-------+\n| id | name |\n+----+-------+\n| 1 | Joe |\n| 2 | Henry |\n| 3 | Sam |\n| 4 | Max |\n+----+-------+\nOrders table:\n+----+------------+\n| id | customerId |\n+----+------------+\n| 1 | 3 |\n| 2 | 1 |\n+----+------------+\nOutput:\n+-----------+\n| Customers |\n+-----------+\n| Henry |\n| Max |\n+-----------+", "input": "Input:\nCustomers table:\n+----+-------+\n| id | name |\n+----+-------+\n| 1 | Joe |\n| 2 | Henry |\n| 3 | Sam |\n| 4 | Max |\n+----+-------+\nOrders table:\n+----+------------+\n| id | customerId |\n+----+------------+\n| 1 | 3 |\n| 2 | 1 |\n+----+------------+", "output": "Output:\n+-----------+\n| Customers |\n+-----------+\n| Henry |\n| Max |\n+-----------+", "explanation": ""}], "constraints": "", "notes": ""}, "182": {"label": "Easy", "title": "Duplicate Emails", "tags": "database", "langs": "mssql,mysql,oraclesql", "related_topics": "database", "acceptance_ratio": 0.6828, "total_accepted": 324100.0, "total_submissions": 474600.0, "testcase_example": "'{\"headers\": {\"Person\": [\"id\", \"email\"]}, \"rows\": {\"Person\": [[1, \"a@b.com\"], [2, \"c@d.com\"], [3, \"a@b.com\"]]}}'", "body": "Table: Person\n+-------------+---------+\n| Column Name | Type |\n+-------------+---------+\n| id | int |\n| email | varchar |\n+-------------+---------+\nid is the primary key column for this table.\nEach row of this table contains an email. The emails will not contain uppercase letters.\nWrite an SQL query to report all the duplicate emails.\nReturn the result table in any order.\nThe query result format is in the following example.", "examples": [{"full_text": "Example 1:\nInput:\nPerson table:\n+----+---------+\n| id | email |\n+----+---------+\n| 1 | a@b.com |\n| 2 | c@d.com |\n| 3 | a@b.com |\n+----+---------+\nOutput:\n+---------+\n| Email |\n+---------+\n| a@b.com |\n+---------+\nExplanation: a@b.com is repeated two times.", "input": "Input:\nPerson table:\n+----+---------+\n| id | email |\n+----+---------+\n| 1 | a@b.com |\n| 2 | c@d.com |\n| 3 | a@b.com |\n+----+---------+", "output": "Output:\n+---------+\n| Email |\n+---------+\n| a@b.com |\n+---------+", "explanation": "Explanation: a@b.com is repeated two times."}], "constraints": "", "notes": ""}, "181": {"label": "Easy", "title": "Employees Earning More Than Their Managers", "tags": "database", "langs": "mssql,mysql,oraclesql", "related_topics": "database", "acceptance_ratio": 0.6551, "total_accepted": 328000.0, "total_submissions": 500700.0, "testcase_example": "'{\"headers\": {\"Employee\": [\"id\", \"name\", \"salary\", \"managerId\"]}, \"rows\": {\"Employee\": [[1, \"Joe\", 70000, 3], [2, \"Henry\", 80000, 4], [3, \"Sam\", 60000, null], [4, \"Max\", 90000, null]]}}'", "body": "Table: Employee\n+-------------+---------+\n| Column Name | Type |\n+-------------+---------+\n| id | int |\n| name | varchar |\n| salary | int |\n| managerId | int |\n+-------------+---------+\nid is the primary key column for this table.\nEach row of this table indicates the ID of an employee, their name, salary, and the ID of their manager.\nWrite an SQL query to find the employees who earn more than their managers.\nReturn the result table in any order.\nThe query result format is in the following example.", "examples": [{"full_text": "Example 1:\nInput:\nEmployee table:\n+----+-------+--------+-----------+\n| id | name | salary | managerId |\n+----+-------+--------+-----------+\n| 1 | Joe | 70000 | 3 |\n| 2 | Henry | 80000 | 4 |\n| 3 | Sam | 60000 | Null |\n| 4 | Max | 90000 | Null |\n+----+-------+--------+-----------+\nOutput:\n+----------+\n| Employee |\n+----------+\n| Joe |\n+----------+\nExplanation: Joe is the only employee who earns more than his manager.", "input": "Input:\nEmployee table:\n+----+-------+--------+-----------+\n| id | name | salary | managerId |\n+----+-------+--------+-----------+\n| 1 | Joe | 70000 | 3 |\n| 2 | Henry | 80000 | 4 |\n| 3 | Sam | 60000 | Null |\n| 4 | Max | 90000 | Null |\n+----+-------+--------+-----------+", "output": "Output:\n+----------+\n| Employee |\n+----------+\n| Joe |\n+----------+", "explanation": "Explanation: Joe is the only employee who earns more than his manager."}], "constraints": "", "notes": ""}, "175": {"label": "Easy", "title": "Combine Two Tables", "tags": "database", "langs": "mssql,mysql,oraclesql", "related_topics": "database", "acceptance_ratio": 0.6916, "total_accepted": 491800.0, "total_submissions": 711100.0, "testcase_example": "'{\"headers\":{\"Person\":[\"personId\",\"lastName\",\"firstName\"],\"Address\":[\"addressId\",\"personId\",\"city\",\"state\"]},\"rows\":{\"Person\":[[1,\"Wang\",\"Allen\"],[2,\"Alice\",\"Bob\"]],\"Address\":[[1,2,\"New York City\",\"New York\"],[2,3,\"Leetcode\",\"California\"]]}}'", "body": "Table: Person\n+-------------+---------+\n| Column Name | Type |\n+-------------+---------+\n| personId | int |\n| lastName | varchar |\n| firstName | varchar |\n+-------------+---------+\npersonId is the primary key column for this table.\nThis table contains information about the ID of some persons and their first and last names.\nTable: Address\n+-------------+---------+\n| Column Name | Type |\n+-------------+---------+\n| addressId | int |\n| personId | int |\n| city | varchar |\n| state | varchar |\n+-------------+---------+\naddressId is the primary key column for this table.\nEach row of this table contains information about the city and state of one person with ID = PersonId.\nWrite an SQL query to report the first name, last name, city, and state of each person in the Person table. If the address of a personId is not present in the Address table, report null instead.\nReturn the result table in any order.\nThe query result format is in the following example.", "examples": [{"full_text": "Example 1:\nInput:\nPerson table:\n+----------+----------+-----------+\n| personId | lastName | firstName |\n+----------+----------+-----------+\n| 1 | Wang | Allen |\n| 2 | Alice | Bob |\n+----------+----------+-----------+\nAddress table:\n+-----------+----------+---------------+------------+\n| addressId | personId | city | state |\n+-----------+----------+---------------+------------+\n| 1 | 2 | New York City | New York |\n| 2 | 3 | Leetcode | California |\n+-----------+----------+---------------+------------+\nOutput:\n+-----------+----------+---------------+----------+\n| firstName | lastName | city | state |\n+-----------+----------+---------------+----------+\n| Allen | Wang | Null | Null |\n| Bob | Alice | New York City | New York |\n+-----------+----------+---------------+----------+\nExplanation:\nThere is no address in the address table for the personId = 1 so we return null in their city and state.\naddressId = 1 contains information about the address of personId = 2.", "input": "Input:\nPerson table:\n+----------+----------+-----------+\n| personId | lastName | firstName |\n+----------+----------+-----------+\n| 1 | Wang | Allen |\n| 2 | Alice | Bob |\n+----------+----------+-----------+\nAddress table:\n+-----------+----------+---------------+------------+\n| addressId | personId | city | state |\n+-----------+----------+---------------+------------+\n| 1 | 2 | New York City | New York |\n| 2 | 3 | Leetcode | California |\n+-----------+----------+---------------+------------+", "output": "Output:\n+-----------+----------+---------------+----------+\n| firstName | lastName | city | state |\n+-----------+----------+---------------+----------+\n| Allen | Wang | Null | Null |\n| Bob | Alice | New York City | New York |\n+-----------+----------+---------------+----------+", "explanation": "Explanation:\nThere is no address in the address table for the personId = 1 so we return null in their city and state.\naddressId = 1 contains information about the address of personId = 2."}], "constraints": "", "notes": ""}, "171": {"label": "Easy", "title": "Excel Sheet Column Number", "tags": "algorithms,microsoft,uber,math", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5902000000000001, "total_accepted": 437800.0, "total_submissions": 741700.0, "testcase_example": "'\"A\"'", "body": "Given a string columnTitle that represents the column title as appear in an Excel sheet, return its corresponding column number.\nFor example:\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28\n...", "examples": [{"full_text": "Example 1:\nInput: columnTitle = \"A\"\nOutput: 1", "input": "Input: columnTitle = \"A\"", "output": "Output: 1", "explanation": ""}, {"full_text": "Example 2:\nInput: columnTitle = \"AB\"\nOutput: 28", "input": "Input: columnTitle = \"AB\"", "output": "Output: 28", "explanation": ""}, {"full_text": "Example 3:\nInput: columnTitle = \"ZY\"\nOutput: 701", "input": "Input: columnTitle = \"ZY\"", "output": "Output: 701", "explanation": ""}], "constraints": "Constraints:\n1 <= columnTitle.length <= 7\ncolumnTitle consists only of uppercase English letters.\ncolumnTitle is in the range [\"A\", \"FXSHRXW\"].", "notes": ""}, "169": {"label": "Easy", "title": "Majority Element", "tags": "algorithms,adobe,zenefits,array,bit-manipulation,divide-and-conquer", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6206, "total_accepted": 1100000.0, "total_submissions": 1800000.0, "testcase_example": "'[3,2,3]'", "body": "Given an array nums of size n, return the majority element.\nThe majority element is the element that appears more than \u230an / 2\u230b times. You may assume that the majority element always exists in the array.", "examples": [{"full_text": "Example 1:\nInput: nums = [3,2,3]\nOutput: 3", "input": "Input: nums = [3,2,3]", "output": "Output: 3", "explanation": ""}, {"full_text": "Example 2:\nInput: nums = [2,2,1,1,1,2,2]\nOutput: 2", "input": "Input: nums = [2,2,1,1,1,2,2]", "output": "Output: 2", "explanation": ""}], "constraints": "Constraints:\nn == nums.length\n1 <= n <= 5 * 10^4\n-2^31 <= nums[i] <= 2^31 - 1", "notes": "Follow-up: Could you solve the problem in linear time and in O(1) space?"}, "168": {"label": "Easy", "title": "Excel Sheet Column Title", "tags": "algorithms,facebook,microsoft,zenefits,math", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3346, "total_accepted": 298400.0, "total_submissions": 891700.0, "testcase_example": "'1'", "body": "Given an integer columnNumber, return its corresponding column title as it appears in an Excel sheet.\nFor example:\nA -> 1\nB -> 2\nC -> 3\n...\nZ -> 26\nAA -> 27\nAB -> 28\n...", "examples": [{"full_text": "Example 1:\nInput: columnNumber = 1\nOutput: \"A\"", "input": "Input: columnNumber = 1", "output": "Output: \"A\"", "explanation": ""}, {"full_text": "Example 2:\nInput: columnNumber = 28\nOutput: \"AB\"", "input": "Input: columnNumber = 28", "output": "Output: \"AB\"", "explanation": ""}, {"full_text": "Example 3:\nInput: columnNumber = 701\nOutput: \"ZY\"", "input": "Input: columnNumber = 701", "output": "Output: \"ZY\"", "explanation": ""}], "constraints": "Constraints:\n1 <= columnNumber <= 2^31 - 1", "notes": ""}, "160": {"label": "Easy", "title": "Intersection of Two Linked Lists", "tags": "algorithms,airbnb,amazon,bloomberg,microsoft,linked-list", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.48969999999999997, "total_accepted": 867900.0, "total_submissions": 1800000.0, "testcase_example": "'8\\n[4,1,8,4,5]\\n[5,6,1,8,4,5]\\n2\\n3'", "body": "Given the heads of two singly linked-lists headA and headB, return the node at which the two lists intersect. If the two linked lists have no intersection at all, return null.\nFor example, the following two linked lists begin to intersect at node c1:\nThe test cases are generated such that there are no cycles anywhere in the entire linked structure.\nNote that the linked lists must retain their original structure after the function returns.\nCustom Judge:\nThe inputs to the judge are given as follows (your program is not given these inputs):\nintersectVal - The value of the node where the intersection occurs. This is 0 if there is no intersected node.\nlistA - The first linked list.\nlistB - The second linked list.\nskipA - The number of nodes to skip ahead in listA (starting from the head) to get to the intersected node.\nskipB - The number of nodes to skip ahead in listB (starting from the head) to get to the intersected node.\nThe judge will then create the linked structure based on these inputs and pass the two heads, headA and headB\nto your program. If you correctly return the intersected node, then your solution will be accepted.", "examples": [{"full_text": "Example 1:\nInput: intersectVal = 8, listA = [4,1,8,4,5], listB = [5,6,1,8,4,5], skipA = 2, skipB = 3\nOutput: Intersected at '8'\nExplanation: The intersected node's value is 8 (note that this must not be 0 if the two lists intersect).\nFrom the head of A, it reads as [4,1,8,4,5]. From the head of B, it reads as [5,6,1,8,4,5]. There are 2 nodes before the intersected node in A; There are 3 nodes before the intersected node in B.", "input": "Input: intersectVal = 8, listA = [4,1,8,4,5], listB = [5,6,1,8,4,5], skipA = 2, skipB = 3", "output": "Output: Intersected at '8'", "explanation": "Explanation: The intersected node's value is 8 (note that this must not be 0 if the two lists intersect).\nFrom the head of A, it reads as [4,1,8,4,5]. From the head of B, it reads as [5,6,1,8,4,5]. There are 2 nodes before the intersected node in A; There are 3 nodes before the intersected node in B."}, {"full_text": "Example 2:\nInput: intersectVal = 2, listA = [1,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1\nOutput: Intersected at '2'\nExplanation: The intersected node's value is 2 (note that this must not be 0 if the two lists intersect).\nFrom the head of A, it reads as [1,9,1,2,4]. From the head of B, it reads as [3,2,4]. There are 3 nodes before the intersected node in A; There are 1 node before the intersected node in B.", "input": "Input: intersectVal = 2, listA = [1,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1", "output": "Output: Intersected at '2'", "explanation": "Explanation: The intersected node's value is 2 (note that this must not be 0 if the two lists intersect).\nFrom the head of A, it reads as [1,9,1,2,4]. From the head of B, it reads as [3,2,4]. There are 3 nodes before the intersected node in A; There are 1 node before the intersected node in B."}, {"full_text": "Example 3:\nInput: intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2\nOutput: No intersection\nExplanation: From the head of A, it reads as [2,6,4]. From the head of B, it reads as [1,5]. Since the two lists do not intersect, intersectVal must be 0, while skipA and skipB can be arbitrary values.\nExplanation: The two lists do not intersect, so return null.", "input": "Input: intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2", "output": "Output: No intersection", "explanation": "Explanation: From the head of A, it reads as [2,6,4]. From the head of B, it reads as [1,5]. Since the two lists do not intersect, intersectVal must be 0, while skipA and skipB can be arbitrary values.\nExplanation: The two lists do not intersect, so return null."}], "constraints": "Constraints:\nThe number of nodes of listA is in the m.\nThe number of nodes of listB is in the n.\n1 <= m, n <= 3 * 10^4\n1 <= Node.val <= 10^5\n0 <= skipA <\nm\n0 <= skipB <\nn\nintersectVal is 0 if listA and listB do not intersect.\nintersectVal == listA[skipA] == listB[skipB] if listA and listB intersect.\nFollow up: Could you write a solution that runs in O(m + n) time and use only O(1) memory?", "notes": ""}, "155": {"label": "Easy", "title": "Min Stack", "tags": "algorithms,amazon,bloomberg,google,snapchat,uber,zenefits,design,stack", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.496, "total_accepted": 912500.0, "total_submissions": 1800000.0, "testcase_example": "'[\"MinStack\",\"push\",\"push\",\"push\",\"getMin\",\"pop\",\"top\",\"getMin\"]\\n' +\n  '[[],[-2],[0],[-3],[],[],[],[]]'", "body": "Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.\nImplement the MinStack class:\nMinStack() initializes the stack object.\nvoid push(int val) pushes the element val onto the stack.\nvoid pop() removes the element on the top of the stack.\nint top() gets the top element of the stack.\nint getMin() retrieves the minimum element in the stack.", "examples": [{"full_text": "Example 1:\nInput\n[\"MinStack\",\"push\",\"push\",\"push\",\"getMin\",\"pop\",\"top\",\"getMin\"]\n[[],[-2],[0],[-3],[],[],[],[]]\nOutput\n[null,null,null,null,-3,null,0,-2]\nExplanation\nMinStack minStack = new MinStack();\nminStack.push(-2);\nminStack.push(0);\nminStack.push(-3);\nminStack.getMin(); // return -3\nminStack.pop();\nminStack.top(); // return 0\nminStack.getMin(); // return -2", "input": "Input\n[\"MinStack\",\"push\",\"push\",\"push\",\"getMin\",\"pop\",\"top\",\"getMin\"]\n[[],[-2],[0],[-3],[],[],[],[]]", "output": "Output\n[null,null,null,null,-3,null,0,-2]", "explanation": "Explanation\nMinStack minStack = new MinStack();\nminStack.push(-2);\nminStack.push(0);\nminStack.push(-3);\nminStack.getMin(); // return -3\nminStack.pop();\nminStack.top(); // return 0\nminStack.getMin(); // return -2"}], "constraints": "Constraints:\n-2^31 <= val <= 2^31 - 1\nMethods pop, top and getMin operations will always be called on non-empty stacks.\nAt most 3 * 10^4 calls will be made to push, pop, top, and getMin.", "notes": ""}, "145": {"label": "Easy", "title": "Binary Tree Postorder Traversal", "tags": "algorithms,stack,tree", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6301, "total_accepted": 658600.0, "total_submissions": 1000000.0, "testcase_example": "'[1,null,2,3]'", "body": "Given the root of a\nbinary tree, return the postorder traversal of its nodes' values.", "examples": [{"full_text": "Example 1:\nInput: root = [1,null,2,3]\nOutput: [3,2,1]", "input": "Input: root = [1,null,2,3]", "output": "Output: [3,2,1]", "explanation": ""}, {"full_text": "Example 2:\nInput: root = []\nOutput: []", "input": "Input: root = []", "output": "Output: []", "explanation": ""}, {"full_text": "Example 3:\nInput: root = [1]\nOutput: [1]", "input": "Input: root = [1]", "output": "Output: [1]", "explanation": ""}], "constraints": "Constraints:\nThe number of the nodes in the tree is in the range [0, 100].\n-100 <= Node.val <= 100\nFollow up: Recursive solution is trivial, could you do it iteratively?", "notes": ""}, "144": {"label": "Easy", "title": "Binary Tree Preorder Traversal", "tags": "algorithms,stack,tree", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6168, "total_accepted": 863000.0, "total_submissions": 1400000.0, "testcase_example": "'[1,null,2,3]'", "body": "Given the root of a binary tree, return the preorder traversal of its nodes' values.", "examples": [{"full_text": "Example 1:\nInput: root = [1,null,2,3]\nOutput: [1,2,3]", "input": "Input: root = [1,null,2,3]", "output": "Output: [1,2,3]", "explanation": ""}, {"full_text": "Example 2:\nInput: root = []\nOutput: []", "input": "Input: root = []", "output": "Output: []", "explanation": ""}, {"full_text": "Example 3:\nInput: root = [1]\nOutput: [1]", "input": "Input: root = [1]", "output": "Output: [1]", "explanation": ""}], "constraints": "Constraints:\nThe number of nodes in the tree is in the range [0, 100].\n-100 <= Node.val <= 100\nFollow up: Recursive solution is trivial, could you do it iteratively?", "notes": ""}, "141": {"label": "Easy", "title": "Linked List Cycle", "tags": "algorithms,amazon,bloomberg,microsoft,yahoo,linked-list,two-pointers", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.45030000000000003, "total_accepted": 1300000.0, "total_submissions": 2800000.0, "testcase_example": "'[3,2,0,-4]\\n1'", "body": "Given head, the head of a linked list, determine if the linked list has a cycle in it.\nThere is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the\nnext\npointer. Internally, pos\nis used to denote the index of the node that\ntail's\nnext\npointer is connected to.\nNote that\npos\nis not passed as a parameter.\nReturn\ntrue if there is a cycle in the linked list. Otherwise, return false.", "examples": [{"full_text": "Example 1:\nInput: head = [3,2,0,-4], pos = 1\nOutput: true\nExplanation: There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed).", "input": "Input: head = [3,2,0,-4], pos = 1", "output": "Output: true", "explanation": "Explanation: There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed)."}, {"full_text": "Example 2:\nInput: head = [1,2], pos = 0\nOutput: true\nExplanation: There is a cycle in the linked list, where the tail connects to the 0th node.", "input": "Input: head = [1,2], pos = 0", "output": "Output: true", "explanation": "Explanation: There is a cycle in the linked list, where the tail connects to the 0th node."}, {"full_text": "Example 3:\nInput: head = [1], pos = -1\nOutput: false\nExplanation: There is no cycle in the linked list.", "input": "Input: head = [1], pos = -1", "output": "Output: false", "explanation": "Explanation: There is no cycle in the linked list."}], "constraints": "Constraints:\nThe number of the nodes in the list is in the range [0, 10^4].\n-10^5 <= Node.val <= 10^5\npos is -1 or a valid index in the linked-list.\nFollow up: Can you solve it using O(1) (i.e. constant) memory?", "notes": ""}, "136": {"label": "Easy", "title": "Single Number", "tags": "algorithms,airbnb,palantir,bit-manipulation,hash-table", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6901999999999999, "total_accepted": 1500000.0, "total_submissions": 2200000.0, "testcase_example": "'[2,2,1]'", "body": "Given a non-empty\narray of integers nums, every element appears twice except for one. Find that single one.\nYou must\nimplement a solution with a linear runtime complexity and use\nonly constant\nextra space.", "examples": [{"full_text": "Example 1:\nInput: nums = [2,2,1]\nOutput: 1", "input": "Input: nums = [2,2,1]", "output": "Output: 1", "explanation": ""}, {"full_text": "Example 2:\nInput: nums = [4,1,2,1,2]\nOutput: 4", "input": "Input: nums = [4,1,2,1,2]", "output": "Output: 4", "explanation": ""}, {"full_text": "Example 3:\nInput: nums = [1]\nOutput: 1", "input": "Input: nums = [1]", "output": "Output: 1", "explanation": ""}], "constraints": "Constraints:\n1 <= nums.length <= 3 * 10^4\n-3 * 10^4 <= nums[i] <= 3 * 10^4\nEach element in the array appears twice except for one element which appears only once.", "notes": ""}, "125": {"label": "Easy", "title": "Valid Palindrome", "tags": "algorithms,facebook,microsoft,uber,zenefits,string,two-pointers", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4089, "total_accepted": 1100000.0, "total_submissions": 2800000.0, "testcase_example": "'\"A man, a plan, a canal: Panama\"'", "body": "A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.\nGiven a string s, return true if it is a palindrome, or false otherwise.", "examples": [{"full_text": "Example 1:\nInput: s = \"A man, a plan, a canal: Panama\"\nOutput: true\nExplanation: \"amanaplanacanalpanama\" is a palindrome.", "input": "Input: s = \"A man, a plan, a canal: Panama\"", "output": "Output: true", "explanation": "Explanation: \"amanaplanacanalpanama\" is a palindrome."}, {"full_text": "Example 2:\nInput: s = \"race a car\"\nOutput: false\nExplanation: \"raceacar\" is not a palindrome.", "input": "Input: s = \"race a car\"", "output": "Output: false", "explanation": "Explanation: \"raceacar\" is not a palindrome."}, {"full_text": "Example 3:\nInput: s = \" \"\nOutput: true\nExplanation: s is an empty string \"\" after removing non-alphanumeric characters.\nSince an empty string reads the same forward and backward, it is a palindrome.", "input": "Input: s = \" \"", "output": "Output: true", "explanation": "Explanation: s is an empty string \"\" after removing non-alphanumeric characters.\nSince an empty string reads the same forward and backward, it is a palindrome."}], "constraints": "Constraints:\n1 <= s.length <= 2 * 10^5\ns consists only of printable ASCII characters.", "notes": ""}, "121": {"label": "Easy", "title": "Best Time to Buy and Sell Stock", "tags": "algorithms,amazon,bloomberg,facebook,microsoft,uber,array,dynamic-programming", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5381, "total_accepted": 1900000.0, "total_submissions": 3600000.0, "testcase_example": "'[7,1,5,3,6,4]'", "body": "You are given an array prices where prices[i] is the price of a given stock on the i^th day.\nYou want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.\nReturn the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.", "examples": [{"full_text": "Example 1:\nInput: prices = [7,1,5,3,6,4]\nOutput: 5\nExplanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.\nNote that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.", "input": "Input: prices = [7,1,5,3,6,4]", "output": "Output: 5", "explanation": "Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.\nNote that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell."}, {"full_text": "Example 2:\nInput: prices = [7,6,4,3,1]\nOutput: 0\nExplanation: In this case, no transactions are done and the max profit = 0.", "input": "Input: prices = [7,6,4,3,1]", "output": "Output: 0", "explanation": "Explanation: In this case, no transactions are done and the max profit = 0."}], "constraints": "Constraints:\n1 <= prices.length <= 10^5\n0 <= prices[i] <= 10^4", "notes": ""}, "119": {"label": "Easy", "title": "Pascal's Triangle II", "tags": "algorithms,amazon,array", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5658, "total_accepted": 483000.0, "total_submissions": 853600.0, "testcase_example": "'3'", "body": "Given an integer rowIndex, return the rowIndex^th (0-indexed) row of the Pascal's triangle.\nIn Pascal's triangle, each number is the sum of the two numbers directly above it as shown:", "examples": [{"full_text": "Example 1:\nInput: rowIndex = 3\nOutput: [1,3,3,1]", "input": "Input: rowIndex = 3", "output": "Output: [1,3,3,1]", "explanation": ""}, {"full_text": "Example 2:\nInput: rowIndex = 0\nOutput: [1]", "input": "Input: rowIndex = 0", "output": "Output: [1]", "explanation": ""}, {"full_text": "Example 3:\nInput: rowIndex = 1\nOutput: [1,1]", "input": "Input: rowIndex = 1", "output": "Output: [1,1]", "explanation": ""}], "constraints": "Constraints:\n0 <= rowIndex <= 33\nFollow up: Could you optimize your algorithm to use only O(rowIndex) extra space?", "notes": ""}, "118": {"label": "Easy", "title": "Pascal's Triangle", "tags": "algorithms,apple,twitter,array", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6294, "total_accepted": 714000.0, "total_submissions": 1100000.0, "testcase_example": "'5'", "body": "Given an integer numRows, return the first numRows of Pascal's triangle.\nIn Pascal's triangle, each number is the sum of the two numbers directly above it as shown:", "examples": [{"full_text": "Example 1:\nInput: numRows = 5\nOutput: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]", "input": "Input: numRows = 5", "output": "Output: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]", "explanation": ""}, {"full_text": "Example 2:\nInput: numRows = 1\nOutput: [[1]]", "input": "Input: numRows = 1", "output": "Output: [[1]]", "explanation": ""}], "constraints": "Constraints:\n1 <= numRows <= 30", "notes": ""}, "112": {"label": "Easy", "title": "Path Sum", "tags": "algorithms,microsoft,depth-first-search,tree", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4498, "total_accepted": 810200.0, "total_submissions": 1800000.0, "testcase_example": "'[5,4,8,11,null,13,4,7,2,null,null,null,1]\\n22'", "body": "Given the root of a binary tree and an integer targetSum, return true if the tree has a root-to-leaf path such that adding up all the values along the path equals targetSum.\nA leaf is a node with no children.", "examples": [{"full_text": "Example 1:\nInput: root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22\nOutput: true\nExplanation: The root-to-leaf path with the target sum is shown.", "input": "Input: root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22", "output": "Output: true", "explanation": "Explanation: The root-to-leaf path with the target sum is shown."}, {"full_text": "Example 2:\nInput: root = [1,2,3], targetSum = 5\nOutput: false\nExplanation: There two root-to-leaf paths in the tree:\n(1 --> 2): The sum is 3.\n(1 --> 3): The sum is 4.\nThere is no root-to-leaf path with sum = 5.", "input": "Input: root = [1,2,3], targetSum = 5", "output": "Output: false", "explanation": "Explanation: There two root-to-leaf paths in the tree:\n(1 --> 2): The sum is 3.\n(1 --> 3): The sum is 4.\nThere is no root-to-leaf path with sum = 5."}, {"full_text": "Example 3:\nInput: root = [], targetSum = 0\nOutput: false\nExplanation: Since the tree is empty, there are no root-to-leaf paths.", "input": "Input: root = [], targetSum = 0", "output": "Output: false", "explanation": "Explanation: Since the tree is empty, there are no root-to-leaf paths."}], "constraints": "Constraints:\nThe number of nodes in the tree is in the range [0, 5000].\n-1000 <= Node.val <= 1000\n-1000 <= targetSum <= 1000", "notes": ""}, "111": {"label": "Easy", "title": "Minimum Depth of Binary Tree", "tags": "algorithms,breadth-first-search,depth-first-search,tree", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.42060000000000003, "total_accepted": 704000.0, "total_submissions": 1700000.0, "testcase_example": "'[3,9,20,null,null,15,7]'", "body": "Given a binary tree, find its minimum depth.\nThe minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.\nNote:\nA leaf is a node with no children.", "examples": [{"full_text": "Example 1:\nInput: root = [3,9,20,null,null,15,7]\nOutput: 2", "input": "Input: root = [3,9,20,null,null,15,7]", "output": "Output: 2", "explanation": ""}, {"full_text": "Example 2:\nInput: root = [2,null,3,null,4,null,5,null,6]\nOutput: 5", "input": "Input: root = [2,null,3,null,4,null,5,null,6]", "output": "Output: 5", "explanation": ""}], "constraints": "Constraints:\nThe number of nodes in the tree is in the range [0, 10^5].\n-1000 <= Node.val <= 1000", "notes": ""}, "110": {"label": "Easy", "title": "Balanced Binary Tree", "tags": "algorithms,bloomberg,depth-first-search,tree", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.46380000000000005, "total_accepted": 706500.0, "total_submissions": 1500000.0, "testcase_example": "'[3,9,20,null,null,15,7]'", "body": "Given a binary tree, determine if it is height-balanced.\nFor this problem, a height-balanced binary tree is defined as:\na binary tree in which the left and right subtrees of every node differ in height by no more than 1.", "examples": [{"full_text": "Example 1:\nInput: root = [3,9,20,null,null,15,7]\nOutput: true", "input": "Input: root = [3,9,20,null,null,15,7]", "output": "Output: true", "explanation": ""}, {"full_text": "Example 2:\nInput: root = [1,2,2,3,3,null,null,4,4]\nOutput: false", "input": "Input: root = [1,2,2,3,3,null,null,4,4]", "output": "Output: false", "explanation": ""}, {"full_text": "Example 3:\nInput: root = []\nOutput: true", "input": "Input: root = []", "output": "Output: true", "explanation": ""}], "constraints": "Constraints:\nThe number of nodes in the tree is in the range [0, 5000].\n-10^4 <= Node.val <= 10^4", "notes": ""}, "108": {"label": "Easy", "title": "Convert Sorted Array to Binary Search Tree", "tags": "algorithms,airbnb,depth-first-search,tree", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.653, "total_accepted": 692300.0, "total_submissions": 1100000.0, "testcase_example": "'[-10,-3,0,5,9]'", "body": "Given an integer array nums where the elements are sorted in ascending order, convert it to a height-balanced binary search tree.\nA height-balanced binary tree is a binary tree in which the depth of the two subtrees of every node never differs by more than one.", "examples": [{"full_text": "Example 1:\nInput: nums = [-10,-3,0,5,9]\nOutput: [0,-3,9,-10,null,5]\nExplanation: [0,-10,5,null,-3,null,9] is also accepted:", "input": "Input: nums = [-10,-3,0,5,9]", "output": "Output: [0,-3,9,-10,null,5]", "explanation": "Explanation: [0,-10,5,null,-3,null,9] is also accepted:"}, {"full_text": "Example 2:\nInput: nums = [1,3]\nOutput: [3,1]\nExplanation: [1,3] and [3,1] are both a height-balanced BSTs.", "input": "Input: nums = [1,3]", "output": "Output: [3,1]", "explanation": "Explanation: [1,3] and [3,1] are both a height-balanced BSTs."}], "constraints": "Constraints:\n1 <= nums.length <= 10^4\n-10^4 <= nums[i] <= 10^4\nnums is sorted in a strictly increasing order.", "notes": ""}, "104": {"label": "Easy", "title": "Maximum Depth of Binary Tree", "tags": "algorithms,apple,linkedin,uber,yahoo,depth-first-search,tree", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7134999999999999, "total_accepted": 1500000.0, "total_submissions": 2100000.0, "testcase_example": "'[3,9,20,null,null,15,7]'", "body": "Given the root of a binary tree, return its maximum depth.\nA binary tree's maximum depth\nis the number of nodes along the longest path from the root node down to the farthest leaf node.", "examples": [{"full_text": "Example 1:\nInput: root = [3,9,20,null,null,15,7]\nOutput: 3", "input": "Input: root = [3,9,20,null,null,15,7]", "output": "Output: 3", "explanation": ""}, {"full_text": "Example 2:\nInput: root = [1,null,2]\nOutput: 2", "input": "Input: root = [1,null,2]", "output": "Output: 2", "explanation": ""}], "constraints": "Constraints:\nThe number of nodes in the tree is in the range [0, 10^4].\n-100 <= Node.val <= 100", "notes": ""}, "101": {"label": "Easy", "title": "Symmetric Tree", "tags": "algorithms,bloomberg,linkedin,microsoft,breadth-first-search,depth-first-search,tree", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5108, "total_accepted": 1100000.0, "total_submissions": 2300000.0, "testcase_example": "'[1,2,2,3,4,4,3]'", "body": "Given the root of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).", "examples": [{"full_text": "Example 1:\nInput: root = [1,2,2,3,4,4,3]\nOutput: true", "input": "Input: root = [1,2,2,3,4,4,3]", "output": "Output: true", "explanation": ""}, {"full_text": "Example 2:\nInput: root = [1,2,2,null,3,null,3]\nOutput: false", "input": "Input: root = [1,2,2,null,3,null,3]", "output": "Output: false", "explanation": ""}], "constraints": "Constraints:\nThe number of nodes in the tree is in the range [1, 1000].\n-100 <= Node.val <= 100\nFollow up: Could you solve it both recursively and iteratively?", "notes": ""}, "100": {"label": "Easy", "title": "Same Tree", "tags": "algorithms,bloomberg,depth-first-search,tree", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5523, "total_accepted": 948300.0, "total_submissions": 1700000.0, "testcase_example": "'[1,2,3]\\n[1,2,3]'", "body": "Given the roots of two binary trees p and q, write a function to check if they are the same or not.\nTwo binary trees are considered the same if they are structurally identical, and the nodes have the same value.", "examples": [{"full_text": "Example 1:\nInput: p = [1,2,3], q = [1,2,3]\nOutput: true", "input": "Input: p = [1,2,3], q = [1,2,3]", "output": "Output: true", "explanation": ""}, {"full_text": "Example 2:\nInput: p = [1,2], q = [1,null,2]\nOutput: false", "input": "Input: p = [1,2], q = [1,null,2]", "output": "Output: false", "explanation": ""}, {"full_text": "Example 3:\nInput: p = [1,2,1], q = [1,1,2]\nOutput: false", "input": "Input: p = [1,2,1], q = [1,1,2]", "output": "Output: false", "explanation": ""}], "constraints": "Constraints:\nThe number of nodes in both trees is in the range [0, 100].\n-10^4 <= Node.val <= 10^4", "notes": ""}, "94": {"label": "Easy", "title": "Binary Tree Inorder Traversal", "tags": "algorithms,microsoft,hash-table,stack,tree", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7001999999999999, "total_accepted": 1300000.0, "total_submissions": 1900000.0, "testcase_example": "'[1,null,2,3]'", "body": "Given the root of a binary tree, return the inorder traversal of its nodes' values.", "examples": [{"full_text": "Example 1:\nInput: root = [1,null,2,3]\nOutput: [1,3,2]", "input": "Input: root = [1,null,2,3]", "output": "Output: [1,3,2]", "explanation": ""}, {"full_text": "Example 2:\nInput: root = []\nOutput: []", "input": "Input: root = []", "output": "Output: []", "explanation": ""}, {"full_text": "Example 3:\nInput: root = [1]\nOutput: [1]", "input": "Input: root = [1]", "output": "Output: [1]", "explanation": ""}], "constraints": "Constraints:\nThe number of nodes in the tree is in the range [0, 100].\n-100 <= Node.val <= 100\nFollow up: Recursive solution is trivial, could you do it iteratively?", "notes": ""}, "88": {"label": "Easy", "title": "Merge Sorted Array", "tags": "algorithms,bloomberg,facebook,microsoft,array,two-pointers", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4326, "total_accepted": 1200000.0, "total_submissions": 2900000.0, "testcase_example": "'[1,2,3,0,0,0]\\n3\\n[2,5,6]\\n3'", "body": "You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.\nMerge nums1 and nums2 into a single array sorted in non-decreasing order.\nThe final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.", "examples": [{"full_text": "Example 1:\nInput: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3\nOutput: [1,2,2,3,5,6]\nExplanation: The arrays we are merging are [1,2,3] and [2,5,6].\nThe result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1.", "input": "Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3", "output": "Output: [1,2,2,3,5,6]", "explanation": "Explanation: The arrays we are merging are [1,2,3] and [2,5,6].\nThe result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1."}, {"full_text": "Example 2:\nInput: nums1 = [1], m = 1, nums2 = [], n = 0\nOutput: [1]\nExplanation: The arrays we are merging are [1] and [].\nThe result of the merge is [1].", "input": "Input: nums1 = [1], m = 1, nums2 = [], n = 0", "output": "Output: [1]", "explanation": "Explanation: The arrays we are merging are [1] and [].\nThe result of the merge is [1]."}, {"full_text": "Example 3:\nInput: nums1 = [0], m = 0, nums2 = [1], n = 1\nOutput: [1]\nExplanation: The arrays we are merging are [] and [1].\nThe result of the merge is [1].\nNote that because m = 0, there are no elements in nums1. The 0 is only there to ensure the merge result can fit in nums1.", "input": "Input: nums1 = [0], m = 0, nums2 = [1], n = 1", "output": "Output: [1]", "explanation": "Explanation: The arrays we are merging are [] and [1].\nThe result of the merge is [1].\nNote that because m = 0, there are no elements in nums1. The 0 is only there to ensure the merge result can fit in nums1."}], "constraints": "Constraints:\nnums1.length == m + n\nnums2.length == n\n0 <= m, n <= 200\n1 <= m + n <= 200\n-10^9 <= nums1[i], nums2[j] <= 10^9\nFollow up: Can you come up with an algorithm that runs in O(m + n) time?", "notes": ""}, "83": {"label": "Easy", "title": "Remove Duplicates from Sorted List", "tags": "algorithms,linked-list", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.48590000000000005, "total_accepted": 788700.0, "total_submissions": 1600000.0, "testcase_example": "'[1,1,2]'", "body": "Given the head of a sorted linked list, delete all duplicates such that each element appears only once. Return the linked list sorted as well.", "examples": [{"full_text": "Example 1:\nInput: head = [1,1,2]\nOutput: [1,2]", "input": "Input: head = [1,1,2]", "output": "Output: [1,2]", "explanation": ""}, {"full_text": "Example 2:\nInput: head = [1,1,2,3,3]\nOutput: [1,2,3]", "input": "Input: head = [1,1,2,3,3]", "output": "Output: [1,2,3]", "explanation": ""}], "constraints": "Constraints:\nThe number of nodes in the list is in the range [0, 300].\n-100 <= Node.val <= 100\nThe list is guaranteed to be sorted in ascending order.", "notes": ""}, "70": {"label": "Easy", "title": "Climbing Stairs", "tags": "algorithms,adobe,apple,dynamic-programming", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.507, "total_accepted": 1400000.0, "total_submissions": 2800000.0, "testcase_example": "'2'", "body": "You are climbing a staircase. It takes n steps to reach the top.\nEach time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?", "examples": [{"full_text": "Example 1:\nInput: n = 2\nOutput: 2\nExplanation: There are two ways to climb to the top.\n1. 1 step + 1 step\n2. 2 steps", "input": "Input: n = 2", "output": "Output: 2", "explanation": "Explanation: There are two ways to climb to the top.\n1. 1 step + 1 step\n2. 2 steps"}, {"full_text": "Example 2:\nInput: n = 3\nOutput: 3\nExplanation: There are three ways to climb to the top.\n1. 1 step + 1 step + 1 step\n2. 1 step + 2 steps\n3. 2 steps + 1 step", "input": "Input: n = 3", "output": "Output: 3", "explanation": "Explanation: There are three ways to climb to the top.\n1. 1 step + 1 step + 1 step\n2. 1 step + 2 steps\n3. 2 steps + 1 step"}], "constraints": "Constraints:\n1 <= n <= 45", "notes": ""}, "69": {"label": "Easy", "title": "Sqrt(x)", "tags": "algorithms,apple,bloomberg,facebook,binary-search,math", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3626, "total_accepted": 952000.0, "total_submissions": 2600000.0, "testcase_example": "'4'", "body": "Given a non-negative integer x,\ncompute and return the square root of x.\nSince the return type\nis an integer, the decimal digits are truncated, and only the integer part of the result\nis returned.\nNote:\nYou are not allowed to use any built-in exponent function or operator, such as pow(x, 0.5) or\nx ** 0.5.", "examples": [{"full_text": "Example 1:\nInput: x = 4\nOutput: 2", "input": "Input: x = 4", "output": "Output: 2", "explanation": ""}, {"full_text": "Example 2:\nInput: x = 8\nOutput: 2\nExplanation: The square root of 8 is 2.82842..., and since the decimal part is truncated, 2 is returned.", "input": "Input: x = 8", "output": "Output: 2", "explanation": "Explanation: The square root of 8 is 2.82842..., and since the decimal part is truncated, 2 is returned."}], "constraints": "Constraints:\n0 <= x <= 2^31 - 1", "notes": ""}, "67": {"label": "Easy", "title": "Add Binary", "tags": "algorithms,facebook,math,string", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5007, "total_accepted": 785500.0, "total_submissions": 1600000.0, "testcase_example": "'\"11\"\\n\"1\"'", "body": "Given two binary strings a and b, return their sum as a binary string.", "examples": [{"full_text": "Example 1:\nInput: a = \"11\", b = \"1\"\nOutput: \"100\"", "input": "Input: a = \"11\", b = \"1\"", "output": "Output: \"100\"", "explanation": ""}, {"full_text": "Example 2:\nInput: a = \"1010\", b = \"1011\"\nOutput: \"10101\"", "input": "Input: a = \"1010\", b = \"1011\"", "output": "Output: \"10101\"", "explanation": ""}], "constraints": "Constraints:\n1 <= a.length, b.length <= 10^4\na and b consist\nonly of '0' or '1' characters.\nEach string does not contain leading zeros except for the zero itself.", "notes": ""}, "66": {"label": "Easy", "title": "Plus One", "tags": "algorithms,google,array,math", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4251, "total_accepted": 1100000.0, "total_submissions": 2600000.0, "testcase_example": "'[1,2,3]'", "body": "You are given a large integer represented as an integer array digits, where each digits[i] is the i^th digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading 0's.\nIncrement the large integer by one and return the resulting array of digits.", "examples": [{"full_text": "Example 1:\nInput: digits = [1,2,3]\nOutput: [1,2,4]\nExplanation: The array represents the integer 123.\nIncrementing by one gives 123 + 1 = 124.\nThus, the result should be [1,2,4].", "input": "Input: digits = [1,2,3]", "output": "Output: [1,2,4]", "explanation": "Explanation: The array represents the integer 123.\nIncrementing by one gives 123 + 1 = 124.\nThus, the result should be [1,2,4]."}, {"full_text": "Example 2:\nInput: digits = [4,3,2,1]\nOutput: [4,3,2,2]\nExplanation: The array represents the integer 4321.\nIncrementing by one gives 4321 + 1 = 4322.\nThus, the result should be [4,3,2,2].", "input": "Input: digits = [4,3,2,1]", "output": "Output: [4,3,2,2]", "explanation": "Explanation: The array represents the integer 4321.\nIncrementing by one gives 4321 + 1 = 4322.\nThus, the result should be [4,3,2,2]."}, {"full_text": "Example 3:\nInput: digits = [9]\nOutput: [1,0]\nExplanation: The array represents the integer 9.\nIncrementing by one gives 9 + 1 = 10.\nThus, the result should be [1,0].", "input": "Input: digits = [9]", "output": "Output: [1,0]", "explanation": "Explanation: The array represents the integer 9.\nIncrementing by one gives 9 + 1 = 10.\nThus, the result should be [1,0]."}], "constraints": "Constraints:\n1 <= digits.length <= 100\n0 <= digits[i] <= 9\ndigits does not contain any leading 0's.", "notes": ""}, "58": {"label": "Easy", "title": "Length of Last Word", "tags": "algorithms,string", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.36560000000000004, "total_accepted": 673300.0, "total_submissions": 1800000.0, "testcase_example": "'\"Hello World\"'", "body": "Given a string s consisting\nof some words separated by some number of spaces, return the length of the last word in the string.\nA word is a maximal substring consisting of non-space characters only.", "examples": [{"full_text": "Example 1:\nInput: s = \"Hello World\"\nOutput: 5\nExplanation: The last word is \"World\" with length 5.", "input": "Input: s = \"Hello World\"", "output": "Output: 5", "explanation": "Explanation: The last word is \"World\" with length 5."}, {"full_text": "Example 2:\nInput: s = \" fly me to the moon \"\nOutput: 4\nExplanation: The last word is \"moon\" with length 4.", "input": "Input: s = \" fly me to the moon \"", "output": "Output: 4", "explanation": "Explanation: The last word is \"moon\" with length 4."}, {"full_text": "Example 3:\nInput: s = \"luffy is still joyboy\"\nOutput: 6\nExplanation: The last word is \"joyboy\" with length 6.", "input": "Input: s = \"luffy is still joyboy\"", "output": "Output: 6", "explanation": "Explanation: The last word is \"joyboy\" with length 6."}], "constraints": "Constraints:\n1 <= s.length <= 10^4\ns consists of only English letters and spaces ' '.\nThere will be at least one word in s.", "notes": ""}, "53": {"label": "Easy", "title": "Maximum Subarray", "tags": "algorithms,bloomberg,linkedin,microsoft,array,divide-and-conquer,dynamic-programming", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4941, "total_accepted": 2100000.0, "total_submissions": 4200000.0, "testcase_example": "'[-2,1,-3,4,-1,2,1,-5,4]'", "body": "Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.\nA subarray is a contiguous part of an array.", "examples": [{"full_text": "Example 1:\nInput: nums = [-2,1,-3,4,-1,2,1,-5,4]\nOutput: 6\nExplanation: [4,-1,2,1] has the largest sum = 6.", "input": "Input: nums = [-2,1,-3,4,-1,2,1,-5,4]", "output": "Output: 6", "explanation": "Explanation: [4,-1,2,1] has the largest sum = 6."}, {"full_text": "Example 2:\nInput: nums = [1]\nOutput: 1", "input": "Input: nums = [1]", "output": "Output: 1", "explanation": ""}, {"full_text": "Example 3:\nInput: nums = [5,4,-1,7,8]\nOutput: 23", "input": "Input: nums = [5,4,-1,7,8]", "output": "Output: 23", "explanation": ""}], "constraints": "Constraints:\n1 <= nums.length <= 10^5\n-10^4 <= nums[i] <= 10^4\nFollow up: If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.", "notes": ""}, "35": {"label": "Easy", "title": "Search Insert Position", "tags": "algorithms,array,binary-search", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4249, "total_accepted": 1300000.0, "total_submissions": 3000000.0, "testcase_example": "'[1,3,5,6]\\n5'", "body": "Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.\nYou must\nwrite an algorithm with\nO(log n) runtime complexity.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,3,5,6], target = 5\nOutput: 2", "input": "Input: nums = [1,3,5,6], target = 5", "output": "Output: 2", "explanation": ""}, {"full_text": "Example 2:\nInput: nums = [1,3,5,6], target = 2\nOutput: 1", "input": "Input: nums = [1,3,5,6], target = 2", "output": "Output: 1", "explanation": ""}, {"full_text": "Example 3:\nInput: nums = [1,3,5,6], target = 7\nOutput: 4", "input": "Input: nums = [1,3,5,6], target = 7", "output": "Output: 4", "explanation": ""}], "constraints": "Constraints:\n1 <= nums.length <= 10^4\n-10^4 <= nums[i] <= 10^4\nnums contains distinct values sorted in ascending order.\n-10^4 <= target <= 10^4", "notes": ""}, "28": {"label": "Easy", "title": "Implement strStr()", "tags": "algorithms,apple,facebook,microsoft,pocketgems,string,two-pointers", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3565, "total_accepted": 1100000.0, "total_submissions": 3200000.0, "testcase_example": "'\"hello\"\\n\"ll\"'", "body": "Implement strStr().\nReturn the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.\nClarification:\nWhat should we return when needle is an empty string? This is a great question to ask during an interview.\nFor the purpose of this problem, we will return 0 when needle is an empty string. This is consistent to C's\nstrstr() and Java's\nindexOf().", "examples": [{"full_text": "Example 1:\nInput: haystack = \"hello\", needle = \"ll\"\nOutput: 2", "input": "Input: haystack = \"hello\", needle = \"ll\"", "output": "Output: 2", "explanation": ""}, {"full_text": "Example 2:\nInput: haystack = \"aaaaa\", needle = \"bba\"\nOutput: -1", "input": "Input: haystack = \"aaaaa\", needle = \"bba\"", "output": "Output: -1", "explanation": ""}, {"full_text": "Example 3:\nInput: haystack = \"\", needle = \"\"\nOutput: 0", "input": "Input: haystack = \"\", needle = \"\"", "output": "Output: 0", "explanation": ""}], "constraints": "Constraints:\n0 <= haystack.length, needle.length <= 5 * 10^4\nhaystack and\nneedle consist of only lower-case English characters.", "notes": ""}, "27": {"label": "Easy", "title": "Remove Element", "tags": "algorithms,array,two-pointers", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5088, "total_accepted": 1200000.0, "total_submissions": 2300000.0, "testcase_example": "'[3,2,2,3]\\n3'", "body": "Given an integer array nums and an integer val, remove all occurrences of val in nums in-place. The relative order of the elements may be changed.\nSince it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. More formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result. It does not matter what you leave beyond the first k elements.\nReturn k after placing the final result in the first k slots of nums.\nDo not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory.\nCustom Judge:\nThe judge will test your solution with the following code:\nint[] nums = [...]; // Input array\nint val = ...; // Value to remove\nint[] expectedNums = [...]; // The expected answer with correct length.\n// It is sorted with no values equaling val.\nint k = removeElement(nums, val); // Calls your implementation\nassert k == expectedNums.length;\nsort(nums, 0, k); // Sort the first k elements of nums\nfor (int i = 0; i < actualLength; i++) {\nassert nums[i] == expectedNums[i];\n}\nIf all assertions pass, then your solution will be accepted.", "examples": [{"full_text": "Example 1:\nInput: nums = [3,2,2,3], val = 3\nOutput: 2, nums = [2,2,_,_]\nExplanation: Your function should return k = 2, with the first two elements of nums being 2.\nIt does not matter what you leave beyond the returned k (hence they are underscores).", "input": "Input: nums = [3,2,2,3], val = 3", "output": "Output: 2, nums = [2,2,_,_]", "explanation": "Explanation: Your function should return k = 2, with the first two elements of nums being 2.\nIt does not matter what you leave beyond the returned k (hence they are underscores)."}, {"full_text": "Example 2:\nInput: nums = [0,1,2,2,3,0,4,2], val = 2\nOutput: 5, nums = [0,1,4,0,3,_,_,_]\nExplanation: Your function should return k = 5, with the first five elements of nums containing 0, 0, 1, 3, and 4.\nNote that the five elements can be returned in any order.\nIt does not matter what you leave beyond the returned k (hence they are underscores).", "input": "Input: nums = [0,1,2,2,3,0,4,2], val = 2", "output": "Output: 5, nums = [0,1,4,0,3,_,_,_]", "explanation": "Explanation: Your function should return k = 5, with the first five elements of nums containing 0, 0, 1, 3, and 4.\nNote that the five elements can be returned in any order.\nIt does not matter what you leave beyond the returned k (hence they are underscores)."}], "constraints": "Constraints:\n0 <= nums.length <= 100\n0 <= nums[i] <= 50\n0 <= val <= 100", "notes": ""}, "26": {"label": "Easy", "title": "Remove Duplicates from Sorted Array", "tags": "algorithms,bloomberg,facebook,microsoft,array,two-pointers", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4825, "total_accepted": 2000000.0, "total_submissions": 4000000.0, "testcase_example": "'[1,1,2]'", "body": "Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same.\nSince it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. More formally, if there are k elements after removing the duplicates, then the first k elements of nums\nshould hold the final result. It does not matter what you leave beyond the first\nk\nelements.\nReturn k after placing the final result in the first k slots of nums.\nDo not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory.\nCustom Judge:\nThe judge will test your solution with the following code:\nint[] nums = [...]; // Input array\nint[] expectedNums = [...]; // The expected answer with correct length\nint k = removeDuplicates(nums); // Calls your implementation\nassert k == expectedNums.length;\nfor (int i = 0; i < k; i++) {\nassert nums[i] == expectedNums[i];\n}\nIf all assertions pass, then your solution will be accepted.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,1,2]\nOutput: 2, nums = [1,2,_]\nExplanation: Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores).", "input": "Input: nums = [1,1,2]", "output": "Output: 2, nums = [1,2,_]", "explanation": "Explanation: Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores)."}, {"full_text": "Example 2:\nInput: nums = [0,0,1,1,1,2,2,3,3,4]\nOutput: 5, nums = [0,1,2,3,4,_,_,_,_,_]\nExplanation: Your function should return k = 5, with the first five elements of nums being 0, 1, 2, 3, and 4 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores).", "input": "Input: nums = [0,0,1,1,1,2,2,3,3,4]", "output": "Output: 5, nums = [0,1,2,3,4,_,_,_,_,_]", "explanation": "Explanation: Your function should return k = 5, with the first five elements of nums being 0, 1, 2, 3, and 4 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores)."}], "constraints": "Constraints:\n1 <= nums.length <= 3 * 10^4\n-100 <= nums[i] <= 100\nnums is sorted in non-decreasing order.", "notes": ""}, "21": {"label": "Easy", "title": "Merge Two Sorted Lists", "tags": "algorithms,amazon,apple,linkedin,microsoft,linked-list", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5935, "total_accepted": 2000000.0, "total_submissions": 3300000.0, "testcase_example": "'[1,2,4]\\n[1,3,4]'", "body": "You are given the heads of two sorted linked lists list1 and list2.\nMerge the two lists in a one sorted list. The list should be made by splicing together the nodes of the first two lists.\nReturn the head of the merged linked list.", "examples": [{"full_text": "Example 1:\nInput: list1 = [1,2,4], list2 = [1,3,4]\nOutput: [1,1,2,3,4,4]", "input": "Input: list1 = [1,2,4], list2 = [1,3,4]", "output": "Output: [1,1,2,3,4,4]", "explanation": ""}, {"full_text": "Example 2:\nInput: list1 = [], list2 = []\nOutput: []", "input": "Input: list1 = [], list2 = []", "output": "Output: []", "explanation": ""}, {"full_text": "Example 3:\nInput: list1 = [], list2 = [0]\nOutput: [0]", "input": "Input: list1 = [], list2 = [0]", "output": "Output: [0]", "explanation": ""}], "constraints": "Constraints:\nThe number of nodes in both lists is in the range [0, 50].\n-100 <= Node.val <= 100\nBoth list1 and list2 are sorted in non-decreasing order.", "notes": ""}, "20": {"label": "Easy", "title": "Valid Parentheses", "tags": "algorithms,airbnb,amazon,bloomberg,facebook,google,microsoft,twitter,zenefits,stack,string", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.40619999999999995, "total_accepted": 2000000.0, "total_submissions": 4900000.0, "testcase_example": "'\"()\"'", "body": "Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\nAn input string is valid if:\nOpen brackets must be closed by the same type of brackets.\nOpen brackets must be closed in the correct order.", "examples": [{"full_text": "Example 1:\nInput: s = \"()\"\nOutput: true", "input": "Input: s = \"()\"", "output": "Output: true", "explanation": ""}, {"full_text": "Example 2:\nInput: s = \"()[]{}\"\nOutput: true", "input": "Input: s = \"()[]{}\"", "output": "Output: true", "explanation": ""}, {"full_text": "Example 3:\nInput: s = \"(]\"\nOutput: false", "input": "Input: s = \"(]\"", "output": "Output: false", "explanation": ""}], "constraints": "Constraints:\n1 <= s.length <= 10^4\ns consists of parentheses only '()[]{}'.", "notes": ""}, "14": {"label": "Easy", "title": "Longest Common Prefix", "tags": "algorithms,yelp,string", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.389, "total_accepted": 1400000.0, "total_submissions": 3700000.0, "testcase_example": "'[\"flower\",\"flow\",\"flight\"]'", "body": "Write a function to find the longest common prefix string amongst an array of strings.\nIf there is no common prefix, return an empty string \"\".", "examples": [{"full_text": "Example 1:\nInput: strs = [\"flower\",\"flow\",\"flight\"]\nOutput: \"fl\"", "input": "Input: strs = [\"flower\",\"flow\",\"flight\"]", "output": "Output: \"fl\"", "explanation": ""}, {"full_text": "Example 2:\nInput: strs = [\"dog\",\"racecar\",\"car\"]\nOutput: \"\"\nExplanation: There is no common prefix among the input strings.", "input": "Input: strs = [\"dog\",\"racecar\",\"car\"]", "output": "Output: \"\"", "explanation": "Explanation: There is no common prefix among the input strings."}], "constraints": "Constraints:\n1 <= strs.length <= 200\n0 <= strs[i].length <= 200\nstrs[i] consists of only lower-case English letters.", "notes": ""}, "13": {"label": "Easy", "title": "Roman to Integer", "tags": "algorithms,bloomberg,facebook,microsoft,uber,yahoo,math,string", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5784, "total_accepted": 1400000.0, "total_submissions": 2400000.0, "testcase_example": "'\"III\"'", "body": "Roman numerals are represented by seven different symbols:\nI, V, X, L, C, D and M.\nSymbol Value\nI 1\nV 5\nX 10\nL 50\nC 100\nD 500\nM 1000\nFor example,\n2 is written as II\nin Roman numeral, just two one's added together. 12 is written as\nXII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.\nRoman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:\nI can be placed before V (5) and X (10) to make 4 and 9.\nX can be placed before L (50) and C (100) to make 40 and 90.\nC can be placed before D (500) and M (1000) to make 400 and 900.\nGiven a roman numeral, convert it to an integer.", "examples": [{"full_text": "Example 1:\nInput: s = \"III\"\nOutput: 3\nExplanation: III = 3.", "input": "Input: s = \"III\"", "output": "Output: 3", "explanation": "Explanation: III = 3."}, {"full_text": "Example 2:\nInput: s = \"LVIII\"\nOutput: 58\nExplanation: L = 50, V= 5, III = 3.", "input": "Input: s = \"LVIII\"", "output": "Output: 58", "explanation": "Explanation: L = 50, V= 5, III = 3."}, {"full_text": "Example 3:\nInput: s = \"MCMXCIV\"\nOutput: 1994\nExplanation: M = 1000, CM = 900, XC = 90 and IV = 4.", "input": "Input: s = \"MCMXCIV\"", "output": "Output: 1994", "explanation": "Explanation: M = 1000, CM = 900, XC = 90 and IV = 4."}], "constraints": "Constraints:\n1 <= s.length <= 15\ns contains only\nthe characters ('I', 'V', 'X', 'L', 'C', 'D', 'M').\nIt is guaranteed\nthat s is a valid roman numeral in the range [1, 3999].", "notes": ""}, "9": {"label": "Easy", "title": "Palindrome Number", "tags": "algorithms,math", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5213, "total_accepted": 1800000.0, "total_submissions": 3500000.0, "testcase_example": "'121'", "body": "Given an integer x, return true if x is palindrome integer.\nAn integer is a palindrome when it reads the same backward as forward.\nFor example, 121 is a palindrome while 123 is not.", "examples": [{"full_text": "Example 1:\nInput: x = 121\nOutput: true\nExplanation: 121 reads as 121 from left to right and from right to left.", "input": "Input: x = 121", "output": "Output: true", "explanation": "Explanation: 121 reads as 121 from left to right and from right to left."}, {"full_text": "Example 2:\nInput: x = -121\nOutput: false\nExplanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.", "input": "Input: x = -121", "output": "Output: false", "explanation": "Explanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome."}, {"full_text": "Example 3:\nInput: x = 10\nOutput: false\nExplanation: Reads 01 from right to left. Therefore it is not a palindrome.", "input": "Input: x = 10", "output": "Output: false", "explanation": "Explanation: Reads 01 from right to left. Therefore it is not a palindrome."}], "constraints": "Constraints:\n-2^31\n<= x <= 2^31\n- 1\nFollow up: Could you solve it without converting the integer to a string?", "notes": ""}, "1": {"label": "Easy", "title": "Two Sum", "tags": "algorithms,adobe,airbnb,amazon,apple,bloomberg,dropbox,facebook,linkedin,microsoft,uber,yahoo,yelp,array,hash-table", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4826, "total_accepted": 6000000.0, "total_submissions": 12400000.0, "testcase_example": "'[2,7,11,15]\\n9'", "body": "Given an array of integers nums\nand an integer target, return indices of the two numbers such that they add up to target.\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\nYou can return the answer in any order.", "examples": [{"full_text": "Example 1:\nInput: nums = [2,7,11,15], target = 9\nOutput: [0,1]\nExplanation: Because nums[0] + nums[1] == 9, we return [0, 1].", "input": "Input: nums = [2,7,11,15], target = 9", "output": "Output: [0,1]", "explanation": "Explanation: Because nums[0] + nums[1] == 9, we return [0, 1]."}, {"full_text": "Example 2:\nInput: nums = [3,2,4], target = 6\nOutput: [1,2]", "input": "Input: nums = [3,2,4], target = 6", "output": "Output: [1,2]", "explanation": ""}, {"full_text": "Example 3:\nInput: nums = [3,3], target = 6\nOutput: [0,1]", "input": "Input: nums = [3,3], target = 6", "output": "Output: [0,1]", "explanation": ""}], "constraints": "Constraints:\n2 <= nums.length <= 10^4\n-10^9 <= nums[i] <= 10^9\n-10^9 <= target <= 10^9\nOnly one valid answer exists.", "notes": "Follow-up:\nCan you come up with an algorithm that is less than\nO(n^2)\ntime complexity?"}, "2171": {"label": "Medium", "title": "Removing Minimum Number of Magic Beans", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4031, "total_accepted": 10900.0, "total_submissions": 27200.0, "testcase_example": "'[4,1,6,5]'", "body": "You are given an array of positive integers beans, where each integer represents the number of magic beans found in a particular magic bag.\nRemove any number of beans (possibly none) from each bag such that the number of beans in each remaining non-empty bag (still containing at least one bean) is equal. Once a bean has been removed from a bag, you are not allowed to return it to any of the bags.\nReturn the minimum number of magic beans that you have to remove.", "examples": [{"full_text": "Example 1:\nInput: beans = [4,1,6,5]\nOutput: 4\nExplanation:\n- We remove 1 bean from the bag with only 1 bean.\nThis results in the remaining bags: [4,0,6,5]\n- Then we remove 2 beans from the bag with 6 beans.\nThis results in the remaining bags: [4,0,4,5]\n- Then we remove 1 bean from the bag with 5 beans.\nThis results in the remaining bags: [4,0,4,4]\nWe removed a total of 1 + 2 + 1 = 4 beans to make the remaining non-empty bags have an equal number of beans.\nThere are no other solutions that remove 4 beans or fewer.", "input": "Input: beans = [4,1,6,5]", "output": "Output: 4", "explanation": "Explanation:\n- We remove 1 bean from the bag with only 1 bean.\nThis results in the remaining bags: [4,0,6,5]\n- Then we remove 2 beans from the bag with 6 beans.\nThis results in the remaining bags: [4,0,4,5]\n- Then we remove 1 bean from the bag with 5 beans.\nThis results in the remaining bags: [4,0,4,4]\nWe removed a total of 1 + 2 + 1 = 4 beans to make the remaining non-empty bags have an equal number of beans.\nThere are no other solutions that remove 4 beans or fewer."}, {"full_text": "Example 2:\nInput: beans = [2,10,3,2]\nOutput: 7\nExplanation:\n- We remove 2 beans from one of the bags with 2 beans.\nThis results in the remaining bags: [0,10,3,2]\n- Then we remove 2 beans from the other bag with 2 beans.\nThis results in the remaining bags: [0,10,3,0]\n- Then we remove 3 beans from the bag with 3 beans.\nThis results in the remaining bags: [0,10,0,0]\nWe removed a total of 2 + 2 + 3 = 7 beans to make the remaining non-empty bags have an equal number of beans.\nThere are no other solutions that removes 7 beans or fewer.", "input": "Input: beans = [2,10,3,2]", "output": "Output: 7", "explanation": "Explanation:\n- We remove 2 beans from one of the bags with 2 beans.\nThis results in the remaining bags: [0,10,3,2]\n- Then we remove 2 beans from the other bag with 2 beans.\nThis results in the remaining bags: [0,10,3,0]\n- Then we remove 3 beans from the bag with 3 beans.\nThis results in the remaining bags: [0,10,0,0]\nWe removed a total of 2 + 2 + 3 = 7 beans to make the remaining non-empty bags have an equal number of beans.\nThere are no other solutions that removes 7 beans or fewer."}], "constraints": "Constraints:\n1 <= beans.length <= 10^5\n1 <= beans[i] <= 10^5", "notes": ""}, "2170": {"label": "Medium", "title": "Minimum Operations to Make the Array Alternating", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.32789999999999997, "total_accepted": 12500.0, "total_submissions": 38100.0, "testcase_example": "'[3,1,3,2,4,3]'", "body": "You are given a 0-indexed array nums consisting of n positive integers.\nThe array nums is called alternating if:\nnums[i - 2] == nums[i], where 2 <= i <= n - 1.\nnums[i - 1] != nums[i], where 1 <= i <= n - 1.\nIn one operation, you can choose an index i and change nums[i] into any positive integer.\nReturn the minimum number of operations required to make the array alternating.", "examples": [{"full_text": "Example 1:\nInput: nums = [3,1,3,2,4,3]\nOutput: 3\nExplanation:\nOne way to make the array alternating is by converting it to [3,1,3,1,3,1].\nThe number of operations required in this case is 3.\nIt can be proven that it is not possible to make the array alternating in less than 3 operations.", "input": "Input: nums = [3,1,3,2,4,3]", "output": "Output: 3", "explanation": "Explanation:\nOne way to make the array alternating is by converting it to [3,1,3,1,3,1].\nThe number of operations required in this case is 3.\nIt can be proven that it is not possible to make the array alternating in less than 3 operations."}, {"full_text": "Example 2:\nInput: nums = [1,2,2,2,2]\nOutput: 2\nExplanation:\nOne way to make the array alternating is by converting it to [1,2,1,2,1].\nThe number of operations required in this case is 2.\nNote that the array cannot be converted to [2,2,2,2,2] because in this case nums[0] == nums[1] which violates the conditions of an alternating array.", "input": "Input: nums = [1,2,2,2,2]", "output": "Output: 2", "explanation": "Explanation:\nOne way to make the array alternating is by converting it to [1,2,1,2,1].\nThe number of operations required in this case is 2.\nNote that the array cannot be converted to [2,2,2,2,2] because in this case nums[0] == nums[1] which violates the conditions of an alternating array."}], "constraints": "Constraints:\n1 <= nums.length <= 10^5\n1 <= nums[i] <= 10^5", "notes": ""}, "2166": {"label": "Medium", "title": "Design Bitset", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.284, "total_accepted": 11400.0, "total_submissions": 40000.0, "testcase_example": "'[\"Bitset\",\"fix\",\"fix\",\"flip\",\"all\",\"unfix\",\"flip\",\"one\",\"unfix\",\"count\",\"toString\"]\\n' +\n  '[[5],[3],[1],[],[],[0],[],[],[0],[],[]]'", "body": "A Bitset is a data structure that compactly stores bits.\nImplement the Bitset class:\nBitset(int size) Initializes the Bitset with size bits, all of which are 0.\nvoid fix(int idx) Updates the value of the bit at the index idx to 1. If the value was already 1, no change occurs.\nvoid unfix(int idx) Updates the value of the bit at the index idx to 0. If the value was already 0, no change occurs.\nvoid flip() Flips the values of each bit in the Bitset. In other words, all bits with value 0 will now have value 1 and vice versa.\nboolean all() Checks if the value of each bit in the Bitset is 1. Returns true if it satisfies the condition, false otherwise.\nboolean one() Checks if there is at least one bit in the Bitset with value 1. Returns true if it satisfies the condition, false otherwise.\nint count() Returns the total number of bits in the Bitset which have value 1.\nString toString() Returns the current composition of the Bitset. Note that in the resultant string, the character at the i^th index should coincide with the value at the i^th bit of the Bitset.", "examples": [{"full_text": "Example 1:\nInput\n[\"Bitset\", \"fix\", \"fix\", \"flip\", \"all\", \"unfix\", \"flip\", \"one\", \"unfix\", \"count\", \"toString\"]\n[[5], [3], [1], [], [], [0], [], [], [0], [], []]\nOutput\n[null, null, null, null, false, null, null, true, null, 2, \"01010\"]\nExplanation\nBitset bs = new Bitset(5); // bitset = \"00000\".\nbs.fix(3); // the value at idx = 3 is updated to 1, so bitset = \"00010\".\nbs.fix(1); // the value at idx = 1 is updated to 1, so bitset = \"01010\".\nbs.flip(); // the value of each bit is flipped, so bitset = \"10101\".\nbs.all(); // return False, as not all values of the bitset are 1.\nbs.unfix(0); // the value at idx = 0 is updated to 0, so bitset = \"00101\".\nbs.flip(); // the value of each bit is flipped, so bitset = \"11010\".\nbs.one(); // return True, as there is at least 1 index with value 1.\nbs.unfix(0); // the value at idx = 0 is updated to 0, so bitset = \"01010\".\nbs.count(); // return 2, as there are 2 bits with value 1.\nbs.toString(); // return \"01010\", which is the composition of bitset.", "input": "Input\n[\"Bitset\", \"fix\", \"fix\", \"flip\", \"all\", \"unfix\", \"flip\", \"one\", \"unfix\", \"count\", \"toString\"]\n[[5], [3], [1], [], [], [0], [], [], [0], [], []]", "output": "Output\n[null, null, null, null, false, null, null, true, null, 2, \"01010\"]", "explanation": "Explanation\nBitset bs = new Bitset(5); // bitset = \"00000\".\nbs.fix(3); // the value at idx = 3 is updated to 1, so bitset = \"00010\".\nbs.fix(1); // the value at idx = 1 is updated to 1, so bitset = \"01010\".\nbs.flip(); // the value of each bit is flipped, so bitset = \"10101\".\nbs.all(); // return False, as not all values of the bitset are 1.\nbs.unfix(0); // the value at idx = 0 is updated to 0, so bitset = \"00101\".\nbs.flip(); // the value of each bit is flipped, so bitset = \"11010\".\nbs.one(); // return True, as there is at least 1 index with value 1.\nbs.unfix(0); // the value at idx = 0 is updated to 0, so bitset = \"01010\".\nbs.count(); // return 2, as there are 2 bits with value 1.\nbs.toString(); // return \"01010\", which is the composition of bitset."}], "constraints": "Constraints:\n1 <= size <= 10^5\n0 <= idx <= size - 1\nAt most 10^5 calls will be made in total to fix, unfix, flip, all, one, count, and toString.\nAt least one call will be made to all, one, count, or toString.\nAt most 5 calls will be made to toString.", "notes": ""}, "2165": {"label": "Medium", "title": "Smallest Value of the Rearranged Number", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5029, "total_accepted": 17000.0, "total_submissions": 33900.0, "testcase_example": "'310'", "body": "You are given an integer num. Rearrange the digits of num such that its value is minimized and it does not contain any leading zeros.\nReturn the rearranged number with minimal value.\nNote that the sign of the number does not change after rearranging the digits.", "examples": [{"full_text": "Example 1:\nInput: num = 310\nOutput: 103\nExplanation: The possible arrangements for the digits of 310 are 013, 031, 103, 130, 301, 310.\nThe arrangement with the smallest value that does not contain any leading zeros is 103.", "input": "Input: num = 310", "output": "Output: 103", "explanation": "Explanation: The possible arrangements for the digits of 310 are 013, 031, 103, 130, 301, 310.\nThe arrangement with the smallest value that does not contain any leading zeros is 103."}, {"full_text": "Example 2:\nInput: num = -7605\nOutput: -7650\nExplanation: Some possible arrangements for the digits of -7605 are -7650, -6705, -5076, -0567.\nThe arrangement with the smallest value that does not contain any leading zeros is -7650.", "input": "Input: num = -7605", "output": "Output: -7650", "explanation": "Explanation: Some possible arrangements for the digits of -7605 are -7650, -6705, -5076, -0567.\nThe arrangement with the smallest value that does not contain any leading zeros is -7650."}], "constraints": "Constraints:\n-10^15 <= num <= 10^15", "notes": ""}, "2162": {"label": "Medium", "title": "Minimum Cost to Set Cooking Time", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3267, "total_accepted": 6000.0, "total_submissions": 18300.0, "testcase_example": "'1\\n2\\n1\\n600'", "body": "A generic microwave supports cooking times for:\nat least 1 second.\nat most 99 minutes and 99 seconds.\nTo set the cooking time, you push at most four digits. The microwave normalizes what you push as four digits by prepending zeroes. It interprets the first two digits as the minutes and the last two digits as the seconds. It then adds them up as the cooking time. For example,\nYou push 9 5 4 (three digits). It is normalized as 0954 and interpreted as 9 minutes and 54 seconds.\nYou push 0 0 0 8 (four digits). It is interpreted as 0 minutes and 8 seconds.\nYou push 8 0 9 0. It is interpreted as 80 minutes and 90 seconds.\nYou push 8 1 3 0. It is interpreted as 81 minutes and 30 seconds.\nYou are given integers startAt, moveCost, pushCost, and targetSeconds. Initially, your finger is on the digit startAt. Moving the finger above any specific digit costs moveCost units of fatigue. Pushing the digit below the finger once costs pushCost units of fatigue.\nThere can be multiple ways to set the microwave to cook for targetSeconds seconds but you are interested in the way with the minimum cost.\nReturn the minimum cost to set targetSeconds seconds of cooking time.\nRemember that one minute consists of 60 seconds.", "examples": [{"full_text": "Example 1:\nInput: startAt = 1, moveCost = 2, pushCost = 1, targetSeconds = 600\nOutput: 6\nExplanation: The following are the possible ways to set the cooking time.\n- 1 0 0 0, interpreted as 10 minutes and 0 seconds.\nThe finger is already on digit 1, pushes 1 (with cost 1), moves to 0 (with cost 2), pushes 0 (with cost 1), pushes 0 (with cost 1), and pushes 0 (with cost 1).\nThe cost is: 1 + 2 + 1 + 1 + 1 = 6. This is the minimum cost.\n- 0 9 6 0, interpreted as 9 minutes and 60 seconds. That is also 600 seconds.\nThe finger moves to 0 (with cost 2), pushes 0 (with cost 1), moves to 9 (with cost 2), pushes 9 (with cost 1), moves to 6 (with cost 2), pushes 6 (with cost 1), moves to 0 (with cost 2), and pushes 0 (with cost 1).\nThe cost is: 2 + 1 + 2 + 1 + 2 + 1 + 2 + 1 = 12.\n- 9 6 0, normalized as 0960 and interpreted as 9 minutes and 60 seconds.\nThe finger moves to 9 (with cost 2), pushes 9 (with cost 1), moves to 6 (with cost 2), pushes 6 (with cost 1), moves to 0 (with cost 2), and pushes 0 (with cost 1).\nThe cost is: 2 + 1 + 2 + 1 + 2 + 1 = 9.", "input": "Input: startAt = 1, moveCost = 2, pushCost = 1, targetSeconds = 600", "output": "Output: 6", "explanation": "Explanation: The following are the possible ways to set the cooking time.\n- 1 0 0 0, interpreted as 10 minutes and 0 seconds.\nThe finger is already on digit 1, pushes 1 (with cost 1), moves to 0 (with cost 2), pushes 0 (with cost 1), pushes 0 (with cost 1), and pushes 0 (with cost 1).\nThe cost is: 1 + 2 + 1 + 1 + 1 = 6. This is the minimum cost.\n- 0 9 6 0, interpreted as 9 minutes and 60 seconds. That is also 600 seconds.\nThe finger moves to 0 (with cost 2), pushes 0 (with cost 1), moves to 9 (with cost 2), pushes 9 (with cost 1), moves to 6 (with cost 2), pushes 6 (with cost 1), moves to 0 (with cost 2), and pushes 0 (with cost 1).\nThe cost is: 2 + 1 + 2 + 1 + 2 + 1 + 2 + 1 = 12.\n- 9 6 0, normalized as 0960 and interpreted as 9 minutes and 60 seconds.\nThe finger moves to 9 (with cost 2), pushes 9 (with cost 1), moves to 6 (with cost 2), pushes 6 (with cost 1), moves to 0 (with cost 2), and pushes 0 (with cost 1).\nThe cost is: 2 + 1 + 2 + 1 + 2 + 1 = 9."}, {"full_text": "Example 2:\nInput: startAt = 0, moveCost = 1, pushCost = 2, targetSeconds = 76\nOutput: 6\nExplanation: The optimal way is to push two digits: 7 6, interpreted as 76 seconds.\nThe finger moves to 7 (with cost 1), pushes 7 (with cost 2), moves to 6 (with cost 1), and pushes 6 (with cost 2). The total cost is: 1 + 2 + 1 + 2 = 6\nNote other possible ways are 0076, 076, 0116, and 116, but none of them produces the minimum cost.", "input": "Input: startAt = 0, moveCost = 1, pushCost = 2, targetSeconds = 76", "output": "Output: 6", "explanation": "Explanation: The optimal way is to push two digits: 7 6, interpreted as 76 seconds.\nThe finger moves to 7 (with cost 1), pushes 7 (with cost 2), moves to 6 (with cost 1), and pushes 6 (with cost 2). The total cost is: 1 + 2 + 1 + 2 = 6\nNote other possible ways are 0076, 076, 0116, and 116, but none of them produces the minimum cost."}], "constraints": "Constraints:\n0 <= startAt <= 9\n1 <= moveCost, pushCost <= 10^5\n1 <= targetSeconds <= 6039", "notes": ""}, "2161": {"label": "Medium", "title": "Partition Array According to Given Pivot", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.8097, "total_accepted": 13800.0, "total_submissions": 17000.0, "testcase_example": "'[9,12,5,10,14,3,10]\\n10'", "body": "You are given a 0-indexed integer array nums and an integer pivot. Rearrange nums such that the following conditions are satisfied:\nEvery element less than pivot appears before every element greater than pivot.\nEvery element equal to pivot appears in between the elements less than and greater than pivot.\nThe relative order of the elements less than pivot and the elements greater than pivot is maintained.\n\nMore formally, consider every pi, pj where pi is the new position of the i^th element and pj is the new position of the j^th element. For elements less than pivot, if i < j and nums[i] < pivot and nums[j] < pivot, then pi < pj. Similarly for elements greater than pivot, if i < j and nums[i] > pivot and nums[j] > pivot, then pi < pj.\n\n\nReturn nums after the rearrangement.", "examples": [{"full_text": "Example 1:\nInput: nums = [9,12,5,10,14,3,10], pivot = 10\nOutput: [9,5,3,10,10,12,14]\nExplanation:\nThe elements 9, 5, and 3 are less than the pivot so they are on the left side of the array.\nThe elements 12 and 14 are greater than the pivot so they are on the right side of the array.\nThe relative ordering of the elements less than and greater than pivot is also maintained. [9, 5, 3] and [12, 14] are the respective orderings.", "input": "Input: nums = [9,12,5,10,14,3,10], pivot = 10", "output": "Output: [9,5,3,10,10,12,14]", "explanation": "Explanation:\nThe elements 9, 5, and 3 are less than the pivot so they are on the left side of the array.\nThe elements 12 and 14 are greater than the pivot so they are on the right side of the array.\nThe relative ordering of the elements less than and greater than pivot is also maintained. [9, 5, 3] and [12, 14] are the respective orderings."}, {"full_text": "Example 2:\nInput: nums = [-3,4,3,2], pivot = 2\nOutput: [-3,2,4,3]\nExplanation:\nThe element -3 is less than the pivot so it is on the left side of the array.\nThe elements 4 and 3 are greater than the pivot so they are on the right side of the array.\nThe relative ordering of the elements less than and greater than pivot is also maintained. [-3] and [4, 3] are the respective orderings.", "input": "Input: nums = [-3,4,3,2], pivot = 2", "output": "Output: [-3,2,4,3]", "explanation": "Explanation:\nThe element -3 is less than the pivot so it is on the left side of the array.\nThe elements 4 and 3 are greater than the pivot so they are on the right side of the array.\nThe relative ordering of the elements less than and greater than pivot is also maintained. [-3] and [4, 3] are the respective orderings."}], "constraints": "Constraints:\n1 <= nums.length <= 10^5\n-10^6 <= nums[i] <= 10^6\npivot equals to an element of nums.", "notes": ""}, "2155": {"label": "Medium", "title": "All Divisions With the Highest Score of a Binary Array", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6128, "total_accepted": 17400.0, "total_submissions": 28400.0, "testcase_example": "'[0,0,1,0]'", "body": "You are given a 0-indexed binary array nums of length n. nums can be divided at index i (where 0 <= i <= n) into two arrays (possibly empty) numsleft and numsright:\nnumsleft has all the elements of nums between index 0 and i - 1 (inclusive), while numsright has all the elements of nums between index i and n - 1 (inclusive).\nIf i == 0, numsleft is empty, while numsright has all the elements of nums.\nIf i == n, numsleft has all the elements of nums, while numsright is empty.\nThe division score of an index i is the sum of the number of 0's in numsleft and the number of 1's in numsright.\nReturn all distinct indices that have the highest possible division score. You may return the answer in any order.", "examples": [{"full_text": "Example 1:\nInput: nums = [0,0,1,0]\nOutput: [2,4]\nExplanation: Division at index\n- 0: numsleft is []. numsright is [0,0,1,0]. The score is 0 + 1 = 1.\n- 1: numsleft is [0]. numsright is [0,1,0]. The score is 1 + 1 = 2.\n- 2: numsleft is [0,0]. numsright is [1,0]. The score is 2 + 1 = 3.\n- 3: numsleft is [0,0,1]. numsright is [0]. The score is 2 + 0 = 2.\n- 4: numsleft is [0,0,1,0]. numsright is []. The score is 3 + 0 = 3.\nIndices 2 and 4 both have the highest possible division score 3.\nNote the answer [4,2] would also be accepted.", "input": "Input: nums = [0,0,1,0]", "output": "Output: [2,4]", "explanation": "Explanation: Division at index\n- 0: numsleft is []. numsright is [0,0,1,0]. The score is 0 + 1 = 1.\n- 1: numsleft is [0]. numsright is [0,1,0]. The score is 1 + 1 = 2.\n- 2: numsleft is [0,0]. numsright is [1,0]. The score is 2 + 1 = 3.\n- 3: numsleft is [0,0,1]. numsright is [0]. The score is 2 + 0 = 2.\n- 4: numsleft is [0,0,1,0]. numsright is []. The score is 3 + 0 = 3.\nIndices 2 and 4 both have the highest possible division score 3.\nNote the answer [4,2] would also be accepted."}, {"full_text": "Example 2:\nInput: nums = [0,0,0]\nOutput: [3]\nExplanation: Division at index\n- 0: numsleft is []. numsright is [0,0,0]. The score is 0 + 0 = 0.\n- 1: numsleft is [0]. numsright is [0,0]. The score is 1 + 0 = 1.\n- 2: numsleft is [0,0]. numsright is [0]. The score is 2 + 0 = 2.\n- 3: numsleft is [0,0,0]. numsright is []. The score is 3 + 0 = 3.\nOnly index 3 has the highest possible division score 3.", "input": "Input: nums = [0,0,0]", "output": "Output: [3]", "explanation": "Explanation: Division at index\n- 0: numsleft is []. numsright is [0,0,0]. The score is 0 + 0 = 0.\n- 1: numsleft is [0]. numsright is [0,0]. The score is 1 + 0 = 1.\n- 2: numsleft is [0,0]. numsright is [0]. The score is 2 + 0 = 2.\n- 3: numsleft is [0,0,0]. numsright is []. The score is 3 + 0 = 3.\nOnly index 3 has the highest possible division score 3."}, {"full_text": "Example 3:\nInput: nums = [1,1]\nOutput: [0]\nExplanation: Division at index\n- 0: numsleft is []. numsright is [1,1]. The score is 0 + 2 = 2.\n- 1: numsleft is [1]. numsright is [1]. The score is 0 + 1 = 1.\n- 2: numsleft is [1,1]. numsright is []. The score is 0 + 0 = 0.\nOnly index 0 has the highest possible division score 2.", "input": "Input: nums = [1,1]", "output": "Output: [0]", "explanation": "Explanation: Division at index\n- 0: numsleft is []. numsright is [1,1]. The score is 0 + 2 = 2.\n- 1: numsleft is [1]. numsright is [1]. The score is 0 + 1 = 1.\n- 2: numsleft is [1,1]. numsright is []. The score is 0 + 0 = 0.\nOnly index 0 has the highest possible division score 2."}], "constraints": "Constraints:\nn == nums.length\n1 <= n <= 10^5\nnums[i] is either 0 or 1.", "notes": ""}, "2150": {"label": "Medium", "title": "Find All Lonely Numbers in the Array", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6008, "total_accepted": 19900.0, "total_submissions": 33200.0, "testcase_example": "'[10,6,5,8]'", "body": "You are given an integer array nums. A number x is lonely when it appears only once, and no adjacent numbers (i.e. x + 1 and x - 1) appear in the array.\nReturn all lonely numbers in nums. You may return the answer in any order.", "examples": [{"full_text": "Example 1:\nInput: nums = [10,6,5,8]\nOutput: [10,8]\nExplanation:\n- 10 is a lonely number since it appears exactly once and 9 and 11 does not appear in nums.\n- 8 is a lonely number since it appears exactly once and 7 and 9 does not appear in nums.\n- 5 is not a lonely number since 6 appears in nums and vice versa.\nHence, the lonely numbers in nums are [10, 8].\nNote that [8, 10] may also be returned.", "input": "Input: nums = [10,6,5,8]", "output": "Output: [10,8]", "explanation": "Explanation:\n- 10 is a lonely number since it appears exactly once and 9 and 11 does not appear in nums.\n- 8 is a lonely number since it appears exactly once and 7 and 9 does not appear in nums.\n- 5 is not a lonely number since 6 appears in nums and vice versa.\nHence, the lonely numbers in nums are [10, 8].\nNote that [8, 10] may also be returned."}, {"full_text": "Example 2:\nInput: nums = [1,3,5,3]\nOutput: [1,5]\nExplanation:\n- 1 is a lonely number since it appears exactly once and 0 and 2 does not appear in nums.\n- 5 is a lonely number since it appears exactly once and 4 and 6 does not appear in nums.\n- 3 is not a lonely number since it appears twice.\nHence, the lonely numbers in nums are [1, 5].\nNote that [5, 1] may also be returned.", "input": "Input: nums = [1,3,5,3]", "output": "Output: [1,5]", "explanation": "Explanation:\n- 1 is a lonely number since it appears exactly once and 0 and 2 does not appear in nums.\n- 5 is a lonely number since it appears exactly once and 4 and 6 does not appear in nums.\n- 3 is not a lonely number since it appears twice.\nHence, the lonely numbers in nums are [1, 5].\nNote that [5, 1] may also be returned."}], "constraints": "Constraints:\n1 <= nums.length <= 10^5\n0 <= nums[i] <= 10^6", "notes": ""}, "2149": {"label": "Medium", "title": "Rearrange Array Elements by Sign", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.8209000000000001, "total_accepted": 21700.0, "total_submissions": 26400.0, "testcase_example": "'[3,1,-2,-5,2,-4]'", "body": "You are given a 0-indexed integer array nums of even length consisting of an equal number of positive and negative integers.\nYou should rearrange the elements of nums such that the modified array follows the given conditions:\nEvery consecutive pair of integers have opposite signs.\nFor all integers with the same sign, the order in which they were present in nums is preserved.\nThe rearranged array begins with a positive integer.\nReturn the modified array after rearranging the elements to satisfy the aforementioned conditions.", "examples": [{"full_text": "Example 1:\nInput: nums = [3,1,-2,-5,2,-4]\nOutput: [3,-2,1,-5,2,-4]\nExplanation:\nThe positive integers in nums are [3,1,2]. The negative integers are [-2,-5,-4].\nThe only possible way to rearrange them such that they satisfy all conditions is [3,-2,1,-5,2,-4].\nOther ways such as [1,-2,2,-5,3,-4], [3,1,2,-2,-5,-4], [-2,3,-5,1,-4,2] are incorrect because they do not satisfy one or more conditions.", "input": "Input: nums = [3,1,-2,-5,2,-4]", "output": "Output: [3,-2,1,-5,2,-4]", "explanation": "Explanation:\nThe positive integers in nums are [3,1,2]. The negative integers are [-2,-5,-4].\nThe only possible way to rearrange them such that they satisfy all conditions is [3,-2,1,-5,2,-4].\nOther ways such as [1,-2,2,-5,3,-4], [3,1,2,-2,-5,-4], [-2,3,-5,1,-4,2] are incorrect because they do not satisfy one or more conditions."}, {"full_text": "Example 2:\nInput: nums = [-1,1]\nOutput: [1,-1]\nExplanation:\n1 is the only positive integer and -1 the only negative integer in nums.\nSo nums is rearranged to [1,-1].", "input": "Input: nums = [-1,1]", "output": "Output: [1,-1]", "explanation": "Explanation:\n1 is the only positive integer and -1 the only negative integer in nums.\nSo nums is rearranged to [1,-1]."}], "constraints": "Constraints:\n2 <= nums.length <= 2 * 10^5\nnums.length is even\n1 <= |nums[i]| <= 10^5\nnums consists of equal number of positive and negative integers.", "notes": ""}, "2146": {"label": "Medium", "title": "K Highest Ranked Items Within a Price Range", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.39759999999999995, "total_accepted": 7100.0, "total_submissions": 17900.0, "testcase_example": "'[[1,2,0,1],[1,3,0,1],[0,2,5,1]]\\n[2,5]\\n[0,0]\\n3'", "body": "You are given a 0-indexed 2D integer array grid of size m x n that represents a map of the items in a shop. The integers in the grid represent the following:\n0 represents a wall that you cannot pass through.\n1 represents an empty cell that you can freely move to and from.\nAll other positive integers represent the price of an item in that cell. You may also freely move to and from these item cells.\nIt takes 1 step to travel between adjacent grid cells.\nYou are also given integer arrays pricing and start where pricing = [low, high] and start = [row, col] indicates that you start at the position (row, col) and are interested only in items with a price in the range of [low, high] (inclusive). You are further given an integer k.\nYou are interested in the positions of the k highest-ranked items whose prices are within the given price range. The rank is determined by the first of these criteria that is different:\nDistance, defined as the length of the shortest path from the start (shorter distance has a higher rank).\nPrice (lower price has a higher rank, but it must be in the price range).\nThe row number (smaller row number has a higher rank).\nThe column number (smaller column number has a higher rank).\nReturn the k highest-ranked items within the price range sorted by their rank (highest to lowest). If there are fewer than k reachable items within the price range, return all of them.", "examples": [{"full_text": "Example 1:\nInput: grid = [[1,2,0,1],[1,3,0,1],[0,2,5,1]], pricing = [2,5], start = [0,0], k = 3\nOutput: [[0,1],[1,1],[2,1]]\nExplanation: You start at (0,0).\nWith a price range of [2,5], we can take items from (0,1), (1,1), (2,1) and (2,2).\nThe ranks of these items are:\n- (0,1) with distance 1\n- (1,1) with distance 2\n- (2,1) with distance 3\n- (2,2) with distance 4\nThus, the 3 highest ranked items in the price range are (0,1), (1,1), and (2,1).", "input": "Input: grid = [[1,2,0,1],[1,3,0,1],[0,2,5,1]], pricing = [2,5], start = [0,0], k = 3", "output": "Output: [[0,1],[1,1],[2,1]]", "explanation": "Explanation: You start at (0,0).\nWith a price range of [2,5], we can take items from (0,1), (1,1), (2,1) and (2,2).\nThe ranks of these items are:\n- (0,1) with distance 1\n- (1,1) with distance 2\n- (2,1) with distance 3\n- (2,2) with distance 4\nThus, the 3 highest ranked items in the price range are (0,1), (1,1), and (2,1)."}, {"full_text": "Example 2:\nInput: grid = [[1,2,0,1],[1,3,3,1],[0,2,5,1]], pricing = [2,3], start = [2,3], k = 2\nOutput: [[2,1],[1,2]]\nExplanation: You start at (2,3).\nWith a price range of [2,3], we can take items from (0,1), (1,1), (1,2) and (2,1).\nThe ranks of these items are:\n- (2,1) with distance 2, price 2\n- (1,2) with distance 2, price 3\n- (1,1) with distance 3\n- (0,1) with distance 4\nThus, the 2 highest ranked items in the price range are (2,1) and (1,2).", "input": "Input: grid = [[1,2,0,1],[1,3,3,1],[0,2,5,1]], pricing = [2,3], start = [2,3], k = 2", "output": "Output: [[2,1],[1,2]]", "explanation": "Explanation: You start at (2,3).\nWith a price range of [2,3], we can take items from (0,1), (1,1), (1,2) and (2,1).\nThe ranks of these items are:\n- (2,1) with distance 2, price 2\n- (1,2) with distance 2, price 3\n- (1,1) with distance 3\n- (0,1) with distance 4\nThus, the 2 highest ranked items in the price range are (2,1) and (1,2)."}, {"full_text": "Example 3:\nInput: grid = [[1,1,1],[0,0,1],[2,3,4]], pricing = [2,3], start = [0,0], k = 3\nOutput: [[2,1],[2,0]]\nExplanation: You start at (0,0).\nWith a price range of [2,3], we can take items from (2,0) and (2,1).\nThe ranks of these items are:\n- (2,1) with distance 5\n- (2,0) with distance 6\nThus, the 2 highest ranked items in the price range are (2,1) and (2,0).\nNote that k = 3 but there are only 2 reachable items within the price range.", "input": "Input: grid = [[1,1,1],[0,0,1],[2,3,4]], pricing = [2,3], start = [0,0], k = 3", "output": "Output: [[2,1],[2,0]]", "explanation": "Explanation: You start at (0,0).\nWith a price range of [2,3], we can take items from (2,0) and (2,1).\nThe ranks of these items are:\n- (2,1) with distance 5\n- (2,0) with distance 6\nThus, the 2 highest ranked items in the price range are (2,1) and (2,0).\nNote that k = 3 but there are only 2 reachable items within the price range."}], "constraints": "Constraints:\nm == grid.length\nn == grid[i].length\n1 <= m, n <= 10^5\n1 <= m * n <= 10^5\n0 <= grid[i][j] <= 10^5\npricing.length == 2\n2 <= low <= high <= 10^5\nstart.length == 2\n0 <= row <= m - 1\n0 <= col <= n - 1\ngrid[row][col] > 0\n1 <= k <= m * n", "notes": ""}, "2145": {"label": "Medium", "title": "Count the Hidden Sequences", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3464, "total_accepted": 10300.0, "total_submissions": 29900.0, "testcase_example": "'[1,-3,4]\\n1\\n6'", "body": "You are given a 0-indexed array of n integers differences, which describes the differences between each pair of consecutive integers of a hidden sequence of length (n + 1). More formally, call the hidden sequence hidden, then we have that differences[i] = hidden[i + 1] - hidden[i].\nYou are further given two integers lower and upper that describe the inclusive range of values [lower, upper] that the hidden sequence can contain.\nFor example, given differences = [1, -3, 4], lower = 1, upper = 6, the hidden sequence is a sequence of length 4 whose elements are in between 1 and 6 (inclusive).\n\n[3, 4, 1, 5] and [4, 5, 2, 6] are possible hidden sequences.\n[5, 6, 3, 7] is not possible since it contains an element greater than 6.\n[1, 2, 3, 4] is not possible since the differences are not correct.\n\n\nReturn the number of possible hidden sequences there are. If there are no possible sequences, return 0.", "examples": [{"full_text": "Example 1:\nInput: differences = [1,-3,4], lower = 1, upper = 6\nOutput: 2\nExplanation: The possible hidden sequences are:\n- [3, 4, 1, 5]\n- [4, 5, 2, 6]\nThus, we return 2.", "input": "Input: differences = [1,-3,4], lower = 1, upper = 6", "output": "Output: 2", "explanation": "Explanation: The possible hidden sequences are:\n- [3, 4, 1, 5]\n- [4, 5, 2, 6]\nThus, we return 2."}, {"full_text": "Example 2:\nInput: differences = [3,-4,5,1,-2], lower = -4, upper = 5\nOutput: 4\nExplanation: The possible hidden sequences are:\n- [-3, 0, -4, 1, 2, 0]\n- [-2, 1, -3, 2, 3, 1]\n- [-1, 2, -2, 3, 4, 2]\n- [0, 3, -1, 4, 5, 3]\nThus, we return 4.", "input": "Input: differences = [3,-4,5,1,-2], lower = -4, upper = 5", "output": "Output: 4", "explanation": "Explanation: The possible hidden sequences are:\n- [-3, 0, -4, 1, 2, 0]\n- [-2, 1, -3, 2, 3, 1]\n- [-1, 2, -2, 3, 4, 2]\n- [0, 3, -1, 4, 5, 3]\nThus, we return 4."}, {"full_text": "Example 3:\nInput: differences = [4,-7,2], lower = 3, upper = 6\nOutput: 0\nExplanation: There are no possible hidden sequences. Thus, we return 0.", "input": "Input: differences = [4,-7,2], lower = 3, upper = 6", "output": "Output: 0", "explanation": "Explanation: There are no possible hidden sequences. Thus, we return 0."}], "constraints": "Constraints:\nn == differences.length\n1 <= n <= 10^5\n-10^5 <= differences[i] <= 10^5\n-10^5 <= lower <= upper <= 10^5", "notes": ""}, "2140": {"label": "Medium", "title": "Solving Questions With Brainpower", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4361, "total_accepted": 15900.0, "total_submissions": 36500.0, "testcase_example": "'[[3,2],[4,3],[4,4],[2,5]]'", "body": "You are given a 0-indexed 2D integer array questions where questions[i] = [pointsi, brainpoweri].\nThe array describes the questions of an exam, where you have to process the questions in order (i.e., starting from question 0) and make a decision whether to solve or skip each question. Solving question i will earn you pointsi points but you will be unable to solve each of the next brainpoweri questions. If you skip question i, you get to make the decision on the next question.\nFor example, given questions = [[3, 2], [4, 3], [4, 4], [2, 5]]:\n\nIf question 0 is solved, you will earn 3 points but you will be unable to solve questions 1 and 2.\nIf instead, question 0 is skipped and question 1 is solved, you will earn 4 points but you will be unable to solve questions 2 and 3.\n\n\nReturn the maximum points you can earn for the exam.", "examples": [{"full_text": "Example 1:\nInput: questions = [[3,2],[4,3],[4,4],[2,5]]\nOutput: 5\nExplanation: The maximum points can be earned by solving questions 0 and 3.\n- Solve question 0: Earn 3 points, will be unable to solve the next 2 questions\n- Unable to solve questions 1 and 2\n- Solve question 3: Earn 2 points\nTotal points earned: 3 + 2 = 5. There is no other way to earn 5 or more points.", "input": "Input: questions = [[3,2],[4,3],[4,4],[2,5]]", "output": "Output: 5", "explanation": "Explanation: The maximum points can be earned by solving questions 0 and 3.\n- Solve question 0: Earn 3 points, will be unable to solve the next 2 questions\n- Unable to solve questions 1 and 2\n- Solve question 3: Earn 2 points\nTotal points earned: 3 + 2 = 5. There is no other way to earn 5 or more points."}, {"full_text": "Example 2:\nInput: questions = [[1,1],[2,2],[3,3],[4,4],[5,5]]\nOutput: 7\nExplanation: The maximum points can be earned by solving questions 1 and 4.\n- Skip question 0\n- Solve question 1: Earn 2 points, will be unable to solve the next 2 questions\n- Unable to solve questions 2 and 3\n- Solve question 4: Earn 5 points\nTotal points earned: 2 + 5 = 7. There is no other way to earn 7 or more points.", "input": "Input: questions = [[1,1],[2,2],[3,3],[4,4],[5,5]]", "output": "Output: 7", "explanation": "Explanation: The maximum points can be earned by solving questions 1 and 4.\n- Skip question 0\n- Solve question 1: Earn 2 points, will be unable to solve the next 2 questions\n- Unable to solve questions 2 and 3\n- Solve question 4: Earn 5 points\nTotal points earned: 2 + 5 = 7. There is no other way to earn 7 or more points."}], "constraints": "Constraints:\n1 <= questions.length <= 10^5\nquestions[i].length == 2\n1 <= pointsi, brainpoweri <= 10^5", "notes": ""}, "2139": {"label": "Medium", "title": "Minimum Moves to Reach Target Score", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.485, "total_accepted": 18600.0, "total_submissions": 38400.0, "testcase_example": "'5\\n0'", "body": "You are playing a game with integers. You start with the integer 1 and you want to reach the integer target.\nIn one move, you can either:\nIncrement the current integer by one (i.e., x = x + 1).\nDouble the current integer (i.e., x = 2 * x).\nYou can use the increment operation any number of times, however, you can only use the double operation at most maxDoubles times.\nGiven the two integers target and maxDoubles, return the minimum number of moves needed to reach target starting with 1.", "examples": [{"full_text": "Example 1:\nInput: target = 5, maxDoubles = 0\nOutput: 4\nExplanation: Keep incrementing by 1 until you reach target.", "input": "Input: target = 5, maxDoubles = 0", "output": "Output: 4", "explanation": "Explanation: Keep incrementing by 1 until you reach target."}, {"full_text": "Example 2:\nInput: target = 19, maxDoubles = 2\nOutput: 7\nExplanation: Initially, x = 1\nIncrement 3 times so x = 4\nDouble once so x = 8\nIncrement once so x = 9\nDouble again so x = 18\nIncrement once so x = 19", "input": "Input: target = 19, maxDoubles = 2", "output": "Output: 7", "explanation": "Explanation: Initially, x = 1\nIncrement 3 times so x = 4\nDouble once so x = 8\nIncrement once so x = 9\nDouble again so x = 18\nIncrement once so x = 19"}, {"full_text": "Example 3:\nInput: target = 10, maxDoubles = 4\nOutput: 4\nExplanation: Initially, x = 1\nIncrement once so x = 2\nDouble once so x = 4\nIncrement once so x = 5\nDouble again so x = 10", "input": "Input: target = 10, maxDoubles = 4", "output": "Output: 4", "explanation": "Explanation: Initially, x = 1\nIncrement once so x = 2\nDouble once so x = 4\nIncrement once so x = 5\nDouble again so x = 10"}], "constraints": "Constraints:\n1 <= target <= 10^9\n0 <= maxDoubles <= 100", "notes": ""}, "2135": {"label": "Medium", "title": "Count Words Obtained After Adding a Letter", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.348, "total_accepted": 10000.0, "total_submissions": 28800.0, "testcase_example": "'[\"ant\",\"act\",\"tack\"]\\n[\"tack\",\"act\",\"acti\"]'", "body": "You are given two 0-indexed arrays of strings startWords and targetWords. Each string consists of lowercase English letters only.\nFor each string in targetWords, check if it is possible to choose a string from startWords and perform a conversion operation on it to be equal to that from targetWords.\nThe conversion operation is described in the following two steps:\nAppend any lowercase letter that is not present in the string to its end.\n\nFor example, if the string is \"abc\", the letters 'd', 'e', or 'y' can be added to it, but not 'a'. If 'd' is added, the resulting string will be \"abcd\".\n\n\nRearrange the letters of the new string in any arbitrary order.\n\nFor example, \"abcd\" can be rearranged to \"acbd\", \"bacd\", \"cbda\", and so on. Note that it can also be rearranged to \"abcd\" itself.\n\n\nReturn the number of strings in targetWords that can be obtained by performing the operations on any string of startWords.\nNote that you will only be verifying if the string in targetWords can be obtained from a string in startWords by performing the operations. The strings in startWords do not actually change during this process.", "examples": [{"full_text": "Example 1:\nInput: startWords = [\"ant\",\"act\",\"tack\"], targetWords = [\"tack\",\"act\",\"acti\"]\nOutput: 2\nExplanation:\n- In order to form targetWords[0] = \"tack\", we use startWords[1] = \"act\", append 'k' to it, and rearrange \"actk\" to \"tack\".\n- There is no string in startWords that can be used to obtain targetWords[1] = \"act\".\nNote that \"act\" does exist in startWords, but we must append one letter to the string before rearranging it.\n- In order to form targetWords[2] = \"acti\", we use startWords[1] = \"act\", append 'i' to it, and rearrange \"acti\" to \"acti\" itself.", "input": "Input: startWords = [\"ant\",\"act\",\"tack\"], targetWords = [\"tack\",\"act\",\"acti\"]", "output": "Output: 2", "explanation": "Explanation:\n- In order to form targetWords[0] = \"tack\", we use startWords[1] = \"act\", append 'k' to it, and rearrange \"actk\" to \"tack\".\n- There is no string in startWords that can be used to obtain targetWords[1] = \"act\".\nNote that \"act\" does exist in startWords, but we must append one letter to the string before rearranging it.\n- In order to form targetWords[2] = \"acti\", we use startWords[1] = \"act\", append 'i' to it, and rearrange \"acti\" to \"acti\" itself."}, {"full_text": "Example 2:\nInput: startWords = [\"ab\",\"a\"], targetWords = [\"abc\",\"abcd\"]\nOutput: 1\nExplanation:\n- In order to form targetWords[0] = \"abc\", we use startWords[0] = \"ab\", add 'c' to it, and rearrange it to \"abc\".\n- There is no string in startWords that can be used to obtain targetWords[1] = \"abcd\".", "input": "Input: startWords = [\"ab\",\"a\"], targetWords = [\"abc\",\"abcd\"]", "output": "Output: 1", "explanation": "Explanation:\n- In order to form targetWords[0] = \"abc\", we use startWords[0] = \"ab\", add 'c' to it, and rearrange it to \"abc\".\n- There is no string in startWords that can be used to obtain targetWords[1] = \"abcd\"."}], "constraints": "Constraints:\n1 <= startWords.length, targetWords.length <= 5 * 10^4\n1 <= startWords[i].length, targetWords[j].length <= 26\nEach string of startWords and targetWords consists of lowercase English letters only.\nNo letter occurs more than once in any string of startWords or targetWords.", "notes": ""}, "2134": {"label": "Medium", "title": "Minimum Swaps to Group All 1's Together II", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4672, "total_accepted": 11600.0, "total_submissions": 24900.0, "testcase_example": "'[0,1,0,1,1,0,0]'", "body": "A swap is defined as taking two distinct positions in an array and swapping the values in them.\nA circular array is defined as an array where we consider the first element and the last element to be adjacent.\nGiven a binary circular array nums, return the minimum number of swaps required to group all 1's present in the array together at any location.", "examples": [{"full_text": "Example 1:\nInput: nums = [0,1,0,1,1,0,0]\nOutput: 1\nExplanation: Here are a few of the ways to group all the 1's together:\n[0,0,1,1,1,0,0] using 1 swap.\n[0,1,1,1,0,0,0] using 1 swap.\n[1,1,0,0,0,0,1] using 2 swaps (using the circular property of the array).\nThere is no way to group all 1's together with 0 swaps.\nThus, the minimum number of swaps required is 1.", "input": "Input: nums = [0,1,0,1,1,0,0]", "output": "Output: 1", "explanation": "Explanation: Here are a few of the ways to group all the 1's together:\n[0,0,1,1,1,0,0] using 1 swap.\n[0,1,1,1,0,0,0] using 1 swap.\n[1,1,0,0,0,0,1] using 2 swaps (using the circular property of the array).\nThere is no way to group all 1's together with 0 swaps.\nThus, the minimum number of swaps required is 1."}, {"full_text": "Example 2:\nInput: nums = [0,1,1,1,0,0,1,1,0]\nOutput: 2\nExplanation: Here are a few of the ways to group all the 1's together:\n[1,1,1,0,0,0,0,1,1] using 2 swaps (using the circular property of the array).\n[1,1,1,1,1,0,0,0,0] using 2 swaps.\nThere is no way to group all 1's together with 0 or 1 swaps.\nThus, the minimum number of swaps required is 2.", "input": "Input: nums = [0,1,1,1,0,0,1,1,0]", "output": "Output: 2", "explanation": "Explanation: Here are a few of the ways to group all the 1's together:\n[1,1,1,0,0,0,0,1,1] using 2 swaps (using the circular property of the array).\n[1,1,1,1,1,0,0,0,0] using 2 swaps.\nThere is no way to group all 1's together with 0 or 1 swaps.\nThus, the minimum number of swaps required is 2."}, {"full_text": "Example 3:\nInput: nums = [1,1,0,0,1]\nOutput: 0\nExplanation: All the 1's are already grouped together due to the circular property of the array.\nThus, the minimum number of swaps required is 0.", "input": "Input: nums = [1,1,0,0,1]", "output": "Output: 0", "explanation": "Explanation: All the 1's are already grouped together due to the circular property of the array.\nThus, the minimum number of swaps required is 0."}], "constraints": "Constraints:\n1 <= nums.length <= 10^5\nnums[i] is either 0 or 1.", "notes": ""}, "2131": {"label": "Medium", "title": "Longest Palindrome by Concatenating Two Letter Words", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3746, "total_accepted": 11200.0, "total_submissions": 29900.0, "testcase_example": "'[\"lc\",\"cl\",\"gg\"]'", "body": "You are given an array of strings words. Each element of words consists of two lowercase English letters.\nCreate the longest possible palindrome by selecting some elements from words and concatenating them in any order. Each element can be selected at most once.\nReturn the length of the longest palindrome that you can create. If it is impossible to create any palindrome, return 0.\nA palindrome is a string that reads the same forward and backward.", "examples": [{"full_text": "Example 1:\nInput: words = [\"lc\",\"cl\",\"gg\"]\nOutput: 6\nExplanation: One longest palindrome is \"lc\" + \"gg\" + \"cl\" = \"lcggcl\", of length 6.\nNote that \"clgglc\" is another longest palindrome that can be created.", "input": "Input: words = [\"lc\",\"cl\",\"gg\"]", "output": "Output: 6", "explanation": "Explanation: One longest palindrome is \"lc\" + \"gg\" + \"cl\" = \"lcggcl\", of length 6.\nNote that \"clgglc\" is another longest palindrome that can be created."}, {"full_text": "Example 2:\nInput: words = [\"ab\",\"ty\",\"yt\",\"lc\",\"cl\",\"ab\"]\nOutput: 8\nExplanation: One longest palindrome is \"ty\" + \"lc\" + \"cl\" + \"yt\" = \"tylcclyt\", of length 8.\nNote that \"lcyttycl\" is another longest palindrome that can be created.", "input": "Input: words = [\"ab\",\"ty\",\"yt\",\"lc\",\"cl\",\"ab\"]", "output": "Output: 8", "explanation": "Explanation: One longest palindrome is \"ty\" + \"lc\" + \"cl\" + \"yt\" = \"tylcclyt\", of length 8.\nNote that \"lcyttycl\" is another longest palindrome that can be created."}, {"full_text": "Example 3:\nInput: words = [\"cc\",\"ll\",\"xx\"]\nOutput: 2\nExplanation: One longest palindrome is \"cc\", of length 2.\nNote that \"ll\" is another longest palindrome that can be created, and so is \"xx\".", "input": "Input: words = [\"cc\",\"ll\",\"xx\"]", "output": "Output: 2", "explanation": "Explanation: One longest palindrome is \"cc\", of length 2.\nNote that \"ll\" is another longest palindrome that can be created, and so is \"xx\"."}], "constraints": "Constraints:\n1 <= words.length <= 10^5\nwords[i].length == 2\nwords[i] consists of lowercase English letters.", "notes": ""}, "2130": {"label": "Medium", "title": "Maximum Twin Sum of a Linked List", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.8262999999999999, "total_accepted": 19200.0, "total_submissions": 23300.0, "testcase_example": "'[5,4,2,1]'", "body": "In a linked list of size n, where n is even, the i^th node (0-indexed) of the linked list is known as the twin of the (n-1-i)^th node, if 0 <= i <= (n / 2) - 1.\nFor example, if n = 4, then node 0 is the twin of node 3, and node 1 is the twin of node 2. These are the only nodes with twins for n = 4.\nThe twin sum is defined as the sum of a node and its twin.\nGiven the head of a linked list with even length, return the maximum twin sum of the linked list.", "examples": [{"full_text": "Example 1:\nInput: head = [5,4,2,1]\nOutput: 6\nExplanation:\nNodes 0 and 1 are the twins of nodes 3 and 2, respectively. All have twin sum = 6.\nThere are no other nodes with twins in the linked list.\nThus, the maximum twin sum of the linked list is 6.", "input": "Input: head = [5,4,2,1]", "output": "Output: 6", "explanation": "Explanation:\nNodes 0 and 1 are the twins of nodes 3 and 2, respectively. All have twin sum = 6.\nThere are no other nodes with twins in the linked list.\nThus, the maximum twin sum of the linked list is 6."}, {"full_text": "Example 2:\nInput: head = [4,2,2,3]\nOutput: 7\nExplanation:\nThe nodes with twins present in this linked list are:\n- Node 0 is the twin of node 3 having a twin sum of 4 + 3 = 7.\n- Node 1 is the twin of node 2 having a twin sum of 2 + 2 = 4.\nThus, the maximum twin sum of the linked list is max(7, 4) = 7.", "input": "Input: head = [4,2,2,3]", "output": "Output: 7", "explanation": "Explanation:\nThe nodes with twins present in this linked list are:\n- Node 0 is the twin of node 3 having a twin sum of 4 + 3 = 7.\n- Node 1 is the twin of node 2 having a twin sum of 2 + 2 = 4.\nThus, the maximum twin sum of the linked list is max(7, 4) = 7."}, {"full_text": "Example 3:\nInput: head = [1,100000]\nOutput: 100001\nExplanation:\nThere is only one node with a twin in the linked list having twin sum of 1 + 100000 = 100001.", "input": "Input: head = [1,100000]", "output": "Output: 100001", "explanation": "Explanation:\nThere is only one node with a twin in the linked list having twin sum of 1 + 100000 = 100001."}], "constraints": "Constraints:\nThe number of nodes in the list is an even integer in the range [2, 10^5].\n1 <= Node.val <= 10^5", "notes": ""}, "2126": {"label": "Medium", "title": "Destroying Asteroids", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4792, "total_accepted": 16600.0, "total_submissions": 34600.0, "testcase_example": "'10\\n[3,9,19,5,21]'", "body": "You are given an integer mass, which represents the original mass of a planet. You are further given an integer array asteroids, where asteroids[i] is the mass of the i^th asteroid.\nYou can arrange for the planet to collide with the asteroids in any arbitrary order. If the mass of the planet is greater than or equal to the mass of the asteroid, the asteroid is destroyed and the planet gains the mass of the asteroid. Otherwise, the planet is destroyed.\nReturn true if all asteroids can be destroyed. Otherwise, return false.", "examples": [{"full_text": "Example 1:\nInput: mass = 10, asteroids = [3,9,19,5,21]\nOutput: true\nExplanation: One way to order the asteroids is [9,19,5,3,21]:\n- The planet collides with the asteroid with a mass of 9. New planet mass: 10 + 9 = 19\n- The planet collides with the asteroid with a mass of 19. New planet mass: 19 + 19 = 38\n- The planet collides with the asteroid with a mass of 5. New planet mass: 38 + 5 = 43\n- The planet collides with the asteroid with a mass of 3. New planet mass: 43 + 3 = 46\n- The planet collides with the asteroid with a mass of 21. New planet mass: 46 + 21 = 67\nAll asteroids are destroyed.", "input": "Input: mass = 10, asteroids = [3,9,19,5,21]", "output": "Output: true", "explanation": "Explanation: One way to order the asteroids is [9,19,5,3,21]:\n- The planet collides with the asteroid with a mass of 9. New planet mass: 10 + 9 = 19\n- The planet collides with the asteroid with a mass of 19. New planet mass: 19 + 19 = 38\n- The planet collides with the asteroid with a mass of 5. New planet mass: 38 + 5 = 43\n- The planet collides with the asteroid with a mass of 3. New planet mass: 43 + 3 = 46\n- The planet collides with the asteroid with a mass of 21. New planet mass: 46 + 21 = 67\nAll asteroids are destroyed."}, {"full_text": "Example 2:\nInput: mass = 5, asteroids = [4,9,23,4]\nOutput: false\nExplanation:\nThe planet cannot ever gain enough mass to destroy the asteroid with a mass of 23.\nAfter the planet destroys the other asteroids, it will have a mass of 5 + 4 + 9 + 4 = 22.\nThis is less than 23, so a collision would not destroy the last asteroid.", "input": "Input: mass = 5, asteroids = [4,9,23,4]", "output": "Output: false", "explanation": "Explanation:\nThe planet cannot ever gain enough mass to destroy the asteroid with a mass of 23.\nAfter the planet destroys the other asteroids, it will have a mass of 5 + 4 + 9 + 4 = 22.\nThis is less than 23, so a collision would not destroy the last asteroid."}], "constraints": "Constraints:\n1 <= mass <= 10^5\n1 <= asteroids.length <= 10^5\n1 <= asteroids[i] <= 10^5", "notes": ""}, "2125": {"label": "Medium", "title": "Number of Laser Beams in a Bank", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.8323, "total_accepted": 19500.0, "total_submissions": 23500.0, "testcase_example": "'[\"011001\",\"000000\",\"010100\",\"001000\"]'", "body": "Anti-theft security devices are activated inside a bank. You are given a 0-indexed binary string array bank representing the floor plan of the bank, which is an m x n 2D matrix. bank[i] represents the i^th row, consisting of '0's and '1's. '0' means the cell is empty, while'1' means the cell has a security device.\nThere is one laser beam between any two security devices if both conditions are met:\nThe two devices are located on two different rows: r1 and r2, where r1 < r2.\nFor each row i where r1 < i < r2, there are no security devices in the i^th row.\nLaser beams are independent, i.e., one beam does not interfere nor join with another.\nReturn the total number of laser beams in the bank.", "examples": [{"full_text": "Example 1:\nInput: bank = [\"011001\",\"000000\",\"010100\",\"001000\"]\nOutput: 8\nExplanation: Between each of the following device pairs, there is one beam. In total, there are 8 beams:\n* bank[0][1] -- bank[2][1]\n* bank[0][1] -- bank[2][3]\n* bank[0][2] -- bank[2][1]\n* bank[0][2] -- bank[2][3]\n* bank[0][5] -- bank[2][1]\n* bank[0][5] -- bank[2][3]\n* bank[2][1] -- bank[3][2]\n* bank[2][3] -- bank[3][2]\nNote that there is no beam between any device on the 0^th row with any on the 3^rd row.\nThis is because the 2^nd row contains security devices, which breaks the second condition.", "input": "Input: bank = [\"011001\",\"000000\",\"010100\",\"001000\"]", "output": "Output: 8", "explanation": "Explanation: Between each of the following device pairs, there is one beam. In total, there are 8 beams:\n* bank[0][1] -- bank[2][1]\n* bank[0][1] -- bank[2][3]\n* bank[0][2] -- bank[2][1]\n* bank[0][2] -- bank[2][3]\n* bank[0][5] -- bank[2][1]\n* bank[0][5] -- bank[2][3]\n* bank[2][1] -- bank[3][2]\n* bank[2][3] -- bank[3][2]\nNote that there is no beam between any device on the 0^th row with any on the 3^rd row.\nThis is because the 2^nd row contains security devices, which breaks the second condition."}, {"full_text": "Example 2:\nInput: bank = [\"000\",\"111\",\"000\"]\nOutput: 0\nExplanation: There does not exist two devices located on two different rows.", "input": "Input: bank = [\"000\",\"111\",\"000\"]", "output": "Output: 0", "explanation": "Explanation: There does not exist two devices located on two different rows."}], "constraints": "Constraints:\nm == bank.length\nn == bank[i].length\n1 <= m, n <= 500\nbank[i][j] is either '0' or '1'.", "notes": ""}, "2121": {"label": "Medium", "title": "Intervals Between Identical Elements", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.41619999999999996, "total_accepted": 9900.0, "total_submissions": 23900.0, "testcase_example": "'[2,1,3,1,2,3,3]'", "body": "You are given a 0-indexed array of n integers arr.\nThe interval between two elements in arr is defined as the absolute difference between their indices. More formally, the interval between arr[i] and arr[j] is |i - j|.\nReturn an array intervals of length n where intervals[i] is the sum of intervals between arr[i] and each element in arr with the same value as arr[i].\nNote: |x| is the absolute value of x.", "examples": [{"full_text": "Example 1:\nInput: arr = [2,1,3,1,2,3,3]\nOutput: [4,2,7,2,4,4,5]\nExplanation:\n- Index 0: Another 2 is found at index 4. |0 - 4| = 4\n- Index 1: Another 1 is found at index 3. |1 - 3| = 2\n- Index 2: Two more 3s are found at indices 5 and 6. |2 - 5| + |2 - 6| = 7\n- Index 3: Another 1 is found at index 1. |3 - 1| = 2\n- Index 4: Another 2 is found at index 0. |4 - 0| = 4\n- Index 5: Two more 3s are found at indices 2 and 6. |5 - 2| + |5 - 6| = 4\n- Index 6: Two more 3s are found at indices 2 and 5. |6 - 2| + |6 - 5| = 5", "input": "Input: arr = [2,1,3,1,2,3,3]", "output": "Output: [4,2,7,2,4,4,5]", "explanation": "Explanation:\n- Index 0: Another 2 is found at index 4. |0 - 4| = 4\n- Index 1: Another 1 is found at index 3. |1 - 3| = 2\n- Index 2: Two more 3s are found at indices 5 and 6. |2 - 5| + |2 - 6| = 7\n- Index 3: Another 1 is found at index 1. |3 - 1| = 2\n- Index 4: Another 2 is found at index 0. |4 - 0| = 4\n- Index 5: Two more 3s are found at indices 2 and 6. |5 - 2| + |5 - 6| = 4\n- Index 6: Two more 3s are found at indices 2 and 5. |6 - 2| + |6 - 5| = 5"}, {"full_text": "Example 2:\nInput: arr = [10,5,10,10]\nOutput: [5,0,3,4]\nExplanation:\n- Index 0: Two more 10s are found at indices 2 and 3. |0 - 2| + |0 - 3| = 5\n- Index 1: There is only one 5 in the array, so its sum of intervals to identical elements is 0.\n- Index 2: Two more 10s are found at indices 0 and 3. |2 - 0| + |2 - 3| = 3\n- Index 3: Two more 10s are found at indices 0 and 2. |3 - 0| + |3 - 2| = 4", "input": "Input: arr = [10,5,10,10]", "output": "Output: [5,0,3,4]", "explanation": "Explanation:\n- Index 0: Two more 10s are found at indices 2 and 3. |0 - 2| + |0 - 3| = 5\n- Index 1: There is only one 5 in the array, so its sum of intervals to identical elements is 0.\n- Index 2: Two more 10s are found at indices 0 and 3. |2 - 0| + |2 - 3| = 3\n- Index 3: Two more 10s are found at indices 0 and 2. |3 - 0| + |3 - 2| = 4"}], "constraints": "Constraints:\nn == arr.length\n1 <= n <= 10^5\n1 <= arr[i] <= 10^5", "notes": ""}, "2120": {"label": "Medium", "title": "Execution of All Suffix Instructions Staying in a Grid", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.8270000000000001, "total_accepted": 12900.0, "total_submissions": 15600.0, "testcase_example": "'3\\n[0,1]\\n\"RRDDLU\"'", "body": "There is an n x n grid, with the top-left cell at (0, 0) and the bottom-right cell at (n - 1, n - 1). You are given the integer n and an integer array startPos where startPos = [startrow, startcol] indicates that a robot is initially at cell (startrow, startcol).\nYou are also given a 0-indexed string s of length m where s[i] is the i^th instruction for the robot: 'L' (move left), 'R' (move right), 'U' (move up), and 'D' (move down).\nThe robot can begin executing from any i^th instruction in s. It executes the instructions one by one towards the end of s but it stops if either of these conditions is met:\nThe next instruction will move the robot off the grid.\nThere are no more instructions left to execute.\nReturn an array answer of length m where answer[i] is the number of instructions the robot can execute if the robot begins executing from the i^th instruction in s.", "examples": [{"full_text": "Example 1:\nInput: n = 3, startPos = [0,1], s = \"RRDDLU\"\nOutput: [1,5,4,3,1,0]\nExplanation: Starting from startPos and beginning execution from the i^th instruction:\n- 0^th: \"RRDDLU\". Only one instruction \"R\" can be executed before it moves off the grid.\n- 1^st: \"RDDLU\". All five instructions can be executed while it stays in the grid and ends at (1, 1).\n- 2^nd: \"DDLU\". All four instructions can be executed while it stays in the grid and ends at (1, 0).\n- 3^rd: \"DLU\". All three instructions can be executed while it stays in the grid and ends at (0, 0).\n- 4^th: \"LU\". Only one instruction \"L\" can be executed before it moves off the grid.\n- 5^th: \"U\". If moving up, it would move off the grid.", "input": "Input: n = 3, startPos = [0,1], s = \"RRDDLU\"", "output": "Output: [1,5,4,3,1,0]", "explanation": "Explanation: Starting from startPos and beginning execution from the i^th instruction:\n- 0^th: \"RRDDLU\". Only one instruction \"R\" can be executed before it moves off the grid.\n- 1^st: \"RDDLU\". All five instructions can be executed while it stays in the grid and ends at (1, 1).\n- 2^nd: \"DDLU\". All four instructions can be executed while it stays in the grid and ends at (1, 0).\n- 3^rd: \"DLU\". All three instructions can be executed while it stays in the grid and ends at (0, 0).\n- 4^th: \"LU\". Only one instruction \"L\" can be executed before it moves off the grid.\n- 5^th: \"U\". If moving up, it would move off the grid."}, {"full_text": "Example 2:\nInput: n = 2, startPos = [1,1], s = \"LURD\"\nOutput: [4,1,0,0]\nExplanation:\n- 0^th: \"LURD\".\n- 1^st: \"URD\".\n- 2^nd: \"RD\".\n- 3^rd: \"D\".", "input": "Input: n = 2, startPos = [1,1], s = \"LURD\"", "output": "Output: [4,1,0,0]", "explanation": "Explanation:\n- 0^th: \"LURD\".\n- 1^st: \"URD\".\n- 2^nd: \"RD\".\n- 3^rd: \"D\"."}, {"full_text": "Example 3:\nInput: n = 1, startPos = [0,0], s = \"LRUD\"\nOutput: [0,0,0,0]\nExplanation: No matter which instruction the robot begins execution from, it would move off the grid.", "input": "Input: n = 1, startPos = [0,0], s = \"LRUD\"", "output": "Output: [0,0,0,0]", "explanation": "Explanation: No matter which instruction the robot begins execution from, it would move off the grid."}], "constraints": "Constraints:\nm == s.length\n1 <= n, m <= 500\nstartPos.length == 2\n0 <= startrow, startcol < n\ns consists of 'L', 'R', 'U', and 'D'.", "notes": ""}, "2116": {"label": "Medium", "title": "Check if a Parentheses String Can Be Valid", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3125, "total_accepted": 6200.0, "total_submissions": 19700.0, "testcase_example": "'\"))()))\"\\n\"010100\"'", "body": "A parentheses string is a non-empty string consisting only of '(' and ')'. It is valid if any of the following conditions is true:\nIt is ().\nIt can be written as AB (A concatenated with B), where A and B are valid parentheses strings.\nIt can be written as (A), where A is a valid parentheses string.\nYou are given a parentheses string s and a string locked, both of length n. locked is a binary string consisting only of '0's and '1's. For each index i of locked,\nIf locked[i] is '1', you cannot change s[i].\nBut if locked[i] is '0', you can change s[i] to either '(' or ')'.\nReturn true if you can make s a valid parentheses string. Otherwise, return false.", "examples": [{"full_text": "Example 1:\nInput: s = \"))()))\", locked = \"010100\"\nOutput: true\nExplanation: locked[1] == '1' and locked[3] == '1', so we cannot change s[1] or s[3].\nWe change s[0] and s[4] to '(' while leaving s[2] and s[5] unchanged to make s valid.", "input": "Input: s = \"))()))\", locked = \"010100\"", "output": "Output: true", "explanation": "Explanation: locked[1] == '1' and locked[3] == '1', so we cannot change s[1] or s[3].\nWe change s[0] and s[4] to '(' while leaving s[2] and s[5] unchanged to make s valid."}, {"full_text": "Example 2:\nInput: s = \"()()\", locked = \"0000\"\nOutput: true\nExplanation: We do not need to make any changes because s is already valid.", "input": "Input: s = \"()()\", locked = \"0000\"", "output": "Output: true", "explanation": "Explanation: We do not need to make any changes because s is already valid."}, {"full_text": "Example 3:\nInput: s = \")\", locked = \"0\"\nOutput: false\nExplanation: locked permits us to change s[0].\nChanging s[0] to either '(' or ')' will not make s valid.", "input": "Input: s = \")\", locked = \"0\"", "output": "Output: false", "explanation": "Explanation: locked permits us to change s[0].\nChanging s[0] to either '(' or ')' will not make s valid."}], "constraints": "Constraints:\nn == s.length == locked.length\n1 <= n <= 10^5\ns[i] is either '(' or ')'.\nlocked[i] is either '0' or '1'.", "notes": ""}, "2115": {"label": "Medium", "title": "Find All Possible Recipes from Given Supplies", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.365, "total_accepted": 11900.0, "total_submissions": 32700.000000000004, "testcase_example": "'[\"bread\"]\\n[[\"yeast\",\"flour\"]]\\n[\"yeast\",\"flour\",\"corn\"]'", "body": "You have information about n different recipes. You are given a string array recipes and a 2D string array ingredients. The i^th recipe has the name recipes[i], and you can create it if you have all the needed ingredients from ingredients[i]. Ingredients to a recipe may need to be created from other recipes, i.e., ingredients[i] may contain a string that is in recipes.\nYou are also given a string array supplies containing all the ingredients that you initially have, and you have an infinite supply of all of them.\nReturn a list of all the recipes that you can create. You may return the answer in any order.\nNote that two recipes may contain each other in their ingredients.", "examples": [{"full_text": "Example 1:\nInput: recipes = [\"bread\"], ingredients = [[\"yeast\",\"flour\"]], supplies = [\"yeast\",\"flour\",\"corn\"]\nOutput: [\"bread\"]\nExplanation:\nWe can create \"bread\" since we have the ingredients \"yeast\" and \"flour\".", "input": "Input: recipes = [\"bread\"], ingredients = [[\"yeast\",\"flour\"]], supplies = [\"yeast\",\"flour\",\"corn\"]", "output": "Output: [\"bread\"]", "explanation": "Explanation:\nWe can create \"bread\" since we have the ingredients \"yeast\" and \"flour\"."}, {"full_text": "Example 2:\nInput: recipes = [\"bread\",\"sandwich\"], ingredients = [[\"yeast\",\"flour\"],[\"bread\",\"meat\"]], supplies = [\"yeast\",\"flour\",\"meat\"]\nOutput: [\"bread\",\"sandwich\"]\nExplanation:\nWe can create \"bread\" since we have the ingredients \"yeast\" and \"flour\".\nWe can create \"sandwich\" since we have the ingredient \"meat\" and can create the ingredient \"bread\".", "input": "Input: recipes = [\"bread\",\"sandwich\"], ingredients = [[\"yeast\",\"flour\"],[\"bread\",\"meat\"]], supplies = [\"yeast\",\"flour\",\"meat\"]", "output": "Output: [\"bread\",\"sandwich\"]", "explanation": "Explanation:\nWe can create \"bread\" since we have the ingredients \"yeast\" and \"flour\".\nWe can create \"sandwich\" since we have the ingredient \"meat\" and can create the ingredient \"bread\"."}, {"full_text": "Example 3:\nInput: recipes = [\"bread\",\"sandwich\",\"burger\"], ingredients = [[\"yeast\",\"flour\"],[\"bread\",\"meat\"],[\"sandwich\",\"meat\",\"bread\"]], supplies = [\"yeast\",\"flour\",\"meat\"]\nOutput: [\"bread\",\"sandwich\",\"burger\"]\nExplanation:\nWe can create \"bread\" since we have the ingredients \"yeast\" and \"flour\".\nWe can create \"sandwich\" since we have the ingredient \"meat\" and can create the ingredient \"bread\".\nWe can create \"burger\" since we have the ingredient \"meat\" and can create the ingredients \"bread\" and \"sandwich\".", "input": "Input: recipes = [\"bread\",\"sandwich\",\"burger\"], ingredients = [[\"yeast\",\"flour\"],[\"bread\",\"meat\"],[\"sandwich\",\"meat\",\"bread\"]], supplies = [\"yeast\",\"flour\",\"meat\"]", "output": "Output: [\"bread\",\"sandwich\",\"burger\"]", "explanation": "Explanation:\nWe can create \"bread\" since we have the ingredients \"yeast\" and \"flour\".\nWe can create \"sandwich\" since we have the ingredient \"meat\" and can create the ingredient \"bread\".\nWe can create \"burger\" since we have the ingredient \"meat\" and can create the ingredients \"bread\" and \"sandwich\"."}], "constraints": "Constraints:\nn == recipes.length == ingredients.length\n1 <= n <= 100\n1 <= ingredients[i].length, supplies.length <= 100\n1 <= recipes[i].length, ingredients[i][j].length, supplies[k].length <= 10\nrecipes[i], ingredients[i][j], and supplies[k] consist only of lowercase English letters.\nAll the values of recipes and supplies\ncombined are unique.\nEach ingredients[i] does not contain any duplicate values.", "notes": ""}, "2110": {"label": "Medium", "title": "Number of Smooth Descent Periods of a Stock", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5465, "total_accepted": 16000.0, "total_submissions": 29200.0, "testcase_example": "'[3,2,1,4]'", "body": "You are given an integer array prices representing the daily price history of a stock, where prices[i] is the stock price on the i^th day.\nA smooth descent period of a stock consists of one or more contiguous days such that the price on each day is lower than the price on the preceding day by exactly 1. The first day of the period is exempted from this rule.\nReturn the number of smooth descent periods.", "examples": [{"full_text": "Example 1:\nInput: prices = [3,2,1,4]\nOutput: 7\nExplanation: There are 7 smooth descent periods:\n[3], [2], [1], [4], [3,2], [2,1], and [3,2,1]\nNote that a period with one day is a smooth descent period by the definition.", "input": "Input: prices = [3,2,1,4]", "output": "Output: 7", "explanation": "Explanation: There are 7 smooth descent periods:\n[3], [2], [1], [4], [3,2], [2,1], and [3,2,1]\nNote that a period with one day is a smooth descent period by the definition."}, {"full_text": "Example 2:\nInput: prices = [8,6,7,7]\nOutput: 4\nExplanation: There are 4 smooth descent periods: [8], [6], [7], and [7]\nNote that [8,6] is not a smooth descent period as 8 - 6 \u2260 1.", "input": "Input: prices = [8,6,7,7]", "output": "Output: 4", "explanation": "Explanation: There are 4 smooth descent periods: [8], [6], [7], and [7]\nNote that [8,6] is not a smooth descent period as 8 - 6 \u2260 1."}, {"full_text": "Example 3:\nInput: prices = [1]\nOutput: 1\nExplanation: There is 1 smooth descent period: [1]", "input": "Input: prices = [1]", "output": "Output: 1", "explanation": "Explanation: There is 1 smooth descent period: [1]"}], "constraints": "Constraints:\n1 <= prices.length <= 10^5\n1 <= prices[i] <= 10^5", "notes": ""}, "2109": {"label": "Medium", "title": "Adding Spaces to a String", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5579999999999999, "total_accepted": 18900.0, "total_submissions": 33800.0, "testcase_example": "'\"LeetcodeHelpsMeLearn\"\\n[8,13,15]'", "body": "You are given a 0-indexed string s and a 0-indexed integer array spaces that describes the indices in the original string where spaces will be added. Each space should be inserted before the character at the given index.\nFor example, given s = \"EnjoyYourCoffee\" and spaces = [5, 9], we place spaces before 'Y' and 'C', which are at indices 5 and 9 respectively. Thus, we obtain \"Enjoy Your Coffee\".\nReturn the modified string after the spaces have been added.", "examples": [{"full_text": "Example 1:\nInput: s = \"LeetcodeHelpsMeLearn\", spaces = [8,13,15]\nOutput: \"Leetcode Helps Me Learn\"\nExplanation:\nThe indices 8, 13, and 15 correspond to the underlined characters in \"LeetcodeHelpsMeLearn\".\nWe then place spaces before those characters.", "input": "Input: s = \"LeetcodeHelpsMeLearn\", spaces = [8,13,15]", "output": "Output: \"Leetcode Helps Me Learn\"", "explanation": "Explanation:\nThe indices 8, 13, and 15 correspond to the underlined characters in \"LeetcodeHelpsMeLearn\".\nWe then place spaces before those characters."}, {"full_text": "Example 2:\nInput: s = \"icodeinpython\", spaces = [1,5,7,9]\nOutput: \"i code in py thon\"\nExplanation:\nThe indices 1, 5, 7, and 9 correspond to the underlined characters in \"icodeinpython\".\nWe then place spaces before those characters.", "input": "Input: s = \"icodeinpython\", spaces = [1,5,7,9]", "output": "Output: \"i code in py thon\"", "explanation": "Explanation:\nThe indices 1, 5, 7, and 9 correspond to the underlined characters in \"icodeinpython\".\nWe then place spaces before those characters."}, {"full_text": "Example 3:\nInput: s = \"spacing\", spaces = [0,1,2,3,4,5,6]\nOutput: \" s p a c i n g\"\nExplanation:\nWe are also able to place spaces before the first character of the string.", "input": "Input: s = \"spacing\", spaces = [0,1,2,3,4,5,6]", "output": "Output: \" s p a c i n g\"", "explanation": "Explanation:\nWe are also able to place spaces before the first character of the string."}], "constraints": "Constraints:\n1 <= s.length <= 3 * 10^5\ns consists only of lowercase and uppercase English letters.\n1 <= spaces.length <= 3 * 10^5\n0 <= spaces[i] <= s.length - 1\nAll the values of spaces are strictly increasing.", "notes": ""}, "2105": {"label": "Medium", "title": "Watering Plants II", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5136, "total_accepted": 9800.0, "total_submissions": 19000.0, "testcase_example": "'[2,2,3,3]\\n5\\n5'", "body": "Alice and Bob want to water n plants in their garden. The plants are arranged in a row and are labeled from 0 to n - 1 from left to right where the i^th plant is located at x = i.\nEach plant needs a specific amount of water. Alice and Bob have a watering can each, initially full. They water the plants in the following way:\nAlice waters the plants in order from left to right, starting from the 0^th plant. Bob waters the plants in order from right to left, starting from the (n - 1)^th plant. They begin watering the plants simultaneously.\nIt takes the same amount of time to water each plant regardless of how much water it needs.\nAlice/Bob must water the plant if they have enough in their can to fully water it. Otherwise, they first refill their can (instantaneously) then water the plant.\nIn case both Alice and Bob reach the same plant, the one with more water currently in his/her watering can should water this plant. If they have the same amount of water, then Alice should water this plant.\nGiven a 0-indexed integer array plants of n integers, where plants[i] is the amount of water the i^th plant needs, and two integers capacityA and capacityB representing the capacities of Alice's and Bob's watering cans respectively, return the number of times they have to refill to water all the plants.", "examples": [{"full_text": "Example 1:\nInput: plants = [2,2,3,3], capacityA = 5, capacityB = 5\nOutput: 1\nExplanation:\n- Initially, Alice and Bob have 5 units of water each in their watering cans.\n- Alice waters plant 0, Bob waters plant 3.\n- Alice and Bob now have 3 units and 2 units of water respectively.\n- Alice has enough water for plant 1, so she waters it. Bob does not have enough water for plant 2, so he refills his can then waters it.\nSo, the total number of times they have to refill to water all the plants is 0 + 0 + 1 + 0 = 1.", "input": "Input: plants = [2,2,3,3], capacityA = 5, capacityB = 5", "output": "Output: 1", "explanation": "Explanation:\n- Initially, Alice and Bob have 5 units of water each in their watering cans.\n- Alice waters plant 0, Bob waters plant 3.\n- Alice and Bob now have 3 units and 2 units of water respectively.\n- Alice has enough water for plant 1, so she waters it. Bob does not have enough water for plant 2, so he refills his can then waters it.\nSo, the total number of times they have to refill to water all the plants is 0 + 0 + 1 + 0 = 1."}, {"full_text": "Example 2:\nInput: plants = [2,2,3,3], capacityA = 3, capacityB = 4\nOutput: 2\nExplanation:\n- Initially, Alice and Bob have 3 units and 4 units of water in their watering cans respectively.\n- Alice waters plant 0, Bob waters plant 3.\n- Alice and Bob now have 1 unit of water each, and need to water plants 1 and 2 respectively.\n- Since neither of them have enough water for their current plants, they refill their cans and then water the plants.\nSo, the total number of times they have to refill to water all the plants is 0 + 1 + 1 + 0 = 2.", "input": "Input: plants = [2,2,3,3], capacityA = 3, capacityB = 4", "output": "Output: 2", "explanation": "Explanation:\n- Initially, Alice and Bob have 3 units and 4 units of water in their watering cans respectively.\n- Alice waters plant 0, Bob waters plant 3.\n- Alice and Bob now have 1 unit of water each, and need to water plants 1 and 2 respectively.\n- Since neither of them have enough water for their current plants, they refill their cans and then water the plants.\nSo, the total number of times they have to refill to water all the plants is 0 + 1 + 1 + 0 = 2."}, {"full_text": "Example 3:\nInput: plants = [5], capacityA = 10, capacityB = 8\nOutput: 0\nExplanation:\n- There is only one plant.\n- Alice's watering can has 10 units of water, whereas Bob's can has 8 units. Since Alice has more water in her can, she waters this plant.\nSo, the total number of times they have to refill is 0.", "input": "Input: plants = [5], capacityA = 10, capacityB = 8", "output": "Output: 0", "explanation": "Explanation:\n- There is only one plant.\n- Alice's watering can has 10 units of water, whereas Bob's can has 8 units. Since Alice has more water in her can, she waters this plant.\nSo, the total number of times they have to refill is 0."}], "constraints": "Constraints:\nn == plants.length\n1 <= n <= 10^5\n1 <= plants[i] <= 10^6\nmax(plants[i]) <= capacityA, capacityB <= 10^9", "notes": ""}, "2104": {"label": "Medium", "title": "Sum of Subarray Ranges", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5914, "total_accepted": 14700.0, "total_submissions": 24900.0, "testcase_example": "'[1,2,3]'", "body": "You are given an integer array nums. The range of a subarray of nums is the difference between the largest and smallest element in the subarray.\nReturn the sum of all subarray ranges of nums.\nA subarray is a contiguous non-empty sequence of elements within an array.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,2,3]\nOutput: 4\nExplanation: The 6 subarrays of nums are the following:\n[1], range = largest - smallest = 1 - 1 = 0\n[2], range = 2 - 2 = 0\n[3], range = 3 - 3 = 0\n[1,2], range = 2 - 1 = 1\n[2,3], range = 3 - 2 = 1\n[1,2,3], range = 3 - 1 = 2\nSo the sum of all ranges is 0 + 0 + 0 + 1 + 1 + 2 = 4.", "input": "Input: nums = [1,2,3]", "output": "Output: 4", "explanation": "Explanation: The 6 subarrays of nums are the following:\n[1], range = largest - smallest = 1 - 1 = 0\n[2], range = 2 - 2 = 0\n[3], range = 3 - 3 = 0\n[1,2], range = 2 - 1 = 1\n[2,3], range = 3 - 2 = 1\n[1,2,3], range = 3 - 1 = 2\nSo the sum of all ranges is 0 + 0 + 0 + 1 + 1 + 2 = 4."}, {"full_text": "Example 2:\nInput: nums = [1,3,3]\nOutput: 4\nExplanation: The 6 subarrays of nums are the following:\n[1], range = largest - smallest = 1 - 1 = 0\n[3], range = 3 - 3 = 0\n[3], range = 3 - 3 = 0\n[1,3], range = 3 - 1 = 2\n[3,3], range = 3 - 3 = 0\n[1,3,3], range = 3 - 1 = 2\nSo the sum of all ranges is 0 + 0 + 0 + 2 + 0 + 2 = 4.", "input": "Input: nums = [1,3,3]", "output": "Output: 4", "explanation": "Explanation: The 6 subarrays of nums are the following:\n[1], range = largest - smallest = 1 - 1 = 0\n[3], range = 3 - 3 = 0\n[3], range = 3 - 3 = 0\n[1,3], range = 3 - 1 = 2\n[3,3], range = 3 - 3 = 0\n[1,3,3], range = 3 - 1 = 2\nSo the sum of all ranges is 0 + 0 + 0 + 2 + 0 + 2 = 4."}, {"full_text": "Example 3:\nInput: nums = [4,-2,-3,4,1]\nOutput: 59\nExplanation: The sum of all subarray ranges of nums is 59.", "input": "Input: nums = [4,-2,-3,4,1]", "output": "Output: 59", "explanation": "Explanation: The sum of all subarray ranges of nums is 59."}], "constraints": "Constraints:\n1 <= nums.length <= 1000\n-10^9 <= nums[i] <= 10^9", "notes": "Follow-up: Could you find a solution with O(n) time complexity?"}, "2101": {"label": "Medium", "title": "Detonate the Maximum Bombs", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3946, "total_accepted": 7800.0, "total_submissions": 19800.0, "testcase_example": "'[[2,1,3],[6,1,4]]'", "body": "You are given a list of bombs. The range of a bomb is defined as the area where its effect can be felt. This area is in the shape of a circle with the center as the location of the bomb.\nThe bombs are represented by a 0-indexed 2D integer array bombs where bombs[i] = [xi, yi, ri]. xi and yi denote the X-coordinate and Y-coordinate of the location of the i^th bomb, whereas ri denotes the radius of its range.\nYou may choose to detonate a single bomb. When a bomb is detonated, it will detonate all bombs that lie in its range. These bombs will further detonate the bombs that lie in their ranges.\nGiven the list of bombs, return the maximum number of bombs that can be detonated if you are allowed to detonate only one bomb.", "examples": [{"full_text": "Example 1:\nInput: bombs = [[2,1,3],[6,1,4]]\nOutput: 2\nExplanation:\nThe above figure shows the positions and ranges of the 2 bombs.\nIf we detonate the left bomb, the right bomb will not be affected.\nBut if we detonate the right bomb, both bombs will be detonated.\nSo the maximum bombs that can be detonated is max(1, 2) = 2.", "input": "Input: bombs = [[2,1,3],[6,1,4]]", "output": "Output: 2", "explanation": "Explanation:\nThe above figure shows the positions and ranges of the 2 bombs.\nIf we detonate the left bomb, the right bomb will not be affected.\nBut if we detonate the right bomb, both bombs will be detonated.\nSo the maximum bombs that can be detonated is max(1, 2) = 2."}, {"full_text": "Example 2:\nInput: bombs = [[1,1,5],[10,10,5]]\nOutput: 1\nExplanation:\nDetonating either bomb will not detonate the other bomb, so the maximum number of bombs that can be detonated is 1.", "input": "Input: bombs = [[1,1,5],[10,10,5]]", "output": "Output: 1", "explanation": "Explanation:\nDetonating either bomb will not detonate the other bomb, so the maximum number of bombs that can be detonated is 1."}, {"full_text": "Example 3:\nInput: bombs = [[1,2,3],[2,3,1],[3,4,2],[4,5,3],[5,6,4]]\nOutput: 5\nExplanation:\nThe best bomb to detonate is bomb 0 because:\n- Bomb 0 detonates bombs 1 and 2. The red circle denotes the range of bomb 0.\n- Bomb 2 detonates bomb 3. The blue circle denotes the range of bomb 2.\n- Bomb 3 detonates bomb 4. The green circle denotes the range of bomb 3.\nThus all 5 bombs are detonated.", "input": "Input: bombs = [[1,2,3],[2,3,1],[3,4,2],[4,5,3],[5,6,4]]", "output": "Output: 5", "explanation": "Explanation:\nThe best bomb to detonate is bomb 0 because:\n- Bomb 0 detonates bombs 1 and 2. The red circle denotes the range of bomb 0.\n- Bomb 2 detonates bomb 3. The blue circle denotes the range of bomb 2.\n- Bomb 3 detonates bomb 4. The green circle denotes the range of bomb 3.\nThus all 5 bombs are detonated."}], "constraints": "Constraints:\n1 <= bombs.length\n<= 100\nbombs[i].length == 3\n1 <= xi, yi, ri <= 10^5", "notes": ""}, "2100": {"label": "Medium", "title": "Find Good Days to Rob the Bank", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4551, "total_accepted": 7600.0, "total_submissions": 16800.0, "testcase_example": "'[5,3,3,3,5,6,2]\\n2'", "body": "You and a gang of thieves are planning on robbing a bank. You are given a 0-indexed integer array security, where security[i] is the number of guards on duty on the i^th day. The days are numbered starting from 0. You are also given an integer time.\nThe i^th day is a good day to rob the bank if:\nThere are at least time days before and after the i^th day,\nThe number of guards at the bank for the time days before i are non-increasing, and\nThe number of guards at the bank for the time days after i are non-decreasing.\nMore formally, this means day i is a good day to rob the bank if and only if security[i - time] >= security[i - time + 1] >= ... >= security[i] <= ... <= security[i + time - 1] <= security[i + time].\nReturn a list of all days (0-indexed) that are good days to rob the bank. The order that the days are returned in does not matter.", "examples": [{"full_text": "Example 1:\nInput: security = [5,3,3,3,5,6,2], time = 2\nOutput: [2,3]\nExplanation:\nOn day 2, we have security[0] >= security[1] >= security[2] <= security[3] <= security[4].\nOn day 3, we have security[1] >= security[2] >= security[3] <= security[4] <= security[5].\nNo other days satisfy this condition, so days 2 and 3 are the only good days to rob the bank.", "input": "Input: security = [5,3,3,3,5,6,2], time = 2", "output": "Output: [2,3]", "explanation": "Explanation:\nOn day 2, we have security[0] >= security[1] >= security[2] <= security[3] <= security[4].\nOn day 3, we have security[1] >= security[2] >= security[3] <= security[4] <= security[5].\nNo other days satisfy this condition, so days 2 and 3 are the only good days to rob the bank."}, {"full_text": "Example 2:\nInput: security = [1,1,1,1,1], time = 0\nOutput: [0,1,2,3,4]\nExplanation:\nSince time equals 0, every day is a good day to rob the bank, so return every day.", "input": "Input: security = [1,1,1,1,1], time = 0", "output": "Output: [0,1,2,3,4]", "explanation": "Explanation:\nSince time equals 0, every day is a good day to rob the bank, so return every day."}, {"full_text": "Example 3:\nInput: security = [1,2,3,4,5,6], time = 2\nOutput: []\nExplanation:\nNo day has 2 days before it that have a non-increasing number of guards.\nThus, no day is a good day to rob the bank, so return an empty list.", "input": "Input: security = [1,2,3,4,5,6], time = 2", "output": "Output: []", "explanation": "Explanation:\nNo day has 2 days before it that have a non-increasing number of guards.\nThus, no day is a good day to rob the bank, so return an empty list."}], "constraints": "Constraints:\n1 <= security.length <= 10^5\n0 <= security[i], time <= 10^5", "notes": ""}, "2096": {"label": "Medium", "title": "Step-By-Step Directions From a Binary Tree Node to Another", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.47, "total_accepted": 16100.000000000002, "total_submissions": 34300.0, "testcase_example": "'[5,1,2,3,null,6,4]\\n3\\n6'", "body": "You are given the root of a binary tree with n nodes. Each node is uniquely assigned a value from 1 to n. You are also given an integer startValue representing the value of the start node s, and a different integer destValue representing the value of the destination node t.\nFind the shortest path starting from node s and ending at node t. Generate step-by-step directions of such path as a string consisting of only the uppercase letters 'L', 'R', and 'U'. Each letter indicates a specific direction:\n'L' means to go from a node to its left child node.\n'R' means to go from a node to its right child node.\n'U' means to go from a node to its parent node.\nReturn the step-by-step directions of the shortest path from node s to node t.", "examples": [{"full_text": "Example 1:\nInput: root = [5,1,2,3,null,6,4], startValue = 3, destValue = 6\nOutput: \"UURL\"\nExplanation: The shortest path is: 3 \u2192 1 \u2192 5 \u2192 2 \u2192 6.", "input": "Input: root = [5,1,2,3,null,6,4], startValue = 3, destValue = 6", "output": "Output: \"UURL\"", "explanation": "Explanation: The shortest path is: 3 \u2192 1 \u2192 5 \u2192 2 \u2192 6."}, {"full_text": "Example 2:\nInput: root = [2,1], startValue = 2, destValue = 1\nOutput: \"L\"\nExplanation: The shortest path is: 2 \u2192 1.", "input": "Input: root = [2,1], startValue = 2, destValue = 1", "output": "Output: \"L\"", "explanation": "Explanation: The shortest path is: 2 \u2192 1."}], "constraints": "Constraints:\nThe number of nodes in the tree is n.\n2 <= n <= 10^5\n1 <= Node.val <= n\nAll the values in the tree are unique.\n1 <= startValue, destValue <= n\nstartValue != destValue", "notes": ""}, "2095": {"label": "Medium", "title": "Delete the Middle Node of a Linked List", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5817, "total_accepted": 30200.0, "total_submissions": 51900.0, "testcase_example": "'[1,3,4,7,1,2,6]'", "body": "You are given the head of a linked list. Delete the middle node, and return the head of the modified linked list.\nThe middle node of a linked list of size n is the \u230an / 2\u230b^th node from the start using 0-based indexing, where \u230ax\u230b denotes the largest integer less than or equal to x.\nFor n = 1, 2, 3, 4, and 5, the middle nodes are 0, 1, 1, 2, and 2, respectively.", "examples": [{"full_text": "Example 1:\nInput: head = [1,3,4,7,1,2,6]\nOutput: [1,3,4,1,2,6]\nExplanation:\nThe above figure represents the given linked list. The indices of the nodes are written below.\nSince n = 7, node 3 with value 7 is the middle node, which is marked in red.\nWe return the new list after removing this node.", "input": "Input: head = [1,3,4,7,1,2,6]", "output": "Output: [1,3,4,1,2,6]", "explanation": "Explanation:\nThe above figure represents the given linked list. The indices of the nodes are written below.\nSince n = 7, node 3 with value 7 is the middle node, which is marked in red.\nWe return the new list after removing this node."}, {"full_text": "Example 2:\nInput: head = [1,2,3,4]\nOutput: [1,2,4]\nExplanation:\nThe above figure represents the given linked list.\nFor n = 4, node 2 with value 3 is the middle node, which is marked in red.", "input": "Input: head = [1,2,3,4]", "output": "Output: [1,2,4]", "explanation": "Explanation:\nThe above figure represents the given linked list.\nFor n = 4, node 2 with value 3 is the middle node, which is marked in red."}, {"full_text": "Example 3:\nInput: head = [2,1]\nOutput: [2]\nExplanation:\nThe above figure represents the given linked list.\nFor n = 2, node 1 with value 1 is the middle node, which is marked in red.\nNode 0 with value 2 is the only node remaining after removing node 1.", "input": "Input: head = [2,1]", "output": "Output: [2]", "explanation": "Explanation:\nThe above figure represents the given linked list.\nFor n = 2, node 1 with value 1 is the middle node, which is marked in red.\nNode 0 with value 2 is the only node remaining after removing node 1."}], "constraints": "Constraints:\nThe number of nodes in the list is in the range [1, 10^5].\n1 <= Node.val <= 10^5", "notes": ""}, "2091": {"label": "Medium", "title": "Removing Minimum and Maximum From Array", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5808, "total_accepted": 14000.0, "total_submissions": 24200.0, "testcase_example": "'[2,10,7,5,4,1,8,6]'", "body": "You are given a 0-indexed array of distinct integers nums.\nThere is an element in nums that has the lowest value and an element that has the highest value. We call them the minimum and maximum respectively. Your goal is to remove both these elements from the array.\nA deletion is defined as either removing an element from the front of the array or removing an element from the back of the array.\nReturn the minimum number of deletions it would take to remove both the minimum and maximum element from the array.", "examples": [{"full_text": "Example 1:\nInput: nums = [2,10,7,5,4,1,8,6]\nOutput: 5\nExplanation:\nThe minimum element in the array is nums[5], which is 1.\nThe maximum element in the array is nums[1], which is 10.\nWe can remove both the minimum and maximum by removing 2 elements from the front and 3 elements from the back.\nThis results in 2 + 3 = 5 deletions, which is the minimum number possible.", "input": "Input: nums = [2,10,7,5,4,1,8,6]", "output": "Output: 5", "explanation": "Explanation:\nThe minimum element in the array is nums[5], which is 1.\nThe maximum element in the array is nums[1], which is 10.\nWe can remove both the minimum and maximum by removing 2 elements from the front and 3 elements from the back.\nThis results in 2 + 3 = 5 deletions, which is the minimum number possible."}, {"full_text": "Example 2:\nInput: nums = [0,-4,19,1,8,-2,-3,5]\nOutput: 3\nExplanation:\nThe minimum element in the array is nums[1], which is -4.\nThe maximum element in the array is nums[2], which is 19.\nWe can remove both the minimum and maximum by removing 3 elements from the front.\nThis results in only 3 deletions, which is the minimum number possible.", "input": "Input: nums = [0,-4,19,1,8,-2,-3,5]", "output": "Output: 3", "explanation": "Explanation:\nThe minimum element in the array is nums[1], which is -4.\nThe maximum element in the array is nums[2], which is 19.\nWe can remove both the minimum and maximum by removing 3 elements from the front.\nThis results in only 3 deletions, which is the minimum number possible."}, {"full_text": "Example 3:\nInput: nums = [101]\nOutput: 1\nExplanation:\nThere is only one element in the array, which makes it both the minimum and maximum element.\nWe can remove it with 1 deletion.", "input": "Input: nums = [101]", "output": "Output: 1", "explanation": "Explanation:\nThere is only one element in the array, which makes it both the minimum and maximum element.\nWe can remove it with 1 deletion."}], "constraints": "Constraints:\n1 <= nums.length <= 10^5\n-10^5 <= nums[i] <= 10^5\nThe integers in nums are distinct.", "notes": ""}, "2090": {"label": "Medium", "title": "K Radius Subarray Averages", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4036, "total_accepted": 12500.0, "total_submissions": 31000.0, "testcase_example": "'[7,4,3,9,1,8,5,2,6]\\n3'", "body": "You are given a 0-indexed array nums of n integers, and an integer k.\nThe k-radius average for a subarray of nums centered at some index i with the radius k is the average of all elements in nums between the indices i - k and i + k (inclusive). If there are less than k elements before or after the index i, then the k-radius average is -1.\nBuild and return an array avgs of length n where avgs[i] is the k-radius average for the subarray centered at index i.\nThe average of x elements is the sum of the x elements divided by x, using integer division. The integer division truncates toward zero, which means losing its fractional part.\nFor example, the average of four elements 2, 3, 1, and 5 is (2 + 3 + 1 + 5) / 4 = 11 / 4 = 2.75, which truncates to 2.", "examples": [{"full_text": "Example 1:\nInput: nums = [7,4,3,9,1,8,5,2,6], k = 3\nOutput: [-1,-1,-1,5,4,4,-1,-1,-1]\nExplanation:\n- avg[0], avg[1], and avg[2] are -1 because there are less than k elements before each index.\n- The sum of the subarray centered at index 3 with radius 3 is: 7 + 4 + 3 + 9 + 1 + 8 + 5 = 37.\nUsing integer division, avg[3] = 37 / 7 = 5.\n- For the subarray centered at index 4, avg[4] = (4 + 3 + 9 + 1 + 8 + 5 + 2) / 7 = 4.\n- For the subarray centered at index 5, avg[5] = (3 + 9 + 1 + 8 + 5 + 2 + 6) / 7 = 4.\n- avg[6], avg[7], and avg[8] are -1 because there are less than k elements after each index.", "input": "Input: nums = [7,4,3,9,1,8,5,2,6], k = 3", "output": "Output: [-1,-1,-1,5,4,4,-1,-1,-1]", "explanation": "Explanation:\n- avg[0], avg[1], and avg[2] are -1 because there are less than k elements before each index.\n- The sum of the subarray centered at index 3 with radius 3 is: 7 + 4 + 3 + 9 + 1 + 8 + 5 = 37.\nUsing integer division, avg[3] = 37 / 7 = 5.\n- For the subarray centered at index 4, avg[4] = (4 + 3 + 9 + 1 + 8 + 5 + 2) / 7 = 4.\n- For the subarray centered at index 5, avg[5] = (3 + 9 + 1 + 8 + 5 + 2 + 6) / 7 = 4.\n- avg[6], avg[7], and avg[8] are -1 because there are less than k elements after each index."}, {"full_text": "Example 2:\nInput: nums = [100000], k = 0\nOutput: [100000]\nExplanation:\n- The sum of the subarray centered at index 0 with radius 0 is: 100000.\navg[0] = 100000 / 1 = 100000.", "input": "Input: nums = [100000], k = 0", "output": "Output: [100000]", "explanation": "Explanation:\n- The sum of the subarray centered at index 0 with radius 0 is: 100000.\navg[0] = 100000 / 1 = 100000."}, {"full_text": "Example 3:\nInput: nums = [8], k = 100000\nOutput: [-1]\nExplanation:\n- avg[0] is -1 because there are less than k elements before and after index 0.", "input": "Input: nums = [8], k = 100000", "output": "Output: [-1]", "explanation": "Explanation:\n- avg[0] is -1 because there are less than k elements before and after index 0."}], "constraints": "Constraints:\nn == nums.length\n1 <= n <= 10^5\n0 <= nums[i], k <= 10^5", "notes": ""}, "2087": {"label": "Medium", "title": "Minimum Cost Homecoming of a Robot in a Grid", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.49340000000000006, "total_accepted": 6900.0, "total_submissions": 14000.0, "testcase_example": "'[1,0]\\n[2,3]\\n[5,4,3]\\n[8,2,6,7]'", "body": "There is an m x n grid, where (0, 0) is the top-left cell and (m - 1, n - 1) is the bottom-right cell. You are given an integer array startPos where startPos = [startrow, startcol] indicates that initially, a robot is at the cell (startrow, startcol). You are also given an integer array homePos where homePos = [homerow, homecol] indicates that its home is at the cell (homerow, homecol).\nThe robot needs to go to its home. It can move one cell in four directions: left, right, up, or down, and it can not move outside the boundary. Every move incurs some cost. You are further given two 0-indexed integer arrays: rowCosts of length m and colCosts of length n.\nIf the robot moves up or down into a cell whose row is r, then this move costs rowCosts[r].\nIf the robot moves left or right into a cell whose column is c, then this move costs colCosts[c].\nReturn the minimum total cost for this robot to return home.", "examples": [{"full_text": "Example 1:\nInput: startPos = [1, 0], homePos = [2, 3], rowCosts = [5, 4, 3], colCosts = [8, 2, 6, 7]\nOutput: 18\nExplanation: One optimal path is that:\nStarting from (1, 0)\n-> It goes down to (2, 0). This move costs rowCosts[2] = 3.\n-> It goes right to (2, 1). This move costs colCosts[1] = 2.\n-> It goes right to (2, 2). This move costs colCosts[2] = 6.\n-> It goes right to (2, 3). This move costs colCosts[3] = 7.\nThe total cost is 3 + 2 + 6 + 7 = 18", "input": "Input: startPos = [1, 0], homePos = [2, 3], rowCosts = [5, 4, 3], colCosts = [8, 2, 6, 7]", "output": "Output: 18", "explanation": "Explanation: One optimal path is that:\nStarting from (1, 0)\n-> It goes down to (2, 0). This move costs rowCosts[2] = 3.\n-> It goes right to (2, 1). This move costs colCosts[1] = 2.\n-> It goes right to (2, 2). This move costs colCosts[2] = 6.\n-> It goes right to (2, 3). This move costs colCosts[3] = 7.\nThe total cost is 3 + 2 + 6 + 7 = 18"}, {"full_text": "Example 2:\nInput: startPos = [0, 0], homePos = [0, 0], rowCosts = [5], colCosts = [26]\nOutput: 0\nExplanation: The robot is already at its home. Since no moves occur, the total cost is 0.", "input": "Input: startPos = [0, 0], homePos = [0, 0], rowCosts = [5], colCosts = [26]", "output": "Output: 0", "explanation": "Explanation: The robot is already at its home. Since no moves occur, the total cost is 0."}], "constraints": "Constraints:\nm == rowCosts.length\nn == colCosts.length\n1 <= m, n <= 10^5\n0 <= rowCosts[r], colCosts[c] <= 10^4\nstartPos.length == 2\nhomePos.length == 2\n0 <= startrow, homerow < m\n0 <= startcol, homecol < n", "notes": ""}, "2086": {"label": "Medium", "title": "Minimum Number of Buckets Required to Collect Rainwater from Houses", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.455, "total_accepted": 8500.0, "total_submissions": 18700.0, "testcase_example": "'\"H..H\"'", "body": "You are given a 0-indexed string street. Each character in street is either 'H' representing a house or '.' representing an empty space.\nYou can place buckets on the empty spaces to collect rainwater that falls from the adjacent houses. The rainwater from a house at index i is collected if a bucket is placed at index i - 1 and/or index i + 1. A single bucket, if placed adjacent to two houses, can collect the rainwater from both houses.\nReturn the minimum number of buckets needed so that for every house, there is at least one bucket collecting rainwater from it, or -1 if it is impossible.", "examples": [{"full_text": "Example 1:\nInput: street = \"H..H\"\nOutput: 2\nExplanation:\nWe can put buckets at index 1 and index 2.\n\"H..H\" -> \"HBBH\" ('B' denotes where a bucket is placed).\nThe house at index 0 has a bucket to its right, and the house at index 3 has a bucket to its left.\nThus, for every house, there is at least one bucket collecting rainwater from it.", "input": "Input: street = \"H..H\"", "output": "Output: 2", "explanation": "Explanation:\nWe can put buckets at index 1 and index 2.\n\"H..H\" -> \"HBBH\" ('B' denotes where a bucket is placed).\nThe house at index 0 has a bucket to its right, and the house at index 3 has a bucket to its left.\nThus, for every house, there is at least one bucket collecting rainwater from it."}, {"full_text": "Example 2:\nInput: street = \".H.H.\"\nOutput: 1\nExplanation:\nWe can put a bucket at index 2.\n\".H.H.\" -> \".HBH.\" ('B' denotes where a bucket is placed).\nThe house at index 1 has a bucket to its right, and the house at index 3 has a bucket to its left.\nThus, for every house, there is at least one bucket collecting rainwater from it.", "input": "Input: street = \".H.H.\"", "output": "Output: 1", "explanation": "Explanation:\nWe can put a bucket at index 2.\n\".H.H.\" -> \".HBH.\" ('B' denotes where a bucket is placed).\nThe house at index 1 has a bucket to its right, and the house at index 3 has a bucket to its left.\nThus, for every house, there is at least one bucket collecting rainwater from it."}, {"full_text": "Example 3:\nInput: street = \".HHH.\"\nOutput: -1\nExplanation:\nThere is no empty space to place a bucket to collect the rainwater from the house at index 2.\nThus, it is impossible to collect the rainwater from all the houses.", "input": "Input: street = \".HHH.\"", "output": "Output: -1", "explanation": "Explanation:\nThere is no empty space to place a bucket to collect the rainwater from the house at index 2.\nThus, it is impossible to collect the rainwater from all the houses."}], "constraints": "Constraints:\n1 <= street.length <= 10^5\nstreet[i] is either'H' or '.'.", "notes": ""}, "2080": {"label": "Medium", "title": "Range Frequency Queries", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3599, "total_accepted": 9700.0, "total_submissions": 27100.0, "testcase_example": "'[\"RangeFreqQuery\",\"query\",\"query\"]\\n' +\n  '[[[12,33,4,56,22,2,34,33,22,12,34,56]],[1,2,4],[0,11,33]]'", "body": "Design a data structure to find the frequency of a given value in a given subarray.\nThe frequency of a value in a subarray is the number of occurrences of that value in the subarray.\nImplement the RangeFreqQuery class:\nRangeFreqQuery(int[] arr) Constructs an instance of the class with the given 0-indexed integer array arr.\nint query(int left, int right, int value) Returns the frequency of value in the subarray arr[left...right].\nA subarray is a contiguous sequence of elements within an array. arr[left...right] denotes the subarray that contains the elements of nums between indices left and right (inclusive).", "examples": [{"full_text": "Example 1:\nInput\n[\"RangeFreqQuery\", \"query\", \"query\"]\n[[[12, 33, 4, 56, 22, 2, 34, 33, 22, 12, 34, 56]], [1, 2, 4], [0, 11, 33]]\nOutput\n[null, 1, 2]\nExplanation\nRangeFreqQuery rangeFreqQuery = new RangeFreqQuery([12, 33, 4, 56, 22, 2, 34, 33, 22, 12, 34, 56]);\nrangeFreqQuery.query(1, 2, 4); // return 1. The value 4 occurs 1 time in the subarray [33, 4]\nrangeFreqQuery.query(0, 11, 33); // return 2. The value 33 occurs 2 times in the whole array.", "input": "Input\n[\"RangeFreqQuery\", \"query\", \"query\"]\n[[[12, 33, 4, 56, 22, 2, 34, 33, 22, 12, 34, 56]], [1, 2, 4], [0, 11, 33]]", "output": "Output\n[null, 1, 2]", "explanation": "Explanation\nRangeFreqQuery rangeFreqQuery = new RangeFreqQuery([12, 33, 4, 56, 22, 2, 34, 33, 22, 12, 34, 56]);\nrangeFreqQuery.query(1, 2, 4); // return 1. The value 4 occurs 1 time in the subarray [33, 4]\nrangeFreqQuery.query(0, 11, 33); // return 2. The value 33 occurs 2 times in the whole array."}], "constraints": "Constraints:\n1 <= arr.length <= 10^5\n1 <= arr[i], value <= 10^4\n0 <= left <= right < arr.length\nAt most 10^5 calls will be made to query", "notes": ""}, "2079": {"label": "Medium", "title": "Watering Plants", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.8044, "total_accepted": 16300.0, "total_submissions": 20300.0, "testcase_example": "'[2,2,3,3]\\n5'", "body": "You want to water n plants in your garden with a watering can. The plants are arranged in a row and are labeled from 0 to n - 1 from left to right where the i^th plant is located at x = i. There is a river at x = -1 that you can refill your watering can at.\nEach plant needs a specific amount of water. You will water the plants in the following way:\nWater the plants in order from left to right.\nAfter watering the current plant, if you do not have enough water to completely water the next plant, return to the river to fully refill the watering can.\nYou cannot refill the watering can early.\nYou are initially at the river (i.e., x = -1). It takes one step to move one unit on the x-axis.\nGiven a 0-indexed integer array plants of n integers, where plants[i] is the amount of water the i^th plant needs, and an integer capacity representing the watering can capacity, return the number of steps needed to water all the plants.", "examples": [{"full_text": "Example 1:\nInput: plants = [2,2,3,3], capacity = 5\nOutput: 14\nExplanation: Start at the river with a full watering can:\n- Walk to plant 0 (1 step) and water it. Watering can has 3 units of water.\n- Walk to plant 1 (1 step) and water it. Watering can has 1 unit of water.\n- Since you cannot completely water plant 2, walk back to the river to refill (2 steps).\n- Walk to plant 2 (3 steps) and water it. Watering can has 2 units of water.\n- Since you cannot completely water plant 3, walk back to the river to refill (3 steps).\n- Walk to plant 3 (4 steps) and water it.\nSteps needed = 1 + 1 + 2 + 3 + 3 + 4 = 14.", "input": "Input: plants = [2,2,3,3], capacity = 5", "output": "Output: 14", "explanation": "Explanation: Start at the river with a full watering can:\n- Walk to plant 0 (1 step) and water it. Watering can has 3 units of water.\n- Walk to plant 1 (1 step) and water it. Watering can has 1 unit of water.\n- Since you cannot completely water plant 2, walk back to the river to refill (2 steps).\n- Walk to plant 2 (3 steps) and water it. Watering can has 2 units of water.\n- Since you cannot completely water plant 3, walk back to the river to refill (3 steps).\n- Walk to plant 3 (4 steps) and water it.\nSteps needed = 1 + 1 + 2 + 3 + 3 + 4 = 14."}, {"full_text": "Example 2:\nInput: plants = [1,1,1,4,2,3], capacity = 4\nOutput: 30\nExplanation: Start at the river with a full watering can:\n- Water plants 0, 1, and 2 (3 steps). Return to river (3 steps).\n- Water plant 3 (4 steps). Return to river (4 steps).\n- Water plant 4 (5 steps). Return to river (5 steps).\n- Water plant 5 (6 steps).\nSteps needed = 3 + 3 + 4 + 4 + 5 + 5 + 6 = 30.", "input": "Input: plants = [1,1,1,4,2,3], capacity = 4", "output": "Output: 30", "explanation": "Explanation: Start at the river with a full watering can:\n- Water plants 0, 1, and 2 (3 steps). Return to river (3 steps).\n- Water plant 3 (4 steps). Return to river (4 steps).\n- Water plant 4 (5 steps). Return to river (5 steps).\n- Water plant 5 (6 steps).\nSteps needed = 3 + 3 + 4 + 4 + 5 + 5 + 6 = 30."}, {"full_text": "Example 3:\nInput: plants = [7,7,7,7,7,7,7], capacity = 8\nOutput: 49\nExplanation: You have to refill before watering each plant.\nSteps needed = 1 + 1 + 2 + 2 + 3 + 3 + 4 + 4 + 5 + 5 + 6 + 6 + 7 = 49.", "input": "Input: plants = [7,7,7,7,7,7,7], capacity = 8", "output": "Output: 49", "explanation": "Explanation: You have to refill before watering each plant.\nSteps needed = 1 + 1 + 2 + 2 + 3 + 3 + 4 + 4 + 5 + 5 + 6 + 6 + 7 = 49."}], "constraints": "Constraints:\nn == plants.length\n1 <= n <= 1000\n1 <= plants[i] <= 10^6\nmax(plants[i]) <= capacity <= 10^9", "notes": ""}, "2075": {"label": "Medium", "title": "Decode the Slanted Ciphertext", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5, "total_accepted": 7300.0, "total_submissions": 14500.0, "testcase_example": "'\"ch ie pr\"\\n3'", "body": "A string originalText is encoded using a slanted transposition cipher to a string encodedText with the help of a matrix having a fixed number of rows rows.\noriginalText is placed first in a top-left to bottom-right manner.\nThe blue cells are filled first, followed by the red cells, then the yellow cells, and so on, until we reach the end of originalText. The arrow indicates the order in which the cells are filled. All empty cells are filled with ' '. The number of columns is chosen such that the rightmost column will not be empty after filling in originalText.\nencodedText is then formed by appending all characters of the matrix in a row-wise fashion.\nThe characters in the blue cells are appended first to encodedText, then the red cells, and so on, and finally the yellow cells. The arrow indicates the order in which the cells are accessed.\nFor example, if originalText = \"cipher\" and rows = 3, then we encode it in the following manner:\nThe blue arrows depict how originalText is placed in the matrix, and the red arrows denote the order in which encodedText is formed. In the above example, encodedText = \"ch ie pr\".\nGiven the encoded string encodedText and number of rows rows, return the original string originalText.\nNote: originalText does not have any trailing spaces ' '. The test cases are generated such that there is only one possible originalText.", "examples": [{"full_text": "Example 1:\nInput: encodedText = \"ch ie pr\", rows = 3\nOutput: \"cipher\"\nExplanation: This is the same example described in the problem description.", "input": "Input: encodedText = \"ch ie pr\", rows = 3", "output": "Output: \"cipher\"", "explanation": "Explanation: This is the same example described in the problem description."}, {"full_text": "Example 2:\nInput: encodedText = \"iveo eed l te olc\", rows = 4\nOutput: \"i love leetcode\"\nExplanation: The figure above denotes the matrix that was used to encode originalText.\nThe blue arrows show how we can find originalText from encodedText.", "input": "Input: encodedText = \"iveo eed l te olc\", rows = 4", "output": "Output: \"i love leetcode\"", "explanation": "Explanation: The figure above denotes the matrix that was used to encode originalText.\nThe blue arrows show how we can find originalText from encodedText."}, {"full_text": "Example 3:\nInput: encodedText = \"coding\", rows = 1\nOutput: \"coding\"\nExplanation: Since there is only 1 row, both originalText and encodedText are the same.", "input": "Input: encodedText = \"coding\", rows = 1", "output": "Output: \"coding\"", "explanation": "Explanation: Since there is only 1 row, both originalText and encodedText are the same."}], "constraints": "Constraints:\n0 <= encodedText.length <= 10^6\nencodedText consists of lowercase English letters and ' ' only.\nencodedText is a valid encoding of some originalText that does not have trailing spaces.\n1 <= rows <= 1000\nThe testcases are generated such that there is only one possible originalText.", "notes": ""}, "2074": {"label": "Medium", "title": "Reverse Nodes in Even Length Groups", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.49, "total_accepted": 8200.0, "total_submissions": 16800.0, "testcase_example": "'[5,2,6,3,9,1,7,3,8,4]'", "body": "You are given the head of a linked list.\nThe nodes in the linked list are sequentially assigned to non-empty groups whose lengths form the sequence of the natural numbers (1, 2, 3, 4, ...). The length of a group is the number of nodes assigned to it. In other words,\nThe 1^st node is assigned to the first group.\nThe 2^nd and the 3^rd nodes are assigned to the second group.\nThe 4^th, 5^th, and 6^th nodes are assigned to the third group, and so on.\nNote that the length of the last group may be less than or equal to 1 + the length of the second to last group.\nReverse the nodes in each group with an even length, and return the head of the modified linked list.", "examples": [{"full_text": "Example 1:\nInput: head = [5,2,6,3,9,1,7,3,8,4]\nOutput: [5,6,2,3,9,1,4,8,3,7]\nExplanation:\n- The length of the first group is 1, which is odd, hence no reversal occurs.\n- The length of the second group is 2, which is even, hence the nodes are reversed.\n- The length of the third group is 3, which is odd, hence no reversal occurs.\n- The length of the last group is 4, which is even, hence the nodes are reversed.", "input": "Input: head = [5,2,6,3,9,1,7,3,8,4]", "output": "Output: [5,6,2,3,9,1,4,8,3,7]", "explanation": "Explanation:\n- The length of the first group is 1, which is odd, hence no reversal occurs.\n- The length of the second group is 2, which is even, hence the nodes are reversed.\n- The length of the third group is 3, which is odd, hence no reversal occurs.\n- The length of the last group is 4, which is even, hence the nodes are reversed."}, {"full_text": "Example 2:\nInput: head = [1,1,0,6]\nOutput: [1,0,1,6]\nExplanation:\n- The length of the first group is 1. No reversal occurs.\n- The length of the second group is 2. The nodes are reversed.\n- The length of the last group is 1. No reversal occurs.", "input": "Input: head = [1,1,0,6]", "output": "Output: [1,0,1,6]", "explanation": "Explanation:\n- The length of the first group is 1. No reversal occurs.\n- The length of the second group is 2. The nodes are reversed.\n- The length of the last group is 1. No reversal occurs."}, {"full_text": "Example 3:\nInput: head = [1,1,0,6,5]\nOutput: [1,0,1,5,6]\nExplanation:\n- The length of the first group is 1. No reversal occurs.\n- The length of the second group is 2. The nodes are reversed.\n- The length of the last group is 2. The nodes are reversed.", "input": "Input: head = [1,1,0,6,5]", "output": "Output: [1,0,1,5,6]", "explanation": "Explanation:\n- The length of the first group is 1. No reversal occurs.\n- The length of the second group is 2. The nodes are reversed.\n- The length of the last group is 2. The nodes are reversed."}], "constraints": "Constraints:\nThe number of nodes in the list is in the range [1, 10^5].\n0 <= Node.val <= 10^5", "notes": ""}, "2070": {"label": "Medium", "title": "Most Beautiful Item for Each Query", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4851, "total_accepted": 7300.0, "total_submissions": 15000.0, "testcase_example": "'[[1,2],[3,2],[2,4],[5,6],[3,5]]\\n[1,2,3,4,5,6]'", "body": "You are given a 2D integer array items where items[i] = [pricei, beautyi] denotes the price and beauty of an item respectively.\nYou are also given a 0-indexed integer array queries. For each queries[j], you want to determine the maximum beauty of an item whose price is less than or equal to queries[j]. If no such item exists, then the answer to this query is 0.\nReturn an array answer of the same length as queries where answer[j] is the answer to the j^th query.", "examples": [{"full_text": "Example 1:\nInput: items = [[1,2],[3,2],[2,4],[5,6],[3,5]], queries = [1,2,3,4,5,6]\nOutput: [2,4,5,5,6,6]\nExplanation:\n- For queries[0]=1, [1,2] is the only item which has price <= 1. Hence, the answer for this query is 2.\n- For queries[1]=2, the items which can be considered are [1,2] and [2,4].\nThe maximum beauty among them is 4.\n- For queries[2]=3 and queries[3]=4, the items which can be considered are [1,2], [3,2], [2,4], and [3,5].\nThe maximum beauty among them is 5.\n- For queries[4]=5 and queries[5]=6, all items can be considered.\nHence, the answer for them is the maximum beauty of all items, i.e., 6.", "input": "Input: items = [[1,2],[3,2],[2,4],[5,6],[3,5]], queries = [1,2,3,4,5,6]", "output": "Output: [2,4,5,5,6,6]", "explanation": "Explanation:\n- For queries[0]=1, [1,2] is the only item which has price <= 1. Hence, the answer for this query is 2.\n- For queries[1]=2, the items which can be considered are [1,2] and [2,4].\nThe maximum beauty among them is 4.\n- For queries[2]=3 and queries[3]=4, the items which can be considered are [1,2], [3,2], [2,4], and [3,5].\nThe maximum beauty among them is 5.\n- For queries[4]=5 and queries[5]=6, all items can be considered.\nHence, the answer for them is the maximum beauty of all items, i.e., 6."}, {"full_text": "Example 2:\nInput: items = [[1,2],[1,2],[1,3],[1,4]], queries = [1]\nOutput: [4]\nExplanation:\nThe price of every item is equal to 1, so we choose the item with the maximum beauty 4.\nNote that multiple items can have the same price and/or beauty.", "input": "Input: items = [[1,2],[1,2],[1,3],[1,4]], queries = [1]", "output": "Output: [4]", "explanation": "Explanation:\nThe price of every item is equal to 1, so we choose the item with the maximum beauty 4.\nNote that multiple items can have the same price and/or beauty."}, {"full_text": "Example 3:\nInput: items = [[10,1000]], queries = [5]\nOutput: [0]\nExplanation:\nNo item has a price less than or equal to 5, so no item can be chosen.\nHence, the answer to the query is 0.", "input": "Input: items = [[10,1000]], queries = [5]", "output": "Output: [0]", "explanation": "Explanation:\nNo item has a price less than or equal to 5, so no item can be chosen.\nHence, the answer to the query is 0."}], "constraints": "Constraints:\n1 <= items.length, queries.length <= 10^5\nitems[i].length == 2\n1 <= pricei, beautyi, queries[j] <= 10^9", "notes": ""}, "2069": {"label": "Medium", "title": "Walking Robot Simulation II", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.2132, "total_accepted": 5100.0, "total_submissions": 24000.0, "testcase_example": "'[\"Robot\",\"step\",\"step\",\"getPos\",\"getDir\",\"step\",\"step\",\"step\",\"getPos\",\"getDir\"]\\n' +\n  '[[6,3],[2],[2],[],[],[2],[1],[4],[],[]]'", "body": "A width x height grid is on an XY-plane with the bottom-left cell at (0, 0) and the top-right cell at (width - 1, height - 1). The grid is aligned with the four cardinal directions (\"North\", \"East\", \"South\", and \"West\"). A robot is initially at cell (0, 0) facing direction \"East\".\nThe robot can be instructed to move for a specific number of steps. For each step, it does the following.\nAttempts to move forward one cell in the direction it is facing.\nIf the cell the robot is moving to is out of bounds, the robot instead turns 90 degrees counterclockwise and retries the step.\nAfter the robot finishes moving the number of steps required, it stops and awaits the next instruction.\nImplement the Robot class:\nRobot(int width, int height) Initializes the width x height grid with the robot at (0, 0) facing \"East\".\nvoid step(int num) Instructs the robot to move forward num steps.\nint[] getPos() Returns the current cell the robot is at, as an array of length 2, [x, y].\nString getDir() Returns the current direction of the robot, \"North\", \"East\", \"South\", or \"West\".", "examples": [{"full_text": "Example 1:\nInput\n[\"Robot\", \"move\", \"move\", \"getPos\", \"getDir\", \"move\", \"move\", \"move\", \"getPos\", \"getDir\"]\n[[6, 3], [2], [2], [], [], [2], [1], [4], [], []]\nOutput\n[null, null, null, [4, 0], \"East\", null, null, null, [1, 2], \"West\"]\nExplanation\nRobot robot = new Robot(6, 3); // Initialize the grid and the robot at (0, 0) facing East.\nrobot.move(2); // It moves two steps East to (2, 0), and faces East.\nrobot.move(2); // It moves two steps East to (4, 0), and faces East.\nrobot.getPos(); // return [4, 0]\nrobot.getDir(); // return \"East\"\nrobot.move(2); // It moves one step East to (5, 0), and faces East.\n// Moving the next step East would be out of bounds, so it turns and faces North.\n// Then, it moves one step North to (5, 1), and faces North.\nrobot.move(1); // It moves one step North to (5, 2), and faces North (not West).\nrobot.move(4); // Moving the next step North would be out of bounds, so it turns and faces West.\n// Then, it moves four steps West to (1, 2), and faces West.\nrobot.getPos(); // return [1, 2]\nrobot.getDir(); // return \"West\"", "input": "Input\n[\"Robot\", \"move\", \"move\", \"getPos\", \"getDir\", \"move\", \"move\", \"move\", \"getPos\", \"getDir\"]\n[[6, 3], [2], [2], [], [], [2], [1], [4], [], []]", "output": "Output\n[null, null, null, [4, 0], \"East\", null, null, null, [1, 2], \"West\"]", "explanation": "Explanation\nRobot robot = new Robot(6, 3); // Initialize the grid and the robot at (0, 0) facing East.\nrobot.move(2); // It moves two steps East to (2, 0), and faces East.\nrobot.move(2); // It moves two steps East to (4, 0), and faces East.\nrobot.getPos(); // return [4, 0]\nrobot.getDir(); // return \"East\"\nrobot.move(2); // It moves one step East to (5, 0), and faces East.\n// Moving the next step East would be out of bounds, so it turns and faces North.\n// Then, it moves one step North to (5, 1), and faces North.\nrobot.move(1); // It moves one step North to (5, 2), and faces North (not West).\nrobot.move(4); // Moving the next step North would be out of bounds, so it turns and faces West.\n// Then, it moves four steps West to (1, 2), and faces West.\nrobot.getPos(); // return [1, 2]\nrobot.getDir(); // return \"West\""}], "constraints": "Constraints:\n2 <= width, height <= 100\n1 <= num <= 10^5\nAt most 10^4 calls in total will be made to step, getPos, and getDir.", "notes": ""}, "2064": {"label": "Medium", "title": "Minimized Maximum of Products Distributed to Any Store", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4783, "total_accepted": 9900.0, "total_submissions": 20700.0, "testcase_example": "'6\\n[11,6]'", "body": "You are given an integer n indicating there are n specialty retail stores. There are m product types of varying amounts, which are given as a 0-indexed integer array quantities, where quantities[i] represents the number of products of the i^th product type.\nYou need to distribute all products to the retail stores following these rules:\nA store can only be given at most one product type but can be given any amount of it.\nAfter distribution, each store will have been given some number of products (possibly 0). Let x represent the maximum number of products given to any store. You want x to be as small as possible, i.e., you want to minimize the maximum number of products that are given to any store.\nReturn the minimum possible x.", "examples": [{"full_text": "Example 1:\nInput: n = 6, quantities = [11,6]\nOutput: 3\nExplanation: One optimal way is:\n- The 11 products of type 0 are distributed to the first four stores in these amounts: 2, 3, 3, 3\n- The 6 products of type 1 are distributed to the other two stores in these amounts: 3, 3\nThe maximum number of products given to any store is max(2, 3, 3, 3, 3, 3) = 3.", "input": "Input: n = 6, quantities = [11,6]", "output": "Output: 3", "explanation": "Explanation: One optimal way is:\n- The 11 products of type 0 are distributed to the first four stores in these amounts: 2, 3, 3, 3\n- The 6 products of type 1 are distributed to the other two stores in these amounts: 3, 3\nThe maximum number of products given to any store is max(2, 3, 3, 3, 3, 3) = 3."}, {"full_text": "Example 2:\nInput: n = 7, quantities = [15,10,10]\nOutput: 5\nExplanation: One optimal way is:\n- The 15 products of type 0 are distributed to the first three stores in these amounts: 5, 5, 5\n- The 10 products of type 1 are distributed to the next two stores in these amounts: 5, 5\n- The 10 products of type 2 are distributed to the last two stores in these amounts: 5, 5\nThe maximum number of products given to any store is max(5, 5, 5, 5, 5, 5, 5) = 5.", "input": "Input: n = 7, quantities = [15,10,10]", "output": "Output: 5", "explanation": "Explanation: One optimal way is:\n- The 15 products of type 0 are distributed to the first three stores in these amounts: 5, 5, 5\n- The 10 products of type 1 are distributed to the next two stores in these amounts: 5, 5\n- The 10 products of type 2 are distributed to the last two stores in these amounts: 5, 5\nThe maximum number of products given to any store is max(5, 5, 5, 5, 5, 5, 5) = 5."}, {"full_text": "Example 3:\nInput: n = 1, quantities = [100000]\nOutput: 100000\nExplanation: The only optimal way is:\n- The 100000 products of type 0 are distributed to the only store.\nThe maximum number of products given to any store is max(100000) = 100000.", "input": "Input: n = 1, quantities = [100000]", "output": "Output: 100000", "explanation": "Explanation: The only optimal way is:\n- The 100000 products of type 0 are distributed to the only store.\nThe maximum number of products given to any store is max(100000) = 100000."}], "constraints": "Constraints:\nm == quantities.length\n1 <= m <= n <= 10^5\n1 <= quantities[i] <= 10^5", "notes": ""}, "2063": {"label": "Medium", "title": "Vowels of All Substrings", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5407, "total_accepted": 11400.0, "total_submissions": 21000.0, "testcase_example": "'\"aba\"'", "body": "Given a string word, return the sum of the number of vowels ('a', 'e', 'i', 'o', and 'u') in every substring of word.\nA substring is a contiguous (non-empty) sequence of characters within a string.\nNote: Due to the large constraints, the answer may not fit in a signed 32-bit integer. Please be careful during the calculations.", "examples": [{"full_text": "Example 1:\nInput: word = \"aba\"\nOutput: 6\nExplanation:\nAll possible substrings are: \"a\", \"ab\", \"aba\", \"b\", \"ba\", and \"a\".\n- \"b\" has 0 vowels in it\n- \"a\", \"ab\", \"ba\", and \"a\" have 1 vowel each\n- \"aba\" has 2 vowels in it\nHence, the total sum of vowels = 0 + 1 + 1 + 1 + 1 + 2 = 6.", "input": "Input: word = \"aba\"", "output": "Output: 6", "explanation": "Explanation:\nAll possible substrings are: \"a\", \"ab\", \"aba\", \"b\", \"ba\", and \"a\".\n- \"b\" has 0 vowels in it\n- \"a\", \"ab\", \"ba\", and \"a\" have 1 vowel each\n- \"aba\" has 2 vowels in it\nHence, the total sum of vowels = 0 + 1 + 1 + 1 + 1 + 2 = 6."}, {"full_text": "Example 2:\nInput: word = \"abc\"\nOutput: 3\nExplanation:\nAll possible substrings are: \"a\", \"ab\", \"abc\", \"b\", \"bc\", and \"c\".\n- \"a\", \"ab\", and \"abc\" have 1 vowel each\n- \"b\", \"bc\", and \"c\" have 0 vowels each\nHence, the total sum of vowels = 1 + 1 + 1 + 0 + 0 + 0 = 3.", "input": "Input: word = \"abc\"", "output": "Output: 3", "explanation": "Explanation:\nAll possible substrings are: \"a\", \"ab\", \"abc\", \"b\", \"bc\", and \"c\".\n- \"a\", \"ab\", and \"abc\" have 1 vowel each\n- \"b\", \"bc\", and \"c\" have 0 vowels each\nHence, the total sum of vowels = 1 + 1 + 1 + 0 + 0 + 0 = 3."}, {"full_text": "Example 3:\nInput: word = \"ltcd\"\nOutput: 0\nExplanation: There are no vowels in any substring of \"ltcd\".", "input": "Input: word = \"ltcd\"", "output": "Output: 0", "explanation": "Explanation: There are no vowels in any substring of \"ltcd\"."}], "constraints": "Constraints:\n1 <= word.length <= 10^5\nword consists of lowercase English letters.", "notes": ""}, "2059": {"label": "Medium", "title": "Minimum Operations to Convert Number", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4569, "total_accepted": 8800.0, "total_submissions": 19300.0, "testcase_example": "'[2,4,12]\\n2\\n12'", "body": "You are given a 0-indexed integer array nums containing distinct numbers, an integer start, and an integer goal. There is an integer x that is initially set to start, and you want to perform operations on x such that it is converted to goal. You can perform the following operation repeatedly on the number x:\nIf 0 <= x <= 1000, then for any index i in the array (0 <= i < nums.length), you can set x to any of the following:\nx + nums[i]\nx - nums[i]\nx ^ nums[i] (bitwise-XOR)\nNote that you can use each nums[i] any number of times in any order. Operations that set x to be out of the range 0 <= x <= 1000 are valid, but no more operations can be done afterward.\nReturn the minimum number of operations needed to convert x = start into goal, and -1 if it is not possible.", "examples": [{"full_text": "Example 1:\nInput: nums = [2,4,12], start = 2, goal = 12\nOutput: 2\nExplanation: We can go from 2 \u2192 14 \u2192 12 with the following 2 operations.\n- 2 + 12 = 14\n- 14 - 2 = 12", "input": "Input: nums = [2,4,12], start = 2, goal = 12", "output": "Output: 2", "explanation": "Explanation: We can go from 2 \u2192 14 \u2192 12 with the following 2 operations.\n- 2 + 12 = 14\n- 14 - 2 = 12"}, {"full_text": "Example 2:\nInput: nums = [3,5,7], start = 0, goal = -4\nOutput: 2\nExplanation: We can go from 0 \u2192 3 \u2192 -4 with the following 2 operations.\n- 0 + 3 = 3\n- 3 - 7 = -4\nNote that the last operation sets x out of the range 0 <= x <= 1000, which is valid.", "input": "Input: nums = [3,5,7], start = 0, goal = -4", "output": "Output: 2", "explanation": "Explanation: We can go from 0 \u2192 3 \u2192 -4 with the following 2 operations.\n- 0 + 3 = 3\n- 3 - 7 = -4\nNote that the last operation sets x out of the range 0 <= x <= 1000, which is valid."}, {"full_text": "Example 3:\nInput: nums = [2,8,16], start = 0, goal = 1\nOutput: -1\nExplanation: There is no way to convert 0 into 1.", "input": "Input: nums = [2,8,16], start = 0, goal = 1", "output": "Output: -1", "explanation": "Explanation: There is no way to convert 0 into 1."}], "constraints": "Constraints:\n1 <= nums.length <= 1000\n-10^9 <= nums[i], goal <= 10^9\n0 <= start <= 1000\nstart != goal\nAll the integers in nums are distinct.", "notes": ""}, "2058": {"label": "Medium", "title": "Find the Minimum and Maximum Number of Nodes Between Critical Points", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5819, "total_accepted": 13400.0, "total_submissions": 23000.0, "testcase_example": "'[3,1]'", "body": "A critical point in a linked list is defined as either a local maxima or a local minima.\nA node is a local maxima if the current node has a value strictly greater than the previous node and the next node.\nA node is a local minima if the current node has a value strictly smaller than the previous node and the next node.\nNote that a node can only be a local maxima/minima if there exists both a previous node and a next node.\nGiven a linked list head, return an array of length 2 containing [minDistance, maxDistance] where minDistance is the minimum distance between any\ntwo distinct critical points and maxDistance is the maximum distance between any\ntwo distinct critical points. If there are fewer than two critical points, return [-1, -1].", "examples": [{"full_text": "Example 1:\nInput: head = [3,1]\nOutput: [-1,-1]\nExplanation: There are no critical points in [3,1].", "input": "Input: head = [3,1]", "output": "Output: [-1,-1]", "explanation": "Explanation: There are no critical points in [3,1]."}, {"full_text": "Example 2:\nInput: head = [5,3,1,2,5,1,2]\nOutput: [1,3]\nExplanation: There are three critical points:\n- [5,3,1,2,5,1,2]: The third node is a local minima because 1 is less than 3 and 2.\n- [5,3,1,2,5,1,2]: The fifth node is a local maxima because 5 is greater than 2 and 1.\n- [5,3,1,2,5,1,2]: The sixth node is a local minima because 1 is less than 5 and 2.\nThe minimum distance is between the fifth and the sixth node. minDistance = 6 - 5 = 1.\nThe maximum distance is between the third and the sixth node. maxDistance = 6 - 3 = 3.", "input": "Input: head = [5,3,1,2,5,1,2]", "output": "Output: [1,3]", "explanation": "Explanation: There are three critical points:\n- [5,3,1,2,5,1,2]: The third node is a local minima because 1 is less than 3 and 2.\n- [5,3,1,2,5,1,2]: The fifth node is a local maxima because 5 is greater than 2 and 1.\n- [5,3,1,2,5,1,2]: The sixth node is a local minima because 1 is less than 5 and 2.\nThe minimum distance is between the fifth and the sixth node. minDistance = 6 - 5 = 1.\nThe maximum distance is between the third and the sixth node. maxDistance = 6 - 3 = 3."}, {"full_text": "Example 3:\nInput: head = [1,3,2,2,3,2,2,2,7]\nOutput: [3,3]\nExplanation: There are two critical points:\n- [1,3,2,2,3,2,2,2,7]: The second node is a local maxima because 3 is greater than 1 and 2.\n- [1,3,2,2,3,2,2,2,7]: The fifth node is a local maxima because 3 is greater than 2 and 2.\nBoth the minimum and maximum distances are between the second and the fifth node.\nThus, minDistance and maxDistance is 5 - 2 = 3.\nNote that the last node is not considered a local maxima because it does not have a next node.", "input": "Input: head = [1,3,2,2,3,2,2,2,7]", "output": "Output: [3,3]", "explanation": "Explanation: There are two critical points:\n- [1,3,2,2,3,2,2,2,7]: The second node is a local maxima because 3 is greater than 1 and 2.\n- [1,3,2,2,3,2,2,2,7]: The fifth node is a local maxima because 3 is greater than 2 and 2.\nBoth the minimum and maximum distances are between the second and the fifth node.\nThus, minDistance and maxDistance is 5 - 2 = 3.\nNote that the last node is not considered a local maxima because it does not have a next node."}], "constraints": "Constraints:\nThe number of nodes in the list is in the range [2, 10^5].\n1 <= Node.val <= 10^5", "notes": ""}, "2055": {"label": "Medium", "title": "Plates Between Candles", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.47609999999999997, "total_accepted": 8300.0, "total_submissions": 17400.0, "testcase_example": "'\"**|**|***|\"\\n[[2,5],[5,9]]'", "body": "There is a long table with a line of plates and candles arranged on top of it. You are given a 0-indexed string s consisting of characters '*' and '|' only, where a '*' represents a plate and a '|' represents a candle.\nYou are also given a 0-indexed 2D integer array queries where queries[i] = [lefti, righti] denotes the substring s[lefti...righti] (inclusive). For each query, you need to find the number of plates between candles that are in the substring. A plate is considered between candles if there is at least one candle to its left and at least one candle to its right in the substring.\nFor example, s = \"||**||**|*\", and a query [3, 8] denotes the substring \"*||**|\". The number of plates between candles in this substring is 2, as each of the two plates has at least one candle in the substring to its left and right.\nReturn an integer array answer where answer[i] is the answer to the i^th query.", "examples": [{"full_text": "Example 1:\nInput: s = \"**|**|***|\", queries = [[2,5],[5,9]]\nOutput: [2,3]\nExplanation:\n- queries[0] has two plates between candles.\n- queries[1] has three plates between candles.", "input": "Input: s = \"**|**|***|\", queries = [[2,5],[5,9]]", "output": "Output: [2,3]", "explanation": "Explanation:\n- queries[0] has two plates between candles.\n- queries[1] has three plates between candles."}, {"full_text": "Example 2:\nInput: s = \"***|**|*****|**||**|*\", queries = [[1,17],[4,5],[14,17],[5,11],[15,16]]\nOutput: [9,0,0,0,0]\nExplanation:\n- queries[0] has nine plates between candles.\n- The other queries have zero plates between candles.", "input": "Input: s = \"***|**|*****|**||**|*\", queries = [[1,17],[4,5],[14,17],[5,11],[15,16]]", "output": "Output: [9,0,0,0,0]", "explanation": "Explanation:\n- queries[0] has nine plates between candles.\n- The other queries have zero plates between candles."}], "constraints": "Constraints:\n3 <= s.length <= 10^5\ns consists of '*' and '|' characters.\n1 <= queries.length <= 10^5\nqueries[i].length == 2\n0 <= lefti <= righti < s.length", "notes": ""}, "2054": {"label": "Medium", "title": "Two Best Non-Overlapping Events", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.42450000000000004, "total_accepted": 7300.0, "total_submissions": 17300.0, "testcase_example": "'[[1,3,2],[4,5,2],[2,4,3]]'", "body": "You are given a 0-indexed 2D integer array of events where events[i] = [startTimei, endTimei, valuei]. The i^th event starts at startTimei and ends at endTimei, and if you attend this event, you will receive a value of valuei. You can choose at most two non-overlapping events to attend such that the sum of their values is maximized.\nReturn this maximum sum.\nNote that the start time and end time is inclusive: that is, you cannot attend two events where one of them starts and the other ends at the same time. More specifically, if you attend an event with end time t, the next event must start at or after t + 1.", "examples": [{"full_text": "Example 1:\nInput: events = [[1,3,2],[4,5,2],[2,4,3]]\nOutput: 4\nExplanation: Choose the green events, 0 and 1 for a sum of 2 + 2 = 4.", "input": "Input: events = [[1,3,2],[4,5,2],[2,4,3]]", "output": "Output: 4", "explanation": "Explanation: Choose the green events, 0 and 1 for a sum of 2 + 2 = 4."}, {"full_text": "Example 2:\nInput: events = [[1,3,2],[4,5,2],[1,5,5]]\nOutput: 5\nExplanation: Choose event 2 for a sum of 5.", "input": "Input: events = [[1,3,2],[4,5,2],[1,5,5]]", "output": "Output: 5", "explanation": "Explanation: Choose event 2 for a sum of 5."}, {"full_text": "Example 3:\nInput: events = [[1,5,3],[1,5,1],[6,6,5]]\nOutput: 8\nExplanation: Choose events 0 and 2 for a sum of 3 + 5 = 8.", "input": "Input: events = [[1,5,3],[1,5,1],[6,6,5]]", "output": "Output: 8", "explanation": "Explanation: Choose events 0 and 2 for a sum of 3 + 5 = 8."}], "constraints": "Constraints:\n2 <= events.length <= 10^5\nevents[i].length == 3\n1 <= startTimei <= endTimei <= 10^9\n1 <= valuei <= 10^6", "notes": ""}, "2049": {"label": "Medium", "title": "Count Nodes With the Highest Score", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.45770000000000005, "total_accepted": 8300.0, "total_submissions": 18100.0, "testcase_example": "'[-1,2,0,2,0]'", "body": "There is a binary tree rooted at 0 consisting of n nodes. The nodes are labeled from 0 to n - 1. You are given a 0-indexed integer array parents representing the tree, where parents[i] is the parent of node i. Since node 0 is the root, parents[0] == -1.\nEach node has a score. To find the score of a node, consider if the node and the edges connected to it were removed. The tree would become one or more non-empty subtrees. The size of a subtree is the number of the nodes in it. The score of the node is the product of the sizes of all those subtrees.\nReturn the number of nodes that have the highest score.", "examples": [{"full_text": "Example 1:\nInput: parents = [-1,2,0,2,0]\nOutput: 3\nExplanation:\n- The score of node 0 is: 3 * 1 = 3\n- The score of node 1 is: 4 = 4\n- The score of node 2 is: 1 * 1 * 2 = 2\n- The score of node 3 is: 4 = 4\n- The score of node 4 is: 4 = 4\nThe highest score is 4, and three nodes (node 1, node 3, and node 4) have the highest score.", "input": "Input: parents = [-1,2,0,2,0]", "output": "Output: 3", "explanation": "Explanation:\n- The score of node 0 is: 3 * 1 = 3\n- The score of node 1 is: 4 = 4\n- The score of node 2 is: 1 * 1 * 2 = 2\n- The score of node 3 is: 4 = 4\n- The score of node 4 is: 4 = 4\nThe highest score is 4, and three nodes (node 1, node 3, and node 4) have the highest score."}, {"full_text": "Example 2:\nInput: parents = [-1,2,0]\nOutput: 2\nExplanation:\n- The score of node 0 is: 2 = 2\n- The score of node 1 is: 2 = 2\n- The score of node 2 is: 1 * 1 = 1\nThe highest score is 2, and two nodes (node 0 and node 1) have the highest score.", "input": "Input: parents = [-1,2,0]", "output": "Output: 2", "explanation": "Explanation:\n- The score of node 0 is: 2 = 2\n- The score of node 1 is: 2 = 2\n- The score of node 2 is: 1 * 1 = 1\nThe highest score is 2, and two nodes (node 0 and node 1) have the highest score."}], "constraints": "Constraints:\nn == parents.length\n2 <= n <= 10^5\nparents[0] == -1\n0 <= parents[i] <= n - 1 for i != 0\nparents represents a valid binary tree.", "notes": ""}, "2048": {"label": "Medium", "title": "Next Greater Numerically Balanced Number", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4607, "total_accepted": 7900.0, "total_submissions": 17100.0, "testcase_example": "'1'", "body": "An integer x is numerically balanced if for every digit d in the number x, there are exactly d occurrences of that digit in x.\nGiven an integer n, return the smallest numerically balanced number strictly greater than n.", "examples": [{"full_text": "Example 1:\nInput: n = 1\nOutput: 22\nExplanation:\n22 is numerically balanced since:\n- The digit 2 occurs 2 times.\nIt is also the smallest numerically balanced number strictly greater than 1.", "input": "Input: n = 1", "output": "Output: 22", "explanation": "Explanation:\n22 is numerically balanced since:\n- The digit 2 occurs 2 times.\nIt is also the smallest numerically balanced number strictly greater than 1."}, {"full_text": "Example 2:\nInput: n = 1000\nOutput: 1333\nExplanation:\n1333 is numerically balanced since:\n- The digit 1 occurs 1 time.\n- The digit 3 occurs 3 times.\nIt is also the smallest numerically balanced number strictly greater than 1000.\nNote that 1022 cannot be the answer because 0 appeared more than 0 times.", "input": "Input: n = 1000", "output": "Output: 1333", "explanation": "Explanation:\n1333 is numerically balanced since:\n- The digit 1 occurs 1 time.\n- The digit 3 occurs 3 times.\nIt is also the smallest numerically balanced number strictly greater than 1000.\nNote that 1022 cannot be the answer because 0 appeared more than 0 times."}, {"full_text": "Example 3:\nInput: n = 3000\nOutput: 3133\nExplanation:\n3133 is numerically balanced since:\n- The digit 1 occurs 1 time.\n- The digit 3 occurs 3 times.\nIt is also the smallest numerically balanced number strictly greater than 3000.", "input": "Input: n = 3000", "output": "Output: 3133", "explanation": "Explanation:\n3133 is numerically balanced since:\n- The digit 1 occurs 1 time.\n- The digit 3 occurs 3 times.\nIt is also the smallest numerically balanced number strictly greater than 3000."}], "constraints": "Constraints:\n0 <= n <= 10^6", "notes": ""}, "2044": {"label": "Medium", "title": "Count Number of Maximum Bitwise-OR Subsets", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.75, "total_accepted": 11600.0, "total_submissions": 15500.0, "testcase_example": "'[3,1]'", "body": "Given an integer array nums, find the maximum possible bitwise OR of a subset of nums and return the number of different non-empty subsets with the maximum bitwise OR.\nAn array a is a subset of an array b if a can be obtained from b by deleting some (possibly zero) elements of b. Two subsets are considered different if the indices of the elements chosen are different.\nThe bitwise OR of an array a is equal to a[0] OR a[1] OR ... OR a[a.length - 1] (0-indexed).", "examples": [{"full_text": "Example 1:\nInput: nums = [3,1]\nOutput: 2\nExplanation: The maximum possible bitwise OR of a subset is 3. There are 2 subsets with a bitwise OR of 3:\n- [3]\n- [3,1]", "input": "Input: nums = [3,1]", "output": "Output: 2", "explanation": "Explanation: The maximum possible bitwise OR of a subset is 3. There are 2 subsets with a bitwise OR of 3:\n- [3]\n- [3,1]"}, {"full_text": "Example 2:\nInput: nums = [2,2,2]\nOutput: 7\nExplanation: All non-empty subsets of [2,2,2] have a bitwise OR of 2. There are 2^3 - 1 = 7 total subsets.", "input": "Input: nums = [2,2,2]", "output": "Output: 7", "explanation": "Explanation: All non-empty subsets of [2,2,2] have a bitwise OR of 2. There are 2^3 - 1 = 7 total subsets."}, {"full_text": "Example 3:\nInput: nums = [3,2,1,5]\nOutput: 6\nExplanation: The maximum possible bitwise OR of a subset is 7. There are 6 subsets with a bitwise OR of 7:\n- [3,5]\n- [3,1,5]\n- [3,2,5]\n- [3,2,1,5]\n- [2,5]\n- [2,1,5]", "input": "Input: nums = [3,2,1,5]", "output": "Output: 6", "explanation": "Explanation: The maximum possible bitwise OR of a subset is 7. There are 6 subsets with a bitwise OR of 7:\n- [3,5]\n- [3,1,5]\n- [3,2,5]\n- [3,2,1,5]\n- [2,5]\n- [2,1,5]"}], "constraints": "Constraints:\n1 <= nums.length <= 16\n1 <= nums[i] <= 10^5", "notes": ""}, "2043": {"label": "Medium", "title": "Simple Bank System", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6462, "total_accepted": 11300.0, "total_submissions": 17500.0, "testcase_example": "'[\"Bank\",\"withdraw\",\"transfer\",\"deposit\",\"transfer\",\"withdraw\"]\\n' +\n  '[[[10,100,20,50,30]],[3,10],[5,1,20],[5,20],[3,4,15],[10,50]]'", "body": "You have been tasked with writing a program for a popular bank that will automate all its incoming transactions (transfer, deposit, and withdraw). The bank has n accounts numbered from 1 to n. The initial balance of each account is stored in a 0-indexed integer array balance, with the (i + 1)^th account having an initial balance of balance[i].\nExecute all the valid transactions. A transaction is valid if:\nThe given account number(s) are between 1 and n, and\nThe amount of money withdrawn or transferred from is less than or equal to the balance of the account.\nImplement the Bank class:\nBank(long[] balance) Initializes the object with the 0-indexed integer array balance.\nboolean transfer(int account1, int account2, long money) Transfers money dollars from the account numbered account1 to the account numbered account2. Return true if the transaction was successful, false otherwise.\nboolean deposit(int account, long money) Deposit money dollars into the account numbered account. Return true if the transaction was successful, false otherwise.\nboolean withdraw(int account, long money) Withdraw money dollars from the account numbered account. Return true if the transaction was successful, false otherwise.", "examples": [{"full_text": "Example 1:\nInput\n[\"Bank\", \"withdraw\", \"transfer\", \"deposit\", \"transfer\", \"withdraw\"]\n[[[10, 100, 20, 50, 30]], [3, 10], [5, 1, 20], [5, 20], [3, 4, 15], [10, 50]]\nOutput\n[null, true, true, true, false, false]\nExplanation\nBank bank = new Bank([10, 100, 20, 50, 30]);\nbank.withdraw(3, 10); // return true, account 3 has a balance of $20, so it is valid to withdraw $10.\n// Account 3 has $20 - $10 = $10.\nbank.transfer(5, 1, 20); // return true, account 5 has a balance of $30, so it is valid to transfer $20.\n// Account 5 has $30 - $20 = $10, and account 1 has $10 + $20 = $30.\nbank.deposit(5, 20); // return true, it is valid to deposit $20 to account 5.\n// Account 5 has $10 + $20 = $30.\nbank.transfer(3, 4, 15); // return false, the current balance of account 3 is $10,\n// so it is invalid to transfer $15 from it.\nbank.withdraw(10, 50); // return false, it is invalid because account 10 does not exist.", "input": "Input\n[\"Bank\", \"withdraw\", \"transfer\", \"deposit\", \"transfer\", \"withdraw\"]\n[[[10, 100, 20, 50, 30]], [3, 10], [5, 1, 20], [5, 20], [3, 4, 15], [10, 50]]", "output": "Output\n[null, true, true, true, false, false]", "explanation": "Explanation\nBank bank = new Bank([10, 100, 20, 50, 30]);\nbank.withdraw(3, 10); // return true, account 3 has a balance of $20, so it is valid to withdraw $10.\n// Account 3 has $20 - $10 = $10.\nbank.transfer(5, 1, 20); // return true, account 5 has a balance of $30, so it is valid to transfer $20.\n// Account 5 has $30 - $20 = $10, and account 1 has $10 + $20 = $30.\nbank.deposit(5, 20); // return true, it is valid to deposit $20 to account 5.\n// Account 5 has $10 + $20 = $30.\nbank.transfer(3, 4, 15); // return false, the current balance of account 3 is $10,\n// so it is invalid to transfer $15 from it.\nbank.withdraw(10, 50); // return false, it is invalid because account 10 does not exist."}], "constraints": "Constraints:\nn == balance.length\n1 <= n, account, account1, account2 <= 10^5\n0 <= balance[i], money <= 10^12\nAt most 10^4 calls will be made to each function transfer, deposit, withdraw.", "notes": ""}, "2039": {"label": "Medium", "title": "The Time When the Network Becomes Idle", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4864, "total_accepted": 5700.0, "total_submissions": 11700.0, "testcase_example": "'[[0,1],[1,2]]\\n[0,2,1]'", "body": "There is a network of n servers, labeled from 0 to n - 1. You are given a 2D integer array edges, where edges[i] = [ui, vi] indicates there is a message channel between servers ui and vi, and they can pass any number of messages to each other directly in one second. You are also given a 0-indexed integer array patience of length n.\nAll servers are connected, i.e., a message can be passed from one server to any other server(s) directly or indirectly through the message channels.\nThe server labeled 0 is the master server. The rest are data servers. Each data server needs to send its message to the master server for processing and wait for a reply. Messages move between servers optimally, so every message takes the least amount of time to arrive at the master server. The master server will process all newly arrived messages instantly and send a reply to the originating server via the reversed path the message had gone through.\nAt the beginning of second 0, each data server sends its message to be processed. Starting from second 1, at the beginning of every second, each data server will check if it has received a reply to the message it sent (including any newly arrived replies) from the master server:\nIf it has not, it will resend the message periodically. The data server i will resend the message every patience[i] second(s), i.e., the data server i will resend the message if patience[i] second(s) have elapsed since the last time the message was sent from this server.\nOtherwise, no more resending will occur from this server.\nThe network becomes idle when there are no messages passing between servers or arriving at servers.\nReturn the earliest second starting from which the network becomes idle.", "examples": [{"full_text": "Example 1:\nInput: edges = [[0,1],[1,2]], patience = [0,2,1]\nOutput: 8\nExplanation:\nAt (the beginning of) second 0,\n- Data server 1 sends its message (denoted 1A) to the master server.\n- Data server 2 sends its message (denoted 2A) to the master server.\nAt second 1,\n- Message 1A arrives at the master server. Master server processes message 1A instantly and sends a reply 1A back.\n- Server 1 has not received any reply. 1 second (1 < patience[1] = 2) elapsed since this server has sent the message, therefore it does not resend the message.\n- Server 2 has not received any reply. 1 second (1 == patience[2] = 1) elapsed since this server has sent the message, therefore it resends the message (denoted 2B).\nAt second 2,\n- The reply 1A arrives at server 1. No more resending will occur from server 1.\n- Message 2A arrives at the master server. Master server processes message 2A instantly and sends a reply 2A back.\n- Server 2 resends the message (denoted 2C).\n...\nAt second 4,\n- The reply 2A arrives at server 2. No more resending will occur from server 2.\n...\nAt second 7, reply 2D arrives at server 2.\nStarting from the beginning of the second 8, there are no messages passing between servers or arriving at servers.\nThis is the time when the network becomes idle.", "input": "Input: edges = [[0,1],[1,2]], patience = [0,2,1]", "output": "Output: 8", "explanation": "Explanation:\nAt (the beginning of) second 0,\n- Data server 1 sends its message (denoted 1A) to the master server.\n- Data server 2 sends its message (denoted 2A) to the master server.\nAt second 1,\n- Message 1A arrives at the master server. Master server processes message 1A instantly and sends a reply 1A back.\n- Server 1 has not received any reply. 1 second (1 < patience[1] = 2) elapsed since this server has sent the message, therefore it does not resend the message.\n- Server 2 has not received any reply. 1 second (1 == patience[2] = 1) elapsed since this server has sent the message, therefore it resends the message (denoted 2B).\nAt second 2,\n- The reply 1A arrives at server 1. No more resending will occur from server 1.\n- Message 2A arrives at the master server. Master server processes message 2A instantly and sends a reply 2A back.\n- Server 2 resends the message (denoted 2C).\n...\nAt second 4,\n- The reply 2A arrives at server 2. No more resending will occur from server 2.\n...\nAt second 7, reply 2D arrives at server 2.\nStarting from the beginning of the second 8, there are no messages passing between servers or arriving at servers.\nThis is the time when the network becomes idle."}, {"full_text": "Example 2:\nInput: edges = [[0,1],[0,2],[1,2]], patience = [0,10,10]\nOutput: 3\nExplanation: Data servers 1 and 2 receive a reply back at the beginning of second 2.\nFrom the beginning of the second 3, the network becomes idle.", "input": "Input: edges = [[0,1],[0,2],[1,2]], patience = [0,10,10]", "output": "Output: 3", "explanation": "Explanation: Data servers 1 and 2 receive a reply back at the beginning of second 2.\nFrom the beginning of the second 3, the network becomes idle."}], "constraints": "Constraints:\nn == patience.length\n2 <= n <= 10^5\npatience[0] == 0\n1 <= patience[i] <= 10^5 for 1 <= i < n\n1 <= edges.length <= min(10^5, n * (n - 1) / 2)\nedges[i].length == 2\n0 <= ui, vi < n\nui != vi\nThere are no duplicate edges.\nEach server can directly or indirectly reach another server.", "notes": ""}, "2038": {"label": "Medium", "title": "Remove Colored Pieces if Both Neighbors are the Same Color", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5513, "total_accepted": 9600.0, "total_submissions": 17500.0, "testcase_example": "'\"AAABABB\"'", "body": "There are n pieces arranged in a line, and each piece is colored either by 'A' or by 'B'. You are given a string colors of length n where colors[i] is the color of the i^th piece.\nAlice and Bob are playing a game where they take alternating turns removing pieces from the line. In this game, Alice moves first.\nAlice is only allowed to remove a piece colored 'A' if both its neighbors are also colored 'A'. She is not allowed to remove pieces that are colored 'B'.\nBob is only allowed to remove a piece colored 'B' if both its neighbors are also colored 'B'. He is not allowed to remove pieces that are colored 'A'.\nAlice and Bob cannot remove pieces from the edge of the line.\nIf a player cannot make a move on their turn, that player loses and the other player wins.\nAssuming Alice and Bob play optimally, return true if Alice wins, or return false if Bob wins.", "examples": [{"full_text": "Example 1:\nInput: colors = \"AAABABB\"\nOutput: true\nExplanation:\nAAABABB -> AABABB\nAlice moves first.\nShe removes the second 'A' from the left since that is the only 'A' whose neighbors are both 'A'.\nNow it's Bob's turn.\nBob cannot make a move on his turn since there are no 'B's whose neighbors are both 'B'.\nThus, Alice wins, so return true.", "input": "Input: colors = \"AAABABB\"", "output": "Output: true", "explanation": "Explanation:\nAAABABB -> AABABB\nAlice moves first.\nShe removes the second 'A' from the left since that is the only 'A' whose neighbors are both 'A'.\nNow it's Bob's turn.\nBob cannot make a move on his turn since there are no 'B's whose neighbors are both 'B'.\nThus, Alice wins, so return true."}, {"full_text": "Example 2:\nInput: colors = \"AA\"\nOutput: false\nExplanation:\nAlice has her turn first.\nThere are only two 'A's and both are on the edge of the line, so she cannot move on her turn.\nThus, Bob wins, so return false.", "input": "Input: colors = \"AA\"", "output": "Output: false", "explanation": "Explanation:\nAlice has her turn first.\nThere are only two 'A's and both are on the edge of the line, so she cannot move on her turn.\nThus, Bob wins, so return false."}, {"full_text": "Example 3:\nInput: colors = \"ABBBBBBBAAA\"\nOutput: false\nExplanation:\nABBBBBBBAAA -> ABBBBBBBAA\nAlice moves first.\nHer only option is to remove the second to last 'A' from the right.\nABBBBBBBAA -> ABBBBBBAA\nNext is Bob's turn.\nHe has many options for which 'B' piece to remove. He can pick any.\nOn Alice's second turn, she has no more pieces that she can remove.\nThus, Bob wins, so return false.", "input": "Input: colors = \"ABBBBBBBAAA\"", "output": "Output: false", "explanation": "Explanation:\nABBBBBBBAAA -> ABBBBBBBAA\nAlice moves first.\nHer only option is to remove the second to last 'A' from the right.\nABBBBBBBAA -> ABBBBBBAA\nNext is Bob's turn.\nHe has many options for which 'B' piece to remove. He can pick any.\nOn Alice's second turn, she has no more pieces that she can remove.\nThus, Bob wins, so return false."}], "constraints": "Constraints:\n1 <=\ncolors.length <= 10^5\ncolors\nconsists of only the letters\n'A'\nand\n'B'", "notes": ""}, "2034": {"label": "Medium", "title": "Stock Price Fluctuation", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4532, "total_accepted": 16300.0, "total_submissions": 36100.0, "testcase_example": "'[\"StockPrice\",\"update\",\"update\",\"current\",\"maximum\",\"update\",\"maximum\",\"update\",\"minimum\"]\\n' +\n  '[[],[1,10],[2,5],[],[],[1,3],[],[4,2],[]]'", "body": "You are given a stream of records about a particular stock. Each record contains a timestamp and the corresponding price of the stock at that timestamp.\nUnfortunately due to the volatile nature of the stock market, the records do not come in order. Even worse, some records may be incorrect. Another record with the same timestamp may appear later in the stream correcting the price of the previous wrong record.\nDesign an algorithm that:\nUpdates the price of the stock at a particular timestamp, correcting the price from any previous records at the timestamp.\nFinds the latest price of the stock based on the current records. The latest price is the price at the latest timestamp recorded.\nFinds the maximum price the stock has been based on the current records.\nFinds the minimum price the stock has been based on the current records.\nImplement the StockPrice class:\nStockPrice() Initializes the object with no price records.\nvoid update(int timestamp, int price) Updates the price of the stock at the given timestamp.\nint current() Returns the latest price of the stock.\nint maximum() Returns the maximum price of the stock.\nint minimum() Returns the minimum price of the stock.", "examples": [{"full_text": "Example 1:\nInput\n[\"StockPrice\", \"update\", \"update\", \"current\", \"maximum\", \"update\", \"maximum\", \"update\", \"minimum\"]\n[[], [1, 10], [2, 5], [], [], [1, 3], [], [4, 2], []]\nOutput\n[null, null, null, 5, 10, null, 5, null, 2]\nExplanation\nStockPrice stockPrice = new StockPrice();\nstockPrice.update(1, 10); // Timestamps are [1] with corresponding prices [10].\nstockPrice.update(2, 5); // Timestamps are [1,2] with corresponding prices [10,5].\nstockPrice.current(); // return 5, the latest timestamp is 2 with the price being 5.\nstockPrice.maximum(); // return 10, the maximum price is 10 at timestamp 1.\nstockPrice.update(1, 3); // The previous timestamp 1 had the wrong price, so it is updated to 3.\n// Timestamps are [1,2] with corresponding prices [3,5].\nstockPrice.maximum(); // return 5, the maximum price is 5 after the correction.\nstockPrice.update(4, 2); // Timestamps are [1,2,4] with corresponding prices [3,5,2].\nstockPrice.minimum(); // return 2, the minimum price is 2 at timestamp 4.", "input": "Input\n[\"StockPrice\", \"update\", \"update\", \"current\", \"maximum\", \"update\", \"maximum\", \"update\", \"minimum\"]\n[[], [1, 10], [2, 5], [], [], [1, 3], [], [4, 2], []]", "output": "Output\n[null, null, null, 5, 10, null, 5, null, 2]", "explanation": "Explanation\nStockPrice stockPrice = new StockPrice();\nstockPrice.update(1, 10); // Timestamps are [1] with corresponding prices [10].\nstockPrice.update(2, 5); // Timestamps are [1,2] with corresponding prices [10,5].\nstockPrice.current(); // return 5, the latest timestamp is 2 with the price being 5.\nstockPrice.maximum(); // return 10, the maximum price is 10 at timestamp 1.\nstockPrice.update(1, 3); // The previous timestamp 1 had the wrong price, so it is updated to 3.\n// Timestamps are [1,2] with corresponding prices [3,5].\nstockPrice.maximum(); // return 5, the maximum price is 5 after the correction.\nstockPrice.update(4, 2); // Timestamps are [1,2,4] with corresponding prices [3,5,2].\nstockPrice.minimum(); // return 2, the minimum price is 2 at timestamp 4."}], "constraints": "Constraints:\n1 <= timestamp, price <= 10^9\nAt most 10^5 calls will be made in total to update, current, maximum, and minimum.\ncurrent, maximum, and minimum will be called only after update has been called at least once.", "notes": ""}, "2033": {"label": "Medium", "title": "Minimum Operations to Make a Uni-Value Grid", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4911, "total_accepted": 11700.0, "total_submissions": 23800.0, "testcase_example": "'[[2,4],[6,8]]\\n2'", "body": "You are given a 2D integer grid of size m x n and an integer x. In one operation, you can add x to or subtract x from any element in the grid.\nA uni-value grid is a grid where all the elements of it are equal.\nReturn the minimum number of operations to make the grid uni-value. If it is not possible, return -1.", "examples": [{"full_text": "Example 1:\nInput: grid = [[2,4],[6,8]], x = 2\nOutput: 4\nExplanation: We can make every element equal to 4 by doing the following:\n- Add x to 2 once.\n- Subtract x from 6 once.\n- Subtract x from 8 twice.\nA total of 4 operations were used.", "input": "Input: grid = [[2,4],[6,8]], x = 2", "output": "Output: 4", "explanation": "Explanation: We can make every element equal to 4 by doing the following:\n- Add x to 2 once.\n- Subtract x from 6 once.\n- Subtract x from 8 twice.\nA total of 4 operations were used."}, {"full_text": "Example 2:\nInput: grid = [[1,5],[2,3]], x = 1\nOutput: 5\nExplanation: We can make every element equal to 3.", "input": "Input: grid = [[1,5],[2,3]], x = 1", "output": "Output: 5", "explanation": "Explanation: We can make every element equal to 3."}, {"full_text": "Example 3:\nInput: grid = [[1,2],[3,4]], x = 2\nOutput: -1\nExplanation: It is impossible to make every element equal.", "input": "Input: grid = [[1,2],[3,4]], x = 2", "output": "Output: -1", "explanation": "Explanation: It is impossible to make every element equal."}], "constraints": "Constraints:\nm == grid.length\nn == grid[i].length\n1 <= m, n <= 10^5\n1 <= m * n <= 10^5\n1 <= x, grid[i][j] <= 10^4", "notes": ""}, "2029": {"label": "Medium", "title": "Stone Game IX", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.2432, "total_accepted": 4400.0, "total_submissions": 18100.0, "testcase_example": "'[2,1]'", "body": "Alice and Bob continue their games with stones. There is a row of n stones, and each stone has an associated value. You are given an integer array stones, where stones[i] is the value of the i^th stone.\nAlice and Bob take turns, with Alice starting first. On each turn, the player may remove any stone from stones. The player who removes a stone loses if the sum of the values of all removed stones is divisible by 3. Bob will win automatically if there are no remaining stones (even if it is Alice's turn).\nAssuming both players play optimally, return true if Alice wins and false if Bob wins.", "examples": [{"full_text": "Example 1:\nInput: stones = [2,1]\nOutput: true\nExplanation:\nThe game will be played as follows:\n- Turn 1: Alice can remove either stone.\n- Turn 2: Bob removes the remaining stone.\nThe sum of the removed stones is 1 + 2 = 3 and is divisible by 3. Therefore, Bob loses and Alice wins the game.", "input": "Input: stones = [2,1]", "output": "Output: true", "explanation": "Explanation:\nThe game will be played as follows:\n- Turn 1: Alice can remove either stone.\n- Turn 2: Bob removes the remaining stone.\nThe sum of the removed stones is 1 + 2 = 3 and is divisible by 3. Therefore, Bob loses and Alice wins the game."}, {"full_text": "Example 2:\nInput: stones = [2]\nOutput: false\nExplanation:\nAlice will remove the only stone, and the sum of the values on the removed stones is 2.\nSince all the stones are removed and the sum of values is not divisible by 3, Bob wins the game.", "input": "Input: stones = [2]", "output": "Output: false", "explanation": "Explanation:\nAlice will remove the only stone, and the sum of the values on the removed stones is 2.\nSince all the stones are removed and the sum of values is not divisible by 3, Bob wins the game."}, {"full_text": "Example 3:\nInput: stones = [5,1,2,4,3]\nOutput: false\nExplanation: Bob will always win. One possible way for Bob to win is shown below:\n- Turn 1: Alice can remove the second stone with value 1. Sum of removed stones = 1.\n- Turn 2: Bob removes the fifth stone with value 3. Sum of removed stones = 1 + 3 = 4.\n- Turn 3: Alices removes the fourth stone with value 4. Sum of removed stones = 1 + 3 + 4 = 8.\n- Turn 4: Bob removes the third stone with value 2. Sum of removed stones = 1 + 3 + 4 + 2 = 10.\n- Turn 5: Alice removes the first stone with value 5. Sum of removed stones = 1 + 3 + 4 + 2 + 5 = 15.\nAlice loses the game because the sum of the removed stones (15) is divisible by 3. Bob wins the game.", "input": "Input: stones = [5,1,2,4,3]", "output": "Output: false", "explanation": "Explanation: Bob will always win. One possible way for Bob to win is shown below:\n- Turn 1: Alice can remove the second stone with value 1. Sum of removed stones = 1.\n- Turn 2: Bob removes the fifth stone with value 3. Sum of removed stones = 1 + 3 = 4.\n- Turn 3: Alices removes the fourth stone with value 4. Sum of removed stones = 1 + 3 + 4 = 8.\n- Turn 4: Bob removes the third stone with value 2. Sum of removed stones = 1 + 3 + 4 + 2 = 10.\n- Turn 5: Alice removes the first stone with value 5. Sum of removed stones = 1 + 3 + 4 + 2 + 5 = 15.\nAlice loses the game because the sum of the removed stones (15) is divisible by 3. Bob wins the game."}], "constraints": "Constraints:\n1 <= stones.length <= 10^5\n1 <= stones[i] <= 10^4", "notes": ""}, "2028": {"label": "Medium", "title": "Find Missing Observations", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4138, "total_accepted": 11900.0, "total_submissions": 28700.0, "testcase_example": "'[3,2,4,3]\\n4\\n2'", "body": "You have observations of n + m 6-sided dice rolls with each face numbered from 1 to 6. n of the observations went missing, and you only have the observations of m rolls. Fortunately, you have also calculated the average value of the n + m rolls.\nYou are given an integer array rolls of length m where rolls[i] is the value of the i^th observation. You are also given the two integers mean and n.\nReturn an array of length n containing the missing observations such that the average value of the n + m rolls is exactly mean. If there are multiple valid answers, return any of them. If no such array exists, return an empty array.\nThe average value of a set of k numbers is the sum of the numbers divided by k.\nNote that mean is an integer, so the sum of the n + m rolls should be divisible by n + m.", "examples": [{"full_text": "Example 1:\nInput: rolls = [3,2,4,3], mean = 4, n = 2\nOutput: [6,6]\nExplanation: The mean of all n + m rolls is (3 + 2 + 4 + 3 + 6 + 6) / 6 = 4.", "input": "Input: rolls = [3,2,4,3], mean = 4, n = 2", "output": "Output: [6,6]", "explanation": "Explanation: The mean of all n + m rolls is (3 + 2 + 4 + 3 + 6 + 6) / 6 = 4."}, {"full_text": "Example 2:\nInput: rolls = [1,5,6], mean = 3, n = 4\nOutput: [2,3,2,2]\nExplanation: The mean of all n + m rolls is (1 + 5 + 6 + 2 + 3 + 2 + 2) / 7 = 3.", "input": "Input: rolls = [1,5,6], mean = 3, n = 4", "output": "Output: [2,3,2,2]", "explanation": "Explanation: The mean of all n + m rolls is (1 + 5 + 6 + 2 + 3 + 2 + 2) / 7 = 3."}, {"full_text": "Example 3:\nInput: rolls = [1,2,3,4], mean = 6, n = 4\nOutput: []\nExplanation: It is impossible for the mean to be 6 no matter what the 4 missing rolls are.", "input": "Input: rolls = [1,2,3,4], mean = 6, n = 4", "output": "Output: []", "explanation": "Explanation: It is impossible for the mean to be 6 no matter what the 4 missing rolls are."}], "constraints": "Constraints:\nm == rolls.length\n1 <= n, m <= 10^5\n1 <= rolls[i], mean <= 6", "notes": ""}, "2024": {"label": "Medium", "title": "Maximize the Confusion of an Exam", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5571, "total_accepted": 11200.0, "total_submissions": 20100.0, "testcase_example": "'\"TTFF\"\\n2'", "body": "A teacher is writing a test with n true/false questions, with 'T' denoting true and 'F' denoting false. He wants to confuse the students by maximizing the number of consecutive questions with the same answer (multiple trues or multiple falses in a row).\nYou are given a string answerKey, where answerKey[i] is the original answer to the i^th question. In addition, you are given an integer k, the maximum number of times you may perform the following operation:\nChange the answer key for any question to 'T' or 'F' (i.e., set answerKey[i] to 'T' or 'F').\nReturn the maximum number of consecutive 'T's or 'F's in the answer key after performing the operation at most k times.", "examples": [{"full_text": "Example 1:\nInput: answerKey = \"TTFF\", k = 2\nOutput: 4\nExplanation: We can replace both the 'F's with 'T's to make answerKey = \"TTTT\".\nThere are four consecutive 'T's.", "input": "Input: answerKey = \"TTFF\", k = 2", "output": "Output: 4", "explanation": "Explanation: We can replace both the 'F's with 'T's to make answerKey = \"TTTT\".\nThere are four consecutive 'T's."}, {"full_text": "Example 2:\nInput: answerKey = \"TFFT\", k = 1\nOutput: 3\nExplanation: We can replace the first 'T' with an 'F' to make answerKey = \"FFFT\".\nAlternatively, we can replace the second 'T' with an 'F' to make answerKey = \"TFFF\".\nIn both cases, there are three consecutive 'F's.", "input": "Input: answerKey = \"TFFT\", k = 1", "output": "Output: 3", "explanation": "Explanation: We can replace the first 'T' with an 'F' to make answerKey = \"FFFT\".\nAlternatively, we can replace the second 'T' with an 'F' to make answerKey = \"TFFF\".\nIn both cases, there are three consecutive 'F's."}, {"full_text": "Example 3:\nInput: answerKey = \"TTFTTFTT\", k = 1\nOutput: 5\nExplanation: We can replace the first 'F' to make answerKey = \"TTTTTFTT\"\nAlternatively, we can replace the second 'F' to make answerKey = \"TTFTTTTT\".\nIn both cases, there are five consecutive 'T's.", "input": "Input: answerKey = \"TTFTTFTT\", k = 1", "output": "Output: 5", "explanation": "Explanation: We can replace the first 'F' to make answerKey = \"TTTTTFTT\"\nAlternatively, we can replace the second 'F' to make answerKey = \"TTFTTTTT\".\nIn both cases, there are five consecutive 'T's."}], "constraints": "Constraints:\nn == answerKey.length\n1 <= n <= 5 * 10^4\nanswerKey[i] is either 'T' or 'F'\n1 <= k <= n", "notes": ""}, "2023": {"label": "Medium", "title": "Number of Pairs of Strings With Concatenation Equal to Target", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7319, "total_accepted": 14800.0, "total_submissions": 20200.0, "testcase_example": "'[\"777\",\"7\",\"77\",\"77\"]\\n\"7777\"'", "body": "Given an array of digit strings nums and a digit string target, return the number of pairs of indices (i, j) (where i != j) such that the concatenation of nums[i] + nums[j] equals target.", "examples": [{"full_text": "Example 1:\nInput: nums = [\"777\",\"7\",\"77\",\"77\"], target = \"7777\"\nOutput: 4\nExplanation: Valid pairs are:\n- (0, 1): \"777\" + \"7\"\n- (1, 0): \"7\" + \"777\"\n- (2, 3): \"77\" + \"77\"\n- (3, 2): \"77\" + \"77\"", "input": "Input: nums = [\"777\",\"7\",\"77\",\"77\"], target = \"7777\"", "output": "Output: 4", "explanation": "Explanation: Valid pairs are:\n- (0, 1): \"777\" + \"7\"\n- (1, 0): \"7\" + \"777\"\n- (2, 3): \"77\" + \"77\"\n- (3, 2): \"77\" + \"77\""}, {"full_text": "Example 2:\nInput: nums = [\"123\",\"4\",\"12\",\"34\"], target = \"1234\"\nOutput: 2\nExplanation: Valid pairs are:\n- (0, 1): \"123\" + \"4\"\n- (2, 3): \"12\" + \"34\"", "input": "Input: nums = [\"123\",\"4\",\"12\",\"34\"], target = \"1234\"", "output": "Output: 2", "explanation": "Explanation: Valid pairs are:\n- (0, 1): \"123\" + \"4\"\n- (2, 3): \"12\" + \"34\""}, {"full_text": "Example 3:\nInput: nums = [\"1\",\"1\",\"1\"], target = \"11\"\nOutput: 6\nExplanation: Valid pairs are:\n- (0, 1): \"1\" + \"1\"\n- (1, 0): \"1\" + \"1\"\n- (0, 2): \"1\" + \"1\"\n- (2, 0): \"1\" + \"1\"\n- (1, 2): \"1\" + \"1\"\n- (2, 1): \"1\" + \"1\"", "input": "Input: nums = [\"1\",\"1\",\"1\"], target = \"11\"", "output": "Output: 6", "explanation": "Explanation: Valid pairs are:\n- (0, 1): \"1\" + \"1\"\n- (1, 0): \"1\" + \"1\"\n- (0, 2): \"1\" + \"1\"\n- (2, 0): \"1\" + \"1\"\n- (1, 2): \"1\" + \"1\"\n- (2, 1): \"1\" + \"1\""}], "constraints": "Constraints:\n2 <= nums.length <= 100\n1 <= nums[i].length <= 100\n2 <= target.length <= 100\nnums[i] and target consist of digits.\nnums[i] and target do not have leading zeros.", "notes": ""}, "2018": {"label": "Medium", "title": "Check if Word Can Be Placed In Crossword", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4685, "total_accepted": 6800.0, "total_submissions": 14500.0, "testcase_example": "'[[\"#\",\" \",\"#\"],[\" \",\" \",\"#\"],[\"#\",\"c\",\" \"]]\\n\"abc\"'", "body": "You are given an m x n matrix board, representing the current state of a crossword puzzle. The crossword contains lowercase English letters (from solved words), ' ' to represent any empty cells, and '#' to represent any blocked cells.\nA word can be placed horizontally (left to right or right to left) or vertically (top to bottom or bottom to top) in the board if:\nIt does not occupy a cell containing the character '#'.\nThe cell each letter is placed in must either be ' ' (empty) or match the letter already on the board.\nThere must not be any empty cells ' ' or other lowercase letters directly left or right of the word if the word was placed horizontally.\nThere must not be any empty cells ' ' or other lowercase letters directly above or below the word if the word was placed vertically.\nGiven a string word, return true if word can be placed in board, or false otherwise.", "examples": [{"full_text": "Example 1:\nInput: board = [[\"#\", \" \", \"#\"], [\" \", \" \", \"#\"], [\"#\", \"c\", \" \"]], word = \"abc\"\nOutput: true\nExplanation: The word \"abc\" can be placed as shown above (top to bottom).", "input": "Input: board = [[\"#\", \" \", \"#\"], [\" \", \" \", \"#\"], [\"#\", \"c\", \" \"]], word = \"abc\"", "output": "Output: true", "explanation": "Explanation: The word \"abc\" can be placed as shown above (top to bottom)."}, {"full_text": "Example 2:\nInput: board = [[\" \", \"#\", \"a\"], [\" \", \"#\", \"c\"], [\" \", \"#\", \"a\"]], word = \"ac\"\nOutput: false\nExplanation: It is impossible to place the word because there will always be a space/letter above or below it.", "input": "Input: board = [[\" \", \"#\", \"a\"], [\" \", \"#\", \"c\"], [\" \", \"#\", \"a\"]], word = \"ac\"", "output": "Output: false", "explanation": "Explanation: It is impossible to place the word because there will always be a space/letter above or below it."}, {"full_text": "Example 3:\nInput: board = [[\"#\", \" \", \"#\"], [\" \", \" \", \"#\"], [\"#\", \" \", \"c\"]], word = \"ca\"\nOutput: true\nExplanation: The word \"ca\" can be placed as shown above (right to left).", "input": "Input: board = [[\"#\", \" \", \"#\"], [\" \", \" \", \"#\"], [\"#\", \" \", \"c\"]], word = \"ca\"", "output": "Output: true", "explanation": "Explanation: The word \"ca\" can be placed as shown above (right to left)."}], "constraints": "Constraints:\nm == board.length\nn == board[i].length\n1 <= m * n <= 2 * 10^5\nboard[i][j] will be ' ', '#', or a lowercase English letter.\n1 <= word.length <= max(m, n)\nword will contain only lowercase English letters.", "notes": ""}, "2017": {"label": "Medium", "title": "Grid Game", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.41340000000000005, "total_accepted": 9600.0, "total_submissions": 23100.0, "testcase_example": "'[[2,5,4],[1,5,1]]'", "body": "You are given a 0-indexed 2D array grid of size 2 x n, where grid[r][c] represents the number of points at position (r, c) on the matrix. Two robots are playing a game on this matrix.\nBoth robots initially start at (0, 0) and want to reach (1, n-1). Each robot may only move to the right ((r, c) to (r, c + 1)) or down ((r, c) to (r + 1, c)).\nAt the start of the game, the first robot moves from (0, 0) to (1, n-1), collecting all the points from the cells on its path. For all cells (r, c) traversed on the path, grid[r][c] is set to 0. Then, the second robot moves from (0, 0) to (1, n-1), collecting the points on its path. Note that their paths may intersect with one another.\nThe first robot wants to minimize the number of points collected by the second robot. In contrast, the second robot wants to maximize the number of points it collects. If both robots play optimally, return the number of points collected by the second robot.", "examples": [{"full_text": "Example 1:\nInput: grid = [[2,5,4],[1,5,1]]\nOutput: 4\nExplanation: The optimal path taken by the first robot is shown in red, and the optimal path taken by the second robot is shown in blue.\nThe cells visited by the first robot are set to 0.\nThe second robot will collect 0 + 0 + 4 + 0 = 4 points.", "input": "Input: grid = [[2,5,4],[1,5,1]]", "output": "Output: 4", "explanation": "Explanation: The optimal path taken by the first robot is shown in red, and the optimal path taken by the second robot is shown in blue.\nThe cells visited by the first robot are set to 0.\nThe second robot will collect 0 + 0 + 4 + 0 = 4 points."}, {"full_text": "Example 2:\nInput: grid = [[3,3,1],[8,5,2]]\nOutput: 4\nExplanation: The optimal path taken by the first robot is shown in red, and the optimal path taken by the second robot is shown in blue.\nThe cells visited by the first robot are set to 0.\nThe second robot will collect 0 + 3 + 1 + 0 = 4 points.", "input": "Input: grid = [[3,3,1],[8,5,2]]", "output": "Output: 4", "explanation": "Explanation: The optimal path taken by the first robot is shown in red, and the optimal path taken by the second robot is shown in blue.\nThe cells visited by the first robot are set to 0.\nThe second robot will collect 0 + 3 + 1 + 0 = 4 points."}, {"full_text": "Example 3:\nInput: grid = [[1,3,1,15],[1,3,3,1]]\nOutput: 7\nExplanation: The optimal path taken by the first robot is shown in red, and the optimal path taken by the second robot is shown in blue.\nThe cells visited by the first robot are set to 0.\nThe second robot will collect 0 + 1 + 3 + 3 + 0 = 7 points.", "input": "Input: grid = [[1,3,1,15],[1,3,3,1]]", "output": "Output: 7", "explanation": "Explanation: The optimal path taken by the first robot is shown in red, and the optimal path taken by the second robot is shown in blue.\nThe cells visited by the first robot are set to 0.\nThe second robot will collect 0 + 1 + 3 + 3 + 0 = 7 points."}], "constraints": "Constraints:\ngrid.length == 2\nn == grid[r].length\n1 <= n <= 5 * 10^4\n1 <= grid[r][c] <= 10^5", "notes": ""}, "2013": {"label": "Medium", "title": "Detect Squares", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.433, "total_accepted": 12900.0, "total_submissions": 29800.0, "testcase_example": "'[\"DetectSquares\",\"add\",\"add\",\"add\",\"count\",\"count\",\"add\",\"count\"]\\n' +\n  '[[],[[3,10]],[[11,2]],[[3,2]],[[11,10]],[[14,8]],[[11,2]],[[11,10]]]'", "body": "You are given a stream of points on the X-Y plane. Design an algorithm that:\nAdds new points from the stream into a data structure. Duplicate points are allowed and should be treated as different points.\nGiven a query point, counts the number of ways to choose three points from the data structure such that the three points and the query point form an axis-aligned square with positive area.\nAn axis-aligned square is a square whose edges are all the same length and are either parallel or perpendicular to the x-axis and y-axis.\nImplement the DetectSquares class:\nDetectSquares() Initializes the object with an empty data structure.\nvoid add(int[] point) Adds a new point point = [x, y] to the data structure.\nint count(int[] point) Counts the number of ways to form axis-aligned squares with point point = [x, y] as described above.", "examples": [{"full_text": "Example 1:\nInput\n[\"DetectSquares\", \"add\", \"add\", \"add\", \"count\", \"count\", \"add\", \"count\"]\n[[], [[3, 10]], [[11, 2]], [[3, 2]], [[11, 10]], [[14, 8]], [[11, 2]], [[11, 10]]]\nOutput\n[null, null, null, null, 1, 0, null, 2]\nExplanation\nDetectSquares detectSquares = new DetectSquares();\ndetectSquares.add([3, 10]);\ndetectSquares.add([11, 2]);\ndetectSquares.add([3, 2]);\ndetectSquares.count([11, 10]); // return 1. You can choose:\n// - The first, second, and third points\ndetectSquares.count([14, 8]); // return 0. The query point cannot form a square with any points in the data structure.\ndetectSquares.add([11, 2]); // Adding duplicate points is allowed.\ndetectSquares.count([11, 10]); // return 2. You can choose:\n// - The first, second, and third points\n// - The first, third, and fourth points", "input": "Input\n[\"DetectSquares\", \"add\", \"add\", \"add\", \"count\", \"count\", \"add\", \"count\"]\n[[], [[3, 10]], [[11, 2]], [[3, 2]], [[11, 10]], [[14, 8]], [[11, 2]], [[11, 10]]]", "output": "Output\n[null, null, null, null, 1, 0, null, 2]", "explanation": "Explanation\nDetectSquares detectSquares = new DetectSquares();\ndetectSquares.add([3, 10]);\ndetectSquares.add([11, 2]);\ndetectSquares.add([3, 2]);\ndetectSquares.count([11, 10]); // return 1. You can choose:\n// - The first, second, and third points\ndetectSquares.count([14, 8]); // return 0. The query point cannot form a square with any points in the data structure.\ndetectSquares.add([11, 2]); // Adding duplicate points is allowed.\ndetectSquares.count([11, 10]); // return 2. You can choose:\n// - The first, second, and third points\n// - The first, third, and fourth points"}], "constraints": "Constraints:\npoint.length == 2\n0 <= x, y <= 1000\nAt most 3000 calls in total will be made to add and count.", "notes": ""}, "2012": {"label": "Medium", "title": "Sum of Beauty in the Array", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.45409999999999995, "total_accepted": 12600.0, "total_submissions": 27800.0, "testcase_example": "'[1,2,3]'", "body": "You are given a 0-indexed integer array nums. For each index i (1 <= i <= nums.length - 2) the beauty of nums[i] equals:\n2, if nums[j] < nums[i] < nums[k], for all 0 <= j < i and for all i < k <= nums.length - 1.\n1, if nums[i - 1] < nums[i] < nums[i + 1], and the previous condition is not satisfied.\n0, if none of the previous conditions holds.\nReturn the sum of beauty of all nums[i] where 1 <= i <= nums.length - 2.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,2,3]\nOutput: 2\nExplanation: For each index i in the range 1 <= i <= 1:\n- The beauty of nums[1] equals 2.", "input": "Input: nums = [1,2,3]", "output": "Output: 2", "explanation": "Explanation: For each index i in the range 1 <= i <= 1:\n- The beauty of nums[1] equals 2."}, {"full_text": "Example 2:\nInput: nums = [2,4,6,4]\nOutput: 1\nExplanation: For each index i in the range 1 <= i <= 2:\n- The beauty of nums[1] equals 1.\n- The beauty of nums[2] equals 0.", "input": "Input: nums = [2,4,6,4]", "output": "Output: 1", "explanation": "Explanation: For each index i in the range 1 <= i <= 2:\n- The beauty of nums[1] equals 1.\n- The beauty of nums[2] equals 0."}, {"full_text": "Example 3:\nInput: nums = [3,2,1]\nOutput: 0\nExplanation: For each index i in the range 1 <= i <= 1:\n- The beauty of nums[1] equals 0.", "input": "Input: nums = [3,2,1]", "output": "Output: 0", "explanation": "Explanation: For each index i in the range 1 <= i <= 1:\n- The beauty of nums[1] equals 0."}], "constraints": "Constraints:\n3 <= nums.length <= 10^5\n1 <= nums[i] <= 10^5", "notes": ""}, "2008": {"label": "Medium", "title": "Maximum Earnings From Taxi", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4242, "total_accepted": 10200.0, "total_submissions": 24100.0, "testcase_example": "'5\\n[[2,5,4],[1,5,1]]'", "body": "There are n points on a road you are driving your taxi on. The n points on the road are labeled from 1 to n in the direction you are going, and you want to drive from point 1 to point n to make money by picking up passengers. You cannot change the direction of the taxi.\nThe passengers are represented by a 0-indexed 2D integer array rides, where rides[i] = [starti, endi, tipi] denotes the i^th passenger requesting a ride from point starti to point endi who is willing to give a tipi dollar tip.\nFor each passenger i you pick up, you earn endi - starti + tipi dollars. You may only drive at most one passenger at a time.\nGiven n and rides, return the maximum number of dollars you can earn by picking up the passengers optimally.\nNote: You may drop off a passenger and pick up a different passenger at the same point.", "examples": [{"full_text": "Example 1:\nInput: n = 5, rides = [[2,5,4],[1,5,1]]\nOutput: 7\nExplanation: We can pick up passenger 0 to earn 5 - 2 + 4 = 7 dollars.", "input": "Input: n = 5, rides = [[2,5,4],[1,5,1]]", "output": "Output: 7", "explanation": "Explanation: We can pick up passenger 0 to earn 5 - 2 + 4 = 7 dollars."}, {"full_text": "Example 2:\nInput: n = 20, rides = [[1,6,1],[3,10,2],[10,12,3],[11,12,2],[12,15,2],[13,18,1]]\nOutput: 20\nExplanation: We will pick up the following passengers:\n- Drive passenger 1 from point 3 to point 10 for a profit of 10 - 3 + 2 = 9 dollars.\n- Drive passenger 2 from point 10 to point 12 for a profit of 12 - 10 + 3 = 5 dollars.\n- Drive passenger 5 from point 13 to point 18 for a profit of 18 - 13 + 1 = 6 dollars.\nWe earn 9 + 5 + 6 = 20 dollars in total.", "input": "Input: n = 20, rides = [[1,6,1],[3,10,2],[10,12,3],[11,12,2],[12,15,2],[13,18,1]]", "output": "Output: 20", "explanation": "Explanation: We will pick up the following passengers:\n- Drive passenger 1 from point 3 to point 10 for a profit of 10 - 3 + 2 = 9 dollars.\n- Drive passenger 2 from point 10 to point 12 for a profit of 12 - 10 + 3 = 5 dollars.\n- Drive passenger 5 from point 13 to point 18 for a profit of 18 - 13 + 1 = 6 dollars.\nWe earn 9 + 5 + 6 = 20 dollars in total."}], "constraints": "Constraints:\n1 <= n <= 10^5\n1 <= rides.length <= 3 * 10^4\nrides[i].length == 3\n1 <= starti < endi <= n\n1 <= tipi <= 10^5", "notes": ""}, "2007": {"label": "Medium", "title": "Find Original Array From Doubled Array", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3711, "total_accepted": 31000.0, "total_submissions": 83600.0, "testcase_example": "'[1,3,4,2,6,8]'", "body": "An integer array original is transformed into a doubled array changed by appending twice the value of every element in original, and then randomly shuffling the resulting array.\nGiven an array changed, return original if changed is a doubled array. If changed is not a doubled array, return an empty array. The elements in original may be returned in any order.", "examples": [{"full_text": "Example 1:\nInput: changed = [1,3,4,2,6,8]\nOutput: [1,3,4]\nExplanation: One possible original array could be [1,3,4]:\n- Twice the value of 1 is 1 * 2 = 2.\n- Twice the value of 3 is 3 * 2 = 6.\n- Twice the value of 4 is 4 * 2 = 8.\nOther original arrays could be [4,3,1] or [3,1,4].", "input": "Input: changed = [1,3,4,2,6,8]", "output": "Output: [1,3,4]", "explanation": "Explanation: One possible original array could be [1,3,4]:\n- Twice the value of 1 is 1 * 2 = 2.\n- Twice the value of 3 is 3 * 2 = 6.\n- Twice the value of 4 is 4 * 2 = 8.\nOther original arrays could be [4,3,1] or [3,1,4]."}, {"full_text": "Example 2:\nInput: changed = [6,3,0,1]\nOutput: []\nExplanation: changed is not a doubled array.", "input": "Input: changed = [6,3,0,1]", "output": "Output: []", "explanation": "Explanation: changed is not a doubled array."}, {"full_text": "Example 3:\nInput: changed = [1]\nOutput: []\nExplanation: changed is not a doubled array.", "input": "Input: changed = [1]", "output": "Output: []", "explanation": "Explanation: changed is not a doubled array."}], "constraints": "Constraints:\n1 <= changed.length <= 10^5\n0 <= changed[i] <= 10^5", "notes": ""}, "2002": {"label": "Medium", "title": "Maximum Product of the Length of Two Palindromic Subsequences", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5259, "total_accepted": 10400.0, "total_submissions": 19700.0, "testcase_example": "'\"leetcodecom\"'", "body": "Given a string s, find two disjoint palindromic subsequences of s such that the product of their lengths is maximized. The two subsequences are disjoint if they do not both pick a character at the same index.\nReturn the maximum possible product of the lengths of the two palindromic subsequences.\nA subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters. A string is palindromic if it reads the same forward and backward.", "examples": [{"full_text": "Example 1:\nInput: s = \"leetcodecom\"\nOutput: 9\nExplanation: An optimal solution is to choose \"ete\" for the 1^st subsequence and \"cdc\" for the 2^nd subsequence.\nThe product of their lengths is: 3 * 3 = 9.", "input": "Input: s = \"leetcodecom\"", "output": "Output: 9", "explanation": "Explanation: An optimal solution is to choose \"ete\" for the 1^st subsequence and \"cdc\" for the 2^nd subsequence.\nThe product of their lengths is: 3 * 3 = 9."}, {"full_text": "Example 2:\nInput: s = \"bb\"\nOutput: 1\nExplanation: An optimal solution is to choose \"b\" (the first character) for the 1^st subsequence and \"b\" (the second character) for the 2^nd subsequence.\nThe product of their lengths is: 1 * 1 = 1.", "input": "Input: s = \"bb\"", "output": "Output: 1", "explanation": "Explanation: An optimal solution is to choose \"b\" (the first character) for the 1^st subsequence and \"b\" (the second character) for the 2^nd subsequence.\nThe product of their lengths is: 1 * 1 = 1."}, {"full_text": "Example 3:\nInput: s = \"accbcaxxcxx\"\nOutput: 25\nExplanation: An optimal solution is to choose \"accca\" for the 1^st subsequence and \"xxcxx\" for the 2^nd subsequence.\nThe product of their lengths is: 5 * 5 = 25.", "input": "Input: s = \"accbcaxxcxx\"", "output": "Output: 25", "explanation": "Explanation: An optimal solution is to choose \"accca\" for the 1^st subsequence and \"xxcxx\" for the 2^nd subsequence.\nThe product of their lengths is: 5 * 5 = 25."}], "constraints": "Constraints:\n2 <= s.length <= 12\ns consists of lowercase English letters only.", "notes": ""}, "2001": {"label": "Medium", "title": "Number of Pairs of Interchangeable Rectangles", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4229, "total_accepted": 14400.0, "total_submissions": 34000.0, "testcase_example": "'[[4,8],[3,6],[10,20],[15,30]]'", "body": "You are given n rectangles represented by a 0-indexed 2D integer array rectangles, where rectangles[i] = [widthi, heighti] denotes the width and height of the i^th rectangle.\nTwo rectangles i and j (i < j) are considered interchangeable if they have the same width-to-height ratio. More formally, two rectangles are interchangeable if widthi/heighti == widthj/heightj (using decimal division, not integer division).\nReturn the number of pairs of interchangeable rectangles in rectangles.", "examples": [{"full_text": "Example 1:\nInput: rectangles = [[4,8],[3,6],[10,20],[15,30]]\nOutput: 6\nExplanation: The following are the interchangeable pairs of rectangles by index (0-indexed):\n- Rectangle 0 with rectangle 1: 4/8 == 3/6.\n- Rectangle 0 with rectangle 2: 4/8 == 10/20.\n- Rectangle 0 with rectangle 3: 4/8 == 15/30.\n- Rectangle 1 with rectangle 2: 3/6 == 10/20.\n- Rectangle 1 with rectangle 3: 3/6 == 15/30.\n- Rectangle 2 with rectangle 3: 10/20 == 15/30.", "input": "Input: rectangles = [[4,8],[3,6],[10,20],[15,30]]", "output": "Output: 6", "explanation": "Explanation: The following are the interchangeable pairs of rectangles by index (0-indexed):\n- Rectangle 0 with rectangle 1: 4/8 == 3/6.\n- Rectangle 0 with rectangle 2: 4/8 == 10/20.\n- Rectangle 0 with rectangle 3: 4/8 == 15/30.\n- Rectangle 1 with rectangle 2: 3/6 == 10/20.\n- Rectangle 1 with rectangle 3: 3/6 == 15/30.\n- Rectangle 2 with rectangle 3: 10/20 == 15/30."}, {"full_text": "Example 2:\nInput: rectangles = [[4,5],[7,8]]\nOutput: 0\nExplanation: There are no interchangeable pairs of rectangles.", "input": "Input: rectangles = [[4,5],[7,8]]", "output": "Output: 0", "explanation": "Explanation: There are no interchangeable pairs of rectangles."}], "constraints": "Constraints:\nn == rectangles.length\n1 <= n <= 10^5\nrectangles[i].length == 2\n1 <= widthi, heighti <= 10^5", "notes": ""}, "1997": {"label": "Medium", "title": "First Day Where You Have Been in All the Rooms", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3508, "total_accepted": 5300.0, "total_submissions": 15000.0, "testcase_example": "'[0,0]'", "body": "There are n rooms you need to visit, labeled from 0 to n - 1. Each day is labeled, starting from 0. You will go in and visit one room a day.\nInitially on day 0, you visit room 0. The order you visit the rooms for the coming days is determined by the following rules and a given 0-indexed array nextVisit of length n:\nAssuming that on a day, you visit room i,\nif you have been in room i an odd number of times (including the current visit), on the next day you will visit a room with a lower or equal room number specified by nextVisit[i] where 0 <= nextVisit[i] <= i;\nif you have been in room i an even number of times (including the current visit), on the next day you will visit room (i + 1) mod n.\nReturn the label of the first day where you have been in all the rooms. It can be shown that such a day exists. Since the answer may be very large, return it modulo 10^9 + 7.", "examples": [{"full_text": "Example 1:\nInput: nextVisit = [0,0]\nOutput: 2\nExplanation:\n- On day 0, you visit room 0. The total times you have been in room 0 is 1, which is odd.\nOn the next day you will visit room nextVisit[0] = 0\n- On day 1, you visit room 0, The total times you have been in room 0 is 2, which is even.\nOn the next day you will visit room (0 + 1) mod 2 = 1\n- On day 2, you visit room 1. This is the first day where you have been in all the rooms.", "input": "Input: nextVisit = [0,0]", "output": "Output: 2", "explanation": "Explanation:\n- On day 0, you visit room 0. The total times you have been in room 0 is 1, which is odd.\nOn the next day you will visit room nextVisit[0] = 0\n- On day 1, you visit room 0, The total times you have been in room 0 is 2, which is even.\nOn the next day you will visit room (0 + 1) mod 2 = 1\n- On day 2, you visit room 1. This is the first day where you have been in all the rooms."}, {"full_text": "Example 2:\nInput: nextVisit = [0,0,2]\nOutput: 6\nExplanation:\nYour room visiting order for each day is: [0,0,1,0,0,1,2,...].\nDay 6 is the first day where you have been in all the rooms.", "input": "Input: nextVisit = [0,0,2]", "output": "Output: 6", "explanation": "Explanation:\nYour room visiting order for each day is: [0,0,1,0,0,1,2,...].\nDay 6 is the first day where you have been in all the rooms."}, {"full_text": "Example 3:\nInput: nextVisit = [0,1,2,0]\nOutput: 6\nExplanation:\nYour room visiting order for each day is: [0,0,1,1,2,2,3,...].\nDay 6 is the first day where you have been in all the rooms.", "input": "Input: nextVisit = [0,1,2,0]", "output": "Output: 6", "explanation": "Explanation:\nYour room visiting order for each day is: [0,0,1,1,2,2,3,...].\nDay 6 is the first day where you have been in all the rooms."}], "constraints": "Constraints:\nn == nextVisit.length\n2 <= n <= 10^5\n0 <= nextVisit[i] <= i", "notes": ""}, "1996": {"label": "Medium", "title": "The Number of Weak Characters in the Game", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3179, "total_accepted": 14000.0, "total_submissions": 44000.0, "testcase_example": "'[[5,5],[6,3],[3,6]]'", "body": "You are playing a game that contains multiple characters, and each of the characters has two main properties: attack and defense. You are given a 2D integer array properties where properties[i] = [attacki, defensei] represents the properties of the i^th character in the game.\nA character is said to be weak if any other character has both attack and defense levels strictly greater than this character's attack and defense levels. More formally, a character i is said to be weak if there exists another character j where attackj > attacki and defensej > defensei.\nReturn the number of weak characters.", "examples": [{"full_text": "Example 1:\nInput: properties = [[5,5],[6,3],[3,6]]\nOutput: 0\nExplanation: No character has strictly greater attack and defense than the other.", "input": "Input: properties = [[5,5],[6,3],[3,6]]", "output": "Output: 0", "explanation": "Explanation: No character has strictly greater attack and defense than the other."}, {"full_text": "Example 2:\nInput: properties = [[2,2],[3,3]]\nOutput: 1\nExplanation: The first character is weak because the second character has a strictly greater attack and defense.", "input": "Input: properties = [[2,2],[3,3]]", "output": "Output: 1", "explanation": "Explanation: The first character is weak because the second character has a strictly greater attack and defense."}, {"full_text": "Example 3:\nInput: properties = [[1,5],[10,4],[4,3]]\nOutput: 1\nExplanation: The third character is weak because the second character has a strictly greater attack and defense.", "input": "Input: properties = [[1,5],[10,4],[4,3]]", "output": "Output: 1", "explanation": "Explanation: The third character is weak because the second character has a strictly greater attack and defense."}], "constraints": "Constraints:\n2 <= properties.length <= 10^5\nproperties[i].length == 2\n1 <= attacki, defensei <= 10^5", "notes": ""}, "1993": {"label": "Medium", "title": "Operations on Tree", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.41350000000000003, "total_accepted": 6000.0, "total_submissions": 14600.0, "testcase_example": "'[\"LockingTree\",\"lock\",\"unlock\",\"unlock\",\"lock\",\"upgrade\",\"lock\"]\\n' +\n  '[[[-1,0,0,1,1,2,2]],[2,2],[2,3],[2,2],[4,5],[0,1],[0,1]]'", "body": "You are given a tree with n nodes numbered from 0 to n - 1 in the form of a parent array parent where parent[i] is the parent of the i^th node. The root of the tree is node 0, so parent[0] = -1 since it has no parent. You want to design a data structure that allows users to lock, unlock, and upgrade nodes in the tree.\nThe data structure should support the following functions:\nLock: Locks the given node for the given user and prevents other users from locking the same node. You may only lock a node using this function if the node is unlocked.\nUnlock: Unlocks the given node for the given user. You may only unlock a node using this function if it is currently locked by the same user.\nUpgrade: Locks the given node for the given user and unlocks all of its descendants regardless of who locked it. You may only upgrade a node if all 3 conditions are true:\n\nThe node is unlocked,\nIt has at least one locked descendant (by any user), and\nIt does not have any locked ancestors.\n\n\nImplement the LockingTree class:\nLockingTree(int[] parent) initializes the data structure with the parent array.\nlock(int num, int user) returns true if it is possible for the user with id user to lock the node num, or false otherwise. If it is possible, the node num will become locked by the user with id user.\nunlock(int num, int user) returns true if it is possible for the user with id user to unlock the node num, or false otherwise. If it is possible, the node num will become unlocked.\nupgrade(int num, int user) returns true if it is possible for the user with id user to upgrade the node num, or false otherwise. If it is possible, the node num will be upgraded.", "examples": [{"full_text": "Example 1:\nInput\n[\"LockingTree\", \"lock\", \"unlock\", \"unlock\", \"lock\", \"upgrade\", \"lock\"]\n[[[-1, 0, 0, 1, 1, 2, 2]], [2, 2], [2, 3], [2, 2], [4, 5], [0, 1], [0, 1]]\nOutput\n[null, true, false, true, true, true, false]\nExplanation\nLockingTree lockingTree = new LockingTree([-1, 0, 0, 1, 1, 2, 2]);\nlockingTree.lock(2, 2); // return true because node 2 is unlocked.\n// Node 2 will now be locked by user 2.\nlockingTree.unlock(2, 3); // return false because user 3 cannot unlock a node locked by user 2.\nlockingTree.unlock(2, 2); // return true because node 2 was previously locked by user 2.\n// Node 2 will now be unlocked.\nlockingTree.lock(4, 5); // return true because node 4 is unlocked.\n// Node 4 will now be locked by user 5.\nlockingTree.upgrade(0, 1); // return true because node 0 is unlocked and has at least one locked descendant (node 4).\n// Node 0 will now be locked by user 1 and node 4 will now be unlocked.\nlockingTree.lock(0, 1); // return false because node 0 is already locked.", "input": "Input\n[\"LockingTree\", \"lock\", \"unlock\", \"unlock\", \"lock\", \"upgrade\", \"lock\"]\n[[[-1, 0, 0, 1, 1, 2, 2]], [2, 2], [2, 3], [2, 2], [4, 5], [0, 1], [0, 1]]", "output": "Output\n[null, true, false, true, true, true, false]", "explanation": "Explanation\nLockingTree lockingTree = new LockingTree([-1, 0, 0, 1, 1, 2, 2]);\nlockingTree.lock(2, 2); // return true because node 2 is unlocked.\n// Node 2 will now be locked by user 2.\nlockingTree.unlock(2, 3); // return false because user 3 cannot unlock a node locked by user 2.\nlockingTree.unlock(2, 2); // return true because node 2 was previously locked by user 2.\n// Node 2 will now be unlocked.\nlockingTree.lock(4, 5); // return true because node 4 is unlocked.\n// Node 4 will now be locked by user 5.\nlockingTree.upgrade(0, 1); // return true because node 0 is unlocked and has at least one locked descendant (node 4).\n// Node 0 will now be locked by user 1 and node 4 will now be unlocked.\nlockingTree.lock(0, 1); // return false because node 0 is already locked."}], "constraints": "Constraints:\nn == parent.length\n2 <= n <= 2000\n0 <= parent[i] <= n - 1 for i != 0\nparent[0] == -1\n0 <= num <= n - 1\n1 <= user <= 10^4\nparent represents a valid tree.\nAt most 2000 calls in total will be made to lock, unlock, and upgrade.", "notes": ""}, "1992": {"label": "Medium", "title": "Find All Groups of Farmland", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6675, "total_accepted": 11800.0, "total_submissions": 17700.0, "testcase_example": "'[[1,0,0],[0,1,1],[0,1,1]]'", "body": "You are given a 0-indexed m x n binary matrix land where a 0 represents a hectare of forested land and a 1 represents a hectare of farmland.\nTo keep the land organized, there are designated rectangular areas of hectares that consist entirely of farmland. These rectangular areas are called groups. No two groups are adjacent, meaning farmland in one group is not four-directionally adjacent to another farmland in a different group.\nland can be represented by a coordinate system where the top left corner of land is (0, 0) and the bottom right corner of land is (m-1, n-1). Find the coordinates of the top left and bottom right corner of each group of farmland. A group of farmland with a top left corner at (r1, c1) and a bottom right corner at (r2, c2) is represented by the 4-length array [r1, c1, r2, c2].\nReturn a 2D array containing the 4-length arrays described above for each group of farmland in land. If there are no groups of farmland, return an empty array. You may return the answer in any order.", "examples": [{"full_text": "Example 1:\nInput: land = [[1,0,0],[0,1,1],[0,1,1]]\nOutput: [[0,0,0,0],[1,1,2,2]]\nExplanation:\nThe first group has a top left corner at land[0][0] and a bottom right corner at land[0][0].\nThe second group has a top left corner at land[1][1] and a bottom right corner at land[2][2].", "input": "Input: land = [[1,0,0],[0,1,1],[0,1,1]]", "output": "Output: [[0,0,0,0],[1,1,2,2]]", "explanation": "Explanation:\nThe first group has a top left corner at land[0][0] and a bottom right corner at land[0][0].\nThe second group has a top left corner at land[1][1] and a bottom right corner at land[2][2]."}, {"full_text": "Example 2:\nInput: land = [[1,1],[1,1]]\nOutput: [[0,0,1,1]]\nExplanation:\nThe first group has a top left corner at land[0][0] and a bottom right corner at land[1][1].", "input": "Input: land = [[1,1],[1,1]]", "output": "Output: [[0,0,1,1]]", "explanation": "Explanation:\nThe first group has a top left corner at land[0][0] and a bottom right corner at land[1][1]."}, {"full_text": "Example 3:\nInput: land = [[0]]\nOutput: []\nExplanation:\nThere are no groups of farmland.", "input": "Input: land = [[0]]", "output": "Output: []", "explanation": "Explanation:\nThere are no groups of farmland."}], "constraints": "Constraints:\nm == land.length\nn == land[i].length\n1 <= m, n <= 300\nland consists of only 0's and 1's.\nGroups of farmland are rectangular in shape.", "notes": ""}, "1986": {"label": "Medium", "title": "Minimum Number of Work Sessions to Finish the Tasks", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3111, "total_accepted": 10100.0, "total_submissions": 32600.0, "testcase_example": "'[1,2,3]\\n3'", "body": "There are n tasks assigned to you. The task times are represented as an integer array tasks of length n, where the i^th task takes tasks[i] hours to finish. A work session is when you work for at most sessionTime consecutive hours and then take a break.\nYou should finish the given tasks in a way that satisfies the following conditions:\nIf you start a task in a work session, you must complete it in the same work session.\nYou can start a new task immediately after finishing the previous one.\nYou may complete the tasks in any order.\nGiven tasks and sessionTime, return the minimum number of work sessions needed to finish all the tasks following the conditions above.\nThe tests are generated such that sessionTime is greater than or equal to the maximum element in tasks[i].", "examples": [{"full_text": "Example 1:\nInput: tasks = [1,2,3], sessionTime = 3\nOutput: 2\nExplanation: You can finish the tasks in two work sessions.\n- First work session: finish the first and the second tasks in 1 + 2 = 3 hours.\n- Second work session: finish the third task in 3 hours.", "input": "Input: tasks = [1,2,3], sessionTime = 3", "output": "Output: 2", "explanation": "Explanation: You can finish the tasks in two work sessions.\n- First work session: finish the first and the second tasks in 1 + 2 = 3 hours.\n- Second work session: finish the third task in 3 hours."}, {"full_text": "Example 2:\nInput: tasks = [3,1,3,1,1], sessionTime = 8\nOutput: 2\nExplanation: You can finish the tasks in two work sessions.\n- First work session: finish all the tasks except the last one in 3 + 1 + 3 + 1 = 8 hours.\n- Second work session: finish the last task in 1 hour.", "input": "Input: tasks = [3,1,3,1,1], sessionTime = 8", "output": "Output: 2", "explanation": "Explanation: You can finish the tasks in two work sessions.\n- First work session: finish all the tasks except the last one in 3 + 1 + 3 + 1 = 8 hours.\n- Second work session: finish the last task in 1 hour."}, {"full_text": "Example 3:\nInput: tasks = [1,2,3,4,5], sessionTime = 15\nOutput: 1\nExplanation: You can finish all the tasks in one work session.", "input": "Input: tasks = [1,2,3,4,5], sessionTime = 15", "output": "Output: 1", "explanation": "Explanation: You can finish all the tasks in one work session."}], "constraints": "Constraints:\nn == tasks.length\n1 <= n <= 14\n1 <= tasks[i] <= 10\nmax(tasks[i]) <= sessionTime <= 15", "notes": ""}, "1985": {"label": "Medium", "title": "Find the Kth Largest Integer in the Array", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.44689999999999996, "total_accepted": 23700.0, "total_submissions": 53000.0, "testcase_example": "'[\"3\",\"6\",\"7\",\"10\"]\\n4'", "body": "You are given an array of strings nums and an integer k. Each string in nums represents an integer without leading zeros.\nReturn the string that represents the k^th largest integer in nums.\nNote: Duplicate numbers should be counted distinctly. For example, if nums is [\"1\",\"2\",\"2\"], \"2\" is the first largest integer, \"2\" is the second-largest integer, and \"1\" is the third-largest integer.", "examples": [{"full_text": "Example 1:\nInput: nums = [\"3\",\"6\",\"7\",\"10\"], k = 4\nOutput: \"3\"\nExplanation:\nThe numbers in nums sorted in non-decreasing order are [\"3\",\"6\",\"7\",\"10\"].\nThe 4^th largest integer in nums is \"3\".", "input": "Input: nums = [\"3\",\"6\",\"7\",\"10\"], k = 4", "output": "Output: \"3\"", "explanation": "Explanation:\nThe numbers in nums sorted in non-decreasing order are [\"3\",\"6\",\"7\",\"10\"].\nThe 4^th largest integer in nums is \"3\"."}, {"full_text": "Example 2:\nInput: nums = [\"2\",\"21\",\"12\",\"1\"], k = 3\nOutput: \"2\"\nExplanation:\nThe numbers in nums sorted in non-decreasing order are [\"1\",\"2\",\"12\",\"21\"].\nThe 3^rd largest integer in nums is \"2\".", "input": "Input: nums = [\"2\",\"21\",\"12\",\"1\"], k = 3", "output": "Output: \"2\"", "explanation": "Explanation:\nThe numbers in nums sorted in non-decreasing order are [\"1\",\"2\",\"12\",\"21\"].\nThe 3^rd largest integer in nums is \"2\"."}, {"full_text": "Example 3:\nInput: nums = [\"0\",\"0\"], k = 2\nOutput: \"0\"\nExplanation:\nThe numbers in nums sorted in non-decreasing order are [\"0\",\"0\"].\nThe 2^nd largest integer in nums is \"0\".", "input": "Input: nums = [\"0\",\"0\"], k = 2", "output": "Output: \"0\"", "explanation": "Explanation:\nThe numbers in nums sorted in non-decreasing order are [\"0\",\"0\"].\nThe 2^nd largest integer in nums is \"0\"."}], "constraints": "Constraints:\n1 <= k <= nums.length <= 10^4\n1 <= nums[i].length <= 100\nnums[i] consists of only digits.\nnums[i] will not have any leading zeros.", "notes": ""}, "1981": {"label": "Medium", "title": "Minimize the Difference Between Target and Chosen Elements", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3281, "total_accepted": 13700.0, "total_submissions": 41700.0, "testcase_example": "'[[1,2,3],[4,5,6],[7,8,9]]\\n13'", "body": "You are given an m x n integer matrix mat and an integer target.\nChoose one integer from each row in the matrix such that the absolute difference between target and the sum of the chosen elements is minimized.\nReturn the minimum absolute difference.\nThe absolute difference between two numbers a and b is the absolute value of a - b.", "examples": [{"full_text": "Example 1:\nInput: mat = [[1,2,3],[4,5,6],[7,8,9]], target = 13\nOutput: 0\nExplanation: One possible choice is to:\n- Choose 1 from the first row.\n- Choose 5 from the second row.\n- Choose 7 from the third row.\nThe sum of the chosen elements is 13, which equals the target, so the absolute difference is 0.", "input": "Input: mat = [[1,2,3],[4,5,6],[7,8,9]], target = 13", "output": "Output: 0", "explanation": "Explanation: One possible choice is to:\n- Choose 1 from the first row.\n- Choose 5 from the second row.\n- Choose 7 from the third row.\nThe sum of the chosen elements is 13, which equals the target, so the absolute difference is 0."}, {"full_text": "Example 2:\nInput: mat = [[1],[2],[3]], target = 100\nOutput: 94\nExplanation: The best possible choice is to:\n- Choose 1 from the first row.\n- Choose 2 from the second row.\n- Choose 3 from the third row.\nThe sum of the chosen elements is 6, and the absolute difference is 94.", "input": "Input: mat = [[1],[2],[3]], target = 100", "output": "Output: 94", "explanation": "Explanation: The best possible choice is to:\n- Choose 1 from the first row.\n- Choose 2 from the second row.\n- Choose 3 from the third row.\nThe sum of the chosen elements is 6, and the absolute difference is 94."}, {"full_text": "Example 3:\nInput: mat = [[1,2,9,8,7]], target = 6\nOutput: 1\nExplanation: The best choice is to choose 7 from the first row.\nThe absolute difference is 1.", "input": "Input: mat = [[1,2,9,8,7]], target = 6", "output": "Output: 1", "explanation": "Explanation: The best choice is to choose 7 from the first row.\nThe absolute difference is 1."}], "constraints": "Constraints:\nm == mat.length\nn == mat[i].length\n1 <= m, n <= 70\n1 <= mat[i][j] <= 70\n1 <= target <= 800", "notes": ""}, "1980": {"label": "Medium", "title": "Find Unique Binary String", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6269, "total_accepted": 19700.0, "total_submissions": 31400.0, "testcase_example": "'[\"01\",\"10\"]'", "body": "Given an array of strings nums containing n unique binary strings each of length n, return a binary string of length n that does not appear in nums. If there are multiple answers, you may return any of them.", "examples": [{"full_text": "Example 1:\nInput: nums = [\"01\",\"10\"]\nOutput: \"11\"\nExplanation: \"11\" does not appear in nums. \"00\" would also be correct.", "input": "Input: nums = [\"01\",\"10\"]", "output": "Output: \"11\"", "explanation": "Explanation: \"11\" does not appear in nums. \"00\" would also be correct."}, {"full_text": "Example 2:\nInput: nums = [\"00\",\"01\"]\nOutput: \"11\"\nExplanation: \"11\" does not appear in nums. \"10\" would also be correct.", "input": "Input: nums = [\"00\",\"01\"]", "output": "Output: \"11\"", "explanation": "Explanation: \"11\" does not appear in nums. \"10\" would also be correct."}, {"full_text": "Example 3:\nInput: nums = [\"111\",\"011\",\"001\"]\nOutput: \"101\"\nExplanation: \"101\" does not appear in nums. \"000\", \"010\", \"100\", and \"110\" would also be correct.", "input": "Input: nums = [\"111\",\"011\",\"001\"]", "output": "Output: \"101\"", "explanation": "Explanation: \"101\" does not appear in nums. \"000\", \"010\", \"100\", and \"110\" would also be correct."}], "constraints": "Constraints:\nn == nums.length\n1 <= n <= 16\nnums[i].length == n\nnums[i] is either '0' or '1'.\nAll the strings of nums are unique.", "notes": ""}, "1976": {"label": "Medium", "title": "Number of Ways to Arrive at Destination", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.32289999999999996, "total_accepted": 11600.0, "total_submissions": 36100.0, "testcase_example": "'7\\n' +\n  '[[0,6,7],[0,1,2],[1,2,3],[1,3,3],[6,3,3],[3,5,1],[6,5,1],[2,5,1],[0,4,5],[4,6,2]]'", "body": "You are in a city that consists of n intersections numbered from 0 to n - 1 with bi-directional roads between some intersections. The inputs are generated such that you can reach any intersection from any other intersection and that there is at most one road between any two intersections.\nYou are given an integer n and a 2D integer array roads where roads[i] = [ui, vi, timei] means that there is a road between intersections ui and vi that takes timei minutes to travel. You want to know in how many ways you can travel from intersection 0 to intersection n - 1 in the shortest amount of time.\nReturn the number of ways you can arrive at your destination in the shortest amount of time. Since the answer may be large, return it modulo 10^9 + 7.", "examples": [{"full_text": "Example 1:\nInput: n = 7, roads = [[0,6,7],[0,1,2],[1,2,3],[1,3,3],[6,3,3],[3,5,1],[6,5,1],[2,5,1],[0,4,5],[4,6,2]]\nOutput: 4\nExplanation: The shortest amount of time it takes to go from intersection 0 to intersection 6 is 7 minutes.\nThe four ways to get there in 7 minutes are:\n- 0 \u279d 6\n- 0 \u279d 4 \u279d 6\n- 0 \u279d 1 \u279d 2 \u279d 5 \u279d 6\n- 0 \u279d 1 \u279d 3 \u279d 5 \u279d 6", "input": "Input: n = 7, roads = [[0,6,7],[0,1,2],[1,2,3],[1,3,3],[6,3,3],[3,5,1],[6,5,1],[2,5,1],[0,4,5],[4,6,2]]", "output": "Output: 4", "explanation": "Explanation: The shortest amount of time it takes to go from intersection 0 to intersection 6 is 7 minutes.\nThe four ways to get there in 7 minutes are:\n- 0 \u279d 6\n- 0 \u279d 4 \u279d 6\n- 0 \u279d 1 \u279d 2 \u279d 5 \u279d 6\n- 0 \u279d 1 \u279d 3 \u279d 5 \u279d 6"}, {"full_text": "Example 2:\nInput: n = 2, roads = [[1,0,10]]\nOutput: 1\nExplanation: There is only one way to go from intersection 0 to intersection 1, and it takes 10 minutes.", "input": "Input: n = 2, roads = [[1,0,10]]", "output": "Output: 1", "explanation": "Explanation: There is only one way to go from intersection 0 to intersection 1, and it takes 10 minutes."}], "constraints": "Constraints:\n1 <= n <= 200\nn - 1 <= roads.length <= n * (n - 1) / 2\nroads[i].length == 3\n0 <= ui, vi <= n - 1\n1 <= timei <= 10^9\nui != vi\nThere is at most one road connecting any two intersections.\nYou can reach any intersection from any other intersection.", "notes": ""}, "1975": {"label": "Medium", "title": "Maximum Matrix Sum", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4399, "total_accepted": 9100.0, "total_submissions": 20700.0, "testcase_example": "'[[1,-1],[-1,1]]'", "body": "You are given an n x n integer matrix. You can do the following operation any number of times:\nChoose any two adjacent elements of matrix and multiply each of them by -1.\nTwo elements are considered adjacent if and only if they share a border.\nYour goal is to maximize the summation of the matrix's elements. Return the maximum sum of the matrix's elements using the operation mentioned above.", "examples": [{"full_text": "Example 1:\nInput: matrix = [[1,-1],[-1,1]]\nOutput: 4\nExplanation: We can follow the following steps to reach sum equals 4:\n- Multiply the 2 elements in the first row by -1.\n- Multiply the 2 elements in the first column by -1.", "input": "Input: matrix = [[1,-1],[-1,1]]", "output": "Output: 4", "explanation": "Explanation: We can follow the following steps to reach sum equals 4:\n- Multiply the 2 elements in the first row by -1.\n- Multiply the 2 elements in the first column by -1."}, {"full_text": "Example 2:\nInput: matrix = [[1,2,3],[-1,-2,-3],[1,2,3]]\nOutput: 16\nExplanation: We can follow the following step to reach sum equals 16:\n- Multiply the 2 last elements in the second row by -1.", "input": "Input: matrix = [[1,2,3],[-1,-2,-3],[1,2,3]]", "output": "Output: 16", "explanation": "Explanation: We can follow the following step to reach sum equals 16:\n- Multiply the 2 last elements in the second row by -1."}], "constraints": "Constraints:\nn == matrix.length == matrix[i].length\n2 <= n <= 250\n-10^5 <= matrix[i][j] <= 10^5", "notes": ""}, "1969": {"label": "Medium", "title": "Minimum Non-Zero Product of the Array Elements", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3201, "total_accepted": 6500.0, "total_submissions": 20300.0, "testcase_example": "'1'", "body": "You are given a positive integer p. Consider an array nums (1-indexed) that consists of the integers in the inclusive range [1, 2^p - 1] in their binary representations. You are allowed to do the following operation any number of times:\nChoose two elements x and y from nums.\nChoose a bit in x and swap it with its corresponding bit in y. Corresponding bit refers to the bit that is in the same position in the other integer.\nFor example, if x = 1101 and y = 0011, after swapping the 2^nd bit from the right, we have x = 1111 and y = 0001.\nFind the minimum non-zero product of nums after performing the above operation any number of times. Return this product modulo 10^9 + 7.\nNote: The answer should be the minimum product before the modulo operation is done.", "examples": [{"full_text": "Example 1:\nInput: p = 1\nOutput: 1\nExplanation: nums = [1].\nThere is only one element, so the product equals that element.", "input": "Input: p = 1", "output": "Output: 1", "explanation": "Explanation: nums = [1].\nThere is only one element, so the product equals that element."}, {"full_text": "Example 2:\nInput: p = 2\nOutput: 6\nExplanation: nums = [01, 10, 11].\nAny swap would either make the product 0 or stay the same.\nThus, the array product of 1 * 2 * 3 = 6 is already minimized.", "input": "Input: p = 2", "output": "Output: 6", "explanation": "Explanation: nums = [01, 10, 11].\nAny swap would either make the product 0 or stay the same.\nThus, the array product of 1 * 2 * 3 = 6 is already minimized."}, {"full_text": "Example 3:\nInput: p = 3\nOutput: 1512\nExplanation: nums = [001, 010, 011, 100, 101, 110, 111]\n- In the first operation we can swap the leftmost bit of the second and fifth elements.\n- The resulting array is [001, 110, 011, 100, 001, 110, 111].\n- In the second operation we can swap the middle bit of the third and fourth elements.\n- The resulting array is [001, 110, 001, 110, 001, 110, 111].\nThe array product is 1 * 6 * 1 * 6 * 1 * 6 * 7 = 1512, which is the minimum possible product.", "input": "Input: p = 3", "output": "Output: 1512", "explanation": "Explanation: nums = [001, 010, 011, 100, 101, 110, 111]\n- In the first operation we can swap the leftmost bit of the second and fifth elements.\n- The resulting array is [001, 110, 011, 100, 001, 110, 111].\n- In the second operation we can swap the middle bit of the third and fourth elements.\n- The resulting array is [001, 110, 001, 110, 001, 110, 111].\nThe array product is 1 * 6 * 1 * 6 * 1 * 6 * 7 = 1512, which is the minimum possible product."}], "constraints": "Constraints:\n1 <= p <= 60", "notes": ""}, "1968": {"label": "Medium", "title": "Array With Elements Not Equal to Average of Neighbors", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4814, "total_accepted": 15300.0, "total_submissions": 31800.0, "testcase_example": "'[1,2,3,4,5]'", "body": "You are given a 0-indexed array nums of distinct integers. You want to rearrange the elements in the array such that every element in the rearranged array is not equal to the average of its neighbors.\nMore formally, the rearranged array should have the property such that for every i in the range 1 <= i < nums.length - 1, (nums[i-1] + nums[i+1]) / 2 is not equal to nums[i].\nReturn any rearrangement of nums that meets the requirements.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,2,3,4,5]\nOutput: [1,2,4,5,3]\nExplanation:\nWhen i=1, nums[i] = 2, and the average of its neighbors is (1+4) / 2 = 2.5.\nWhen i=2, nums[i] = 4, and the average of its neighbors is (2+5) / 2 = 3.5.\nWhen i=3, nums[i] = 5, and the average of its neighbors is (4+3) / 2 = 3.5.", "input": "Input: nums = [1,2,3,4,5]", "output": "Output: [1,2,4,5,3]", "explanation": "Explanation:\nWhen i=1, nums[i] = 2, and the average of its neighbors is (1+4) / 2 = 2.5.\nWhen i=2, nums[i] = 4, and the average of its neighbors is (2+5) / 2 = 3.5.\nWhen i=3, nums[i] = 5, and the average of its neighbors is (4+3) / 2 = 3.5."}, {"full_text": "Example 2:\nInput: nums = [6,2,0,9,7]\nOutput: [9,7,6,2,0]\nExplanation:\nWhen i=1, nums[i] = 7, and the average of its neighbors is (9+6) / 2 = 7.5.\nWhen i=2, nums[i] = 6, and the average of its neighbors is (7+2) / 2 = 4.5.\nWhen i=3, nums[i] = 2, and the average of its neighbors is (6+0) / 2 = 3.", "input": "Input: nums = [6,2,0,9,7]", "output": "Output: [9,7,6,2,0]", "explanation": "Explanation:\nWhen i=1, nums[i] = 7, and the average of its neighbors is (9+6) / 2 = 7.5.\nWhen i=2, nums[i] = 6, and the average of its neighbors is (7+2) / 2 = 4.5.\nWhen i=3, nums[i] = 2, and the average of its neighbors is (6+0) / 2 = 3."}], "constraints": "Constraints:\n3 <= nums.length <= 10^5\n0 <= nums[i] <= 10^5", "notes": ""}, "1963": {"label": "Medium", "title": "Minimum Number of Swaps to Make the String Balanced", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6618999999999999, "total_accepted": 21000.0, "total_submissions": 31700.0, "testcase_example": "'\"][][\"'", "body": "You are given a 0-indexed string s of even length n. The string consists of exactly n / 2 opening brackets '[' and n / 2 closing brackets ']'.\nA string is called balanced if and only if:\nIt is the empty string, or\nIt can be written as AB, where both A and B are balanced strings, or\nIt can be written as [C], where C is a balanced string.\nYou may swap the brackets at any two indices any number of times.\nReturn the minimum number of swaps to make s balanced.", "examples": [{"full_text": "Example 1:\nInput: s = \"][][\"\nOutput: 1\nExplanation: You can make the string balanced by swapping index 0 with index 3.\nThe resulting string is \"[[]]\".", "input": "Input: s = \"][][\"", "output": "Output: 1", "explanation": "Explanation: You can make the string balanced by swapping index 0 with index 3.\nThe resulting string is \"[[]]\"."}, {"full_text": "Example 2:\nInput: s = \"]]][[[\"\nOutput: 2\nExplanation: You can do the following to make the string balanced:\n- Swap index 0 with index 4. s = \"[]][][\".\n- Swap index 1 with index 5. s = \"[[][]]\".\nThe resulting string is \"[[][]]\".", "input": "Input: s = \"]]][[[\"", "output": "Output: 2", "explanation": "Explanation: You can do the following to make the string balanced:\n- Swap index 0 with index 4. s = \"[]][][\".\n- Swap index 1 with index 5. s = \"[[][]]\".\nThe resulting string is \"[[][]]\"."}, {"full_text": "Example 3:\nInput: s = \"[]\"\nOutput: 0\nExplanation: The string is already balanced.", "input": "Input: s = \"[]\"", "output": "Output: 0", "explanation": "Explanation: The string is already balanced."}], "constraints": "Constraints:\nn == s.length\n2 <= n <= 10^6\nn is even.\ns[i] is either '[' or ']'.\nThe number of opening brackets '[' equals n / 2, and the number of closing brackets ']' equals n / 2.", "notes": ""}, "1962": {"label": "Medium", "title": "Remove Stones to Minimize the Total", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5566, "total_accepted": 16300.0, "total_submissions": 29200.0, "testcase_example": "'[5,4,9]\\n2'", "body": "You are given a 0-indexed integer array piles, where piles[i] represents the number of stones in the i^th pile, and an integer k. You should apply the following operation exactly k times:\nChoose any piles[i] and remove floor(piles[i] / 2) stones from it.\nNotice that you can apply the operation on the same pile more than once.\nReturn the minimum possible total number of stones remaining after applying the k operations.\nfloor(x) is the greatest integer that is smaller than or equal to x (i.e., rounds x down).", "examples": [{"full_text": "Example 1:\nInput: piles = [5,4,9], k = 2\nOutput: 12\nExplanation:\nSteps of a possible scenario are:\n- Apply the operation on pile 2. The resulting piles are [5,4,5].\n- Apply the operation on pile 0. The resulting piles are [3,4,5].\nThe total number of stones in [3,4,5] is 12.", "input": "Input: piles = [5,4,9], k = 2", "output": "Output: 12", "explanation": "Explanation:\nSteps of a possible scenario are:\n- Apply the operation on pile 2. The resulting piles are [5,4,5].\n- Apply the operation on pile 0. The resulting piles are [3,4,5].\nThe total number of stones in [3,4,5] is 12."}, {"full_text": "Example 2:\nInput: piles = [4,3,6,7], k = 3\nOutput: 12\nExplanation:\nSteps of a possible scenario are:\n- Apply the operation on pile 2. The resulting piles are [4,3,3,7].\n- Apply the operation on pile 3. The resulting piles are [4,3,3,4].\n- Apply the operation on pile 0. The resulting piles are [2,3,3,4].\nThe total number of stones in [2,3,3,4] is 12.", "input": "Input: piles = [4,3,6,7], k = 3", "output": "Output: 12", "explanation": "Explanation:\nSteps of a possible scenario are:\n- Apply the operation on pile 2. The resulting piles are [4,3,3,7].\n- Apply the operation on pile 3. The resulting piles are [4,3,3,4].\n- Apply the operation on pile 0. The resulting piles are [2,3,3,4].\nThe total number of stones in [2,3,3,4] is 12."}], "constraints": "Constraints:\n1 <= piles.length <= 10^5\n1 <= piles[i] <= 10^4\n1 <= k <= 10^5", "notes": ""}, "1959": {"label": "Medium", "title": "Minimum Total Space Wasted With K Resizing Operations", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4179, "total_accepted": 4800.0, "total_submissions": 11600.0, "testcase_example": "'[10,20]\\n0'", "body": "You are currently designing a dynamic array. You are given a 0-indexed integer array nums, where nums[i] is the number of elements that will be in the array at time i. In addition, you are given an integer k, the maximum number of times you can resize the array (to any size).\nThe size of the array at time t, sizet, must be at least nums[t] because there needs to be enough space in the array to hold all the elements. The space wasted at\ntime t is defined as sizet - nums[t], and the total space wasted is the sum of the space wasted across every time t where 0 <= t < nums.length.\nReturn the minimum total space wasted if you can resize the array at most k times.\nNote: The array can have any size at the start and does not count towards the number of resizing operations.", "examples": [{"full_text": "Example 1:\nInput: nums = [10,20], k = 0\nOutput: 10\nExplanation: size = [20,20].\nWe can set the initial size to be 20.\nThe total wasted space is (20 - 10) + (20 - 20) = 10.", "input": "Input: nums = [10,20], k = 0", "output": "Output: 10", "explanation": "Explanation: size = [20,20].\nWe can set the initial size to be 20.\nThe total wasted space is (20 - 10) + (20 - 20) = 10."}, {"full_text": "Example 2:\nInput: nums = [10,20,30], k = 1\nOutput: 10\nExplanation: size = [20,20,30].\nWe can set the initial size to be 20 and resize to 30 at time 2.\nThe total wasted space is (20 - 10) + (20 - 20) + (30 - 30) = 10.", "input": "Input: nums = [10,20,30], k = 1", "output": "Output: 10", "explanation": "Explanation: size = [20,20,30].\nWe can set the initial size to be 20 and resize to 30 at time 2.\nThe total wasted space is (20 - 10) + (20 - 20) + (30 - 30) = 10."}, {"full_text": "Example 3:\nInput: nums = [10,20,15,30,20], k = 2\nOutput: 15\nExplanation: size = [10,20,20,30,30].\nWe can set the initial size to 10, resize to 20 at time 1, and resize to 30 at time 3.\nThe total wasted space is (10 - 10) + (20 - 20) + (20 - 15) + (30 - 30) + (30 - 20) = 15.", "input": "Input: nums = [10,20,15,30,20], k = 2", "output": "Output: 15", "explanation": "Explanation: size = [10,20,20,30,30].\nWe can set the initial size to 10, resize to 20 at time 1, and resize to 30 at time 3.\nThe total wasted space is (10 - 10) + (20 - 20) + (20 - 15) + (30 - 30) + (30 - 20) = 15."}], "constraints": "Constraints:\n1 <= nums.length <= 200\n1 <= nums[i] <= 10^6\n0 <= k <= nums.length - 1", "notes": ""}, "1958": {"label": "Medium", "title": "Check if Move is Legal", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4286, "total_accepted": 6500.0, "total_submissions": 15200.0, "testcase_example": "'[[\".\",\".\",\".\",\"B\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"W\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"W\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"W\",\".\",\".\",\".\",\".\"],[\"W\",\"B\",\"B\",\".\",\"W\",\"W\",\"W\",\"B\"],[\".\",\".\",\".\",\"B\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"B\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"W\",\".\",\".\",\".\",\".\"]]\\n' +\n  '4\\n' +\n  '3\\n' +\n  '\"B\"'", "body": "You are given a 0-indexed 8 x 8 grid board, where board[r][c] represents the cell (r, c) on a game board. On the board, free cells are represented by '.', white cells are represented by 'W', and black cells are represented by 'B'.\nEach move in this game consists of choosing a free cell and changing it to the color you are playing as (either white or black). However, a move is only legal if, after changing it, the cell becomes the endpoint of a good line (horizontal, vertical, or diagonal).\nA good line is a line of three or more cells (including the endpoints) where the endpoints of the line are one color, and the remaining cells in the middle are the opposite color (no cells in the line are free). You can find examples for good lines in the figure below:\nGiven two integers rMove and cMove and a character color representing the color you are playing as (white or black), return true if changing cell (rMove, cMove) to color color is a legal move, or false if it is not legal.", "examples": [{"full_text": "Example 1:\nInput: board = [[\".\",\".\",\".\",\"B\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"W\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"W\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"W\",\".\",\".\",\".\",\".\"],[\"W\",\"B\",\"B\",\".\",\"W\",\"W\",\"W\",\"B\"],[\".\",\".\",\".\",\"B\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"B\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"W\",\".\",\".\",\".\",\".\"]], rMove = 4, cMove = 3, color = \"B\"\nOutput: true\nExplanation: '.', 'W', and 'B' are represented by the colors blue, white, and black respectively, and cell (rMove, cMove) is marked with an 'X'.\nThe two good lines with the chosen cell as an endpoint are annotated above with the red rectangles.", "input": "Input: board = [[\".\",\".\",\".\",\"B\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"W\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"W\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"W\",\".\",\".\",\".\",\".\"],[\"W\",\"B\",\"B\",\".\",\"W\",\"W\",\"W\",\"B\"],[\".\",\".\",\".\",\"B\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"B\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"W\",\".\",\".\",\".\",\".\"]], rMove = 4, cMove = 3, color = \"B\"", "output": "Output: true", "explanation": "Explanation: '.', 'W', and 'B' are represented by the colors blue, white, and black respectively, and cell (rMove, cMove) is marked with an 'X'.\nThe two good lines with the chosen cell as an endpoint are annotated above with the red rectangles."}, {"full_text": "Example 2:\nInput: board = [[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\"B\",\".\",\".\",\"W\",\".\",\".\",\".\"],[\".\",\".\",\"W\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"W\",\"B\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\"B\",\"W\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\"W\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\"B\"]], rMove = 4, cMove = 4, color = \"W\"\nOutput: false\nExplanation: While there are good lines with the chosen cell as a middle cell, there are no good lines with the chosen cell as an endpoint.", "input": "Input: board = [[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\"B\",\".\",\".\",\"W\",\".\",\".\",\".\"],[\".\",\".\",\"W\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"W\",\"B\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\"B\",\"W\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\"W\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\"B\"]], rMove = 4, cMove = 4, color = \"W\"", "output": "Output: false", "explanation": "Explanation: While there are good lines with the chosen cell as a middle cell, there are no good lines with the chosen cell as an endpoint."}], "constraints": "Constraints:\nboard.length == board[r].length == 8\n0 <= rMove, cMove < 8\nboard[rMove][cMove] == '.'\ncolor is either 'B' or 'W'.", "notes": ""}, "1954": {"label": "Medium", "title": "Minimum Garden Perimeter to Collect Enough Apples", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.525, "total_accepted": 10300.0, "total_submissions": 19700.0, "testcase_example": "'1'", "body": "In a garden represented as an infinite 2D grid, there is an apple tree planted at every integer coordinate. The apple tree planted at an integer coordinate (i, j) has |i| + |j| apples growing on it.\nYou will buy an axis-aligned square plot of land that is centered at (0, 0).\nGiven an integer neededApples, return the minimum perimeter of a plot such that at least neededApples apples are inside or on the perimeter of that plot.\nThe value of |x| is defined as:\nx if x >= 0\n-x if x < 0", "examples": [{"full_text": "Example 1:\nInput: neededApples = 1\nOutput: 8\nExplanation: A square plot of side length 1 does not contain any apples.\nHowever, a square plot of side length 2 has 12 apples inside (as depicted in the image above).\nThe perimeter is 2 * 4 = 8.", "input": "Input: neededApples = 1", "output": "Output: 8", "explanation": "Explanation: A square plot of side length 1 does not contain any apples.\nHowever, a square plot of side length 2 has 12 apples inside (as depicted in the image above).\nThe perimeter is 2 * 4 = 8."}, {"full_text": "Example 2:\nInput: neededApples = 13\nOutput: 16", "input": "Input: neededApples = 13", "output": "Output: 16", "explanation": ""}, {"full_text": "Example 3:\nInput: neededApples = 1000000000\nOutput: 5040", "input": "Input: neededApples = 1000000000", "output": "Output: 5040", "explanation": ""}], "constraints": "Constraints:\n1 <= neededApples <= 10^15", "notes": ""}, "1953": {"label": "Medium", "title": "Maximum Number of Weeks for Which You Can Work", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3686, "total_accepted": 13100.0, "total_submissions": 35500.0, "testcase_example": "'[1,2,3]'", "body": "There are n projects numbered from 0 to n - 1. You are given an integer array milestones where each milestones[i] denotes the number of milestones the i^th project has.\nYou can work on the projects following these two rules:\nEvery week, you will finish exactly one milestone of one project. You\nmust\nwork every week.\nYou cannot work on two milestones from the same project for two consecutive weeks.\nOnce all the milestones of all the projects are finished, or if the only milestones that you can work on will cause you to violate the above rules, you will stop working. Note that you may not be able to finish every project's milestones due to these constraints.\nReturn the maximum number of weeks you would be able to work on the projects without violating the rules mentioned above.", "examples": [{"full_text": "Example 1:\nInput: milestones = [1,2,3]\nOutput: 6\nExplanation: One possible scenario is:\n\u200b\u200b\u200b\u200b- During the 1^st week, you will work on a milestone of project 0.\n- During the 2^nd week, you will work on a milestone of project 2.\n- During the 3^rd week, you will work on a milestone of project 1.\n- During the 4^th week, you will work on a milestone of project 2.\n- During the 5^th week, you will work on a milestone of project 1.\n- During the 6^th week, you will work on a milestone of project 2.\nThe total number of weeks is 6.", "input": "Input: milestones = [1,2,3]", "output": "Output: 6", "explanation": "Explanation: One possible scenario is:\n\u200b\u200b\u200b\u200b- During the 1^st week, you will work on a milestone of project 0.\n- During the 2^nd week, you will work on a milestone of project 2.\n- During the 3^rd week, you will work on a milestone of project 1.\n- During the 4^th week, you will work on a milestone of project 2.\n- During the 5^th week, you will work on a milestone of project 1.\n- During the 6^th week, you will work on a milestone of project 2.\nThe total number of weeks is 6."}, {"full_text": "Example 2:\nInput: milestones = [5,2,1]\nOutput: 7\nExplanation: One possible scenario is:\n- During the 1^st week, you will work on a milestone of project 0.\n- During the 2^nd week, you will work on a milestone of project 1.\n- During the 3^rd week, you will work on a milestone of project 0.\n- During the 4^th week, you will work on a milestone of project 1.\n- During the 5^th week, you will work on a milestone of project 0.\n- During the 6^th week, you will work on a milestone of project 2.\n- During the 7^th week, you will work on a milestone of project 0.\nThe total number of weeks is 7.\nNote that you cannot work on the last milestone of project 0 on 8^th week because it would violate the rules.\nThus, one milestone in project 0 will remain unfinished.", "input": "Input: milestones = [5,2,1]", "output": "Output: 7", "explanation": "Explanation: One possible scenario is:\n- During the 1^st week, you will work on a milestone of project 0.\n- During the 2^nd week, you will work on a milestone of project 1.\n- During the 3^rd week, you will work on a milestone of project 0.\n- During the 4^th week, you will work on a milestone of project 1.\n- During the 5^th week, you will work on a milestone of project 0.\n- During the 6^th week, you will work on a milestone of project 2.\n- During the 7^th week, you will work on a milestone of project 0.\nThe total number of weeks is 7.\nNote that you cannot work on the last milestone of project 0 on 8^th week because it would violate the rules.\nThus, one milestone in project 0 will remain unfinished."}], "constraints": "Constraints:\nn == milestones.length\n1 <= n <= 10^5\n1 <= milestones[i] <= 10^9", "notes": ""}, "1947": {"label": "Medium", "title": "Maximum Compatibility Score Sum", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.595, "total_accepted": 13000.0, "total_submissions": 21900.0, "testcase_example": "'[[1,1,0],[1,0,1],[0,0,1]]\\n[[1,0,0],[0,0,1],[1,1,0]]'", "body": "There is a survey that consists of n questions where each question's answer is either 0 (no) or 1 (yes).\nThe survey was given to m students numbered from 0 to m - 1 and m mentors numbered from 0 to m - 1. The answers of the students are represented by a 2D integer array students where students[i] is an integer array that contains the answers of the i^th student (0-indexed). The answers of the mentors are represented by a 2D integer array mentors where mentors[j] is an integer array that contains the answers of the j^th mentor (0-indexed).\nEach student will be assigned to one mentor, and each mentor will have one student assigned to them. The compatibility score of a student-mentor pair is the number of answers that are the same for both the student and the mentor.\nFor example, if the student's answers were [1, 0, 1] and the mentor's answers were [0, 0, 1], then their compatibility score is 2 because only the second and the third answers are the same.\nYou are tasked with finding the optimal student-mentor pairings to maximize the sum of the compatibility scores.\nGiven students and mentors, return the maximum compatibility score sum that can be achieved.", "examples": [{"full_text": "Example 1:\nInput: students = [[1,1,0],[1,0,1],[0,0,1]], mentors = [[1,0,0],[0,0,1],[1,1,0]]\nOutput: 8\nExplanation:\nWe assign students to mentors in the following way:\n- student 0 to mentor 2 with a compatibility score of 3.\n- student 1 to mentor 0 with a compatibility score of 2.\n- student 2 to mentor 1 with a compatibility score of 3.\nThe compatibility score sum is 3 + 2 + 3 = 8.", "input": "Input: students = [[1,1,0],[1,0,1],[0,0,1]], mentors = [[1,0,0],[0,0,1],[1,1,0]]", "output": "Output: 8", "explanation": "Explanation:\nWe assign students to mentors in the following way:\n- student 0 to mentor 2 with a compatibility score of 3.\n- student 1 to mentor 0 with a compatibility score of 2.\n- student 2 to mentor 1 with a compatibility score of 3.\nThe compatibility score sum is 3 + 2 + 3 = 8."}, {"full_text": "Example 2:\nInput: students = [[0,0],[0,0],[0,0]], mentors = [[1,1],[1,1],[1,1]]\nOutput: 0\nExplanation: The compatibility score of any student-mentor pair is 0.", "input": "Input: students = [[0,0],[0,0],[0,0]], mentors = [[1,1],[1,1],[1,1]]", "output": "Output: 0", "explanation": "Explanation: The compatibility score of any student-mentor pair is 0."}], "constraints": "Constraints:\nm == students.length == mentors.length\nn == students[i].length == mentors[j].length\n1 <= m, n <= 8\nstudents[i][k] is either 0 or 1.\nmentors[j][k] is either 0 or 1.", "notes": ""}, "1946": {"label": "Medium", "title": "Largest Number After Mutating Substring", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.33659999999999995, "total_accepted": 13500.0, "total_submissions": 40200.0, "testcase_example": "'\"132\"\\n[9,8,5,0,3,6,4,2,6,8]'", "body": "You are given a string num, which represents a large integer. You are also given a 0-indexed integer array change of length 10 that maps each digit 0-9 to another digit. More formally, digit d maps to digit change[d].\nYou may choose to mutate a single substring of num. To mutate a substring, replace each digit num[i] with the digit it maps to in change (i.e. replace num[i] with change[num[i]]).\nReturn a string representing the largest possible integer after mutating (or choosing not to) a single substring of num.\nA substring is a contiguous sequence of characters within the string.", "examples": [{"full_text": "Example 1:\nInput: num = \"132\", change = [9,8,5,0,3,6,4,2,6,8]\nOutput: \"832\"\nExplanation: Replace the substring \"1\":\n- 1 maps to change[1] = 8.\nThus, \"132\" becomes \"832\".\n\"832\" is the largest number that can be created, so return it.", "input": "Input: num = \"132\", change = [9,8,5,0,3,6,4,2,6,8]", "output": "Output: \"832\"", "explanation": "Explanation: Replace the substring \"1\":\n- 1 maps to change[1] = 8.\nThus, \"132\" becomes \"832\".\n\"832\" is the largest number that can be created, so return it."}, {"full_text": "Example 2:\nInput: num = \"021\", change = [9,4,3,5,7,2,1,9,0,6]\nOutput: \"934\"\nExplanation: Replace the substring \"021\":\n- 0 maps to change[0] = 9.\n- 2 maps to change[2] = 3.\n- 1 maps to change[1] = 4.\nThus, \"021\" becomes \"934\".\n\"934\" is the largest number that can be created, so return it.", "input": "Input: num = \"021\", change = [9,4,3,5,7,2,1,9,0,6]", "output": "Output: \"934\"", "explanation": "Explanation: Replace the substring \"021\":\n- 0 maps to change[0] = 9.\n- 2 maps to change[2] = 3.\n- 1 maps to change[1] = 4.\nThus, \"021\" becomes \"934\".\n\"934\" is the largest number that can be created, so return it."}, {"full_text": "Example 3:\nInput: num = \"5\", change = [1,4,7,5,3,2,5,6,9,4]\nOutput: \"5\"\nExplanation: \"5\" is already the largest number that can be created, so return it.", "input": "Input: num = \"5\", change = [1,4,7,5,3,2,5,6,9,4]", "output": "Output: \"5\"", "explanation": "Explanation: \"5\" is already the largest number that can be created, so return it."}], "constraints": "Constraints:\n1 <= num.length <= 10^5\nnum consists of only digits 0-9.\nchange.length == 10\n0 <= change[d] <= 9", "notes": ""}, "1943": {"label": "Medium", "title": "Describe the Painting", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4593, "total_accepted": 6800.0, "total_submissions": 14700.0, "testcase_example": "'[[1,4,5],[4,7,7],[1,7,9]]'", "body": "There is a long and thin painting that can be represented by a number line. The painting was painted with multiple overlapping segments where each segment was painted with a unique color. You are given a 2D integer array segments, where segments[i] = [starti, endi, colori] represents the half-closed segment [starti, endi) with colori as the color.\nThe colors in the overlapping segments of the painting were mixed when it was painted. When two or more colors mix, they form a new color that can be represented as a set of mixed colors.\nFor example, if colors 2, 4, and 6 are mixed, then the resulting mixed color is {2,4,6}.\nFor the sake of simplicity, you should only output the sum of the elements in the set rather than the full set.\nYou want to describe the painting with the minimum number of non-overlapping half-closed segments of these mixed colors. These segments can be represented by the 2D array painting where painting[j] = [leftj, rightj, mixj] describes a half-closed segment [leftj, rightj) with the mixed color sum of mixj.\nFor example, the painting created with segments = [[1,4,5],[1,7,7]] can be described by painting = [[1,4,12],[4,7,7]] because:\n\n[1,4) is colored {5,7} (with a sum of 12) from both the first and second segments.\n[4,7) is colored {7} from only the second segment.\n\n\nReturn the 2D array painting describing the finished painting (excluding any parts that are not painted). You may return the segments in any order.\nA half-closed segment [a, b) is the section of the number line between points a and b including point a and not including point b.", "examples": [{"full_text": "Example 1:\nInput: segments = [[1,4,5],[4,7,7],[1,7,9]]\nOutput: [[1,4,14],[4,7,16]]\nExplanation: The painting can be described as follows:\n- [1,4) is colored {5,9} (with a sum of 14) from the first and third segments.\n- [4,7) is colored {7,9} (with a sum of 16) from the second and third segments.", "input": "Input: segments = [[1,4,5],[4,7,7],[1,7,9]]", "output": "Output: [[1,4,14],[4,7,16]]", "explanation": "Explanation: The painting can be described as follows:\n- [1,4) is colored {5,9} (with a sum of 14) from the first and third segments.\n- [4,7) is colored {7,9} (with a sum of 16) from the second and third segments."}, {"full_text": "Example 2:\nInput: segments = [[1,7,9],[6,8,15],[8,10,7]]\nOutput: [[1,6,9],[6,7,24],[7,8,15],[8,10,7]]\nExplanation: The painting can be described as follows:\n- [1,6) is colored 9 from the first segment.\n- [6,7) is colored {9,15} (with a sum of 24) from the first and second segments.\n- [7,8) is colored 15 from the second segment.\n- [8,10) is colored 7 from the third segment.", "input": "Input: segments = [[1,7,9],[6,8,15],[8,10,7]]", "output": "Output: [[1,6,9],[6,7,24],[7,8,15],[8,10,7]]", "explanation": "Explanation: The painting can be described as follows:\n- [1,6) is colored 9 from the first segment.\n- [6,7) is colored {9,15} (with a sum of 24) from the first and second segments.\n- [7,8) is colored 15 from the second segment.\n- [8,10) is colored 7 from the third segment."}, {"full_text": "Example 3:\nInput: segments = [[1,4,5],[1,4,7],[4,7,1],[4,7,11]]\nOutput: [[1,4,12],[4,7,12]]\nExplanation: The painting can be described as follows:\n- [1,4) is colored {5,7} (with a sum of 12) from the first and second segments.\n- [4,7) is colored {1,11} (with a sum of 12) from the third and fourth segments.\nNote that returning a single segment [1,7) is incorrect because the mixed color sets are different.", "input": "Input: segments = [[1,4,5],[1,4,7],[4,7,1],[4,7,11]]", "output": "Output: [[1,4,12],[4,7,12]]", "explanation": "Explanation: The painting can be described as follows:\n- [1,4) is colored {5,7} (with a sum of 12) from the first and second segments.\n- [4,7) is colored {1,11} (with a sum of 12) from the third and fourth segments.\nNote that returning a single segment [1,7) is incorrect because the mixed color sets are different."}], "constraints": "Constraints:\n1 <= segments.length <= 2 * 10^4\nsegments[i].length == 3\n1 <= starti < endi <= 10^5\n1 <= colori <= 10^9\nEach colori is distinct.", "notes": ""}, "1942": {"label": "Medium", "title": "The Number of the Smallest Unoccupied Chair", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.38520000000000004, "total_accepted": 10300.0, "total_submissions": 26700.0, "testcase_example": "'[[1,4],[2,3],[4,6]]\\n1'", "body": "There is a party where n friends numbered from 0 to n - 1 are attending. There is an infinite number of chairs in this party that are numbered from 0 to infinity. When a friend arrives at the party, they sit on the unoccupied chair with the smallest number.\nFor example, if chairs 0, 1, and 5 are occupied when a friend comes, they will sit on chair number 2.\nWhen a friend leaves the party, their chair becomes unoccupied at the moment they leave. If another friend arrives at that same moment, they can sit in that chair.\nYou are given a 0-indexed 2D integer array times where times[i] = [arrivali, leavingi], indicating the arrival and leaving times of the i^th friend respectively, and an integer targetFriend. All arrival times are distinct.\nReturn the chair number that the friend numbered targetFriend will sit on.", "examples": [{"full_text": "Example 1:\nInput: times = [[1,4],[2,3],[4,6]], targetFriend = 1\nOutput: 1\nExplanation:\n- Friend 0 arrives at time 1 and sits on chair 0.\n- Friend 1 arrives at time 2 and sits on chair 1.\n- Friend 1 leaves at time 3 and chair 1 becomes empty.\n- Friend 0 leaves at time 4 and chair 0 becomes empty.\n- Friend 2 arrives at time 4 and sits on chair 0.\nSince friend 1 sat on chair 1, we return 1.", "input": "Input: times = [[1,4],[2,3],[4,6]], targetFriend = 1", "output": "Output: 1", "explanation": "Explanation:\n- Friend 0 arrives at time 1 and sits on chair 0.\n- Friend 1 arrives at time 2 and sits on chair 1.\n- Friend 1 leaves at time 3 and chair 1 becomes empty.\n- Friend 0 leaves at time 4 and chair 0 becomes empty.\n- Friend 2 arrives at time 4 and sits on chair 0.\nSince friend 1 sat on chair 1, we return 1."}, {"full_text": "Example 2:\nInput: times = [[3,10],[1,5],[2,6]], targetFriend = 0\nOutput: 2\nExplanation:\n- Friend 1 arrives at time 1 and sits on chair 0.\n- Friend 2 arrives at time 2 and sits on chair 1.\n- Friend 0 arrives at time 3 and sits on chair 2.\n- Friend 1 leaves at time 5 and chair 0 becomes empty.\n- Friend 2 leaves at time 6 and chair 1 becomes empty.\n- Friend 0 leaves at time 10 and chair 2 becomes empty.\nSince friend 0 sat on chair 2, we return 2.", "input": "Input: times = [[3,10],[1,5],[2,6]], targetFriend = 0", "output": "Output: 2", "explanation": "Explanation:\n- Friend 1 arrives at time 1 and sits on chair 0.\n- Friend 2 arrives at time 2 and sits on chair 1.\n- Friend 0 arrives at time 3 and sits on chair 2.\n- Friend 1 leaves at time 5 and chair 0 becomes empty.\n- Friend 2 leaves at time 6 and chair 1 becomes empty.\n- Friend 0 leaves at time 10 and chair 2 becomes empty.\nSince friend 0 sat on chair 2, we return 2."}], "constraints": "Constraints:\nn == times.length\n2 <= n <= 10^4\ntimes[i].length == 2\n1 <= arrivali < leavingi <= 10^5\n0 <= targetFriend <= n - 1\nEach arrivali time is distinct.", "notes": ""}, "1937": {"label": "Medium", "title": "Maximum Number of Points with Cost", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.34759999999999996, "total_accepted": 27200.0, "total_submissions": 78200.0, "testcase_example": "'[[1,2,3],[1,5,1],[3,1,1]]'", "body": "You are given an m x n integer matrix points (0-indexed). Starting with 0 points, you want to maximize the number of points you can get from the matrix.\nTo gain points, you must pick one cell in each row. Picking the cell at coordinates (r, c) will add points[r][c] to your score.\nHowever, you will lose points if you pick a cell too far from the cell that you picked in the previous row. For every two adjacent rows r and r + 1 (where 0 <= r < m - 1), picking cells at coordinates (r, c1) and (r + 1, c2) will subtract abs(c1 - c2) from your score.\nReturn the maximum number of points you can achieve.\nabs(x) is defined as:\nx for x >= 0.\n-x for x < 0.", "examples": [{"full_text": "Example 1:\nInput: points = [[1,2,3],[1,5,1],[3,1,1]]\nOutput: 9\nExplanation:\nThe blue cells denote the optimal cells to pick, which have coordinates (0, 2), (1, 1), and (2, 0).\nYou add 3 + 5 + 3 = 11 to your score.\nHowever, you must subtract abs(2 - 1) + abs(1 - 0) = 2 from your score.\nYour final score is 11 - 2 = 9.", "input": "Input: points = [[1,2,3],[1,5,1],[3,1,1]]", "output": "Output: 9", "explanation": "Explanation:\nThe blue cells denote the optimal cells to pick, which have coordinates (0, 2), (1, 1), and (2, 0).\nYou add 3 + 5 + 3 = 11 to your score.\nHowever, you must subtract abs(2 - 1) + abs(1 - 0) = 2 from your score.\nYour final score is 11 - 2 = 9."}, {"full_text": "Example 2:\nInput: points = [[1,5],[2,3],[4,2]]\nOutput: 11\nExplanation:\nThe blue cells denote the optimal cells to pick, which have coordinates (0, 1), (1, 1), and (2, 0).\nYou add 5 + 3 + 4 = 12 to your score.\nHowever, you must subtract abs(1 - 1) + abs(1 - 0) = 1 from your score.\nYour final score is 12 - 1 = 11.", "input": "Input: points = [[1,5],[2,3],[4,2]]", "output": "Output: 11", "explanation": "Explanation:\nThe blue cells denote the optimal cells to pick, which have coordinates (0, 1), (1, 1), and (2, 0).\nYou add 5 + 3 + 4 = 12 to your score.\nHowever, you must subtract abs(1 - 1) + abs(1 - 0) = 1 from your score.\nYour final score is 12 - 1 = 11."}], "constraints": "Constraints:\nm == points.length\nn == points[r].length\n1 <= m, n <= 10^5\n1 <= m * n <= 10^5\n0 <= points[r][c] <= 10^5", "notes": ""}, "1936": {"label": "Medium", "title": "Add Minimum Number of Rungs", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4215, "total_accepted": 17500.0, "total_submissions": 41600.0, "testcase_example": "'[1,3,5,10]\\n2'", "body": "You are given a strictly increasing integer array rungs that represents the height of rungs on a ladder. You are currently on the floor at height 0, and you want to reach the last rung.\nYou are also given an integer dist. You can only climb to the next highest rung if the distance between where you are currently at (the floor or on a rung) and the next rung is at most dist. You are able to insert rungs at any positive integer height if a rung is not already there.\nReturn the minimum number of rungs that must be added to the ladder in order for you to climb to the last rung.", "examples": [{"full_text": "Example 1:\nInput: rungs = [1,3,5,10], dist = 2\nOutput: 2\nExplanation:\nYou currently cannot reach the last rung.\nAdd rungs at heights 7 and 8 to climb this ladder.\nThe ladder will now have rungs at [1,3,5,7,8,10].", "input": "Input: rungs = [1,3,5,10], dist = 2", "output": "Output: 2", "explanation": "Explanation:\nYou currently cannot reach the last rung.\nAdd rungs at heights 7 and 8 to climb this ladder.\nThe ladder will now have rungs at [1,3,5,7,8,10]."}, {"full_text": "Example 2:\nInput: rungs = [3,6,8,10], dist = 3\nOutput: 0\nExplanation:\nThis ladder can be climbed without adding additional rungs.", "input": "Input: rungs = [3,6,8,10], dist = 3", "output": "Output: 0", "explanation": "Explanation:\nThis ladder can be climbed without adding additional rungs."}, {"full_text": "Example 3:\nInput: rungs = [3,4,6,7], dist = 2\nOutput: 1\nExplanation:\nYou currently cannot reach the first rung from the ground.\nAdd a rung at height 1 to climb this ladder.\nThe ladder will now have rungs at [1,3,4,6,7].", "input": "Input: rungs = [3,4,6,7], dist = 2", "output": "Output: 1", "explanation": "Explanation:\nYou currently cannot reach the first rung from the ground.\nAdd a rung at height 1 to climb this ladder.\nThe ladder will now have rungs at [1,3,4,6,7]."}], "constraints": "Constraints:\n1 <= rungs.length <= 10^5\n1 <= rungs[i] <= 10^9\n1 <= dist <= 10^9\nrungs is strictly increasing.", "notes": ""}, "1930": {"label": "Medium", "title": "Unique Length-3 Palindromic Subsequences", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5073, "total_accepted": 14900.0, "total_submissions": 29500.0, "testcase_example": "'\"aabca\"'", "body": "Given a string s, return the number of unique palindromes of length three that are a subsequence of s.\nNote that even if there are multiple ways to obtain the same subsequence, it is still only counted once.\nA palindrome is a string that reads the same forwards and backwards.\nA subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.\nFor example, \"ace\" is a subsequence of \"abcde\".", "examples": [{"full_text": "Example 1:\nInput: s = \"aabca\"\nOutput: 3\nExplanation: The 3 palindromic subsequences of length 3 are:\n- \"aba\" (subsequence of \"aabca\")\n- \"aaa\" (subsequence of \"aabca\")\n- \"aca\" (subsequence of \"aabca\")", "input": "Input: s = \"aabca\"", "output": "Output: 3", "explanation": "Explanation: The 3 palindromic subsequences of length 3 are:\n- \"aba\" (subsequence of \"aabca\")\n- \"aaa\" (subsequence of \"aabca\")\n- \"aca\" (subsequence of \"aabca\")"}, {"full_text": "Example 2:\nInput: s = \"adc\"\nOutput: 0\nExplanation: There are no palindromic subsequences of length 3 in \"adc\".", "input": "Input: s = \"adc\"", "output": "Output: 0", "explanation": "Explanation: There are no palindromic subsequences of length 3 in \"adc\"."}, {"full_text": "Example 3:\nInput: s = \"bbcbaba\"\nOutput: 4\nExplanation: The 4 palindromic subsequences of length 3 are:\n- \"bbb\" (subsequence of \"bbcbaba\")\n- \"bcb\" (subsequence of \"bbcbaba\")\n- \"bab\" (subsequence of \"bbcbaba\")\n- \"aba\" (subsequence of \"bbcbaba\")", "input": "Input: s = \"bbcbaba\"", "output": "Output: 4", "explanation": "Explanation: The 4 palindromic subsequences of length 3 are:\n- \"bbb\" (subsequence of \"bbcbaba\")\n- \"bcb\" (subsequence of \"bbcbaba\")\n- \"bab\" (subsequence of \"bbcbaba\")\n- \"aba\" (subsequence of \"bbcbaba\")"}], "constraints": "Constraints:\n3 <= s.length <= 10^5\ns consists of only lowercase English letters.", "notes": ""}, "1927": {"label": "Medium", "title": "Sum Game", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.46740000000000004, "total_accepted": 6000.0, "total_submissions": 12900.0, "testcase_example": "'\"5023\"'", "body": "Alice and Bob take turns playing a game, with Alice\nstarting first.\nYou are given a string num of even length consisting of digits and '?' characters. On each turn, a player will do the following if there is still at least one '?' in num:\nChoose an index i where num[i] == '?'.\nReplace num[i] with any digit between '0' and '9'.\nThe game ends when there are no more '?' characters in num.\nFor Bob\nto win, the sum of the digits in the first half of num must be equal to the sum of the digits in the second half. For Alice\nto win, the sums must not be equal.\nFor example, if the game ended with num = \"243801\", then Bob\nwins because 2+4+3 = 8+0+1. If the game ended with num = \"243803\", then Alice\nwins because 2+4+3 != 8+0+3.\nAssuming Alice and Bob play optimally, return true if Alice will win and false if Bob will win.", "examples": [{"full_text": "Example 1:\nInput: num = \"5023\"\nOutput: false\nExplanation: There are no moves to be made.\nThe sum of the first half is equal to the sum of the second half: 5 + 0 = 2 + 3.", "input": "Input: num = \"5023\"", "output": "Output: false", "explanation": "Explanation: There are no moves to be made.\nThe sum of the first half is equal to the sum of the second half: 5 + 0 = 2 + 3."}, {"full_text": "Example 2:\nInput: num = \"25??\"\nOutput: true\nExplanation: Alice can replace one of the '?'s with '9' and it will be impossible for Bob to make the sums equal.", "input": "Input: num = \"25??\"", "output": "Output: true", "explanation": "Explanation: Alice can replace one of the '?'s with '9' and it will be impossible for Bob to make the sums equal."}, {"full_text": "Example 3:\nInput: num = \"?3295???\"\nOutput: false\nExplanation: It can be proven that Bob will always win. One possible outcome is:\n- Alice replaces the first '?' with '9'. num = \"93295???\".\n- Bob replaces one of the '?' in the right half with '9'. num = \"932959??\".\n- Alice replaces one of the '?' in the right half with '2'. num = \"9329592?\".\n- Bob replaces the last '?' in the right half with '7'. num = \"93295927\".\nBob wins because 9 + 3 + 2 + 9 = 5 + 9 + 2 + 7.", "input": "Input: num = \"?3295???\"", "output": "Output: false", "explanation": "Explanation: It can be proven that Bob will always win. One possible outcome is:\n- Alice replaces the first '?' with '9'. num = \"93295???\".\n- Bob replaces one of the '?' in the right half with '9'. num = \"932959??\".\n- Alice replaces one of the '?' in the right half with '2'. num = \"9329592?\".\n- Bob replaces the last '?' in the right half with '7'. num = \"93295927\".\nBob wins because 9 + 3 + 2 + 9 = 5 + 9 + 2 + 7."}], "constraints": "Constraints:\n2 <= num.length <= 10^5\nnum.length is even.\nnum consists of only digits and '?'.", "notes": ""}, "1926": {"label": "Medium", "title": "Nearest Exit from Entrance in Maze", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.371, "total_accepted": 12600.0, "total_submissions": 33900.0, "testcase_example": "'[[\"+\",\"+\",\".\",\"+\"],[\".\",\".\",\".\",\"+\"],[\"+\",\"+\",\"+\",\".\"]]\\n[1,2]'", "body": "You are given an m x n matrix maze (0-indexed) with empty cells (represented as '.') and walls (represented as '+'). You are also given the entrance of the maze, where entrance = [entrancerow, entrancecol] denotes the row and column of the cell you are initially standing at.\nIn one step, you can move one cell up, down, left, or right. You cannot step into a cell with a wall, and you cannot step outside the maze. Your goal is to find the nearest exit from the entrance. An exit is defined as an empty cell that is at the border of the maze. The entrance does not count as an exit.\nReturn the number of steps in the shortest path from the entrance to the nearest exit, or -1 if no such path exists.", "examples": [{"full_text": "Example 1:\nInput: maze = [[\"+\",\"+\",\".\",\"+\"],[\".\",\".\",\".\",\"+\"],[\"+\",\"+\",\"+\",\".\"]], entrance = [1,2]\nOutput: 1\nExplanation: There are 3 exits in this maze at [1,0], [0,2], and [2,3].\nInitially, you are at the entrance cell [1,2].\n- You can reach [1,0] by moving 2 steps left.\n- You can reach [0,2] by moving 1 step up.\nIt is impossible to reach [2,3] from the entrance.\nThus, the nearest exit is [0,2], which is 1 step away.", "input": "Input: maze = [[\"+\",\"+\",\".\",\"+\"],[\".\",\".\",\".\",\"+\"],[\"+\",\"+\",\"+\",\".\"]], entrance = [1,2]", "output": "Output: 1", "explanation": "Explanation: There are 3 exits in this maze at [1,0], [0,2], and [2,3].\nInitially, you are at the entrance cell [1,2].\n- You can reach [1,0] by moving 2 steps left.\n- You can reach [0,2] by moving 1 step up.\nIt is impossible to reach [2,3] from the entrance.\nThus, the nearest exit is [0,2], which is 1 step away."}, {"full_text": "Example 2:\nInput: maze = [[\"+\",\"+\",\"+\"],[\".\",\".\",\".\"],[\"+\",\"+\",\"+\"]], entrance = [1,0]\nOutput: 2\nExplanation: There is 1 exit in this maze at [1,2].\n[1,0] does not count as an exit since it is the entrance cell.\nInitially, you are at the entrance cell [1,0].\n- You can reach [1,2] by moving 2 steps right.\nThus, the nearest exit is [1,2], which is 2 steps away.", "input": "Input: maze = [[\"+\",\"+\",\"+\"],[\".\",\".\",\".\"],[\"+\",\"+\",\"+\"]], entrance = [1,0]", "output": "Output: 2", "explanation": "Explanation: There is 1 exit in this maze at [1,2].\n[1,0] does not count as an exit since it is the entrance cell.\nInitially, you are at the entrance cell [1,0].\n- You can reach [1,2] by moving 2 steps right.\nThus, the nearest exit is [1,2], which is 2 steps away."}, {"full_text": "Example 3:\nInput: maze = [[\".\",\"+\"]], entrance = [0,0]\nOutput: -1\nExplanation: There are no exits in this maze.", "input": "Input: maze = [[\".\",\"+\"]], entrance = [0,0]", "output": "Output: -1", "explanation": "Explanation: There are no exits in this maze."}], "constraints": "Constraints:\nmaze.length == m\nmaze[i].length == n\n1 <= m, n <= 100\nmaze[i][j] is either '.' or '+'.\nentrance.length == 2\n0 <= entrancerow < m\n0 <= entrancecol < n\nentrance will always be an empty cell.", "notes": ""}, "1922": {"label": "Medium", "title": "Count Good Numbers", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3825, "total_accepted": 13900.0, "total_submissions": 36300.0, "testcase_example": "'1'", "body": "A digit string is good if the digits (0-indexed) at even indices are even and the digits at odd indices are prime (2, 3, 5, or 7).\nFor example, \"2582\" is good because the digits (2 and 8) at even positions are even and the digits (5 and 2) at odd positions are prime. However, \"3245\" is not good because 3 is at an even index but is not even.\nGiven an integer n, return the total number of good digit strings of length n. Since the answer may be large, return it modulo 10^9 + 7.\nA digit string is a string consisting of digits 0 through 9 that may contain leading zeros.", "examples": [{"full_text": "Example 1:\nInput: n = 1\nOutput: 5\nExplanation: The good numbers of length 1 are \"0\", \"2\", \"4\", \"6\", \"8\".", "input": "Input: n = 1", "output": "Output: 5", "explanation": "Explanation: The good numbers of length 1 are \"0\", \"2\", \"4\", \"6\", \"8\"."}, {"full_text": "Example 2:\nInput: n = 4\nOutput: 400", "input": "Input: n = 4", "output": "Output: 400", "explanation": ""}, {"full_text": "Example 3:\nInput: n = 50\nOutput: 564908303", "input": "Input: n = 50", "output": "Output: 564908303", "explanation": ""}], "constraints": "Constraints:\n1 <= n <= 10^15", "notes": ""}, "1921": {"label": "Medium", "title": "Eliminate Maximum Number of Monsters", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3751, "total_accepted": 15000.0, "total_submissions": 39900.0, "testcase_example": "'[1,3,4]\\n[1,1,1]'", "body": "You are playing a video game where you are defending your city from a group of n monsters. You are given a 0-indexed integer array dist of size n, where dist[i] is the initial distance in kilometers of the i^th monster from the city.\nThe monsters walk toward the city at a constant speed. The speed of each monster is given to you in an integer array speed of size n, where speed[i] is the speed of the i^th monster in kilometers per minute.\nYou have a weapon that, once fully charged, can eliminate a single monster. However, the weapon takes one minute to charge.The weapon is fully charged at the very start.\nYou lose when any monster reaches your city. If a monster reaches the city at the exact moment the weapon is fully charged, it counts as a loss, and the game ends before you can use your weapon.\nReturn the maximum number of monsters that you can eliminate before you lose, or n if you can eliminate all the monsters before they reach the city.", "examples": [{"full_text": "Example 1:\nInput: dist = [1,3,4], speed = [1,1,1]\nOutput: 3\nExplanation:\nIn the beginning, the distances of the monsters are [1,3,4]. You eliminate the first monster.\nAfter a minute, the distances of the monsters are [X,2,3]. You eliminate the second monster.\nAfter a minute, the distances of the monsters are [X,X,2]. You eliminate the thrid monster.\nAll 3 monsters can be eliminated.", "input": "Input: dist = [1,3,4], speed = [1,1,1]", "output": "Output: 3", "explanation": "Explanation:\nIn the beginning, the distances of the monsters are [1,3,4]. You eliminate the first monster.\nAfter a minute, the distances of the monsters are [X,2,3]. You eliminate the second monster.\nAfter a minute, the distances of the monsters are [X,X,2]. You eliminate the thrid monster.\nAll 3 monsters can be eliminated."}, {"full_text": "Example 2:\nInput: dist = [1,1,2,3], speed = [1,1,1,1]\nOutput: 1\nExplanation:\nIn the beginning, the distances of the monsters are [1,1,2,3]. You eliminate the first monster.\nAfter a minute, the distances of the monsters are [X,0,1,2], so you lose.\nYou can only eliminate 1 monster.", "input": "Input: dist = [1,1,2,3], speed = [1,1,1,1]", "output": "Output: 1", "explanation": "Explanation:\nIn the beginning, the distances of the monsters are [1,1,2,3]. You eliminate the first monster.\nAfter a minute, the distances of the monsters are [X,0,1,2], so you lose.\nYou can only eliminate 1 monster."}, {"full_text": "Example 3:\nInput: dist = [3,2,4], speed = [5,3,2]\nOutput: 1\nExplanation:\nIn the beginning, the distances of the monsters are [3,2,4]. You eliminate the first monster.\nAfter a minute, the distances of the monsters are [X,0,2], so you lose.\nYou can only eliminate 1 monster.", "input": "Input: dist = [3,2,4], speed = [5,3,2]", "output": "Output: 1", "explanation": "Explanation:\nIn the beginning, the distances of the monsters are [3,2,4]. You eliminate the first monster.\nAfter a minute, the distances of the monsters are [X,0,2], so you lose.\nYou can only eliminate 1 monster."}], "constraints": "Constraints:\nn == dist.length == speed.length\n1 <= n <= 10^5\n1 <= dist[i], speed[i] <= 10^5", "notes": ""}, "1915": {"label": "Medium", "title": "Number of Wonderful Substrings", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4303, "total_accepted": 7900.0, "total_submissions": 18300.0, "testcase_example": "'\"aba\"'", "body": "A wonderful string is a string where at most one letter appears an odd number of times.\nFor example, \"ccjjc\" and \"abab\" are wonderful, but \"ab\" is not.\nGiven a string word that consists of the first ten lowercase English letters ('a' through 'j'), return the number of wonderful non-empty substrings in word. If the same substring appears multiple times in word, then count each occurrence separately.\nA substring is a contiguous sequence of characters in a string.", "examples": [{"full_text": "Example 1:\nInput: word = \"aba\"\nOutput: 4\nExplanation: The four wonderful substrings are underlined below:\n- \"aba\" -> \"a\"\n- \"aba\" -> \"b\"\n- \"aba\" -> \"a\"\n- \"aba\" -> \"aba\"", "input": "Input: word = \"aba\"", "output": "Output: 4", "explanation": "Explanation: The four wonderful substrings are underlined below:\n- \"aba\" -> \"a\"\n- \"aba\" -> \"b\"\n- \"aba\" -> \"a\"\n- \"aba\" -> \"aba\""}, {"full_text": "Example 2:\nInput: word = \"aabb\"\nOutput: 9\nExplanation: The nine wonderful substrings are underlined below:\n- \"aabb\" -> \"a\"\n- \"aabb\" -> \"aa\"\n- \"aabb\" -> \"aab\"\n- \"aabb\" -> \"aabb\"\n- \"aabb\" -> \"a\"\n- \"aabb\" -> \"abb\"\n- \"aabb\" -> \"b\"\n- \"aabb\" -> \"bb\"\n- \"aabb\" -> \"b\"", "input": "Input: word = \"aabb\"", "output": "Output: 9", "explanation": "Explanation: The nine wonderful substrings are underlined below:\n- \"aabb\" -> \"a\"\n- \"aabb\" -> \"aa\"\n- \"aabb\" -> \"aab\"\n- \"aabb\" -> \"aabb\"\n- \"aabb\" -> \"a\"\n- \"aabb\" -> \"abb\"\n- \"aabb\" -> \"b\"\n- \"aabb\" -> \"bb\"\n- \"aabb\" -> \"b\""}, {"full_text": "Example 3:\nInput: word = \"he\"\nOutput: 2\nExplanation: The two wonderful substrings are underlined below:\n- \"he\" -> \"h\"\n- \"he\" -> \"e\"", "input": "Input: word = \"he\"", "output": "Output: 2", "explanation": "Explanation: The two wonderful substrings are underlined below:\n- \"he\" -> \"h\"\n- \"he\" -> \"e\""}], "constraints": "Constraints:\n1 <= word.length <= 10^5\nword consists of lowercase English letters from 'a'\nto 'j'.", "notes": ""}, "1914": {"label": "Medium", "title": "Cyclically Rotating a Grid", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4622, "total_accepted": 8600.0, "total_submissions": 18600.0, "testcase_example": "'[[40,10],[30,20]]\\n1'", "body": "You are given an m x n integer matrix grid\u200b\u200b\u200b, where m and n are both even integers, and an integer k.\nThe matrix is composed of several layers, which is shown in the below image, where each color is its own layer:\nA cyclic rotation of the matrix is done by cyclically rotating each layer in the matrix. To cyclically rotate a layer once, each element in the layer will take the place of the adjacent element in the counter-clockwise direction. An example rotation is shown below:\nReturn the matrix after applying k cyclic rotations to it.", "examples": [{"full_text": "Example 1:\nInput: grid = [[40,10],[30,20]], k = 1\nOutput: [[10,20],[40,30]]\nExplanation: The figures above represent the grid at every state.", "input": "Input: grid = [[40,10],[30,20]], k = 1", "output": "Output: [[10,20],[40,30]]", "explanation": "Explanation: The figures above represent the grid at every state."}, {"full_text": "Example 2:\n\nInput: grid = [[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]], k = 2\nOutput: [[3,4,8,12],[2,11,10,16],[1,7,6,15],[5,9,13,14]]\nExplanation: The figures above represent the grid at every state.", "input": "Input: grid = [[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]], k = 2", "output": "Output: [[3,4,8,12],[2,11,10,16],[1,7,6,15],[5,9,13,14]]", "explanation": "Explanation: The figures above represent the grid at every state."}], "constraints": "Constraints:\nm == grid.length\nn == grid[i].length\n2 <= m, n <= 50\nBoth m and n are even integers.\n1 <= grid[i][j] <=^ 5000\n1 <= k <= 10^9", "notes": ""}, "1911": {"label": "Medium", "title": "Maximum Alternating Subsequence Sum", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5867, "total_accepted": 13600.0, "total_submissions": 23200.0, "testcase_example": "'[4,2,5,3]'", "body": "The alternating sum of a 0-indexed array is defined as the sum of the elements at even indices minus the sum of the elements at odd indices.\nFor example, the alternating sum of [4,2,5,3] is (4 + 5) - (2 + 3) = 4.\nGiven an array nums, return the maximum alternating sum of any subsequence of nums (after reindexing the elements of the subsequence).\nA subsequence of an array is a new array generated from the original array by deleting some elements (possibly none) without changing the remaining elements' relative order. For example, [2,7,4] is a subsequence of [4,2,3,7,2,1,4] (the underlined elements), while [2,4,2] is not.", "examples": [{"full_text": "Example 1:\nInput: nums = [4,2,5,3]\nOutput: 7\nExplanation: It is optimal to choose the subsequence [4,2,5] with alternating sum (4 + 5) - 2 = 7.", "input": "Input: nums = [4,2,5,3]", "output": "Output: 7", "explanation": "Explanation: It is optimal to choose the subsequence [4,2,5] with alternating sum (4 + 5) - 2 = 7."}, {"full_text": "Example 2:\nInput: nums = [5,6,7,8]\nOutput: 8\nExplanation: It is optimal to choose the subsequence [8] with alternating sum 8.", "input": "Input: nums = [5,6,7,8]", "output": "Output: 8", "explanation": "Explanation: It is optimal to choose the subsequence [8] with alternating sum 8."}, {"full_text": "Example 3:\nInput: nums = [6,2,1,2,4,5]\nOutput: 10\nExplanation: It is optimal to choose the subsequence [6,1,5] with alternating sum (6 + 5) - 1 = 10.", "input": "Input: nums = [6,2,1,2,4,5]", "output": "Output: 10", "explanation": "Explanation: It is optimal to choose the subsequence [6,1,5] with alternating sum (6 + 5) - 1 = 10."}], "constraints": "Constraints:\n1 <= nums.length <= 10^5\n1 <= nums[i] <= 10^5", "notes": ""}, "1910": {"label": "Medium", "title": "Remove All Occurrences of a Substring", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7164, "total_accepted": 22400.0, "total_submissions": 31300.0, "testcase_example": "'\"daabcbaabcbc\"\\n\"abc\"'", "body": "Given two strings s and part, perform the following operation on s until all occurrences of the substring part are removed:\nFind the leftmost occurrence of the substring part and remove it from s.\nReturn s after removing all occurrences of part.\nA substring is a contiguous sequence of characters in a string.", "examples": [{"full_text": "Example 1:\nInput: s = \"daabcbaabcbc\", part = \"abc\"\nOutput: \"dab\"\nExplanation: The following operations are done:\n- s = \"daabcbaabcbc\", remove \"abc\" starting at index 2, so s = \"dabaabcbc\".\n- s = \"dabaabcbc\", remove \"abc\" starting at index 4, so s = \"dababc\".\n- s = \"dababc\", remove \"abc\" starting at index 3, so s = \"dab\".\nNow s has no occurrences of \"abc\".", "input": "Input: s = \"daabcbaabcbc\", part = \"abc\"", "output": "Output: \"dab\"", "explanation": "Explanation: The following operations are done:\n- s = \"daabcbaabcbc\", remove \"abc\" starting at index 2, so s = \"dabaabcbc\".\n- s = \"dabaabcbc\", remove \"abc\" starting at index 4, so s = \"dababc\".\n- s = \"dababc\", remove \"abc\" starting at index 3, so s = \"dab\".\nNow s has no occurrences of \"abc\"."}, {"full_text": "Example 2:\nInput: s = \"axxxxyyyyb\", part = \"xy\"\nOutput: \"ab\"\nExplanation: The following operations are done:\n- s = \"axxxxyyyyb\", remove \"xy\" starting at index 4 so s = \"axxxyyyb\".\n- s = \"axxxyyyb\", remove \"xy\" starting at index 3 so s = \"axxyyb\".\n- s = \"axxyyb\", remove \"xy\" starting at index 2 so s = \"axyb\".\n- s = \"axyb\", remove \"xy\" starting at index 1 so s = \"ab\".\nNow s has no occurrences of \"xy\".", "input": "Input: s = \"axxxxyyyyb\", part = \"xy\"", "output": "Output: \"ab\"", "explanation": "Explanation: The following operations are done:\n- s = \"axxxxyyyyb\", remove \"xy\" starting at index 4 so s = \"axxxyyyb\".\n- s = \"axxxyyyb\", remove \"xy\" starting at index 3 so s = \"axxyyb\".\n- s = \"axxyyb\", remove \"xy\" starting at index 2 so s = \"axyb\".\n- s = \"axyb\", remove \"xy\" starting at index 1 so s = \"ab\".\nNow s has no occurrences of \"xy\"."}], "constraints": "Constraints:\n1 <= s.length <= 1000\n1 <= part.length <= 1000\ns\u200b\u200b\u200b\u200b\u200b\u200b and part consists of lowercase English letters.", "notes": ""}, "1906": {"label": "Medium", "title": "Minimum Absolute Difference Queries", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4279, "total_accepted": 7100.0, "total_submissions": 16600.0, "testcase_example": "'[1,3,4,8]\\n[[0,1],[1,2],[2,3],[0,3]]'", "body": "The minimum absolute difference of an array a is defined as the minimum value of |a[i] - a[j]|, where 0 <= i < j < a.length and a[i] != a[j]. If all elements of a are the same, the minimum absolute difference is -1.\nFor example, the minimum absolute difference of the array [5,2,3,7,2] is |2 - 3| = 1. Note that it is not 0 because a[i] and a[j] must be different.\nYou are given an integer array nums and the array queries where queries[i] = [li, ri]. For each query i, compute the minimum absolute difference of the subarray nums[li...ri] containing the elements of nums between the 0-based indices li and ri (inclusive).\nReturn an array ans where ans[i] is the answer to the i^th query.\nA subarray is a contiguous sequence of elements in an array.\nThe value of |x| is defined as:\nx if x >= 0.\n-x if x < 0.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,3,4,8], queries = [[0,1],[1,2],[2,3],[0,3]]\nOutput: [2,1,4,1]\nExplanation: The queries are processed as follows:\n- queries[0] = [0,1]: The subarray is [1,3] and the minimum absolute difference is |1-3| = 2.\n- queries[1] = [1,2]: The subarray is [3,4] and the minimum absolute difference is |3-4| = 1.\n- queries[2] = [2,3]: The subarray is [4,8] and the minimum absolute difference is |4-8| = 4.\n- queries[3] = [0,3]: The subarray is [1,3,4,8] and the minimum absolute difference is |3-4| = 1.", "input": "Input: nums = [1,3,4,8], queries = [[0,1],[1,2],[2,3],[0,3]]", "output": "Output: [2,1,4,1]", "explanation": "Explanation: The queries are processed as follows:\n- queries[0] = [0,1]: The subarray is [1,3] and the minimum absolute difference is |1-3| = 2.\n- queries[1] = [1,2]: The subarray is [3,4] and the minimum absolute difference is |3-4| = 1.\n- queries[2] = [2,3]: The subarray is [4,8] and the minimum absolute difference is |4-8| = 4.\n- queries[3] = [0,3]: The subarray is [1,3,4,8] and the minimum absolute difference is |3-4| = 1."}, {"full_text": "Example 2:\nInput: nums = [4,5,2,2,7,10], queries = [[2,3],[0,2],[0,5],[3,5]]\nOutput: [-1,1,1,3]\nExplanation: The queries are processed as follows:\n- queries[0] = [2,3]: The subarray is [2,2] and the minimum absolute difference is -1 because all the\nelements are the same.\n- queries[1] = [0,2]: The subarray is [4,5,2] and the minimum absolute difference is |4-5| = 1.\n- queries[2] = [0,5]: The subarray is [4,5,2,2,7,10] and the minimum absolute difference is |4-5| = 1.\n- queries[3] = [3,5]: The subarray is [2,7,10] and the minimum absolute difference is |7-10| = 3.", "input": "Input: nums = [4,5,2,2,7,10], queries = [[2,3],[0,2],[0,5],[3,5]]", "output": "Output: [-1,1,1,3]", "explanation": "Explanation: The queries are processed as follows:\n- queries[0] = [2,3]: The subarray is [2,2] and the minimum absolute difference is -1 because all the\nelements are the same.\n- queries[1] = [0,2]: The subarray is [4,5,2] and the minimum absolute difference is |4-5| = 1.\n- queries[2] = [0,5]: The subarray is [4,5,2,2,7,10] and the minimum absolute difference is |4-5| = 1.\n- queries[3] = [3,5]: The subarray is [2,7,10] and the minimum absolute difference is |7-10| = 3."}], "constraints": "Constraints:\n2 <= nums.length <= 10^5\n1 <= nums[i] <= 100\n1 <= queries.length <= 2\n* 10^4\n0 <= li < ri < nums.length", "notes": ""}, "1905": {"label": "Medium", "title": "Count Sub Islands", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6278, "total_accepted": 20700.0, "total_submissions": 33000.0, "testcase_example": "'[[1,1,1,0,0],[0,1,1,1,1],[0,0,0,0,0],[1,0,0,0,0],[1,1,0,1,1]]\\n' +\n  '[[1,1,1,0,0],[0,0,1,1,1],[0,1,0,0,0],[1,0,1,1,0],[0,1,0,1,0]]'", "body": "You are given two m x n binary matrices grid1 and grid2 containing only 0's (representing water) and 1's (representing land). An island is a group of 1's connected 4-directionally (horizontal or vertical). Any cells outside of the grid are considered water cells.\nAn island in grid2 is considered a sub-island if there is an island in grid1 that contains all the cells that make up this island in grid2.\nReturn the number of islands in grid2 that are considered sub-islands.", "examples": [{"full_text": "Example 1:\nInput: grid1 = [[1,1,1,0,0],[0,1,1,1,1],[0,0,0,0,0],[1,0,0,0,0],[1,1,0,1,1]], grid2 = [[1,1,1,0,0],[0,0,1,1,1],[0,1,0,0,0],[1,0,1,1,0],[0,1,0,1,0]]\nOutput: 3\nExplanation: In the picture above, the grid on the left is grid1 and the grid on the right is grid2.\nThe 1s colored red in grid2 are those considered to be part of a sub-island. There are three sub-islands.", "input": "Input: grid1 = [[1,1,1,0,0],[0,1,1,1,1],[0,0,0,0,0],[1,0,0,0,0],[1,1,0,1,1]], grid2 = [[1,1,1,0,0],[0,0,1,1,1],[0,1,0,0,0],[1,0,1,1,0],[0,1,0,1,0]]", "output": "Output: 3", "explanation": "Explanation: In the picture above, the grid on the left is grid1 and the grid on the right is grid2.\nThe 1s colored red in grid2 are those considered to be part of a sub-island. There are three sub-islands."}, {"full_text": "Example 2:\nInput: grid1 = [[1,0,1,0,1],[1,1,1,1,1],[0,0,0,0,0],[1,1,1,1,1],[1,0,1,0,1]], grid2 = [[0,0,0,0,0],[1,1,1,1,1],[0,1,0,1,0],[0,1,0,1,0],[1,0,0,0,1]]\nOutput: 2\nExplanation: In the picture above, the grid on the left is grid1 and the grid on the right is grid2.\nThe 1s colored red in grid2 are those considered to be part of a sub-island. There are two sub-islands.", "input": "Input: grid1 = [[1,0,1,0,1],[1,1,1,1,1],[0,0,0,0,0],[1,1,1,1,1],[1,0,1,0,1]], grid2 = [[0,0,0,0,0],[1,1,1,1,1],[0,1,0,1,0],[0,1,0,1,0],[1,0,0,0,1]]", "output": "Output: 2", "explanation": "Explanation: In the picture above, the grid on the left is grid1 and the grid on the right is grid2.\nThe 1s colored red in grid2 are those considered to be part of a sub-island. There are two sub-islands."}], "constraints": "Constraints:\nm == grid1.length == grid2.length\nn == grid1[i].length == grid2[i].length\n1 <= m, n <= 500\ngrid1[i][j] and grid2[i][j] are either 0 or 1.", "notes": ""}, "1904": {"label": "Medium", "title": "The Number of Full Rounds You Have Played", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4756, "total_accepted": 15200.0, "total_submissions": 31900.0, "testcase_example": "'\"09:31\"\\n\"10:14\"'", "body": "You are participating in an online chess tournament. There is a chess round that starts every 15 minutes. The first round of the day starts at 00:00, and after every 15 minutes, a new round starts.\nFor example, the second round starts at 00:15, the fourth round starts at 00:45, and the seventh round starts at 01:30.\nYou are given two strings loginTime and logoutTime where:\nloginTime is the time you will login to the game, and\nlogoutTime is the time you will logout from the game.\nIf logoutTime is earlier than loginTime, this means you have played from loginTime to midnight and from midnight to logoutTime.\nReturn the number of full chess rounds you have played in the tournament.\nNote:\nAll the given times follow the 24-hour clock. That means the first round of the day starts at 00:00 and the last round of the day starts at 23:45.", "examples": [{"full_text": "Example 1:\nInput: loginTime = \"09:31\", logoutTime = \"10:14\"\nOutput: 1\nExplanation: You played one full round from 09:45 to 10:00.\nYou did not play the full round from 09:30 to 09:45 because you logged in at 09:31 after it began.\nYou did not play the full round from 10:00 to 10:15 because you logged out at 10:14 before it ended.", "input": "Input: loginTime = \"09:31\", logoutTime = \"10:14\"", "output": "Output: 1", "explanation": "Explanation: You played one full round from 09:45 to 10:00.\nYou did not play the full round from 09:30 to 09:45 because you logged in at 09:31 after it began.\nYou did not play the full round from 10:00 to 10:15 because you logged out at 10:14 before it ended."}, {"full_text": "Example 2:\nInput: loginTime = \"21:30\", logoutTime = \"03:00\"\nOutput: 22\nExplanation: You played 10 full rounds from 21:30 to 00:00 and 12 full rounds from 00:00 to 03:00.\n10 + 12 = 22.", "input": "Input: loginTime = \"21:30\", logoutTime = \"03:00\"", "output": "Output: 22", "explanation": "Explanation: You played 10 full rounds from 21:30 to 00:00 and 12 full rounds from 00:00 to 03:00.\n10 + 12 = 22."}], "constraints": "Constraints:\nloginTime and logoutTime are in the format hh:mm.\n00 <= hh <= 23\n00 <= mm <= 59\nloginTime and logoutTime are not equal.", "notes": ""}, "1901": {"label": "Medium", "title": "Find a Peak Element II", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.537, "total_accepted": 14900.0, "total_submissions": 27700.0, "testcase_example": "'[[1,4],[3,2]]'", "body": "A peak element in a 2D grid is an element that is strictly greater than all of its adjacent neighbors to the left, right, top, and bottom.\nGiven a 0-indexed m x n matrix mat where no two adjacent cells are equal, find any peak element mat[i][j] and return the length 2 array [i,j].\nYou may assume that the entire matrix is surrounded by an outer perimeter with the value -1 in each cell.\nYou must write an algorithm that runs in O(m log(n)) or O(n log(m)) time.", "examples": [{"full_text": "Example 1:\nInput: mat = [[1,4],[3,2]]\nOutput: [0,1]\nExplanation:\nBoth 3 and 4 are peak elements so [1,0] and [0,1] are both acceptable answers.", "input": "Input: mat = [[1,4],[3,2]]", "output": "Output: [0,1]", "explanation": "Explanation:\nBoth 3 and 4 are peak elements so [1,0] and [0,1] are both acceptable answers."}, {"full_text": "Example 2:\nInput: mat = [[10,20,15],[21,30,14],[7,16,32]]\nOutput: [1,1]\nExplanation:\nBoth 30 and 32 are peak elements so [1,1] and [2,2] are both acceptable answers.", "input": "Input: mat = [[10,20,15],[21,30,14],[7,16,32]]", "output": "Output: [1,1]", "explanation": "Explanation:\nBoth 30 and 32 are peak elements so [1,1] and [2,2] are both acceptable answers."}], "constraints": "Constraints:\nm == mat.length\nn == mat[i].length\n1 <= m, n <= 500\n1 <= mat[i][j] <= 10^5\nNo two adjacent cells are equal.", "notes": ""}, "1899": {"label": "Medium", "title": "Merge Triplets to Form Target Triplet", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6078, "total_accepted": 12500.0, "total_submissions": 20600.0, "testcase_example": "'[[2,5,3],[1,8,4],[1,7,5]]\\n[2,7,5]'", "body": "A triplet is an array of three integers. You are given a 2D integer array triplets, where triplets[i] = [ai, bi, ci] describes the i^th triplet. You are also given an integer array target = [x, y, z] that describes the triplet you want to obtain.\nTo obtain target, you may apply the following operation on triplets any number of times (possibly zero):\nChoose two indices (0-indexed) i and j (i != j) and update triplets[j] to become [max(ai, aj), max(bi, bj), max(ci, cj)].\n\nFor example, if triplets[i] = [2, 5, 3] and triplets[j] = [1, 7, 5], triplets[j] will be updated to [max(2, 1), max(5, 7), max(3, 5)] = [2, 7, 5].\n\n\nReturn true if it is possible to obtain the target triplet [x, y, z] as an element of triplets, or false otherwise.", "examples": [{"full_text": "Example 1:\nInput: triplets = [[2,5,3],[1,8,4],[1,7,5]], target = [2,7,5]\nOutput: true\nExplanation: Perform the following operations:\n- Choose the first and last triplets [[2,5,3],[1,8,4],[1,7,5]]. Update the last triplet to be [max(2,1), max(5,7), max(3,5)] = [2,7,5]. triplets = [[2,5,3],[1,8,4],[2,7,5]]\nThe target triplet [2,7,5] is now an element of triplets.", "input": "Input: triplets = [[2,5,3],[1,8,4],[1,7,5]], target = [2,7,5]", "output": "Output: true", "explanation": "Explanation: Perform the following operations:\n- Choose the first and last triplets [[2,5,3],[1,8,4],[1,7,5]]. Update the last triplet to be [max(2,1), max(5,7), max(3,5)] = [2,7,5]. triplets = [[2,5,3],[1,8,4],[2,7,5]]\nThe target triplet [2,7,5] is now an element of triplets."}, {"full_text": "Example 2:\nInput: triplets = [[3,4,5],[4,5,6]], target = [3,2,5]\nOutput: false\nExplanation: It is impossible to have [3,2,5] as an element because there is no 2 in any of the triplets.", "input": "Input: triplets = [[3,4,5],[4,5,6]], target = [3,2,5]", "output": "Output: false", "explanation": "Explanation: It is impossible to have [3,2,5] as an element because there is no 2 in any of the triplets."}, {"full_text": "Example 3:\nInput: triplets = [[2,5,3],[2,3,4],[1,2,5],[5,2,3]], target = [5,5,5]\nOutput: true\nExplanation: Perform the following operations:\n- Choose the first and third triplets [[2,5,3],[2,3,4],[1,2,5],[5,2,3]]. Update the third triplet to be [max(2,1), max(5,2), max(3,5)] = [2,5,5]. triplets = [[2,5,3],[2,3,4],[2,5,5],[5,2,3]].\n- Choose the third and fourth triplets [[2,5,3],[2,3,4],[2,5,5],[5,2,3]]. Update the fourth triplet to be [max(2,5), max(5,2), max(5,3)] = [5,5,5]. triplets = [[2,5,3],[2,3,4],[2,5,5],[5,5,5]].\nThe target triplet [5,5,5] is now an element of triplets.", "input": "Input: triplets = [[2,5,3],[2,3,4],[1,2,5],[5,2,3]], target = [5,5,5]", "output": "Output: true", "explanation": "Explanation: Perform the following operations:\n- Choose the first and third triplets [[2,5,3],[2,3,4],[1,2,5],[5,2,3]]. Update the third triplet to be [max(2,1), max(5,2), max(3,5)] = [2,5,5]. triplets = [[2,5,3],[2,3,4],[2,5,5],[5,2,3]].\n- Choose the third and fourth triplets [[2,5,3],[2,3,4],[2,5,5],[5,2,3]]. Update the fourth triplet to be [max(2,5), max(5,2), max(5,3)] = [5,5,5]. triplets = [[2,5,3],[2,3,4],[2,5,5],[5,5,5]].\nThe target triplet [5,5,5] is now an element of triplets."}], "constraints": "Constraints:\n1 <= triplets.length <= 10^5\ntriplets[i].length == target.length == 3\n1 <= ai, bi, ci, x, y, z <= 1000", "notes": ""}, "1898": {"label": "Medium", "title": "Maximum Number of Removable Characters", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.35009999999999997, "total_accepted": 11500.0, "total_submissions": 32700.000000000004, "testcase_example": "'\"abcacb\"\\n\"ab\"\\n[3,1,0]'", "body": "You are given two strings s and p where p is a subsequence of s. You are also given a distinct 0-indexed integer array removable containing a subset of indices of s (s is also 0-indexed).\nYou want to choose an integer k (0 <= k <= removable.length) such that, after removing k characters from s using the first k indices in removable, p is still a subsequence of s. More formally, you will mark the character at s[removable[i]] for each 0 <= i < k, then remove all marked characters and check if p is still a subsequence.\nReturn the maximum k you can choose such that p is still a subsequence of s after the removals.\nA subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.", "examples": [{"full_text": "Example 1:\nInput: s = \"abcacb\", p = \"ab\", removable = [3,1,0]\nOutput: 2\nExplanation: After removing the characters at indices 3 and 1, \"abcacb\" becomes \"accb\".\n\"ab\" is a subsequence of \"accb\".\nIf we remove the characters at indices 3, 1, and 0, \"abcacb\" becomes \"ccb\", and \"ab\" is no longer a subsequence.\nHence, the maximum k is 2.", "input": "Input: s = \"abcacb\", p = \"ab\", removable = [3,1,0]", "output": "Output: 2", "explanation": "Explanation: After removing the characters at indices 3 and 1, \"abcacb\" becomes \"accb\".\n\"ab\" is a subsequence of \"accb\".\nIf we remove the characters at indices 3, 1, and 0, \"abcacb\" becomes \"ccb\", and \"ab\" is no longer a subsequence.\nHence, the maximum k is 2."}, {"full_text": "Example 2:\nInput: s = \"abcbddddd\", p = \"abcd\", removable = [3,2,1,4,5,6]\nOutput: 1\nExplanation: After removing the character at index 3, \"abcbddddd\" becomes \"abcddddd\".\n\"abcd\" is a subsequence of \"abcddddd\".", "input": "Input: s = \"abcbddddd\", p = \"abcd\", removable = [3,2,1,4,5,6]", "output": "Output: 1", "explanation": "Explanation: After removing the character at index 3, \"abcbddddd\" becomes \"abcddddd\".\n\"abcd\" is a subsequence of \"abcddddd\"."}, {"full_text": "Example 3:\nInput: s = \"abcab\", p = \"abc\", removable = [0,1,2,3,4]\nOutput: 0\nExplanation: If you remove the first index in the array removable, \"abc\" is no longer a subsequence.", "input": "Input: s = \"abcab\", p = \"abc\", removable = [0,1,2,3,4]", "output": "Output: 0", "explanation": "Explanation: If you remove the first index in the array removable, \"abc\" is no longer a subsequence."}], "constraints": "Constraints:\n1 <= p.length <= s.length <= 10^5\n0 <= removable.length < s.length\n0 <= removable[i] < s.length\np is a subsequence of s.\ns and p both consist of lowercase English letters.\nThe elements in removable are distinct.", "notes": ""}, "1895": {"label": "Medium", "title": "Largest Magic Square", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.511, "total_accepted": 7100.0, "total_submissions": 13900.0, "testcase_example": "'[[7,1,4,5,6],[2,5,1,6,4],[1,5,4,3,2],[1,2,7,3,4]]'", "body": "A k x k magic square is a k x k grid filled with integers such that every row sum, every column sum, and both diagonal sums are all equal. The integers in the magic square do not have to be distinct. Every 1 x 1 grid is trivially a magic square.\nGiven an m x n integer grid, return the size (i.e., the side length k) of the largest magic square that can be found within this grid.", "examples": [{"full_text": "Example 1:\nInput: grid = [[7,1,4,5,6],[2,5,1,6,4],[1,5,4,3,2],[1,2,7,3,4]]\nOutput: 3\nExplanation: The largest magic square has a size of 3.\nEvery row sum, column sum, and diagonal sum of this magic square is equal to 12.\n- Row sums: 5+1+6 = 5+4+3 = 2+7+3 = 12\n- Column sums: 5+5+2 = 1+4+7 = 6+3+3 = 12\n- Diagonal sums: 5+4+3 = 6+4+2 = 12", "input": "Input: grid = [[7,1,4,5,6],[2,5,1,6,4],[1,5,4,3,2],[1,2,7,3,4]]", "output": "Output: 3", "explanation": "Explanation: The largest magic square has a size of 3.\nEvery row sum, column sum, and diagonal sum of this magic square is equal to 12.\n- Row sums: 5+1+6 = 5+4+3 = 2+7+3 = 12\n- Column sums: 5+5+2 = 1+4+7 = 6+3+3 = 12\n- Diagonal sums: 5+4+3 = 6+4+2 = 12"}, {"full_text": "Example 2:\nInput: grid = [[5,1,3,1],[9,3,3,1],[1,3,3,8]]\nOutput: 2", "input": "Input: grid = [[5,1,3,1],[9,3,3,1],[1,3,3,8]]", "output": "Output: 2", "explanation": ""}], "constraints": "Constraints:\nm == grid.length\nn == grid[i].length\n1 <= m, n <= 50\n1 <= grid[i][j] <= 10^6", "notes": ""}, "1894": {"label": "Medium", "title": "Find the Student that Will Replace the Chalk", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.40840000000000004, "total_accepted": 14700.0, "total_submissions": 36000.0, "testcase_example": "'[5,1,5]\\n22'", "body": "There are n students in a class numbered from 0 to n - 1. The teacher will give each student a problem starting with the student number 0, then the student number 1, and so on until the teacher reaches the student number n - 1. After that, the teacher will restart the process, starting with the student number 0 again.\nYou are given a 0-indexed integer array chalk and an integer k. There are initially k pieces of chalk. When the student number i is given a problem to solve, they will use chalk[i] pieces of chalk to solve that problem. However, if the current number of chalk pieces is strictly less than chalk[i], then the student number i will be asked to replace the chalk.\nReturn the index of the student that will replace the chalk.", "examples": [{"full_text": "Example 1:\nInput: chalk = [5,1,5], k = 22\nOutput: 0\nExplanation: The students go in turns as follows:\n- Student number 0 uses 5 chalk, so k = 17.\n- Student number 1 uses 1 chalk, so k = 16.\n- Student number 2 uses 5 chalk, so k = 11.\n- Student number 0 uses 5 chalk, so k = 6.\n- Student number 1 uses 1 chalk, so k = 5.\n- Student number 2 uses 5 chalk, so k = 0.\nStudent number 0 does not have enough chalk, so they will have to replace it.", "input": "Input: chalk = [5,1,5], k = 22", "output": "Output: 0", "explanation": "Explanation: The students go in turns as follows:\n- Student number 0 uses 5 chalk, so k = 17.\n- Student number 1 uses 1 chalk, so k = 16.\n- Student number 2 uses 5 chalk, so k = 11.\n- Student number 0 uses 5 chalk, so k = 6.\n- Student number 1 uses 1 chalk, so k = 5.\n- Student number 2 uses 5 chalk, so k = 0.\nStudent number 0 does not have enough chalk, so they will have to replace it."}, {"full_text": "Example 2:\nInput: chalk = [3,4,1,2], k = 25\nOutput: 1\nExplanation: The students go in turns as follows:\n- Student number 0 uses 3 chalk so k = 22.\n- Student number 1 uses 4 chalk so k = 18.\n- Student number 2 uses 1 chalk so k = 17.\n- Student number 3 uses 2 chalk so k = 15.\n- Student number 0 uses 3 chalk so k = 12.\n- Student number 1 uses 4 chalk so k = 8.\n- Student number 2 uses 1 chalk so k = 7.\n- Student number 3 uses 2 chalk so k = 5.\n- Student number 0 uses 3 chalk so k = 2.\nStudent number 1 does not have enough chalk, so they will have to replace it.", "input": "Input: chalk = [3,4,1,2], k = 25", "output": "Output: 1", "explanation": "Explanation: The students go in turns as follows:\n- Student number 0 uses 3 chalk so k = 22.\n- Student number 1 uses 4 chalk so k = 18.\n- Student number 2 uses 1 chalk so k = 17.\n- Student number 3 uses 2 chalk so k = 15.\n- Student number 0 uses 3 chalk so k = 12.\n- Student number 1 uses 4 chalk so k = 8.\n- Student number 2 uses 1 chalk so k = 7.\n- Student number 3 uses 2 chalk so k = 5.\n- Student number 0 uses 3 chalk so k = 2.\nStudent number 1 does not have enough chalk, so they will have to replace it."}], "constraints": "Constraints:\nchalk.length == n\n1 <= n <= 10^5\n1 <= chalk[i] <= 10^5\n1 <= k <= 10^9", "notes": ""}, "1888": {"label": "Medium", "title": "Minimum Number of Flips to Make the Binary String Alternating", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3608, "total_accepted": 10700.0, "total_submissions": 29500.0, "testcase_example": "'\"111000\"'", "body": "You are given a binary string s. You are allowed to perform two types of operations on the string in any sequence:\nType-1: Remove the character at the start of the string s and append it to the end of the string.\nType-2: Pick any character in s and flip its value, i.e., if its value is '0' it becomes '1' and vice-versa.\nReturn the minimum number of type-2 operations you need to perform such that s becomes alternating.\nThe string is called alternating if no two adjacent characters are equal.\nFor example, the strings \"010\" and \"1010\" are alternating, while the string \"0100\" is not.", "examples": [{"full_text": "Example 1:\nInput: s = \"111000\"\nOutput: 2\nExplanation: Use the first operation two times to make s = \"100011\".\nThen, use the second operation on the third and sixth elements to make s = \"101010\".", "input": "Input: s = \"111000\"", "output": "Output: 2", "explanation": "Explanation: Use the first operation two times to make s = \"100011\".\nThen, use the second operation on the third and sixth elements to make s = \"101010\"."}, {"full_text": "Example 2:\nInput: s = \"010\"\nOutput: 0\nExplanation: The string is already alternating.", "input": "Input: s = \"010\"", "output": "Output: 0", "explanation": "Explanation: The string is already alternating."}, {"full_text": "Example 3:\nInput: s = \"1110\"\nOutput: 1\nExplanation: Use the second operation on the second element to make s = \"1010\".", "input": "Input: s = \"1110\"", "output": "Output: 1", "explanation": "Explanation: Use the second operation on the second element to make s = \"1010\"."}], "constraints": "Constraints:\n1 <= s.length <= 10^5\ns[i] is either '0' or '1'.", "notes": ""}, "1887": {"label": "Medium", "title": "Reduction Operations to Make the Array Elements Equal", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6117, "total_accepted": 15700.0, "total_submissions": 25700.0, "testcase_example": "'[5,1,3]'", "body": "Given an integer array nums, your goal is to make all elements in nums equal. To complete one operation, follow these steps:\nFind the largest value in nums. Let its index be i (0-indexed) and its value be largest. If there are multiple elements with the largest value, pick the smallest i.\nFind the next largest value in nums strictly smaller than largest. Let its value be nextLargest.\nReduce nums[i] to nextLargest.\nReturn the number of operations to make all elements in nums equal.", "examples": [{"full_text": "Example 1:\nInput: nums = [5,1,3]\nOutput: 3\nExplanation:\nIt takes 3 operations to make all elements in nums equal:\n1. largest = 5 at index 0. nextLargest = 3. Reduce nums[0] to 3. nums = [3,1,3].\n2. largest = 3 at index 0. nextLargest = 1. Reduce nums[0] to 1. nums = [1,1,3].\n3. largest = 3 at index 2. nextLargest = 1. Reduce nums[2] to 1. nums = [1,1,1].", "input": "Input: nums = [5,1,3]", "output": "Output: 3", "explanation": "Explanation:\nIt takes 3 operations to make all elements in nums equal:\n1. largest = 5 at index 0. nextLargest = 3. Reduce nums[0] to 3. nums = [3,1,3].\n2. largest = 3 at index 0. nextLargest = 1. Reduce nums[0] to 1. nums = [1,1,3].\n3. largest = 3 at index 2. nextLargest = 1. Reduce nums[2] to 1. nums = [1,1,1]."}, {"full_text": "Example 2:\nInput: nums = [1,1,1]\nOutput: 0\nExplanation:\nAll elements in nums are already equal.", "input": "Input: nums = [1,1,1]", "output": "Output: 0", "explanation": "Explanation:\nAll elements in nums are already equal."}, {"full_text": "Example 3:\nInput: nums = [1,1,2,2,3]\nOutput: 4\nExplanation:\nIt takes 4 operations to make all elements in nums equal:\n1. largest = 3 at index 4. nextLargest = 2. Reduce nums[4] to 2. nums = [1,1,2,2,2].\n2. largest = 2 at index 2. nextLargest = 1. Reduce nums[2] to 1. nums = [1,1,1,2,2].\n3. largest = 2 at index 3. nextLargest = 1. Reduce nums[3] to 1. nums = [1,1,1,1,2].\n4. largest = 2 at index 4. nextLargest = 1. Reduce nums[4] to 1. nums = [1,1,1,1,1].", "input": "Input: nums = [1,1,2,2,3]", "output": "Output: 4", "explanation": "Explanation:\nIt takes 4 operations to make all elements in nums equal:\n1. largest = 3 at index 4. nextLargest = 2. Reduce nums[4] to 2. nums = [1,1,2,2,2].\n2. largest = 2 at index 2. nextLargest = 1. Reduce nums[2] to 1. nums = [1,1,1,2,2].\n3. largest = 2 at index 3. nextLargest = 1. Reduce nums[3] to 1. nums = [1,1,1,1,2].\n4. largest = 2 at index 4. nextLargest = 1. Reduce nums[4] to 1. nums = [1,1,1,1,1]."}], "constraints": "Constraints:\n1 <= nums.length <= 5 * 10^4\n1 <= nums[i] <= 5 * 10^4", "notes": ""}, "1884": {"label": "Medium", "title": "Egg Drop With 2 Eggs and N Floors", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7017, "total_accepted": 16900.0, "total_submissions": 24100.0, "testcase_example": "'2'", "body": "You are given two identical eggs and you have access to a building with n floors labeled from 1 to n.\nYou know that there exists a floor f where 0 <= f <= n such that any egg dropped at a floor higher than f will break, and any egg dropped at or below floor f will not break.\nIn each move, you may take an unbroken egg and drop it from any floor x (where 1 <= x <= n). If the egg breaks, you can no longer use it. However, if the egg does not break, you may reuse it in future moves.\nReturn the minimum number of moves that you need to determine with certainty what the value of f is.", "examples": [{"full_text": "Example 1:\nInput: n = 2\nOutput: 2\nExplanation: We can drop the first egg from floor 1 and the second egg from floor 2.\nIf the first egg breaks, we know that f = 0.\nIf the second egg breaks but the first egg didn't, we know that f = 1.\nOtherwise, if both eggs survive, we know that f = 2.", "input": "Input: n = 2", "output": "Output: 2", "explanation": "Explanation: We can drop the first egg from floor 1 and the second egg from floor 2.\nIf the first egg breaks, we know that f = 0.\nIf the second egg breaks but the first egg didn't, we know that f = 1.\nOtherwise, if both eggs survive, we know that f = 2."}, {"full_text": "Example 2:\nInput: n = 100\nOutput: 14\nExplanation: One optimal strategy is:\n- Drop the 1st egg at floor 9. If it breaks, we know f is between 0 and 8. Drop the 2nd egg starting from floor 1 and going up one at a time to find f within 8 more drops. Total drops is 1 + 8 = 9.\n- If the 1st egg does not break, drop the 1st egg again at floor 22. If it breaks, we know f is between 9 and 21. Drop the 2nd egg starting from floor 10 and going up one at a time to find f within 12 more drops. Total drops is 2 + 12 = 14.\n- If the 1st egg does not break again, follow a similar process dropping the 1st egg from floors 34, 45, 55, 64, 72, 79, 85, 90, 94, 97, 99, and 100.\nRegardless of the outcome, it takes at most 14 drops to determine f.", "input": "Input: n = 100", "output": "Output: 14", "explanation": "Explanation: One optimal strategy is:\n- Drop the 1st egg at floor 9. If it breaks, we know f is between 0 and 8. Drop the 2nd egg starting from floor 1 and going up one at a time to find f within 8 more drops. Total drops is 1 + 8 = 9.\n- If the 1st egg does not break, drop the 1st egg again at floor 22. If it breaks, we know f is between 9 and 21. Drop the 2nd egg starting from floor 10 and going up one at a time to find f within 12 more drops. Total drops is 2 + 12 = 14.\n- If the 1st egg does not break again, follow a similar process dropping the 1st egg from floors 34, 45, 55, 64, 72, 79, 85, 90, 94, 97, 99, and 100.\nRegardless of the outcome, it takes at most 14 drops to determine f."}], "constraints": "Constraints:\n1 <= n <= 1000", "notes": ""}, "1882": {"label": "Medium", "title": "Process Tasks Using Servers", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3677, "total_accepted": 15100.0, "total_submissions": 41100.0, "testcase_example": "'[3,3,2]\\n[1,2,3,2,1,2]'", "body": "You are given two 0-indexed integer arrays servers and tasks of lengths n\u200b\u200b\u200b\u200b\u200b\u200b and m\u200b\u200b\u200b\u200b\u200b\u200b respectively. servers[i] is the weight of the i^\u200b\u200b\u200b\u200b\u200b\u200bth\u200b\u200b\u200b\u200b server, and tasks[j] is the time needed to process the j^\u200b\u200b\u200b\u200b\u200b\u200bth\u200b\u200b\u200b\u200b task in seconds.\nTasks are assigned to the servers using a task queue. Initially, all servers are free, and the queue is empty.\nAt second j, the j^th task is inserted into the queue (starting with the 0^th task being inserted at second 0). As long as there are free servers and the queue is not empty, the task in the front of the queue will be assigned to a free server with the smallest weight, and in case of a tie, it is assigned to a free server with the smallest index.\nIf there are no free servers and the queue is not empty, we wait until a server becomes free and immediately assign the next task. If multiple servers become free at the same time, then multiple tasks from the queue will be assigned in order of insertion following the weight and index priorities above.\nA server that is assigned task j at second t will be free again at second t + tasks[j].\nBuild an array ans\u200b\u200b\u200b\u200b of length m, where ans[j] is the index of the server the j^\u200b\u200b\u200b\u200b\u200b\u200bth task will be assigned to.\nReturn the array ans\u200b\u200b\u200b\u200b.", "examples": [{"full_text": "Example 1:\nInput: servers = [3,3,2], tasks = [1,2,3,2,1,2]\nOutput: [2,2,0,2,1,2]\nExplanation: Events in chronological order go as follows:\n- At second 0, task 0 is added and processed using server 2 until second 1.\n- At second 1, server 2 becomes free. Task 1 is added and processed using server 2 until second 3.\n- At second 2, task 2 is added and processed using server 0 until second 5.\n- At second 3, server 2 becomes free. Task 3 is added and processed using server 2 until second 5.\n- At second 4, task 4 is added and processed using server 1 until second 5.\n- At second 5, all servers become free. Task 5 is added and processed using server 2 until second 7.", "input": "Input: servers = [3,3,2], tasks = [1,2,3,2,1,2]", "output": "Output: [2,2,0,2,1,2]", "explanation": "Explanation: Events in chronological order go as follows:\n- At second 0, task 0 is added and processed using server 2 until second 1.\n- At second 1, server 2 becomes free. Task 1 is added and processed using server 2 until second 3.\n- At second 2, task 2 is added and processed using server 0 until second 5.\n- At second 3, server 2 becomes free. Task 3 is added and processed using server 2 until second 5.\n- At second 4, task 4 is added and processed using server 1 until second 5.\n- At second 5, all servers become free. Task 5 is added and processed using server 2 until second 7."}, {"full_text": "Example 2:\nInput: servers = [5,1,4,3,2], tasks = [2,1,2,4,5,2,1]\nOutput: [1,4,1,4,1,3,2]\nExplanation: Events in chronological order go as follows:\n- At second 0, task 0 is added and processed using server 1 until second 2.\n- At second 1, task 1 is added and processed using server 4 until second 2.\n- At second 2, servers 1 and 4 become free. Task 2 is added and processed using server 1 until second 4.\n- At second 3, task 3 is added and processed using server 4 until second 7.\n- At second 4, server 1 becomes free. Task 4 is added and processed using server 1 until second 9.\n- At second 5, task 5 is added and processed using server 3 until second 7.\n- At second 6, task 6 is added and processed using server 2 until second 7.", "input": "Input: servers = [5,1,4,3,2], tasks = [2,1,2,4,5,2,1]", "output": "Output: [1,4,1,4,1,3,2]", "explanation": "Explanation: Events in chronological order go as follows:\n- At second 0, task 0 is added and processed using server 1 until second 2.\n- At second 1, task 1 is added and processed using server 4 until second 2.\n- At second 2, servers 1 and 4 become free. Task 2 is added and processed using server 1 until second 4.\n- At second 3, task 3 is added and processed using server 4 until second 7.\n- At second 4, server 1 becomes free. Task 4 is added and processed using server 1 until second 9.\n- At second 5, task 5 is added and processed using server 3 until second 7.\n- At second 6, task 6 is added and processed using server 2 until second 7."}], "constraints": "Constraints:\nservers.length == n\ntasks.length == m\n1 <= n, m <= 2 * 10^5\n1 <= servers[i], tasks[j] <= 2 * 10^5", "notes": ""}, "1881": {"label": "Medium", "title": "Maximum Value after Insertion", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3542, "total_accepted": 16400.0, "total_submissions": 46400.0, "testcase_example": "'\"99\"\\n9'", "body": "You are given a very large integer n, represented as a string,\u200b\u200b\u200b\u200b\u200b\u200b and an integer digit x. The digits in n and the digit x are in the inclusive range [1, 9], and n may represent a negative number.\nYou want to maximize n's numerical value by inserting x anywhere in the decimal representation of n\u200b\u200b\u200b\u200b\u200b\u200b. You cannot insert x to the left of the negative sign.\nFor example, if n = 73 and x = 6, it would be best to insert it between 7 and 3, making n = 763.\nIf n = -55 and x = 2, it would be best to insert it before the first 5, making n = -255.\nReturn a string representing the maximum value of n\u200b\u200b\u200b\u200b\u200b\u200b after the insertion.", "examples": [{"full_text": "Example 1:\nInput: n = \"99\", x = 9\nOutput: \"999\"\nExplanation: The result is the same regardless of where you insert 9.", "input": "Input: n = \"99\", x = 9", "output": "Output: \"999\"", "explanation": "Explanation: The result is the same regardless of where you insert 9."}, {"full_text": "Example 2:\nInput: n = \"-13\", x = 2\nOutput: \"-123\"\nExplanation: You can make n one of {-213, -123, -132}, and the largest of those three is -123.", "input": "Input: n = \"-13\", x = 2", "output": "Output: \"-123\"", "explanation": "Explanation: You can make n one of {-213, -123, -132}, and the largest of those three is -123."}], "constraints": "Constraints:\n1 <= n.length <= 10^5\n1 <= x <= 9\nThe digits in n\u200b\u200b\u200b are in the range [1, 9].\nn is a valid representation of an integer.\nIn the case of a negative n,\u200b\u200b\u200b\u200b\u200b\u200b it will begin with '-'.", "notes": ""}, "1878": {"label": "Medium", "title": "Get Biggest Three Rhombus Sums in a Grid", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4448, "total_accepted": 8100.0, "total_submissions": 18300.0, "testcase_example": "'[[3,4,5,1,3],[3,3,4,2,3],[20,30,200,40,10],[1,5,5,4,1],[4,3,2,2,5]]'", "body": "You are given an m x n integer matrix grid\u200b\u200b\u200b.\nA rhombus sum is the sum of the elements that form the border of a regular rhombus shape in grid\u200b\u200b\u200b. The rhombus must have the shape of a square rotated 45 degrees with each of the corners centered in a grid cell. Below is an image of four valid rhombus shapes with the corresponding colored cells that should be included in each rhombus sum:\nNote that the rhombus can have an area of 0, which is depicted by the purple rhombus in the bottom right corner.\nReturn the biggest three distinct rhombus sums in the grid in descending order. If there are less than three distinct values, return all of them.", "examples": [{"full_text": "Example 1:\nInput: grid = [[3,4,5,1,3],[3,3,4,2,3],[20,30,200,40,10],[1,5,5,4,1],[4,3,2,2,5]]\nOutput: [228,216,211]\nExplanation: The rhombus shapes for the three biggest distinct rhombus sums are depicted above.\n- Blue: 20 + 3 + 200 + 5 = 228\n- Red: 200 + 2 + 10 + 4 = 216\n- Green: 5 + 200 + 4 + 2 = 211", "input": "Input: grid = [[3,4,5,1,3],[3,3,4,2,3],[20,30,200,40,10],[1,5,5,4,1],[4,3,2,2,5]]", "output": "Output: [228,216,211]", "explanation": "Explanation: The rhombus shapes for the three biggest distinct rhombus sums are depicted above.\n- Blue: 20 + 3 + 200 + 5 = 228\n- Red: 200 + 2 + 10 + 4 = 216\n- Green: 5 + 200 + 4 + 2 = 211"}, {"full_text": "Example 2:\nInput: grid = [[1,2,3],[4,5,6],[7,8,9]]\nOutput: [20,9,8]\nExplanation: The rhombus shapes for the three biggest distinct rhombus sums are depicted above.\n- Blue: 4 + 2 + 6 + 8 = 20\n- Red: 9 (area 0 rhombus in the bottom right corner)\n- Green: 8 (area 0 rhombus in the bottom middle)", "input": "Input: grid = [[1,2,3],[4,5,6],[7,8,9]]", "output": "Output: [20,9,8]", "explanation": "Explanation: The rhombus shapes for the three biggest distinct rhombus sums are depicted above.\n- Blue: 4 + 2 + 6 + 8 = 20\n- Red: 9 (area 0 rhombus in the bottom right corner)\n- Green: 8 (area 0 rhombus in the bottom middle)"}, {"full_text": "Example 3:\nInput: grid = [[7,7,7]]\nOutput: [7]\nExplanation: All three possible rhombus sums are the same, so return [7].", "input": "Input: grid = [[7,7,7]]", "output": "Output: [7]", "explanation": "Explanation: All three possible rhombus sums are the same, so return [7]."}], "constraints": "Constraints:\nm == grid.length\nn == grid[i].length\n1 <= m, n <= 50\n1 <= grid[i][j] <= 10^5", "notes": ""}, "1877": {"label": "Medium", "title": "Minimize Maximum Pair Sum in Array", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.8059999999999999, "total_accepted": 42600.0, "total_submissions": 52800.0, "testcase_example": "'[3,5,2,3]'", "body": "The pair sum of a pair (a,b) is equal to a + b. The maximum pair sum is the largest pair sum in a list of pairs.\nFor example, if we have pairs (1,5), (2,3), and (4,4), the maximum pair sum would be max(1+5, 2+3, 4+4) = max(6, 5, 8) = 8.\nGiven an array nums of even length n, pair up the elements of nums into n / 2 pairs such that:\nEach element of nums is in exactly one pair, and\nThe maximum pair sum is minimized.\nReturn the minimized maximum pair sum after optimally pairing up the elements.", "examples": [{"full_text": "Example 1:\nInput: nums = [3,5,2,3]\nOutput: 7\nExplanation: The elements can be paired up into pairs (3,3) and (5,2).\nThe maximum pair sum is max(3+3, 5+2) = max(6, 7) = 7.", "input": "Input: nums = [3,5,2,3]", "output": "Output: 7", "explanation": "Explanation: The elements can be paired up into pairs (3,3) and (5,2).\nThe maximum pair sum is max(3+3, 5+2) = max(6, 7) = 7."}, {"full_text": "Example 2:\nInput: nums = [3,5,4,2,4,6]\nOutput: 8\nExplanation: The elements can be paired up into pairs (3,5), (4,4), and (6,2).\nThe maximum pair sum is max(3+5, 4+4, 6+2) = max(8, 8, 8) = 8.", "input": "Input: nums = [3,5,4,2,4,6]", "output": "Output: 8", "explanation": "Explanation: The elements can be paired up into pairs (3,5), (4,4), and (6,2).\nThe maximum pair sum is max(3+5, 4+4, 6+2) = max(8, 8, 8) = 8."}], "constraints": "Constraints:\nn == nums.length\n2 <= n <= 10^5\nn is even.\n1 <= nums[i] <= 10^5", "notes": ""}, "1871": {"label": "Medium", "title": "Jump Game VII", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.2468, "total_accepted": 20200.0, "total_submissions": 81600.0, "testcase_example": "'\"011010\"\\n2\\n3'", "body": "You are given a 0-indexed binary string s and two integers minJump and maxJump. In the beginning, you are standing at index 0, which is equal to '0'. You can move from index i to index j if the following conditions are fulfilled:\ni + minJump <= j <= min(i + maxJump, s.length - 1), and\ns[j] == '0'.\nReturn true if you can reach index s.length - 1 in s, or false otherwise.", "examples": [{"full_text": "Example 1:\nInput: s = \"011010\", minJump = 2, maxJump = 3\nOutput: true\nExplanation:\nIn the first step, move from index 0 to index 3.\nIn the second step, move from index 3 to index 5.", "input": "Input: s = \"011010\", minJump = 2, maxJump = 3", "output": "Output: true", "explanation": "Explanation:\nIn the first step, move from index 0 to index 3.\nIn the second step, move from index 3 to index 5."}, {"full_text": "Example 2:\nInput: s = \"01101110\", minJump = 2, maxJump = 3\nOutput: false", "input": "Input: s = \"01101110\", minJump = 2, maxJump = 3", "output": "Output: false", "explanation": ""}], "constraints": "Constraints:\n2 <= s.length <= 10^5\ns[i] is either '0' or '1'.\ns[0] == '0'\n1 <= minJump <= maxJump < s.length", "notes": ""}, "1870": {"label": "Medium", "title": "Minimum Speed to Arrive on Time", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3494, "total_accepted": 16000.0, "total_submissions": 45800.0, "testcase_example": "'[1,3,2]\\n6'", "body": "You are given a floating-point number hour, representing the amount of time you have to reach the office. To commute to the office, you must take n trains in sequential order. You are also given an integer array dist of length n, where dist[i] describes the distance (in kilometers) of the i^th train ride.\nEach train can only depart at an integer hour, so you may need to wait in between each train ride.\nFor example, if the 1^st train ride takes 1.5 hours, you must wait for an additional 0.5 hours before you can depart on the 2^nd train ride at the 2 hour mark.\nReturn the minimum positive integer speed (in kilometers per hour) that all the trains must travel at for you to reach the office on time, or -1 if it is impossible to be on time.\nTests are generated such that the answer will not exceed 10^7 and hour will have at most two digits after the decimal point.", "examples": [{"full_text": "Example 1:\nInput: dist = [1,3,2], hour = 6\nOutput: 1\nExplanation: At speed 1:\n- The first train ride takes 1/1 = 1 hour.\n- Since we are already at an integer hour, we depart immediately at the 1 hour mark. The second train takes 3/1 = 3 hours.\n- Since we are already at an integer hour, we depart immediately at the 4 hour mark. The third train takes 2/1 = 2 hours.\n- You will arrive at exactly the 6 hour mark.", "input": "Input: dist = [1,3,2], hour = 6", "output": "Output: 1", "explanation": "Explanation: At speed 1:\n- The first train ride takes 1/1 = 1 hour.\n- Since we are already at an integer hour, we depart immediately at the 1 hour mark. The second train takes 3/1 = 3 hours.\n- Since we are already at an integer hour, we depart immediately at the 4 hour mark. The third train takes 2/1 = 2 hours.\n- You will arrive at exactly the 6 hour mark."}, {"full_text": "Example 2:\nInput: dist = [1,3,2], hour = 2.7\nOutput: 3\nExplanation: At speed 3:\n- The first train ride takes 1/3 = 0.33333 hours.\n- Since we are not at an integer hour, we wait until the 1 hour mark to depart. The second train ride takes 3/3 = 1 hour.\n- Since we are already at an integer hour, we depart immediately at the 2 hour mark. The third train takes 2/3 = 0.66667 hours.\n- You will arrive at the 2.66667 hour mark.", "input": "Input: dist = [1,3,2], hour = 2.7", "output": "Output: 3", "explanation": "Explanation: At speed 3:\n- The first train ride takes 1/3 = 0.33333 hours.\n- Since we are not at an integer hour, we wait until the 1 hour mark to depart. The second train ride takes 3/3 = 1 hour.\n- Since we are already at an integer hour, we depart immediately at the 2 hour mark. The third train takes 2/3 = 0.66667 hours.\n- You will arrive at the 2.66667 hour mark."}, {"full_text": "Example 3:\nInput: dist = [1,3,2], hour = 1.9\nOutput: -1\nExplanation: It is impossible because the earliest the third train can depart is at the 2 hour mark.", "input": "Input: dist = [1,3,2], hour = 1.9", "output": "Output: -1", "explanation": "Explanation: It is impossible because the earliest the third train can depart is at the 2 hour mark."}], "constraints": "Constraints:\nn == dist.length\n1 <= n <= 10^5\n1 <= dist[i] <= 10^5\n1 <= hour <= 10^9\nThere will be at most two digits after the decimal point in hour.", "notes": ""}, "1865": {"label": "Medium", "title": "Finding Pairs With a Certain Sum", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4852, "total_accepted": 13600.0, "total_submissions": 28000.0, "testcase_example": "'[\"FindSumPairs\",\"count\",\"add\",\"count\",\"count\",\"add\",\"add\",\"count\"]\\n' +\n  '[[[1,1,2,2,2,3],[1,4,5,2,5,4]],[7],[3,2],[8],[4],[0,1],[1,1],[7]]'", "body": "You are given two integer arrays nums1 and nums2. You are tasked to implement a data structure that supports queries of two types:\nAdd a positive integer to an element of a given index in the array nums2.\nCount the number of pairs (i, j) such that nums1[i] + nums2[j] equals a given value (0 <= i < nums1.length and 0 <= j < nums2.length).\nImplement the FindSumPairs class:\nFindSumPairs(int[] nums1, int[] nums2) Initializes the FindSumPairs object with two integer arrays nums1 and nums2.\nvoid add(int index, int val) Adds val to nums2[index], i.e., apply nums2[index] += val.\nint count(int tot) Returns the number of pairs (i, j) such that nums1[i] + nums2[j] == tot.", "examples": [{"full_text": "Example 1:\nInput\n[\"FindSumPairs\", \"count\", \"add\", \"count\", \"count\", \"add\", \"add\", \"count\"]\n[[[1, 1, 2, 2, 2, 3], [1, 4, 5, 2, 5, 4]], [7], [3, 2], [8], [4], [0, 1], [1, 1], [7]]\nOutput\n[null, 8, null, 2, 1, null, null, 11]\nExplanation\nFindSumPairs findSumPairs = new FindSumPairs([1, 1, 2, 2, 2, 3], [1, 4, 5, 2, 5, 4]);\nfindSumPairs.count(7); // return 8; pairs (2,2), (3,2), (4,2), (2,4), (3,4), (4,4) make 2 + 5 and pairs (5,1), (5,5) make 3 + 4\nfindSumPairs.add(3, 2); // now nums2 = [1,4,5,4,5,4]\nfindSumPairs.count(8); // return 2; pairs (5,2), (5,4) make 3 + 5\nfindSumPairs.count(4); // return 1; pair (5,0) makes 3 + 1\nfindSumPairs.add(0, 1); // now nums2 = [2,4,5,4,5,4]\nfindSumPairs.add(1, 1); // now nums2 = [2,5,5,4,5,4]\nfindSumPairs.count(7); // return 11; pairs (2,1), (2,2), (2,4), (3,1), (3,2), (3,4), (4,1), (4,2), (4,4) make 2 + 5 and pairs (5,3), (5,5) make 3 + 4", "input": "Input\n[\"FindSumPairs\", \"count\", \"add\", \"count\", \"count\", \"add\", \"add\", \"count\"]\n[[[1, 1, 2, 2, 2, 3], [1, 4, 5, 2, 5, 4]], [7], [3, 2], [8], [4], [0, 1], [1, 1], [7]]", "output": "Output\n[null, 8, null, 2, 1, null, null, 11]", "explanation": "Explanation\nFindSumPairs findSumPairs = new FindSumPairs([1, 1, 2, 2, 2, 3], [1, 4, 5, 2, 5, 4]);\nfindSumPairs.count(7); // return 8; pairs (2,2), (3,2), (4,2), (2,4), (3,4), (4,4) make 2 + 5 and pairs (5,1), (5,5) make 3 + 4\nfindSumPairs.add(3, 2); // now nums2 = [1,4,5,4,5,4]\nfindSumPairs.count(8); // return 2; pairs (5,2), (5,4) make 3 + 5\nfindSumPairs.count(4); // return 1; pair (5,0) makes 3 + 1\nfindSumPairs.add(0, 1); // now nums2 = [2,4,5,4,5,4]\nfindSumPairs.add(1, 1); // now nums2 = [2,5,5,4,5,4]\nfindSumPairs.count(7); // return 11; pairs (2,1), (2,2), (2,4), (3,1), (3,2), (3,4), (4,1), (4,2), (4,4) make 2 + 5 and pairs (5,3), (5,5) make 3 + 4"}], "constraints": "Constraints:\n1 <= nums1.length <= 1000\n1 <= nums2.length <= 10^5\n1 <= nums1[i] <= 10^9\n1 <= nums2[i] <= 10^5\n0 <= index < nums2.length\n1 <= val <= 10^5\n1 <= tot <= 10^9\nAt most 1000 calls are made to add and count each.", "notes": ""}, "1864": {"label": "Medium", "title": "Minimum Number of Swaps to Make the Binary String Alternating", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3811, "total_accepted": 12200.0, "total_submissions": 32000.0, "testcase_example": "'\"111000\"'", "body": "Given a binary string s, return the minimum number of character swaps to make it alternating, or -1 if it is impossible.\nThe string is called alternating if no two adjacent characters are equal. For example, the strings \"010\" and \"1010\" are alternating, while the string \"0100\" is not.\nAny two characters may be swapped, even if they are\nnot adjacent.", "examples": [{"full_text": "Example 1:\nInput: s = \"111000\"\nOutput: 1\nExplanation: Swap positions 1 and 4: \"111000\" -> \"101010\"\nThe string is now alternating.", "input": "Input: s = \"111000\"", "output": "Output: 1", "explanation": "Explanation: Swap positions 1 and 4: \"111000\" -> \"101010\"\nThe string is now alternating."}, {"full_text": "Example 2:\nInput: s = \"010\"\nOutput: 0\nExplanation: The string is already alternating, no swaps are needed.", "input": "Input: s = \"010\"", "output": "Output: 0", "explanation": "Explanation: The string is already alternating, no swaps are needed."}, {"full_text": "Example 3:\nInput: s = \"1110\"\nOutput: -1", "input": "Input: s = \"1110\"", "output": "Output: -1", "explanation": ""}], "constraints": "Constraints:\n1 <= s.length <= 1000\ns[i] is either '0' or '1'.", "notes": ""}, "1861": {"label": "Medium", "title": "Rotating the Box", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.643, "total_accepted": 22600.0, "total_submissions": 35200.0, "testcase_example": "'[[\"#\",\".\",\"#\"]]'", "body": "You are given an m x n matrix of characters box representing a side-view of a box. Each cell of the box is one of the following:\nA stone '#'\nA stationary obstacle '*'\nEmpty '.'\nThe box is rotated 90 degrees clockwise, causing some of the stones to fall due to gravity. Each stone falls down until it lands on an obstacle, another stone, or the bottom of the box. Gravity does not affect the obstacles' positions, and the inertia from the box's rotation does not affect the stones' horizontal positions.\nIt is guaranteed that each stone in box rests on an obstacle, another stone, or the bottom of the box.\nReturn an n x m matrix representing the box after the rotation described above.", "examples": [{"full_text": "Example 1:\nInput: box = [[\"#\",\".\",\"#\"]]\nOutput: [[\".\"],\n[\"#\"],\n[\"#\"]]", "input": "Input: box = [[\"#\",\".\",\"#\"]]", "output": "Output: [[\".\"],\n[\"#\"],\n[\"#\"]]", "explanation": ""}, {"full_text": "Example 2:\nInput: box = [[\"#\",\".\",\"*\",\".\"],\n[\"#\",\"#\",\"*\",\".\"]]\nOutput: [[\"#\",\".\"],\n[\"#\",\"#\"],\n[\"*\",\"*\"],\n[\".\",\".\"]]", "input": "Input: box = [[\"#\",\".\",\"*\",\".\"],\n[\"#\",\"#\",\"*\",\".\"]]", "output": "Output: [[\"#\",\".\"],\n[\"#\",\"#\"],\n[\"*\",\"*\"],\n[\".\",\".\"]]", "explanation": ""}, {"full_text": "Example 3:\nInput: box = [[\"#\",\"#\",\"*\",\".\",\"*\",\".\"],\n[\"#\",\"#\",\"#\",\"*\",\".\",\".\"],\n[\"#\",\"#\",\"#\",\".\",\"#\",\".\"]]\nOutput: [[\".\",\"#\",\"#\"],\n[\".\",\"#\",\"#\"],\n[\"#\",\"#\",\"*\"],\n[\"#\",\"*\",\".\"],\n[\"#\",\".\",\"*\"],\n[\"#\",\".\",\".\"]]", "input": "Input: box = [[\"#\",\"#\",\"*\",\".\",\"*\",\".\"],\n[\"#\",\"#\",\"#\",\"*\",\".\",\".\"],\n[\"#\",\"#\",\"#\",\".\",\"#\",\".\"]]", "output": "Output: [[\".\",\"#\",\"#\"],\n[\".\",\"#\",\"#\"],\n[\"#\",\"#\",\"*\"],\n[\"#\",\"*\",\".\"],\n[\"#\",\".\",\"*\"],\n[\"#\",\".\",\".\"]]", "explanation": ""}], "constraints": "Constraints:\nm == box.length\nn == box[i].length\n1 <= m, n <= 500\nbox[i][j] is either '#', '*', or '.'.", "notes": ""}, "1860": {"label": "Medium", "title": "Incremental Memory Leak", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7075, "total_accepted": 11600.0, "total_submissions": 16400.0, "testcase_example": "'2\\n2'", "body": "You are given two integers memory1 and memory2 representing the available memory in bits on two memory sticks. There is currently a faulty program running that consumes an increasing amount of memory every second.\nAt the i^th second (starting from 1), i bits of memory are allocated to the stick with more available memory (or from the first memory stick if both have the same available memory). If neither stick has at least i bits of available memory, the program crashes.\nReturn an array containing [crashTime, memory1crash, memory2crash], where crashTime is the time (in seconds) when the program crashed and memory1crash and memory2crash are the available bits of memory in the first and second sticks respectively.", "examples": [{"full_text": "Example 1:\nInput: memory1 = 2, memory2 = 2\nOutput: [3,1,0]\nExplanation: The memory is allocated as follows:\n- At the 1^st second, 1 bit of memory is allocated to stick 1. The first stick now has 1 bit of available memory.\n- At the 2^nd second, 2 bits of memory are allocated to stick 2. The second stick now has 0 bits of available memory.\n- At the 3^rd second, the program crashes. The sticks have 1 and 0 bits available respectively.", "input": "Input: memory1 = 2, memory2 = 2", "output": "Output: [3,1,0]", "explanation": "Explanation: The memory is allocated as follows:\n- At the 1^st second, 1 bit of memory is allocated to stick 1. The first stick now has 1 bit of available memory.\n- At the 2^nd second, 2 bits of memory are allocated to stick 2. The second stick now has 0 bits of available memory.\n- At the 3^rd second, the program crashes. The sticks have 1 and 0 bits available respectively."}, {"full_text": "Example 2:\nInput: memory1 = 8, memory2 = 11\nOutput: [6,0,4]\nExplanation: The memory is allocated as follows:\n- At the 1^st second, 1 bit of memory is allocated to stick 2. The second stick now has 10 bit of available memory.\n- At the 2^nd second, 2 bits of memory are allocated to stick 2. The second stick now has 8 bits of available memory.\n- At the 3^rd second, 3 bits of memory are allocated to stick 1. The first stick now has 5 bits of available memory.\n- At the 4^th second, 4 bits of memory are allocated to stick 2. The second stick now has 4 bits of available memory.\n- At the 5^th second, 5 bits of memory are allocated to stick 1. The first stick now has 0 bits of available memory.\n- At the 6^th second, the program crashes. The sticks have 0 and 4 bits available respectively.", "input": "Input: memory1 = 8, memory2 = 11", "output": "Output: [6,0,4]", "explanation": "Explanation: The memory is allocated as follows:\n- At the 1^st second, 1 bit of memory is allocated to stick 2. The second stick now has 10 bit of available memory.\n- At the 2^nd second, 2 bits of memory are allocated to stick 2. The second stick now has 8 bits of available memory.\n- At the 3^rd second, 3 bits of memory are allocated to stick 1. The first stick now has 5 bits of available memory.\n- At the 4^th second, 4 bits of memory are allocated to stick 2. The second stick now has 4 bits of available memory.\n- At the 5^th second, 5 bits of memory are allocated to stick 1. The first stick now has 0 bits of available memory.\n- At the 6^th second, the program crashes. The sticks have 0 and 4 bits available respectively."}], "constraints": "Constraints:\n0 <= memory1, memory2 <= 2^31 - 1", "notes": ""}, "1856": {"label": "Medium", "title": "Maximum Subarray Min-Product", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.35100000000000003, "total_accepted": 10800.0, "total_submissions": 30700.0, "testcase_example": "'[1,2,3,2]'", "body": "The min-product of an array is equal to the minimum value in the array multiplied by the array's sum.\nFor example, the array [3,2,5] (minimum value is 2) has a min-product of 2 * (3+2+5) = 2 * 10 = 20.\nGiven an array of integers nums, return the maximum min-product of any non-empty subarray of nums. Since the answer may be large, return it modulo 10^9 + 7.\nNote that the min-product should be maximized before performing the modulo operation. Testcases are generated such that the maximum min-product without modulo will fit in a 64-bit signed integer.\nA subarray is a contiguous part of an array.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,2,3,2]\nOutput: 14\nExplanation: The maximum min-product is achieved with the subarray [2,3,2] (minimum value is 2).\n2 * (2+3+2) = 2 * 7 = 14.", "input": "Input: nums = [1,2,3,2]", "output": "Output: 14", "explanation": "Explanation: The maximum min-product is achieved with the subarray [2,3,2] (minimum value is 2).\n2 * (2+3+2) = 2 * 7 = 14."}, {"full_text": "Example 2:\nInput: nums = [2,3,3,1,2]\nOutput: 18\nExplanation: The maximum min-product is achieved with the subarray [3,3] (minimum value is 3).\n3 * (3+3) = 3 * 6 = 18.", "input": "Input: nums = [2,3,3,1,2]", "output": "Output: 18", "explanation": "Explanation: The maximum min-product is achieved with the subarray [3,3] (minimum value is 3).\n3 * (3+3) = 3 * 6 = 18."}, {"full_text": "Example 3:\nInput: nums = [3,1,5,6,4,2]\nOutput: 60\nExplanation: The maximum min-product is achieved with the subarray [5,6,4] (minimum value is 4).\n4 * (5+6+4) = 4 * 15 = 60.", "input": "Input: nums = [3,1,5,6,4,2]", "output": "Output: 60", "explanation": "Explanation: The maximum min-product is achieved with the subarray [5,6,4] (minimum value is 4).\n4 * (5+6+4) = 4 * 15 = 60."}], "constraints": "Constraints:\n1 <= nums.length <= 10^5\n1 <= nums[i] <= 10^7", "notes": ""}, "1855": {"label": "Medium", "title": "Maximum Distance Between a Pair of Values", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4879, "total_accepted": 18400.0, "total_submissions": 37700.0, "testcase_example": "'[55,30,5,4,2]\\n[100,20,10,10,5]'", "body": "You are given two non-increasing 0-indexed integer arrays nums1\u200b\u200b\u200b\u200b\u200b\u200b and nums2\u200b\u200b\u200b\u200b\u200b\u200b.\nA pair of indices (i, j), where 0 <= i < nums1.length and 0 <= j < nums2.length, is valid if both i <= j and nums1[i] <= nums2[j]. The distance of the pair is j - i\u200b\u200b\u200b\u200b.\nReturn the maximum distance of any valid pair (i, j). If there are no valid pairs, return 0.\nAn array arr is non-increasing if arr[i-1] >= arr[i] for every 1 <= i < arr.length.", "examples": [{"full_text": "Example 1:\nInput: nums1 = [55,30,5,4,2], nums2 = [100,20,10,10,5]\nOutput: 2\nExplanation: The valid pairs are (0,0), (2,2), (2,3), (2,4), (3,3), (3,4), and (4,4).\nThe maximum distance is 2 with pair (2,4).", "input": "Input: nums1 = [55,30,5,4,2], nums2 = [100,20,10,10,5]", "output": "Output: 2", "explanation": "Explanation: The valid pairs are (0,0), (2,2), (2,3), (2,4), (3,3), (3,4), and (4,4).\nThe maximum distance is 2 with pair (2,4)."}, {"full_text": "Example 2:\nInput: nums1 = [2,2,2], nums2 = [10,10,1]\nOutput: 1\nExplanation: The valid pairs are (0,0), (0,1), and (1,1).\nThe maximum distance is 1 with pair (0,1).", "input": "Input: nums1 = [2,2,2], nums2 = [10,10,1]", "output": "Output: 1", "explanation": "Explanation: The valid pairs are (0,0), (0,1), and (1,1).\nThe maximum distance is 1 with pair (0,1)."}, {"full_text": "Example 3:\nInput: nums1 = [30,29,19,5], nums2 = [25,25,25,25,25]\nOutput: 2\nExplanation: The valid pairs are (2,2), (2,3), (2,4), (3,3), and (3,4).\nThe maximum distance is 2 with pair (2,4).", "input": "Input: nums1 = [30,29,19,5], nums2 = [25,25,25,25,25]", "output": "Output: 2", "explanation": "Explanation: The valid pairs are (2,2), (2,3), (2,4), (3,3), and (3,4).\nThe maximum distance is 2 with pair (2,4)."}], "constraints": "Constraints:\n1 <= nums1.length, nums2.length <= 10^5\n1 <= nums1[i], nums2[j] <= 10^5\nBoth nums1 and nums2 are non-increasing.", "notes": ""}, "1850": {"label": "Medium", "title": "Minimum Adjacent Swaps to Reach the Kth Smallest Number", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7273000000000001, "total_accepted": 13000.0, "total_submissions": 17900.0, "testcase_example": "'\"5489355142\"\\n4'", "body": "You are given a string num, representing a large integer, and an integer k.\nWe call some integer wonderful if it is a permutation of the digits in num and is greater in value than num. There can be many wonderful integers. However, we only care about the smallest-valued ones.\nFor example, when num = \"5489355142\":\n\nThe 1^st smallest wonderful integer is \"5489355214\".\nThe 2^nd smallest wonderful integer is \"5489355241\".\nThe 3^rd smallest wonderful integer is \"5489355412\".\nThe 4^th smallest wonderful integer is \"5489355421\".\n\n\nReturn the minimum number of adjacent digit swaps that needs to be applied to num to reach the k^th smallest wonderful integer.\nThe tests are generated in such a way that k^th\nsmallest wonderful integer exists.", "examples": [{"full_text": "Example 1:\nInput: num = \"5489355142\", k = 4\nOutput: 2\nExplanation: The 4^th smallest wonderful number is \"5489355421\". To get this number:\n- Swap index 7 with index 8: \"5489355142\" -> \"5489355412\"\n- Swap index 8 with index 9: \"5489355412\" -> \"5489355421\"", "input": "Input: num = \"5489355142\", k = 4", "output": "Output: 2", "explanation": "Explanation: The 4^th smallest wonderful number is \"5489355421\". To get this number:\n- Swap index 7 with index 8: \"5489355142\" -> \"5489355412\"\n- Swap index 8 with index 9: \"5489355412\" -> \"5489355421\""}, {"full_text": "Example 2:\nInput: num = \"11112\", k = 4\nOutput: 4\nExplanation: The 4^th smallest wonderful number is \"21111\". To get this number:\n- Swap index 3 with index 4: \"11112\" -> \"11121\"\n- Swap index 2 with index 3: \"11121\" -> \"11211\"\n- Swap index 1 with index 2: \"11211\" -> \"12111\"\n- Swap index 0 with index 1: \"12111\" -> \"21111\"", "input": "Input: num = \"11112\", k = 4", "output": "Output: 4", "explanation": "Explanation: The 4^th smallest wonderful number is \"21111\". To get this number:\n- Swap index 3 with index 4: \"11112\" -> \"11121\"\n- Swap index 2 with index 3: \"11121\" -> \"11211\"\n- Swap index 1 with index 2: \"11211\" -> \"12111\"\n- Swap index 0 with index 1: \"12111\" -> \"21111\""}, {"full_text": "Example 3:\nInput: num = \"00123\", k = 1\nOutput: 1\nExplanation: The 1^st smallest wonderful number is \"00132\". To get this number:\n- Swap index 3 with index 4: \"00123\" -> \"00132\"", "input": "Input: num = \"00123\", k = 1", "output": "Output: 1", "explanation": "Explanation: The 1^st smallest wonderful number is \"00132\". To get this number:\n- Swap index 3 with index 4: \"00123\" -> \"00132\""}], "constraints": "Constraints:\n2 <= num.length <= 1000\n1 <= k <= 1000\nnum only consists of digits.", "notes": ""}, "1849": {"label": "Medium", "title": "Splitting a String Into Descending Consecutive Values", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3064, "total_accepted": 13000.0, "total_submissions": 42300.0, "testcase_example": "'\"1234\"'", "body": "You are given a string s that consists of only digits.\nCheck if we can split s into two or more non-empty substrings such that the numerical values of the substrings are in descending order and the difference between numerical values of every two adjacent substrings is equal to 1.\nFor example, the string s = \"0090089\" can be split into [\"0090\", \"089\"] with numerical values [90,89]. The values are in descending order and adjacent values differ by 1, so this way is valid.\nAnother example, the string s = \"001\" can be split into [\"0\", \"01\"], [\"00\", \"1\"], or [\"0\", \"0\", \"1\"]. However all the ways are invalid because they have numerical values [0,1], [0,1], and [0,0,1] respectively, all of which are not in descending order.\nReturn true if it is possible to split s\u200b\u200b\u200b\u200b\u200b\u200b as described above, or false otherwise.\nA substring is a contiguous sequence of characters in a string.", "examples": [{"full_text": "Example 1:\nInput: s = \"1234\"\nOutput: false\nExplanation: There is no valid way to split s.", "input": "Input: s = \"1234\"", "output": "Output: false", "explanation": "Explanation: There is no valid way to split s."}, {"full_text": "Example 2:\nInput: s = \"050043\"\nOutput: true\nExplanation: s can be split into [\"05\", \"004\", \"3\"] with numerical values [5,4,3].\nThe values are in descending order with adjacent values differing by 1.", "input": "Input: s = \"050043\"", "output": "Output: true", "explanation": "Explanation: s can be split into [\"05\", \"004\", \"3\"] with numerical values [5,4,3].\nThe values are in descending order with adjacent values differing by 1."}, {"full_text": "Example 3:\nInput: s = \"9080701\"\nOutput: false\nExplanation: There is no valid way to split s.", "input": "Input: s = \"9080701\"", "output": "Output: false", "explanation": "Explanation: There is no valid way to split s."}], "constraints": "Constraints:\n1 <= s.length <= 20\ns only consists of digits.", "notes": ""}, "1846": {"label": "Medium", "title": "Maximum Element After Decreasing and Rearranging", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5711999999999999, "total_accepted": 12500.0, "total_submissions": 21800.0, "testcase_example": "'[2,2,1,2,1]'", "body": "You are given an array of positive integers arr. Perform some operations (possibly none) on arr so that it satisfies these conditions:\nThe value of the first element in arr must be 1.\nThe absolute difference between any 2 adjacent elements must be less than or equal to 1. In other words, abs(arr[i] - arr[i - 1]) <= 1 for each i where 1 <= i < arr.length (0-indexed). abs(x) is the absolute value of x.\nThere are 2 types of operations that you can perform any number of times:\nDecrease the value of any element of arr to a smaller positive integer.\nRearrange the elements of arr to be in any order.\nReturn the maximum possible value of an element in arr after performing the operations to satisfy the conditions.", "examples": [{"full_text": "Example 1:\nInput: arr = [2,2,1,2,1]\nOutput: 2\nExplanation:\nWe can satisfy the conditions by rearranging arr so it becomes [1,2,2,2,1].\nThe largest element in arr is 2.", "input": "Input: arr = [2,2,1,2,1]", "output": "Output: 2", "explanation": "Explanation:\nWe can satisfy the conditions by rearranging arr so it becomes [1,2,2,2,1].\nThe largest element in arr is 2."}, {"full_text": "Example 2:\nInput: arr = [100,1,1000]\nOutput: 3\nExplanation:\nOne possible way to satisfy the conditions is by doing the following:\n1. Rearrange arr so it becomes [1,100,1000].\n2. Decrease the value of the second element to 2.\n3. Decrease the value of the third element to 3.\nNow arr = [1,2,3], which satisfies the conditions.\nThe largest element in arr is 3.", "input": "Input: arr = [100,1,1000]", "output": "Output: 3", "explanation": "Explanation:\nOne possible way to satisfy the conditions is by doing the following:\n1. Rearrange arr so it becomes [1,100,1000].\n2. Decrease the value of the second element to 2.\n3. Decrease the value of the third element to 3.\nNow arr = [1,2,3], which satisfies the conditions.\nThe largest element in arr is 3."}, {"full_text": "Example 3:\nInput: arr = [1,2,3,4,5]\nOutput: 5\nExplanation: The array already satisfies the conditions, and the largest element is 5.", "input": "Input: arr = [1,2,3,4,5]", "output": "Output: 5", "explanation": "Explanation: The array already satisfies the conditions, and the largest element is 5."}], "constraints": "Constraints:\n1 <= arr.length <= 10^5\n1 <= arr[i] <= 10^9", "notes": ""}, "1845": {"label": "Medium", "title": "Seat Reservation Manager", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5972, "total_accepted": 15700.0, "total_submissions": 26300.0, "testcase_example": "'[\"SeatManager\",\"reserve\",\"reserve\",\"unreserve\",\"reserve\",\"reserve\",\"reserve\",\"reserve\",\"unreserve\"]\\n' +\n  '[[5],[],[],[2],[],[],[],[],[5]]'", "body": "Design a system that manages the reservation state of n seats that are numbered from 1 to n.\nImplement the SeatManager class:\nSeatManager(int n) Initializes a SeatManager object that will manage n seats numbered from 1 to n. All seats are initially available.\nint reserve() Fetches the smallest-numbered unreserved seat, reserves it, and returns its number.\nvoid unreserve(int seatNumber) Unreserves the seat with the given seatNumber.", "examples": [{"full_text": "Example 1:\nInput\n[\"SeatManager\", \"reserve\", \"reserve\", \"unreserve\", \"reserve\", \"reserve\", \"reserve\", \"reserve\", \"unreserve\"]\n[[5], [], [], [2], [], [], [], [], [5]]\nOutput\n[null, 1, 2, null, 2, 3, 4, 5, null]\nExplanation\nSeatManager seatManager = new SeatManager(5); // Initializes a SeatManager with 5 seats.\nseatManager.reserve(); // All seats are available, so return the lowest numbered seat, which is 1.\nseatManager.reserve(); // The available seats are [2,3,4,5], so return the lowest of them, which is 2.\nseatManager.unreserve(2); // Unreserve seat 2, so now the available seats are [2,3,4,5].\nseatManager.reserve(); // The available seats are [2,3,4,5], so return the lowest of them, which is 2.\nseatManager.reserve(); // The available seats are [3,4,5], so return the lowest of them, which is 3.\nseatManager.reserve(); // The available seats are [4,5], so return the lowest of them, which is 4.\nseatManager.reserve(); // The only available seat is seat 5, so return 5.\nseatManager.unreserve(5); // Unreserve seat 5, so now the available seats are [5].", "input": "Input\n[\"SeatManager\", \"reserve\", \"reserve\", \"unreserve\", \"reserve\", \"reserve\", \"reserve\", \"reserve\", \"unreserve\"]\n[[5], [], [], [2], [], [], [], [], [5]]", "output": "Output\n[null, 1, 2, null, 2, 3, 4, 5, null]", "explanation": "Explanation\nSeatManager seatManager = new SeatManager(5); // Initializes a SeatManager with 5 seats.\nseatManager.reserve(); // All seats are available, so return the lowest numbered seat, which is 1.\nseatManager.reserve(); // The available seats are [2,3,4,5], so return the lowest of them, which is 2.\nseatManager.unreserve(2); // Unreserve seat 2, so now the available seats are [2,3,4,5].\nseatManager.reserve(); // The available seats are [2,3,4,5], so return the lowest of them, which is 2.\nseatManager.reserve(); // The available seats are [3,4,5], so return the lowest of them, which is 3.\nseatManager.reserve(); // The available seats are [4,5], so return the lowest of them, which is 4.\nseatManager.reserve(); // The only available seat is seat 5, so return 5.\nseatManager.unreserve(5); // Unreserve seat 5, so now the available seats are [5]."}], "constraints": "Constraints:\n1 <= n <= 10^5\n1 <= seatNumber <= n\nFor each call to reserve, it is guaranteed that there will be at least one unreserved seat.\nFor each call to unreserve, it is guaranteed that seatNumber will be reserved.\nAt most 10^5 calls in total will be made to reserve and unreserve.", "notes": ""}, "1839": {"label": "Medium", "title": "Longest Substring Of All Vowels in Order", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.47850000000000004, "total_accepted": 17000.0, "total_submissions": 35500.0, "testcase_example": "'\"aeiaaioaaaaeiiiiouuuooaauuaeiu\"'", "body": "A string is considered beautiful if it satisfies the following conditions:\nEach of the 5 English vowels ('a', 'e', 'i', 'o', 'u') must appear at least once in it.\nThe letters must be sorted in alphabetical order (i.e. all 'a's before 'e's, all 'e's before 'i's, etc.).\nFor example, strings \"aeiou\" and \"aaaaaaeiiiioou\" are considered beautiful, but \"uaeio\", \"aeoiu\", and \"aaaeeeooo\" are not beautiful.\nGiven a string word consisting of English vowels, return the length of the longest beautiful substring of word. If no such substring exists, return 0.\nA substring is a contiguous sequence of characters in a string.", "examples": [{"full_text": "Example 1:\nInput: word = \"aeiaaioaaaaeiiiiouuuooaauuaeiu\"\nOutput: 13\nExplanation: The longest beautiful substring in word is \"aaaaeiiiiouuu\" of length 13.", "input": "Input: word = \"aeiaaioaaaaeiiiiouuuooaauuaeiu\"", "output": "Output: 13", "explanation": "Explanation: The longest beautiful substring in word is \"aaaaeiiiiouuu\" of length 13."}, {"full_text": "Example 2:\nInput: word = \"aeeeiiiioooauuuaeiou\"\nOutput: 5\nExplanation: The longest beautiful substring in word is \"aeiou\" of length 5.", "input": "Input: word = \"aeeeiiiioooauuuaeiou\"", "output": "Output: 5", "explanation": "Explanation: The longest beautiful substring in word is \"aeiou\" of length 5."}, {"full_text": "Example 3:\nInput: word = \"a\"\nOutput: 0\nExplanation: There is no beautiful substring, so return 0.", "input": "Input: word = \"a\"", "output": "Output: 0", "explanation": "Explanation: There is no beautiful substring, so return 0."}], "constraints": "Constraints:\n1 <= word.length <= 5 * 10^5\nword consists of characters 'a', 'e', 'i', 'o', and 'u'.", "notes": ""}, "1838": {"label": "Medium", "title": "Frequency of the Most Frequent Element", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3608, "total_accepted": 18300.0, "total_submissions": 50700.0, "testcase_example": "'[1,2,4]\\n5'", "body": "The frequency of an element is the number of times it occurs in an array.\nYou are given an integer array nums and an integer k. In one operation, you can choose an index of nums and increment the element at that index by 1.\nReturn the maximum possible frequency of an element after performing at most k operations.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,2,4], k = 5\nOutput: 3\nExplanation: Increment the first element three times and the second element two times to make nums = [4,4,4].\n4 has a frequency of 3.", "input": "Input: nums = [1,2,4], k = 5", "output": "Output: 3", "explanation": "Explanation: Increment the first element three times and the second element two times to make nums = [4,4,4].\n4 has a frequency of 3."}, {"full_text": "Example 2:\nInput: nums = [1,4,8,13], k = 5\nOutput: 2\nExplanation: There are multiple optimal solutions:\n- Increment the first element three times to make nums = [4,4,8,13]. 4 has a frequency of 2.\n- Increment the second element four times to make nums = [1,8,8,13]. 8 has a frequency of 2.\n- Increment the third element five times to make nums = [1,4,13,13]. 13 has a frequency of 2.", "input": "Input: nums = [1,4,8,13], k = 5", "output": "Output: 2", "explanation": "Explanation: There are multiple optimal solutions:\n- Increment the first element three times to make nums = [4,4,8,13]. 4 has a frequency of 2.\n- Increment the second element four times to make nums = [1,8,8,13]. 8 has a frequency of 2.\n- Increment the third element five times to make nums = [1,4,13,13]. 13 has a frequency of 2."}, {"full_text": "Example 3:\nInput: nums = [3,9,6], k = 2\nOutput: 1", "input": "Input: nums = [3,9,6], k = 2", "output": "Output: 1", "explanation": ""}], "constraints": "Constraints:\n1 <= nums.length <= 10^5\n1 <= nums[i] <= 10^5\n1 <= k <= 10^5", "notes": ""}, "1834": {"label": "Medium", "title": "Single-Threaded CPU", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.40149999999999997, "total_accepted": 28600.0, "total_submissions": 71300.0, "testcase_example": "'[[1,2],[2,4],[3,2],[4,1]]'", "body": "You are given n\u200b\u200b\u200b\u200b\u200b\u200b tasks labeled from 0 to n - 1 represented by a 2D integer array tasks, where tasks[i] = [enqueueTimei, processingTimei] means that the i^\u200b\u200b\u200b\u200b\u200b\u200bth\u200b\u200b\u200b\u200b task will be available to process at enqueueTimei and will take processingTimei to finish processing.\nYou have a single-threaded CPU that can process at most one task at a time and will act in the following way:\nIf the CPU is idle and there are no available tasks to process, the CPU remains idle.\nIf the CPU is idle and there are available tasks, the CPU will choose the one with the shortest processing time. If multiple tasks have the same shortest processing time, it will choose the task with the smallest index.\nOnce a task is started, the CPU will process the entire task without stopping.\nThe CPU can finish a task then start a new one instantly.\nReturn the order in which the CPU will process the tasks.", "examples": [{"full_text": "Example 1:\nInput: tasks = [[1,2],[2,4],[3,2],[4,1]]\nOutput: [0,2,3,1]\nExplanation: The events go as follows:\n- At time = 1, task 0 is available to process. Available tasks = {0}.\n- Also at time = 1, the idle CPU starts processing task 0. Available tasks = {}.\n- At time = 2, task 1 is available to process. Available tasks = {1}.\n- At time = 3, task 2 is available to process. Available tasks = {1, 2}.\n- Also at time = 3, the CPU finishes task 0 and starts processing task 2 as it is the shortest. Available tasks = {1}.\n- At time = 4, task 3 is available to process. Available tasks = {1, 3}.\n- At time = 5, the CPU finishes task 2 and starts processing task 3 as it is the shortest. Available tasks = {1}.\n- At time = 6, the CPU finishes task 3 and starts processing task 1. Available tasks = {}.\n- At time = 10, the CPU finishes task 1 and becomes idle.", "input": "Input: tasks = [[1,2],[2,4],[3,2],[4,1]]", "output": "Output: [0,2,3,1]", "explanation": "Explanation: The events go as follows:\n- At time = 1, task 0 is available to process. Available tasks = {0}.\n- Also at time = 1, the idle CPU starts processing task 0. Available tasks = {}.\n- At time = 2, task 1 is available to process. Available tasks = {1}.\n- At time = 3, task 2 is available to process. Available tasks = {1, 2}.\n- Also at time = 3, the CPU finishes task 0 and starts processing task 2 as it is the shortest. Available tasks = {1}.\n- At time = 4, task 3 is available to process. Available tasks = {1, 3}.\n- At time = 5, the CPU finishes task 2 and starts processing task 3 as it is the shortest. Available tasks = {1}.\n- At time = 6, the CPU finishes task 3 and starts processing task 1. Available tasks = {}.\n- At time = 10, the CPU finishes task 1 and becomes idle."}, {"full_text": "Example 2:\nInput: tasks = [[7,10],[7,12],[7,5],[7,4],[7,2]]\nOutput: [4,3,2,0,1]\nExplanation: The events go as follows:\n- At time = 7, all the tasks become available. Available tasks = {0,1,2,3,4}.\n- Also at time = 7, the idle CPU starts processing task 4. Available tasks = {0,1,2,3}.\n- At time = 9, the CPU finishes task 4 and starts processing task 3. Available tasks = {0,1,2}.\n- At time = 13, the CPU finishes task 3 and starts processing task 2. Available tasks = {0,1}.\n- At time = 18, the CPU finishes task 2 and starts processing task 0. Available tasks = {1}.\n- At time = 28, the CPU finishes task 0 and starts processing task 1. Available tasks = {}.\n- At time = 40, the CPU finishes task 1 and becomes idle.", "input": "Input: tasks = [[7,10],[7,12],[7,5],[7,4],[7,2]]", "output": "Output: [4,3,2,0,1]", "explanation": "Explanation: The events go as follows:\n- At time = 7, all the tasks become available. Available tasks = {0,1,2,3,4}.\n- Also at time = 7, the idle CPU starts processing task 4. Available tasks = {0,1,2,3}.\n- At time = 9, the CPU finishes task 4 and starts processing task 3. Available tasks = {0,1,2}.\n- At time = 13, the CPU finishes task 3 and starts processing task 2. Available tasks = {0,1}.\n- At time = 18, the CPU finishes task 2 and starts processing task 0. Available tasks = {1}.\n- At time = 28, the CPU finishes task 0 and starts processing task 1. Available tasks = {}.\n- At time = 40, the CPU finishes task 1 and becomes idle."}], "constraints": "Constraints:\ntasks.length == n\n1 <= n <= 10^5\n1 <= enqueueTimei, processingTimei <= 10^9", "notes": ""}, "1833": {"label": "Medium", "title": "Maximum Ice Cream Bars", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6461, "total_accepted": 29700.0, "total_submissions": 45900.0, "testcase_example": "'[1,3,2,4,1]\\n7'", "body": "It is a sweltering summer day, and a boy wants to buy some ice cream bars.\nAt the store, there are n ice cream bars. You are given an array costs of length n, where costs[i] is the price of the i^th ice cream bar in coins. The boy initially has coins coins to spend, and he wants to buy as many ice cream bars as possible.\nReturn the maximum number of ice cream bars the boy can buy with coins coins.\nNote: The boy can buy the ice cream bars in any order.", "examples": [{"full_text": "Example 1:\nInput: costs = [1,3,2,4,1], coins = 7\nOutput: 4\nExplanation: The boy can buy ice cream bars at indices 0,1,2,4 for a total price of 1 + 3 + 2 + 1 = 7.", "input": "Input: costs = [1,3,2,4,1], coins = 7", "output": "Output: 4", "explanation": "Explanation: The boy can buy ice cream bars at indices 0,1,2,4 for a total price of 1 + 3 + 2 + 1 = 7."}, {"full_text": "Example 2:\nInput: costs = [10,6,8,7,7,8], coins = 5\nOutput: 0\nExplanation: The boy cannot afford any of the ice cream bars.", "input": "Input: costs = [10,6,8,7,7,8], coins = 5", "output": "Output: 0", "explanation": "Explanation: The boy cannot afford any of the ice cream bars."}, {"full_text": "Example 3:\nInput: costs = [1,6,3,1,2,5], coins = 20\nOutput: 6\nExplanation: The boy can buy all the ice cream bars for a total price of 1 + 6 + 3 + 1 + 2 + 5 = 18.", "input": "Input: costs = [1,6,3,1,2,5], coins = 20", "output": "Output: 6", "explanation": "Explanation: The boy can buy all the ice cream bars for a total price of 1 + 6 + 3 + 1 + 2 + 5 = 18."}], "constraints": "Constraints:\ncosts.length == n\n1 <= n <= 10^5\n1 <= costs[i] <= 10^5\n1 <= coins <= 10^8", "notes": ""}, "1829": {"label": "Medium", "title": "Maximum XOR for Each Query", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7587999999999999, "total_accepted": 14100.0, "total_submissions": 18600.0, "testcase_example": "'[0,1,1,3]\\n2'", "body": "You are given a sorted array nums of n non-negative integers and an integer maximumBit. You want to perform the following query n times:\nFind a non-negative integer k < 2^maximumBit such that nums[0] XOR nums[1] XOR ... XOR nums[nums.length-1] XOR k is maximized. k is the answer to the i^th query.\nRemove the last element from the current array nums.\nReturn an array answer, where answer[i] is the answer to the i^th query.", "examples": [{"full_text": "Example 1:\nInput: nums = [0,1,1,3], maximumBit = 2\nOutput: [0,3,2,3]\nExplanation: The queries are answered as follows:\n1^st query: nums = [0,1,1,3], k = 0 since 0 XOR 1 XOR 1 XOR 3 XOR 0 = 3.\n2^nd query: nums = [0,1,1], k = 3 since 0 XOR 1 XOR 1 XOR 3 = 3.\n3^rd query: nums = [0,1], k = 2 since 0 XOR 1 XOR 2 = 3.\n4^th query: nums = [0], k = 3 since 0 XOR 3 = 3.", "input": "Input: nums = [0,1,1,3], maximumBit = 2", "output": "Output: [0,3,2,3]", "explanation": "Explanation: The queries are answered as follows:\n1^st query: nums = [0,1,1,3], k = 0 since 0 XOR 1 XOR 1 XOR 3 XOR 0 = 3.\n2^nd query: nums = [0,1,1], k = 3 since 0 XOR 1 XOR 1 XOR 3 = 3.\n3^rd query: nums = [0,1], k = 2 since 0 XOR 1 XOR 2 = 3.\n4^th query: nums = [0], k = 3 since 0 XOR 3 = 3."}, {"full_text": "Example 2:\nInput: nums = [2,3,4,7], maximumBit = 3\nOutput: [5,2,6,5]\nExplanation: The queries are answered as follows:\n1^st query: nums = [2,3,4,7], k = 5 since 2 XOR 3 XOR 4 XOR 7 XOR 5 = 7.\n2^nd query: nums = [2,3,4], k = 2 since 2 XOR 3 XOR 4 XOR 2 = 7.\n3^rd query: nums = [2,3], k = 6 since 2 XOR 3 XOR 6 = 7.\n4^th query: nums = [2], k = 5 since 2 XOR 5 = 7.", "input": "Input: nums = [2,3,4,7], maximumBit = 3", "output": "Output: [5,2,6,5]", "explanation": "Explanation: The queries are answered as follows:\n1^st query: nums = [2,3,4,7], k = 5 since 2 XOR 3 XOR 4 XOR 7 XOR 5 = 7.\n2^nd query: nums = [2,3,4], k = 2 since 2 XOR 3 XOR 4 XOR 2 = 7.\n3^rd query: nums = [2,3], k = 6 since 2 XOR 3 XOR 6 = 7.\n4^th query: nums = [2], k = 5 since 2 XOR 5 = 7."}, {"full_text": "Example 3:\nInput: nums = [0,1,2,2,5,7], maximumBit = 3\nOutput: [4,3,6,4,6,7]", "input": "Input: nums = [0,1,2,2,5,7], maximumBit = 3", "output": "Output: [4,3,6,4,6,7]", "explanation": ""}], "constraints": "Constraints:\nnums.length == n\n1 <= n <= 10^5\n1 <= maximumBit <= 20\n0 <= nums[i] < 2^maximumBit\nnums\u200b\u200b\u200b is sorted in ascending order.", "notes": ""}, "1828": {"label": "Medium", "title": "Queries on Number of Points Inside a Circle", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.8656, "total_accepted": 34200.0, "total_submissions": 39500.0, "testcase_example": "'[[1,3],[3,3],[5,3],[2,2]]\\n[[2,3,1],[4,3,1],[1,1,2]]'", "body": "You are given an array points where points[i] = [xi, yi] is the coordinates of the i^th point on a 2D plane. Multiple points can have the same coordinates.\nYou are also given an array queries where queries[j] = [xj, yj, rj] describes a circle centered at (xj, yj) with a radius of rj.\nFor each query queries[j], compute the number of points inside the j^th circle. Points on the border of the circle are considered inside.\nReturn an array answer, where answer[j] is the answer to the j^th query.", "examples": [{"full_text": "Example 1:\nInput: points = [[1,3],[3,3],[5,3],[2,2]], queries = [[2,3,1],[4,3,1],[1,1,2]]\nOutput: [3,2,2]\nExplanation: The points and circles are shown above.\nqueries[0] is the green circle, queries[1] is the red circle, and queries[2] is the blue circle.", "input": "Input: points = [[1,3],[3,3],[5,3],[2,2]], queries = [[2,3,1],[4,3,1],[1,1,2]]", "output": "Output: [3,2,2]", "explanation": "Explanation: The points and circles are shown above.\nqueries[0] is the green circle, queries[1] is the red circle, and queries[2] is the blue circle."}, {"full_text": "Example 2:\nInput: points = [[1,1],[2,2],[3,3],[4,4],[5,5]], queries = [[1,2,2],[2,2,2],[4,3,2],[4,3,3]]\nOutput: [2,3,2,4]\nExplanation: The points and circles are shown above.\nqueries[0] is green, queries[1] is red, queries[2] is blue, and queries[3] is purple.", "input": "Input: points = [[1,1],[2,2],[3,3],[4,4],[5,5]], queries = [[1,2,2],[2,2,2],[4,3,2],[4,3,3]]", "output": "Output: [2,3,2,4]", "explanation": "Explanation: The points and circles are shown above.\nqueries[0] is green, queries[1] is red, queries[2] is blue, and queries[3] is purple."}], "constraints": "Constraints:\n1 <= points.length <= 500\npoints[i].length == 2\n0 <= x\u200b\u200b\u200b\u200b\u200b\u200bi, y\u200b\u200b\u200b\u200b\u200b\u200bi <= 500\n1 <= queries.length <= 500\nqueries[j].length == 3\n0 <= xj, yj <= 500\n1 <= rj <= 500\nAll coordinates are integers.\nFollow up: Could you find the answer for each query in better complexity than O(n)?", "notes": ""}, "1824": {"label": "Medium", "title": "Minimum Sideway Jumps", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4917, "total_accepted": 15200.0, "total_submissions": 31000.0, "testcase_example": "'[0,1,2,3,0]'", "body": "There is a 3 lane road of length n that consists of n + 1 points labeled from 0 to n. A frog starts at point 0 in the second lane and wants to jump to point n. However, there could be obstacles along the way.\nYou are given an array obstacles of length n + 1 where each obstacles[i] (ranging from 0 to 3) describes an obstacle on the lane obstacles[i] at point i. If obstacles[i] == 0, there are no obstacles at point i. There will be at most one obstacle in the 3 lanes at each point.\nFor example, if obstacles[2] == 1, then there is an obstacle on lane 1 at point 2.\nThe frog can only travel from point i to point i + 1 on the same lane if there is not an obstacle on the lane at point i + 1. To avoid obstacles, the frog can also perform a side jump to jump to another lane (even if they are not adjacent) at the same point if there is no obstacle on the new lane.\nFor example, the frog can jump from lane 3 at point 3 to lane 1 at point 3.\nReturn the minimum number of side jumps the frog needs to reach any lane at point n starting from lane 2 at point 0.\nNote: There will be no obstacles on points 0 and n.", "examples": [{"full_text": "Example 1:\nInput: obstacles = [0,1,2,3,0]\nOutput: 2\nExplanation: The optimal solution is shown by the arrows above. There are 2 side jumps (red arrows).\nNote that the frog can jump over obstacles only when making side jumps (as shown at point 2).", "input": "Input: obstacles = [0,1,2,3,0]", "output": "Output: 2", "explanation": "Explanation: The optimal solution is shown by the arrows above. There are 2 side jumps (red arrows).\nNote that the frog can jump over obstacles only when making side jumps (as shown at point 2)."}, {"full_text": "Example 2:\nInput: obstacles = [0,1,1,3,3,0]\nOutput: 0\nExplanation: There are no obstacles on lane 2. No side jumps are required.", "input": "Input: obstacles = [0,1,1,3,3,0]", "output": "Output: 0", "explanation": "Explanation: There are no obstacles on lane 2. No side jumps are required."}, {"full_text": "Example 3:\nInput: obstacles = [0,2,1,0,3,0]\nOutput: 2\nExplanation: The optimal solution is shown by the arrows above. There are 2 side jumps.", "input": "Input: obstacles = [0,2,1,0,3,0]", "output": "Output: 2", "explanation": "Explanation: The optimal solution is shown by the arrows above. There are 2 side jumps."}], "constraints": "Constraints:\nobstacles.length == n + 1\n1 <= n <= 5 * 10^5\n0 <= obstacles[i] <= 3\nobstacles[0] == obstacles[n] == 0", "notes": ""}, "1823": {"label": "Medium", "title": "Find the Winner of the Circular Game", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7595999999999999, "total_accepted": 36100.0, "total_submissions": 47600.0, "testcase_example": "'5\\n2'", "body": "There are n friends that are playing a game. The friends are sitting in a circle and are numbered from 1 to n in clockwise order. More formally, moving clockwise from the i^th friend brings you to the (i+1)^th friend for 1 <= i < n, and moving clockwise from the n^th friend brings you to the 1^st friend.\nThe rules of the game are as follows:\nStart at the 1^st friend.\nCount the next k friends in the clockwise direction including the friend you started at. The counting wraps around the circle and may count some friends more than once.\nThe last friend you counted leaves the circle and loses the game.\nIf there is still more than one friend in the circle, go back to step 2 starting from the friend immediately clockwise of the friend who just lost and repeat.\nElse, the last friend in the circle wins the game.\nGiven the number of friends, n, and an integer k, return the winner of the game.", "examples": [{"full_text": "Example 1:\nInput: n = 5, k = 2\nOutput: 3\nExplanation: Here are the steps of the game:\n1) Start at friend 1.\n2) Count 2 friends clockwise, which are friends 1 and 2.\n3) Friend 2 leaves the circle. Next start is friend 3.\n4) Count 2 friends clockwise, which are friends 3 and 4.\n5) Friend 4 leaves the circle. Next start is friend 5.\n6) Count 2 friends clockwise, which are friends 5 and 1.\n7) Friend 1 leaves the circle. Next start is friend 3.\n8) Count 2 friends clockwise, which are friends 3 and 5.\n9) Friend 5 leaves the circle. Only friend 3 is left, so they are the winner.", "input": "Input: n = 5, k = 2", "output": "Output: 3", "explanation": "Explanation: Here are the steps of the game:\n1) Start at friend 1.\n2) Count 2 friends clockwise, which are friends 1 and 2.\n3) Friend 2 leaves the circle. Next start is friend 3.\n4) Count 2 friends clockwise, which are friends 3 and 4.\n5) Friend 4 leaves the circle. Next start is friend 5.\n6) Count 2 friends clockwise, which are friends 5 and 1.\n7) Friend 1 leaves the circle. Next start is friend 3.\n8) Count 2 friends clockwise, which are friends 3 and 5.\n9) Friend 5 leaves the circle. Only friend 3 is left, so they are the winner."}, {"full_text": "Example 2:\nInput: n = 6, k = 5\nOutput: 1\nExplanation: The friends leave in this order: 5, 4, 6, 2, 3. The winner is friend 1.", "input": "Input: n = 6, k = 5", "output": "Output: 1", "explanation": "Explanation: The friends leave in this order: 5, 4, 6, 2, 3. The winner is friend 1."}], "constraints": "Constraints:\n1 <= k <= n <= 500", "notes": ""}, "1818": {"label": "Medium", "title": "Minimum Absolute Sum Difference", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.2873, "total_accepted": 12500.0, "total_submissions": 43400.0, "testcase_example": "'[1,7,5]\\n[2,3,5]'", "body": "You are given two positive integer arrays nums1 and nums2, both of length n.\nThe absolute sum difference of arrays nums1 and nums2 is defined as the sum of |nums1[i] - nums2[i]| for each 0 <= i < n (0-indexed).\nYou can replace at most one element of nums1 with any other element in nums1 to minimize the absolute sum difference.\nReturn the minimum absolute sum difference after replacing at most one element in the array nums1. Since the answer may be large, return it modulo 10^9 + 7.\n|x| is defined as:\nx if x >= 0, or\n-x if x < 0.", "examples": [{"full_text": "Example 1:\nInput: nums1 = [1,7,5], nums2 = [2,3,5]\nOutput: 3\nExplanation: There are two possible optimal solutions:\n- Replace the second element with the first: [1,7,5] => [1,1,5], or\n- Replace the second element with the third: [1,7,5] => [1,5,5].\nBoth will yield an absolute sum difference of |1-2| + (|1-3| or |5-3|) + |5-5| = 3.", "input": "Input: nums1 = [1,7,5], nums2 = [2,3,5]", "output": "Output: 3", "explanation": "Explanation: There are two possible optimal solutions:\n- Replace the second element with the first: [1,7,5] => [1,1,5], or\n- Replace the second element with the third: [1,7,5] => [1,5,5].\nBoth will yield an absolute sum difference of |1-2| + (|1-3| or |5-3|) + |5-5| = 3."}, {"full_text": "Example 2:\nInput: nums1 = [2,4,6,8,10], nums2 = [2,4,6,8,10]\nOutput: 0\nExplanation: nums1 is equal to nums2 so no replacement is needed. This will result in an\nabsolute sum difference of 0.", "input": "Input: nums1 = [2,4,6,8,10], nums2 = [2,4,6,8,10]", "output": "Output: 0", "explanation": "Explanation: nums1 is equal to nums2 so no replacement is needed. This will result in an\nabsolute sum difference of 0."}, {"full_text": "Example 3:\nInput: nums1 = [1,10,4,4,2,7], nums2 = [9,3,5,1,7,4]\nOutput: 20\nExplanation: Replace the first element with the second: [1,10,4,4,2,7] => [10,10,4,4,2,7].\nThis yields an absolute sum difference of |10-9| + |10-3| + |4-5| + |4-1| + |2-7| + |7-4| = 20", "input": "Input: nums1 = [1,10,4,4,2,7], nums2 = [9,3,5,1,7,4]", "output": "Output: 20", "explanation": "Explanation: Replace the first element with the second: [1,10,4,4,2,7] => [10,10,4,4,2,7].\nThis yields an absolute sum difference of |10-9| + |10-3| + |4-5| + |4-1| + |2-7| + |7-4| = 20"}], "constraints": "Constraints:\nn == nums1.length\nn == nums2.length\n1 <= n <= 10^5\n1 <= nums1[i], nums2[i] <= 10^5", "notes": ""}, "1817": {"label": "Medium", "title": "Finding the Users Active Minutes", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.8034, "total_accepted": 28700.0, "total_submissions": 35700.0, "testcase_example": "'[[0,5],[1,2],[0,2],[0,5],[1,3]]\\n5'", "body": "You are given the logs for users' actions on LeetCode, and an integer k. The logs are represented by a 2D integer array logs where each logs[i] = [IDi, timei] indicates that the user with IDi performed an action at the minute timei.\nMultiple users can perform actions simultaneously, and a single user can perform multiple actions in the same minute.\nThe user active minutes (UAM) for a given user is defined as the number of unique minutes in which the user performed an action on LeetCode. A minute can only be counted once, even if multiple actions occur during it.\nYou are to calculate a 1-indexed array answer of size k such that, for each j (1 <= j <= k), answer[j] is the number of users whose UAM equals j.\nReturn the array answer as described above.", "examples": [{"full_text": "Example 1:\nInput: logs = [[0,5],[1,2],[0,2],[0,5],[1,3]], k = 5\nOutput: [0,2,0,0,0]\nExplanation:\nThe user with ID=0 performed actions at minutes 5, 2, and 5 again. Hence, they have a UAM of 2 (minute 5 is only counted once).\nThe user with ID=1 performed actions at minutes 2 and 3. Hence, they have a UAM of 2.\nSince both users have a UAM of 2, answer[2] is 2, and the remaining answer[j] values are 0.", "input": "Input: logs = [[0,5],[1,2],[0,2],[0,5],[1,3]], k = 5", "output": "Output: [0,2,0,0,0]", "explanation": "Explanation:\nThe user with ID=0 performed actions at minutes 5, 2, and 5 again. Hence, they have a UAM of 2 (minute 5 is only counted once).\nThe user with ID=1 performed actions at minutes 2 and 3. Hence, they have a UAM of 2.\nSince both users have a UAM of 2, answer[2] is 2, and the remaining answer[j] values are 0."}, {"full_text": "Example 2:\nInput: logs = [[1,1],[2,2],[2,3]], k = 4\nOutput: [1,1,0,0]\nExplanation:\nThe user with ID=1 performed a single action at minute 1. Hence, they have a UAM of 1.\nThe user with ID=2 performed actions at minutes 2 and 3. Hence, they have a UAM of 2.\nThere is one user with a UAM of 1 and one with a UAM of 2.\nHence, answer[1] = 1, answer[2] = 1, and the remaining values are 0.", "input": "Input: logs = [[1,1],[2,2],[2,3]], k = 4", "output": "Output: [1,1,0,0]", "explanation": "Explanation:\nThe user with ID=1 performed a single action at minute 1. Hence, they have a UAM of 1.\nThe user with ID=2 performed actions at minutes 2 and 3. Hence, they have a UAM of 2.\nThere is one user with a UAM of 1 and one with a UAM of 2.\nHence, answer[1] = 1, answer[2] = 1, and the remaining values are 0."}], "constraints": "Constraints:\n1 <= logs.length <= 10^4\n0 <= IDi <= 10^9\n1 <= timei <= 10^5\nk is in the range [The maximum UAM for a user, 10^5].", "notes": ""}, "1814": {"label": "Medium", "title": "Count Nice Pairs in an Array", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.40009999999999996, "total_accepted": 13200.0, "total_submissions": 33000.0, "testcase_example": "'[42,11,1,97]'", "body": "You are given an array nums that consists of non-negative integers. Let us define rev(x) as the reverse of the non-negative integer x. For example, rev(123) = 321, and rev(120) = 21. A pair of indices (i, j) is nice if it satisfies all of the following conditions:\n0 <= i < j < nums.length\nnums[i] + rev(nums[j]) == nums[j] + rev(nums[i])\nReturn the number of nice pairs of indices. Since that number can be too large, return it modulo 10^9 + 7.", "examples": [{"full_text": "Example 1:\nInput: nums = [42,11,1,97]\nOutput: 2\nExplanation: The two pairs are:\n- (0,3) : 42 + rev(97) = 42 + 79 = 121, 97 + rev(42) = 97 + 24 = 121.\n- (1,2) : 11 + rev(1) = 11 + 1 = 12, 1 + rev(11) = 1 + 11 = 12.", "input": "Input: nums = [42,11,1,97]", "output": "Output: 2", "explanation": "Explanation: The two pairs are:\n- (0,3) : 42 + rev(97) = 42 + 79 = 121, 97 + rev(42) = 97 + 24 = 121.\n- (1,2) : 11 + rev(1) = 11 + 1 = 12, 1 + rev(11) = 1 + 11 = 12."}, {"full_text": "Example 2:\nInput: nums = [13,10,35,24,76]\nOutput: 4", "input": "Input: nums = [13,10,35,24,76]", "output": "Output: 4", "explanation": ""}], "constraints": "Constraints:\n1 <= nums.length <= 10^5\n0 <= nums[i] <= 10^9", "notes": ""}, "1813": {"label": "Medium", "title": "Sentence Similarity III", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3212, "total_accepted": 8900.0, "total_submissions": 27700.0, "testcase_example": "'\"My name is Haley\"\\n\"My Haley\"'", "body": "A sentence is a list of words that are separated by a single space with no leading or trailing spaces. For example, \"Hello World\", \"HELLO\", \"hello world hello world\" are all sentences. Words consist of only uppercase and lowercase English letters.\nTwo sentences sentence1 and sentence2 are similar if it is possible to insert an arbitrary sentence (possibly empty) inside one of these sentences such that the two sentences become equal. For example, sentence1 = \"Hello my name is Jane\" and sentence2 = \"Hello Jane\" can be made equal by inserting \"my name is\" between \"Hello\" and \"Jane\" in sentence2.\nGiven two sentences sentence1 and sentence2, return true if sentence1 and sentence2 are similar. Otherwise, return false.", "examples": [{"full_text": "Example 1:\nInput: sentence1 = \"My name is Haley\", sentence2 = \"My Haley\"\nOutput: true\nExplanation: sentence2 can be turned to sentence1 by inserting \"name is\" between \"My\" and \"Haley\".", "input": "Input: sentence1 = \"My name is Haley\", sentence2 = \"My Haley\"", "output": "Output: true", "explanation": "Explanation: sentence2 can be turned to sentence1 by inserting \"name is\" between \"My\" and \"Haley\"."}, {"full_text": "Example 2:\nInput: sentence1 = \"of\", sentence2 = \"A lot of words\"\nOutput: false\nExplanation: No single sentence can be inserted inside one of the sentences to make it equal to the other.", "input": "Input: sentence1 = \"of\", sentence2 = \"A lot of words\"", "output": "Output: false", "explanation": "Explanation: No single sentence can be inserted inside one of the sentences to make it equal to the other."}, {"full_text": "Example 3:\nInput: sentence1 = \"Eating right now\", sentence2 = \"Eating\"\nOutput: true\nExplanation: sentence2 can be turned to sentence1 by inserting \"right now\" at the end of the sentence.", "input": "Input: sentence1 = \"Eating right now\", sentence2 = \"Eating\"", "output": "Output: true", "explanation": "Explanation: sentence2 can be turned to sentence1 by inserting \"right now\" at the end of the sentence."}], "constraints": "Constraints:\n1 <= sentence1.length, sentence2.length <= 100\nsentence1 and sentence2 consist of lowercase and uppercase English letters and spaces.\nThe words in sentence1 and sentence2 are separated by a single space.", "notes": ""}, "1807": {"label": "Medium", "title": "Evaluate the Bracket Pairs of a String", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6665000000000001, "total_accepted": 17500.0, "total_submissions": 26300.0, "testcase_example": "'\"(name)is(age)yearsold\"\\n[[\"name\",\"bob\"],[\"age\",\"two\"]]'", "body": "You are given a string s that contains some bracket pairs, with each pair containing a non-empty key.\nFor example, in the string \"(name)is(age)yearsold\", there are two bracket pairs that contain the keys \"name\" and \"age\".\nYou know the values of a wide range of keys. This is represented by a 2D string array knowledge where each knowledge[i] = [keyi, valuei] indicates that key keyi has a value of valuei.\nYou are tasked to evaluate all of the bracket pairs. When you evaluate a bracket pair that contains some key keyi, you will:\nReplace keyi and the bracket pair with the key's corresponding valuei.\nIf you do not know the value of the key, you will replace keyi and the bracket pair with a question mark \"?\" (without the quotation marks).\nEach key will appear at most once in your knowledge. There will not be any nested brackets in s.\nReturn the resulting string after evaluating all of the bracket pairs.", "examples": [{"full_text": "Example 1:\nInput: s = \"(name)is(age)yearsold\", knowledge = [[\"name\",\"bob\"],[\"age\",\"two\"]]\nOutput: \"bobistwoyearsold\"\nExplanation:\nThe key \"name\" has a value of \"bob\", so replace \"(name)\" with \"bob\".\nThe key \"age\" has a value of \"two\", so replace \"(age)\" with \"two\".", "input": "Input: s = \"(name)is(age)yearsold\", knowledge = [[\"name\",\"bob\"],[\"age\",\"two\"]]", "output": "Output: \"bobistwoyearsold\"", "explanation": "Explanation:\nThe key \"name\" has a value of \"bob\", so replace \"(name)\" with \"bob\".\nThe key \"age\" has a value of \"two\", so replace \"(age)\" with \"two\"."}, {"full_text": "Example 2:\nInput: s = \"hi(name)\", knowledge = [[\"a\",\"b\"]]\nOutput: \"hi?\"\nExplanation: As you do not know the value of the key \"name\", replace \"(name)\" with \"?\".", "input": "Input: s = \"hi(name)\", knowledge = [[\"a\",\"b\"]]", "output": "Output: \"hi?\"", "explanation": "Explanation: As you do not know the value of the key \"name\", replace \"(name)\" with \"?\"."}, {"full_text": "Example 3:\nInput: s = \"(a)(a)(a)aaa\", knowledge = [[\"a\",\"yes\"]]\nOutput: \"yesyesyesaaa\"\nExplanation: The same key can appear multiple times.\nThe key \"a\" has a value of \"yes\", so replace all occurrences of \"(a)\" with \"yes\".\nNotice that the \"a\"s not in a bracket pair are not evaluated.", "input": "Input: s = \"(a)(a)(a)aaa\", knowledge = [[\"a\",\"yes\"]]", "output": "Output: \"yesyesyesaaa\"", "explanation": "Explanation: The same key can appear multiple times.\nThe key \"a\" has a value of \"yes\", so replace all occurrences of \"(a)\" with \"yes\".\nNotice that the \"a\"s not in a bracket pair are not evaluated."}], "constraints": "Constraints:\n1 <= s.length <= 10^5\n0 <= knowledge.length <= 10^5\nknowledge[i].length == 2\n1 <= keyi.length, valuei.length <= 10\ns consists of lowercase English letters and round brackets '(' and ')'.\nEvery open bracket '(' in s will have a corresponding close bracket ')'.\nThe key in each bracket pair of s will be non-empty.\nThere will not be any nested bracket pairs in s.\nkeyi and valuei consist of lowercase English letters.\nEach keyi in knowledge is unique.", "notes": ""}, "1806": {"label": "Medium", "title": "Minimum Number of Operations to Reinitialize a Permutation", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7087, "total_accepted": 12500.0, "total_submissions": 17600.0, "testcase_example": "'2'", "body": "You are given an even integer n\u200b\u200b\u200b\u200b\u200b\u200b. You initially have a permutation perm of size n\u200b\u200b where perm[i] == i\u200b (0-indexed)\u200b\u200b\u200b\u200b.\nIn one operation, you will create a new array arr, and for each i:\nIf i % 2 == 0, then arr[i] = perm[i / 2].\nIf i % 2 == 1, then arr[i] = perm[n / 2 + (i - 1) / 2].\nYou will then assign arr\u200b\u200b\u200b\u200b to perm.\nReturn the minimum non-zero number of operations you need to perform on perm to return the permutation to its initial value.", "examples": [{"full_text": "Example 1:\nInput: n = 2\nOutput: 1\nExplanation: perm = [0,1] initially.\nAfter the 1^st operation, perm = [0,1]\nSo it takes only 1 operation.", "input": "Input: n = 2", "output": "Output: 1", "explanation": "Explanation: perm = [0,1] initially.\nAfter the 1^st operation, perm = [0,1]\nSo it takes only 1 operation."}, {"full_text": "Example 2:\nInput: n = 4\nOutput: 2\nExplanation: perm = [0,1,2,3] initially.\nAfter the 1^st operation, perm = [0,2,1,3]\nAfter the 2^nd operation, perm = [0,1,2,3]\nSo it takes only 2 operations.", "input": "Input: n = 4", "output": "Output: 2", "explanation": "Explanation: perm = [0,1,2,3] initially.\nAfter the 1^st operation, perm = [0,2,1,3]\nAfter the 2^nd operation, perm = [0,1,2,3]\nSo it takes only 2 operations."}, {"full_text": "Example 3:\nInput: n = 6\nOutput: 4", "input": "Input: n = 6", "output": "Output: 4", "explanation": ""}], "constraints": "Constraints:\n2 <= n <= 1000\nn\u200b\u200b\u200b\u200b\u200b\u200b is even.", "notes": ""}, "1802": {"label": "Medium", "title": "Maximum Value at a Given Index in a Bounded Array", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.2962, "total_accepted": 9300.0, "total_submissions": 31500.0, "testcase_example": "'4\\n2\\n6'", "body": "You are given three positive integers:\nn, index, and maxSum. You want to construct an array nums (0-indexed) that satisfies the following conditions:\nnums.length == n\nnums[i] is a positive integer where 0 <= i < n.\nabs(nums[i] - nums[i+1]) <= 1 where 0 <= i < n-1.\nThe sum of all the elements of nums does not exceed maxSum.\nnums[index] is maximized.\nReturn nums[index] of the constructed array.\nNote that abs(x) equals x if x >= 0, and -x otherwise.", "examples": [{"full_text": "Example 1:\nInput: n = 4, index = 2, maxSum = 6\nOutput: 2\nExplanation: nums = [1,2,2,1] is one array that satisfies all the conditions.\nThere are no arrays that satisfy all the conditions and have nums[2] == 3, so 2 is the maximum nums[2].", "input": "Input: n = 4, index = 2, maxSum = 6", "output": "Output: 2", "explanation": "Explanation: nums = [1,2,2,1] is one array that satisfies all the conditions.\nThere are no arrays that satisfy all the conditions and have nums[2] == 3, so 2 is the maximum nums[2]."}, {"full_text": "Example 2:\nInput: n = 6, index = 1, maxSum = 10\nOutput: 3", "input": "Input: n = 6, index = 1, maxSum = 10", "output": "Output: 3", "explanation": ""}], "constraints": "Constraints:\n1 <= n <= maxSum <= 10^9\n0 <= index < n", "notes": ""}, "1801": {"label": "Medium", "title": "Number of Orders in the Backlog", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4568, "total_accepted": 10800.0, "total_submissions": 23700.0, "testcase_example": "'[[10,5,0],[15,2,1],[25,1,1],[30,4,0]]'", "body": "You are given a 2D integer array orders, where each orders[i] = [pricei, amounti, orderTypei] denotes that amounti orders have been placed of type orderTypei at the price pricei. The orderTypei is:\n0 if it is a batch of buy orders, or\n1 if it is a batch of sell orders.\nNote that orders[i] represents a batch of amounti independent orders with the same price and order type. All orders represented by orders[i] will be placed before all orders represented by orders[i+1] for all valid i.\nThere is a backlog that consists of orders that have not been executed. The backlog is initially empty. When an order is placed, the following happens:\nIf the order is a buy order, you look at the sell order with the smallest price in the backlog. If that sell order's price is smaller than or equal to the current buy order's price, they will match and be executed, and that sell order will be removed from the backlog. Else, the buy order is added to the backlog.\nVice versa, if the order is a sell order, you look at the buy order with the largest price in the backlog. If that buy order's price is larger than or equal to the current sell order's price, they will match and be executed, and that buy order will be removed from the backlog. Else, the sell order is added to the backlog.\nReturn the total amount of orders in the backlog after placing all the orders from the input. Since this number can be large, return it modulo 10^9 + 7.", "examples": [{"full_text": "Example 1:\nInput: orders = [[10,5,0],[15,2,1],[25,1,1],[30,4,0]]\nOutput: 6\nExplanation: Here is what happens with the orders:\n- 5 orders of type buy with price 10 are placed. There are no sell orders, so the 5 orders are added to the backlog.\n- 2 orders of type sell with price 15 are placed. There are no buy orders with prices larger than or equal to 15, so the 2 orders are added to the backlog.\n- 1 order of type sell with price 25 is placed. There are no buy orders with prices larger than or equal to 25 in the backlog, so this order is added to the backlog.\n- 4 orders of type buy with price 30 are placed. The first 2 orders are matched with the 2 sell orders of the least price, which is 15 and these 2 sell orders are removed from the backlog. The 3^rd order is matched with the sell order of the least price, which is 25 and this sell order is removed from the backlog. Then, there are no more sell orders in the backlog, so the 4^th order is added to the backlog.\nFinally, the backlog has 5 buy orders with price 10, and 1 buy order with price 30. So the total number of orders in the backlog is 6.", "input": "Input: orders = [[10,5,0],[15,2,1],[25,1,1],[30,4,0]]", "output": "Output: 6", "explanation": "Explanation: Here is what happens with the orders:\n- 5 orders of type buy with price 10 are placed. There are no sell orders, so the 5 orders are added to the backlog.\n- 2 orders of type sell with price 15 are placed. There are no buy orders with prices larger than or equal to 15, so the 2 orders are added to the backlog.\n- 1 order of type sell with price 25 is placed. There are no buy orders with prices larger than or equal to 25 in the backlog, so this order is added to the backlog.\n- 4 orders of type buy with price 30 are placed. The first 2 orders are matched with the 2 sell orders of the least price, which is 15 and these 2 sell orders are removed from the backlog. The 3^rd order is matched with the sell order of the least price, which is 25 and this sell order is removed from the backlog. Then, there are no more sell orders in the backlog, so the 4^th order is added to the backlog.\nFinally, the backlog has 5 buy orders with price 10, and 1 buy order with price 30. So the total number of orders in the backlog is 6."}, {"full_text": "Example 2:\nInput: orders = [[7,1000000000,1],[15,3,0],[5,999999995,0],[5,1,1]]\nOutput: 999999984\nExplanation: Here is what happens with the orders:\n- 10^9 orders of type sell with price 7 are placed. There are no buy orders, so the 10^9 orders are added to the backlog.\n- 3 orders of type buy with price 15 are placed. They are matched with the 3 sell orders with the least price which is 7, and those 3 sell orders are removed from the backlog.\n- 999999995 orders of type buy with price 5 are placed. The least price of a sell order is 7, so the 999999995 orders are added to the backlog.\n- 1 order of type sell with price 5 is placed. It is matched with the buy order of the highest price, which is 5, and that buy order is removed from the backlog.\nFinally, the backlog has (1000000000-3) sell orders with price 7, and (999999995-1) buy orders with price 5. So the total number of orders = 1999999991, which is equal to 999999984 % (10^9 + 7).", "input": "Input: orders = [[7,1000000000,1],[15,3,0],[5,999999995,0],[5,1,1]]", "output": "Output: 999999984", "explanation": "Explanation: Here is what happens with the orders:\n- 10^9 orders of type sell with price 7 are placed. There are no buy orders, so the 10^9 orders are added to the backlog.\n- 3 orders of type buy with price 15 are placed. They are matched with the 3 sell orders with the least price which is 7, and those 3 sell orders are removed from the backlog.\n- 999999995 orders of type buy with price 5 are placed. The least price of a sell order is 7, so the 999999995 orders are added to the backlog.\n- 1 order of type sell with price 5 is placed. It is matched with the buy order of the highest price, which is 5, and that buy order is removed from the backlog.\nFinally, the backlog has (1000000000-3) sell orders with price 7, and (999999995-1) buy orders with price 5. So the total number of orders = 1999999991, which is equal to 999999984 % (10^9 + 7)."}], "constraints": "Constraints:\n1 <= orders.length <= 10^5\norders[i].length == 3\n1 <= pricei, amounti <= 10^9\norderTypei is either 0 or 1.", "notes": ""}, "1798": {"label": "Medium", "title": "Maximum Number of Consecutive Values You Can Make", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5074000000000001, "total_accepted": 9000.0, "total_submissions": 17700.0, "testcase_example": "'[1,3]'", "body": "You are given an integer array coins of length n which represents the n coins that you own. The value of the i^th coin is coins[i]. You can make some value x if you can choose some of your n coins such that their values sum up to x.\nReturn the maximum number of consecutive integer values that you can make with your coins starting from and including 0.\nNote that you may have multiple coins of the same value.", "examples": [{"full_text": "Example 1:\nInput: coins = [1,3]\nOutput: 2\nExplanation: You can make the following values:\n- 0: take []\n- 1: take [1]\nYou can make 2 consecutive integer values starting from 0.", "input": "Input: coins = [1,3]", "output": "Output: 2", "explanation": "Explanation: You can make the following values:\n- 0: take []\n- 1: take [1]\nYou can make 2 consecutive integer values starting from 0."}, {"full_text": "Example 2:\nInput: coins = [1,1,1,4]\nOutput: 8\nExplanation: You can make the following values:\n- 0: take []\n- 1: take [1]\n- 2: take [1,1]\n- 3: take [1,1,1]\n- 4: take [4]\n- 5: take [4,1]\n- 6: take [4,1,1]\n- 7: take [4,1,1,1]\nYou can make 8 consecutive integer values starting from 0.", "input": "Input: coins = [1,1,1,4]", "output": "Output: 8", "explanation": "Explanation: You can make the following values:\n- 0: take []\n- 1: take [1]\n- 2: take [1,1]\n- 3: take [1,1,1]\n- 4: take [4]\n- 5: take [4,1]\n- 6: take [4,1,1]\n- 7: take [4,1,1,1]\nYou can make 8 consecutive integer values starting from 0."}, {"full_text": "Example 3:\nInput: nums = [1,4,10,3,1]\nOutput: 20", "input": "Input: nums = [1,4,10,3,1]", "output": "Output: 20", "explanation": ""}], "constraints": "Constraints:\ncoins.length == n\n1 <= n <= 4 * 10^4\n1 <= coins[i] <= 4 * 10^4", "notes": ""}, "1797": {"label": "Medium", "title": "Design Authentication Manager", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5249, "total_accepted": 9200.0, "total_submissions": 17400.0, "testcase_example": "'[\"AuthenticationManager\",\"renew\",\"generate\",\"countUnexpiredTokens\",\"generate\",\"renew\",\"renew\",\"countUnexpiredTokens\"]\\n' +\n  '[[5],[\"aaa\",1],[\"aaa\",2],[6],[\"bbb\",7],[\"aaa\",8],[\"bbb\",10],[15]]'", "body": "There is an authentication system that works with authentication tokens. For each session, the user will receive a new authentication token that will expire timeToLive seconds after the currentTime. If the token is renewed, the expiry time will be extended to expire timeToLive seconds after the (potentially different) currentTime.\nImplement the AuthenticationManager class:\nAuthenticationManager(int timeToLive) constructs the AuthenticationManager and sets the timeToLive.\ngenerate(string tokenId, int currentTime) generates a new token with the given tokenId at the given currentTime in seconds.\nrenew(string tokenId, int currentTime) renews the unexpired token with the given tokenId at the given currentTime in seconds. If there are no unexpired tokens with the given tokenId, the request is ignored, and nothing happens.\ncountUnexpiredTokens(int currentTime) returns the number of unexpired tokens at the given currentTime.\nNote that if a token expires at time t, and another action happens on time t (renew or countUnexpiredTokens), the expiration takes place before the other actions.", "examples": [{"full_text": "Example 1:\nInput\n[\"AuthenticationManager\", \"renew\", \"generate\", \"countUnexpiredTokens\", \"generate\", \"renew\", \"renew\", \"countUnexpiredTokens\"]\n[[5], [\"aaa\", 1], [\"aaa\", 2], [6], [\"bbb\", 7], [\"aaa\", 8], [\"bbb\", 10], [15]]\nOutput\n[null, null, null, 1, null, null, null, 0]\nExplanation\nAuthenticationManager authenticationManager = new AuthenticationManager(5); // Constructs the AuthenticationManager with timeToLive = 5 seconds.\nauthenticationManager.renew(\"aaa\", 1); // No token exists with tokenId \"aaa\" at time 1, so nothing happens.\nauthenticationManager.generate(\"aaa\", 2); // Generates a new token with tokenId \"aaa\" at time 2.\nauthenticationManager.countUnexpiredTokens(6); // The token with tokenId \"aaa\" is the only unexpired one at time 6, so return 1.\nauthenticationManager.generate(\"bbb\", 7); // Generates a new token with tokenId \"bbb\" at time 7.\nauthenticationManager.renew(\"aaa\", 8); // The token with tokenId \"aaa\" expired at time 7, and 8 >= 7, so at time 8 the renew request is ignored, and nothing happens.\nauthenticationManager.renew(\"bbb\", 10); // The token with tokenId \"bbb\" is unexpired at time 10, so the renew request is fulfilled and now the token will expire at time 15.\nauthenticationManager.countUnexpiredTokens(15); // The token with tokenId \"bbb\" expires at time 15, and the token with tokenId \"aaa\" expired at time 7, so currently no token is unexpired, so return 0.", "input": "Input\n[\"AuthenticationManager\", \"renew\", \"generate\", \"countUnexpiredTokens\", \"generate\", \"renew\", \"renew\", \"countUnexpiredTokens\"]\n[[5], [\"aaa\", 1], [\"aaa\", 2], [6], [\"bbb\", 7], [\"aaa\", 8], [\"bbb\", 10], [15]]", "output": "Output\n[null, null, null, 1, null, null, null, 0]", "explanation": "Explanation\nAuthenticationManager authenticationManager = new AuthenticationManager(5); // Constructs the AuthenticationManager with timeToLive = 5 seconds.\nauthenticationManager.renew(\"aaa\", 1); // No token exists with tokenId \"aaa\" at time 1, so nothing happens.\nauthenticationManager.generate(\"aaa\", 2); // Generates a new token with tokenId \"aaa\" at time 2.\nauthenticationManager.countUnexpiredTokens(6); // The token with tokenId \"aaa\" is the only unexpired one at time 6, so return 1.\nauthenticationManager.generate(\"bbb\", 7); // Generates a new token with tokenId \"bbb\" at time 7.\nauthenticationManager.renew(\"aaa\", 8); // The token with tokenId \"aaa\" expired at time 7, and 8 >= 7, so at time 8 the renew request is ignored, and nothing happens.\nauthenticationManager.renew(\"bbb\", 10); // The token with tokenId \"bbb\" is unexpired at time 10, so the renew request is fulfilled and now the token will expire at time 15.\nauthenticationManager.countUnexpiredTokens(15); // The token with tokenId \"bbb\" expires at time 15, and the token with tokenId \"aaa\" expired at time 7, so currently no token is unexpired, so return 0."}], "constraints": "Constraints:\n1 <= timeToLive <= 10^8\n1 <= currentTime <= 10^8\n1 <= tokenId.length <= 5\ntokenId consists only of lowercase letters.\nAll calls to generate will contain unique values of tokenId.\nThe values of currentTime across all the function calls will be strictly increasing.\nAt most 2000 calls will be made to all functions combined.", "notes": ""}, "1792": {"label": "Medium", "title": "Maximum Average Pass Ratio", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5013000000000001, "total_accepted": 13800.0, "total_submissions": 27500.0, "testcase_example": "'[[1,2],[3,5],[2,2]]\\n2'", "body": "There is a school that has classes of students and each class will be having a final exam. You are given a 2D integer array classes, where classes[i] = [passi, totali]. You know beforehand that in the i^th class, there are totali total students, but only passi number of students will pass the exam.\nYou are also given an integer extraStudents. There are another extraStudents brilliant students that are guaranteed to pass the exam of any class they are assigned to. You want to assign each of the extraStudents students to a class in a way that maximizes the average pass ratio across all the classes.\nThe pass ratio of a class is equal to the number of students of the class that will pass the exam divided by the total number of students of the class. The average pass ratio is the sum of pass ratios of all the classes divided by the number of the classes.\nReturn the maximum possible average pass ratio after assigning the extraStudents students. Answers within 10^-5 of the actual answer will be accepted.", "examples": [{"full_text": "Example 1:\nInput: classes = [[1,2],[3,5],[2,2]], extraStudents = 2\nOutput: 0.78333\nExplanation: You can assign the two extra students to the first class. The average pass ratio will be equal to (3/4 + 3/5 + 2/2) / 3 = 0.78333.", "input": "Input: classes = [[1,2],[3,5],[2,2]], extraStudents = 2", "output": "Output: 0.78333", "explanation": "Explanation: You can assign the two extra students to the first class. The average pass ratio will be equal to (3/4 + 3/5 + 2/2) / 3 = 0.78333."}, {"full_text": "Example 2:\nInput: classes = [[2,4],[3,9],[4,5],[2,10]], extraStudents = 4\nOutput: 0.53485", "input": "Input: classes = [[2,4],[3,9],[4,5],[2,10]], extraStudents = 4", "output": "Output: 0.53485", "explanation": ""}], "constraints": "Constraints:\n1 <= classes.length <= 10^5\nclasses[i].length == 2\n1 <= passi <= totali <= 10^5\n1 <= extraStudents <= 10^5", "notes": ""}, "1786": {"label": "Medium", "title": "Number of Restricted Paths From First to Last Node", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3796, "total_accepted": 11400.0, "total_submissions": 30100.0, "testcase_example": "'5\\n[[1,2,3],[1,3,3],[2,3,1],[1,4,2],[5,2,2],[3,5,1],[5,4,10]]'", "body": "There is an undirected weighted connected graph. You are given a positive integer n which denotes that the graph has n nodes labeled from 1 to n, and an array edges where each edges[i] = [ui, vi, weighti] denotes that there is an edge between nodes ui and vi with weight equal to weighti.\nA path from node start to node end is a sequence of nodes [z0, z1, z2, ..., zk] such that z0 = start and zk = end and there is an edge between zi and zi+1 where 0 <= i <= k-1.\nThe distance of a path is the sum of the weights on the edges of the path. Let distanceToLastNode(x) denote the shortest distance of a path between node n and node x. A restricted path is a path that also satisfies that distanceToLastNode(zi) > distanceToLastNode(zi+1) where 0 <= i <= k-1.\nReturn the number of restricted paths from node 1 to node n. Since that number may be too large, return it modulo 10^9 + 7.", "examples": [{"full_text": "Example 1:\nInput: n = 5, edges = [[1,2,3],[1,3,3],[2,3,1],[1,4,2],[5,2,2],[3,5,1],[5,4,10]]\nOutput: 3\nExplanation: Each circle contains the node number in black and its distanceToLastNode value in blue. The three restricted paths are:\n1) 1 --> 2 --> 5\n2) 1 --> 2 --> 3 --> 5\n3) 1 --> 3 --> 5", "input": "Input: n = 5, edges = [[1,2,3],[1,3,3],[2,3,1],[1,4,2],[5,2,2],[3,5,1],[5,4,10]]", "output": "Output: 3", "explanation": "Explanation: Each circle contains the node number in black and its distanceToLastNode value in blue. The three restricted paths are:\n1) 1 --> 2 --> 5\n2) 1 --> 2 --> 3 --> 5\n3) 1 --> 3 --> 5"}, {"full_text": "Example 2:\nInput: n = 7, edges = [[1,3,1],[4,1,2],[7,3,4],[2,5,3],[5,6,1],[6,7,2],[7,5,3],[2,6,4]]\nOutput: 1\nExplanation: Each circle contains the node number in black and its distanceToLastNode value in blue. The only restricted path is 1 --> 3 --> 7.", "input": "Input: n = 7, edges = [[1,3,1],[4,1,2],[7,3,4],[2,5,3],[5,6,1],[6,7,2],[7,5,3],[2,6,4]]", "output": "Output: 1", "explanation": "Explanation: Each circle contains the node number in black and its distanceToLastNode value in blue. The only restricted path is 1 --> 3 --> 7."}], "constraints": "Constraints:\n1 <= n <= 2 * 10^4\nn - 1 <= edges.length <= 4 * 10^4\nedges[i].length == 3\n1 <= ui, vi <= n\nui != vi\n1 <= weighti <= 10^5\nThere is at most one edge between any two nodes.\nThere is at least one path between any two nodes.", "notes": ""}, "1785": {"label": "Medium", "title": "Minimum Elements to Add to Form a Given Sum", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.41350000000000003, "total_accepted": 13500.0, "total_submissions": 32600.0, "testcase_example": "'[1,-1,1]\\n3\\n-4'", "body": "You are given an integer array nums and two integers limit and goal. The array nums has an interesting property that abs(nums[i]) <= limit.\nReturn the minimum number of elements you need to add to make the sum of the array equal to goal. The array must maintain its property that abs(nums[i]) <= limit.\nNote that abs(x) equals x if x >= 0, and -x otherwise.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,-1,1], limit = 3, goal = -4\nOutput: 2\nExplanation: You can add -2 and -3, then the sum of the array will be 1 - 1 + 1 - 2 - 3 = -4.", "input": "Input: nums = [1,-1,1], limit = 3, goal = -4", "output": "Output: 2", "explanation": "Explanation: You can add -2 and -3, then the sum of the array will be 1 - 1 + 1 - 2 - 3 = -4."}, {"full_text": "Example 2:\nInput: nums = [1,-10,9,1], limit = 100, goal = 0\nOutput: 1", "input": "Input: nums = [1,-10,9,1], limit = 100, goal = 0", "output": "Output: 1", "explanation": ""}], "constraints": "Constraints:\n1 <= nums.length <= 10^5\n1 <= limit <= 10^6\n-limit <= nums[i] <= limit\n-10^9 <= goal <= 10^9", "notes": ""}, "1781": {"label": "Medium", "title": "Sum of Beauty of All Substrings", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5987, "total_accepted": 12200.0, "total_submissions": 20400.0, "testcase_example": "'\"aabcb\"'", "body": "The beauty of a string is the difference in frequencies between the most frequent and least frequent characters.\nFor example, the beauty of \"abaacc\" is 3 - 1 = 2.\nGiven a string s, return the sum of beauty of all of its substrings.", "examples": [{"full_text": "Example 1:\nInput: s = \"aabcb\"\nOutput: 5\nExplanation: The substrings with non-zero beauty are [\"aab\",\"aabc\",\"aabcb\",\"abcb\",\"bcb\"], each with beauty equal to 1.", "input": "Input: s = \"aabcb\"", "output": "Output: 5", "explanation": "Explanation: The substrings with non-zero beauty are [\"aab\",\"aabc\",\"aabcb\",\"abcb\",\"bcb\"], each with beauty equal to 1."}, {"full_text": "Example 2:\nInput: s = \"aabcbaa\"\nOutput: 17", "input": "Input: s = \"aabcbaa\"", "output": "Output: 17", "explanation": ""}], "constraints": "Constraints:\n1 <= s.length <=^ 500\ns consists of only lowercase English letters.", "notes": ""}, "1780": {"label": "Medium", "title": "Check if Number is a Sum of Powers of Three", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6456999999999999, "total_accepted": 19800.0, "total_submissions": 30600.0, "testcase_example": "'12'", "body": "Given an integer n, return true if it is possible to represent n as the sum of distinct powers of three. Otherwise, return false.\nAn integer y is a power of three if there exists an integer x such that y == 3^x.", "examples": [{"full_text": "Example 1:\nInput: n = 12\nOutput: true\nExplanation: 12 = 3^1 + 3^2", "input": "Input: n = 12", "output": "Output: true", "explanation": "Explanation: 12 = 3^1 + 3^2"}, {"full_text": "Example 2:\nInput: n = 91\nOutput: true\nExplanation: 91 = 3^0 + 3^2 + 3^4", "input": "Input: n = 91", "output": "Output: true", "explanation": "Explanation: 91 = 3^0 + 3^2 + 3^4"}, {"full_text": "Example 3:\nInput: n = 21\nOutput: false", "input": "Input: n = 21", "output": "Output: false", "explanation": ""}], "constraints": "Constraints:\n1 <= n <= 10^7", "notes": ""}, "1775": {"label": "Medium", "title": "Equal Sum Arrays With Minimum Number of Operations", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5119, "total_accepted": 13600.0, "total_submissions": 26600.0, "testcase_example": "'[1,2,3,4,5,6]\\n[1,1,2,2,2,2]'", "body": "You are given two arrays of integers nums1 and nums2, possibly of different lengths. The values in the arrays are between 1 and 6, inclusive.\nIn one operation, you can change any integer's value in any of the arrays to any value between 1 and 6, inclusive.\nReturn the minimum number of operations required to make the sum of values in nums1 equal to the sum of values in nums2. Return -1\u200b\u200b\u200b\u200b\u200b if it is not possible to make the sum of the two arrays equal.", "examples": [{"full_text": "Example 1:\nInput: nums1 = [1,2,3,4,5,6], nums2 = [1,1,2,2,2,2]\nOutput: 3\nExplanation: You can make the sums of nums1 and nums2 equal with 3 operations. All indices are 0-indexed.\n- Change nums2[0] to 6. nums1 = [1,2,3,4,5,6], nums2 = [6,1,2,2,2,2].\n- Change nums1[5] to 1. nums1 = [1,2,3,4,5,1], nums2 = [6,1,2,2,2,2].\n- Change nums1[2] to 2. nums1 = [1,2,2,4,5,1], nums2 = [6,1,2,2,2,2].", "input": "Input: nums1 = [1,2,3,4,5,6], nums2 = [1,1,2,2,2,2]", "output": "Output: 3", "explanation": "Explanation: You can make the sums of nums1 and nums2 equal with 3 operations. All indices are 0-indexed.\n- Change nums2[0] to 6. nums1 = [1,2,3,4,5,6], nums2 = [6,1,2,2,2,2].\n- Change nums1[5] to 1. nums1 = [1,2,3,4,5,1], nums2 = [6,1,2,2,2,2].\n- Change nums1[2] to 2. nums1 = [1,2,2,4,5,1], nums2 = [6,1,2,2,2,2]."}, {"full_text": "Example 2:\nInput: nums1 = [1,1,1,1,1,1,1], nums2 = [6]\nOutput: -1\nExplanation: There is no way to decrease the sum of nums1 or to increase the sum of nums2 to make them equal.", "input": "Input: nums1 = [1,1,1,1,1,1,1], nums2 = [6]", "output": "Output: -1", "explanation": "Explanation: There is no way to decrease the sum of nums1 or to increase the sum of nums2 to make them equal."}, {"full_text": "Example 3:\nInput: nums1 = [6,6], nums2 = [1]\nOutput: 3\nExplanation: You can make the sums of nums1 and nums2 equal with 3 operations. All indices are 0-indexed.\n- Change nums1[0] to 2. nums1 = [2,6], nums2 = [1].\n- Change nums1[1] to 2. nums1 = [2,2], nums2 = [1].\n- Change nums2[0] to 4. nums1 = [2,2], nums2 = [4].", "input": "Input: nums1 = [6,6], nums2 = [1]", "output": "Output: 3", "explanation": "Explanation: You can make the sums of nums1 and nums2 equal with 3 operations. All indices are 0-indexed.\n- Change nums1[0] to 2. nums1 = [2,6], nums2 = [1].\n- Change nums1[1] to 2. nums1 = [2,2], nums2 = [1].\n- Change nums2[0] to 4. nums1 = [2,2], nums2 = [4]."}], "constraints": "Constraints:\n1 <= nums1.length, nums2.length <= 10^5\n1 <= nums1[i], nums2[i] <= 6", "notes": ""}, "1774": {"label": "Medium", "title": "Closest Dessert Cost", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4593, "total_accepted": 13900.0, "total_submissions": 30200.0, "testcase_example": "'[1,7]\\n[3,4]\\n10'", "body": "You would like to make dessert and are preparing to buy the ingredients. You have n ice cream base flavors and m types of toppings to choose from. You must follow these rules when making your dessert:\nThere must be exactly one ice cream base.\nYou can add one or more types of topping or have no toppings at all.\nThere are at most two of each type of topping.\nYou are given three inputs:\nbaseCosts, an integer array of length n, where each baseCosts[i] represents the price of the i^th ice cream base flavor.\ntoppingCosts, an integer array of length m, where each toppingCosts[i] is the price of one of the i^th topping.\ntarget, an integer representing your target price for dessert.\nYou want to make a dessert with a total cost as close to target as possible.\nReturn the closest possible cost of the dessert to target. If there are multiple, return the lower one.", "examples": [{"full_text": "Example 1:\nInput: baseCosts = [1,7], toppingCosts = [3,4], target = 10\nOutput: 10\nExplanation: Consider the following combination (all 0-indexed):\n- Choose base 1: cost 7\n- Take 1 of topping 0: cost 1 x 3 = 3\n- Take 0 of topping 1: cost 0 x 4 = 0\nTotal: 7 + 3 + 0 = 10.", "input": "Input: baseCosts = [1,7], toppingCosts = [3,4], target = 10", "output": "Output: 10", "explanation": "Explanation: Consider the following combination (all 0-indexed):\n- Choose base 1: cost 7\n- Take 1 of topping 0: cost 1 x 3 = 3\n- Take 0 of topping 1: cost 0 x 4 = 0\nTotal: 7 + 3 + 0 = 10."}, {"full_text": "Example 2:\nInput: baseCosts = [2,3], toppingCosts = [4,5,100], target = 18\nOutput: 17\nExplanation: Consider the following combination (all 0-indexed):\n- Choose base 1: cost 3\n- Take 1 of topping 0: cost 1 x 4 = 4\n- Take 2 of topping 1: cost 2 x 5 = 10\n- Take 0 of topping 2: cost 0 x 100 = 0\nTotal: 3 + 4 + 10 + 0 = 17. You cannot make a dessert with a total cost of 18.", "input": "Input: baseCosts = [2,3], toppingCosts = [4,5,100], target = 18", "output": "Output: 17", "explanation": "Explanation: Consider the following combination (all 0-indexed):\n- Choose base 1: cost 3\n- Take 1 of topping 0: cost 1 x 4 = 4\n- Take 2 of topping 1: cost 2 x 5 = 10\n- Take 0 of topping 2: cost 0 x 100 = 0\nTotal: 3 + 4 + 10 + 0 = 17. You cannot make a dessert with a total cost of 18."}, {"full_text": "Example 3:\nInput: baseCosts = [3,10], toppingCosts = [2,5], target = 9\nOutput: 8\nExplanation: It is possible to make desserts with cost 8 and 10. Return 8 as it is the lower cost.", "input": "Input: baseCosts = [3,10], toppingCosts = [2,5], target = 9", "output": "Output: 8", "explanation": "Explanation: It is possible to make desserts with cost 8 and 10. Return 8 as it is the lower cost."}], "constraints": "Constraints:\nn == baseCosts.length\nm == toppingCosts.length\n1 <= n, m <= 10\n1 <= baseCosts[i], toppingCosts[i] <= 10^4\n1 <= target <= 10^4", "notes": ""}, "1770": {"label": "Medium", "title": "Maximum Score from Performing Multiplication Operations", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3539, "total_accepted": 25900.0, "total_submissions": 73300.0, "testcase_example": "'[1,2,3]\\n[3,2,1]'", "body": "You are given two integer arrays nums and multipliers of size n and m respectively, where n >= m. The arrays are 1-indexed.\nYou begin with a score of 0. You want to perform exactly m operations. On the i^th operation (1-indexed), you will:\nChoose one integer x from either the start or the end of the array nums.\nAdd multipliers[i] * x to your score.\nRemove x from the array nums.\nReturn the maximum score after performing m operations.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,2,3], multipliers = [3,2,1]\nOutput: 14\nExplanation:\nAn optimal solution is as follows:\n- Choose from the end, [1,2,3], adding 3 * 3 = 9 to the score.\n- Choose from the end, [1,2], adding 2 * 2 = 4 to the score.\n- Choose from the end, [1], adding 1 * 1 = 1 to the score.\nThe total score is 9 + 4 + 1 = 14.", "input": "Input: nums = [1,2,3], multipliers = [3,2,1]", "output": "Output: 14", "explanation": "Explanation:\nAn optimal solution is as follows:\n- Choose from the end, [1,2,3], adding 3 * 3 = 9 to the score.\n- Choose from the end, [1,2], adding 2 * 2 = 4 to the score.\n- Choose from the end, [1], adding 1 * 1 = 1 to the score.\nThe total score is 9 + 4 + 1 = 14."}, {"full_text": "Example 2:\nInput: nums = [-5,-3,-3,-2,7,1], multipliers = [-10,-5,3,4,6]\nOutput: 102\nExplanation: An optimal solution is as follows:\n- Choose from the start, [-5,-3,-3,-2,7,1], adding -5 * -10 = 50 to the score.\n- Choose from the start, [-3,-3,-2,7,1], adding -3 * -5 = 15 to the score.\n- Choose from the start, [-3,-2,7,1], adding -3 * 3 = -9 to the score.\n- Choose from the end, [-2,7,1], adding 1 * 4 = 4 to the score.\n- Choose from the end, [-2,7], adding 7 * 6 = 42 to the score.\nThe total score is 50 + 15 - 9 + 4 + 42 = 102.", "input": "Input: nums = [-5,-3,-3,-2,7,1], multipliers = [-10,-5,3,4,6]", "output": "Output: 102", "explanation": "Explanation: An optimal solution is as follows:\n- Choose from the start, [-5,-3,-3,-2,7,1], adding -5 * -10 = 50 to the score.\n- Choose from the start, [-3,-3,-2,7,1], adding -3 * -5 = 15 to the score.\n- Choose from the start, [-3,-2,7,1], adding -3 * 3 = -9 to the score.\n- Choose from the end, [-2,7,1], adding 1 * 4 = 4 to the score.\n- Choose from the end, [-2,7], adding 7 * 6 = 42 to the score.\nThe total score is 50 + 15 - 9 + 4 + 42 = 102."}], "constraints": "Constraints:\nn == nums.length\nm == multipliers.length\n1 <= m <= 10^3\nm <= n <= 10^5\n-1000 <= nums[i], multipliers[i] <= 1000", "notes": ""}, "1769": {"label": "Medium", "title": "Minimum Number of Operations to Move All Balls to Each Box", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.8556999999999999, "total_accepted": 65800.0, "total_submissions": 76900.0, "testcase_example": "'\"110\"'", "body": "You have n boxes. You are given a binary string boxes of length n, where boxes[i] is '0' if the i^th box is empty, and '1' if it contains one ball.\nIn one operation, you can move one ball from a box to an adjacent box. Box i is adjacent to box j if abs(i - j) == 1. Note that after doing so, there may be more than one ball in some boxes.\nReturn an array answer of size n, where answer[i] is the minimum number of operations needed to move all the balls to the i^th box.\nEach answer[i] is calculated considering the initial state of the boxes.", "examples": [{"full_text": "Example 1:\nInput: boxes = \"110\"\nOutput: [1,1,3]\nExplanation: The answer for each box is as follows:\n1) First box: you will have to move one ball from the second box to the first box in one operation.\n2) Second box: you will have to move one ball from the first box to the second box in one operation.\n3) Third box: you will have to move one ball from the first box to the third box in two operations, and move one ball from the second box to the third box in one operation.", "input": "Input: boxes = \"110\"", "output": "Output: [1,1,3]", "explanation": "Explanation: The answer for each box is as follows:\n1) First box: you will have to move one ball from the second box to the first box in one operation.\n2) Second box: you will have to move one ball from the first box to the second box in one operation.\n3) Third box: you will have to move one ball from the first box to the third box in two operations, and move one ball from the second box to the third box in one operation."}, {"full_text": "Example 2:\nInput: boxes = \"001011\"\nOutput: [11,8,5,4,3,4]", "input": "Input: boxes = \"001011\"", "output": "Output: [11,8,5,4,3,4]", "explanation": ""}], "constraints": "Constraints:\nn == boxes.length\n1 <= n <= 2000\nboxes[i] is either '0' or '1'.", "notes": ""}, "1765": {"label": "Medium", "title": "Map of Highest Peak", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5947, "total_accepted": 15100.0, "total_submissions": 25400.0, "testcase_example": "'[[0,1],[0,0]]'", "body": "You are given an integer matrix isWater of size m x n that represents a map of land and water cells.\nIf isWater[i][j] == 0, cell (i, j) is a land cell.\nIf isWater[i][j] == 1, cell (i, j) is a water cell.\nYou must assign each cell a height in a way that follows these rules:\nThe height of each cell must be non-negative.\nIf the cell is a water cell, its height must be 0.\nAny two adjacent cells must have an absolute height difference of at most 1. A cell is adjacent to another cell if the former is directly north, east, south, or west of the latter (i.e., their sides are touching).\nFind an assignment of heights such that the maximum height in the matrix is maximized.\nReturn an integer matrix height of size m x n where height[i][j] is cell (i, j)'s height. If there are multiple solutions, return any of them.", "examples": [{"full_text": "Example 1:\nInput: isWater = [[0,1],[0,0]]\nOutput: [[1,0],[2,1]]\nExplanation: The image shows the assigned heights of each cell.\nThe blue cell is the water cell, and the green cells are the land cells.", "input": "Input: isWater = [[0,1],[0,0]]", "output": "Output: [[1,0],[2,1]]", "explanation": "Explanation: The image shows the assigned heights of each cell.\nThe blue cell is the water cell, and the green cells are the land cells."}, {"full_text": "Example 2:\nInput: isWater = [[0,0,1],[1,0,0],[0,0,0]]\nOutput: [[1,1,0],[0,1,1],[1,2,2]]\nExplanation: A height of 2 is the maximum possible height of any assignment.\nAny height assignment that has a maximum height of 2 while still meeting the rules will also be accepted.", "input": "Input: isWater = [[0,0,1],[1,0,0],[0,0,0]]", "output": "Output: [[1,1,0],[0,1,1],[1,2,2]]", "explanation": "Explanation: A height of 2 is the maximum possible height of any assignment.\nAny height assignment that has a maximum height of 2 while still meeting the rules will also be accepted."}], "constraints": "Constraints:\nm == isWater.length\nn == isWater[i].length\n1 <= m, n <= 1000\nisWater[i][j] is 0 or 1.\nThere is at least one water cell.", "notes": ""}, "1764": {"label": "Medium", "title": "Form Array by Concatenating Subarrays of Another Array", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5301, "total_accepted": 9800.0, "total_submissions": 18500.0, "testcase_example": "'[[1,-1,-1],[3,-2,0]]\\n[1,-1,0,1,-1,-1,3,-2,0]'", "body": "You are given a 2D integer array groups of length n. You are also given an integer array nums.\nYou are asked if you can choose n disjoint subarrays from the array nums such that the i^th subarray is equal to groups[i] (0-indexed), and if i > 0, the (i-1)^th subarray appears before the i^th subarray in nums (i.e. the subarrays must be in the same order as groups).\nReturn true if you can do this task, and false otherwise.\nNote that the subarrays are disjoint if and only if there is no index k such that nums[k] belongs to more than one subarray. A subarray is a contiguous sequence of elements within an array.", "examples": [{"full_text": "Example 1:\nInput: groups = [[1,-1,-1],[3,-2,0]], nums = [1,-1,0,1,-1,-1,3,-2,0]\nOutput: true\nExplanation: You can choose the 0^th subarray as [1,-1,0,1,-1,-1,3,-2,0] and the 1^st one as [1,-1,0,1,-1,-1,3,-2,0].\nThese subarrays are disjoint as they share no common nums[k] element.", "input": "Input: groups = [[1,-1,-1],[3,-2,0]], nums = [1,-1,0,1,-1,-1,3,-2,0]", "output": "Output: true", "explanation": "Explanation: You can choose the 0^th subarray as [1,-1,0,1,-1,-1,3,-2,0] and the 1^st one as [1,-1,0,1,-1,-1,3,-2,0].\nThese subarrays are disjoint as they share no common nums[k] element."}, {"full_text": "Example 2:\nInput: groups = [[10,-2],[1,2,3,4]], nums = [1,2,3,4,10,-2]\nOutput: false\nExplanation: Note that choosing the subarrays [1,2,3,4,10,-2] and [1,2,3,4,10,-2] is incorrect because they are not in the same order as in groups.\n[10,-2] must come before [1,2,3,4].", "input": "Input: groups = [[10,-2],[1,2,3,4]], nums = [1,2,3,4,10,-2]", "output": "Output: false", "explanation": "Explanation: Note that choosing the subarrays [1,2,3,4,10,-2] and [1,2,3,4,10,-2] is incorrect because they are not in the same order as in groups.\n[10,-2] must come before [1,2,3,4]."}, {"full_text": "Example 3:\nInput: groups = [[1,2,3],[3,4]], nums = [7,7,1,2,3,4,7,7]\nOutput: false\nExplanation: Note that choosing the subarrays [7,7,1,2,3,4,7,7] and [7,7,1,2,3,4,7,7] is invalid because they are not disjoint.\nThey share a common elements nums[4] (0-indexed).", "input": "Input: groups = [[1,2,3],[3,4]], nums = [7,7,1,2,3,4,7,7]", "output": "Output: false", "explanation": "Explanation: Note that choosing the subarrays [7,7,1,2,3,4,7,7] and [7,7,1,2,3,4,7,7] is invalid because they are not disjoint.\nThey share a common elements nums[4] (0-indexed)."}], "constraints": "Constraints:\ngroups.length == n\n1 <= n <= 10^3\n1 <= groups[i].length, sum(groups[i].length) <= 10^3\n1 <= nums.length <= 10^3\n-10^7 <= groups[i][j], nums[k] <= 10^7", "notes": ""}, "1760": {"label": "Medium", "title": "Minimum Limit of Balls in a Bag", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5628, "total_accepted": 14500.0, "total_submissions": 25700.0, "testcase_example": "'[9]\\n2'", "body": "You are given an integer array nums where the i^th bag contains nums[i] balls. You are also given an integer maxOperations.\nYou can perform the following operation at most maxOperations times:\nTake any bag of balls and divide it into two new bags with a positive number of balls.\n\nFor example, a bag of 5 balls can become two new bags of 1 and 4 balls, or two new bags of 2 and 3 balls.\n\n\nYour penalty is the maximum number of balls in a bag. You want to minimize your penalty after the operations.\nReturn the minimum possible penalty\nafter performing the operations.", "examples": [{"full_text": "Example 1:\nInput: nums = [9], maxOperations = 2\nOutput: 3\nExplanation:\n- Divide the bag with 9 balls into two bags of sizes 6 and 3. [9] -> [6,3].\n- Divide the bag with 6 balls into two bags of sizes 3 and 3. [6,3] -> [3,3,3].\nThe bag with the most number of balls has 3 balls, so your penalty is 3 and you should return 3.", "input": "Input: nums = [9], maxOperations = 2", "output": "Output: 3", "explanation": "Explanation:\n- Divide the bag with 9 balls into two bags of sizes 6 and 3. [9] -> [6,3].\n- Divide the bag with 6 balls into two bags of sizes 3 and 3. [6,3] -> [3,3,3].\nThe bag with the most number of balls has 3 balls, so your penalty is 3 and you should return 3."}, {"full_text": "Example 2:\nInput: nums = [2,4,8,2], maxOperations = 4\nOutput: 2\nExplanation:\n- Divide the bag with 8 balls into two bags of sizes 4 and 4. [2,4,8,2] -> [2,4,4,4,2].\n- Divide the bag with 4 balls into two bags of sizes 2 and 2. [2,4,4,4,2] -> [2,2,2,4,4,2].\n- Divide the bag with 4 balls into two bags of sizes 2 and 2. [2,2,2,4,4,2] -> [2,2,2,2,2,4,2].\n- Divide the bag with 4 balls into two bags of sizes 2 and 2. [2,2,2,2,2,4,2] -> [2,2,2,2,2,2,2,2].\nThe bag with the most number of balls has 2 balls, so your penalty is 2 an you should return 2.", "input": "Input: nums = [2,4,8,2], maxOperations = 4", "output": "Output: 2", "explanation": "Explanation:\n- Divide the bag with 8 balls into two bags of sizes 4 and 4. [2,4,8,2] -> [2,4,4,4,2].\n- Divide the bag with 4 balls into two bags of sizes 2 and 2. [2,4,4,4,2] -> [2,2,2,4,4,2].\n- Divide the bag with 4 balls into two bags of sizes 2 and 2. [2,2,2,4,4,2] -> [2,2,2,2,2,4,2].\n- Divide the bag with 4 balls into two bags of sizes 2 and 2. [2,2,2,2,2,4,2] -> [2,2,2,2,2,2,2,2].\nThe bag with the most number of balls has 2 balls, so your penalty is 2 an you should return 2."}, {"full_text": "Example 3:\nInput: nums = [7,17], maxOperations = 2\nOutput: 7", "input": "Input: nums = [7,17], maxOperations = 2", "output": "Output: 7", "explanation": ""}], "constraints": "Constraints:\n1 <= nums.length <= 10^5\n1 <= maxOperations, nums[i] <= 10^9", "notes": ""}, "1759": {"label": "Medium", "title": "Count Number of Homogenous Substrings", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4575, "total_accepted": 16800.0, "total_submissions": 36700.0, "testcase_example": "'\"abbcccaa\"'", "body": "Given a string s, return the number of homogenous substrings of s. Since the answer may be too large, return it modulo 10^9 + 7.\nA string is homogenous if all the characters of the string are the same.\nA substring is a contiguous sequence of characters within a string.", "examples": [{"full_text": "Example 1:\nInput: s = \"abbcccaa\"\nOutput: 13\nExplanation: The homogenous substrings are listed as below:\n\"a\" appears 3 times.\n\"aa\" appears 1 time.\n\"b\" appears 2 times.\n\"bb\" appears 1 time.\n\"c\" appears 3 times.\n\"cc\" appears 2 times.\n\"ccc\" appears 1 time.\n3 + 1 + 2 + 1 + 3 + 2 + 1 = 13.", "input": "Input: s = \"abbcccaa\"", "output": "Output: 13", "explanation": "Explanation: The homogenous substrings are listed as below:\n\"a\" appears 3 times.\n\"aa\" appears 1 time.\n\"b\" appears 2 times.\n\"bb\" appears 1 time.\n\"c\" appears 3 times.\n\"cc\" appears 2 times.\n\"ccc\" appears 1 time.\n3 + 1 + 2 + 1 + 3 + 2 + 1 = 13."}, {"full_text": "Example 2:\nInput: s = \"xy\"\nOutput: 2\nExplanation: The homogenous substrings are \"x\" and \"y\".", "input": "Input: s = \"xy\"", "output": "Output: 2", "explanation": "Explanation: The homogenous substrings are \"x\" and \"y\"."}, {"full_text": "Example 3:\nInput: s = \"zzzzz\"\nOutput: 15", "input": "Input: s = \"zzzzz\"", "output": "Output: 15", "explanation": ""}], "constraints": "Constraints:\n1 <= s.length <= 10^5\ns consists of lowercase letters.", "notes": ""}, "1754": {"label": "Medium", "title": "Largest Merge Of Two Strings", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4351, "total_accepted": 13400.0, "total_submissions": 30700.0, "testcase_example": "'\"cabaa\"\\n\"bcaaa\"'", "body": "You are given two strings word1 and word2. You want to construct a string merge in the following way: while either word1 or word2 are non-empty, choose one of the following options:\nIf word1 is non-empty, append the first character in word1 to merge and delete it from word1.\n\nFor example, if word1 = \"abc\" and merge = \"dv\", then after choosing this operation, word1 = \"bc\" and merge = \"dva\".\n\n\nIf word2 is non-empty, append the first character in word2 to merge and delete it from word2.\n\nFor example, if word2 = \"abc\" and merge = \"\", then after choosing this operation, word2 = \"bc\" and merge = \"a\".\n\n\nReturn the lexicographically largest merge you can construct.\nA string a is lexicographically larger than a string b (of the same length) if in the first position where a and b differ, a has a character strictly larger than the corresponding character in b. For example, \"abcd\" is lexicographically larger than \"abcc\" because the first position they differ is at the fourth character, and d is greater than c.", "examples": [{"full_text": "Example 1:\nInput: word1 = \"cabaa\", word2 = \"bcaaa\"\nOutput: \"cbcabaaaaa\"\nExplanation: One way to get the lexicographically largest merge is:\n- Take from word1: merge = \"c\", word1 = \"abaa\", word2 = \"bcaaa\"\n- Take from word2: merge = \"cb\", word1 = \"abaa\", word2 = \"caaa\"\n- Take from word2: merge = \"cbc\", word1 = \"abaa\", word2 = \"aaa\"\n- Take from word1: merge = \"cbca\", word1 = \"baa\", word2 = \"aaa\"\n- Take from word1: merge = \"cbcab\", word1 = \"aa\", word2 = \"aaa\"\n- Append the remaining 5 a's from word1 and word2 at the end of merge.", "input": "Input: word1 = \"cabaa\", word2 = \"bcaaa\"", "output": "Output: \"cbcabaaaaa\"", "explanation": "Explanation: One way to get the lexicographically largest merge is:\n- Take from word1: merge = \"c\", word1 = \"abaa\", word2 = \"bcaaa\"\n- Take from word2: merge = \"cb\", word1 = \"abaa\", word2 = \"caaa\"\n- Take from word2: merge = \"cbc\", word1 = \"abaa\", word2 = \"aaa\"\n- Take from word1: merge = \"cbca\", word1 = \"baa\", word2 = \"aaa\"\n- Take from word1: merge = \"cbcab\", word1 = \"aa\", word2 = \"aaa\"\n- Append the remaining 5 a's from word1 and word2 at the end of merge."}, {"full_text": "Example 2:\nInput: word1 = \"abcabc\", word2 = \"abdcaba\"\nOutput: \"abdcabcabcaba\"", "input": "Input: word1 = \"abcabc\", word2 = \"abdcaba\"", "output": "Output: \"abdcabcabcaba\"", "explanation": ""}], "constraints": "Constraints:\n1 <= word1.length, word2.length <= 3000\nword1 and word2 consist only of lowercase English letters.", "notes": ""}, "1753": {"label": "Medium", "title": "Maximum Score From Removing Stones", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6465000000000001, "total_accepted": 19500.0, "total_submissions": 30200.0, "testcase_example": "'2\\n4\\n6'", "body": "You are playing a solitaire game with three piles of stones of sizes a\u200b\u200b\u200b\u200b\u200b\u200b, b,\u200b\u200b\u200b\u200b\u200b\u200b and c\u200b\u200b\u200b\u200b\u200b\u200b respectively. Each turn you choose two different non-empty piles, take one stone from each, and add 1 point to your score. The game stops when there are fewer than two non-empty piles (meaning there are no more available moves).\nGiven three integers a\u200b\u200b\u200b\u200b\u200b, b,\u200b\u200b\u200b\u200b\u200b and c\u200b\u200b\u200b\u200b\u200b, return the maximum score you can get.", "examples": [{"full_text": "Example 1:\nInput: a = 2, b = 4, c = 6\nOutput: 6\nExplanation: The starting state is (2, 4, 6). One optimal set of moves is:\n- Take from 1st and 3rd piles, state is now (1, 4, 5)\n- Take from 1st and 3rd piles, state is now (0, 4, 4)\n- Take from 2nd and 3rd piles, state is now (0, 3, 3)\n- Take from 2nd and 3rd piles, state is now (0, 2, 2)\n- Take from 2nd and 3rd piles, state is now (0, 1, 1)\n- Take from 2nd and 3rd piles, state is now (0, 0, 0)\nThere are fewer than two non-empty piles, so the game ends. Total: 6 points.", "input": "Input: a = 2, b = 4, c = 6", "output": "Output: 6", "explanation": "Explanation: The starting state is (2, 4, 6). One optimal set of moves is:\n- Take from 1st and 3rd piles, state is now (1, 4, 5)\n- Take from 1st and 3rd piles, state is now (0, 4, 4)\n- Take from 2nd and 3rd piles, state is now (0, 3, 3)\n- Take from 2nd and 3rd piles, state is now (0, 2, 2)\n- Take from 2nd and 3rd piles, state is now (0, 1, 1)\n- Take from 2nd and 3rd piles, state is now (0, 0, 0)\nThere are fewer than two non-empty piles, so the game ends. Total: 6 points."}, {"full_text": "Example 2:\nInput: a = 4, b = 4, c = 6\nOutput: 7\nExplanation: The starting state is (4, 4, 6). One optimal set of moves is:\n- Take from 1st and 2nd piles, state is now (3, 3, 6)\n- Take from 1st and 3rd piles, state is now (2, 3, 5)\n- Take from 1st and 3rd piles, state is now (1, 3, 4)\n- Take from 1st and 3rd piles, state is now (0, 3, 3)\n- Take from 2nd and 3rd piles, state is now (0, 2, 2)\n- Take from 2nd and 3rd piles, state is now (0, 1, 1)\n- Take from 2nd and 3rd piles, state is now (0, 0, 0)\nThere are fewer than two non-empty piles, so the game ends. Total: 7 points.", "input": "Input: a = 4, b = 4, c = 6", "output": "Output: 7", "explanation": "Explanation: The starting state is (4, 4, 6). One optimal set of moves is:\n- Take from 1st and 2nd piles, state is now (3, 3, 6)\n- Take from 1st and 3rd piles, state is now (2, 3, 5)\n- Take from 1st and 3rd piles, state is now (1, 3, 4)\n- Take from 1st and 3rd piles, state is now (0, 3, 3)\n- Take from 2nd and 3rd piles, state is now (0, 2, 2)\n- Take from 2nd and 3rd piles, state is now (0, 1, 1)\n- Take from 2nd and 3rd piles, state is now (0, 0, 0)\nThere are fewer than two non-empty piles, so the game ends. Total: 7 points."}, {"full_text": "Example 3:\nInput: a = 1, b = 8, c = 8\nOutput: 8\nExplanation: One optimal set of moves is to take from the 2nd and 3rd piles for 8 turns until they are empty.\nAfter that, there are fewer than two non-empty piles, so the game ends.", "input": "Input: a = 1, b = 8, c = 8", "output": "Output: 8", "explanation": "Explanation: One optimal set of moves is to take from the 2nd and 3rd piles for 8 turns until they are empty.\nAfter that, there are fewer than two non-empty piles, so the game ends."}], "constraints": "Constraints:\n1 <= a, b, c <= 10^5", "notes": ""}, "1750": {"label": "Medium", "title": "Minimum Length of String After Deleting Similar Ends", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4293, "total_accepted": 12800.0, "total_submissions": 29800.0, "testcase_example": "'\"ca\"'", "body": "Given a string s consisting only of characters 'a', 'b', and 'c'. You are asked to apply the following algorithm on the string any number of times:\nPick a non-empty prefix from the string s where all the characters in the prefix are equal.\nPick a non-empty suffix from the string s where all the characters in this suffix are equal.\nThe prefix and the suffix should not intersect at any index.\nThe characters from the prefix and suffix must be the same.\nDelete both the prefix and the suffix.\nReturn the minimum length of s after performing the above operation any number of times (possibly zero times).", "examples": [{"full_text": "Example 1:\nInput: s = \"ca\"\nOutput: 2\nExplanation: You can't remove any characters, so the string stays as is.", "input": "Input: s = \"ca\"", "output": "Output: 2", "explanation": "Explanation: You can't remove any characters, so the string stays as is."}, {"full_text": "Example 2:\nInput: s = \"cabaabac\"\nOutput: 0\nExplanation: An optimal sequence of operations is:\n- Take prefix = \"c\" and suffix = \"c\" and remove them, s = \"abaaba\".\n- Take prefix = \"a\" and suffix = \"a\" and remove them, s = \"baab\".\n- Take prefix = \"b\" and suffix = \"b\" and remove them, s = \"aa\".\n- Take prefix = \"a\" and suffix = \"a\" and remove them, s = \"\".", "input": "Input: s = \"cabaabac\"", "output": "Output: 0", "explanation": "Explanation: An optimal sequence of operations is:\n- Take prefix = \"c\" and suffix = \"c\" and remove them, s = \"abaaba\".\n- Take prefix = \"a\" and suffix = \"a\" and remove them, s = \"baab\".\n- Take prefix = \"b\" and suffix = \"b\" and remove them, s = \"aa\".\n- Take prefix = \"a\" and suffix = \"a\" and remove them, s = \"\"."}, {"full_text": "Example 3:\nInput: s = \"aabccabba\"\nOutput: 3\nExplanation: An optimal sequence of operations is:\n- Take prefix = \"aa\" and suffix = \"a\" and remove them, s = \"bccabb\".\n- Take prefix = \"b\" and suffix = \"bb\" and remove them, s = \"cca\".", "input": "Input: s = \"aabccabba\"", "output": "Output: 3", "explanation": "Explanation: An optimal sequence of operations is:\n- Take prefix = \"aa\" and suffix = \"a\" and remove them, s = \"bccabb\".\n- Take prefix = \"b\" and suffix = \"bb\" and remove them, s = \"cca\"."}], "constraints": "Constraints:\n1 <= s.length <= 10^5\ns only consists of characters 'a', 'b', and 'c'.", "notes": ""}, "1749": {"label": "Medium", "title": "Maximum Absolute Sum of Any Subarray", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5656, "total_accepted": 19300.0, "total_submissions": 34200.0, "testcase_example": "'[1,-3,2,3,-4]'", "body": "You are given an integer array nums. The absolute sum of a subarray [numsl, numsl+1, ..., numsr-1, numsr] is abs(numsl + numsl+1 + ... + numsr-1 + numsr).\nReturn the maximum absolute sum of any (possibly empty) subarray of nums.\nNote that abs(x) is defined as follows:\nIf x is a negative integer, then abs(x) = -x.\nIf x is a non-negative integer, then abs(x) = x.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,-3,2,3,-4]\nOutput: 5\nExplanation: The subarray [2,3] has absolute sum = abs(2+3) = abs(5) = 5.", "input": "Input: nums = [1,-3,2,3,-4]", "output": "Output: 5", "explanation": "Explanation: The subarray [2,3] has absolute sum = abs(2+3) = abs(5) = 5."}, {"full_text": "Example 2:\nInput: nums = [2,-5,1,-4,3,-2]\nOutput: 8\nExplanation: The subarray [-5,1,-4] has absolute sum = abs(-5+1-4) = abs(-8) = 8.", "input": "Input: nums = [2,-5,1,-4,3,-2]", "output": "Output: 8", "explanation": "Explanation: The subarray [-5,1,-4] has absolute sum = abs(-5+1-4) = abs(-8) = 8."}], "constraints": "Constraints:\n1 <= nums.length <= 10^5\n-10^4 <= nums[i] <= 10^4", "notes": ""}, "1744": {"label": "Medium", "title": "Can You Eat Your Favorite Candy on Your Favorite Day?", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.32049999999999995, "total_accepted": 7600.0, "total_submissions": 23700.0, "testcase_example": "'[7,4,5,3,8]\\n[[0,2,2],[4,2,4],[2,13,1000000000]]'", "body": "You are given a (0-indexed) array of positive integers candiesCount where candiesCount[i] represents the number of candies of the\ni^th\ntype you have. You are also given a 2D array queries where queries[i] = [favoriteTypei, favoriteDayi, dailyCapi].\nYou play a game with the following rules:\nYou start eating candies on day 0.\nYou cannot eat any candy of type i unless you have eaten all candies of type i - 1.\nYou must eat at least one candy per day until you have eaten all the candies.\nConstruct a boolean array answer such that answer.length == queries.length and answer[i] is true if you can eat a candy of type favoriteTypei on day favoriteDayi without eating more than dailyCapi candies on any day, and false otherwise. Note that you can eat different types of candy on the same day, provided that you follow rule 2.\nReturn the constructed array answer.", "examples": [{"full_text": "Example 1:\nInput: candiesCount = [7,4,5,3,8], queries = [[0,2,2],[4,2,4],[2,13,1000000000]]\nOutput: [true,false,true]\nExplanation:\n1- If you eat 2 candies (type 0) on day 0 and 2 candies (type 0) on day 1, you will eat a candy of type 0 on day 2.\n2- You can eat at most 4 candies each day.\nIf you eat 4 candies every day, you will eat 4 candies (type 0) on day 0 and 4 candies (type 0 and type 1) on day 1.\nOn day 2, you can only eat 4 candies (type 1 and type 2), so you cannot eat a candy of type 4 on day 2.\n3- If you eat 1 candy each day, you will eat a candy of type 2 on day 13.", "input": "Input: candiesCount = [7,4,5,3,8], queries = [[0,2,2],[4,2,4],[2,13,1000000000]]", "output": "Output: [true,false,true]", "explanation": "Explanation:\n1- If you eat 2 candies (type 0) on day 0 and 2 candies (type 0) on day 1, you will eat a candy of type 0 on day 2.\n2- You can eat at most 4 candies each day.\nIf you eat 4 candies every day, you will eat 4 candies (type 0) on day 0 and 4 candies (type 0 and type 1) on day 1.\nOn day 2, you can only eat 4 candies (type 1 and type 2), so you cannot eat a candy of type 4 on day 2.\n3- If you eat 1 candy each day, you will eat a candy of type 2 on day 13."}, {"full_text": "Example 2:\nInput: candiesCount = [5,2,6,4,1], queries = [[3,1,2],[4,10,3],[3,10,100],[4,100,30],[1,3,1]]\nOutput: [false,true,true,false,false]", "input": "Input: candiesCount = [5,2,6,4,1], queries = [[3,1,2],[4,10,3],[3,10,100],[4,100,30],[1,3,1]]", "output": "Output: [false,true,true,false,false]", "explanation": ""}], "constraints": "Constraints:\n1 <= candiesCount.length <= 10^5\n1 <= candiesCount[i] <= 10^5\n1 <= queries.length <= 10^5\nqueries[i].length == 3\n0 <= favoriteTypei < candiesCount.length\n0 <= favoriteDayi <= 10^9\n1 <= dailyCapi <= 10^9", "notes": ""}, "1743": {"label": "Medium", "title": "Restore the Array From Adjacent Pairs", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.679, "total_accepted": 22800.0, "total_submissions": 33600.0, "testcase_example": "'[[2,1],[3,4],[3,2]]'", "body": "There is an integer array nums that consists of n unique elements, but you have forgotten it. However, you do remember every pair of adjacent elements in nums.\nYou are given a 2D integer array adjacentPairs of size n - 1 where each adjacentPairs[i] = [ui, vi] indicates that the elements ui and vi are adjacent in nums.\nIt is guaranteed that every adjacent pair of elements nums[i] and nums[i+1] will exist in adjacentPairs, either as [nums[i], nums[i+1]] or [nums[i+1], nums[i]]. The pairs can appear in any order.\nReturn the original array nums. If there are multiple solutions, return any of them.", "examples": [{"full_text": "Example 1:\nInput: adjacentPairs = [[2,1],[3,4],[3,2]]\nOutput: [1,2,3,4]\nExplanation: This array has all its adjacent pairs in adjacentPairs.\nNotice that adjacentPairs[i] may not be in left-to-right order.", "input": "Input: adjacentPairs = [[2,1],[3,4],[3,2]]", "output": "Output: [1,2,3,4]", "explanation": "Explanation: This array has all its adjacent pairs in adjacentPairs.\nNotice that adjacentPairs[i] may not be in left-to-right order."}, {"full_text": "Example 2:\nInput: adjacentPairs = [[4,-2],[1,4],[-3,1]]\nOutput: [-2,4,1,-3]\nExplanation: There can be negative numbers.\nAnother solution is [-3,1,4,-2], which would also be accepted.", "input": "Input: adjacentPairs = [[4,-2],[1,4],[-3,1]]", "output": "Output: [-2,4,1,-3]", "explanation": "Explanation: There can be negative numbers.\nAnother solution is [-3,1,4,-2], which would also be accepted."}, {"full_text": "Example 3:\nInput: adjacentPairs = [[100000,-100000]]\nOutput: [100000,-100000]", "input": "Input: adjacentPairs = [[100000,-100000]]", "output": "Output: [100000,-100000]", "explanation": ""}], "constraints": "Constraints:\nnums.length == n\nadjacentPairs.length == n - 1\nadjacentPairs[i].length == 2\n2 <= n <= 10^5\n-10^5 <= nums[i], ui, vi <= 10^5\nThere exists some nums that has adjacentPairs as its pairs.", "notes": ""}, "1738": {"label": "Medium", "title": "Find Kth Largest XOR Coordinate Value", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6239, "total_accepted": 13400.0, "total_submissions": 21500.0, "testcase_example": "'[[5,2],[1,6]]\\n1'", "body": "You are given a 2D matrix of size m x n, consisting of non-negative integers. You are also given an integer k.\nThe value of coordinate (a, b) of the matrix is the XOR of all matrix[i][j] where 0 <= i <= a < m and 0 <= j <= b < n (0-indexed).\nFind the k^th largest value (1-indexed) of all the coordinates of matrix.", "examples": [{"full_text": "Example 1:\nInput: matrix = [[5,2],[1,6]], k = 1\nOutput: 7\nExplanation: The value of coordinate (0,1) is 5 XOR 2 = 7, which is the largest value.", "input": "Input: matrix = [[5,2],[1,6]], k = 1", "output": "Output: 7", "explanation": "Explanation: The value of coordinate (0,1) is 5 XOR 2 = 7, which is the largest value."}, {"full_text": "Example 2:\nInput: matrix = [[5,2],[1,6]], k = 2\nOutput: 5\nExplanation: The value of coordinate (0,0) is 5 = 5, which is the 2nd largest value.", "input": "Input: matrix = [[5,2],[1,6]], k = 2", "output": "Output: 5", "explanation": "Explanation: The value of coordinate (0,0) is 5 = 5, which is the 2nd largest value."}, {"full_text": "Example 3:\nInput: matrix = [[5,2],[1,6]], k = 3\nOutput: 4\nExplanation: The value of coordinate (1,0) is 5 XOR 1 = 4, which is the 3rd largest value.", "input": "Input: matrix = [[5,2],[1,6]], k = 3", "output": "Output: 4", "explanation": "Explanation: The value of coordinate (1,0) is 5 XOR 1 = 4, which is the 3rd largest value."}], "constraints": "Constraints:\nm == matrix.length\nn == matrix[i].length\n1 <= m, n <= 1000\n0 <= matrix[i][j] <= 10^6\n1 <= k <= m * n", "notes": ""}, "1737": {"label": "Medium", "title": "Change Minimum Characters to Satisfy One of Three Conditions", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3333, "total_accepted": 8500.0, "total_submissions": 25600.0, "testcase_example": "'\"aba\"\\n\"caa\"'", "body": "You are given two strings a and b that consist of lowercase letters. In one operation, you can change any character in a or b to any lowercase letter.\nYour goal is to satisfy one of the following three conditions:\nEvery letter in a is strictly less than every letter in b in the alphabet.\nEvery letter in b is strictly less than every letter in a in the alphabet.\nBoth a and b consist of only one distinct letter.\nReturn the minimum number of operations needed to achieve your goal.", "examples": [{"full_text": "Example 1:\nInput: a = \"aba\", b = \"caa\"\nOutput: 2\nExplanation: Consider the best way to make each condition true:\n1) Change b to \"ccc\" in 2 operations, then every letter in a is less than every letter in b.\n2) Change a to \"bbb\" and b to \"aaa\" in 3 operations, then every letter in b is less than every letter in a.\n3) Change a to \"aaa\" and b to \"aaa\" in 2 operations, then a and b consist of one distinct letter.\nThe best way was done in 2 operations (either condition 1 or condition 3).", "input": "Input: a = \"aba\", b = \"caa\"", "output": "Output: 2", "explanation": "Explanation: Consider the best way to make each condition true:\n1) Change b to \"ccc\" in 2 operations, then every letter in a is less than every letter in b.\n2) Change a to \"bbb\" and b to \"aaa\" in 3 operations, then every letter in b is less than every letter in a.\n3) Change a to \"aaa\" and b to \"aaa\" in 2 operations, then a and b consist of one distinct letter.\nThe best way was done in 2 operations (either condition 1 or condition 3)."}, {"full_text": "Example 2:\nInput: a = \"dabadd\", b = \"cda\"\nOutput: 3\nExplanation: The best way is to make condition 1 true by changing b to \"eee\".", "input": "Input: a = \"dabadd\", b = \"cda\"", "output": "Output: 3", "explanation": "Explanation: The best way is to make condition 1 true by changing b to \"eee\"."}], "constraints": "Constraints:\n1 <= a.length, b.length <= 10^5\na and b consist only of lowercase letters.", "notes": ""}, "1734": {"label": "Medium", "title": "Decode XORed Permutation", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6001, "total_accepted": 8600.0, "total_submissions": 14300.0, "testcase_example": "'[3,1]'", "body": "There is an integer array perm that is a permutation of the first n positive integers, where n is always odd.\nIt was encoded into another integer array encoded of length n - 1, such that encoded[i] = perm[i] XOR perm[i + 1]. For example, if perm = [1,3,2], then encoded = [2,1].\nGiven the encoded array, return the original array perm. It is guaranteed that the answer exists and is unique.", "examples": [{"full_text": "Example 1:\nInput: encoded = [3,1]\nOutput: [1,2,3]\nExplanation: If perm = [1,2,3], then encoded = [1 XOR 2,2 XOR 3] = [3,1]", "input": "Input: encoded = [3,1]", "output": "Output: [1,2,3]", "explanation": "Explanation: If perm = [1,2,3], then encoded = [1 XOR 2,2 XOR 3] = [3,1]"}, {"full_text": "Example 2:\nInput: encoded = [6,5,4,6]\nOutput: [2,4,1,5,3]", "input": "Input: encoded = [6,5,4,6]", "output": "Output: [2,4,1,5,3]", "explanation": ""}], "constraints": "Constraints:\n3 <= n <\n10^5\nn\nis odd.\nencoded.length == n - 1", "notes": ""}, "1733": {"label": "Medium", "title": "Minimum Number of People to Teach", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4054, "total_accepted": 5800.0, "total_submissions": 14300.0, "testcase_example": "'2\\n[[1],[2],[1,2]]\\n[[1,2],[1,3],[2,3]]'", "body": "On a social network consisting of m users and some friendships between users, two users can communicate with each other if they know a common language.\nYou are given an integer n, an array languages, and an array friendships where:\nThere are n languages numbered 1 through n,\nlanguages[i] is the set of languages the i^\u200b\u200b\u200b\u200b\u200b\u200bth\u200b\u200b\u200b\u200b user knows, and\nfriendships[i] = [u\u200b\u200b\u200b\u200b\u200b\u200bi\u200b\u200b\u200b, v\u200b\u200b\u200b\u200b\u200b\u200bi] denotes a friendship between the users u^\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200bi\u200b\u200b\u200b\u200b\u200b and vi.\nYou can choose one language and teach it to some users so that all friends can communicate with each other. Return the minimum number of users you need to teach.\nNote that friendships are not transitive, meaning if x is a friend of y and y is a friend of z, this doesn't guarantee that x is a friend of z.", "examples": [{"full_text": "Example 1:\nInput: n = 2, languages = [[1],[2],[1,2]], friendships = [[1,2],[1,3],[2,3]]\nOutput: 1\nExplanation: You can either teach user 1 the second language or user 2 the first language.", "input": "Input: n = 2, languages = [[1],[2],[1,2]], friendships = [[1,2],[1,3],[2,3]]", "output": "Output: 1", "explanation": "Explanation: You can either teach user 1 the second language or user 2 the first language."}, {"full_text": "Example 2:\nInput: n = 3, languages = [[2],[1,3],[1,2],[3]], friendships = [[1,4],[1,2],[3,4],[2,3]]\nOutput: 2\nExplanation: Teach the third language to users 1 and 3, yielding two users to teach.", "input": "Input: n = 3, languages = [[2],[1,3],[1,2],[3]], friendships = [[1,4],[1,2],[3,4],[2,3]]", "output": "Output: 2", "explanation": "Explanation: Teach the third language to users 1 and 3, yielding two users to teach."}], "constraints": "Constraints:\n2 <= n <= 500\nlanguages.length == m\n1 <= m <= 500\n1 <= languages[i].length <= n\n1 <= languages[i][j] <= n\n1 <= u\u200b\u200b\u200b\u200b\u200b\u200bi < v\u200b\u200b\u200b\u200b\u200b\u200bi <= languages.length\n1 <= friendships.length <= 500\nAll tuples (u\u200b\u200b\u200b\u200b\u200bi, v\u200b\u200b\u200b\u200b\u200b\u200bi) are unique\nlanguages[i] contains only unique values", "notes": ""}, "1727": {"label": "Medium", "title": "Largest Submatrix With Rearrangements", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6018, "total_accepted": 11100.0, "total_submissions": 18500.0, "testcase_example": "'[[0,0,1],[1,1,1],[1,0,1]]'", "body": "You are given a binary matrix matrix of size m x n, and you are allowed to rearrange the columns of the matrix in any order.\nReturn the area of the largest submatrix within matrix where every element of the submatrix is 1 after reordering the columns optimally.", "examples": [{"full_text": "Example 1:\nInput: matrix = [[0,0,1],[1,1,1],[1,0,1]]\nOutput: 4\nExplanation: You can rearrange the columns as shown above.\nThe largest submatrix of 1s, in bold, has an area of 4.", "input": "Input: matrix = [[0,0,1],[1,1,1],[1,0,1]]", "output": "Output: 4", "explanation": "Explanation: You can rearrange the columns as shown above.\nThe largest submatrix of 1s, in bold, has an area of 4."}, {"full_text": "Example 2:\nInput: matrix = [[1,0,1,0,1]]\nOutput: 3\nExplanation: You can rearrange the columns as shown above.\nThe largest submatrix of 1s, in bold, has an area of 3.", "input": "Input: matrix = [[1,0,1,0,1]]", "output": "Output: 3", "explanation": "Explanation: You can rearrange the columns as shown above.\nThe largest submatrix of 1s, in bold, has an area of 3."}, {"full_text": "Example 3:\nInput: matrix = [[1,1,0],[1,0,1]]\nOutput: 2\nExplanation: Notice that you must rearrange entire columns, and there is no way to make a submatrix of 1s larger than an area of 2.", "input": "Input: matrix = [[1,1,0],[1,0,1]]", "output": "Output: 2", "explanation": "Explanation: Notice that you must rearrange entire columns, and there is no way to make a submatrix of 1s larger than an area of 2."}], "constraints": "Constraints:\nm == matrix.length\nn == matrix[i].length\n1 <= m * n <= 10^5\nmatrix[i][j] is either 0 or 1.", "notes": ""}, "1726": {"label": "Medium", "title": "Tuple with Same Product", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6024, "total_accepted": 17500.0, "total_submissions": 29100.0, "testcase_example": "'[2,3,4,6]'", "body": "Given an array nums of distinct positive integers, return the number of tuples (a, b, c, d) such that a * b = c * d where a, b, c, and d are elements of nums, and a != b != c != d.", "examples": [{"full_text": "Example 1:\nInput: nums = [2,3,4,6]\nOutput: 8\nExplanation: There are 8 valid tuples:\n(2,6,3,4) , (2,6,4,3) , (6,2,3,4) , (6,2,4,3)\n(3,4,2,6) , (4,3,2,6) , (3,4,6,2) , (4,3,6,2)", "input": "Input: nums = [2,3,4,6]", "output": "Output: 8", "explanation": "Explanation: There are 8 valid tuples:\n(2,6,3,4) , (2,6,4,3) , (6,2,3,4) , (6,2,4,3)\n(3,4,2,6) , (4,3,2,6) , (3,4,6,2) , (4,3,6,2)"}, {"full_text": "Example 2:\nInput: nums = [1,2,4,5,10]\nOutput: 16\nExplanation: There are 16 valid tuples:\n(1,10,2,5) , (1,10,5,2) , (10,1,2,5) , (10,1,5,2)\n(2,5,1,10) , (2,5,10,1) , (5,2,1,10) , (5,2,10,1)\n(2,10,4,5) , (2,10,5,4) , (10,2,4,5) , (10,2,5,4)\n(4,5,2,10) , (4,5,10,2) , (5,4,2,10) , (5,4,10,2)", "input": "Input: nums = [1,2,4,5,10]", "output": "Output: 16", "explanation": "Explanation: There are 16 valid tuples:\n(1,10,2,5) , (1,10,5,2) , (10,1,2,5) , (10,1,5,2)\n(2,5,1,10) , (2,5,10,1) , (5,2,1,10) , (5,2,10,1)\n(2,10,4,5) , (2,10,5,4) , (10,2,4,5) , (10,2,5,4)\n(4,5,2,10) , (4,5,10,2) , (5,4,2,10) , (5,4,10,2)"}], "constraints": "Constraints:\n1 <= nums.length <= 1000\n1 <= nums[i] <= 10^4\nAll elements in nums are distinct.", "notes": ""}, "1722": {"label": "Medium", "title": "Minimize Hamming Distance After Swap Operations", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.47229999999999994, "total_accepted": 11200.0, "total_submissions": 23700.0, "testcase_example": "'[1,2,3,4]\\n[2,1,4,5]\\n[[0,1],[2,3]]'", "body": "You are given two integer arrays, source and target, both of length n. You are also given an array allowedSwaps where each allowedSwaps[i] = [ai, bi] indicates that you are allowed to swap the elements at index ai and index bi (0-indexed) of array source. Note that you can swap elements at a specific pair of indices multiple times and in any order.\nThe Hamming distance of two arrays of the same length, source and target, is the number of positions where the elements are different. Formally, it is the number of indices i for 0 <= i <= n-1 where source[i] != target[i] (0-indexed).\nReturn the minimum Hamming distance of source and target after performing any amount of swap operations on array source.", "examples": [{"full_text": "Example 1:\nInput: source = [1,2,3,4], target = [2,1,4,5], allowedSwaps = [[0,1],[2,3]]\nOutput: 1\nExplanation: source can be transformed the following way:\n- Swap indices 0 and 1: source = [2,1,3,4]\n- Swap indices 2 and 3: source = [2,1,4,3]\nThe Hamming distance of source and target is 1 as they differ in 1 position: index 3.", "input": "Input: source = [1,2,3,4], target = [2,1,4,5], allowedSwaps = [[0,1],[2,3]]", "output": "Output: 1", "explanation": "Explanation: source can be transformed the following way:\n- Swap indices 0 and 1: source = [2,1,3,4]\n- Swap indices 2 and 3: source = [2,1,4,3]\nThe Hamming distance of source and target is 1 as they differ in 1 position: index 3."}, {"full_text": "Example 2:\nInput: source = [1,2,3,4], target = [1,3,2,4], allowedSwaps = []\nOutput: 2\nExplanation: There are no allowed swaps.\nThe Hamming distance of source and target is 2 as they differ in 2 positions: index 1 and index 2.", "input": "Input: source = [1,2,3,4], target = [1,3,2,4], allowedSwaps = []", "output": "Output: 2", "explanation": "Explanation: There are no allowed swaps.\nThe Hamming distance of source and target is 2 as they differ in 2 positions: index 1 and index 2."}, {"full_text": "Example 3:\nInput: source = [5,1,2,4,3], target = [1,5,4,2,3], allowedSwaps = [[0,4],[4,2],[1,3],[1,4]]\nOutput: 0", "input": "Input: source = [5,1,2,4,3], target = [1,5,4,2,3], allowedSwaps = [[0,4],[4,2],[1,3],[1,4]]", "output": "Output: 0", "explanation": ""}], "constraints": "Constraints:\nn == source.length == target.length\n1 <= n <= 10^5\n1 <= source[i], target[i] <= 10^5\n0 <= allowedSwaps.length <= 10^5\nallowedSwaps[i].length == 2\n0 <= ai, bi <= n - 1\nai != bi", "notes": ""}, "1721": {"label": "Medium", "title": "Swapping Nodes in a Linked List", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6559, "total_accepted": 93400.0, "total_submissions": 142300.0, "testcase_example": "'[1,2,3,4,5]\\n2'", "body": "You are given the head of a linked list, and an integer k.\nReturn the head of the linked list after swapping the values of the k^th node from the beginning and the k^th node from the end (the list is 1-indexed).", "examples": [{"full_text": "Example 1:\nInput: head = [1,2,3,4,5], k = 2\nOutput: [1,4,3,2,5]", "input": "Input: head = [1,2,3,4,5], k = 2", "output": "Output: [1,4,3,2,5]", "explanation": ""}, {"full_text": "Example 2:\nInput: head = [7,9,6,6,7,8,3,0,9,5], k = 5\nOutput: [7,9,6,6,8,7,3,0,9,5]", "input": "Input: head = [7,9,6,6,7,8,3,0,9,5], k = 5", "output": "Output: [7,9,6,6,8,7,3,0,9,5]", "explanation": ""}], "constraints": "Constraints:\nThe number of nodes in the list is n.\n1 <= k <= n <= 10^5\n0 <= Node.val <= 100", "notes": ""}, "1718": {"label": "Medium", "title": "Construct the Lexicographically Largest Valid Sequence", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5096, "total_accepted": 8300.0, "total_submissions": 16400.0, "testcase_example": "'3'", "body": "Given an integer n, find a sequence that satisfies all of the following:\nThe integer 1 occurs once in the sequence.\nEach integer between 2 and n occurs twice in the sequence.\nFor every integer i between 2 and n, the distance between the two occurrences of i is exactly i.\nThe distance between two numbers on the sequence, a[i] and a[j], is the absolute difference of their indices, |j - i|.\nReturn the lexicographically largest sequence. It is guaranteed that under the given constraints, there is always a solution.\nA sequence a is lexicographically larger than a sequence b (of the same length) if in the first position where a and b differ, sequence a has a number greater than the corresponding number in b. For example, [0,1,9,0] is lexicographically larger than [0,1,5,6] because the first position they differ is at the third number, and 9 is greater than 5.", "examples": [{"full_text": "Example 1:\nInput: n = 3\nOutput: [3,1,2,3,2]\nExplanation: [2,3,2,1,3] is also a valid sequence, but [3,1,2,3,2] is the lexicographically largest valid sequence.", "input": "Input: n = 3", "output": "Output: [3,1,2,3,2]", "explanation": "Explanation: [2,3,2,1,3] is also a valid sequence, but [3,1,2,3,2] is the lexicographically largest valid sequence."}, {"full_text": "Example 2:\nInput: n = 5\nOutput: [5,3,1,4,3,5,2,4,2]", "input": "Input: n = 5", "output": "Output: [5,3,1,4,3,5,2,4,2]", "explanation": ""}], "constraints": "Constraints:\n1 <= n <= 20", "notes": ""}, "1717": {"label": "Medium", "title": "Maximum Score From Removing Substrings", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4411, "total_accepted": 8700.0, "total_submissions": 19700.0, "testcase_example": "'\"cdbcbbaaabab\"\\n4\\n5'", "body": "You are given a string s and two integers x and y. You can perform two types of operations any number of times.\nRemove substring \"ab\" and gain x points.\n\nFor example, when removing \"ab\" from \"cabxbae\" it becomes \"cxbae\".\n\n\nRemove substring \"ba\" and gain y points.\n\nFor example, when removing \"ba\" from \"cabxbae\" it becomes \"cabxe\".\n\n\nReturn the maximum points you can gain after applying the above operations on s.", "examples": [{"full_text": "Example 1:\nInput: s = \"cdbcbbaaabab\", x = 4, y = 5\nOutput: 19\nExplanation:\n- Remove the \"ba\" underlined in \"cdbcbbaaabab\". Now, s = \"cdbcbbaaab\" and 5 points are added to the score.\n- Remove the \"ab\" underlined in \"cdbcbbaaab\". Now, s = \"cdbcbbaa\" and 4 points are added to the score.\n- Remove the \"ba\" underlined in \"cdbcbbaa\". Now, s = \"cdbcba\" and 5 points are added to the score.\n- Remove the \"ba\" underlined in \"cdbcba\". Now, s = \"cdbc\" and 5 points are added to the score.\nTotal score = 5 + 4 + 5 + 5 = 19.", "input": "Input: s = \"cdbcbbaaabab\", x = 4, y = 5", "output": "Output: 19", "explanation": "Explanation:\n- Remove the \"ba\" underlined in \"cdbcbbaaabab\". Now, s = \"cdbcbbaaab\" and 5 points are added to the score.\n- Remove the \"ab\" underlined in \"cdbcbbaaab\". Now, s = \"cdbcbbaa\" and 4 points are added to the score.\n- Remove the \"ba\" underlined in \"cdbcbbaa\". Now, s = \"cdbcba\" and 5 points are added to the score.\n- Remove the \"ba\" underlined in \"cdbcba\". Now, s = \"cdbc\" and 5 points are added to the score.\nTotal score = 5 + 4 + 5 + 5 = 19."}, {"full_text": "Example 2:\nInput: s = \"aabbaaxybbaabb\", x = 5, y = 4\nOutput: 20", "input": "Input: s = \"aabbaaxybbaabb\", x = 5, y = 4", "output": "Output: 20", "explanation": ""}], "constraints": "Constraints:\n1 <= s.length <= 10^5\n1 <= x, y <= 10^4\ns consists of lowercase English letters.", "notes": ""}, "1712": {"label": "Medium", "title": "Ways to Split Array Into Three Subarrays", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3079, "total_accepted": 17100.0, "total_submissions": 55400.0, "testcase_example": "'[1,1,1]'", "body": "A split of an integer array is good if:\nThe array is split into three non-empty contiguous subarrays - named left, mid, right respectively from left to right.\nThe sum of the elements in left is less than or equal to the sum of the elements in mid, and the sum of the elements in mid is less than or equal to the sum of the elements in right.\nGiven nums, an array of non-negative integers, return the number of good ways to split nums. As the number may be too large, return it modulo 10^9 + 7.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,1,1]\nOutput: 1\nExplanation: The only good way to split nums is [1] [1] [1].", "input": "Input: nums = [1,1,1]", "output": "Output: 1", "explanation": "Explanation: The only good way to split nums is [1] [1] [1]."}, {"full_text": "Example 2:\nInput: nums = [1,2,2,2,5,0]\nOutput: 3\nExplanation: There are three good ways of splitting nums:\n[1] [2] [2,2,5,0]\n[1] [2,2] [2,5,0]\n[1,2] [2,2] [5,0]", "input": "Input: nums = [1,2,2,2,5,0]", "output": "Output: 3", "explanation": "Explanation: There are three good ways of splitting nums:\n[1] [2] [2,2,5,0]\n[1] [2,2] [2,5,0]\n[1,2] [2,2] [5,0]"}, {"full_text": "Example 3:\nInput: nums = [3,2,1]\nOutput: 0\nExplanation: There is no good way to split nums.", "input": "Input: nums = [3,2,1]", "output": "Output: 0", "explanation": "Explanation: There is no good way to split nums."}], "constraints": "Constraints:\n3 <= nums.length <= 10^5\n0 <= nums[i] <= 10^4", "notes": ""}, "1711": {"label": "Medium", "title": "Count Good Meals", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.2816, "total_accepted": 22100.0, "total_submissions": 78500.0, "testcase_example": "'[1,3,5,7,9]'", "body": "A good meal is a meal that contains exactly two different food items with a sum of deliciousness equal to a power of two.\nYou can pick any two different foods to make a good meal.\nGiven an array of integers deliciousness where deliciousness[i] is the deliciousness of the i^\u200b\u200b\u200b\u200b\u200b\u200bth\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b item of food, return the number of different good meals you can make from this list modulo 10^9 + 7.\nNote that items with different indices are considered different even if they have the same deliciousness value.", "examples": [{"full_text": "Example 1:\nInput: deliciousness = [1,3,5,7,9]\nOutput: 4\nExplanation: The good meals are (1,3), (1,7), (3,5) and, (7,9).\nTheir respective sums are 4, 8, 8, and 16, all of which are powers of 2.", "input": "Input: deliciousness = [1,3,5,7,9]", "output": "Output: 4", "explanation": "Explanation: The good meals are (1,3), (1,7), (3,5) and, (7,9).\nTheir respective sums are 4, 8, 8, and 16, all of which are powers of 2."}, {"full_text": "Example 2:\nInput: deliciousness = [1,1,1,3,3,3,7]\nOutput: 15\nExplanation: The good meals are (1,1) with 3 ways, (1,3) with 9 ways, and (1,7) with 3 ways.", "input": "Input: deliciousness = [1,1,1,3,3,3,7]", "output": "Output: 15", "explanation": "Explanation: The good meals are (1,1) with 3 ways, (1,3) with 9 ways, and (1,7) with 3 ways."}], "constraints": "Constraints:\n1 <= deliciousness.length <= 10^5\n0 <= deliciousness[i] <= 2^20", "notes": ""}, "1706": {"label": "Medium", "title": "Where Will the Ball Fall", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6622, "total_accepted": 24800.0, "total_submissions": 37500.0, "testcase_example": "'[[1,1,1,-1,-1],[1,1,1,-1,-1],[-1,-1,-1,1,1],[1,1,1,1,-1],[-1,-1,-1,-1,-1]]'", "body": "You have a 2-D grid of size m x n representing a box, and you have n balls. The box is open on the top and bottom sides.\nEach cell in the box has a diagonal board spanning two corners of the cell that can redirect a ball to the right or to the left.\nA board that redirects the ball to the right spans the top-left corner to the bottom-right corner and is represented in the grid as 1.\nA board that redirects the ball to the left spans the top-right corner to the bottom-left corner and is represented in the grid as -1.\nWe drop one ball at the top of each column of the box. Each ball can get stuck in the box or fall out of the bottom. A ball gets stuck if it hits a \"V\" shaped pattern between two boards or if a board redirects the ball into either wall of the box.\nReturn an array answer of size n where answer[i] is the column that the ball falls out of at the bottom after dropping the ball from the i^th column at the top, or -1 if the ball gets stuck in the box.", "examples": [{"full_text": "Example 1:\nInput: grid = [[1,1,1,-1,-1],[1,1,1,-1,-1],[-1,-1,-1,1,1],[1,1,1,1,-1],[-1,-1,-1,-1,-1]]\nOutput: [1,-1,-1,-1,-1]\nExplanation: This example is shown in the photo.\nBall b0 is dropped at column 0 and falls out of the box at column 1.\nBall b1 is dropped at column 1 and will get stuck in the box between column 2 and 3 and row 1.\nBall b2 is dropped at column 2 and will get stuck on the box between column 2 and 3 and row 0.\nBall b3 is dropped at column 3 and will get stuck on the box between column 2 and 3 and row 0.\nBall b4 is dropped at column 4 and will get stuck on the box between column 2 and 3 and row 1.", "input": "Input: grid = [[1,1,1,-1,-1],[1,1,1,-1,-1],[-1,-1,-1,1,1],[1,1,1,1,-1],[-1,-1,-1,-1,-1]]", "output": "Output: [1,-1,-1,-1,-1]", "explanation": "Explanation: This example is shown in the photo.\nBall b0 is dropped at column 0 and falls out of the box at column 1.\nBall b1 is dropped at column 1 and will get stuck in the box between column 2 and 3 and row 1.\nBall b2 is dropped at column 2 and will get stuck on the box between column 2 and 3 and row 0.\nBall b3 is dropped at column 3 and will get stuck on the box between column 2 and 3 and row 0.\nBall b4 is dropped at column 4 and will get stuck on the box between column 2 and 3 and row 1."}, {"full_text": "Example 2:\nInput: grid = [[-1]]\nOutput: [-1]\nExplanation: The ball gets stuck against the left wall.", "input": "Input: grid = [[-1]]", "output": "Output: [-1]", "explanation": "Explanation: The ball gets stuck against the left wall."}, {"full_text": "Example 3:\nInput: grid = [[1,1,1,1,1,1],[-1,-1,-1,-1,-1,-1],[1,1,1,1,1,1],[-1,-1,-1,-1,-1,-1]]\nOutput: [0,1,2,3,4,-1]", "input": "Input: grid = [[1,1,1,1,1,1],[-1,-1,-1,-1,-1,-1],[1,1,1,1,1,1],[-1,-1,-1,-1,-1,-1]]", "output": "Output: [0,1,2,3,4,-1]", "explanation": ""}], "constraints": "Constraints:\nm == grid.length\nn == grid[i].length\n1 <= m, n <= 100\ngrid[i][j] is 1 or -1.", "notes": ""}, "1705": {"label": "Medium", "title": "Maximum Number of Eaten Apples", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3601, "total_accepted": 13500.0, "total_submissions": 37400.0, "testcase_example": "'[1,2,3,5,2]\\n[3,2,1,4,2]'", "body": "There is a special kind of apple tree that grows apples every day for n days. On the i^th day, the tree grows apples[i] apples that will rot after days[i] days, that is on day i + days[i] the apples will be rotten and cannot be eaten. On some days, the apple tree does not grow any apples, which are denoted by apples[i] == 0 and days[i] == 0.\nYou decided to eat at most one apple a day (to keep the doctors away). Note that you can keep eating after the first n days.\nGiven two integer arrays days and apples of length n, return the maximum number of apples you can eat.", "examples": [{"full_text": "Example 1:\nInput: apples = [1,2,3,5,2], days = [3,2,1,4,2]\nOutput: 7\nExplanation: You can eat 7 apples:\n- On the first day, you eat an apple that grew on the first day.\n- On the second day, you eat an apple that grew on the second day.\n- On the third day, you eat an apple that grew on the second day. After this day, the apples that grew on the third day rot.\n- On the fourth to the seventh days, you eat apples that grew on the fourth day.", "input": "Input: apples = [1,2,3,5,2], days = [3,2,1,4,2]", "output": "Output: 7", "explanation": "Explanation: You can eat 7 apples:\n- On the first day, you eat an apple that grew on the first day.\n- On the second day, you eat an apple that grew on the second day.\n- On the third day, you eat an apple that grew on the second day. After this day, the apples that grew on the third day rot.\n- On the fourth to the seventh days, you eat apples that grew on the fourth day."}, {"full_text": "Example 2:\nInput: apples = [3,0,0,0,0,2], days = [3,0,0,0,0,2]\nOutput: 5\nExplanation: You can eat 5 apples:\n- On the first to the third day you eat apples that grew on the first day.\n- Do nothing on the fouth and fifth days.\n- On the sixth and seventh days you eat apples that grew on the sixth day.", "input": "Input: apples = [3,0,0,0,0,2], days = [3,0,0,0,0,2]", "output": "Output: 5", "explanation": "Explanation: You can eat 5 apples:\n- On the first to the third day you eat apples that grew on the first day.\n- Do nothing on the fouth and fifth days.\n- On the sixth and seventh days you eat apples that grew on the sixth day."}], "constraints": "Constraints:\nn == apples.length == days.length\n1 <= n <= 2 * 10^4\n0 <= apples[i], days[i] <= 2 * 10^4\ndays[i] = 0 if and only if apples[i] = 0.", "notes": ""}, "1702": {"label": "Medium", "title": "Maximum Binary String After Change", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4496, "total_accepted": 8100.0, "total_submissions": 17900.0, "testcase_example": "'\"000110\"'", "body": "You are given a binary string binary consisting of only 0's or 1's. You can apply each of the following operations any number of times:\nOperation 1: If the number contains the substring \"00\", you can replace it with \"10\".\n\nFor example, \"00010\" -> \"10010\"\n\n\nOperation 2: If the number contains the substring \"10\", you can replace it with \"01\".\n\nFor example, \"00010\" -> \"00001\"\n\n\nReturn the maximum binary string you can obtain after any number of operations. Binary string x is greater than binary string y if x's decimal representation is greater than y's decimal representation.", "examples": [{"full_text": "Example 1:\nInput: binary = \"000110\"\nOutput: \"111011\"\nExplanation: A valid transformation sequence can be:\n\"000110\" -> \"000101\"\n\"000101\" -> \"100101\"\n\"100101\" -> \"110101\"\n\"110101\" -> \"110011\"\n\"110011\" -> \"111011\"", "input": "Input: binary = \"000110\"", "output": "Output: \"111011\"", "explanation": "Explanation: A valid transformation sequence can be:\n\"000110\" -> \"000101\"\n\"000101\" -> \"100101\"\n\"100101\" -> \"110101\"\n\"110101\" -> \"110011\"\n\"110011\" -> \"111011\""}, {"full_text": "Example 2:\nInput: binary = \"01\"\nOutput: \"01\"\nExplanation:\n\"01\" cannot be transformed any further.", "input": "Input: binary = \"01\"", "output": "Output: \"01\"", "explanation": "Explanation:\n\"01\" cannot be transformed any further."}], "constraints": "Constraints:\n1 <= binary.length <= 10^5\nbinary consist of '0' and '1'.", "notes": ""}, "1701": {"label": "Medium", "title": "Average Waiting Time", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6152000000000001, "total_accepted": 17900.0, "total_submissions": 29200.0, "testcase_example": "'[[1,2],[2,5],[4,3]]'", "body": "There is a restaurant with a single chef. You are given an array customers, where customers[i] = [arrivali, timei]:\narrivali is the arrival time of the i^th customer. The arrival times are sorted in non-decreasing order.\ntimei is the time needed to prepare the order of the i^th customer.\nWhen a customer arrives, he gives the chef his order, and the chef starts preparing it once he is idle. The customer waits till the chef finishes preparing his order. The chef does not prepare food for more than one customer at a time. The chef prepares food for customers in the order they were given in the input.\nReturn the average waiting time of all customers. Solutions within 10^-5 from the actual answer are considered accepted.", "examples": [{"full_text": "Example 1:\nInput: customers = [[1,2],[2,5],[4,3]]\nOutput: 5.00000\nExplanation:\n1) The first customer arrives at time 1, the chef takes his order and starts preparing it immediately at time 1, and finishes at time 3, so the waiting time of the first customer is 3 - 1 = 2.\n2) The second customer arrives at time 2, the chef takes his order and starts preparing it at time 3, and finishes at time 8, so the waiting time of the second customer is 8 - 2 = 6.\n3) The third customer arrives at time 4, the chef takes his order and starts preparing it at time 8, and finishes at time 11, so the waiting time of the third customer is 11 - 4 = 7.\nSo the average waiting time = (2 + 6 + 7) / 3 = 5.", "input": "Input: customers = [[1,2],[2,5],[4,3]]", "output": "Output: 5.00000", "explanation": "Explanation:\n1) The first customer arrives at time 1, the chef takes his order and starts preparing it immediately at time 1, and finishes at time 3, so the waiting time of the first customer is 3 - 1 = 2.\n2) The second customer arrives at time 2, the chef takes his order and starts preparing it at time 3, and finishes at time 8, so the waiting time of the second customer is 8 - 2 = 6.\n3) The third customer arrives at time 4, the chef takes his order and starts preparing it at time 8, and finishes at time 11, so the waiting time of the third customer is 11 - 4 = 7.\nSo the average waiting time = (2 + 6 + 7) / 3 = 5."}, {"full_text": "Example 2:\nInput: customers = [[5,2],[5,4],[10,3],[20,1]]\nOutput: 3.25000\nExplanation:\n1) The first customer arrives at time 5, the chef takes his order and starts preparing it immediately at time 5, and finishes at time 7, so the waiting time of the first customer is 7 - 5 = 2.\n2) The second customer arrives at time 5, the chef takes his order and starts preparing it at time 7, and finishes at time 11, so the waiting time of the second customer is 11 - 5 = 6.\n3) The third customer arrives at time 10, the chef takes his order and starts preparing it at time 11, and finishes at time 14, so the waiting time of the third customer is 14 - 10 = 4.\n4) The fourth customer arrives at time 20, the chef takes his order and starts preparing it immediately at time 20, and finishes at time 21, so the waiting time of the fourth customer is 21 - 20 = 1.\nSo the average waiting time = (2 + 6 + 4 + 1) / 4 = 3.25.", "input": "Input: customers = [[5,2],[5,4],[10,3],[20,1]]", "output": "Output: 3.25000", "explanation": "Explanation:\n1) The first customer arrives at time 5, the chef takes his order and starts preparing it immediately at time 5, and finishes at time 7, so the waiting time of the first customer is 7 - 5 = 2.\n2) The second customer arrives at time 5, the chef takes his order and starts preparing it at time 7, and finishes at time 11, so the waiting time of the second customer is 11 - 5 = 6.\n3) The third customer arrives at time 10, the chef takes his order and starts preparing it at time 11, and finishes at time 14, so the waiting time of the third customer is 14 - 10 = 4.\n4) The fourth customer arrives at time 20, the chef takes his order and starts preparing it immediately at time 20, and finishes at time 21, so the waiting time of the fourth customer is 21 - 20 = 1.\nSo the average waiting time = (2 + 6 + 4 + 1) / 4 = 3.25."}], "constraints": "Constraints:\n1 <= customers.length <= 10^5\n1 <= arrivali, timei <= 10^4\narrivali\n<= arrivali+1", "notes": ""}, "1696": {"label": "Medium", "title": "Jump Game VI", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4255, "total_accepted": 39900.0, "total_submissions": 93700.0, "testcase_example": "'[1,-1,-2,4,-7,3]\\n2'", "body": "You are given a 0-indexed integer array nums and an integer k.\nYou are initially standing at index 0. In one move, you can jump at most k steps forward without going outside the boundaries of the array. That is, you can jump from index i to any index in the range [i + 1, min(n - 1, i + k)] inclusive.\nYou want to reach the last index of the array (index n - 1). Your score is the sum of all nums[j] for each index j you visited in the array.\nReturn the maximum score you can get.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,-1,-2,4,-7,3], k = 2\nOutput: 7\nExplanation: You can choose your jumps forming the subsequence [1,-1,4,3] (underlined above). The sum is 7.", "input": "Input: nums = [1,-1,-2,4,-7,3], k = 2", "output": "Output: 7", "explanation": "Explanation: You can choose your jumps forming the subsequence [1,-1,4,3] (underlined above). The sum is 7."}, {"full_text": "Example 2:\nInput: nums = [10,-5,-2,4,0,3], k = 3\nOutput: 17\nExplanation: You can choose your jumps forming the subsequence [10,4,3] (underlined above). The sum is 17.", "input": "Input: nums = [10,-5,-2,4,0,3], k = 3", "output": "Output: 17", "explanation": "Explanation: You can choose your jumps forming the subsequence [10,4,3] (underlined above). The sum is 17."}, {"full_text": "Example 3:\nInput: nums = [1,-5,-20,4,-1,3,-6,-3], k = 2\nOutput: 0", "input": "Input: nums = [1,-5,-20,4,-1,3,-6,-3], k = 2", "output": "Output: 0", "explanation": ""}], "constraints": "Constraints:\n1 <= nums.length, k <= 10^5\n-10^4 <= nums[i] <= 10^4", "notes": ""}, "1695": {"label": "Medium", "title": "Maximum Erasure Value", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5233, "total_accepted": 39100.0, "total_submissions": 74700.0, "testcase_example": "'[4,2,4,5,6]'", "body": "You are given an array of positive integers nums and want to erase a subarray containing\nunique elements. The score you get by erasing the subarray is equal to the sum of its elements.\nReturn the maximum score you can get by erasing exactly one subarray.\nAn array b is called to be a subarray of a if it forms a contiguous subsequence of a, that is, if it is equal to a[l],a[l+1],...,a[r] for some (l,r).", "examples": [{"full_text": "Example 1:\nInput: nums = [4,2,4,5,6]\nOutput: 17\nExplanation: The optimal subarray here is [2,4,5,6].", "input": "Input: nums = [4,2,4,5,6]", "output": "Output: 17", "explanation": "Explanation: The optimal subarray here is [2,4,5,6]."}, {"full_text": "Example 2:\nInput: nums = [5,2,1,2,5,2,1,2,5]\nOutput: 8\nExplanation: The optimal subarray here is [5,2,1] or [1,2,5].", "input": "Input: nums = [5,2,1,2,5,2,1,2,5]", "output": "Output: 8", "explanation": "Explanation: The optimal subarray here is [5,2,1] or [1,2,5]."}], "constraints": "Constraints:\n1 <= nums.length <= 10^5\n1 <= nums[i] <= 10^4", "notes": ""}, "1690": {"label": "Medium", "title": "Stone Game VII", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5871999999999999, "total_accepted": 25300.0, "total_submissions": 43200.0, "testcase_example": "'[5,3,1,4,2]'", "body": "Alice and Bob take turns playing a game, with Alice starting first.\nThere are n stones arranged in a row. On each player's turn, they can remove either the leftmost stone or the rightmost stone from the row and receive points equal to the sum of the remaining stones' values in the row. The winner is the one with the higher score when there are no stones left to remove.\nBob found that he will always lose this game (poor Bob, he always loses), so he decided to minimize the score's difference. Alice's goal is to maximize the difference in the score.\nGiven an array of integers stones where stones[i] represents the value of the i^th stone from the left, return the difference in Alice and Bob's score if they both play optimally.", "examples": [{"full_text": "Example 1:\nInput: stones = [5,3,1,4,2]\nOutput: 6\nExplanation:\n- Alice removes 2 and gets 5 + 3 + 1 + 4 = 13 points. Alice = 13, Bob = 0, stones = [5,3,1,4].\n- Bob removes 5 and gets 3 + 1 + 4 = 8 points. Alice = 13, Bob = 8, stones = [3,1,4].\n- Alice removes 3 and gets 1 + 4 = 5 points. Alice = 18, Bob = 8, stones = [1,4].\n- Bob removes 1 and gets 4 points. Alice = 18, Bob = 12, stones = [4].\n- Alice removes 4 and gets 0 points. Alice = 18, Bob = 12, stones = [].\nThe score difference is 18 - 12 = 6.", "input": "Input: stones = [5,3,1,4,2]", "output": "Output: 6", "explanation": "Explanation:\n- Alice removes 2 and gets 5 + 3 + 1 + 4 = 13 points. Alice = 13, Bob = 0, stones = [5,3,1,4].\n- Bob removes 5 and gets 3 + 1 + 4 = 8 points. Alice = 13, Bob = 8, stones = [3,1,4].\n- Alice removes 3 and gets 1 + 4 = 5 points. Alice = 18, Bob = 8, stones = [1,4].\n- Bob removes 1 and gets 4 points. Alice = 18, Bob = 12, stones = [4].\n- Alice removes 4 and gets 0 points. Alice = 18, Bob = 12, stones = [].\nThe score difference is 18 - 12 = 6."}, {"full_text": "Example 2:\nInput: stones = [7,90,5,1,100,10,10,2]\nOutput: 122", "input": "Input: stones = [7,90,5,1,100,10,10,2]", "output": "Output: 122", "explanation": ""}], "constraints": "Constraints:\nn == stones.length\n2 <= n <= 1000\n1 <= stones[i] <= 1000", "notes": ""}, "1689": {"label": "Medium", "title": "Partitioning Into Minimum Number Of Deci-Binary Numbers", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.8776, "total_accepted": 71300.0, "total_submissions": 81200.0, "testcase_example": "'\"32\"'", "body": "A decimal number is called deci-binary if each of its digits is either 0 or 1 without any leading zeros. For example, 101 and 1100 are deci-binary, while 112 and 3001 are not.\nGiven a string n that represents a positive decimal integer, return the minimum number of positive deci-binary numbers needed so that they sum up to n.", "examples": [{"full_text": "Example 1:\nInput: n = \"32\"\nOutput: 3\nExplanation: 10 + 11 + 11 = 32", "input": "Input: n = \"32\"", "output": "Output: 3", "explanation": "Explanation: 10 + 11 + 11 = 32"}, {"full_text": "Example 2:\nInput: n = \"82734\"\nOutput: 8", "input": "Input: n = \"82734\"", "output": "Output: 8", "explanation": ""}, {"full_text": "Example 3:\nInput: n = \"27346209830709182346\"\nOutput: 9", "input": "Input: n = \"27346209830709182346\"", "output": "Output: 9", "explanation": ""}], "constraints": "Constraints:\n1 <= n.length <= 10^5\nn consists of only digits.\nn does not contain any leading zeros and represents a positive integer.", "notes": ""}, "1686": {"label": "Medium", "title": "Stone Game VI", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5347, "total_accepted": 10100.0, "total_submissions": 18900.0, "testcase_example": "'[1,3]\\n[2,1]'", "body": "Alice and Bob take turns playing a game, with Alice starting first.\nThere are n stones in a pile. On each player's turn, they can remove a stone from the pile and receive points based on the stone's value. Alice and Bob may value the stones differently.\nYou are given two integer arrays of length n, aliceValues and bobValues. Each aliceValues[i] and bobValues[i] represents how Alice and Bob, respectively, value the i^th stone.\nThe winner is the person with the most points after all the stones are chosen. If both players have the same amount of points, the game results in a draw. Both players will play optimally.\nBoth players know the other's values.\nDetermine the result of the game, and:\nIf Alice wins, return 1.\nIf Bob wins, return -1.\nIf the game results in a draw, return 0.", "examples": [{"full_text": "Example 1:\nInput: aliceValues = [1,3], bobValues = [2,1]\nOutput: 1\nExplanation:\nIf Alice takes stone 1 (0-indexed) first, Alice will receive 3 points.\nBob can only choose stone 0, and will only receive 2 points.\nAlice wins.", "input": "Input: aliceValues = [1,3], bobValues = [2,1]", "output": "Output: 1", "explanation": "Explanation:\nIf Alice takes stone 1 (0-indexed) first, Alice will receive 3 points.\nBob can only choose stone 0, and will only receive 2 points.\nAlice wins."}, {"full_text": "Example 2:\nInput: aliceValues = [1,2], bobValues = [3,1]\nOutput: 0\nExplanation:\nIf Alice takes stone 0, and Bob takes stone 1, they will both have 1 point.\nDraw.", "input": "Input: aliceValues = [1,2], bobValues = [3,1]", "output": "Output: 0", "explanation": "Explanation:\nIf Alice takes stone 0, and Bob takes stone 1, they will both have 1 point.\nDraw."}, {"full_text": "Example 3:\nInput: aliceValues = [2,4,3], bobValues = [1,6,7]\nOutput: -1\nExplanation:\nRegardless of how Alice plays, Bob will be able to have more points than Alice.\nFor example, if Alice takes stone 1, Bob can take stone 2, and Alice takes stone 0, Alice will have 6 points to Bob's 7.\nBob wins.", "input": "Input: aliceValues = [2,4,3], bobValues = [1,6,7]", "output": "Output: -1", "explanation": "Explanation:\nRegardless of how Alice plays, Bob will be able to have more points than Alice.\nFor example, if Alice takes stone 1, Bob can take stone 2, and Alice takes stone 0, Alice will have 6 points to Bob's 7.\nBob wins."}], "constraints": "Constraints:\nn == aliceValues.length == bobValues.length\n1 <= n <= 10^5\n1 <= aliceValues[i], bobValues[i] <= 100", "notes": ""}, "1685": {"label": "Medium", "title": "Sum of Absolute Differences in a Sorted Array", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6546, "total_accepted": 18300.0, "total_submissions": 27900.0, "testcase_example": "'[2,3,5]'", "body": "You are given an integer array nums sorted in non-decreasing order.\nBuild and return an integer array result with the same length as nums such that result[i] is equal to the summation of absolute differences between nums[i] and all the other elements in the array.\nIn other words, result[i] is equal to sum(|nums[i]-nums[j]|) where 0 <= j < nums.length and j != i (0-indexed).", "examples": [{"full_text": "Example 1:\nInput: nums = [2,3,5]\nOutput: [4,3,5]\nExplanation: Assuming the arrays are 0-indexed, then\nresult[0] = |2-2| + |2-3| + |2-5| = 0 + 1 + 3 = 4,\nresult[1] = |3-2| + |3-3| + |3-5| = 1 + 0 + 2 = 3,\nresult[2] = |5-2| + |5-3| + |5-5| = 3 + 2 + 0 = 5.", "input": "Input: nums = [2,3,5]", "output": "Output: [4,3,5]", "explanation": "Explanation: Assuming the arrays are 0-indexed, then\nresult[0] = |2-2| + |2-3| + |2-5| = 0 + 1 + 3 = 4,\nresult[1] = |3-2| + |3-3| + |3-5| = 1 + 0 + 2 = 3,\nresult[2] = |5-2| + |5-3| + |5-5| = 3 + 2 + 0 = 5."}, {"full_text": "Example 2:\nInput: nums = [1,4,6,8,10]\nOutput: [24,15,13,15,21]", "input": "Input: nums = [1,4,6,8,10]", "output": "Output: [24,15,13,15,21]", "explanation": ""}], "constraints": "Constraints:\n2 <= nums.length <= 10^5\n1 <= nums[i] <= nums[i + 1] <= 10^4", "notes": ""}, "1680": {"label": "Medium", "title": "Concatenation of Consecutive Binary Numbers", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5257999999999999, "total_accepted": 33100.0, "total_submissions": 63000.0, "testcase_example": "'1'", "body": "Given an integer n, return the decimal value of the binary string formed by concatenating the binary representations of 1 to n in order, modulo 10^9 + 7.", "examples": [{"full_text": "Example 1:\nInput: n = 1\nOutput: 1\nExplanation: \"1\" in binary corresponds to the decimal value 1.", "input": "Input: n = 1", "output": "Output: 1", "explanation": "Explanation: \"1\" in binary corresponds to the decimal value 1."}, {"full_text": "Example 2:\nInput: n = 3\nOutput: 27\nExplanation: In binary, 1, 2, and 3 corresponds to \"1\", \"10\", and \"11\".\nAfter concatenating them, we have \"11011\", which corresponds to the decimal value 27.", "input": "Input: n = 3", "output": "Output: 27", "explanation": "Explanation: In binary, 1, 2, and 3 corresponds to \"1\", \"10\", and \"11\".\nAfter concatenating them, we have \"11011\", which corresponds to the decimal value 27."}, {"full_text": "Example 3:\nInput: n = 12\nOutput: 505379714\nExplanation: The concatenation results in \"1101110010111011110001001101010111100\".\nThe decimal value of that is 118505380540.\nAfter modulo 10^9 + 7, the result is 505379714.", "input": "Input: n = 12", "output": "Output: 505379714", "explanation": "Explanation: The concatenation results in \"1101110010111011110001001101010111100\".\nThe decimal value of that is 118505380540.\nAfter modulo 10^9 + 7, the result is 505379714."}], "constraints": "Constraints:\n1 <= n <= 10^5", "notes": ""}, "1679": {"label": "Medium", "title": "Max Number of K-Sum Pairs", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5357, "total_accepted": 48900.0, "total_submissions": 91200.0, "testcase_example": "'[1,2,3,4]\\n5'", "body": "You are given an integer array nums and an integer k.\nIn one operation, you can pick two numbers from the array whose sum equals k and remove them from the array.\nReturn the maximum number of operations you can perform on the array.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,2,3,4], k = 5\nOutput: 2\nExplanation: Starting with nums = [1,2,3,4]:\n- Remove numbers 1 and 4, then nums = [2,3]\n- Remove numbers 2 and 3, then nums = []\nThere are no more pairs that sum up to 5, hence a total of 2 operations.", "input": "Input: nums = [1,2,3,4], k = 5", "output": "Output: 2", "explanation": "Explanation: Starting with nums = [1,2,3,4]:\n- Remove numbers 1 and 4, then nums = [2,3]\n- Remove numbers 2 and 3, then nums = []\nThere are no more pairs that sum up to 5, hence a total of 2 operations."}, {"full_text": "Example 2:\nInput: nums = [3,1,3,4,3], k = 6\nOutput: 1\nExplanation: Starting with nums = [3,1,3,4,3]:\n- Remove the first two 3's, then nums = [1,4,3]\nThere are no more pairs that sum up to 6, hence a total of 1 operation.", "input": "Input: nums = [3,1,3,4,3], k = 6", "output": "Output: 1", "explanation": "Explanation: Starting with nums = [3,1,3,4,3]:\n- Remove the first two 3's, then nums = [1,4,3]\nThere are no more pairs that sum up to 6, hence a total of 1 operation."}], "constraints": "Constraints:\n1 <= nums.length <= 10^5\n1 <= nums[i] <= 10^9\n1 <= k <= 10^9", "notes": ""}, "1674": {"label": "Medium", "title": "Minimum Moves to Make Array Complementary", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.373, "total_accepted": 5600.0, "total_submissions": 14900.0, "testcase_example": "'[1,2,4,3]\\n4'", "body": "You are given an integer array nums of even length n and an integer limit. In one move, you can replace any integer from nums with another integer between 1 and limit, inclusive.\nThe array nums is complementary if for all indices i (0-indexed), nums[i] + nums[n - 1 - i] equals the same number. For example, the array [1,2,3,4] is complementary because for all indices i, nums[i] + nums[n - 1 - i] = 5.\nReturn the minimum number of moves required to make nums complementary.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,2,4,3], limit = 4\nOutput: 1\nExplanation: In 1 move, you can change nums to [1,2,2,3] (underlined elements are changed).\nnums[0] + nums[3] = 1 + 3 = 4.\nnums[1] + nums[2] = 2 + 2 = 4.\nnums[2] + nums[1] = 2 + 2 = 4.\nnums[3] + nums[0] = 3 + 1 = 4.\nTherefore, nums[i] + nums[n-1-i] = 4 for every i, so nums is complementary.", "input": "Input: nums = [1,2,4,3], limit = 4", "output": "Output: 1", "explanation": "Explanation: In 1 move, you can change nums to [1,2,2,3] (underlined elements are changed).\nnums[0] + nums[3] = 1 + 3 = 4.\nnums[1] + nums[2] = 2 + 2 = 4.\nnums[2] + nums[1] = 2 + 2 = 4.\nnums[3] + nums[0] = 3 + 1 = 4.\nTherefore, nums[i] + nums[n-1-i] = 4 for every i, so nums is complementary."}, {"full_text": "Example 2:\nInput: nums = [1,2,2,1], limit = 2\nOutput: 2\nExplanation: In 2 moves, you can change nums to [2,2,2,2]. You cannot change any number to 3 since 3 > limit.", "input": "Input: nums = [1,2,2,1], limit = 2", "output": "Output: 2", "explanation": "Explanation: In 2 moves, you can change nums to [2,2,2,2]. You cannot change any number to 3 since 3 > limit."}, {"full_text": "Example 3:\nInput: nums = [1,2,1,2], limit = 2\nOutput: 0\nExplanation: nums is already complementary.", "input": "Input: nums = [1,2,1,2], limit = 2", "output": "Output: 0", "explanation": "Explanation: nums is already complementary."}], "constraints": "Constraints:\nn == nums.length\n2 <= n\n<=\n10^5\n1 <= nums[i]\n<= limit <=\n10^5\nn is even.", "notes": ""}, "1673": {"label": "Medium", "title": "Find the Most Competitive Subsequence", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.47909999999999997, "total_accepted": 39900.0, "total_submissions": 83200.0, "testcase_example": "'[3,5,2,6]\\n2'", "body": "Given an integer array nums and a positive integer k, return the most competitive subsequence of nums of size k.\nAn array's subsequence is a resulting sequence obtained by erasing some (possibly zero) elements from the array.\nWe define that a subsequence a is more competitive than a subsequence b (of the same length) if in the first position where a and b differ, subsequence a has a number less than the corresponding number in b. For example, [1,3,4] is more competitive than [1,3,5] because the first position they differ is at the final number, and 4 is less than 5.", "examples": [{"full_text": "Example 1:\nInput: nums = [3,5,2,6], k = 2\nOutput: [2,6]\nExplanation: Among the set of every possible subsequence: {[3,5], [3,2], [3,6], [5,2], [5,6], [2,6]}, [2,6] is the most competitive.", "input": "Input: nums = [3,5,2,6], k = 2", "output": "Output: [2,6]", "explanation": "Explanation: Among the set of every possible subsequence: {[3,5], [3,2], [3,6], [5,2], [5,6], [2,6]}, [2,6] is the most competitive."}, {"full_text": "Example 2:\nInput: nums = [2,4,3,3,5,4,9,6], k = 4\nOutput: [2,3,3,4]", "input": "Input: nums = [2,4,3,3,5,4,9,6], k = 4", "output": "Output: [2,3,3,4]", "explanation": ""}], "constraints": "Constraints:\n1 <= nums.length <= 10^5\n0 <= nums[i] <= 10^9\n1 <= k <= nums.length", "notes": ""}, "1670": {"label": "Medium", "title": "Design Front Middle Back Queue", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5547, "total_accepted": 13400.0, "total_submissions": 24200.0, "testcase_example": "'[\"FrontMiddleBackQueue\",\"pushFront\",\"pushBack\",\"pushMiddle\",\"pushMiddle\",\"popFront\",\"popMiddle\",\"popMiddle\",\"popBack\",\"popFront\"]\\n' +\n  '[[],[1],[2],[3],[4],[],[],[],[],[]]'", "body": "Design a queue that supports push and pop operations in the front, middle, and back.\nImplement the FrontMiddleBack class:\nFrontMiddleBack() Initializes the queue.\nvoid pushFront(int val) Adds val to the front of the queue.\nvoid pushMiddle(int val) Adds val to the middle of the queue.\nvoid pushBack(int val) Adds val to the back of the queue.\nint popFront() Removes the front element of the queue and returns it. If the queue is empty, return -1.\nint popMiddle() Removes the middle element of the queue and returns it. If the queue is empty, return -1.\nint popBack() Removes the back element of the queue and returns it. If the queue is empty, return -1.\nNotice that when there are two middle position choices, the operation is performed on the frontmost middle position choice. For example:\nPushing 6 into the middle of [1, 2, 3, 4, 5] results in [1, 2, 6, 3, 4, 5].\nPopping the middle from [1, 2, 3, 4, 5, 6] returns 3 and results in [1, 2, 4, 5, 6].", "examples": [{"full_text": "Example 1:\nInput:\n[\"FrontMiddleBackQueue\", \"pushFront\", \"pushBack\", \"pushMiddle\", \"pushMiddle\", \"popFront\", \"popMiddle\", \"popMiddle\", \"popBack\", \"popFront\"]\n[[], [1], [2], [3], [4], [], [], [], [], []]\nOutput:\n[null, null, null, null, null, 1, 3, 4, 2, -1]\nExplanation:\nFrontMiddleBackQueue q = new FrontMiddleBackQueue();\nq.pushFront(1); // [1]\nq.pushBack(2); // [1, 2]\nq.pushMiddle(3); // [1, 3, 2]\nq.pushMiddle(4); // [1, 4, 3, 2]\nq.popFront(); // return 1 -> [4, 3, 2]\nq.popMiddle(); // return 3 -> [4, 2]\nq.popMiddle(); // return 4 -> [2]\nq.popBack(); // return 2 -> []\nq.popFront(); // return -1 -> [] (The queue is empty)", "input": "Input:\n[\"FrontMiddleBackQueue\", \"pushFront\", \"pushBack\", \"pushMiddle\", \"pushMiddle\", \"popFront\", \"popMiddle\", \"popMiddle\", \"popBack\", \"popFront\"]\n[[], [1], [2], [3], [4], [], [], [], [], []]", "output": "Output:\n[null, null, null, null, null, 1, 3, 4, 2, -1]", "explanation": "Explanation:\nFrontMiddleBackQueue q = new FrontMiddleBackQueue();\nq.pushFront(1); // [1]\nq.pushBack(2); // [1, 2]\nq.pushMiddle(3); // [1, 3, 2]\nq.pushMiddle(4); // [1, 4, 3, 2]\nq.popFront(); // return 1 -> [4, 3, 2]\nq.popMiddle(); // return 3 -> [4, 2]\nq.popMiddle(); // return 4 -> [2]\nq.popBack(); // return 2 -> []\nq.popFront(); // return -1 -> [] (The queue is empty)"}], "constraints": "Constraints:\n1 <= val <= 10^9\nAt most\n1000\ncalls will be made to\npushFront,\npushMiddle,\npushBack, popFront, popMiddle, and popBack.", "notes": ""}, "1669": {"label": "Medium", "title": "Merge In Between Linked Lists", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7461, "total_accepted": 44900.0, "total_submissions": 60100.0, "testcase_example": "'[0,1,2,3,4,5]\\n3\\n4\\n[1000000,1000001,1000002]'", "body": "You are given two linked lists: list1 and list2 of sizes n and m respectively.\nRemove list1's nodes from the a^th node to the b^th node, and put list2 in their place.\nThe blue edges and nodes in the following figure indicate the result:\nBuild the result list and return its head.", "examples": [{"full_text": "Example 1:\nInput: list1 = [0,1,2,3,4,5], a = 3, b = 4, list2 = [1000000,1000001,1000002]\nOutput: [0,1,2,1000000,1000001,1000002,5]\nExplanation: We remove the nodes 3 and 4 and put the entire list2 in their place. The blue edges and nodes in the above figure indicate the result.", "input": "Input: list1 = [0,1,2,3,4,5], a = 3, b = 4, list2 = [1000000,1000001,1000002]", "output": "Output: [0,1,2,1000000,1000001,1000002,5]", "explanation": "Explanation: We remove the nodes 3 and 4 and put the entire list2 in their place. The blue edges and nodes in the above figure indicate the result."}, {"full_text": "Example 2:\nInput: list1 = [0,1,2,3,4,5,6], a = 2, b = 5, list2 = [1000000,1000001,1000002,1000003,1000004]\nOutput: [0,1,1000000,1000001,1000002,1000003,1000004,6]\nExplanation: The blue edges and nodes in the above figure indicate the result.", "input": "Input: list1 = [0,1,2,3,4,5,6], a = 2, b = 5, list2 = [1000000,1000001,1000002,1000003,1000004]", "output": "Output: [0,1,1000000,1000001,1000002,1000003,1000004,6]", "explanation": "Explanation: The blue edges and nodes in the above figure indicate the result."}], "constraints": "Constraints:\n3 <= list1.length <= 10^4\n1 <= a <= b < list1.length - 1\n1 <= list2.length <= 10^4", "notes": ""}, "1664": {"label": "Medium", "title": "Ways to Make a Fair Array", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6274000000000001, "total_accepted": 21800.0, "total_submissions": 34800.0, "testcase_example": "'[2,1,6,4]'", "body": "You are given an integer array\nnums. You can choose exactly one index (0-indexed) and remove the element. Notice that the index of the elements may change after the removal.\nFor example, if nums = [6,1,7,4,1]:\nChoosing to remove index 1 results in nums = [6,7,4,1].\nChoosing to remove index 2 results in nums = [6,1,4,1].\nChoosing to remove index 4 results in nums = [6,1,7,4].\nAn array is fair if the sum of the odd-indexed values equals the sum of the even-indexed values.\nReturn the number of indices that you could choose such that after the removal, nums is fair.", "examples": [{"full_text": "Example 1:\nInput: nums = [2,1,6,4]\nOutput: 1\nExplanation:\nRemove index 0: [1,6,4] -> Even sum: 1 + 4 = 5. Odd sum: 6. Not fair.\nRemove index 1: [2,6,4] -> Even sum: 2 + 4 = 6. Odd sum: 6. Fair.\nRemove index 2: [2,1,4] -> Even sum: 2 + 4 = 6. Odd sum: 1. Not fair.\nRemove index 3: [2,1,6] -> Even sum: 2 + 6 = 8. Odd sum: 1. Not fair.\nThere is 1 index that you can remove to make nums fair.", "input": "Input: nums = [2,1,6,4]", "output": "Output: 1", "explanation": "Explanation:\nRemove index 0: [1,6,4] -> Even sum: 1 + 4 = 5. Odd sum: 6. Not fair.\nRemove index 1: [2,6,4] -> Even sum: 2 + 4 = 6. Odd sum: 6. Fair.\nRemove index 2: [2,1,4] -> Even sum: 2 + 4 = 6. Odd sum: 1. Not fair.\nRemove index 3: [2,1,6] -> Even sum: 2 + 6 = 8. Odd sum: 1. Not fair.\nThere is 1 index that you can remove to make nums fair."}, {"full_text": "Example 2:\nInput: nums = [1,1,1]\nOutput: 3\nExplanation:\nYou can remove any index and the remaining array is fair.", "input": "Input: nums = [1,1,1]", "output": "Output: 3", "explanation": "Explanation:\nYou can remove any index and the remaining array is fair."}, {"full_text": "Example 3:\nInput: nums = [1,2,3]\nOutput: 0\nExplanation:\nYou cannot make a fair array after removing any index.", "input": "Input: nums = [1,2,3]", "output": "Output: 0", "explanation": "Explanation:\nYou cannot make a fair array after removing any index."}], "constraints": "Constraints:\n1 <= nums.length <= 10^5\n1 <= nums[i] <= 10^4", "notes": ""}, "1663": {"label": "Medium", "title": "Smallest String With A Given Numeric Value", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6405, "total_accepted": 36600.0, "total_submissions": 57100.0, "testcase_example": "'3\\n27'", "body": "The numeric value of a lowercase character is defined as its position (1-indexed) in the alphabet, so the numeric value of a is 1, the numeric value of b is 2, the numeric value of c is 3, and so on.\nThe numeric value of a string consisting of lowercase characters is defined as the sum of its characters' numeric values. For example, the numeric value of the string \"abe\" is equal to 1 + 2 + 5 = 8.\nYou are given two integers n and k. Return the lexicographically smallest string with length equal to n and numeric value equal to k.\nNote that a string x is lexicographically smaller than string y if x comes before y in dictionary order, that is, either x is a prefix of y, or if i is the first position such that x[i] != y[i], then x[i] comes before y[i] in alphabetic order.", "examples": [{"full_text": "Example 1:\nInput: n = 3, k = 27\nOutput: \"aay\"\nExplanation: The numeric value of the string is 1 + 1 + 25 = 27, and it is the smallest string with such a value and length equal to 3.", "input": "Input: n = 3, k = 27", "output": "Output: \"aay\"", "explanation": "Explanation: The numeric value of the string is 1 + 1 + 25 = 27, and it is the smallest string with such a value and length equal to 3."}, {"full_text": "Example 2:\nInput: n = 5, k = 73\nOutput: \"aaszz\"", "input": "Input: n = 5, k = 73", "output": "Output: \"aaszz\"", "explanation": ""}], "constraints": "Constraints:\n1 <= n <= 10^5\nn <= k <= 26 * n", "notes": ""}, "1658": {"label": "Medium", "title": "Minimum Operations to Reduce X to Zero", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3345, "total_accepted": 43900.0, "total_submissions": 131200.0, "testcase_example": "'[1,1,4,2,3]\\n5'", "body": "You are given an integer array nums and an integer x. In one operation, you can either remove the leftmost or the rightmost element from the array nums and subtract its value from x. Note that this modifies the array for future operations.\nReturn the minimum number of operations to reduce x to exactly 0 if it is possible, otherwise, return -1.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,1,4,2,3], x = 5\nOutput: 2\nExplanation: The optimal solution is to remove the last two elements to reduce x to zero.", "input": "Input: nums = [1,1,4,2,3], x = 5", "output": "Output: 2", "explanation": "Explanation: The optimal solution is to remove the last two elements to reduce x to zero."}, {"full_text": "Example 2:\nInput: nums = [5,6,7,8,9], x = 4\nOutput: -1", "input": "Input: nums = [5,6,7,8,9], x = 4", "output": "Output: -1", "explanation": ""}, {"full_text": "Example 3:\nInput: nums = [3,2,20,1,1,3], x = 10\nOutput: 5\nExplanation: The optimal solution is to remove the last three elements and the first two elements (5 operations in total) to reduce x to zero.", "input": "Input: nums = [3,2,20,1,1,3], x = 10", "output": "Output: 5", "explanation": "Explanation: The optimal solution is to remove the last three elements and the first two elements (5 operations in total) to reduce x to zero."}], "constraints": "Constraints:\n1 <= nums.length <= 10^5\n1 <= nums[i] <= 10^4\n1 <= x <= 10^9", "notes": ""}, "1657": {"label": "Medium", "title": "Determine if Two Strings Are Close", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5462, "total_accepted": 38100.0, "total_submissions": 69800.0, "testcase_example": "'\"abc\"\\n\"bca\"'", "body": "Two strings are considered close if you can attain one from the other using the following operations:\nOperation 1: Swap any two existing characters.\n\nFor example, abcde -> aecdb\n\n\nOperation 2: Transform every occurrence of one existing character into another existing character, and do the same with the other character.\n\nFor example, aacabb -> bbcbaa (all a's turn into b's, and all b's turn into a's)\n\n\nYou can use the operations on either string as many times as necessary.\nGiven two strings, word1 and word2, return true if word1 and word2 are close, and false otherwise.", "examples": [{"full_text": "Example 1:\nInput: word1 = \"abc\", word2 = \"bca\"\nOutput: true\nExplanation: You can attain word2 from word1 in 2 operations.\nApply Operation 1: \"abc\" -> \"acb\"\nApply Operation 1: \"acb\" -> \"bca\"", "input": "Input: word1 = \"abc\", word2 = \"bca\"", "output": "Output: true", "explanation": "Explanation: You can attain word2 from word1 in 2 operations.\nApply Operation 1: \"abc\" -> \"acb\"\nApply Operation 1: \"acb\" -> \"bca\""}, {"full_text": "Example 2:\nInput: word1 = \"a\", word2 = \"aa\"\nOutput: false\nExplanation: It is impossible to attain word2 from word1, or vice versa, in any number of operations.", "input": "Input: word1 = \"a\", word2 = \"aa\"", "output": "Output: false", "explanation": "Explanation: It is impossible to attain word2 from word1, or vice versa, in any number of operations."}, {"full_text": "Example 3:\nInput: word1 = \"cabbba\", word2 = \"abbccc\"\nOutput: true\nExplanation: You can attain word2 from word1 in 3 operations.\nApply Operation 1: \"cabbba\" -> \"caabbb\"\nApply Operation 2: \"caabbb\" -> \"baaccc\"\nApply Operation 2: \"baaccc\" -> \"abbccc\"", "input": "Input: word1 = \"cabbba\", word2 = \"abbccc\"", "output": "Output: true", "explanation": "Explanation: You can attain word2 from word1 in 3 operations.\nApply Operation 1: \"cabbba\" -> \"caabbb\"\nApply Operation 2: \"caabbb\" -> \"baaccc\"\nApply Operation 2: \"baaccc\" -> \"abbccc\""}], "constraints": "Constraints:\n1 <= word1.length, word2.length <= 10^5\nword1 and word2 contain\nonly lowercase English letters.", "notes": ""}, "1654": {"label": "Medium", "title": "Minimum Jumps to Reach Home", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.25989999999999996, "total_accepted": 17300.0, "total_submissions": 66700.0, "testcase_example": "'[14,4,18,1,15]\\n3\\n15\\n9'", "body": "A certain bug's home is on the x-axis at position x. Help them get there from position 0.\nThe bug jumps according to the following rules:\nIt can jump exactly a positions forward (to the right).\nIt can jump exactly b positions backward (to the left).\nIt cannot jump backward twice in a row.\nIt cannot jump to any forbidden positions.\nThe bug may jump forward beyond its home, but it cannot jump to positions numbered with negative integers.\nGiven an array of integers forbidden, where forbidden[i] means that the bug cannot jump to the position forbidden[i], and integers a, b, and x, return the minimum number of jumps needed for the bug to reach its home. If there is no possible sequence of jumps that lands the bug on position x, return -1.", "examples": [{"full_text": "Example 1:\nInput: forbidden = [14,4,18,1,15], a = 3, b = 15, x = 9\nOutput: 3\nExplanation: 3 jumps forward (0 -> 3 -> 6 -> 9) will get the bug home.", "input": "Input: forbidden = [14,4,18,1,15], a = 3, b = 15, x = 9", "output": "Output: 3", "explanation": "Explanation: 3 jumps forward (0 -> 3 -> 6 -> 9) will get the bug home."}, {"full_text": "Example 2:\nInput: forbidden = [8,3,16,6,12,20], a = 15, b = 13, x = 11\nOutput: -1", "input": "Input: forbidden = [8,3,16,6,12,20], a = 15, b = 13, x = 11", "output": "Output: -1", "explanation": ""}, {"full_text": "Example 3:\nInput: forbidden = [1,6,2,14,5,17,4], a = 16, b = 9, x = 7\nOutput: 2\nExplanation: One jump forward (0 -> 16) then one jump backward (16 -> 7) will get the bug home.", "input": "Input: forbidden = [1,6,2,14,5,17,4], a = 16, b = 9, x = 7", "output": "Output: 2", "explanation": "Explanation: One jump forward (0 -> 16) then one jump backward (16 -> 7) will get the bug home."}], "constraints": "Constraints:\n1 <= forbidden.length <= 1000\n1 <= a, b, forbidden[i] <= 2000\n0 <= x <= 2000\nAll the elements in forbidden are distinct.\nPosition x is not forbidden.", "notes": ""}, "1653": {"label": "Medium", "title": "Minimum Deletions to Make String Balanced", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5499, "total_accepted": 15900.0, "total_submissions": 28900.0, "testcase_example": "'\"aababbab\"'", "body": "You are given a string s consisting only of characters 'a' and 'b'\u200b\u200b\u200b\u200b.\nYou can delete any number of characters in s to make s balanced. s is balanced if there is no pair of indices (i,j) such that i < j and s[i] = 'b' and s[j]= 'a'.\nReturn the minimum number of deletions needed to make s balanced.", "examples": [{"full_text": "Example 1:\nInput: s = \"aababbab\"\nOutput: 2\nExplanation: You can either:\nDelete the characters at 0-indexed positions 2 and 6 (\"aababbab\" -> \"aaabbb\"), or\nDelete the characters at 0-indexed positions 3 and 6 (\"aababbab\" -> \"aabbbb\").", "input": "Input: s = \"aababbab\"", "output": "Output: 2", "explanation": "Explanation: You can either:\nDelete the characters at 0-indexed positions 2 and 6 (\"aababbab\" -> \"aaabbb\"), or\nDelete the characters at 0-indexed positions 3 and 6 (\"aababbab\" -> \"aabbbb\")."}, {"full_text": "Example 2:\nInput: s = \"bbaaaaabb\"\nOutput: 2\nExplanation: The only solution is to delete the first two characters.", "input": "Input: s = \"bbaaaaabb\"", "output": "Output: 2", "explanation": "Explanation: The only solution is to delete the first two characters."}], "constraints": "Constraints:\n1 <= s.length <= 10^5\ns[i] is\n'a' or 'b'\u200b\u200b.", "notes": ""}, "1648": {"label": "Medium", "title": "Sell Diminishing-Valued Colored Balls", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.31079999999999997, "total_accepted": 25000.0, "total_submissions": 80600.0, "testcase_example": "'[2,5]\\n4'", "body": "You have an inventory of different colored balls, and there is a customer that wants orders balls of any color.\nThe customer weirdly values the colored balls. Each colored ball's value is the number of balls of that color\nyou currently have in your inventory. For example, if you own 6 yellow balls, the customer would pay 6 for the first yellow ball. After the transaction, there are only 5 yellow balls left, so the next yellow ball is then valued at 5 (i.e., the value of the balls decreases as you sell more to the customer).\nYou are given an integer array, inventory, where inventory[i] represents the number of balls of the i^th color that you initially own. You are also given an integer orders, which represents the total number of balls that the customer wants. You can sell the balls in any order.\nReturn the maximum total value that you can attain after selling orders colored balls. As the answer may be too large, return it modulo 10^9 + 7.", "examples": [{"full_text": "Example 1:\nInput: inventory = [2,5], orders = 4\nOutput: 14\nExplanation: Sell the 1st color 1 time (2) and the 2nd color 3 times (5 + 4 + 3).\nThe maximum total value is 2 + 5 + 4 + 3 = 14.", "input": "Input: inventory = [2,5], orders = 4", "output": "Output: 14", "explanation": "Explanation: Sell the 1st color 1 time (2) and the 2nd color 3 times (5 + 4 + 3).\nThe maximum total value is 2 + 5 + 4 + 3 = 14."}, {"full_text": "Example 2:\nInput: inventory = [3,5], orders = 6\nOutput: 19\nExplanation: Sell the 1st color 2 times (3 + 2) and the 2nd color 4 times (5 + 4 + 3 + 2).\nThe maximum total value is 3 + 2 + 5 + 4 + 3 + 2 = 19.", "input": "Input: inventory = [3,5], orders = 6", "output": "Output: 19", "explanation": "Explanation: Sell the 1st color 2 times (3 + 2) and the 2nd color 4 times (5 + 4 + 3 + 2).\nThe maximum total value is 3 + 2 + 5 + 4 + 3 + 2 = 19."}], "constraints": "Constraints:\n1 <= inventory.length <= 10^5\n1 <= inventory[i] <= 10^9\n1 <= orders <= min(sum(inventory[i]), 10^9)", "notes": ""}, "1647": {"label": "Medium", "title": "Minimum Deletions to Make Character Frequencies Unique", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5626, "total_accepted": 71800.0, "total_submissions": 127500.0, "testcase_example": "'\"aab\"'", "body": "A string s is called good if there are no two different characters in s that have the same frequency.\nGiven a string s, return the minimum number of characters you need to delete to make s good.\nThe frequency of a character in a string is the number of times it appears in the string. For example, in the string \"aab\", the frequency of 'a' is 2, while the frequency of 'b' is 1.", "examples": [{"full_text": "Example 1:\nInput: s = \"aab\"\nOutput: 0\nExplanation: s is already good.", "input": "Input: s = \"aab\"", "output": "Output: 0", "explanation": "Explanation: s is already good."}, {"full_text": "Example 2:\nInput: s = \"aaabbbcc\"\nOutput: 2\nExplanation: You can delete two 'b's resulting in the good string \"aaabcc\".\nAnother way it to delete one 'b' and one 'c' resulting in the good string \"aaabbc\".", "input": "Input: s = \"aaabbbcc\"", "output": "Output: 2", "explanation": "Explanation: You can delete two 'b's resulting in the good string \"aaabcc\".\nAnother way it to delete one 'b' and one 'c' resulting in the good string \"aaabbc\"."}, {"full_text": "Example 3:\nInput: s = \"ceabaacb\"\nOutput: 2\nExplanation: You can delete both 'c's resulting in the good string \"eabaab\".\nNote that we only care about characters that are still in the string at the end (i.e. frequency of 0 is ignored).", "input": "Input: s = \"ceabaacb\"", "output": "Output: 2", "explanation": "Explanation: You can delete both 'c's resulting in the good string \"eabaab\".\nNote that we only care about characters that are still in the string at the end (i.e. frequency of 0 is ignored)."}], "constraints": "Constraints:\n1 <= s.length <= 10^5\ns\ncontains only lowercase English letters.", "notes": ""}, "1642": {"label": "Medium", "title": "Furthest Building You Can Reach", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.44770000000000004, "total_accepted": 43100.0, "total_submissions": 96300.0, "testcase_example": "'[4,2,7,6,9,14,12]\\n5\\n1'", "body": "You are given an integer array heights representing the heights of buildings, some bricks, and some ladders.\nYou start your journey from building 0 and move to the next building by possibly using bricks or ladders.\nWhile moving from building i to building i+1 (0-indexed),\nIf the current building's height is greater than or equal to the next building's height, you do not need a ladder or bricks.\nIf the current building's height is less than the next building's height, you can either use one ladder or (h[i+1] - h[i]) bricks.\nReturn the furthest building index (0-indexed) you can reach if you use the given ladders and bricks optimally.", "examples": [{"full_text": "Example 1:\nInput: heights = [4,2,7,6,9,14,12], bricks = 5, ladders = 1\nOutput: 4\nExplanation: Starting at building 0, you can follow these steps:\n- Go to building 1 without using ladders nor bricks since 4 >= 2.\n- Go to building 2 using 5 bricks. You must use either bricks or ladders because 2 < 7.\n- Go to building 3 without using ladders nor bricks since 7 >= 6.\n- Go to building 4 using your only ladder. You must use either bricks or ladders because 6 < 9.\nIt is impossible to go beyond building 4 because you do not have any more bricks or ladders.", "input": "Input: heights = [4,2,7,6,9,14,12], bricks = 5, ladders = 1", "output": "Output: 4", "explanation": "Explanation: Starting at building 0, you can follow these steps:\n- Go to building 1 without using ladders nor bricks since 4 >= 2.\n- Go to building 2 using 5 bricks. You must use either bricks or ladders because 2 < 7.\n- Go to building 3 without using ladders nor bricks since 7 >= 6.\n- Go to building 4 using your only ladder. You must use either bricks or ladders because 6 < 9.\nIt is impossible to go beyond building 4 because you do not have any more bricks or ladders."}, {"full_text": "Example 2:\nInput: heights = [4,12,2,7,3,18,20,3,19], bricks = 10, ladders = 2\nOutput: 7", "input": "Input: heights = [4,12,2,7,3,18,20,3,19], bricks = 10, ladders = 2", "output": "Output: 7", "explanation": ""}, {"full_text": "Example 3:\nInput: heights = [14,3,19,3], bricks = 17, ladders = 0\nOutput: 3", "input": "Input: heights = [14,3,19,3], bricks = 17, ladders = 0", "output": "Output: 3", "explanation": ""}], "constraints": "Constraints:\n1 <= heights.length <= 10^5\n1 <= heights[i] <= 10^6\n0 <= bricks <= 10^9\n0 <= ladders <= heights.length", "notes": ""}, "1641": {"label": "Medium", "title": "Count Sorted Vowel Strings", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.748, "total_accepted": 78500.0, "total_submissions": 105000.0, "testcase_example": "'1'", "body": "Given an integer n, return the number of strings of length n that consist only of vowels (a, e, i, o, u) and are lexicographically sorted.\nA string s is lexicographically sorted if for all valid i, s[i] is the same as or comes before s[i+1] in the alphabet.", "examples": [{"full_text": "Example 1:\nInput: n = 1\nOutput: 5\nExplanation: The 5 sorted strings that consist of vowels only are [\"a\",\"e\",\"i\",\"o\",\"u\"].", "input": "Input: n = 1", "output": "Output: 5", "explanation": "Explanation: The 5 sorted strings that consist of vowels only are [\"a\",\"e\",\"i\",\"o\",\"u\"]."}, {"full_text": "Example 2:\nInput: n = 2\nOutput: 15\nExplanation: The 15 sorted strings that consist of vowels only are\n[\"aa\",\"ae\",\"ai\",\"ao\",\"au\",\"ee\",\"ei\",\"eo\",\"eu\",\"ii\",\"io\",\"iu\",\"oo\",\"ou\",\"uu\"].\nNote that \"ea\" is not a valid string since 'e' comes after 'a' in the alphabet.", "input": "Input: n = 2", "output": "Output: 15", "explanation": "Explanation: The 15 sorted strings that consist of vowels only are\n[\"aa\",\"ae\",\"ai\",\"ao\",\"au\",\"ee\",\"ei\",\"eo\",\"eu\",\"ii\",\"io\",\"iu\",\"oo\",\"ou\",\"uu\"].\nNote that \"ea\" is not a valid string since 'e' comes after 'a' in the alphabet."}, {"full_text": "Example 3:\nInput: n = 33\nOutput: 66045", "input": "Input: n = 33", "output": "Output: 66045", "explanation": ""}], "constraints": "Constraints:\n1 <= n <= 50", "notes": ""}, "1638": {"label": "Medium", "title": "Count Substrings That Differ by One Character", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7182, "total_accepted": 15400.0, "total_submissions": 21400.0, "testcase_example": "'\"aba\"\\n\"baba\"'", "body": "Given two strings s and t, find the number of ways you can choose a non-empty substring of s and replace a single character by a different character such that the resulting substring is a substring of t. In other words, find the number of substrings in s that differ from some substring in t by exactly one character.\nFor example, the underlined substrings in \"computer\" and \"computation\" only differ by the 'e'/'a', so this is a valid way.\nReturn the number of substrings that satisfy the condition above.\nA substring is a contiguous sequence of characters within a string.", "examples": [{"full_text": "Example 1:\nInput: s = \"aba\", t = \"baba\"\nOutput: 6\nExplanation: The following are the pairs of substrings from s and t that differ by exactly 1 character:\n(\"aba\", \"baba\")\n(\"aba\", \"baba\")\n(\"aba\", \"baba\")\n(\"aba\", \"baba\")\n(\"aba\", \"baba\")\n(\"aba\", \"baba\")\nThe underlined portions are the substrings that are chosen from s and t.\n\u200b\u200bExample 2:\nInput: s = \"ab\", t = \"bb\"\nOutput: 3\nExplanation: The following are the pairs of substrings from s and t that differ by 1 character:\n(\"ab\", \"bb\")\n(\"ab\", \"bb\")\n(\"ab\", \"bb\")\n\u200b\u200b\u200b\u200bThe underlined portions are the substrings that are chosen from s and t.", "input": "Input: s = \"aba\", t = \"baba\"\nInput: s = \"ab\", t = \"bb\"", "output": "Output: 6\nOutput: 3", "explanation": "Explanation: The following are the pairs of substrings from s and t that differ by exactly 1 character:\n(\"aba\", \"baba\")\n(\"aba\", \"baba\")\n(\"aba\", \"baba\")\n(\"aba\", \"baba\")\n(\"aba\", \"baba\")\n(\"aba\", \"baba\")\nThe underlined portions are the substrings that are chosen from s and t.\n\u200b\u200bExample 2:\nExplanation: The following are the pairs of substrings from s and t that differ by 1 character:\n(\"ab\", \"bb\")\n(\"ab\", \"bb\")\n(\"ab\", \"bb\")\n\u200b\u200b\u200b\u200bThe underlined portions are the substrings that are chosen from s and t."}], "constraints": "Constraints:\n1 <= s.length, t.length <= 100\ns and t consist of lowercase English letters only.", "notes": ""}, "1637": {"label": "Medium", "title": "Widest Vertical Area Between Two Points Containing No Points", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.8403, "total_accepted": 26500.0, "total_submissions": 31600.0, "testcase_example": "'[[8,7],[9,9],[7,4],[9,7]]'", "body": "Given n points on a 2D plane where points[i] = [xi, yi], Return\nthe widest vertical area between two points such that no points are inside the area.\nA vertical area is an area of fixed-width extending infinitely along the y-axis (i.e., infinite height). The widest vertical area is the one with the maximum width.\nNote that points on the edge of a vertical area are not considered included in the area.", "examples": [{"full_text": "Example 1:\n\u200b\nInput: points = [[8,7],[9,9],[7,4],[9,7]]\nOutput: 1\nExplanation: Both the red and the blue area are optimal.", "input": "Input: points = [[8,7],[9,9],[7,4],[9,7]]", "output": "Output: 1", "explanation": "Explanation: Both the red and the blue area are optimal."}, {"full_text": "Example 2:\nInput: points = [[3,1],[9,0],[1,0],[1,4],[5,3],[8,8]]\nOutput: 3", "input": "Input: points = [[3,1],[9,0],[1,0],[1,4],[5,3],[8,8]]", "output": "Output: 3", "explanation": ""}], "constraints": "Constraints:\nn == points.length\n2 <= n <= 10^5\npoints[i].length == 2\n0 <= xi, yi\n<= 10^9", "notes": ""}, "1631": {"label": "Medium", "title": "Path With Minimum Effort", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.517, "total_accepted": 69200.0, "total_submissions": 133800.0, "testcase_example": "'[[1,2,2],[3,8,2],[5,3,5]]'", "body": "You are a hiker preparing for an upcoming hike. You are given heights, a 2D array of size rows x columns, where heights[row][col] represents the height of cell (row, col). You are situated in the top-left cell, (0, 0), and you hope to travel to the bottom-right cell, (rows-1, columns-1) (i.e.,\n0-indexed). You can move up, down, left, or right, and you wish to find a route that requires the minimum effort.\nA route's effort is the maximum absolute difference in heights between two consecutive cells of the route.\nReturn the minimum effort required to travel from the top-left cell to the bottom-right cell.", "examples": [{"full_text": "Example 1:\nInput: heights = [[1,2,2],[3,8,2],[5,3,5]]\nOutput: 2\nExplanation: The route of [1,3,5,3,5] has a maximum absolute difference of 2 in consecutive cells.\nThis is better than the route of [1,2,2,2,5], where the maximum absolute difference is 3.", "input": "Input: heights = [[1,2,2],[3,8,2],[5,3,5]]", "output": "Output: 2", "explanation": "Explanation: The route of [1,3,5,3,5] has a maximum absolute difference of 2 in consecutive cells.\nThis is better than the route of [1,2,2,2,5], where the maximum absolute difference is 3."}, {"full_text": "Example 2:\nInput: heights = [[1,2,3],[3,8,4],[5,3,5]]\nOutput: 1\nExplanation: The route of [1,2,3,4,5] has a maximum absolute difference of 1 in consecutive cells, which is better than route [1,3,5,3,5].", "input": "Input: heights = [[1,2,3],[3,8,4],[5,3,5]]", "output": "Output: 1", "explanation": "Explanation: The route of [1,2,3,4,5] has a maximum absolute difference of 1 in consecutive cells, which is better than route [1,3,5,3,5]."}, {"full_text": "Example 3:\nInput: heights = [[1,2,1,1,1],[1,2,1,2,1],[1,2,1,2,1],[1,2,1,2,1],[1,1,1,2,1]]\nOutput: 0\nExplanation: This route does not require any effort.", "input": "Input: heights = [[1,2,1,1,1],[1,2,1,2,1],[1,2,1,2,1],[1,2,1,2,1],[1,1,1,2,1]]", "output": "Output: 0", "explanation": "Explanation: This route does not require any effort."}], "constraints": "Constraints:\nrows == heights.length\ncolumns == heights[i].length\n1 <= rows, columns <= 100\n1 <= heights[i][j] <= 10^6", "notes": ""}, "1630": {"label": "Medium", "title": "Arithmetic Subarrays", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7809, "total_accepted": 28100.0, "total_submissions": 35900.0, "testcase_example": "'[4,6,5,9,3,7]\\n[0,0,2]\\n[2,3,5]'", "body": "A sequence of numbers is called arithmetic if it consists of at least two elements, and the difference between every two consecutive elements is the same. More formally, a sequence s is arithmetic if and only if s[i+1] - s[i] == s[1] - s[0] for all valid i.\nFor example, these are arithmetic sequences:\n1, 3, 5, 7, 9\n7, 7, 7, 7\n3, -1, -5, -9\nThe following sequence is not arithmetic:\n1, 1, 2, 5, 7\nYou are given an array of n integers, nums, and two arrays of m integers each, l and r, representing the m range queries, where the i^th query is the range [l[i], r[i]]. All the arrays are 0-indexed.\nReturn a list of boolean elements answer, where answer[i] is true if the subarray nums[l[i]], nums[l[i]+1], ... , nums[r[i]] can be rearranged to form an arithmetic sequence, and false otherwise.", "examples": [{"full_text": "Example 1:\nInput: nums = [4,6,5,9,3,7], l = [0,0,2], r = [2,3,5]\nOutput: [true,false,true]\nExplanation:\nIn the 0^th query, the subarray is [4,6,5]. This can be rearranged as [6,5,4], which is an arithmetic sequence.\nIn the 1^st query, the subarray is [4,6,5,9]. This cannot be rearranged as an arithmetic sequence.\nIn the 2^nd query, the subarray is [5,9,3,7]. This can be rearranged as [3,5,7,9], which is an arithmetic sequence.", "input": "Input: nums = [4,6,5,9,3,7], l = [0,0,2], r = [2,3,5]", "output": "Output: [true,false,true]", "explanation": "Explanation:\nIn the 0^th query, the subarray is [4,6,5]. This can be rearranged as [6,5,4], which is an arithmetic sequence.\nIn the 1^st query, the subarray is [4,6,5,9]. This cannot be rearranged as an arithmetic sequence.\nIn the 2^nd query, the subarray is [5,9,3,7]. This can be rearranged as [3,5,7,9], which is an arithmetic sequence."}, {"full_text": "Example 2:\nInput: nums = [-12,-9,-3,-12,-6,15,20,-25,-20,-15,-10], l = [0,1,6,4,8,7], r = [4,4,9,7,9,10]\nOutput: [false,true,false,false,true,true]", "input": "Input: nums = [-12,-9,-3,-12,-6,15,20,-25,-20,-15,-10], l = [0,1,6,4,8,7], r = [4,4,9,7,9,10]", "output": "Output: [false,true,false,false,true,true]", "explanation": ""}], "constraints": "Constraints:\nn == nums.length\nm == l.length\nm == r.length\n2 <= n <= 500\n1 <= m <= 500\n0 <= l[i] < r[i] < n\n-10^5 <= nums[i] <= 10^5", "notes": ""}, "1626": {"label": "Medium", "title": "Best Team With No Conflicts", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.40409999999999996, "total_accepted": 17100.0, "total_submissions": 42200.0, "testcase_example": "'[1,3,5,10,15]\\n[1,2,3,4,5]'", "body": "You are the manager of a basketball team. For the upcoming tournament, you want to choose the team with the highest overall score. The score of the team is the sum of scores of all the players in the team.\nHowever, the basketball team is not allowed to have conflicts. A conflict exists if a younger player has a strictly higher score than an older player. A conflict does not occur between players of the same age.\nGiven two lists, scores and ages, where each scores[i] and ages[i] represents the score and age of the i^th player, respectively, return the highest overall score of all possible basketball teams.", "examples": [{"full_text": "Example 1:\nInput: scores = [1,3,5,10,15], ages = [1,2,3,4,5]\nOutput: 34\nExplanation:\nYou can choose all the players.", "input": "Input: scores = [1,3,5,10,15], ages = [1,2,3,4,5]", "output": "Output: 34", "explanation": "Explanation:\nYou can choose all the players."}, {"full_text": "Example 2:\nInput: scores = [4,5,6,5], ages = [2,1,2,1]\nOutput: 16\nExplanation:\nIt is best to choose the last 3 players. Notice that you are allowed to choose multiple people of the same age.", "input": "Input: scores = [4,5,6,5], ages = [2,1,2,1]", "output": "Output: 16", "explanation": "Explanation:\nIt is best to choose the last 3 players. Notice that you are allowed to choose multiple people of the same age."}, {"full_text": "Example 3:\nInput: scores = [1,2,3,5], ages = [8,9,10,1]\nOutput: 6\nExplanation:\nIt is best to choose the first 3 players.", "input": "Input: scores = [1,2,3,5], ages = [8,9,10,1]", "output": "Output: 6", "explanation": "Explanation:\nIt is best to choose the first 3 players."}], "constraints": "Constraints:\n1 <= scores.length, ages.length <= 1000\nscores.length == ages.length\n1 <= scores[i] <= 10^6\n1 <= ages[i] <= 1000", "notes": ""}, "1625": {"label": "Medium", "title": "Lexicographically Smallest String After Applying Operations", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6613, "total_accepted": 10000.0, "total_submissions": 15100.0, "testcase_example": "'\"5525\"\\n9\\n2'", "body": "You are given a string s of even length consisting of digits from 0 to 9, and two integers a and b.\nYou can apply either of the following two operations any number of times and in any order on s:\nAdd a to all odd indices of s (0-indexed). Digits post 9 are cycled back to 0. For example, if s = \"3456\" and a = 5, s becomes \"3951\".\nRotate s to the right by b positions. For example, if s = \"3456\" and b = 1, s becomes \"6345\".\nReturn the lexicographically smallest string you can obtain by applying the above operations any number of times on s.\nA string a is lexicographically smaller than a string b (of the same length) if in the first position where a and b differ, string a has a letter that appears earlier in the alphabet than the corresponding letter in b. For example, \"0158\" is lexicographically smaller than \"0190\" because the first position they differ is at the third letter, and '5' comes before '9'.", "examples": [{"full_text": "Example 1:\nInput: s = \"5525\", a = 9, b = 2\nOutput: \"2050\"\nExplanation: We can apply the following operations:\nStart: \"5525\"\nRotate: \"2555\"\nAdd: \"2454\"\nAdd: \"2353\"\nRotate: \"5323\"\nAdd: \"5222\"\nAdd: \"5121\"\nRotate: \"2151\"\n\u200b\u200b\u200b\u200b\u200b\u200b\u200bAdd: \"2050\"\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\nThere is no way to obtain a string that is lexicographically smaller then \"2050\".", "input": "Input: s = \"5525\", a = 9, b = 2", "output": "Output: \"2050\"", "explanation": "Explanation: We can apply the following operations:\nStart: \"5525\"\nRotate: \"2555\"\nAdd: \"2454\"\nAdd: \"2353\"\nRotate: \"5323\"\nAdd: \"5222\"\nAdd: \"5121\"\nRotate: \"2151\"\n\u200b\u200b\u200b\u200b\u200b\u200b\u200bAdd: \"2050\"\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\nThere is no way to obtain a string that is lexicographically smaller then \"2050\"."}, {"full_text": "Example 2:\nInput: s = \"74\", a = 5, b = 1\nOutput: \"24\"\nExplanation: We can apply the following operations:\nStart: \"74\"\nRotate: \"47\"\n\u200b\u200b\u200b\u200b\u200b\u200b\u200bAdd: \"42\"\n\u200b\u200b\u200b\u200b\u200b\u200b\u200bRotate: \"24\"\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\nThere is no way to obtain a string that is lexicographically smaller then \"24\".", "input": "Input: s = \"74\", a = 5, b = 1", "output": "Output: \"24\"", "explanation": "Explanation: We can apply the following operations:\nStart: \"74\"\nRotate: \"47\"\n\u200b\u200b\u200b\u200b\u200b\u200b\u200bAdd: \"42\"\n\u200b\u200b\u200b\u200b\u200b\u200b\u200bRotate: \"24\"\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\nThere is no way to obtain a string that is lexicographically smaller then \"24\"."}, {"full_text": "Example 3:\nInput: s = \"0011\", a = 4, b = 2\nOutput: \"0011\"\nExplanation: There are no sequence of operations that will give us a lexicographically smaller string than \"0011\".", "input": "Input: s = \"0011\", a = 4, b = 2", "output": "Output: \"0011\"", "explanation": "Explanation: There are no sequence of operations that will give us a lexicographically smaller string than \"0011\"."}], "constraints": "Constraints:\n2 <= s.length <= 100\ns.length is even.\ns consists of digits from 0 to 9 only.\n1 <= a <= 9\n1 <= b <= s.length - 1", "notes": ""}, "1621": {"label": "Medium", "title": "Number of Sets of K Non-Overlapping Line Segments", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4257, "total_accepted": 6400.0, "total_submissions": 15000.0, "testcase_example": "'4\\n2'", "body": "Given n points on a 1-D plane, where the i^th point (from 0 to n-1) is at x = i, find the number of ways we can draw exactly k non-overlapping line segments such that each segment covers two or more points. The endpoints of each segment must have integral coordinates. The k line segments do not have to cover all n points, and they are allowed to share endpoints.\nReturn the number of ways we can draw k non-overlapping line segments. Since this number can be huge, return it modulo 10^9 + 7.", "examples": [{"full_text": "Example 1:\nInput: n = 4, k = 2\nOutput: 5\nExplanation: The two line segments are shown in red and blue.\nThe image above shows the 5 different ways {(0,2),(2,3)}, {(0,1),(1,3)}, {(0,1),(2,3)}, {(1,2),(2,3)}, {(0,1),(1,2)}.", "input": "Input: n = 4, k = 2", "output": "Output: 5", "explanation": "Explanation: The two line segments are shown in red and blue.\nThe image above shows the 5 different ways {(0,2),(2,3)}, {(0,1),(1,3)}, {(0,1),(2,3)}, {(1,2),(2,3)}, {(0,1),(1,2)}."}, {"full_text": "Example 2:\nInput: n = 3, k = 1\nOutput: 3\nExplanation: The 3 ways are {(0,1)}, {(0,2)}, {(1,2)}.", "input": "Input: n = 3, k = 1", "output": "Output: 3", "explanation": "Explanation: The 3 ways are {(0,1)}, {(0,2)}, {(1,2)}."}, {"full_text": "Example 3:\nInput: n = 30, k = 7\nOutput: 796297179\nExplanation: The total number of possible ways to draw 7 line segments is 3796297200. Taking this number modulo 10^9 + 7 gives us 796297179.", "input": "Input: n = 30, k = 7", "output": "Output: 796297179", "explanation": "Explanation: The total number of possible ways to draw 7 line segments is 3796297200. Taking this number modulo 10^9 + 7 gives us 796297179."}], "constraints": "Constraints:\n2 <= n <= 1000\n1 <= k <= n-1", "notes": ""}, "1620": {"label": "Medium", "title": "Coordinate With Maximum Network Quality", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3703, "total_accepted": 6200.0, "total_submissions": 16700.0, "testcase_example": "'[[1,2,5],[2,1,7],[3,1,9]]\\n2'", "body": "You are given an array of network towers towers, where towers[i] = [xi, yi, qi] denotes the i^th network tower with location (xi, yi) and quality factor qi. All the coordinates are integral coordinates on the X-Y plane, and the distance between the two coordinates is the Euclidean distance.\nYou are also given an integer radius where a tower is reachable if the distance is less than or equal to radius. Outside that distance, the signal becomes garbled, and the tower is not reachable.\nThe signal quality of the i^th tower at a coordinate (x, y) is calculated with the formula \u230aqi / (1 + d)\u230b, where d is the distance between the tower and the coordinate. The network quality at a coordinate is the sum of the signal qualities from all the reachable towers.\nReturn the array [cx, cy] representing the integral coordinate (cx, cy) where the network quality is maximum. If there are multiple coordinates with the same network quality, return the lexicographically minimum non-negative coordinate.\nNote:\nA coordinate (x1, y1) is lexicographically smaller than (x2, y2) if either:\n\nx1 < x2, or\nx1 == x2 and y1 < y2.\n\n\n\u230aval\u230b is the greatest integer less than or equal to val (the floor function).", "examples": [{"full_text": "Example 1:\nInput: towers = [[1,2,5],[2,1,7],[3,1,9]], radius = 2\nOutput: [2,1]\nExplanation: At coordinate (2, 1) the total quality is 13.\n- Quality of 7 from (2, 1) results in \u230a7 / (1 + sqrt(0)\u230b = \u230a7\u230b = 7\n- Quality of 5 from (1, 2) results in \u230a5 / (1 + sqrt(2)\u230b = \u230a2.07\u230b = 2\n- Quality of 9 from (3, 1) results in \u230a9 / (1 + sqrt(1)\u230b = \u230a4.5\u230b = 4\nNo other coordinate has a higher network quality.", "input": "Input: towers = [[1,2,5],[2,1,7],[3,1,9]], radius = 2", "output": "Output: [2,1]", "explanation": "Explanation: At coordinate (2, 1) the total quality is 13.\n- Quality of 7 from (2, 1) results in \u230a7 / (1 + sqrt(0)\u230b = \u230a7\u230b = 7\n- Quality of 5 from (1, 2) results in \u230a5 / (1 + sqrt(2)\u230b = \u230a2.07\u230b = 2\n- Quality of 9 from (3, 1) results in \u230a9 / (1 + sqrt(1)\u230b = \u230a4.5\u230b = 4\nNo other coordinate has a higher network quality."}, {"full_text": "Example 2:\nInput: towers = [[23,11,21]], radius = 9\nOutput: [23,11]\nExplanation: Since there is only one tower, the network quality is highest right at the tower's location.", "input": "Input: towers = [[23,11,21]], radius = 9", "output": "Output: [23,11]", "explanation": "Explanation: Since there is only one tower, the network quality is highest right at the tower's location."}, {"full_text": "Example 3:\nInput: towers = [[1,2,13],[2,1,7],[0,1,9]], radius = 2\nOutput: [1,2]\nExplanation: Coordinate (1, 2) has the highest network quality.", "input": "Input: towers = [[1,2,13],[2,1,7],[0,1,9]], radius = 2", "output": "Output: [1,2]", "explanation": "Explanation: Coordinate (1, 2) has the highest network quality."}], "constraints": "Constraints:\n1 <= towers.length <= 50\ntowers[i].length == 3\n0 <= xi, yi, qi <= 50\n1 <= radius <= 50", "notes": ""}, "1616": {"label": "Medium", "title": "Split Two Strings to Make Palindrome", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3145, "total_accepted": 15800.0, "total_submissions": 50300.0, "testcase_example": "'\"x\"\\n\"y\"'", "body": "You are given two strings a and b of the same length. Choose an index and split both strings at the same index, splitting a into two strings: aprefix and asuffix where a = aprefix + asuffix, and splitting b into two strings: bprefix and bsuffix where b = bprefix + bsuffix. Check if aprefix + bsuffix or bprefix + asuffix forms a palindrome.\nWhen you split a string s into sprefix and ssuffix, either ssuffix or sprefix is allowed to be empty. For example, if s = \"abc\", then \"\" + \"abc\", \"a\" + \"bc\", \"ab\" + \"c\" , and \"abc\" + \"\" are valid splits.\nReturn true if it is possible to form a palindrome string, otherwise return false.\nNotice that\nx + y denotes the concatenation of strings x and y.", "examples": [{"full_text": "Example 1:\nInput: a = \"x\", b = \"y\"\nOutput: true\nExplaination: If either a or b are palindromes the answer is true since you can split in the following way:\naprefix = \"\", asuffix = \"x\"\nbprefix = \"\", bsuffix = \"y\"\nThen, aprefix + bsuffix = \"\" + \"y\" = \"y\", which is a palindrome.", "input": "Input: a = \"x\", b = \"y\"", "output": "Output: true\nExplaination: If either a or b are palindromes the answer is true since you can split in the following way:\naprefix = \"\", asuffix = \"x\"\nbprefix = \"\", bsuffix = \"y\"\nThen, aprefix + bsuffix = \"\" + \"y\" = \"y\", which is a palindrome.", "explanation": ""}, {"full_text": "Example 2:\nInput: a = \"xbdef\", b = \"xecab\"\nOutput: false", "input": "Input: a = \"xbdef\", b = \"xecab\"", "output": "Output: false", "explanation": ""}, {"full_text": "Example 3:\nInput: a = \"ulacfd\", b = \"jizalu\"\nOutput: true\nExplaination: Split them at index 3:\naprefix = \"ula\", asuffix = \"cfd\"\nbprefix = \"jiz\", bsuffix = \"alu\"\nThen, aprefix + bsuffix = \"ula\" + \"alu\" = \"ulaalu\", which is a palindrome.", "input": "Input: a = \"ulacfd\", b = \"jizalu\"", "output": "Output: true\nExplaination: Split them at index 3:\naprefix = \"ula\", asuffix = \"cfd\"\nbprefix = \"jiz\", bsuffix = \"alu\"\nThen, aprefix + bsuffix = \"ula\" + \"alu\" = \"ulaalu\", which is a palindrome.", "explanation": ""}], "constraints": "Constraints:\n1 <= a.length, b.length <= 10^5\na.length == b.length\na and b consist of lowercase English letters", "notes": ""}, "1615": {"label": "Medium", "title": "Maximal Network Rank", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5590999999999999, "total_accepted": 34000.0, "total_submissions": 60800.0, "testcase_example": "'4\\n[[0,1],[0,3],[1,2],[1,3]]'", "body": "There is an infrastructure of n cities with some number of roads connecting these cities. Each roads[i] = [ai, bi] indicates that there is a bidirectional road between cities ai and bi.\nThe network rank of two different cities is defined as the total number of\ndirectly connected roads to either city. If a road is directly connected to both cities, it is only counted once.\nThe maximal network rank of the infrastructure is the maximum network rank of all pairs of different cities.\nGiven the integer n and the array roads, return the maximal network rank of the entire infrastructure.", "examples": [{"full_text": "Example 1:\nInput: n = 4, roads = [[0,1],[0,3],[1,2],[1,3]]\nOutput: 4\nExplanation: The network rank of cities 0 and 1 is 4 as there are 4 roads that are connected to either 0 or 1. The road between 0 and 1 is only counted once.", "input": "Input: n = 4, roads = [[0,1],[0,3],[1,2],[1,3]]", "output": "Output: 4", "explanation": "Explanation: The network rank of cities 0 and 1 is 4 as there are 4 roads that are connected to either 0 or 1. The road between 0 and 1 is only counted once."}, {"full_text": "Example 2:\nInput: n = 5, roads = [[0,1],[0,3],[1,2],[1,3],[2,3],[2,4]]\nOutput: 5\nExplanation: There are 5 roads that are connected to cities 1 or 2.", "input": "Input: n = 5, roads = [[0,1],[0,3],[1,2],[1,3],[2,3],[2,4]]", "output": "Output: 5", "explanation": "Explanation: There are 5 roads that are connected to cities 1 or 2."}, {"full_text": "Example 3:\nInput: n = 8, roads = [[0,1],[1,2],[2,3],[2,4],[5,6],[5,7]]\nOutput: 5\nExplanation: The network rank of 2 and 5 is 5. Notice that all the cities do not have to be connected.", "input": "Input: n = 8, roads = [[0,1],[1,2],[2,3],[2,4],[5,6],[5,7]]", "output": "Output: 5", "explanation": "Explanation: The network rank of 2 and 5 is 5. Notice that all the cities do not have to be connected."}], "constraints": "Constraints:\n2 <= n <= 100\n0 <= roads.length <= n * (n - 1) / 2\nroads[i].length == 2\n0 <= ai, bi\n<= n-1\nai\n!=\nbi\nEach\npair of cities has at most one road connecting them.", "notes": ""}, "1609": {"label": "Medium", "title": "Even Odd Tree", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5291, "total_accepted": 29400.0, "total_submissions": 55600.0, "testcase_example": "'[1,10,4,3,null,7,9,12,8,6,null,null,2]'", "body": "A binary tree is named Even-Odd if it meets the following conditions:\nThe root of the binary tree is at level index 0, its children are at level index 1, their children are at level index 2, etc.\nFor every even-indexed level, all nodes at the level have odd integer values in strictly increasing order (from left to right).\nFor every odd-indexed level, all nodes at the level have even integer values in strictly decreasing order (from left to right).\nGiven the root of a binary tree, return true if the binary tree is Even-Odd, otherwise return false.", "examples": [{"full_text": "Example 1:\nInput: root = [1,10,4,3,null,7,9,12,8,6,null,null,2]\nOutput: true\nExplanation: The node values on each level are:\nLevel 0: [1]\nLevel 1: [10,4]\nLevel 2: [3,7,9]\nLevel 3: [12,8,6,2]\nSince levels 0 and 2 are all odd and increasing and levels 1 and 3 are all even and decreasing, the tree is Even-Odd.", "input": "Input: root = [1,10,4,3,null,7,9,12,8,6,null,null,2]", "output": "Output: true", "explanation": "Explanation: The node values on each level are:\nLevel 0: [1]\nLevel 1: [10,4]\nLevel 2: [3,7,9]\nLevel 3: [12,8,6,2]\nSince levels 0 and 2 are all odd and increasing and levels 1 and 3 are all even and decreasing, the tree is Even-Odd."}, {"full_text": "Example 2:\nInput: root = [5,4,2,3,3,7]\nOutput: false\nExplanation: The node values on each level are:\nLevel 0: [5]\nLevel 1: [4,2]\nLevel 2: [3,3,7]\nNode values in level 2 must be in strictly increasing order, so the tree is not Even-Odd.", "input": "Input: root = [5,4,2,3,3,7]", "output": "Output: false", "explanation": "Explanation: The node values on each level are:\nLevel 0: [5]\nLevel 1: [4,2]\nLevel 2: [3,3,7]\nNode values in level 2 must be in strictly increasing order, so the tree is not Even-Odd."}, {"full_text": "Example 3:\nInput: root = [5,9,1,3,5,7]\nOutput: false\nExplanation: Node values in the level 1 should be even integers.", "input": "Input: root = [5,9,1,3,5,7]", "output": "Output: false", "explanation": "Explanation: Node values in the level 1 should be even integers."}], "constraints": "Constraints:\nThe number of nodes in the tree is in the range [1, 10^5].\n1 <= Node.val <= 10^6", "notes": ""}, "1605": {"label": "Medium", "title": "Find Valid Matrix Given Row and Column Sums", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7845, "total_accepted": 23200.0, "total_submissions": 29600.0, "testcase_example": "'[3,8]\\n[4,7]'", "body": "You are given two arrays rowSum and colSum of non-negative integers where rowSum[i] is the sum of the elements in the i^th row and colSum[j] is the sum of the elements of the j^th column of a 2D matrix. In other words, you do not know the elements of the matrix, but you do know the sums of each row and column.\nFind any matrix of non-negative integers of size rowSum.length x colSum.length that satisfies the rowSum and colSum requirements.\nReturn a 2D array representing any matrix that fulfills the requirements. It's guaranteed that at least one matrix that fulfills the requirements exists.", "examples": [{"full_text": "Example 1:\nInput: rowSum = [3,8], colSum = [4,7]\nOutput: [[3,0],\n[1,7]]\nExplanation:\n0^th row: 3 + 0 = 3 == rowSum[0]\n1^st row: 1 + 7 = 8 == rowSum[1]\n0^th column: 3 + 1 = 4 == colSum[0]\n1^st column: 0 + 7 = 7 == colSum[1]\nThe row and column sums match, and all matrix elements are non-negative.\nAnother possible matrix is: [[1,2],\n[3,5]]", "input": "Input: rowSum = [3,8], colSum = [4,7]", "output": "Output: [[3,0],\n[1,7]]", "explanation": "Explanation:\n0^th row: 3 + 0 = 3 == rowSum[0]\n1^st row: 1 + 7 = 8 == rowSum[1]\n0^th column: 3 + 1 = 4 == colSum[0]\n1^st column: 0 + 7 = 7 == colSum[1]\nThe row and column sums match, and all matrix elements are non-negative.\nAnother possible matrix is: [[1,2],\n[3,5]]"}, {"full_text": "Example 2:\nInput: rowSum = [5,7,10], colSum = [8,6,8]\nOutput: [[0,5,0],\n[6,1,0],\n[2,0,8]]", "input": "Input: rowSum = [5,7,10], colSum = [8,6,8]", "output": "Output: [[0,5,0],\n[6,1,0],\n[2,0,8]]", "explanation": ""}], "constraints": "Constraints:\n1 <= rowSum.length, colSum.length <= 500\n0 <= rowSum[i], colSum[i] <= 10^8\nsum(rows) == sum(columns)", "notes": ""}, "1604": {"label": "Medium", "title": "Alert Using Same Key-Card Three or More Times in a One Hour Period", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.47009999999999996, "total_accepted": 16900.0, "total_submissions": 35900.0, "testcase_example": "'[\"daniel\",\"daniel\",\"daniel\",\"luis\",\"luis\",\"luis\",\"luis\"]\\n' +\n  '[\"10:00\",\"10:40\",\"11:00\",\"09:00\",\"11:00\",\"13:00\",\"15:00\"]'", "body": "LeetCode company workers use key-cards to unlock office doors. Each time a worker uses their key-card, the security system saves the worker's name and the time when it was used. The system emits an alert if any worker uses the key-card three or more times in a one-hour period.\nYou are given a list of strings keyName and keyTime where [keyName[i], keyTime[i]] corresponds to a person's name and the time when their key-card was used in a single day.\nAccess times are given in the 24-hour time format \"HH:MM\", such as \"23:51\" and \"09:49\".\nReturn a list of unique worker names who received an alert for frequent keycard use. Sort the names in ascending order alphabetically.\nNotice that \"10:00\" - \"11:00\" is considered to be within a one-hour period, while \"22:51\" - \"23:52\" is not considered to be within a one-hour period.", "examples": [{"full_text": "Example 1:\nInput: keyName = [\"daniel\",\"daniel\",\"daniel\",\"luis\",\"luis\",\"luis\",\"luis\"], keyTime = [\"10:00\",\"10:40\",\"11:00\",\"09:00\",\"11:00\",\"13:00\",\"15:00\"]\nOutput: [\"daniel\"]\nExplanation: \"daniel\" used the keycard 3 times in a one-hour period (\"10:00\",\"10:40\", \"11:00\").", "input": "Input: keyName = [\"daniel\",\"daniel\",\"daniel\",\"luis\",\"luis\",\"luis\",\"luis\"], keyTime = [\"10:00\",\"10:40\",\"11:00\",\"09:00\",\"11:00\",\"13:00\",\"15:00\"]", "output": "Output: [\"daniel\"]", "explanation": "Explanation: \"daniel\" used the keycard 3 times in a one-hour period (\"10:00\",\"10:40\", \"11:00\")."}, {"full_text": "Example 2:\nInput: keyName = [\"alice\",\"alice\",\"alice\",\"bob\",\"bob\",\"bob\",\"bob\"], keyTime = [\"12:01\",\"12:00\",\"18:00\",\"21:00\",\"21:20\",\"21:30\",\"23:00\"]\nOutput: [\"bob\"]\nExplanation: \"bob\" used the keycard 3 times in a one-hour period (\"21:00\",\"21:20\", \"21:30\").", "input": "Input: keyName = [\"alice\",\"alice\",\"alice\",\"bob\",\"bob\",\"bob\",\"bob\"], keyTime = [\"12:01\",\"12:00\",\"18:00\",\"21:00\",\"21:20\",\"21:30\",\"23:00\"]", "output": "Output: [\"bob\"]", "explanation": "Explanation: \"bob\" used the keycard 3 times in a one-hour period (\"21:00\",\"21:20\", \"21:30\")."}], "constraints": "Constraints:\n1 <= keyName.length, keyTime.length <= 10^5\nkeyName.length == keyTime.length\nkeyTime[i] is in the format \"HH:MM\".\n[keyName[i], keyTime[i]] is unique.\n1 <= keyName[i].length <= 10\nkeyName[i] contains only lowercase English letters.", "notes": ""}, "1600": {"label": "Medium", "title": "Throne Inheritance", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6279, "total_accepted": 11100.0, "total_submissions": 17700.0, "testcase_example": "'[\"ThroneInheritance\",\"birth\",\"birth\",\"birth\",\"birth\",\"birth\",\"birth\",\"getInheritanceOrder\",\"death\",\"getInheritanceOrder\"]\\n' +\n  '[[\"king\"],[\"king\",\"andy\"],[\"king\",\"bob\"],[\"king\",\"catherine\"],[\"andy\",\"matthew\"],[\"bob\",\"alex\"],[\"bob\",\"asha\"],[null],[\"bob\"],[null]]'", "body": "A kingdom consists of a king, his children, his grandchildren, and so on. Every once in a while, someone in the family dies or a child is born.\nThe kingdom has a well-defined order of inheritance that consists of the king as the first member. Let's define the recursive function Successor(x, curOrder), which given a person x and the inheritance order so far, returns who should be the next person after x in the order of inheritance.\nSuccessor(x, curOrder):\nif x has no children or all of x's children are in curOrder:\nif x is the king return null\nelse return Successor(x's parent, curOrder)\nelse return x's oldest child who's not in curOrder\nFor example, assume we have a kingdom that consists of the king, his children Alice and Bob (Alice is older than Bob), and finally Alice's son Jack.\nIn the beginning, curOrder will be [\"king\"].\nCalling Successor(king, curOrder) will return Alice, so we append to curOrder to get [\"king\", \"Alice\"].\nCalling Successor(Alice, curOrder) will return Jack, so we append to curOrder to get [\"king\", \"Alice\", \"Jack\"].\nCalling Successor(Jack, curOrder) will return Bob, so we append to curOrder to get [\"king\", \"Alice\", \"Jack\", \"Bob\"].\nCalling Successor(Bob, curOrder) will return null. Thus the order of inheritance will be [\"king\", \"Alice\", \"Jack\", \"Bob\"].\nUsing the above function, we can always obtain a unique order of inheritance.\nImplement the ThroneInheritance class:\nThroneInheritance(string kingName) Initializes an object of the ThroneInheritance class. The name of the king is given as part of the constructor.\nvoid birth(string parentName, string childName) Indicates that parentName gave birth to childName.\nvoid death(string name) Indicates the death of name. The death of the person doesn't affect the Successor function nor the current inheritance order. You can treat it as just marking the person as dead.\nstring[] getInheritanceOrder() Returns a list representing the current order of inheritance excluding dead people.", "examples": [{"full_text": "Example 1:\nInput\n[\"ThroneInheritance\", \"birth\", \"birth\", \"birth\", \"birth\", \"birth\", \"birth\", \"getInheritanceOrder\", \"death\", \"getInheritanceOrder\"]\n[[\"king\"], [\"king\", \"andy\"], [\"king\", \"bob\"], [\"king\", \"catherine\"], [\"andy\", \"matthew\"], [\"bob\", \"alex\"], [\"bob\", \"asha\"], [null], [\"bob\"], [null]]\nOutput\n[null, null, null, null, null, null, null, [\"king\", \"andy\", \"matthew\", \"bob\", \"alex\", \"asha\", \"catherine\"], null, [\"king\", \"andy\", \"matthew\", \"alex\", \"asha\", \"catherine\"]]\nExplanation\nThroneInheritance t= new ThroneInheritance(\"king\"); // order: king\nt.birth(\"king\", \"andy\"); // order: king > andy\nt.birth(\"king\", \"bob\"); // order: king > andy > bob\nt.birth(\"king\", \"catherine\"); // order: king > andy > bob > catherine\nt.birth(\"andy\", \"matthew\"); // order: king > andy > matthew > bob > catherine\nt.birth(\"bob\", \"alex\"); // order: king > andy > matthew > bob > alex > catherine\nt.birth(\"bob\", \"asha\"); // order: king > andy > matthew > bob > alex > asha > catherine\nt.getInheritanceOrder(); // return [\"king\", \"andy\", \"matthew\", \"bob\", \"alex\", \"asha\", \"catherine\"]\nt.death(\"bob\"); // order: king > andy > matthew > bob > alex > asha > catherine\nt.getInheritanceOrder(); // return [\"king\", \"andy\", \"matthew\", \"alex\", \"asha\", \"catherine\"]", "input": "Input\n[\"ThroneInheritance\", \"birth\", \"birth\", \"birth\", \"birth\", \"birth\", \"birth\", \"getInheritanceOrder\", \"death\", \"getInheritanceOrder\"]\n[[\"king\"], [\"king\", \"andy\"], [\"king\", \"bob\"], [\"king\", \"catherine\"], [\"andy\", \"matthew\"], [\"bob\", \"alex\"], [\"bob\", \"asha\"], [null], [\"bob\"], [null]]", "output": "Output\n[null, null, null, null, null, null, null, [\"king\", \"andy\", \"matthew\", \"bob\", \"alex\", \"asha\", \"catherine\"], null, [\"king\", \"andy\", \"matthew\", \"alex\", \"asha\", \"catherine\"]]", "explanation": "Explanation\nThroneInheritance t= new ThroneInheritance(\"king\"); // order: king\nt.birth(\"king\", \"andy\"); // order: king > andy\nt.birth(\"king\", \"bob\"); // order: king > andy > bob\nt.birth(\"king\", \"catherine\"); // order: king > andy > bob > catherine\nt.birth(\"andy\", \"matthew\"); // order: king > andy > matthew > bob > catherine\nt.birth(\"bob\", \"alex\"); // order: king > andy > matthew > bob > alex > catherine\nt.birth(\"bob\", \"asha\"); // order: king > andy > matthew > bob > alex > asha > catherine\nt.getInheritanceOrder(); // return [\"king\", \"andy\", \"matthew\", \"bob\", \"alex\", \"asha\", \"catherine\"]\nt.death(\"bob\"); // order: king > andy > matthew > bob > alex > asha > catherine\nt.getInheritanceOrder(); // return [\"king\", \"andy\", \"matthew\", \"alex\", \"asha\", \"catherine\"]"}], "constraints": "Constraints:\n1 <= kingName.length, parentName.length, childName.length, name.length <= 15\nkingName, parentName, childName, and name consist of lowercase English letters only.\nAll arguments childName and kingName are distinct.\nAll name arguments of death will be passed to either the constructor or as childName to birth first.\nFor each call to\nbirth(parentName, childName), it is guaranteed that\nparentName is alive.\nAt most 10^5 calls will be made to birth and death.\nAt most 10 calls will be made to getInheritanceOrder.", "notes": ""}, "1599": {"label": "Medium", "title": "Maximum Profit of Operating a Centennial Wheel", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4397, "total_accepted": 9500.0, "total_submissions": 21600.0, "testcase_example": "'[8,3]\\n5\\n6'", "body": "You are the operator of a Centennial Wheel that has four gondolas, and each gondola has room for up to four people. You have the ability to rotate the gondolas counterclockwise, which costs you runningCost dollars.\nYou are given an array customers of length n where customers[i] is the number of new customers arriving just before the i^th rotation (0-indexed). This means you must rotate the wheel i times before the customers[i] customers arrive. You cannot make customers wait if there is room in the gondola. Each customer pays boardingCost dollars when they board on the gondola closest to the ground and will exit once that gondola reaches the ground again.\nYou can stop the wheel at any time, including before serving all customers. If you decide to stop serving customers, all subsequent rotations are free in order to get all the customers down safely. Note that if there are currently more than four customers waiting at the wheel, only four will board the gondola, and the rest will wait for the next rotation.\nReturn the minimum number of rotations you need to perform to maximize your profit. If there is no scenario where the profit is positive, return -1.", "examples": [{"full_text": "Example 1:\nInput: customers = [8,3], boardingCost = 5, runningCost = 6\nOutput: 3\nExplanation: The numbers written on the gondolas are the number of people currently there.\n1. 8 customers arrive, 4 board and 4 wait for the next gondola, the wheel rotates. Current profit is 4 * $5 - 1 * $6 = $14.\n2. 3 customers arrive, the 4 waiting board the wheel and the other 3 wait, the wheel rotates. Current profit is 8 * $5 - 2 * $6 = $28.\n3. The final 3 customers board the gondola, the wheel rotates. Current profit is 11 * $5 - 3 * $6 = $37.\nThe highest profit was $37 after rotating the wheel 3 times.", "input": "Input: customers = [8,3], boardingCost = 5, runningCost = 6", "output": "Output: 3", "explanation": "Explanation: The numbers written on the gondolas are the number of people currently there.\n1. 8 customers arrive, 4 board and 4 wait for the next gondola, the wheel rotates. Current profit is 4 * $5 - 1 * $6 = $14.\n2. 3 customers arrive, the 4 waiting board the wheel and the other 3 wait, the wheel rotates. Current profit is 8 * $5 - 2 * $6 = $28.\n3. The final 3 customers board the gondola, the wheel rotates. Current profit is 11 * $5 - 3 * $6 = $37.\nThe highest profit was $37 after rotating the wheel 3 times."}, {"full_text": "Example 2:\nInput: customers = [10,9,6], boardingCost = 6, runningCost = 4\nOutput: 7\nExplanation:\n1. 10 customers arrive, 4 board and 6 wait for the next gondola, the wheel rotates. Current profit is 4 * $6 - 1 * $4 = $20.\n2. 9 customers arrive, 4 board and 11 wait (2 originally waiting, 9 newly waiting), the wheel rotates. Current profit is 8 * $6 - 2 * $4 = $40.\n3. The final 6 customers arrive, 4 board and 13 wait, the wheel rotates. Current profit is 12 * $6 - 3 * $4 = $60.\n4. 4 board and 9 wait, the wheel rotates. Current profit is 16 * $6 - 4 * $4 = $80.\n5. 4 board and 5 wait, the wheel rotates. Current profit is 20 * $6 - 5 * $4 = $100.\n6. 4 board and 1 waits, the wheel rotates. Current profit is 24 * $6 - 6 * $4 = $120.\n7. 1 boards, the wheel rotates. Current profit is 25 * $6 - 7 * $4 = $122.\nThe highest profit was $122 after rotating the wheel 7 times.", "input": "Input: customers = [10,9,6], boardingCost = 6, runningCost = 4", "output": "Output: 7", "explanation": "Explanation:\n1. 10 customers arrive, 4 board and 6 wait for the next gondola, the wheel rotates. Current profit is 4 * $6 - 1 * $4 = $20.\n2. 9 customers arrive, 4 board and 11 wait (2 originally waiting, 9 newly waiting), the wheel rotates. Current profit is 8 * $6 - 2 * $4 = $40.\n3. The final 6 customers arrive, 4 board and 13 wait, the wheel rotates. Current profit is 12 * $6 - 3 * $4 = $60.\n4. 4 board and 9 wait, the wheel rotates. Current profit is 16 * $6 - 4 * $4 = $80.\n5. 4 board and 5 wait, the wheel rotates. Current profit is 20 * $6 - 5 * $4 = $100.\n6. 4 board and 1 waits, the wheel rotates. Current profit is 24 * $6 - 6 * $4 = $120.\n7. 1 boards, the wheel rotates. Current profit is 25 * $6 - 7 * $4 = $122.\nThe highest profit was $122 after rotating the wheel 7 times."}, {"full_text": "Example 3:\nInput: customers = [3,4,0,5,1], boardingCost = 1, runningCost = 92\nOutput: -1\nExplanation:\n1. 3 customers arrive, 3 board and 0 wait, the wheel rotates. Current profit is 3 * $1 - 1 * $92 = -$89.\n2. 4 customers arrive, 4 board and 0 wait, the wheel rotates. Current profit is 7 * $1 - 2 * $92 = -$177.\n3. 0 customers arrive, 0 board and 0 wait, the wheel rotates. Current profit is 7 * $1 - 3 * $92 = -$269.\n4. 5 customers arrive, 4 board and 1 waits, the wheel rotates. Current profit is 11 * $1 - 4 * $92 = -$357.\n5. 1 customer arrives, 2 board and 0 wait, the wheel rotates. Current profit is 13 * $1 - 5 * $92 = -$447.\nThe profit was never positive, so return -1.", "input": "Input: customers = [3,4,0,5,1], boardingCost = 1, runningCost = 92", "output": "Output: -1", "explanation": "Explanation:\n1. 3 customers arrive, 3 board and 0 wait, the wheel rotates. Current profit is 3 * $1 - 1 * $92 = -$89.\n2. 4 customers arrive, 4 board and 0 wait, the wheel rotates. Current profit is 7 * $1 - 2 * $92 = -$177.\n3. 0 customers arrive, 0 board and 0 wait, the wheel rotates. Current profit is 7 * $1 - 3 * $92 = -$269.\n4. 5 customers arrive, 4 board and 1 waits, the wheel rotates. Current profit is 11 * $1 - 4 * $92 = -$357.\n5. 1 customer arrives, 2 board and 0 wait, the wheel rotates. Current profit is 13 * $1 - 5 * $92 = -$447.\nThe profit was never positive, so return -1."}], "constraints": "Constraints:\nn == customers.length\n1 <= n <= 10^5\n0 <= customers[i] <= 50\n1 <= boardingCost, runningCost <= 100", "notes": ""}, "1594": {"label": "Medium", "title": "Maximum Non Negative Product in a Matrix", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.33030000000000004, "total_accepted": 15600.0, "total_submissions": 47300.0, "testcase_example": "'[[-1,-2,-3],[-2,-3,-3],[-3,-3,-2]]'", "body": "You are given a m x n matrix grid. Initially, you are located at the top-left corner (0, 0), and in each step, you can only move right or down in the matrix.\nAmong all possible paths starting from the top-left corner (0, 0) and ending in the bottom-right corner (m - 1, n - 1), find the path with the maximum non-negative product. The product of a path is the product of all integers in the grid cells visited along the path.\nReturn the maximum non-negative product modulo 10^9 + 7. If the maximum product is negative, return -1.\nNotice that the modulo is performed after getting the maximum product.", "examples": [{"full_text": "Example 1:\nInput: grid = [[-1,-2,-3],[-2,-3,-3],[-3,-3,-2]]\nOutput: -1\nExplanation: It is not possible to get non-negative product in the path from (0, 0) to (2, 2), so return -1.", "input": "Input: grid = [[-1,-2,-3],[-2,-3,-3],[-3,-3,-2]]", "output": "Output: -1", "explanation": "Explanation: It is not possible to get non-negative product in the path from (0, 0) to (2, 2), so return -1."}, {"full_text": "Example 2:\nInput: grid = [[1,-2,1],[1,-2,1],[3,-4,1]]\nOutput: 8\nExplanation: Maximum non-negative product is shown (1 * 1 * -2 * -4 * 1 = 8).", "input": "Input: grid = [[1,-2,1],[1,-2,1],[3,-4,1]]", "output": "Output: 8", "explanation": "Explanation: Maximum non-negative product is shown (1 * 1 * -2 * -4 * 1 = 8)."}, {"full_text": "Example 3:\nInput: grid = [[1,3],[0,-4]]\nOutput: 0\nExplanation: Maximum non-negative product is shown (1 * 0 * -4 = 0).", "input": "Input: grid = [[1,3],[0,-4]]", "output": "Output: 0", "explanation": "Explanation: Maximum non-negative product is shown (1 * 0 * -4 = 0)."}], "constraints": "Constraints:\nm == grid.length\nn == grid[i].length\n1 <= m, n <= 15\n-4 <= grid[i][j] <= 4", "notes": ""}, "1593": {"label": "Medium", "title": "Split a String Into the Max Number of Unique Substrings", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5376, "total_accepted": 19100.0, "total_submissions": 35600.0, "testcase_example": "'\"ababccc\"'", "body": "Given a string\ns,\nreturn the maximum\nnumber of unique substrings that the given string can be split into.\nYou can split string\ns into any list of\nnon-empty substrings, where the concatenation of the substrings forms the original string.\nHowever, you must split the substrings such that all of them are unique.\nA substring is a contiguous sequence of characters within a string.", "examples": [{"full_text": "Example 1:\nInput: s = \"ababccc\"\nOutput: 5\nExplanation: One way to split maximally is ['a', 'b', 'ab', 'c', 'cc']. Splitting like ['a', 'b', 'a', 'b', 'c', 'cc'] is not valid as you have 'a' and 'b' multiple times.", "input": "Input: s = \"ababccc\"", "output": "Output: 5", "explanation": "Explanation: One way to split maximally is ['a', 'b', 'ab', 'c', 'cc']. Splitting like ['a', 'b', 'a', 'b', 'c', 'cc'] is not valid as you have 'a' and 'b' multiple times."}, {"full_text": "Example 2:\nInput: s = \"aba\"\nOutput: 2\nExplanation: One way to split maximally is ['a', 'ba'].", "input": "Input: s = \"aba\"", "output": "Output: 2", "explanation": "Explanation: One way to split maximally is ['a', 'ba']."}, {"full_text": "Example 3:\nInput: s = \"aa\"\nOutput: 1\nExplanation: It is impossible to split the string any further.", "input": "Input: s = \"aa\"", "output": "Output: 1", "explanation": "Explanation: It is impossible to split the string any further."}], "constraints": "Constraints:\n\n1 <= s.length\n<= 16\n\n\ns contains\nonly lower case English letters.\n", "notes": ""}, "1590": {"label": "Medium", "title": "Make Sum Divisible by P", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.2825, "total_accepted": 14900.0, "total_submissions": 52800.0, "testcase_example": "'[3,1,4,2]\\n6'", "body": "Given an array of positive integers nums, remove the smallest subarray (possibly empty) such that the sum of the remaining elements is divisible by p. It is not allowed to remove the whole array.\nReturn the length of the smallest subarray that you need to remove, or -1 if it's impossible.\nA subarray is defined as a contiguous block of elements in the array.", "examples": [{"full_text": "Example 1:\nInput: nums = [3,1,4,2], p = 6\nOutput: 1\nExplanation: The sum of the elements in nums is 10, which is not divisible by 6. We can remove the subarray [4], and the sum of the remaining elements is 6, which is divisible by 6.", "input": "Input: nums = [3,1,4,2], p = 6", "output": "Output: 1", "explanation": "Explanation: The sum of the elements in nums is 10, which is not divisible by 6. We can remove the subarray [4], and the sum of the remaining elements is 6, which is divisible by 6."}, {"full_text": "Example 2:\nInput: nums = [6,3,5,2], p = 9\nOutput: 2\nExplanation: We cannot remove a single element to get a sum divisible by 9. The best way is to remove the subarray [5,2], leaving us with [6,3] with sum 9.", "input": "Input: nums = [6,3,5,2], p = 9", "output": "Output: 2", "explanation": "Explanation: We cannot remove a single element to get a sum divisible by 9. The best way is to remove the subarray [5,2], leaving us with [6,3] with sum 9."}, {"full_text": "Example 3:\nInput: nums = [1,2,3], p = 3\nOutput: 0\nExplanation: Here the sum is 6. which is already divisible by 3. Thus we do not need to remove anything.", "input": "Input: nums = [1,2,3], p = 3", "output": "Output: 0", "explanation": "Explanation: Here the sum is 6. which is already divisible by 3. Thus we do not need to remove anything."}], "constraints": "Constraints:\n1 <= nums.length <= 10^5\n1 <= nums[i] <= 10^9\n1 <= p <= 10^9", "notes": ""}, "1589": {"label": "Medium", "title": "Maximum Sum Obtained of Any Permutation", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3614, "total_accepted": 11600.0, "total_submissions": 32100.0, "testcase_example": "'[1,2,3,4,5]\\n[[1,3],[0,1]]'", "body": "We have an array of integers, nums, and an array of requests where requests[i] = [starti, endi]. The i^th request asks for the sum of nums[starti] + nums[starti + 1] + ... + nums[endi - 1] + nums[endi]. Both starti and endi are 0-indexed.\nReturn the maximum total sum of all requests among all permutations of nums.\nSince the answer may be too large, return it modulo 10^9 + 7.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,2,3,4,5], requests = [[1,3],[0,1]]\nOutput: 19\nExplanation: One permutation of nums is [2,1,3,4,5] with the following result:\nrequests[0] -> nums[1] + nums[2] + nums[3] = 1 + 3 + 4 = 8\nrequests[1] -> nums[0] + nums[1] = 2 + 1 = 3\nTotal sum: 8 + 3 = 11.\nA permutation with a higher total sum is [3,5,4,2,1] with the following result:\nrequests[0] -> nums[1] + nums[2] + nums[3] = 5 + 4 + 2 = 11\nrequests[1] -> nums[0] + nums[1] = 3 + 5 = 8\nTotal sum: 11 + 8 = 19, which is the best that you can do.", "input": "Input: nums = [1,2,3,4,5], requests = [[1,3],[0,1]]", "output": "Output: 19", "explanation": "Explanation: One permutation of nums is [2,1,3,4,5] with the following result:\nrequests[0] -> nums[1] + nums[2] + nums[3] = 1 + 3 + 4 = 8\nrequests[1] -> nums[0] + nums[1] = 2 + 1 = 3\nTotal sum: 8 + 3 = 11.\nA permutation with a higher total sum is [3,5,4,2,1] with the following result:\nrequests[0] -> nums[1] + nums[2] + nums[3] = 5 + 4 + 2 = 11\nrequests[1] -> nums[0] + nums[1] = 3 + 5 = 8\nTotal sum: 11 + 8 = 19, which is the best that you can do."}, {"full_text": "Example 2:\nInput: nums = [1,2,3,4,5,6], requests = [[0,1]]\nOutput: 11\nExplanation: A permutation with the max total sum is [6,5,4,3,2,1] with request sums [11].", "input": "Input: nums = [1,2,3,4,5,6], requests = [[0,1]]", "output": "Output: 11", "explanation": "Explanation: A permutation with the max total sum is [6,5,4,3,2,1] with request sums [11]."}, {"full_text": "Example 3:\nInput: nums = [1,2,3,4,5,10], requests = [[0,2],[1,3],[1,1]]\nOutput: 47\nExplanation: A permutation with the max total sum is [4,10,5,3,2,1] with request sums [19,18,10].", "input": "Input: nums = [1,2,3,4,5,10], requests = [[0,2],[1,3],[1,1]]", "output": "Output: 47", "explanation": "Explanation: A permutation with the max total sum is [4,10,5,3,2,1] with request sums [19,18,10]."}], "constraints": "Constraints:\nn == nums.length\n1 <= n <= 10^5\n0 <= nums[i]\n<= 10^5\n1 <= requests.length <=\n10^5\nrequests[i].length == 2\n0 <= starti\n<= endi\n<\nn", "notes": ""}, "1584": {"label": "Medium", "title": "Min Cost to Connect All Points", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6103000000000001, "total_accepted": 47200.0, "total_submissions": 77400.0, "testcase_example": "'[[0,0],[2,2],[3,10],[5,2],[7,0]]'", "body": "You are given an array points representing integer coordinates of some points on a 2D-plane, where points[i] = [xi, yi].\nThe cost of connecting two points [xi, yi] and [xj, yj] is the manhattan distance between them: |xi - xj| + |yi - yj|, where |val| denotes the absolute value of val.\nReturn the minimum cost to make all points connected. All points are connected if there is exactly one simple path between any two points.", "examples": [{"full_text": "Example 1:\nInput: points = [[0,0],[2,2],[3,10],[5,2],[7,0]]\nOutput: 20\nExplanation:\nWe can connect the points as shown above to get the minimum cost of 20.\nNotice that there is a unique path between every pair of points.", "input": "Input: points = [[0,0],[2,2],[3,10],[5,2],[7,0]]", "output": "Output: 20", "explanation": "Explanation:\nWe can connect the points as shown above to get the minimum cost of 20.\nNotice that there is a unique path between every pair of points."}, {"full_text": "Example 2:\nInput: points = [[3,12],[-2,5],[-4,1]]\nOutput: 18", "input": "Input: points = [[3,12],[-2,5],[-4,1]]", "output": "Output: 18", "explanation": ""}], "constraints": "Constraints:\n1 <= points.length <= 1000\n-10^6 <= xi, yi <= 10^6\nAll pairs (xi, yi) are distinct.", "notes": ""}, "1583": {"label": "Medium", "title": "Count Unhappy Friends", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5737, "total_accepted": 15200.0, "total_submissions": 26500.0, "testcase_example": "'4\\n[[1,2,3],[3,2,0],[3,1,0],[1,2,0]]\\n[[0,1],[2,3]]'", "body": "You are given a list of\npreferences\nfor\nn\nfriends, where n is always even.\nFor each person i,\npreferences[i]\ncontains\na list of friends\nsorted in the order of preference. In other words, a friend earlier in the list is more preferred than a friend later in the list.\nFriends in\neach list are\ndenoted by integers from 0 to n-1.\nAll the friends are divided into pairs.\nThe pairings are\ngiven in a list\npairs,\nwhere pairs[i] = [xi, yi] denotes xi\nis paired with yi and yi is paired with xi.\nHowever, this pairing may cause some of the friends to be unhappy.\nA friend x\nis unhappy if x\nis paired with y\nand there exists a friend u\nwho\nis paired with v\nbut:\nx\nprefers u\nover y,\nand\nu\nprefers x\nover v.\nReturn the number of unhappy friends.", "examples": [{"full_text": "Example 1:\nInput: n = 4, preferences = [[1, 2, 3], [3, 2, 0], [3, 1, 0], [1, 2, 0]], pairs = [[0, 1], [2, 3]]\nOutput: 2\nExplanation:\nFriend 1 is unhappy because:\n- 1 is paired with 0 but prefers 3 over 0, and\n- 3 prefers 1 over 2.\nFriend 3 is unhappy because:\n- 3 is paired with 2 but prefers 1 over 2, and\n- 1 prefers 3 over 0.\nFriends 0 and 2 are happy.", "input": "Input: n = 4, preferences = [[1, 2, 3], [3, 2, 0], [3, 1, 0], [1, 2, 0]], pairs = [[0, 1], [2, 3]]", "output": "Output: 2", "explanation": "Explanation:\nFriend 1 is unhappy because:\n- 1 is paired with 0 but prefers 3 over 0, and\n- 3 prefers 1 over 2.\nFriend 3 is unhappy because:\n- 3 is paired with 2 but prefers 1 over 2, and\n- 1 prefers 3 over 0.\nFriends 0 and 2 are happy."}, {"full_text": "Example 2:\nInput: n = 2, preferences = [[1], [0]], pairs = [[1, 0]]\nOutput: 0\nExplanation: Both friends 0 and 1 are happy.", "input": "Input: n = 2, preferences = [[1], [0]], pairs = [[1, 0]]", "output": "Output: 0", "explanation": "Explanation: Both friends 0 and 1 are happy."}, {"full_text": "Example 3:\nInput: n = 4, preferences = [[1, 3, 2], [2, 3, 0], [1, 3, 0], [0, 2, 1]], pairs = [[1, 3], [0, 2]]\nOutput: 4", "input": "Input: n = 4, preferences = [[1, 3, 2], [2, 3, 0], [1, 3, 0], [0, 2, 1]], pairs = [[1, 3], [0, 2]]", "output": "Output: 4", "explanation": ""}], "constraints": "Constraints:\n2 <= n <= 500\nn\nis even.\npreferences.length\n== n\npreferences[i].length\n== n - 1\n0 <= preferences[i][j] <= n - 1\npreferences[i]\ndoes not contain i.\nAll values in\npreferences[i]\nare unique.\npairs.length\n== n/2\npairs[i].length\n== 2\nxi != yi\n0 <= xi, yi\n<= n - 1\nEach person is contained in exactly one pair.", "notes": ""}, "1578": {"label": "Medium", "title": "Minimum Time to Make Rope Colorful", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6137, "total_accepted": 56600.0, "total_submissions": 92200.0, "testcase_example": "'\"abaac\"\\n[1,2,3,4,5]'", "body": "Alice has n balloons arranged on a rope. You are given a 0-indexed string colors where colors[i] is the color of the i^th balloon.\nAlice wants the rope to be colorful. She does not want two consecutive balloons to be of the same color, so she asks Bob for help. Bob can remove some balloons from the rope to make it colorful. You are given a 0-indexed integer array neededTime where neededTime[i] is the time (in seconds) that Bob needs to remove the i^th balloon from the rope.\nReturn the minimum time Bob needs to make the rope colorful.", "examples": [{"full_text": "Example 1:\nInput: colors = \"abaac\", neededTime = [1,2,3,4,5]\nOutput: 3\nExplanation: In the above image, 'a' is blue, 'b' is red, and 'c' is green.\nBob can remove the blue balloon at index 2. This takes 3 seconds.\nThere are no longer two consecutive balloons of the same color. Total time = 3.", "input": "Input: colors = \"abaac\", neededTime = [1,2,3,4,5]", "output": "Output: 3", "explanation": "Explanation: In the above image, 'a' is blue, 'b' is red, and 'c' is green.\nBob can remove the blue balloon at index 2. This takes 3 seconds.\nThere are no longer two consecutive balloons of the same color. Total time = 3."}, {"full_text": "Example 2:\nInput: colors = \"abc\", neededTime = [1,2,3]\nOutput: 0\nExplanation: The rope is already colorful. Bob does not need to remove any balloons from the rope.", "input": "Input: colors = \"abc\", neededTime = [1,2,3]", "output": "Output: 0", "explanation": "Explanation: The rope is already colorful. Bob does not need to remove any balloons from the rope."}, {"full_text": "Example 3:\nInput: colors = \"aabaa\", neededTime = [1,2,3,4,1]\nOutput: 2\nExplanation: Bob will remove the ballons at indices 0 and 4. Each ballon takes 1 second to remove.\nThere are no longer two consecutive balloons of the same color. Total time = 1 + 1 = 2.", "input": "Input: colors = \"aabaa\", neededTime = [1,2,3,4,1]", "output": "Output: 2", "explanation": "Explanation: Bob will remove the ballons at indices 0 and 4. Each ballon takes 1 second to remove.\nThere are no longer two consecutive balloons of the same color. Total time = 1 + 1 = 2."}], "constraints": "Constraints:\nn == colors.length == neededTime.length\n1 <= n <= 10^5\n1 <= neededTime[i] <= 10^4\ncolors contains only lowercase English letters.", "notes": ""}, "1577": {"label": "Medium", "title": "Number of Ways Where Square of Number Is Equal to Product of Two Numbers", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3896, "total_accepted": 14700.0, "total_submissions": 37700.0, "testcase_example": "'[7,4]\\n[5,2,8,9]'", "body": "Given two arrays of integers nums1 and nums2, return the number of triplets formed (type 1 and type 2) under the following rules:\nType 1: Triplet (i, j, k) if nums1[i]^2 == nums2[j] * nums2[k] where 0 <= i < nums1.length and 0 <= j < k < nums2.length.\nType 2: Triplet (i, j, k) if nums2[i]^2 == nums1[j] * nums1[k] where 0 <= i < nums2.length and 0 <= j < k < nums1.length.", "examples": [{"full_text": "Example 1:\nInput: nums1 = [7,4], nums2 = [5,2,8,9]\nOutput: 1\nExplanation: Type 1: (1, 1, 2), nums1[1]^2 = nums2[1] * nums2[2]. (4^2 = 2 * 8).", "input": "Input: nums1 = [7,4], nums2 = [5,2,8,9]", "output": "Output: 1", "explanation": "Explanation: Type 1: (1, 1, 2), nums1[1]^2 = nums2[1] * nums2[2]. (4^2 = 2 * 8)."}, {"full_text": "Example 2:\nInput: nums1 = [1,1], nums2 = [1,1,1]\nOutput: 9\nExplanation: All Triplets are valid, because 1^2 = 1 * 1.\nType 1: (0,0,1), (0,0,2), (0,1,2), (1,0,1), (1,0,2), (1,1,2). nums1[i]^2 = nums2[j] * nums2[k].\nType 2: (0,0,1), (1,0,1), (2,0,1). nums2[i]^2 = nums1[j] * nums1[k].", "input": "Input: nums1 = [1,1], nums2 = [1,1,1]", "output": "Output: 9", "explanation": "Explanation: All Triplets are valid, because 1^2 = 1 * 1.\nType 1: (0,0,1), (0,0,2), (0,1,2), (1,0,1), (1,0,2), (1,1,2). nums1[i]^2 = nums2[j] * nums2[k].\nType 2: (0,0,1), (1,0,1), (2,0,1). nums2[i]^2 = nums1[j] * nums1[k]."}, {"full_text": "Example 3:\nInput: nums1 = [7,7,8,3], nums2 = [1,2,9,7]\nOutput: 2\nExplanation: There are 2 valid triplets.\nType 1: (3,0,2). nums1[3]^2 = nums2[0] * nums2[2].\nType 2: (3,0,1). nums2[3]^2 = nums1[0] * nums1[1].", "input": "Input: nums1 = [7,7,8,3], nums2 = [1,2,9,7]", "output": "Output: 2", "explanation": "Explanation: There are 2 valid triplets.\nType 1: (3,0,2). nums1[3]^2 = nums2[0] * nums2[2].\nType 2: (3,0,1). nums2[3]^2 = nums1[0] * nums1[1]."}], "constraints": "Constraints:\n1 <= nums1.length, nums2.length <= 1000\n1 <= nums1[i], nums2[i] <= 10^5", "notes": ""}, "1574": {"label": "Medium", "title": "Shortest Subarray to be Removed to Make Array Sorted", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3519, "total_accepted": 16800.0, "total_submissions": 47600.0, "testcase_example": "'[1,2,3,10,4,2,3,5]'", "body": "Given an integer array arr, remove a subarray (can be empty) from arr such that the remaining elements in arr are non-decreasing.\nReturn the length of the shortest subarray to remove.\nA subarray is a contiguous subsequence of the array.", "examples": [{"full_text": "Example 1:\nInput: arr = [1,2,3,10,4,2,3,5]\nOutput: 3\nExplanation: The shortest subarray we can remove is [10,4,2] of length 3. The remaining elements after that will be [1,2,3,3,5] which are sorted.\nAnother correct solution is to remove the subarray [3,10,4].", "input": "Input: arr = [1,2,3,10,4,2,3,5]", "output": "Output: 3", "explanation": "Explanation: The shortest subarray we can remove is [10,4,2] of length 3. The remaining elements after that will be [1,2,3,3,5] which are sorted.\nAnother correct solution is to remove the subarray [3,10,4]."}, {"full_text": "Example 2:\nInput: arr = [5,4,3,2,1]\nOutput: 4\nExplanation: Since the array is strictly decreasing, we can only keep a single element. Therefore we need to remove a subarray of length 4, either [5,4,3,2] or [4,3,2,1].", "input": "Input: arr = [5,4,3,2,1]", "output": "Output: 4", "explanation": "Explanation: Since the array is strictly decreasing, we can only keep a single element. Therefore we need to remove a subarray of length 4, either [5,4,3,2] or [4,3,2,1]."}, {"full_text": "Example 3:\nInput: arr = [1,2,3]\nOutput: 0\nExplanation: The array is already non-decreasing. We do not need to remove any elements.", "input": "Input: arr = [1,2,3]", "output": "Output: 0", "explanation": "Explanation: The array is already non-decreasing. We do not need to remove any elements."}], "constraints": "Constraints:\n1 <= arr.length <= 10^5\n0 <= arr[i] <= 10^9", "notes": ""}, "1573": {"label": "Medium", "title": "Number of Ways to Split a String", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3191, "total_accepted": 18000.0, "total_submissions": 56600.0, "testcase_example": "'\"10101\"'", "body": "Given a binary string s, you can split s into 3 non-empty strings s1, s2, and s3 where s1 + s2 + s3 = s.\nReturn the number of ways s can be split such that the number of ones is the same in s1, s2, and s3. Since the answer may be too large, return it modulo 10^9 + 7.", "examples": [{"full_text": "Example 1:\nInput: s = \"10101\"\nOutput: 4\nExplanation: There are four ways to split s in 3 parts where each part contain the same number of letters '1'.\n\"1|010|1\"\n\"1|01|01\"\n\"10|10|1\"\n\"10|1|01\"", "input": "Input: s = \"10101\"", "output": "Output: 4", "explanation": "Explanation: There are four ways to split s in 3 parts where each part contain the same number of letters '1'.\n\"1|010|1\"\n\"1|01|01\"\n\"10|10|1\"\n\"10|1|01\""}, {"full_text": "Example 2:\nInput: s = \"1001\"\nOutput: 0", "input": "Input: s = \"1001\"", "output": "Output: 0", "explanation": ""}, {"full_text": "Example 3:\nInput: s = \"0000\"\nOutput: 3\nExplanation: There are three ways to split s in 3 parts.\n\"0|0|00\"\n\"0|00|0\"\n\"00|0|0\"", "input": "Input: s = \"0000\"", "output": "Output: 3", "explanation": "Explanation: There are three ways to split s in 3 parts.\n\"0|0|00\"\n\"0|00|0\"\n\"00|0|0\""}], "constraints": "Constraints:\n3 <= s.length <= 10^5\ns[i] is either '0' or '1'.", "notes": ""}, "1567": {"label": "Medium", "title": "Maximum Length of Subarray With Positive Product", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.42310000000000003, "total_accepted": 35900.0, "total_submissions": 84800.0, "testcase_example": "'[1,-2,-3,4]'", "body": "Given an array of integers nums, find the maximum length of a subarray where the product of all its elements is positive.\nA subarray of an array is a consecutive sequence of zero or more values taken out of that array.\nReturn the maximum length of a subarray with positive product.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,-2,-3,4]\nOutput: 4\nExplanation: The array nums already has a positive product of 24.", "input": "Input: nums = [1,-2,-3,4]", "output": "Output: 4", "explanation": "Explanation: The array nums already has a positive product of 24."}, {"full_text": "Example 2:\nInput: nums = [0,1,-2,-3,-4]\nOutput: 3\nExplanation: The longest subarray with positive product is [1,-2,-3] which has a product of 6.\nNotice that we cannot include 0 in the subarray since that'll make the product 0 which is not positive.", "input": "Input: nums = [0,1,-2,-3,-4]", "output": "Output: 3", "explanation": "Explanation: The longest subarray with positive product is [1,-2,-3] which has a product of 6.\nNotice that we cannot include 0 in the subarray since that'll make the product 0 which is not positive."}, {"full_text": "Example 3:\nInput: nums = [-1,-2,-3,0,1]\nOutput: 2\nExplanation: The longest subarray with positive product is [-1,-2] or [-2,-3].", "input": "Input: nums = [-1,-2,-3,0,1]", "output": "Output: 2", "explanation": "Explanation: The longest subarray with positive product is [-1,-2] or [-2,-3]."}], "constraints": "Constraints:\n1 <= nums.length <= 10^5\n-10^9 <= nums[i] <= 10^9", "notes": ""}, "1562": {"label": "Medium", "title": "Find Latest Group of Size M", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4069, "total_accepted": 12000.0, "total_submissions": 29400.0, "testcase_example": "'[3,5,1,2,4]\\n1'", "body": "Given an array arr that represents a permutation of numbers from 1 to n.\nYou have a binary string of size n that initially has all its bits set to zero. At each step i (assuming both the binary string and arr are 1-indexed) from 1 to n, the bit at position arr[i] is set to 1.\nYou are also given an integer m. Find the latest step at which there exists a group of ones of length m. A group of ones is a contiguous substring of 1's such that it cannot be extended in either direction.\nReturn the latest step at which there exists a group of ones of length exactly m. If no such group exists, return -1.", "examples": [{"full_text": "Example 1:\nInput: arr = [3,5,1,2,4], m = 1\nOutput: 4\nExplanation:\nStep 1: \"00100\", groups: [\"1\"]\nStep 2: \"00101\", groups: [\"1\", \"1\"]\nStep 3: \"10101\", groups: [\"1\", \"1\", \"1\"]\nStep 4: \"11101\", groups: [\"111\", \"1\"]\nStep 5: \"11111\", groups: [\"11111\"]\nThe latest step at which there exists a group of size 1 is step 4.", "input": "Input: arr = [3,5,1,2,4], m = 1", "output": "Output: 4", "explanation": "Explanation:\nStep 1: \"00100\", groups: [\"1\"]\nStep 2: \"00101\", groups: [\"1\", \"1\"]\nStep 3: \"10101\", groups: [\"1\", \"1\", \"1\"]\nStep 4: \"11101\", groups: [\"111\", \"1\"]\nStep 5: \"11111\", groups: [\"11111\"]\nThe latest step at which there exists a group of size 1 is step 4."}, {"full_text": "Example 2:\nInput: arr = [3,1,5,4,2], m = 2\nOutput: -1\nExplanation:\nStep 1: \"00100\", groups: [\"1\"]\nStep 2: \"10100\", groups: [\"1\", \"1\"]\nStep 3: \"10101\", groups: [\"1\", \"1\", \"1\"]\nStep 4: \"10111\", groups: [\"1\", \"111\"]\nStep 5: \"11111\", groups: [\"11111\"]\nNo group of size 2 exists during any step.", "input": "Input: arr = [3,1,5,4,2], m = 2", "output": "Output: -1", "explanation": "Explanation:\nStep 1: \"00100\", groups: [\"1\"]\nStep 2: \"10100\", groups: [\"1\", \"1\"]\nStep 3: \"10101\", groups: [\"1\", \"1\", \"1\"]\nStep 4: \"10111\", groups: [\"1\", \"111\"]\nStep 5: \"11111\", groups: [\"11111\"]\nNo group of size 2 exists during any step."}], "constraints": "Constraints:\nn == arr.length\n1 <= m <= n <= 10^5\n1 <= arr[i] <= n\nAll integers in arr are distinct.", "notes": ""}, "1561": {"label": "Medium", "title": "Maximum Number of Coins You Can Get", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7815000000000001, "total_accepted": 42000.0, "total_submissions": 53800.0, "testcase_example": "'[2,4,1,2,7,8]'", "body": "There are 3n piles of coins of varying size, you and your friends will take piles of coins as follows:\nIn each step, you will choose any 3 piles of coins (not necessarily consecutive).\nOf your choice, Alice will pick the pile with the maximum number of coins.\nYou will pick the next pile with the maximum number of coins.\nYour friend Bob will pick the last pile.\nRepeat until there are no more piles of coins.\nGiven an array of integers piles where piles[i] is the number of coins in the i^th pile.\nReturn the maximum number of coins that you can have.", "examples": [{"full_text": "Example 1:\nInput: piles = [2,4,1,2,7,8]\nOutput: 9\nExplanation: Choose the triplet (2, 7, 8), Alice Pick the pile with 8 coins, you the pile with 7 coins and Bob the last one.\nChoose the triplet (1, 2, 4), Alice Pick the pile with 4 coins, you the pile with 2 coins and Bob the last one.\nThe maximum number of coins which you can have are: 7 + 2 = 9.\nOn the other hand if we choose this arrangement (1, 2, 8), (2, 4, 7) you only get 2 + 4 = 6 coins which is not optimal.", "input": "Input: piles = [2,4,1,2,7,8]", "output": "Output: 9", "explanation": "Explanation: Choose the triplet (2, 7, 8), Alice Pick the pile with 8 coins, you the pile with 7 coins and Bob the last one.\nChoose the triplet (1, 2, 4), Alice Pick the pile with 4 coins, you the pile with 2 coins and Bob the last one.\nThe maximum number of coins which you can have are: 7 + 2 = 9.\nOn the other hand if we choose this arrangement (1, 2, 8), (2, 4, 7) you only get 2 + 4 = 6 coins which is not optimal."}, {"full_text": "Example 2:\nInput: piles = [2,4,5]\nOutput: 4", "input": "Input: piles = [2,4,5]", "output": "Output: 4", "explanation": ""}, {"full_text": "Example 3:\nInput: piles = [9,8,7,6,5,1,2,3,4]\nOutput: 18", "input": "Input: piles = [9,8,7,6,5,1,2,3,4]", "output": "Output: 18", "explanation": ""}], "constraints": "Constraints:\n3 <= piles.length <= 10^5\npiles.length % 3 == 0\n1 <= piles[i] <= 10^4", "notes": ""}, "1559": {"label": "Medium", "title": "Detect Cycles in 2D Grid", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.47759999999999997, "total_accepted": 21200.0, "total_submissions": 44300.0, "testcase_example": "'[[\"a\",\"a\",\"a\",\"a\"],[\"a\",\"b\",\"b\",\"a\"],[\"a\",\"b\",\"b\",\"a\"],[\"a\",\"a\",\"a\",\"a\"]]'", "body": "Given a 2D array of characters grid of size m x n, you need to find if there exists any cycle consisting of the same value in grid.\nA cycle is a path of length 4 or more in the grid that starts and ends at the same cell. From a given cell, you can move to one of the cells adjacent to it - in one of the four directions (up, down, left, or right), if it has the same value of the current cell.\nAlso, you cannot move to the cell that you visited in your last move. For example, the cycle (1, 1) -> (1, 2) -> (1, 1) is invalid because from (1, 2) we visited (1, 1) which was the last visited cell.\nReturn true if any cycle of the same value exists in grid, otherwise, return false.", "examples": [{"full_text": "Example 1:\nInput: grid = [[\"a\",\"a\",\"a\",\"a\"],[\"a\",\"b\",\"b\",\"a\"],[\"a\",\"b\",\"b\",\"a\"],[\"a\",\"a\",\"a\",\"a\"]]\nOutput: true\nExplanation: There are two valid cycles shown in different colors in the image below:", "input": "Input: grid = [[\"a\",\"a\",\"a\",\"a\"],[\"a\",\"b\",\"b\",\"a\"],[\"a\",\"b\",\"b\",\"a\"],[\"a\",\"a\",\"a\",\"a\"]]", "output": "Output: true", "explanation": "Explanation: There are two valid cycles shown in different colors in the image below:"}, {"full_text": "Example 2:\nInput: grid = [[\"c\",\"c\",\"c\",\"a\"],[\"c\",\"d\",\"c\",\"c\"],[\"c\",\"c\",\"e\",\"c\"],[\"f\",\"c\",\"c\",\"c\"]]\nOutput: true\nExplanation: There is only one valid cycle highlighted in the image below:", "input": "Input: grid = [[\"c\",\"c\",\"c\",\"a\"],[\"c\",\"d\",\"c\",\"c\"],[\"c\",\"c\",\"e\",\"c\"],[\"f\",\"c\",\"c\",\"c\"]]", "output": "Output: true", "explanation": "Explanation: There is only one valid cycle highlighted in the image below:"}, {"full_text": "Example 3:\nInput: grid = [[\"a\",\"b\",\"b\"],[\"b\",\"z\",\"b\"],[\"b\",\"b\",\"a\"]]\nOutput: false", "input": "Input: grid = [[\"a\",\"b\",\"b\"],[\"b\",\"z\",\"b\"],[\"b\",\"b\",\"a\"]]", "output": "Output: false", "explanation": ""}], "constraints": "Constraints:\nm == grid.length\nn == grid[i].length\n1 <= m, n <= 500\ngrid consists only of lowercase English letters.", "notes": ""}, "1558": {"label": "Medium", "title": "Minimum Numbers of Function Calls to Make Target Array", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6381, "total_accepted": 14500.0, "total_submissions": 22800.0, "testcase_example": "'[1,5]'", "body": "You are given an integer array nums. You have an integer array arr of the same length with all values set to 0 initially. You also have the following modify function:\nYou want to use the modify function to covert arr to nums using the minimum number of calls.\nReturn the minimum number of function calls to make nums from arr.\nThe test cases are generated so that the answer fits in a 32-bit signed integer.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,5]\nOutput: 5\nExplanation: Increment by 1 (second element): [0, 0] to get [0, 1] (1 operation).\nDouble all the elements: [0, 1] -> [0, 2] -> [0, 4] (2 operations).\nIncrement by 1 (both elements) [0, 4] -> [1, 4] -> [1, 5] (2 operations).\nTotal of operations: 1 + 2 + 2 = 5.", "input": "Input: nums = [1,5]", "output": "Output: 5", "explanation": "Explanation: Increment by 1 (second element): [0, 0] to get [0, 1] (1 operation).\nDouble all the elements: [0, 1] -> [0, 2] -> [0, 4] (2 operations).\nIncrement by 1 (both elements) [0, 4] -> [1, 4] -> [1, 5] (2 operations).\nTotal of operations: 1 + 2 + 2 = 5."}, {"full_text": "Example 2:\nInput: nums = [2,2]\nOutput: 3\nExplanation: Increment by 1 (both elements) [0, 0] -> [0, 1] -> [1, 1] (2 operations).\nDouble all the elements: [1, 1] -> [2, 2] (1 operation).\nTotal of operations: 2 + 1 = 3.", "input": "Input: nums = [2,2]", "output": "Output: 3", "explanation": "Explanation: Increment by 1 (both elements) [0, 0] -> [0, 1] -> [1, 1] (2 operations).\nDouble all the elements: [1, 1] -> [2, 2] (1 operation).\nTotal of operations: 2 + 1 = 3."}, {"full_text": "Example 3:\nInput: nums = [4,2,5]\nOutput: 6\nExplanation: (initial)[0,0,0] -> [1,0,0] -> [1,0,1] -> [2,0,2] -> [2,1,2] -> [4,2,4] -> [4,2,5](nums).", "input": "Input: nums = [4,2,5]", "output": "Output: 6", "explanation": "Explanation: (initial)[0,0,0] -> [1,0,0] -> [1,0,1] -> [2,0,2] -> [2,1,2] -> [4,2,4] -> [4,2,5](nums)."}], "constraints": "Constraints:\n1 <= nums.length <= 10^5\n0 <= nums[i] <= 10^9", "notes": ""}, "1557": {"label": "Medium", "title": "Minimum Number of Vertices to Reach All Nodes", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7787000000000001, "total_accepted": 50600.0, "total_submissions": 65000.0, "testcase_example": "'6\\n[[0,1],[0,2],[2,5],[3,4],[4,2]]'", "body": "Given a\ndirected acyclic graph,\nwith\nn\nvertices numbered from\n0\nto\nn-1,\nand an array\nedges\nwhere\nedges[i] = [fromi, toi]\nrepresents a directed edge from node\nfromi\nto node\ntoi.\nFind the smallest set of vertices from which all nodes in the graph are reachable. It's guaranteed that a unique solution exists.\nNotice that you can return the vertices in any order.", "examples": [{"full_text": "Example 1:\nInput: n = 6, edges = [[0,1],[0,2],[2,5],[3,4],[4,2]]\nOutput: [0,3]\nExplanation: It's not possible to reach all the nodes from a single vertex. From 0 we can reach [0,1,2,5]. From 3 we can reach [3,4,2,5]. So we output [0,3].", "input": "Input: n = 6, edges = [[0,1],[0,2],[2,5],[3,4],[4,2]]", "output": "Output: [0,3]", "explanation": "Explanation: It's not possible to reach all the nodes from a single vertex. From 0 we can reach [0,1,2,5]. From 3 we can reach [3,4,2,5]. So we output [0,3]."}, {"full_text": "Example 2:\nInput: n = 5, edges = [[0,1],[2,1],[3,1],[1,4],[2,4]]\nOutput: [0,2,3]\nExplanation: Notice that vertices 0, 3 and 2 are not reachable from any other node, so we must include them. Also any of these vertices can reach nodes 1 and 4.", "input": "Input: n = 5, edges = [[0,1],[2,1],[3,1],[1,4],[2,4]]", "output": "Output: [0,2,3]", "explanation": "Explanation: Notice that vertices 0, 3 and 2 are not reachable from any other node, so we must include them. Also any of these vertices can reach nodes 1 and 4."}], "constraints": "Constraints:\n2 <= n <= 10^5\n1 <= edges.length <= min(10^5, n * (n - 1) / 2)\nedges[i].length == 2\n0 <= fromi,\ntoi < n\nAll pairs (fromi, toi) are distinct.", "notes": ""}, "1552": {"label": "Medium", "title": "Magnetic Force Between Two Balls", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5371, "total_accepted": 23700.0, "total_submissions": 44100.0, "testcase_example": "'[1,2,3,4,7]\\n3'", "body": "In the universe Earth C-137, Rick discovered a special form of magnetic force between two balls if they are put in his new invented basket. Rick has n empty baskets, the i^th basket is at position[i], Morty has m balls and needs to distribute the balls into the baskets such that the minimum magnetic force between any two balls is maximum.\nRick stated that magnetic force between two different balls at positions x and y is |x - y|.\nGiven the integer array position and the integer m. Return the required force.", "examples": [{"full_text": "Example 1:\nInput: position = [1,2,3,4,7], m = 3\nOutput: 3\nExplanation: Distributing the 3 balls into baskets 1, 4 and 7 will make the magnetic force between ball pairs [3, 3, 6]. The minimum magnetic force is 3. We cannot achieve a larger minimum magnetic force than 3.", "input": "Input: position = [1,2,3,4,7], m = 3", "output": "Output: 3", "explanation": "Explanation: Distributing the 3 balls into baskets 1, 4 and 7 will make the magnetic force between ball pairs [3, 3, 6]. The minimum magnetic force is 3. We cannot achieve a larger minimum magnetic force than 3."}, {"full_text": "Example 2:\nInput: position = [5,4,3,2,1,1000000000], m = 2\nOutput: 999999999\nExplanation: We can use baskets 1 and 1000000000.", "input": "Input: position = [5,4,3,2,1,1000000000], m = 2", "output": "Output: 999999999", "explanation": "Explanation: We can use baskets 1 and 1000000000."}], "constraints": "Constraints:\nn == position.length\n2 <= n <= 10^5\n1 <= position[i] <= 10^9\nAll integers in position are distinct.\n2 <= m <= position.length", "notes": ""}, "1551": {"label": "Medium", "title": "Minimum Operations to Make Array Equal", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.807, "total_accepted": 62700.0, "total_submissions": 77600.0, "testcase_example": "'3'", "body": "You have an array arr of length n where arr[i] = (2 * i) + 1 for all valid values of i (i.e.,\n0 <= i < n).\nIn one operation, you can select two indices x and y where 0 <= x, y < n and subtract 1 from arr[x] and add 1 to arr[y] (i.e., perform arr[x] -=1 and arr[y] += 1). The goal is to make all the elements of the array equal. It is guaranteed that all the elements of the array can be made equal using some operations.\nGiven an integer n, the length of the array, return the minimum number of operations needed to make all the elements of arr equal.", "examples": [{"full_text": "Example 1:\nInput: n = 3\nOutput: 2\nExplanation: arr = [1, 3, 5]\nFirst operation choose x = 2 and y = 0, this leads arr to be [2, 3, 4]\nIn the second operation choose x = 2 and y = 0 again, thus arr = [3, 3, 3].", "input": "Input: n = 3", "output": "Output: 2", "explanation": "Explanation: arr = [1, 3, 5]\nFirst operation choose x = 2 and y = 0, this leads arr to be [2, 3, 4]\nIn the second operation choose x = 2 and y = 0 again, thus arr = [3, 3, 3]."}, {"full_text": "Example 2:\nInput: n = 6\nOutput: 9", "input": "Input: n = 6", "output": "Output: 9", "explanation": ""}], "constraints": "Constraints:\n1 <= n <= 10^4", "notes": ""}, "1546": {"label": "Medium", "title": "Maximum Number of Non-Overlapping Subarrays With Sum Equals Target", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.46009999999999995, "total_accepted": 18200.0, "total_submissions": 39500.0, "testcase_example": "'[1,1,1,1,1]\\n2'", "body": "Given an array nums and an integer target, return the maximum number of non-empty non-overlapping subarrays such that the sum of values in each subarray is equal to target.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,1,1,1,1], target = 2\nOutput: 2\nExplanation: There are 2 non-overlapping subarrays [1,1,1,1,1] with sum equals to target(2).", "input": "Input: nums = [1,1,1,1,1], target = 2", "output": "Output: 2", "explanation": "Explanation: There are 2 non-overlapping subarrays [1,1,1,1,1] with sum equals to target(2)."}, {"full_text": "Example 2:\nInput: nums = [-1,3,5,1,4,2,-9], target = 6\nOutput: 2\nExplanation: There are 3 subarrays with sum equal to 6.\n([5,1], [4,2], [3,5,1,4,2,-9]) but only the first 2 are non-overlapping.", "input": "Input: nums = [-1,3,5,1,4,2,-9], target = 6", "output": "Output: 2", "explanation": "Explanation: There are 3 subarrays with sum equal to 6.\n([5,1], [4,2], [3,5,1,4,2,-9]) but only the first 2 are non-overlapping."}], "constraints": "Constraints:\n1 <= nums.length <= 10^5\n-10^4 <= nums[i] <= 10^4\n0 <= target <= 10^6", "notes": ""}, "1545": {"label": "Medium", "title": "Find Kth Bit in Nth Binary String", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5811999999999999, "total_accepted": 22000.0, "total_submissions": 37900.0, "testcase_example": "'3\\n1'", "body": "Given two positive integers n and k, the binary string Sn is formed as follows:\nS1 = \"0\"\nSi = Si - 1 + \"1\" + reverse(invert(Si - 1)) for i > 1\nWhere + denotes the concatenation operation, reverse(x) returns the reversed string x, and invert(x) inverts all the bits in x (0 changes to 1 and 1 changes to 0).\nFor example, the first four strings in the above sequence are:\nS1 = \"0\"\nS2 = \"011\"\nS3 = \"0111001\"\nS4 = \"011100110110001\"\nReturn the k^th bit in Sn. It is guaranteed that k is valid for the given n.", "examples": [{"full_text": "Example 1:\nInput: n = 3, k = 1\nOutput: \"0\"\nExplanation: S3 is \"0111001\".\nThe 1^st bit is \"0\".", "input": "Input: n = 3, k = 1", "output": "Output: \"0\"", "explanation": "Explanation: S3 is \"0111001\".\nThe 1^st bit is \"0\"."}, {"full_text": "Example 2:\nInput: n = 4, k = 11\nOutput: \"1\"\nExplanation: S4 is \"011100110110001\".\nThe 11^th bit is \"1\".", "input": "Input: n = 4, k = 11", "output": "Output: \"1\"", "explanation": "Explanation: S4 is \"011100110110001\".\nThe 11^th bit is \"1\"."}], "constraints": "Constraints:\n1 <= n <= 20\n1 <= k <= 2^n - 1", "notes": ""}, "1541": {"label": "Medium", "title": "Minimum Insertions to Balance a Parentheses String", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.48719999999999997, "total_accepted": 25500.0, "total_submissions": 52400.0, "testcase_example": "'\"(()))\"'", "body": "Given a parentheses string s containing only the characters '(' and ')'. A parentheses string is balanced if:\nAny left parenthesis '(' must have a corresponding two consecutive right parenthesis '))'.\nLeft parenthesis '(' must go before the corresponding two consecutive right parenthesis '))'.\nIn other words, we treat '(' as an opening parenthesis and '))' as a closing parenthesis.\nFor example, \"())\", \"())(())))\" and \"(())())))\" are balanced, \")()\", \"()))\" and \"(()))\" are not balanced.\nYou can insert the characters '(' and ')' at any position of the string to balance it if needed.\nReturn the minimum number of insertions needed to make s balanced.", "examples": [{"full_text": "Example 1:\nInput: s = \"(()))\"\nOutput: 1\nExplanation: The second '(' has two matching '))', but the first '(' has only ')' matching. We need to to add one more ')' at the end of the string to be \"(())))\" which is balanced.", "input": "Input: s = \"(()))\"", "output": "Output: 1", "explanation": "Explanation: The second '(' has two matching '))', but the first '(' has only ')' matching. We need to to add one more ')' at the end of the string to be \"(())))\" which is balanced."}, {"full_text": "Example 2:\nInput: s = \"())\"\nOutput: 0\nExplanation: The string is already balanced.", "input": "Input: s = \"())\"", "output": "Output: 0", "explanation": "Explanation: The string is already balanced."}, {"full_text": "Example 3:\nInput: s = \"))())(\"\nOutput: 3\nExplanation: Add '(' to match the first '))', Add '))' to match the last '('.", "input": "Input: s = \"))())(\"", "output": "Output: 3", "explanation": "Explanation: Add '(' to match the first '))', Add '))' to match the last '('."}], "constraints": "Constraints:\n1 <= s.length <= 10^5\ns consists of '(' and ')' only.", "notes": ""}, "1540": {"label": "Medium", "title": "Can Convert String in K Moves", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3234, "total_accepted": 13000.0, "total_submissions": 40100.0, "testcase_example": "'\"input\"\\n\"ouput\"\\n9'", "body": "Given two strings\ns\nand\nt, your goal is to convert\ns\ninto\nt\nin\nk\nmoves or less.\nDuring the\ni^th\n(1 <= i <= k)\nmove you can:\nChoose any index\nj\n(1-indexed) from\ns, such that\n1 <= j <= s.length\nand j\nhas not been chosen in any previous move,\nand shift the character at that index\ni\ntimes.\nDo nothing.\nShifting a character means replacing it by the next letter in the alphabet\n(wrapping around so that\n'z'\nbecomes\n'a'). Shifting a character by\ni\nmeans applying the shift operations\ni\ntimes.\nRemember that any index\nj\ncan be picked at most once.\nReturn\ntrue\nif it's possible to convert\ns\ninto\nt\nin no more than\nk\nmoves, otherwise return\nfalse.", "examples": [{"full_text": "Example 1:\nInput: s = \"input\", t = \"ouput\", k = 9\nOutput: true\nExplanation: In the 6th move, we shift 'i' 6 times to get 'o'. And in the 7th move we shift 'n' to get 'u'.", "input": "Input: s = \"input\", t = \"ouput\", k = 9", "output": "Output: true", "explanation": "Explanation: In the 6th move, we shift 'i' 6 times to get 'o'. And in the 7th move we shift 'n' to get 'u'."}, {"full_text": "Example 2:\nInput: s = \"abc\", t = \"bcd\", k = 10\nOutput: false\nExplanation: We need to shift each character in s one time to convert it into t. We can shift 'a' to 'b' during the 1st move. However, there is no way to shift the other characters in the remaining moves to obtain t from s.", "input": "Input: s = \"abc\", t = \"bcd\", k = 10", "output": "Output: false", "explanation": "Explanation: We need to shift each character in s one time to convert it into t. We can shift 'a' to 'b' during the 1st move. However, there is no way to shift the other characters in the remaining moves to obtain t from s."}, {"full_text": "Example 3:\nInput: s = \"aab\", t = \"bbb\", k = 27\nOutput: true\nExplanation: In the 1st move, we shift the first 'a' 1 time to get 'b'. In the 27th move, we shift the second 'a' 27 times to get 'b'.", "input": "Input: s = \"aab\", t = \"bbb\", k = 27", "output": "Output: true", "explanation": "Explanation: In the 1st move, we shift the first 'a' 1 time to get 'b'. In the 27th move, we shift the second 'a' 27 times to get 'b'."}], "constraints": "Constraints:\n1 <= s.length, t.length <= 10^5\n0 <= k <= 10^9\ns, t contain\nonly lowercase English letters.", "notes": ""}, "1536": {"label": "Medium", "title": "Minimum Swaps to Arrange a Binary Grid", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4556, "total_accepted": 10900.0, "total_submissions": 23800.0, "testcase_example": "'[[0,0,1],[1,1,0],[1,0,0]]'", "body": "Given an n x n binary grid, in one step you can choose two adjacent rows of the grid and swap them.\nA grid is said to be valid if all the cells above the main diagonal are zeros.\nReturn the minimum number of steps needed to make the grid valid, or -1 if the grid cannot be valid.\nThe main diagonal of a grid is the diagonal that starts at cell (1, 1) and ends at cell (n, n).", "examples": [{"full_text": "Example 1:\nInput: grid = [[0,0,1],[1,1,0],[1,0,0]]\nOutput: 3", "input": "Input: grid = [[0,0,1],[1,1,0],[1,0,0]]", "output": "Output: 3", "explanation": ""}, {"full_text": "Example 2:\nInput: grid = [[0,1,1,0],[0,1,1,0],[0,1,1,0],[0,1,1,0]]\nOutput: -1\nExplanation: All rows are similar, swaps have no effect on the grid.", "input": "Input: grid = [[0,1,1,0],[0,1,1,0],[0,1,1,0],[0,1,1,0]]", "output": "Output: -1", "explanation": "Explanation: All rows are similar, swaps have no effect on the grid."}, {"full_text": "Example 3:\nInput: grid = [[1,0,0],[1,1,0],[1,1,1]]\nOutput: 0", "input": "Input: grid = [[1,0,0],[1,1,0],[1,1,1]]", "output": "Output: 0", "explanation": ""}], "constraints": "Constraints:\nn == grid.length == grid[i].length\n1 <= n <= 200\ngrid[i][j] is either 0 or 1", "notes": ""}, "1535": {"label": "Medium", "title": "Find the Winner of an Array Game", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.488, "total_accepted": 23600.0, "total_submissions": 48400.0, "testcase_example": "'[2,1,3,5,4,6,7]\\n2'", "body": "Given an integer array arr of distinct integers and an integer k.\nA game will be played between the first two elements of the array (i.e. arr[0] and arr[1]). In each round of the game, we compare arr[0] with arr[1], the larger integer wins and remains at position 0, and the smaller integer moves to the end of the array. The game ends when an integer wins k consecutive rounds.\nReturn the integer which will win the game.\nIt is guaranteed that there will be a winner of the game.", "examples": [{"full_text": "Example 1:\nInput: arr = [2,1,3,5,4,6,7], k = 2\nOutput: 5\nExplanation: Let's see the rounds of the game:\nRound | arr | winner | win_count\n1 | [2,1,3,5,4,6,7] | 2 | 1\n2 | [2,3,5,4,6,7,1] | 3 | 1\n3 | [3,5,4,6,7,1,2] | 5 | 1\n4 | [5,4,6,7,1,2,3] | 5 | 2\nSo we can see that 4 rounds will be played and 5 is the winner because it wins 2 consecutive games.", "input": "Input: arr = [2,1,3,5,4,6,7], k = 2", "output": "Output: 5", "explanation": "Explanation: Let's see the rounds of the game:\nRound | arr | winner | win_count\n1 | [2,1,3,5,4,6,7] | 2 | 1\n2 | [2,3,5,4,6,7,1] | 3 | 1\n3 | [3,5,4,6,7,1,2] | 5 | 1\n4 | [5,4,6,7,1,2,3] | 5 | 2\nSo we can see that 4 rounds will be played and 5 is the winner because it wins 2 consecutive games."}, {"full_text": "Example 2:\nInput: arr = [3,2,1], k = 10\nOutput: 3\nExplanation: 3 will win the first 10 rounds consecutively.", "input": "Input: arr = [3,2,1], k = 10", "output": "Output: 3", "explanation": "Explanation: 3 will win the first 10 rounds consecutively."}], "constraints": "Constraints:\n2 <= arr.length <= 10^5\n1 <= arr[i] <= 10^6\narr contains distinct integers.\n1 <= k <= 10^9", "notes": ""}, "1530": {"label": "Medium", "title": "Number of Good Leaf Nodes Pairs", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5924, "total_accepted": 23200.0, "total_submissions": 39100.0, "testcase_example": "'[1,2,3,null,4]\\n3'", "body": "You are given the root of a binary tree and an integer distance. A pair of two different leaf nodes of a binary tree is said to be good if the length of the shortest path between them is less than or equal to distance.\nReturn the number of good leaf node pairs in the tree.", "examples": [{"full_text": "Example 1:\nInput: root = [1,2,3,null,4], distance = 3\nOutput: 1\nExplanation: The leaf nodes of the tree are 3 and 4 and the length of the shortest path between them is 3. This is the only good pair.", "input": "Input: root = [1,2,3,null,4], distance = 3", "output": "Output: 1", "explanation": "Explanation: The leaf nodes of the tree are 3 and 4 and the length of the shortest path between them is 3. This is the only good pair."}, {"full_text": "Example 2:\nInput: root = [1,2,3,4,5,6,7], distance = 3\nOutput: 2\nExplanation: The good pairs are [4,5] and [6,7] with shortest path = 2. The pair [4,6] is not good because the length of ther shortest path between them is 4.", "input": "Input: root = [1,2,3,4,5,6,7], distance = 3", "output": "Output: 2", "explanation": "Explanation: The good pairs are [4,5] and [6,7] with shortest path = 2. The pair [4,6] is not good because the length of ther shortest path between them is 4."}, {"full_text": "Example 3:\nInput: root = [7,1,4,6,null,5,3,null,null,null,null,null,2], distance = 3\nOutput: 1\nExplanation: The only good pair is [2,5].", "input": "Input: root = [7,1,4,6,null,5,3,null,null,null,null,null,2], distance = 3", "output": "Output: 1", "explanation": "Explanation: The only good pair is [2,5]."}], "constraints": "Constraints:\nThe number of nodes in the tree is in the range [1, 2^10].\n1 <= Node.val <= 100\n1 <= distance <= 10", "notes": ""}, "1529": {"label": "Medium", "title": "Minimum Suffix Flips", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.725, "total_accepted": 31000.0, "total_submissions": 42800.0, "testcase_example": "'\"10111\"'", "body": "You are given a 0-indexed binary string target of length n. You have another binary string s of length n that is initially set to all zeros. You want to make s equal to target.\nIn one operation, you can pick an index i where 0 <= i < n and flip all bits in the inclusive range [i, n - 1]. Flip means changing '0' to '1' and '1' to '0'.\nReturn the minimum number of operations needed to make s equal to target.", "examples": [{"full_text": "Example 1:\nInput: target = \"10111\"\nOutput: 3\nExplanation: Initially, s = \"00000\".\nChoose index i = 2: \"00000\" -> \"00111\"\nChoose index i = 0: \"00111\" -> \"11000\"\nChoose index i = 1: \"11000\" -> \"10111\"\nWe need at least 3 flip operations to form target.", "input": "Input: target = \"10111\"", "output": "Output: 3", "explanation": "Explanation: Initially, s = \"00000\".\nChoose index i = 2: \"00000\" -> \"00111\"\nChoose index i = 0: \"00111\" -> \"11000\"\nChoose index i = 1: \"11000\" -> \"10111\"\nWe need at least 3 flip operations to form target."}, {"full_text": "Example 2:\nInput: target = \"101\"\nOutput: 3\nExplanation: Initially, s = \"000\".\nChoose index i = 0: \"000\" -> \"111\"\nChoose index i = 1: \"111\" -> \"100\"\nChoose index i = 2: \"100\" -> \"101\"\nWe need at least 3 flip operations to form target.", "input": "Input: target = \"101\"", "output": "Output: 3", "explanation": "Explanation: Initially, s = \"000\".\nChoose index i = 0: \"000\" -> \"111\"\nChoose index i = 1: \"111\" -> \"100\"\nChoose index i = 2: \"100\" -> \"101\"\nWe need at least 3 flip operations to form target."}, {"full_text": "Example 3:\nInput: target = \"00000\"\nOutput: 0\nExplanation: We do not need any operations since the initial s already equals target.", "input": "Input: target = \"00000\"", "output": "Output: 0", "explanation": "Explanation: We do not need any operations since the initial s already equals target."}], "constraints": "Constraints:\nn == target.length\n1 <= n <= 10^5\ntarget[i] is either '0' or '1'.", "notes": ""}, "1525": {"label": "Medium", "title": "Number of Good Ways to Split a String", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7051999999999999, "total_accepted": 64599.99999999999, "total_submissions": 91500.0, "testcase_example": "'\"aacaba\"'", "body": "You are given a string s.\nA split is called good if you can split s into two non-empty strings sleft and sright where their concatenation is equal to s (i.e., sleft + sright = s) and the number of distinct letters in sleft and sright is the same.\nReturn the number of good splits you can make in s.", "examples": [{"full_text": "Example 1:\nInput: s = \"aacaba\"\nOutput: 2\nExplanation: There are 5 ways to split \"aacaba\" and 2 of them are good.\n(\"a\", \"acaba\") Left string and right string contains 1 and 3 different letters respectively.\n(\"aa\", \"caba\") Left string and right string contains 1 and 3 different letters respectively.\n(\"aac\", \"aba\") Left string and right string contains 2 and 2 different letters respectively (good split).\n(\"aaca\", \"ba\") Left string and right string contains 2 and 2 different letters respectively (good split).\n(\"aacab\", \"a\") Left string and right string contains 3 and 1 different letters respectively.", "input": "Input: s = \"aacaba\"", "output": "Output: 2", "explanation": "Explanation: There are 5 ways to split \"aacaba\" and 2 of them are good.\n(\"a\", \"acaba\") Left string and right string contains 1 and 3 different letters respectively.\n(\"aa\", \"caba\") Left string and right string contains 1 and 3 different letters respectively.\n(\"aac\", \"aba\") Left string and right string contains 2 and 2 different letters respectively (good split).\n(\"aaca\", \"ba\") Left string and right string contains 2 and 2 different letters respectively (good split).\n(\"aacab\", \"a\") Left string and right string contains 3 and 1 different letters respectively."}, {"full_text": "Example 2:\nInput: s = \"abcd\"\nOutput: 1\nExplanation: Split the string as follows (\"ab\", \"cd\").", "input": "Input: s = \"abcd\"", "output": "Output: 1", "explanation": "Explanation: Split the string as follows (\"ab\", \"cd\")."}], "constraints": "Constraints:\n1 <= s.length <= 10^5\ns consists of only lowercase English letters.", "notes": ""}, "1524": {"label": "Medium", "title": "Number of Sub-arrays With Odd Sum", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.43729999999999997, "total_accepted": 21200.0, "total_submissions": 48400.0, "testcase_example": "'[1,3,5]'", "body": "Given an array of integers arr, return the number of subarrays with an odd sum.\nSince the answer can be very large, return it modulo 10^9 + 7.", "examples": [{"full_text": "Example 1:\nInput: arr = [1,3,5]\nOutput: 4\nExplanation: All subarrays are [[1],[1,3],[1,3,5],[3],[3,5],[5]]\nAll sub-arrays sum are [1,4,9,3,8,5].\nOdd sums are [1,9,3,5] so the answer is 4.", "input": "Input: arr = [1,3,5]", "output": "Output: 4", "explanation": "Explanation: All subarrays are [[1],[1,3],[1,3,5],[3],[3,5],[5]]\nAll sub-arrays sum are [1,4,9,3,8,5].\nOdd sums are [1,9,3,5] so the answer is 4."}, {"full_text": "Example 2:\nInput: arr = [2,4,6]\nOutput: 0\nExplanation: All subarrays are [[2],[2,4],[2,4,6],[4],[4,6],[6]]\nAll sub-arrays sum are [2,6,12,4,10,6].\nAll sub-arrays have even sum and the answer is 0.", "input": "Input: arr = [2,4,6]", "output": "Output: 0", "explanation": "Explanation: All subarrays are [[2],[2,4],[2,4,6],[4],[4,6],[6]]\nAll sub-arrays sum are [2,6,12,4,10,6].\nAll sub-arrays have even sum and the answer is 0."}, {"full_text": "Example 3:\nInput: arr = [1,2,3,4,5,6,7]\nOutput: 16", "input": "Input: arr = [1,2,3,4,5,6,7]", "output": "Output: 16", "explanation": ""}], "constraints": "Constraints:\n1 <= arr.length <= 10^5\n1 <= arr[i] <= 100", "notes": ""}, "1519": {"label": "Medium", "title": "Number of Nodes in the Sub-Tree With the Same Label", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3922, "total_accepted": 15500.0, "total_submissions": 39400.0, "testcase_example": "'7\\n[[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]]\\n\"abaedcd\"'", "body": "You are given a tree (i.e. a connected, undirected graph that has no cycles) consisting of n nodes numbered from 0 to n - 1 and exactly n - 1 edges. The root of the tree is the node 0, and each node of the tree has a label which is a lower-case character given in the string labels (i.e. The node with the number i has the label labels[i]).\nThe edges array is given on the form edges[i] = [ai, bi], which means there is an edge between nodes ai and bi in the tree.\nReturn an array of size n where ans[i] is the number of nodes in the subtree of the i^th node which have the same label as node i.\nA subtree of a tree T is the tree consisting of a node in T and all of its descendant nodes.", "examples": [{"full_text": "Example 1:\nInput: n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], labels = \"abaedcd\"\nOutput: [2,1,1,1,1,1,1]\nExplanation: Node 0 has label 'a' and its sub-tree has node 2 with label 'a' as well, thus the answer is 2. Notice that any node is part of its sub-tree.\nNode 1 has a label 'b'. The sub-tree of node 1 contains nodes 1,4 and 5, as nodes 4 and 5 have different labels than node 1, the answer is just 1 (the node itself).", "input": "Input: n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], labels = \"abaedcd\"", "output": "Output: [2,1,1,1,1,1,1]", "explanation": "Explanation: Node 0 has label 'a' and its sub-tree has node 2 with label 'a' as well, thus the answer is 2. Notice that any node is part of its sub-tree.\nNode 1 has a label 'b'. The sub-tree of node 1 contains nodes 1,4 and 5, as nodes 4 and 5 have different labels than node 1, the answer is just 1 (the node itself)."}, {"full_text": "Example 2:\nInput: n = 4, edges = [[0,1],[1,2],[0,3]], labels = \"bbbb\"\nOutput: [4,2,1,1]\nExplanation: The sub-tree of node 2 contains only node 2, so the answer is 1.\nThe sub-tree of node 3 contains only node 3, so the answer is 1.\nThe sub-tree of node 1 contains nodes 1 and 2, both have label 'b', thus the answer is 2.\nThe sub-tree of node 0 contains nodes 0, 1, 2 and 3, all with label 'b', thus the answer is 4.", "input": "Input: n = 4, edges = [[0,1],[1,2],[0,3]], labels = \"bbbb\"", "output": "Output: [4,2,1,1]", "explanation": "Explanation: The sub-tree of node 2 contains only node 2, so the answer is 1.\nThe sub-tree of node 3 contains only node 3, so the answer is 1.\nThe sub-tree of node 1 contains nodes 1 and 2, both have label 'b', thus the answer is 2.\nThe sub-tree of node 0 contains nodes 0, 1, 2 and 3, all with label 'b', thus the answer is 4."}, {"full_text": "Example 3:\nInput: n = 5, edges = [[0,1],[0,2],[1,3],[0,4]], labels = \"aabab\"\nOutput: [3,2,1,1,1]", "input": "Input: n = 5, edges = [[0,1],[0,2],[1,3],[0,4]], labels = \"aabab\"", "output": "Output: [3,2,1,1,1]", "explanation": ""}], "constraints": "Constraints:\n1 <= n <= 10^5\nedges.length == n - 1\nedges[i].length == 2\n0 <= ai, bi < n\nai != bi\nlabels.length == n\nlabels is consisting of only of lowercase English letters.", "notes": ""}, "1514": {"label": "Medium", "title": "Path with Maximum Probability", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.45539999999999997, "total_accepted": 37400.0, "total_submissions": 82200.0, "testcase_example": "'3\\n[[0,1],[1,2],[0,2]]\\n[0.5,0.5,0.2]\\n0\\n2'", "body": "You are given an undirected weighted graph of\nn\nnodes (0-indexed), represented by an edge list where\nedges[i] = [a, b]\nis an undirected edge connecting the nodes\na\nand\nb\nwith a probability of success of traversing that edge\nsuccProb[i].\nGiven two nodes\nstart\nand\nend, find the path with the maximum probability of success to go from\nstart\nto\nend\nand return its success probability.\nIf there is no path from\nstart\nto\nend, return\n0. Your answer will be accepted if it differs from the correct answer by at most 1e-5.", "examples": [{"full_text": "Example 1:\nInput: n = 3, edges = [[0,1],[1,2],[0,2]], succProb = [0.5,0.5,0.2], start = 0, end = 2\nOutput: 0.25000\nExplanation:\nThere are two paths from start to end, one having a probability of success = 0.2 and the other has 0.5 * 0.5 = 0.25.", "input": "Input: n = 3, edges = [[0,1],[1,2],[0,2]], succProb = [0.5,0.5,0.2], start = 0, end = 2", "output": "Output: 0.25000", "explanation": "Explanation:\nThere are two paths from start to end, one having a probability of success = 0.2 and the other has 0.5 * 0.5 = 0.25."}, {"full_text": "Example 2:\nInput: n = 3, edges = [[0,1],[1,2],[0,2]], succProb = [0.5,0.5,0.3], start = 0, end = 2\nOutput: 0.30000", "input": "Input: n = 3, edges = [[0,1],[1,2],[0,2]], succProb = [0.5,0.5,0.3], start = 0, end = 2", "output": "Output: 0.30000", "explanation": ""}, {"full_text": "Example 3:\nInput: n = 3, edges = [[0,1]], succProb = [0.5], start = 0, end = 2\nOutput: 0.00000\nExplanation:\nThere is no path between 0 and 2.", "input": "Input: n = 3, edges = [[0,1]], succProb = [0.5], start = 0, end = 2", "output": "Output: 0.00000", "explanation": "Explanation:\nThere is no path between 0 and 2."}], "constraints": "Constraints:\n2 <= n <= 10^4\n0 <= start, end < n\nstart != end\n0 <= a, b < n\na != b\n0 <= succProb.length == edges.length <= 2*10^4\n0 <= succProb[i] <= 1\nThere is at most one edge between every two nodes.", "notes": ""}, "1513": {"label": "Medium", "title": "Number of Substrings With Only 1s", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.439, "total_accepted": 27800.0, "total_submissions": 63300.0, "testcase_example": "'\"0110111\"'", "body": "Given a binary string s, return the number of substrings with all characters 1's. Since the answer may be too large, return it modulo 10^9 + 7.", "examples": [{"full_text": "Example 1:\nInput: s = \"0110111\"\nOutput: 9\nExplanation: There are 9 substring in total with only 1's characters.\n\"1\" -> 5 times.\n\"11\" -> 3 times.\n\"111\" -> 1 time.", "input": "Input: s = \"0110111\"", "output": "Output: 9", "explanation": "Explanation: There are 9 substring in total with only 1's characters.\n\"1\" -> 5 times.\n\"11\" -> 3 times.\n\"111\" -> 1 time."}, {"full_text": "Example 2:\nInput: s = \"101\"\nOutput: 2\nExplanation: Substring \"1\" is shown 2 times in s.", "input": "Input: s = \"101\"", "output": "Output: 2", "explanation": "Explanation: Substring \"1\" is shown 2 times in s."}, {"full_text": "Example 3:\nInput: s = \"111111\"\nOutput: 21\nExplanation: Each substring contains only 1's characters.", "input": "Input: s = \"111111\"", "output": "Output: 21", "explanation": "Explanation: Each substring contains only 1's characters."}], "constraints": "Constraints:\n1 <= s.length <= 10^5\ns[i] is either '0' or '1'.", "notes": ""}, "1509": {"label": "Medium", "title": "Minimum Difference Between Largest and Smallest Value in Three Moves", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5598, "total_accepted": 56700.0, "total_submissions": 101300.0, "testcase_example": "'[5,3,2,4]'", "body": "You are given an integer array nums. In one move, you can choose one element of nums and change it by any value.\nReturn the minimum difference between the largest and smallest value of nums after performing at most three moves.", "examples": [{"full_text": "Example 1:\nInput: nums = [5,3,2,4]\nOutput: 0\nExplanation: Change the array [5,3,2,4] to [2,2,2,2].\nThe difference between the maximum and minimum is 2-2 = 0.", "input": "Input: nums = [5,3,2,4]", "output": "Output: 0", "explanation": "Explanation: Change the array [5,3,2,4] to [2,2,2,2].\nThe difference between the maximum and minimum is 2-2 = 0."}, {"full_text": "Example 2:\nInput: nums = [1,5,0,10,14]\nOutput: 1\nExplanation: Change the array [1,5,0,10,14] to [1,1,0,1,1].\nThe difference between the maximum and minimum is 1-0 = 1.", "input": "Input: nums = [1,5,0,10,14]", "output": "Output: 1", "explanation": "Explanation: Change the array [1,5,0,10,14] to [1,1,0,1,1].\nThe difference between the maximum and minimum is 1-0 = 1."}], "constraints": "Constraints:\n1 <= nums.length <= 10^5\n-10^9 <= nums[i] <= 10^9", "notes": ""}, "1508": {"label": "Medium", "title": "Range Sum of Sorted Subarray Sums", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5912, "total_accepted": 23100.0, "total_submissions": 39100.0, "testcase_example": "'[1,2,3,4]\\n4\\n1\\n5'", "body": "You are given the array nums consisting of n positive integers. You computed the sum of all non-empty continuous subarrays from the array and then sorted them in non-decreasing order, creating a new array of n * (n + 1) / 2 numbers.\nReturn the sum of the numbers from index left to index right (indexed from 1), inclusive, in the new array. Since the answer can be a huge number return it modulo 10^9 + 7.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,2,3,4], n = 4, left = 1, right = 5\nOutput: 13\nExplanation: All subarray sums are 1, 3, 6, 10, 2, 5, 9, 3, 7, 4. After sorting them in non-decreasing order we have the new array [1, 2, 3, 3, 4, 5, 6, 7, 9, 10]. The sum of the numbers from index le = 1 to ri = 5 is 1 + 2 + 3 + 3 + 4 = 13.", "input": "Input: nums = [1,2,3,4], n = 4, left = 1, right = 5", "output": "Output: 13", "explanation": "Explanation: All subarray sums are 1, 3, 6, 10, 2, 5, 9, 3, 7, 4. After sorting them in non-decreasing order we have the new array [1, 2, 3, 3, 4, 5, 6, 7, 9, 10]. The sum of the numbers from index le = 1 to ri = 5 is 1 + 2 + 3 + 3 + 4 = 13."}, {"full_text": "Example 2:\nInput: nums = [1,2,3,4], n = 4, left = 3, right = 4\nOutput: 6\nExplanation: The given array is the same as example 1. We have the new array [1, 2, 3, 3, 4, 5, 6, 7, 9, 10]. The sum of the numbers from index le = 3 to ri = 4 is 3 + 3 = 6.", "input": "Input: nums = [1,2,3,4], n = 4, left = 3, right = 4", "output": "Output: 6", "explanation": "Explanation: The given array is the same as example 1. We have the new array [1, 2, 3, 3, 4, 5, 6, 7, 9, 10]. The sum of the numbers from index le = 3 to ri = 4 is 3 + 3 = 6."}, {"full_text": "Example 3:\nInput: nums = [1,2,3,4], n = 4, left = 1, right = 10\nOutput: 50", "input": "Input: nums = [1,2,3,4], n = 4, left = 1, right = 10", "output": "Output: 50", "explanation": ""}], "constraints": "Constraints:\nn == nums.length\n1 <= nums.length <= 1000\n1 <= nums[i] <= 100\n1 <= left <= right <= n * (n + 1) / 2", "notes": ""}, "1504": {"label": "Medium", "title": "Count Submatrices With All Ones", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5898, "total_accepted": 33200.0, "total_submissions": 56300.0, "testcase_example": "'[[1,0,1],[1,1,0],[1,1,0]]'", "body": "Given an m x n binary matrix mat, return the number of submatrices that have all ones.", "examples": [{"full_text": "Example 1:\nInput: mat = [[1,0,1],[1,1,0],[1,1,0]]\nOutput: 13\nExplanation:\nThere are 6 rectangles of side 1x1.\nThere are 2 rectangles of side 1x2.\nThere are 3 rectangles of side 2x1.\nThere is 1 rectangle of side 2x2.\nThere is 1 rectangle of side 3x1.\nTotal number of rectangles = 6 + 2 + 3 + 1 + 1 = 13.", "input": "Input: mat = [[1,0,1],[1,1,0],[1,1,0]]", "output": "Output: 13", "explanation": "Explanation:\nThere are 6 rectangles of side 1x1.\nThere are 2 rectangles of side 1x2.\nThere are 3 rectangles of side 2x1.\nThere is 1 rectangle of side 2x2.\nThere is 1 rectangle of side 3x1.\nTotal number of rectangles = 6 + 2 + 3 + 1 + 1 = 13."}, {"full_text": "Example 2:\nInput: mat = [[0,1,1,0],[0,1,1,1],[1,1,1,0]]\nOutput: 24\nExplanation:\nThere are 8 rectangles of side 1x1.\nThere are 5 rectangles of side 1x2.\nThere are 2 rectangles of side 1x3.\nThere are 4 rectangles of side 2x1.\nThere are 2 rectangles of side 2x2.\nThere are 2 rectangles of side 3x1.\nThere is 1 rectangle of side 3x2.\nTotal number of rectangles = 8 + 5 + 2 + 4 + 2 + 2 + 1 = 24.", "input": "Input: mat = [[0,1,1,0],[0,1,1,1],[1,1,1,0]]", "output": "Output: 24", "explanation": "Explanation:\nThere are 8 rectangles of side 1x1.\nThere are 5 rectangles of side 1x2.\nThere are 2 rectangles of side 1x3.\nThere are 4 rectangles of side 2x1.\nThere are 2 rectangles of side 2x2.\nThere are 2 rectangles of side 3x1.\nThere is 1 rectangle of side 3x2.\nTotal number of rectangles = 8 + 5 + 2 + 4 + 2 + 2 + 1 = 24."}], "constraints": "Constraints:\n1 <= m, n <= 150\nmat[i][j] is either 0 or 1.", "notes": ""}, "1503": {"label": "Medium", "title": "Last Moment Before All Ants Fall Out of a Plank", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5467, "total_accepted": 14700.0, "total_submissions": 27000.0, "testcase_example": "'4\\n[4,3]\\n[0,1]'", "body": "We have a wooden plank of the length n units. Some ants are walking on the plank, each ant moves with a speed of 1 unit per second. Some of the ants move to the left, the other move to the right.\nWhen two ants moving in two different directions meet at some point, they change their directions and continue moving again. Assume changing directions does not take any additional time.\nWhen an ant reaches one end of the plank at a time t, it falls out of the plank immediately.\nGiven an integer n and two integer arrays left and right, the positions of the ants moving to the left and the right, return the moment when the last ant(s) fall out of the plank.", "examples": [{"full_text": "Example 1:\nInput: n = 4, left = [4,3], right = [0,1]\nOutput: 4\nExplanation: In the image above:\n-The ant at index 0 is named A and going to the right.\n-The ant at index 1 is named B and going to the right.\n-The ant at index 3 is named C and going to the left.\n-The ant at index 4 is named D and going to the left.\nThe last moment when an ant was on the plank is t = 4 seconds. After that, it falls immediately out of the plank. (i.e., We can say that at t = 4.0000000001, there are no ants on the plank).", "input": "Input: n = 4, left = [4,3], right = [0,1]", "output": "Output: 4", "explanation": "Explanation: In the image above:\n-The ant at index 0 is named A and going to the right.\n-The ant at index 1 is named B and going to the right.\n-The ant at index 3 is named C and going to the left.\n-The ant at index 4 is named D and going to the left.\nThe last moment when an ant was on the plank is t = 4 seconds. After that, it falls immediately out of the plank. (i.e., We can say that at t = 4.0000000001, there are no ants on the plank)."}, {"full_text": "Example 2:\nInput: n = 7, left = [], right = [0,1,2,3,4,5,6,7]\nOutput: 7\nExplanation: All ants are going to the right, the ant at index 0 needs 7 seconds to fall.", "input": "Input: n = 7, left = [], right = [0,1,2,3,4,5,6,7]", "output": "Output: 7", "explanation": "Explanation: All ants are going to the right, the ant at index 0 needs 7 seconds to fall."}, {"full_text": "Example 3:\nInput: n = 7, left = [0,1,2,3,4,5,6,7], right = []\nOutput: 7\nExplanation: All ants are going to the left, the ant at index 7 needs 7 seconds to fall.", "input": "Input: n = 7, left = [0,1,2,3,4,5,6,7], right = []", "output": "Output: 7", "explanation": "Explanation: All ants are going to the left, the ant at index 7 needs 7 seconds to fall."}], "constraints": "Constraints:\n1 <= n <= 10^4\n0 <= left.length <= n + 1\n0 <= left[i] <= n\n0 <= right.length <= n + 1\n0 <= right[i] <= n\n1 <= left.length + right.length <= n + 1\nAll values of left and right are unique, and each value can appear only in one of the two arrays.", "notes": ""}, "1498": {"label": "Medium", "title": "Number of Subsequences That Satisfy the Given Sum Condition", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3926, "total_accepted": 25400.0, "total_submissions": 64800.0, "testcase_example": "'[3,5,6,7]\\n9'", "body": "You are given an array of integers nums and an integer target.\nReturn the number of non-empty subsequences of nums such that the sum of the minimum and maximum element on it is less or equal to target. Since the answer may be too large, return it modulo 10^9 + 7.", "examples": [{"full_text": "Example 1:\nInput: nums = [3,5,6,7], target = 9\nOutput: 4\nExplanation: There are 4 subsequences that satisfy the condition.\n[3] -> Min value + max value <= target (3 + 3 <= 9)\n[3,5] -> (3 + 5 <= 9)\n[3,5,6] -> (3 + 6 <= 9)\n[3,6] -> (3 + 6 <= 9)", "input": "Input: nums = [3,5,6,7], target = 9", "output": "Output: 4", "explanation": "Explanation: There are 4 subsequences that satisfy the condition.\n[3] -> Min value + max value <= target (3 + 3 <= 9)\n[3,5] -> (3 + 5 <= 9)\n[3,5,6] -> (3 + 6 <= 9)\n[3,6] -> (3 + 6 <= 9)"}, {"full_text": "Example 2:\nInput: nums = [3,3,6,8], target = 10\nOutput: 6\nExplanation: There are 6 subsequences that satisfy the condition. (nums can have repeated numbers).\n[3] , [3] , [3,3], [3,6] , [3,6] , [3,3,6]", "input": "Input: nums = [3,3,6,8], target = 10", "output": "Output: 6", "explanation": "Explanation: There are 6 subsequences that satisfy the condition. (nums can have repeated numbers).\n[3] , [3] , [3,3], [3,6] , [3,6] , [3,3,6]"}, {"full_text": "Example 3:\nInput: nums = [2,3,3,4,6,7], target = 12\nOutput: 61\nExplanation: There are 63 non-empty subsequences, two of them do not satisfy the condition ([6,7], [7]).\nNumber of valid subsequences (63 - 2 = 61).", "input": "Input: nums = [2,3,3,4,6,7], target = 12", "output": "Output: 61", "explanation": "Explanation: There are 63 non-empty subsequences, two of them do not satisfy the condition ([6,7], [7]).\nNumber of valid subsequences (63 - 2 = 61)."}], "constraints": "Constraints:\n1 <= nums.length <= 10^5\n1 <= nums[i] <= 10^6\n1 <= target <= 10^6", "notes": ""}, "1497": {"label": "Medium", "title": "Check If Array Pairs Are Divisible by k", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4045, "total_accepted": 28000.0, "total_submissions": 69300.0, "testcase_example": "'[1,2,3,4,5,10,6,7,8,9]\\n5'", "body": "Given an array of integers arr of even length n and an integer k.\nWe want to divide the array into exactly n / 2 pairs such that the sum of each pair is divisible by k.\nReturn true If you can find a way to do that or false otherwise.", "examples": [{"full_text": "Example 1:\nInput: arr = [1,2,3,4,5,10,6,7,8,9], k = 5\nOutput: true\nExplanation: Pairs are (1,9),(2,8),(3,7),(4,6) and (5,10).", "input": "Input: arr = [1,2,3,4,5,10,6,7,8,9], k = 5", "output": "Output: true", "explanation": "Explanation: Pairs are (1,9),(2,8),(3,7),(4,6) and (5,10)."}, {"full_text": "Example 2:\nInput: arr = [1,2,3,4,5,6], k = 7\nOutput: true\nExplanation: Pairs are (1,6),(2,5) and(3,4).", "input": "Input: arr = [1,2,3,4,5,6], k = 7", "output": "Output: true", "explanation": "Explanation: Pairs are (1,6),(2,5) and(3,4)."}, {"full_text": "Example 3:\nInput: arr = [1,2,3,4,5,6], k = 10\nOutput: false\nExplanation: You can try all possible pairs to see that there is no way to divide arr into 3 pairs each with sum divisible by 10.", "input": "Input: arr = [1,2,3,4,5,6], k = 10", "output": "Output: false", "explanation": "Explanation: You can try all possible pairs to see that there is no way to divide arr into 3 pairs each with sum divisible by 10."}], "constraints": "Constraints:\narr.length == n\n1 <= n <= 10^5\nn is even.\n-10^9 <= arr[i] <= 10^9\n1 <= k <= 10^5", "notes": ""}, "1493": {"label": "Medium", "title": "Longest Subarray of 1's After Deleting One Element", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6015999999999999, "total_accepted": 36100.0, "total_submissions": 60000.0, "testcase_example": "'[1,1,0,1]'", "body": "Given a binary array nums, you should delete one element from it.\nReturn the size of the longest non-empty subarray containing only 1's in the resulting array. Return 0 if there is no such subarray.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,1,0,1]\nOutput: 3\nExplanation: After deleting the number in position 2, [1,1,1] contains 3 numbers with value of 1's.", "input": "Input: nums = [1,1,0,1]", "output": "Output: 3", "explanation": "Explanation: After deleting the number in position 2, [1,1,1] contains 3 numbers with value of 1's."}, {"full_text": "Example 2:\nInput: nums = [0,1,1,1,0,1,1,0,1]\nOutput: 5\nExplanation: After deleting the number in position 4, [0,1,1,1,1,1,0,1] longest subarray with value of 1's is [1,1,1,1,1].", "input": "Input: nums = [0,1,1,1,0,1,1,0,1]", "output": "Output: 5", "explanation": "Explanation: After deleting the number in position 4, [0,1,1,1,1,1,0,1] longest subarray with value of 1's is [1,1,1,1,1]."}, {"full_text": "Example 3:\nInput: nums = [1,1,1]\nOutput: 2\nExplanation: You must delete one element.", "input": "Input: nums = [1,1,1]", "output": "Output: 2", "explanation": "Explanation: You must delete one element."}], "constraints": "Constraints:\n1 <= nums.length <= 10^5\nnums[i] is either 0 or 1.", "notes": ""}, "1492": {"label": "Medium", "title": "The kth Factor of n", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6212, "total_accepted": 78100.0, "total_submissions": 125700.0, "testcase_example": "'12\\n3'", "body": "You are given two positive integers n and k. A factor of an integer n is defined as an integer i where n % i == 0.\nConsider a list of all factors of n sorted in ascending order, return the k^th factor in this list or return -1 if n has less than k factors.", "examples": [{"full_text": "Example 1:\nInput: n = 12, k = 3\nOutput: 3\nExplanation: Factors list is [1, 2, 3, 4, 6, 12], the 3^rd factor is 3.", "input": "Input: n = 12, k = 3", "output": "Output: 3", "explanation": "Explanation: Factors list is [1, 2, 3, 4, 6, 12], the 3^rd factor is 3."}, {"full_text": "Example 2:\nInput: n = 7, k = 2\nOutput: 7\nExplanation: Factors list is [1, 7], the 2^nd factor is 7.", "input": "Input: n = 7, k = 2", "output": "Output: 7", "explanation": "Explanation: Factors list is [1, 7], the 2^nd factor is 7."}, {"full_text": "Example 3:\nInput: n = 4, k = 4\nOutput: -1\nExplanation: Factors list is [1, 2, 4], there is only 3 factors. We should return -1.", "input": "Input: n = 4, k = 4", "output": "Output: -1", "explanation": "Explanation: Factors list is [1, 2, 4], there is only 3 factors. We should return -1."}], "constraints": "Constraints:\n1 <= k <= n <= 1000", "notes": ""}, "1488": {"label": "Medium", "title": "Avoid Flood in The City", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.25329999999999997, "total_accepted": 22000.0, "total_submissions": 86700.0, "testcase_example": "'[1,2,3,4]'", "body": "Your country has an infinite number of lakes. Initially, all the lakes are empty, but when it rains over the nth lake, the nth lake becomes full of water. If it rains over a lake which is full of water, there will be a flood. Your goal is to avoid the flood in any lake.\nGiven an integer array rains where:\nrains[i] > 0 means there will be rains over the rains[i] lake.\nrains[i] == 0 means there are no rains this day and you can choose one lake this day and dry it.\nReturn an array ans where:\nans.length == rains.length\nans[i] == -1 if rains[i] > 0.\nans[i] is the lake you choose to dry in the ith day if rains[i] == 0.\nIf there are multiple valid answers return any of them. If it is impossible to avoid flood return an empty array.\nNotice that if you chose to dry a full lake, it becomes empty, but if you chose to dry an empty lake, nothing changes. (see example 4)", "examples": [{"full_text": "Example 1:\nInput: rains = [1,2,3,4]\nOutput: [-1,-1,-1,-1]\nExplanation: After the first day full lakes are [1]\nAfter the second day full lakes are [1,2]\nAfter the third day full lakes are [1,2,3]\nAfter the fourth day full lakes are [1,2,3,4]\nThere's no day to dry any lake and there is no flood in any lake.", "input": "Input: rains = [1,2,3,4]", "output": "Output: [-1,-1,-1,-1]", "explanation": "Explanation: After the first day full lakes are [1]\nAfter the second day full lakes are [1,2]\nAfter the third day full lakes are [1,2,3]\nAfter the fourth day full lakes are [1,2,3,4]\nThere's no day to dry any lake and there is no flood in any lake."}, {"full_text": "Example 2:\nInput: rains = [1,2,0,0,2,1]\nOutput: [-1,-1,2,1,-1,-1]\nExplanation: After the first day full lakes are [1]\nAfter the second day full lakes are [1,2]\nAfter the third day, we dry lake 2. Full lakes are [1]\nAfter the fourth day, we dry lake 1. There is no full lakes.\nAfter the fifth day, full lakes are [2].\nAfter the sixth day, full lakes are [1,2].\nIt is easy that this scenario is flood-free. [-1,-1,1,2,-1,-1] is another acceptable scenario.", "input": "Input: rains = [1,2,0,0,2,1]", "output": "Output: [-1,-1,2,1,-1,-1]", "explanation": "Explanation: After the first day full lakes are [1]\nAfter the second day full lakes are [1,2]\nAfter the third day, we dry lake 2. Full lakes are [1]\nAfter the fourth day, we dry lake 1. There is no full lakes.\nAfter the fifth day, full lakes are [2].\nAfter the sixth day, full lakes are [1,2].\nIt is easy that this scenario is flood-free. [-1,-1,1,2,-1,-1] is another acceptable scenario."}, {"full_text": "Example 3:\nInput: rains = [1,2,0,1,2]\nOutput: []\nExplanation: After the second day, full lakes are [1,2]. We have to dry one lake in the third day.\nAfter that, it will rain over lakes [1,2]. It's easy to prove that no matter which lake you choose to dry in the 3rd day, the other one will flood.", "input": "Input: rains = [1,2,0,1,2]", "output": "Output: []", "explanation": "Explanation: After the second day, full lakes are [1,2]. We have to dry one lake in the third day.\nAfter that, it will rain over lakes [1,2]. It's easy to prove that no matter which lake you choose to dry in the 3rd day, the other one will flood."}], "constraints": "Constraints:\n1 <= rains.length <= 10^5\n0 <= rains[i] <= 10^9", "notes": ""}, "1487": {"label": "Medium", "title": "Making File Names Unique", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.34380000000000005, "total_accepted": 21400.0, "total_submissions": 62300.0, "testcase_example": "'[\"pes\",\"fifa\",\"gta\",\"pes(2019)\"]'", "body": "Given an array of strings names of size n. You will create n folders in your file system such that, at the i^th minute, you will create a folder with the name names[i].\nSince two files cannot have the same name, if you enter a folder name that was previously used, the system will have a suffix addition to its name in the form of (k), where, k is the smallest positive integer such that the obtained name remains unique.\nReturn an array of strings of length n where ans[i] is the actual name the system will assign to the i^th folder when you create it.", "examples": [{"full_text": "Example 1:\nInput: names = [\"pes\",\"fifa\",\"gta\",\"pes(2019)\"]\nOutput: [\"pes\",\"fifa\",\"gta\",\"pes(2019)\"]\nExplanation: Let's see how the file system creates folder names:\n\"pes\" --> not assigned before, remains \"pes\"\n\"fifa\" --> not assigned before, remains \"fifa\"\n\"gta\" --> not assigned before, remains \"gta\"\n\"pes(2019)\" --> not assigned before, remains \"pes(2019)\"", "input": "Input: names = [\"pes\",\"fifa\",\"gta\",\"pes(2019)\"]", "output": "Output: [\"pes\",\"fifa\",\"gta\",\"pes(2019)\"]", "explanation": "Explanation: Let's see how the file system creates folder names:\n\"pes\" --> not assigned before, remains \"pes\"\n\"fifa\" --> not assigned before, remains \"fifa\"\n\"gta\" --> not assigned before, remains \"gta\"\n\"pes(2019)\" --> not assigned before, remains \"pes(2019)\""}, {"full_text": "Example 2:\nInput: names = [\"gta\",\"gta(1)\",\"gta\",\"avalon\"]\nOutput: [\"gta\",\"gta(1)\",\"gta(2)\",\"avalon\"]\nExplanation: Let's see how the file system creates folder names:\n\"gta\" --> not assigned before, remains \"gta\"\n\"gta(1)\" --> not assigned before, remains \"gta(1)\"\n\"gta\" --> the name is reserved, system adds (k), since \"gta(1)\" is also reserved, systems put k = 2. it becomes \"gta(2)\"\n\"avalon\" --> not assigned before, remains \"avalon\"", "input": "Input: names = [\"gta\",\"gta(1)\",\"gta\",\"avalon\"]", "output": "Output: [\"gta\",\"gta(1)\",\"gta(2)\",\"avalon\"]", "explanation": "Explanation: Let's see how the file system creates folder names:\n\"gta\" --> not assigned before, remains \"gta\"\n\"gta(1)\" --> not assigned before, remains \"gta(1)\"\n\"gta\" --> the name is reserved, system adds (k), since \"gta(1)\" is also reserved, systems put k = 2. it becomes \"gta(2)\"\n\"avalon\" --> not assigned before, remains \"avalon\""}, {"full_text": "Example 3:\nInput: names = [\"onepiece\",\"onepiece(1)\",\"onepiece(2)\",\"onepiece(3)\",\"onepiece\"]\nOutput: [\"onepiece\",\"onepiece(1)\",\"onepiece(2)\",\"onepiece(3)\",\"onepiece(4)\"]\nExplanation: When the last folder is created, the smallest positive valid k is 4, and it becomes \"onepiece(4)\".", "input": "Input: names = [\"onepiece\",\"onepiece(1)\",\"onepiece(2)\",\"onepiece(3)\",\"onepiece\"]", "output": "Output: [\"onepiece\",\"onepiece(1)\",\"onepiece(2)\",\"onepiece(3)\",\"onepiece(4)\"]", "explanation": "Explanation: When the last folder is created, the smallest positive valid k is 4, and it becomes \"onepiece(4)\"."}], "constraints": "Constraints:\n1 <= names.length <= 5 * 10^4\n1 <= names[i].length <= 20\nnames[i] consists of lowercase English letters, digits, and/or round brackets.", "notes": ""}, "1482": {"label": "Medium", "title": "Minimum Number of Days to Make m Bouquets", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5502, "total_accepted": 33500.0, "total_submissions": 60900.0, "testcase_example": "'[1,10,3,10,2]\\n3\\n1'", "body": "You are given an integer array bloomDay, an integer m and an integer k.\nYou want to make m bouquets. To make a bouquet, you need to use k adjacent flowers from the garden.\nThe garden consists of n flowers, the i^th flower will bloom in the bloomDay[i] and then can be used in exactly one bouquet.\nReturn the minimum number of days you need to wait to be able to make m bouquets from the garden. If it is impossible to make m bouquets return -1.", "examples": [{"full_text": "Example 1:\nInput: bloomDay = [1,10,3,10,2], m = 3, k = 1\nOutput: 3\nExplanation: Let us see what happened in the first three days. x means flower bloomed and _ means flower did not bloom in the garden.\nWe need 3 bouquets each should contain 1 flower.\nAfter day 1: [x, _, _, _, _] // we can only make one bouquet.\nAfter day 2: [x, _, _, _, x] // we can only make two bouquets.\nAfter day 3: [x, _, x, _, x] // we can make 3 bouquets. The answer is 3.", "input": "Input: bloomDay = [1,10,3,10,2], m = 3, k = 1", "output": "Output: 3", "explanation": "Explanation: Let us see what happened in the first three days. x means flower bloomed and _ means flower did not bloom in the garden.\nWe need 3 bouquets each should contain 1 flower.\nAfter day 1: [x, _, _, _, _] // we can only make one bouquet.\nAfter day 2: [x, _, _, _, x] // we can only make two bouquets.\nAfter day 3: [x, _, x, _, x] // we can make 3 bouquets. The answer is 3."}, {"full_text": "Example 2:\nInput: bloomDay = [1,10,3,10,2], m = 3, k = 2\nOutput: -1\nExplanation: We need 3 bouquets each has 2 flowers, that means we need 6 flowers. We only have 5 flowers so it is impossible to get the needed bouquets and we return -1.", "input": "Input: bloomDay = [1,10,3,10,2], m = 3, k = 2", "output": "Output: -1", "explanation": "Explanation: We need 3 bouquets each has 2 flowers, that means we need 6 flowers. We only have 5 flowers so it is impossible to get the needed bouquets and we return -1."}, {"full_text": "Example 3:\nInput: bloomDay = [7,7,7,7,12,7,7], m = 2, k = 3\nOutput: 12\nExplanation: We need 2 bouquets each should have 3 flowers.\nHere is the garden after the 7 and 12 days:\nAfter day 7: [x, x, x, x, _, x, x]\nWe can make one bouquet of the first three flowers that bloomed. We cannot make another bouquet from the last three flowers that bloomed because they are not adjacent.\nAfter day 12: [x, x, x, x, x, x, x]\nIt is obvious that we can make two bouquets in different ways.", "input": "Input: bloomDay = [7,7,7,7,12,7,7], m = 2, k = 3", "output": "Output: 12", "explanation": "Explanation: We need 2 bouquets each should have 3 flowers.\nHere is the garden after the 7 and 12 days:\nAfter day 7: [x, x, x, x, _, x, x]\nWe can make one bouquet of the first three flowers that bloomed. We cannot make another bouquet from the last three flowers that bloomed because they are not adjacent.\nAfter day 12: [x, x, x, x, x, x, x]\nIt is obvious that we can make two bouquets in different ways."}], "constraints": "Constraints:\nbloomDay.length == n\n1 <= n <= 10^5\n1 <= bloomDay[i] <= 10^9\n1 <= m <= 10^6\n1 <= k <= n", "notes": ""}, "1481": {"label": "Medium", "title": "Least Number of Unique Integers after K Removals", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5982, "total_accepted": 64500.0, "total_submissions": 107700.0, "testcase_example": "'[5,5,4]\\n1'", "body": "Given an array of integers\narr\nand an integer k.\nFind the least number of unique integers\nafter removing exactly k elements.", "examples": [{"full_text": "Example 1:\nInput: arr = [5,5,4], k = 1\nOutput: 1\nExplanation: Remove the single 4, only 5 is left.", "input": "Input: arr = [5,5,4], k = 1", "output": "Output: 1", "explanation": "Explanation: Remove the single 4, only 5 is left."}, {"full_text": "Example 2:\nInput: arr = [4,3,1,1,3,3,2], k = 3\nOutput: 2\nExplanation: Remove 4, 2 and either one of the two 1s or three 3s. 1 and 3 will be left.", "input": "Input: arr = [4,3,1,1,3,3,2], k = 3", "output": "Output: 2", "explanation": "Explanation: Remove 4, 2 and either one of the two 1s or three 3s. 1 and 3 will be left."}], "constraints": "Constraints:\n1 <= arr.length\n<= 10^5\n1 <= arr[i] <= 10^9\n0 <= k\n<= arr.length", "notes": ""}, "1477": {"label": "Medium", "title": "Find Two Non-overlapping Sub-arrays Each With Target Sum", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3649, "total_accepted": 34200.0, "total_submissions": 93700.0, "testcase_example": "'[3,2,2,4,3]\\n3'", "body": "You are given an array of integers arr and an integer target.\nYou have to find two non-overlapping sub-arrays of arr each with a sum equal target. There can be multiple answers so you have to find an answer where the sum of the lengths of the two sub-arrays is minimum.\nReturn the minimum sum of the lengths of the two required sub-arrays, or return -1 if you cannot find such two sub-arrays.", "examples": [{"full_text": "Example 1:\nInput: arr = [3,2,2,4,3], target = 3\nOutput: 2\nExplanation: Only two sub-arrays have sum = 3 ([3] and [3]). The sum of their lengths is 2.", "input": "Input: arr = [3,2,2,4,3], target = 3", "output": "Output: 2", "explanation": "Explanation: Only two sub-arrays have sum = 3 ([3] and [3]). The sum of their lengths is 2."}, {"full_text": "Example 2:\nInput: arr = [7,3,4,7], target = 7\nOutput: 2\nExplanation: Although we have three non-overlapping sub-arrays of sum = 7 ([7], [3,4] and [7]), but we will choose the first and third sub-arrays as the sum of their lengths is 2.", "input": "Input: arr = [7,3,4,7], target = 7", "output": "Output: 2", "explanation": "Explanation: Although we have three non-overlapping sub-arrays of sum = 7 ([7], [3,4] and [7]), but we will choose the first and third sub-arrays as the sum of their lengths is 2."}, {"full_text": "Example 3:\nInput: arr = [4,3,2,6,2,3,4], target = 6\nOutput: -1\nExplanation: We have only one sub-array of sum = 6.", "input": "Input: arr = [4,3,2,6,2,3,4], target = 6", "output": "Output: -1", "explanation": "Explanation: We have only one sub-array of sum = 6."}], "constraints": "Constraints:\n1 <= arr.length <= 10^5\n1 <= arr[i] <= 1000\n1 <= target <= 10^8", "notes": ""}, "1476": {"label": "Medium", "title": "Subrectangle Queries", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.8825, "total_accepted": 65700.0, "total_submissions": 74500.0, "testcase_example": "'[\"SubrectangleQueries\",\"getValue\",\"updateSubrectangle\",\"getValue\",\"getValue\",\"updateSubrectangle\",\"getValue\",\"getValue\"]\\r\\n' +\n  '[[[[1,2,1],[4,3,4],[3,2,1],[1,1,1]]],[0,2],[0,0,3,2,5],[0,2],[3,1],[3,0,3,2,10],[3,1],[0,2]]\\r'", "body": "Implement the class SubrectangleQueries\nwhich receives a rows x cols rectangle as a matrix of integers in the constructor and supports two methods:\n1.\nupdateSubrectangle(int row1, int col1, int row2, int col2, int newValue)\nUpdates all values with newValue in the subrectangle whose upper left coordinate is (row1,col1) and bottom right coordinate is (row2,col2).\n2.\ngetValue(int row, int col)\nReturns the current value of the coordinate (row,col) from\nthe rectangle.", "examples": [{"full_text": "Example 1:\nInput\n[\"SubrectangleQueries\",\"getValue\",\"updateSubrectangle\",\"getValue\",\"getValue\",\"updateSubrectangle\",\"getValue\",\"getValue\"]\n[[[[1,2,1],[4,3,4],[3,2,1],[1,1,1]]],[0,2],[0,0,3,2,5],[0,2],[3,1],[3,0,3,2,10],[3,1],[0,2]]\nOutput\n[null,1,null,5,5,null,10,5]\nExplanation\nSubrectangleQueries subrectangleQueries = new SubrectangleQueries([[1,2,1],[4,3,4],[3,2,1],[1,1,1]]);\n// The initial rectangle (4x3) looks like:\n// 1 2 1\n// 4 3 4\n// 3 2 1\n// 1 1 1\nsubrectangleQueries.getValue(0, 2); // return 1\nsubrectangleQueries.updateSubrectangle(0, 0, 3, 2, 5);\n// After this update the rectangle looks like:\n// 5 5 5\n// 5 5 5\n// 5 5 5\n// 5 5 5\nsubrectangleQueries.getValue(0, 2); // return 5\nsubrectangleQueries.getValue(3, 1); // return 5\nsubrectangleQueries.updateSubrectangle(3, 0, 3, 2, 10);\n// After this update the rectangle looks like:\n// 5 5 5\n// 5 5 5\n// 5 5 5\n// 10 10 10\nsubrectangleQueries.getValue(3, 1); // return 10\nsubrectangleQueries.getValue(0, 2); // return 5", "input": "Input\n[\"SubrectangleQueries\",\"getValue\",\"updateSubrectangle\",\"getValue\",\"getValue\",\"updateSubrectangle\",\"getValue\",\"getValue\"]\n[[[[1,2,1],[4,3,4],[3,2,1],[1,1,1]]],[0,2],[0,0,3,2,5],[0,2],[3,1],[3,0,3,2,10],[3,1],[0,2]]", "output": "Output\n[null,1,null,5,5,null,10,5]", "explanation": "Explanation\nSubrectangleQueries subrectangleQueries = new SubrectangleQueries([[1,2,1],[4,3,4],[3,2,1],[1,1,1]]);\n// The initial rectangle (4x3) looks like:\n// 1 2 1\n// 4 3 4\n// 3 2 1\n// 1 1 1\nsubrectangleQueries.getValue(0, 2); // return 1\nsubrectangleQueries.updateSubrectangle(0, 0, 3, 2, 5);\n// After this update the rectangle looks like:\n// 5 5 5\n// 5 5 5\n// 5 5 5\n// 5 5 5\nsubrectangleQueries.getValue(0, 2); // return 5\nsubrectangleQueries.getValue(3, 1); // return 5\nsubrectangleQueries.updateSubrectangle(3, 0, 3, 2, 10);\n// After this update the rectangle looks like:\n// 5 5 5\n// 5 5 5\n// 5 5 5\n// 10 10 10\nsubrectangleQueries.getValue(3, 1); // return 10\nsubrectangleQueries.getValue(0, 2); // return 5"}, {"full_text": "Example 2:\nInput\n[\"SubrectangleQueries\",\"getValue\",\"updateSubrectangle\",\"getValue\",\"getValue\",\"updateSubrectangle\",\"getValue\"]\n[[[[1,1,1],[2,2,2],[3,3,3]]],[0,0],[0,0,2,2,100],[0,0],[2,2],[1,1,2,2,20],[2,2]]\nOutput\n[null,1,null,100,100,null,20]\nExplanation\nSubrectangleQueries subrectangleQueries = new SubrectangleQueries([[1,1,1],[2,2,2],[3,3,3]]);\nsubrectangleQueries.getValue(0, 0); // return 1\nsubrectangleQueries.updateSubrectangle(0, 0, 2, 2, 100);\nsubrectangleQueries.getValue(0, 0); // return 100\nsubrectangleQueries.getValue(2, 2); // return 100\nsubrectangleQueries.updateSubrectangle(1, 1, 2, 2, 20);\nsubrectangleQueries.getValue(2, 2); // return 20", "input": "Input\n[\"SubrectangleQueries\",\"getValue\",\"updateSubrectangle\",\"getValue\",\"getValue\",\"updateSubrectangle\",\"getValue\"]\n[[[[1,1,1],[2,2,2],[3,3,3]]],[0,0],[0,0,2,2,100],[0,0],[2,2],[1,1,2,2,20],[2,2]]", "output": "Output\n[null,1,null,100,100,null,20]", "explanation": "Explanation\nSubrectangleQueries subrectangleQueries = new SubrectangleQueries([[1,1,1],[2,2,2],[3,3,3]]);\nsubrectangleQueries.getValue(0, 0); // return 1\nsubrectangleQueries.updateSubrectangle(0, 0, 2, 2, 100);\nsubrectangleQueries.getValue(0, 0); // return 100\nsubrectangleQueries.getValue(2, 2); // return 100\nsubrectangleQueries.updateSubrectangle(1, 1, 2, 2, 20);\nsubrectangleQueries.getValue(2, 2); // return 20"}], "constraints": "Constraints:\nThere will be at most 500\noperations considering both methods:\nupdateSubrectangle and getValue.\n1 <= rows, cols <= 100\nrows ==\nrectangle.length\ncols == rectangle[i].length\n0 <= row1 <= row2 < rows\n0 <= col1 <= col2 < cols\n1 <= newValue, rectangle[i][j] <= 10^9\n0 <= row < rows\n0 <= col < cols", "notes": ""}, "1472": {"label": "Medium", "title": "Design Browser History", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7444, "total_accepted": 66000.0, "total_submissions": 88600.0, "testcase_example": "'[\"BrowserHistory\",\"visit\",\"visit\",\"visit\",\"back\",\"back\",\"forward\",\"visit\",\"forward\",\"back\",\"back\"]\\r\\n' +\n  '[[\"leetcode.com\"],[\"google.com\"],[\"facebook.com\"],[\"youtube.com\"],[1],[1],[1],[\"linkedin.com\"],[2],[2],[7]]\\r'", "body": "You have a browser of one tab where you start on the homepage and you can visit another url, get back in the history number of steps or move forward in the history number of steps.\nImplement the BrowserHistory class:\nBrowserHistory(string homepage) Initializes the object with the homepage\nof the browser.\nvoid visit(string url)\nVisits\nurl from the current page. It clears up all the forward history.\nstring back(int steps)\nMove steps back in history. If you can only return x steps in the history and steps > x, you will\nreturn only x steps. Return the current url\nafter moving back in history at most steps.\nstring forward(int steps)\nMove steps forward in history. If you can only forward x steps in the history and steps > x, you will\nforward only\nx steps. Return the current url\nafter forwarding in history at most steps.", "examples": [{"full_text": "Example:\nInput:\n[\"BrowserHistory\",\"visit\",\"visit\",\"visit\",\"back\",\"back\",\"forward\",\"visit\",\"forward\",\"back\",\"back\"]\n[[\"leetcode.com\"],[\"google.com\"],[\"facebook.com\"],[\"youtube.com\"],[1],[1],[1],[\"linkedin.com\"],[2],[2],[7]]\nOutput:\n[null,null,null,null,\"facebook.com\",\"google.com\",\"facebook.com\",null,\"linkedin.com\",\"google.com\",\"leetcode.com\"]\nExplanation:\nBrowserHistory browserHistory = new BrowserHistory(\"leetcode.com\");\nbrowserHistory.visit(\"google.com\"); // You are in \"leetcode.com\". Visit \"google.com\"\nbrowserHistory.visit(\"facebook.com\"); // You are in \"google.com\". Visit \"facebook.com\"\nbrowserHistory.visit(\"youtube.com\"); // You are in \"facebook.com\". Visit \"youtube.com\"\nbrowserHistory.back(1); // You are in \"youtube.com\", move back to \"facebook.com\" return \"facebook.com\"\nbrowserHistory.back(1); // You are in \"facebook.com\", move back to \"google.com\" return \"google.com\"\nbrowserHistory.forward(1); // You are in \"google.com\", move forward to \"facebook.com\" return \"facebook.com\"\nbrowserHistory.visit(\"linkedin.com\"); // You are in \"facebook.com\". Visit \"linkedin.com\"\nbrowserHistory.forward(2); // You are in \"linkedin.com\", you cannot move forward any steps.\nbrowserHistory.back(2); // You are in \"linkedin.com\", move back two steps to \"facebook.com\" then to \"google.com\". return \"google.com\"\nbrowserHistory.back(7); // You are in \"google.com\", you can move back only one step to \"leetcode.com\". return \"leetcode.com\"", "input": "Input:\n[\"BrowserHistory\",\"visit\",\"visit\",\"visit\",\"back\",\"back\",\"forward\",\"visit\",\"forward\",\"back\",\"back\"]\n[[\"leetcode.com\"],[\"google.com\"],[\"facebook.com\"],[\"youtube.com\"],[1],[1],[1],[\"linkedin.com\"],[2],[2],[7]]", "output": "Output:\n[null,null,null,null,\"facebook.com\",\"google.com\",\"facebook.com\",null,\"linkedin.com\",\"google.com\",\"leetcode.com\"]", "explanation": "Explanation:\nBrowserHistory browserHistory = new BrowserHistory(\"leetcode.com\");\nbrowserHistory.visit(\"google.com\"); // You are in \"leetcode.com\". Visit \"google.com\"\nbrowserHistory.visit(\"facebook.com\"); // You are in \"google.com\". Visit \"facebook.com\"\nbrowserHistory.visit(\"youtube.com\"); // You are in \"facebook.com\". Visit \"youtube.com\"\nbrowserHistory.back(1); // You are in \"youtube.com\", move back to \"facebook.com\" return \"facebook.com\"\nbrowserHistory.back(1); // You are in \"facebook.com\", move back to \"google.com\" return \"google.com\"\nbrowserHistory.forward(1); // You are in \"google.com\", move forward to \"facebook.com\" return \"facebook.com\"\nbrowserHistory.visit(\"linkedin.com\"); // You are in \"facebook.com\". Visit \"linkedin.com\"\nbrowserHistory.forward(2); // You are in \"linkedin.com\", you cannot move forward any steps.\nbrowserHistory.back(2); // You are in \"linkedin.com\", move back two steps to \"facebook.com\" then to \"google.com\". return \"google.com\"\nbrowserHistory.back(7); // You are in \"google.com\", you can move back only one step to \"leetcode.com\". return \"leetcode.com\""}], "constraints": "Constraints:\n1 <= homepage.length <= 20\n1 <= url.length <= 20\n1 <= steps <= 100\nhomepage and url consist of\n'.' or lower case English letters.\nAt most 5000\ncalls will be made to visit, back, and forward.", "notes": ""}, "1471": {"label": "Medium", "title": "The k Strongest Values in an Array", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5958, "total_accepted": 26300.0, "total_submissions": 44200.0, "testcase_example": "'[1,2,3,4,5]\\n2'", "body": "Given an array of integers arr and an integer k.\nA value arr[i] is said to be stronger than a value arr[j] if |arr[i] - m| > |arr[j] - m| where m is the median of the array.\nIf |arr[i] - m| == |arr[j] - m|, then arr[i] is said to be stronger than arr[j] if arr[i] > arr[j].\nReturn a list of the strongest k values in the array. return the answer in any arbitrary order.\nMedian is the middle value in an ordered integer list. More formally, if the length of the list is n, the median is the element in position ((n - 1) / 2) in the sorted list (0-indexed).\nFor arr = [6, -3, 7, 2, 11], n = 5 and the median is obtained by sorting the array arr = [-3, 2, 6, 7, 11] and the median is arr[m] where m = ((5 - 1) / 2) = 2. The median is 6.\nFor arr = [-7, 22, 17, 3], n = 4 and the median is obtained by sorting the array arr = [-7, 3, 17, 22] and the median is arr[m] where m = ((4 - 1) / 2) = 1. The median is 3.", "examples": [{"full_text": "Example 1:\nInput: arr = [1,2,3,4,5], k = 2\nOutput: [5,1]\nExplanation: Median is 3, the elements of the array sorted by the strongest are [5,1,4,2,3]. The strongest 2 elements are [5, 1]. [1, 5] is also accepted answer.\nPlease note that although |5 - 3| == |1 - 3| but 5 is stronger than 1 because 5 > 1.", "input": "Input: arr = [1,2,3,4,5], k = 2", "output": "Output: [5,1]", "explanation": "Explanation: Median is 3, the elements of the array sorted by the strongest are [5,1,4,2,3]. The strongest 2 elements are [5, 1]. [1, 5] is also accepted answer.\nPlease note that although |5 - 3| == |1 - 3| but 5 is stronger than 1 because 5 > 1."}, {"full_text": "Example 2:\nInput: arr = [1,1,3,5,5], k = 2\nOutput: [5,5]\nExplanation: Median is 3, the elements of the array sorted by the strongest are [5,5,1,1,3]. The strongest 2 elements are [5, 5].", "input": "Input: arr = [1,1,3,5,5], k = 2", "output": "Output: [5,5]", "explanation": "Explanation: Median is 3, the elements of the array sorted by the strongest are [5,5,1,1,3]. The strongest 2 elements are [5, 5]."}, {"full_text": "Example 3:\nInput: arr = [6,7,11,7,6,8], k = 5\nOutput: [11,8,6,6,7]\nExplanation: Median is 7, the elements of the array sorted by the strongest are [11,8,6,6,7,7].\nAny permutation of [11,8,6,6,7] is accepted.", "input": "Input: arr = [6,7,11,7,6,8], k = 5", "output": "Output: [11,8,6,6,7]", "explanation": "Explanation: Median is 7, the elements of the array sorted by the strongest are [11,8,6,6,7,7].\nAny permutation of [11,8,6,6,7] is accepted."}], "constraints": "Constraints:\n1 <= arr.length <= 10^5\n-10^5 <= arr[i] <= 10^5\n1 <= k <= arr.length", "notes": ""}, "1466": {"label": "Medium", "title": "Reorder Routes to Make All Paths Lead to the City Zero", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6078, "total_accepted": 46400.0, "total_submissions": 76400.0, "testcase_example": "'6\\n[[0,1],[1,3],[2,3],[4,0],[4,5]]'", "body": "There are n cities numbered from 0 to n - 1 and n - 1 roads such that there is only one way to travel between two different cities (this network form a tree). Last year, The ministry of transport decided to orient the roads in one direction because they are too narrow.\nRoads are represented by connections where connections[i] = [ai, bi] represents a road from city ai to city bi.\nThis year, there will be a big event in the capital (city 0), and many people want to travel to this city.\nYour task consists of reorienting some roads such that each city can visit the city 0. Return the minimum number of edges changed.\nIt's guaranteed that each city can reach city 0 after reorder.", "examples": [{"full_text": "Example 1:\nInput: n = 6, connections = [[0,1],[1,3],[2,3],[4,0],[4,5]]\nOutput: 3\nExplanation: Change the direction of edges show in red such that each node can reach the node 0 (capital).", "input": "Input: n = 6, connections = [[0,1],[1,3],[2,3],[4,0],[4,5]]", "output": "Output: 3", "explanation": "Explanation: Change the direction of edges show in red such that each node can reach the node 0 (capital)."}, {"full_text": "Example 2:\nInput: n = 5, connections = [[1,0],[1,2],[3,2],[3,4]]\nOutput: 2\nExplanation: Change the direction of edges show in red such that each node can reach the node 0 (capital).", "input": "Input: n = 5, connections = [[1,0],[1,2],[3,2],[3,4]]", "output": "Output: 2", "explanation": "Explanation: Change the direction of edges show in red such that each node can reach the node 0 (capital)."}, {"full_text": "Example 3:\nInput: n = 3, connections = [[1,0],[2,0]]\nOutput: 0", "input": "Input: n = 3, connections = [[1,0],[2,0]]", "output": "Output: 0", "explanation": ""}], "constraints": "Constraints:\n2 <= n <= 5 * 10^4\nconnections.length == n - 1\nconnections[i].length == 2\n0 <= ai, bi <= n - 1\nai != bi", "notes": ""}, "1465": {"label": "Medium", "title": "Maximum Area of a Piece of Cake After Horizontal and Vertical Cuts", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.37079999999999996, "total_accepted": 88100.0, "total_submissions": 237500.0, "testcase_example": "'5\\n4\\n[1,2,4]\\n[1,3]'", "body": "You are given a rectangular cake of size h x w and two arrays of integers horizontalCuts and verticalCuts where:\nhorizontalCuts[i] is the distance from the top of the rectangular cake to the i^th horizontal cut and similarly, and\nverticalCuts[j] is the distance from the left of the rectangular cake to the j^th vertical cut.\nReturn the maximum area of a piece of cake after you cut at each horizontal and vertical position provided in the arrays horizontalCuts and verticalCuts. Since the answer can be a large number, return this modulo 10^9 + 7.", "examples": [{"full_text": "Example 1:\nInput: h = 5, w = 4, horizontalCuts = [1,2,4], verticalCuts = [1,3]\nOutput: 4\nExplanation: The figure above represents the given rectangular cake. Red lines are the horizontal and vertical cuts. After you cut the cake, the green piece of cake has the maximum area.", "input": "Input: h = 5, w = 4, horizontalCuts = [1,2,4], verticalCuts = [1,3]", "output": "Output: 4", "explanation": "Explanation: The figure above represents the given rectangular cake. Red lines are the horizontal and vertical cuts. After you cut the cake, the green piece of cake has the maximum area."}, {"full_text": "Example 2:\nInput: h = 5, w = 4, horizontalCuts = [3,1], verticalCuts = [1]\nOutput: 6\nExplanation: The figure above represents the given rectangular cake. Red lines are the horizontal and vertical cuts. After you cut the cake, the green and yellow pieces of cake have the maximum area.", "input": "Input: h = 5, w = 4, horizontalCuts = [3,1], verticalCuts = [1]", "output": "Output: 6", "explanation": "Explanation: The figure above represents the given rectangular cake. Red lines are the horizontal and vertical cuts. After you cut the cake, the green and yellow pieces of cake have the maximum area."}, {"full_text": "Example 3:\nInput: h = 5, w = 4, horizontalCuts = [3], verticalCuts = [3]\nOutput: 9", "input": "Input: h = 5, w = 4, horizontalCuts = [3], verticalCuts = [3]", "output": "Output: 9", "explanation": ""}], "constraints": "Constraints:\n2 <= h, w <= 10^9\n1 <= horizontalCuts.length <= min(h - 1, 10^5)\n1 <= verticalCuts.length <= min(w - 1, 10^5)\n1 <= horizontalCuts[i] < h\n1 <= verticalCuts[i] < w\nAll the elements in horizontalCuts are distinct.\nAll the elements in verticalCuts are distinct.", "notes": ""}, "1462": {"label": "Medium", "title": "Course Schedule IV", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4757, "total_accepted": 28900.0, "total_submissions": 60700.0, "testcase_example": "'2\\n[[1,0]]\\n[[0,1],[1,0]]'", "body": "There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course ai first if you want to take course bi.\nFor example, the pair [0, 1] indicates that you have to take course 0 before you can take course 1.\nPrerequisites can also be indirect. If course a is a prerequisite of course b, and course b is a prerequisite of course c, then course a is a prerequisite of course c.\nYou are also given an array queries where queries[j] = [uj, vj]. For the j^th query, you should answer whether course uj is a prerequisite of course vj or not.\nReturn a boolean array answer, where answer[j] is the answer to the j^th query.", "examples": [{"full_text": "Example 1:\nInput: numCourses = 2, prerequisites = [[1,0]], queries = [[0,1],[1,0]]\nOutput: [false,true]\nExplanation: The pair [1, 0] indicates that you have to take course 1 before you can take course 0.\nCourse 0 is not a prerequisite of course 1, but the opposite is true.", "input": "Input: numCourses = 2, prerequisites = [[1,0]], queries = [[0,1],[1,0]]", "output": "Output: [false,true]", "explanation": "Explanation: The pair [1, 0] indicates that you have to take course 1 before you can take course 0.\nCourse 0 is not a prerequisite of course 1, but the opposite is true."}, {"full_text": "Example 2:\nInput: numCourses = 2, prerequisites = [], queries = [[1,0],[0,1]]\nOutput: [false,false]\nExplanation: There are no prerequisites, and each course is independent.", "input": "Input: numCourses = 2, prerequisites = [], queries = [[1,0],[0,1]]", "output": "Output: [false,false]", "explanation": "Explanation: There are no prerequisites, and each course is independent."}, {"full_text": "Example 3:\nInput: numCourses = 3, prerequisites = [[1,2],[1,0],[2,0]], queries = [[1,0],[1,2]]\nOutput: [true,true]", "input": "Input: numCourses = 3, prerequisites = [[1,2],[1,0],[2,0]], queries = [[1,0],[1,2]]", "output": "Output: [true,true]", "explanation": ""}], "constraints": "Constraints:\n2 <= numCourses <= 100\n0 <= prerequisites.length <= (numCourses * (numCourses - 1) / 2)\nprerequisites[i].length == 2\n0 <= ai, bi <= n - 1\nai != bi\nAll the pairs [ai, bi] are unique.\nThe prerequisites graph has no cycles.\n1 <= queries.length <= 10^4\n0 <= ui, vi <= n - 1\nui != vi", "notes": ""}, "1461": {"label": "Medium", "title": "Check If a String Contains All Binary Codes of Size K", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5447, "total_accepted": 46600.0, "total_submissions": 85500.0, "testcase_example": "'\"00110110\"\\n2'", "body": "Given a binary string s and an integer k, return true if every binary code of length k is a substring of s. Otherwise, return false.", "examples": [{"full_text": "Example 1:\nInput: s = \"00110110\", k = 2\nOutput: true\nExplanation: The binary codes of length 2 are \"00\", \"01\", \"10\" and \"11\". They can be all found as substrings at indices 0, 1, 3 and 2 respectively.", "input": "Input: s = \"00110110\", k = 2", "output": "Output: true", "explanation": "Explanation: The binary codes of length 2 are \"00\", \"01\", \"10\" and \"11\". They can be all found as substrings at indices 0, 1, 3 and 2 respectively."}, {"full_text": "Example 2:\nInput: s = \"0110\", k = 1\nOutput: true\nExplanation: The binary codes of length 1 are \"0\" and \"1\", it is clear that both exist as a substring.", "input": "Input: s = \"0110\", k = 1", "output": "Output: true", "explanation": "Explanation: The binary codes of length 1 are \"0\" and \"1\", it is clear that both exist as a substring."}, {"full_text": "Example 3:\nInput: s = \"0110\", k = 2\nOutput: false\nExplanation: The binary code \"00\" is of length 2 and does not exist in the array.", "input": "Input: s = \"0110\", k = 2", "output": "Output: false", "explanation": "Explanation: The binary code \"00\" is of length 2 and does not exist in the array."}], "constraints": "Constraints:\n1 <= s.length <= 5 * 10^5\ns[i] is either '0' or '1'.\n1 <= k <= 20", "notes": ""}, "1457": {"label": "Medium", "title": "Pseudo-Palindromic Paths in a Binary Tree", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6751999999999999, "total_accepted": 49400.0, "total_submissions": 73200.0, "testcase_example": "'[2,3,1,3,1,null,1]'", "body": "Given a binary tree where node values are digits from 1 to 9. A path in the binary tree is said to be pseudo-palindromic if at least one permutation of the node values in the path is a palindrome.\nReturn the number of pseudo-palindromic paths going from the root node to leaf nodes.", "examples": [{"full_text": "Example 1:\nInput: root = [2,3,1,3,1,null,1]\nOutput: 2\nExplanation: The figure above represents the given binary tree. There are three paths going from the root node to leaf nodes: the red path [2,3,3], the green path [2,1,1], and the path [2,3,1]. Among these paths only red path and green path are pseudo-palindromic paths since the red path [2,3,3] can be rearranged in [3,2,3] (palindrome) and the green path [2,1,1] can be rearranged in [1,2,1] (palindrome).", "input": "Input: root = [2,3,1,3,1,null,1]", "output": "Output: 2", "explanation": "Explanation: The figure above represents the given binary tree. There are three paths going from the root node to leaf nodes: the red path [2,3,3], the green path [2,1,1], and the path [2,3,1]. Among these paths only red path and green path are pseudo-palindromic paths since the red path [2,3,3] can be rearranged in [3,2,3] (palindrome) and the green path [2,1,1] can be rearranged in [1,2,1] (palindrome)."}, {"full_text": "Example 2:\nInput: root = [2,1,1,1,3,null,null,null,null,null,1]\nOutput: 1\nExplanation: The figure above represents the given binary tree. There are three paths going from the root node to leaf nodes: the green path [2,1,1], the path [2,1,3,1], and the path [2,1]. Among these paths only the green path is pseudo-palindromic since [2,1,1] can be rearranged in [1,2,1] (palindrome).", "input": "Input: root = [2,1,1,1,3,null,null,null,null,null,1]", "output": "Output: 1", "explanation": "Explanation: The figure above represents the given binary tree. There are three paths going from the root node to leaf nodes: the green path [2,1,1], the path [2,1,3,1], and the path [2,1]. Among these paths only the green path is pseudo-palindromic since [2,1,1] can be rearranged in [1,2,1] (palindrome)."}, {"full_text": "Example 3:\nInput: root = [9]\nOutput: 1", "input": "Input: root = [9]", "output": "Output: 1", "explanation": ""}], "constraints": "Constraints:\nThe number of nodes in the tree is in the range [1, 10^5].\n1 <= Node.val <= 9", "notes": ""}, "1456": {"label": "Medium", "title": "Maximum Number of Vowels in a Substring of Given Length", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5710999999999999, "total_accepted": 40400.0, "total_submissions": 70700.0, "testcase_example": "'\"abciiidef\"\\n3'", "body": "Given a string s and an integer k, return the maximum number of vowel letters in any substring of s with length k.\nVowel letters in English are 'a', 'e', 'i', 'o', and 'u'.", "examples": [{"full_text": "Example 1:\nInput: s = \"abciiidef\", k = 3\nOutput: 3\nExplanation: The substring \"iii\" contains 3 vowel letters.", "input": "Input: s = \"abciiidef\", k = 3", "output": "Output: 3", "explanation": "Explanation: The substring \"iii\" contains 3 vowel letters."}, {"full_text": "Example 2:\nInput: s = \"aeiou\", k = 2\nOutput: 2\nExplanation: Any substring of length 2 contains 2 vowels.", "input": "Input: s = \"aeiou\", k = 2", "output": "Output: 2", "explanation": "Explanation: Any substring of length 2 contains 2 vowels."}, {"full_text": "Example 3:\nInput: s = \"leetcode\", k = 3\nOutput: 2\nExplanation: \"lee\", \"eet\" and \"ode\" contain 2 vowels.", "input": "Input: s = \"leetcode\", k = 3", "output": "Output: 2", "explanation": "Explanation: \"lee\", \"eet\" and \"ode\" contain 2 vowels."}], "constraints": "Constraints:\n1 <= s.length <= 10^5\ns consists of lowercase English letters.\n1 <= k <= s.length", "notes": ""}, "1452": {"label": "Medium", "title": "People Whose List of Favorite Companies Is Not a Subset of Another List", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5653, "total_accepted": 18100.0, "total_submissions": 32100.0, "testcase_example": "'[[\"leetcode\",\"google\",\"facebook\"],[\"google\",\"microsoft\"],[\"google\",\"facebook\"],[\"google\"],[\"amazon\"]]'", "body": "Given the array favoriteCompanies where favoriteCompanies[i] is the list of favorites companies for the ith person (indexed from 0).\nReturn the indices of people whose list of favorite companies is not a subset of any other list of favorites companies. You must return the indices in increasing order.", "examples": [{"full_text": "Example 1:\nInput: favoriteCompanies = [[\"leetcode\",\"google\",\"facebook\"],[\"google\",\"microsoft\"],[\"google\",\"facebook\"],[\"google\"],[\"amazon\"]]\nOutput: [0,1,4]\nExplanation:\nPerson with index=2 has favoriteCompanies[2]=[\"google\",\"facebook\"] which is a subset of favoriteCompanies[0]=[\"leetcode\",\"google\",\"facebook\"] corresponding to the person with index 0.\nPerson with index=3 has favoriteCompanies[3]=[\"google\"] which is a subset of favoriteCompanies[0]=[\"leetcode\",\"google\",\"facebook\"] and favoriteCompanies[1]=[\"google\",\"microsoft\"].\nOther lists of favorite companies are not a subset of another list, therefore, the answer is [0,1,4].", "input": "Input: favoriteCompanies = [[\"leetcode\",\"google\",\"facebook\"],[\"google\",\"microsoft\"],[\"google\",\"facebook\"],[\"google\"],[\"amazon\"]]", "output": "Output: [0,1,4]", "explanation": "Explanation:\nPerson with index=2 has favoriteCompanies[2]=[\"google\",\"facebook\"] which is a subset of favoriteCompanies[0]=[\"leetcode\",\"google\",\"facebook\"] corresponding to the person with index 0.\nPerson with index=3 has favoriteCompanies[3]=[\"google\"] which is a subset of favoriteCompanies[0]=[\"leetcode\",\"google\",\"facebook\"] and favoriteCompanies[1]=[\"google\",\"microsoft\"].\nOther lists of favorite companies are not a subset of another list, therefore, the answer is [0,1,4]."}, {"full_text": "Example 2:\nInput: favoriteCompanies = [[\"leetcode\",\"google\",\"facebook\"],[\"leetcode\",\"amazon\"],[\"facebook\",\"google\"]]\nOutput: [0,1]\nExplanation: In this case favoriteCompanies[2]=[\"facebook\",\"google\"] is a subset of favoriteCompanies[0]=[\"leetcode\",\"google\",\"facebook\"], therefore, the answer is [0,1].", "input": "Input: favoriteCompanies = [[\"leetcode\",\"google\",\"facebook\"],[\"leetcode\",\"amazon\"],[\"facebook\",\"google\"]]", "output": "Output: [0,1]", "explanation": "Explanation: In this case favoriteCompanies[2]=[\"facebook\",\"google\"] is a subset of favoriteCompanies[0]=[\"leetcode\",\"google\",\"facebook\"], therefore, the answer is [0,1]."}, {"full_text": "Example 3:\nInput: favoriteCompanies = [[\"leetcode\"],[\"google\"],[\"facebook\"],[\"amazon\"]]\nOutput: [0,1,2,3]", "input": "Input: favoriteCompanies = [[\"leetcode\"],[\"google\"],[\"facebook\"],[\"amazon\"]]", "output": "Output: [0,1,2,3]", "explanation": ""}], "constraints": "Constraints:\n1 <= favoriteCompanies.length <= 100\n1 <= favoriteCompanies[i].length <= 500\n1 <= favoriteCompanies[i][j].length <= 20\nAll strings in favoriteCompanies[i] are distinct.\nAll lists of favorite companies are distinct, that is, If we sort alphabetically each list then favoriteCompanies[i] != favoriteCompanies[j].\nAll strings consist of lowercase English letters only.", "notes": ""}, "1451": {"label": "Medium", "title": "Rearrange Words in a Sentence", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.616, "total_accepted": 35900.0, "total_submissions": 58200.0, "testcase_example": "'\"Leetcode is cool\"'", "body": "Given a sentence\ntext (A\nsentence\nis a string of space-separated words) in the following format:\nFirst letter is in upper case.\nEach word in text are separated by a single space.\nYour task is to rearrange the words in text such that\nall words are rearranged in an increasing order of their lengths. If two words have the same length, arrange them in their original order.\nReturn the new text\nfollowing the format shown above.", "examples": [{"full_text": "Example 1:\nInput: text = \"Leetcode is cool\"\nOutput: \"Is cool leetcode\"\nExplanation: There are 3 words, \"Leetcode\" of length 8, \"is\" of length 2 and \"cool\" of length 4.\nOutput is ordered by length and the new first word starts with capital letter.", "input": "Input: text = \"Leetcode is cool\"", "output": "Output: \"Is cool leetcode\"\nOutput is ordered by length and the new first word starts with capital letter.", "explanation": "Explanation: There are 3 words, \"Leetcode\" of length 8, \"is\" of length 2 and \"cool\" of length 4."}, {"full_text": "Example 2:\nInput: text = \"Keep calm and code on\"\nOutput: \"On and keep calm code\"\nExplanation: Output is ordered as follows:\n\"On\" 2 letters.\n\"and\" 3 letters.\n\"keep\" 4 letters in case of tie order by position in original text.\n\"calm\" 4 letters.\n\"code\" 4 letters.", "input": "Input: text = \"Keep calm and code on\"", "output": "Output: \"On and keep calm code\"", "explanation": "Explanation: Output is ordered as follows:\n\"On\" 2 letters.\n\"and\" 3 letters.\n\"keep\" 4 letters in case of tie order by position in original text.\n\"calm\" 4 letters.\n\"code\" 4 letters."}, {"full_text": "Example 3:\nInput: text = \"To be or not to be\"\nOutput: \"To be or to be not\"", "input": "Input: text = \"To be or not to be\"", "output": "Output: \"To be or to be not\"", "explanation": ""}], "constraints": "Constraints:\ntext begins with a capital letter and then contains lowercase letters and single space between words.\n1 <= text.length <= 10^5", "notes": ""}, "1448": {"label": "Medium", "title": "Count Good Nodes in Binary Tree", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7297, "total_accepted": 148200.0, "total_submissions": 203200.0, "testcase_example": "'[3,1,4,3,null,1,5]'", "body": "Given a binary tree root, a node X in the tree is named\ngood if in the path from root to X there are no nodes with a value greater than X.\nReturn the number of good nodes in the binary tree.", "examples": [{"full_text": "Example 1:\nInput: root = [3,1,4,3,null,1,5]\nOutput: 4\nExplanation: Nodes in blue are good.\nRoot Node (3) is always a good node.\nNode 4 -> (3,4) is the maximum value in the path starting from the root.\nNode 5 -> (3,4,5) is the maximum value in the path\nNode 3 -> (3,1,3) is the maximum value in the path.", "input": "Input: root = [3,1,4,3,null,1,5]", "output": "Output: 4", "explanation": "Explanation: Nodes in blue are good.\nRoot Node (3) is always a good node.\nNode 4 -> (3,4) is the maximum value in the path starting from the root.\nNode 5 -> (3,4,5) is the maximum value in the path\nNode 3 -> (3,1,3) is the maximum value in the path."}, {"full_text": "Example 2:\nInput: root = [3,3,null,4,2]\nOutput: 3\nExplanation: Node 2 -> (3, 3, 2) is not good, because \"3\" is higher than it.", "input": "Input: root = [3,3,null,4,2]", "output": "Output: 3", "explanation": "Explanation: Node 2 -> (3, 3, 2) is not good, because \"3\" is higher than it."}, {"full_text": "Example 3:\nInput: root = [1]\nOutput: 1\nExplanation: Root is considered as good.", "input": "Input: root = [1]", "output": "Output: 1", "explanation": "Explanation: Root is considered as good."}], "constraints": "Constraints:\nThe number of nodes in the binary tree is in the range\n[1, 10^5].\nEach node's value is between [-10^4, 10^4].", "notes": ""}, "1447": {"label": "Medium", "title": "Simplified Fractions", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6364, "total_accepted": 19500.0, "total_submissions": 30600.0, "testcase_example": "'2'", "body": "Given an integer n, return a list of all simplified fractions between 0 and 1 (exclusive) such that the denominator is less-than-or-equal-to n. You can return the answer in any order.", "examples": [{"full_text": "Example 1:\nInput: n = 2\nOutput: [\"1/2\"]\nExplanation: \"1/2\" is the only unique fraction with a denominator less-than-or-equal-to 2.", "input": "Input: n = 2", "output": "Output: [\"1/2\"]", "explanation": "Explanation: \"1/2\" is the only unique fraction with a denominator less-than-or-equal-to 2."}, {"full_text": "Example 2:\nInput: n = 3\nOutput: [\"1/2\",\"1/3\",\"2/3\"]", "input": "Input: n = 3", "output": "Output: [\"1/2\",\"1/3\",\"2/3\"]", "explanation": ""}, {"full_text": "Example 3:\nInput: n = 4\nOutput: [\"1/2\",\"1/3\",\"1/4\",\"2/3\",\"3/4\"]\nExplanation: \"2/4\" is not a simplified fraction because it can be simplified to \"1/2\".", "input": "Input: n = 4", "output": "Output: [\"1/2\",\"1/3\",\"1/4\",\"2/3\",\"3/4\"]", "explanation": "Explanation: \"2/4\" is not a simplified fraction because it can be simplified to \"1/2\"."}], "constraints": "Constraints:\n1 <= n <= 100", "notes": ""}, "1443": {"label": "Medium", "title": "Minimum Time to Collect All Apples in a Tree", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5539000000000001, "total_accepted": 27200.0, "total_submissions": 49000.0, "testcase_example": "'7\\n' +\n  '[[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]]\\n' +\n  '[false,false,true,false,true,true,false]'", "body": "Given an undirected tree consisting of n vertices numbered from 0 to n-1, which has some apples in their vertices. You spend 1 second to walk over one edge of the tree. Return the minimum time in seconds you have to spend to collect all apples in the tree, starting at vertex 0 and coming back to this vertex.\nThe edges of the undirected tree are given in the array edges, where edges[i] = [ai, bi] means that exists an edge connecting the vertices ai and bi. Additionally, there is a boolean array hasApple, where hasApple[i] = true means that vertex i has an apple; otherwise, it does not have any apple.", "examples": [{"full_text": "Example 1:\nInput: n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], hasApple = [false,false,true,false,true,true,false]\nOutput: 8\nExplanation: The figure above represents the given tree where red vertices have an apple. One optimal path to collect all apples is shown by the green arrows.", "input": "Input: n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], hasApple = [false,false,true,false,true,true,false]", "output": "Output: 8", "explanation": "Explanation: The figure above represents the given tree where red vertices have an apple. One optimal path to collect all apples is shown by the green arrows."}, {"full_text": "Example 2:\nInput: n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], hasApple = [false,false,true,false,false,true,false]\nOutput: 6\nExplanation: The figure above represents the given tree where red vertices have an apple. One optimal path to collect all apples is shown by the green arrows.", "input": "Input: n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], hasApple = [false,false,true,false,false,true,false]", "output": "Output: 6", "explanation": "Explanation: The figure above represents the given tree where red vertices have an apple. One optimal path to collect all apples is shown by the green arrows."}, {"full_text": "Example 3:\nInput: n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], hasApple = [false,false,false,false,false,false,false]\nOutput: 0", "input": "Input: n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], hasApple = [false,false,false,false,false,false,false]", "output": "Output: 0", "explanation": ""}], "constraints": "Constraints:\n1 <= n <= 10^5\nedges.length == n - 1\nedges[i].length == 2\n0 <= ai < bi <= n - 1\nfromi < toi\nhasApple.length == n", "notes": ""}, "1442": {"label": "Medium", "title": "Count Triplets That Can Form Two Arrays of Equal XOR", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7437999999999999, "total_accepted": 24400.0, "total_submissions": 32800.0, "testcase_example": "'[2,3,1,6,7]'", "body": "Given an array of integers arr.\nWe want to select three indices i, j and k where (0 <= i < j <= k < arr.length).\nLet's define a and b as follows:\na = arr[i] ^ arr[i + 1] ^ ... ^ arr[j - 1]\nb = arr[j] ^ arr[j + 1] ^ ... ^ arr[k]\nNote that ^ denotes the bitwise-xor operation.\nReturn the number of triplets (i, j and k) Where a == b.", "examples": [{"full_text": "Example 1:\nInput: arr = [2,3,1,6,7]\nOutput: 4\nExplanation: The triplets are (0,1,2), (0,2,2), (2,3,4) and (2,4,4)", "input": "Input: arr = [2,3,1,6,7]", "output": "Output: 4", "explanation": "Explanation: The triplets are (0,1,2), (0,2,2), (2,3,4) and (2,4,4)"}, {"full_text": "Example 2:\nInput: arr = [1,1,1,1,1]\nOutput: 10", "input": "Input: arr = [1,1,1,1,1]", "output": "Output: 10", "explanation": ""}], "constraints": "Constraints:\n1 <= arr.length <= 300\n1 <= arr[i] <= 10^8", "notes": ""}, "1438": {"label": "Medium", "title": "Longest Continuous Subarray With Absolute Diff Less Than or Equal to Limit", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4579, "total_accepted": 73500.0, "total_submissions": 160500.0, "testcase_example": "'[8,2,4,7]\\n4'", "body": "Given an array of integers nums and an integer limit, return the size of the longest non-empty subarray such that the absolute difference between any two elements of this subarray is less than or equal to limit.", "examples": [{"full_text": "Example 1:\nInput: nums = [8,2,4,7], limit = 4\nOutput: 2\nExplanation: All subarrays are:\n[8] with maximum absolute diff |8-8| = 0 <= 4.\n[8,2] with maximum absolute diff |8-2| = 6 > 4.\n[8,2,4] with maximum absolute diff |8-2| = 6 > 4.\n[8,2,4,7] with maximum absolute diff |8-2| = 6 > 4.\n[2] with maximum absolute diff |2-2| = 0 <= 4.\n[2,4] with maximum absolute diff |2-4| = 2 <= 4.\n[2,4,7] with maximum absolute diff |2-7| = 5 > 4.\n[4] with maximum absolute diff |4-4| = 0 <= 4.\n[4,7] with maximum absolute diff |4-7| = 3 <= 4.\n[7] with maximum absolute diff |7-7| = 0 <= 4.\nTherefore, the size of the longest subarray is 2.", "input": "Input: nums = [8,2,4,7], limit = 4", "output": "Output: 2", "explanation": "Explanation: All subarrays are:\n[8] with maximum absolute diff |8-8| = 0 <= 4.\n[8,2] with maximum absolute diff |8-2| = 6 > 4.\n[8,2,4] with maximum absolute diff |8-2| = 6 > 4.\n[8,2,4,7] with maximum absolute diff |8-2| = 6 > 4.\n[2] with maximum absolute diff |2-2| = 0 <= 4.\n[2,4] with maximum absolute diff |2-4| = 2 <= 4.\n[2,4,7] with maximum absolute diff |2-7| = 5 > 4.\n[4] with maximum absolute diff |4-4| = 0 <= 4.\n[4,7] with maximum absolute diff |4-7| = 3 <= 4.\n[7] with maximum absolute diff |7-7| = 0 <= 4.\nTherefore, the size of the longest subarray is 2."}, {"full_text": "Example 2:\nInput: nums = [10,1,2,4,7,2], limit = 5\nOutput: 4\nExplanation: The subarray [2,4,7,2] is the longest since the maximum absolute diff is |2-7| = 5 <= 5.", "input": "Input: nums = [10,1,2,4,7,2], limit = 5", "output": "Output: 4", "explanation": "Explanation: The subarray [2,4,7,2] is the longest since the maximum absolute diff is |2-7| = 5 <= 5."}, {"full_text": "Example 3:\nInput: nums = [4,2,2,2,4,4,2,2], limit = 0\nOutput: 3", "input": "Input: nums = [4,2,2,2,4,4,2,2], limit = 0", "output": "Output: 3", "explanation": ""}], "constraints": "Constraints:\n1 <= nums.length <= 10^5\n1 <= nums[i] <= 10^9\n0 <= limit <= 10^9", "notes": ""}, "1433": {"label": "Medium", "title": "Check If a String Can Break Another String", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6837000000000001, "total_accepted": 28200.0, "total_submissions": 41200.0, "testcase_example": "'\"abc\"\\n\"xya\"'", "body": "Given two strings: s1 and s2 with the same\nsize, check if some\npermutation of string s1 can break\nsome\npermutation of string s2 or vice-versa. In other words s2 can break s1\nor vice-versa.\nA string x\ncan break\nstring y\n(both of size n) if x[i] >= y[i]\n(in alphabetical order)\nfor all i\nbetween 0 and n-1.", "examples": [{"full_text": "Example 1:\nInput: s1 = \"abc\", s2 = \"xya\"\nOutput: true\nExplanation: \"ayx\" is a permutation of s2=\"xya\" which can break to string \"abc\" which is a permutation of s1=\"abc\".", "input": "Input: s1 = \"abc\", s2 = \"xya\"", "output": "Output: true", "explanation": "Explanation: \"ayx\" is a permutation of s2=\"xya\" which can break to string \"abc\" which is a permutation of s1=\"abc\"."}, {"full_text": "Example 2:\nInput: s1 = \"abe\", s2 = \"acd\"\nOutput: false\nExplanation: All permutations for s1=\"abe\" are: \"abe\", \"aeb\", \"bae\", \"bea\", \"eab\" and \"eba\" and all permutation for s2=\"acd\" are: \"acd\", \"adc\", \"cad\", \"cda\", \"dac\" and \"dca\". However, there is not any permutation from s1 which can break some permutation from s2 and vice-versa.", "input": "Input: s1 = \"abe\", s2 = \"acd\"", "output": "Output: false", "explanation": "Explanation: All permutations for s1=\"abe\" are: \"abe\", \"aeb\", \"bae\", \"bea\", \"eab\" and \"eba\" and all permutation for s2=\"acd\" are: \"acd\", \"adc\", \"cad\", \"cda\", \"dac\" and \"dca\". However, there is not any permutation from s1 which can break some permutation from s2 and vice-versa."}, {"full_text": "Example 3:\nInput: s1 = \"leetcodee\", s2 = \"interview\"\nOutput: true", "input": "Input: s1 = \"leetcodee\", s2 = \"interview\"", "output": "Output: true", "explanation": ""}], "constraints": "Constraints:\ns1.length == n\ns2.length == n\n1 <= n <= 10^5\nAll strings consist of lowercase English letters.", "notes": ""}, "1432": {"label": "Medium", "title": "Max Difference You Can Get From Changing an Integer", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.435, "total_accepted": 11900.0, "total_submissions": 27400.0, "testcase_example": "'555'", "body": "You are given an integer num. You will apply the following steps exactly two times:\nPick a digit x (0 <= x <= 9).\nPick another digit y (0 <= y <= 9). The digit y can be equal to x.\nReplace all the occurrences of x in the decimal representation of num by y.\nThe new integer cannot have any leading zeros, also the new integer cannot be 0.\nLet a and b be the results of applying the operations to num the first and second times, respectively.\nReturn the max difference between a and b.", "examples": [{"full_text": "Example 1:\nInput: num = 555\nOutput: 888\nExplanation: The first time pick x = 5 and y = 9 and store the new integer in a.\nThe second time pick x = 5 and y = 1 and store the new integer in b.\nWe have now a = 999 and b = 111 and max difference = 888", "input": "Input: num = 555", "output": "Output: 888", "explanation": "Explanation: The first time pick x = 5 and y = 9 and store the new integer in a.\nThe second time pick x = 5 and y = 1 and store the new integer in b.\nWe have now a = 999 and b = 111 and max difference = 888"}, {"full_text": "Example 2:\nInput: num = 9\nOutput: 8\nExplanation: The first time pick x = 9 and y = 9 and store the new integer in a.\nThe second time pick x = 9 and y = 1 and store the new integer in b.\nWe have now a = 9 and b = 1 and max difference = 8", "input": "Input: num = 9", "output": "Output: 8", "explanation": "Explanation: The first time pick x = 9 and y = 9 and store the new integer in a.\nThe second time pick x = 9 and y = 1 and store the new integer in b.\nWe have now a = 9 and b = 1 and max difference = 8"}], "constraints": "Constraints:\n1 <= num <= 10^8", "notes": ""}, "1424": {"label": "Medium", "title": "Diagonal Traverse II", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4951, "total_accepted": 38000.0, "total_submissions": 76700.0, "testcase_example": "'[[1,2,3],[4,5,6],[7,8,9]]'", "body": "Given a 2D integer array nums, return all elements of nums in diagonal order as shown in the below images.", "examples": [{"full_text": "Example 1:\nInput: nums = [[1,2,3],[4,5,6],[7,8,9]]\nOutput: [1,4,2,7,5,3,8,6,9]", "input": "Input: nums = [[1,2,3],[4,5,6],[7,8,9]]", "output": "Output: [1,4,2,7,5,3,8,6,9]", "explanation": ""}, {"full_text": "Example 2:\nInput: nums = [[1,2,3,4,5],[6,7],[8],[9,10,11],[12,13,14,15,16]]\nOutput: [1,6,2,8,7,3,9,4,12,10,5,13,11,14,15,16]", "input": "Input: nums = [[1,2,3,4,5],[6,7],[8],[9,10,11],[12,13,14,15,16]]", "output": "Output: [1,6,2,8,7,3,9,4,12,10,5,13,11,14,15,16]", "explanation": ""}], "constraints": "Constraints:\n1 <= nums.length <= 10^5\n1 <= nums[i].length <= 10^5\n1 <= sum(nums[i].length) <= 10^5\n1 <= nums[i][j] <= 10^5", "notes": ""}, "1423": {"label": "Medium", "title": "Maximum Points You Can Obtain from Cards", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.49810000000000004, "total_accepted": 118900.0, "total_submissions": 238700.0, "testcase_example": "'[1,2,3,4,5,6,1]\\n3'", "body": "There are several cards arranged in a row, and each card has an associated number of points. The points are given in the integer array cardPoints.\nIn one step, you can take one card from the beginning or from the end of the row. You have to take exactly k cards.\nYour score is the sum of the points of the cards you have taken.\nGiven the integer array cardPoints and the integer k, return the maximum score you can obtain.", "examples": [{"full_text": "Example 1:\nInput: cardPoints = [1,2,3,4,5,6,1], k = 3\nOutput: 12\nExplanation: After the first step, your score will always be 1. However, choosing the rightmost card first will maximize your total score. The optimal strategy is to take the three cards on the right, giving a final score of 1 + 6 + 5 = 12.", "input": "Input: cardPoints = [1,2,3,4,5,6,1], k = 3", "output": "Output: 12", "explanation": "Explanation: After the first step, your score will always be 1. However, choosing the rightmost card first will maximize your total score. The optimal strategy is to take the three cards on the right, giving a final score of 1 + 6 + 5 = 12."}, {"full_text": "Example 2:\nInput: cardPoints = [2,2,2], k = 2\nOutput: 4\nExplanation: Regardless of which two cards you take, your score will always be 4.", "input": "Input: cardPoints = [2,2,2], k = 2", "output": "Output: 4", "explanation": "Explanation: Regardless of which two cards you take, your score will always be 4."}, {"full_text": "Example 3:\nInput: cardPoints = [9,7,7,9,7,7,9], k = 7\nOutput: 55\nExplanation: You have to take all the cards. Your score is the sum of points of all cards.", "input": "Input: cardPoints = [9,7,7,9,7,7,9], k = 7", "output": "Output: 55", "explanation": "Explanation: You have to take all the cards. Your score is the sum of points of all cards."}], "constraints": "Constraints:\n1 <= cardPoints.length <= 10^5\n1 <= cardPoints[i] <= 10^4\n1 <= k <= cardPoints.length", "notes": ""}, "1419": {"label": "Medium", "title": "Minimum Number of Frogs Croaking", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.495, "total_accepted": 24000.0, "total_submissions": 48400.0, "testcase_example": "'\"croakcroak\"'", "body": "You are given the string croakOfFrogs, which represents a combination of the string \"croak\" from different frogs, that is, multiple frogs can croak at the same time, so multiple \"croak\" are mixed.\nReturn the minimum number of different frogs to finish all the croaks in the given string.\nA valid \"croak\" means a frog is printing five letters 'c', 'r', 'o', 'a', and 'k' sequentially. The frogs have to print all five letters to finish a croak. If the given string is not a combination of a valid \"croak\" return -1.", "examples": [{"full_text": "Example 1:\nInput: croakOfFrogs = \"croakcroak\"\nOutput: 1\nExplanation: One frog yelling \"croak\" twice.", "input": "Input: croakOfFrogs = \"croakcroak\"", "output": "Output: 1", "explanation": "Explanation: One frog yelling \"croak\" twice."}, {"full_text": "Example 2:\nInput: croakOfFrogs = \"crcoakroak\"\nOutput: 2\nExplanation: The minimum number of frogs is two.\nThe first frog could yell \"crcoakroak\".\nThe second frog could yell later \"crcoakroak\".", "input": "Input: croakOfFrogs = \"crcoakroak\"", "output": "Output: 2", "explanation": "Explanation: The minimum number of frogs is two.\nThe first frog could yell \"crcoakroak\".\nThe second frog could yell later \"crcoakroak\"."}, {"full_text": "Example 3:\nInput: croakOfFrogs = \"croakcrook\"\nOutput: -1\nExplanation: The given string is an invalid combination of \"croak\" from different frogs.", "input": "Input: croakOfFrogs = \"croakcrook\"", "output": "Output: -1", "explanation": "Explanation: The given string is an invalid combination of \"croak\" from different frogs."}], "constraints": "Constraints:\n1 <= croakOfFrogs.length <= 10^5\ncroakOfFrogs is either 'c', 'r', 'o', 'a', or 'k'.", "notes": ""}, "1418": {"label": "Medium", "title": "Display Table of Food Orders in a Restaurant", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7193999999999999, "total_accepted": 18000.0, "total_submissions": 25000.0, "testcase_example": "'[[\"David\",\"3\",\"Ceviche\"],[\"Corina\",\"10\",\"Beef Burrito\"],[\"David\",\"3\",\"Fried Chicken\"],[\"Carla\",\"5\",\"Water\"],[\"Carla\",\"5\",\"Ceviche\"],[\"Rous\",\"3\",\"Ceviche\"]]'", "body": "Given\nthe array orders, which represents the orders that customers have done in a restaurant. More specifically\norders[i]=[customerNamei,tableNumberi,foodItemi] where customerNamei is the name of the customer, tableNumberi\nis the table customer sit at, and foodItemi\nis the item customer orders.\nReturn the restaurant's \u201cdisplay table\u201d. The \u201cdisplay table\u201d is a table whose row entries denote how many of each food item each table ordered. The first column is the table number and the remaining columns correspond to each food item in alphabetical order. The first row should be a header whose first column is \u201cTable\u201d, followed by the names of the food items. Note that the customer names are not part of the table. Additionally, the rows should be sorted in numerically increasing order.", "examples": [{"full_text": "Example 1:\nInput: orders = [[\"David\",\"3\",\"Ceviche\"],[\"Corina\",\"10\",\"Beef Burrito\"],[\"David\",\"3\",\"Fried Chicken\"],[\"Carla\",\"5\",\"Water\"],[\"Carla\",\"5\",\"Ceviche\"],[\"Rous\",\"3\",\"Ceviche\"]]\nOutput: [[\"Table\",\"Beef Burrito\",\"Ceviche\",\"Fried Chicken\",\"Water\"],[\"3\",\"0\",\"2\",\"1\",\"0\"],[\"5\",\"0\",\"1\",\"0\",\"1\"],[\"10\",\"1\",\"0\",\"0\",\"0\"]]\nExplanation:\nThe displaying table looks like:\nTable,Beef Burrito,Ceviche,Fried Chicken,Water\n3 ,0 ,2 ,1 ,0\n5 ,0 ,1 ,0 ,1\n10 ,1 ,0 ,0 ,0\nFor the table 3: David orders \"Ceviche\" and \"Fried Chicken\", and Rous orders \"Ceviche\".\nFor the table 5: Carla orders \"Water\" and \"Ceviche\".\nFor the table 10: Corina orders \"Beef Burrito\".", "input": "Input: orders = [[\"David\",\"3\",\"Ceviche\"],[\"Corina\",\"10\",\"Beef Burrito\"],[\"David\",\"3\",\"Fried Chicken\"],[\"Carla\",\"5\",\"Water\"],[\"Carla\",\"5\",\"Ceviche\"],[\"Rous\",\"3\",\"Ceviche\"]]", "output": "Output: [[\"Table\",\"Beef Burrito\",\"Ceviche\",\"Fried Chicken\",\"Water\"],[\"3\",\"0\",\"2\",\"1\",\"0\"],[\"5\",\"0\",\"1\",\"0\",\"1\"],[\"10\",\"1\",\"0\",\"0\",\"0\"]]", "explanation": "Explanation:\nThe displaying table looks like:\nTable,Beef Burrito,Ceviche,Fried Chicken,Water\n3 ,0 ,2 ,1 ,0\n5 ,0 ,1 ,0 ,1\n10 ,1 ,0 ,0 ,0\nFor the table 3: David orders \"Ceviche\" and \"Fried Chicken\", and Rous orders \"Ceviche\".\nFor the table 5: Carla orders \"Water\" and \"Ceviche\".\nFor the table 10: Corina orders \"Beef Burrito\"."}, {"full_text": "Example 2:\nInput: orders = [[\"James\",\"12\",\"Fried Chicken\"],[\"Ratesh\",\"12\",\"Fried Chicken\"],[\"Amadeus\",\"12\",\"Fried Chicken\"],[\"Adam\",\"1\",\"Canadian Waffles\"],[\"Brianna\",\"1\",\"Canadian Waffles\"]]\nOutput: [[\"Table\",\"Canadian Waffles\",\"Fried Chicken\"],[\"1\",\"2\",\"0\"],[\"12\",\"0\",\"3\"]]\nExplanation:\nFor the table 1: Adam and Brianna order \"Canadian Waffles\".\nFor the table 12: James, Ratesh and Amadeus order \"Fried Chicken\".", "input": "Input: orders = [[\"James\",\"12\",\"Fried Chicken\"],[\"Ratesh\",\"12\",\"Fried Chicken\"],[\"Amadeus\",\"12\",\"Fried Chicken\"],[\"Adam\",\"1\",\"Canadian Waffles\"],[\"Brianna\",\"1\",\"Canadian Waffles\"]]", "output": "Output: [[\"Table\",\"Canadian Waffles\",\"Fried Chicken\"],[\"1\",\"2\",\"0\"],[\"12\",\"0\",\"3\"]]", "explanation": "Explanation:\nFor the table 1: Adam and Brianna order \"Canadian Waffles\".\nFor the table 12: James, Ratesh and Amadeus order \"Fried Chicken\"."}, {"full_text": "Example 3:\nInput: orders = [[\"Laura\",\"2\",\"Bean Burrito\"],[\"Jhon\",\"2\",\"Beef Burrito\"],[\"Melissa\",\"2\",\"Soda\"]]\nOutput: [[\"Table\",\"Bean Burrito\",\"Beef Burrito\",\"Soda\"],[\"2\",\"1\",\"1\",\"1\"]]", "input": "Input: orders = [[\"Laura\",\"2\",\"Bean Burrito\"],[\"Jhon\",\"2\",\"Beef Burrito\"],[\"Melissa\",\"2\",\"Soda\"]]", "output": "Output: [[\"Table\",\"Bean Burrito\",\"Beef Burrito\",\"Soda\"],[\"2\",\"1\",\"1\",\"1\"]]", "explanation": ""}], "constraints": "Constraints:\n1 <=\norders.length <= 5 * 10^4\norders[i].length == 3\n1 <= customerNamei.length, foodItemi.length <= 20\ncustomerNamei and foodItemi consist of lowercase and uppercase English letters and the space character.\ntableNumberi\nis a valid integer between 1 and 500.", "notes": ""}, "1415": {"label": "Medium", "title": "The k-th Lexicographical String of All Happy Strings of Length n", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7111, "total_accepted": 24200.0, "total_submissions": 34000.0, "testcase_example": "'1\\n3'", "body": "A happy string is a string that:\nconsists only of letters of the set ['a', 'b', 'c'].\ns[i] != s[i + 1] for all values of i from 1 to s.length - 1 (string is 1-indexed).\nFor example, strings \"abc\", \"ac\", \"b\" and \"abcbabcbcb\" are all happy strings and strings \"aa\", \"baa\" and \"ababbc\" are not happy strings.\nGiven two integers n and k, consider a list of all happy strings of length n sorted in lexicographical order.\nReturn the kth string of this list or return an empty string if there are less than k happy strings of length n.", "examples": [{"full_text": "Example 1:\nInput: n = 1, k = 3\nOutput: \"c\"\nExplanation: The list [\"a\", \"b\", \"c\"] contains all happy strings of length 1. The third string is \"c\".", "input": "Input: n = 1, k = 3", "output": "Output: \"c\"", "explanation": "Explanation: The list [\"a\", \"b\", \"c\"] contains all happy strings of length 1. The third string is \"c\"."}, {"full_text": "Example 2:\nInput: n = 1, k = 4\nOutput: \"\"\nExplanation: There are only 3 happy strings of length 1.", "input": "Input: n = 1, k = 4", "output": "Output: \"\"", "explanation": "Explanation: There are only 3 happy strings of length 1."}, {"full_text": "Example 3:\nInput: n = 3, k = 9\nOutput: \"cab\"\nExplanation: There are 12 different happy string of length 3 [\"aba\", \"abc\", \"aca\", \"acb\", \"bab\", \"bac\", \"bca\", \"bcb\", \"cab\", \"cac\", \"cba\", \"cbc\"]. You will find the 9^th string = \"cab\"", "input": "Input: n = 3, k = 9", "output": "Output: \"cab\"", "explanation": "Explanation: There are 12 different happy string of length 3 [\"aba\", \"abc\", \"aca\", \"acb\", \"bab\", \"bac\", \"bca\", \"bcb\", \"cab\", \"cac\", \"cba\", \"cbc\"]. You will find the 9^th string = \"cab\""}], "constraints": "Constraints:\n1 <= n <= 10\n1 <= k <= 100", "notes": ""}, "1414": {"label": "Medium", "title": "Find the Minimum Number of Fibonacci Numbers Whose Sum Is K", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6514, "total_accepted": 29300.0, "total_submissions": 45000.0, "testcase_example": "'7'", "body": "Given an integer\nk, return the minimum number of Fibonacci numbers whose sum is equal to k. The same Fibonacci number can be used multiple times.\nThe Fibonacci numbers are defined as:\nF1 = 1\nF2 = 1\nFn = Fn-1 + Fn-2 for n > 2.\nIt is guaranteed that for the given constraints we can always find such Fibonacci numbers that sum up to k.", "examples": [{"full_text": "Example 1:\nInput: k = 7\nOutput: 2\nExplanation: The Fibonacci numbers are: 1, 1, 2, 3, 5, 8, 13, ...\nFor k = 7 we can use 2 + 5 = 7.", "input": "Input: k = 7", "output": "Output: 2", "explanation": "Explanation: The Fibonacci numbers are: 1, 1, 2, 3, 5, 8, 13, ...\nFor k = 7 we can use 2 + 5 = 7."}, {"full_text": "Example 2:\nInput: k = 10\nOutput: 2\nExplanation: For k = 10 we can use 2 + 8 = 10.", "input": "Input: k = 10", "output": "Output: 2", "explanation": "Explanation: For k = 10 we can use 2 + 8 = 10."}, {"full_text": "Example 3:\nInput: k = 19\nOutput: 3\nExplanation: For k = 19 we can use 1 + 5 + 13 = 19.", "input": "Input: k = 19", "output": "Output: 3", "explanation": "Explanation: For k = 19 we can use 1 + 5 + 13 = 19."}], "constraints": "Constraints:\n1 <= k <= 10^9", "notes": ""}, "1410": {"label": "Medium", "title": "HTML Entity Parser", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5277000000000001, "total_accepted": 18400.0, "total_submissions": 34800.0, "testcase_example": "'\"&amp; is an HTML entity but &ambassador; is not.\"'", "body": "HTML entity parser is the parser that takes HTML code as input and replace all the entities of the special characters by the characters itself.\nThe special characters and their entities for HTML are:\nQuotation Mark: the entity is \" and symbol character is \".\nSingle Quote Mark: the entity is ' and symbol character is '.\nAmpersand: the entity is & and symbol character is &.\nGreater Than Sign: the entity is > and symbol character is >.\nLess Than Sign: the entity is < and symbol character is <.\nSlash: the entity is \u2044 and symbol character is /.\nGiven the input text string to the HTML parser, you have to implement the entity parser.\nReturn the text after replacing the entities by the special characters.", "examples": [{"full_text": "Example 1:\nInput: text = \"& is an HTML entity but &ambassador; is not.\"\nOutput: \"& is an HTML entity but &ambassador; is not.\"\nExplanation: The parser will replace the & entity by &", "input": "Input: text = \"& is an HTML entity but &ambassador; is not.\"", "output": "Output: \"& is an HTML entity but &ambassador; is not.\"", "explanation": "Explanation: The parser will replace the & entity by &"}, {"full_text": "Example 2:\nInput: text = \"and I quote: \"...\"\"\nOutput: \"and I quote: \\\"...\\\"\"", "input": "Input: text = \"and I quote: \"...\"\"", "output": "Output: \"and I quote: \\\"...\\\"\"", "explanation": ""}], "constraints": "Constraints:\n1 <= text.length <= 10^5\nThe string may contain any possible characters out of all the 256 ASCII characters.", "notes": ""}, "1409": {"label": "Medium", "title": "Queries on a Permutation With Key", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.8266, "total_accepted": 36100.0, "total_submissions": 43600.0, "testcase_example": "'[3,1,2,1]\\n5'", "body": "Given the array queries of positive integers between 1 and m, you have to process all queries[i] (from i=0 to i=queries.length-1) according to the following rules:\nIn the beginning, you have the permutation P=[1,2,3,...,m].\nFor the current i, find the position of queries[i] in the permutation P (indexing from 0) and then move this at the beginning of the permutation P.\nNotice that the position of queries[i] in P is the result for queries[i].\nReturn an array containing the result for the given queries.", "examples": [{"full_text": "Example 1:\nInput: queries = [3,1,2,1], m = 5\nOutput: [2,1,2,1]\nExplanation: The queries are processed as follow:\nFor i=0: queries[i]=3, P=[1,2,3,4,5], position of 3 in P is 2, then we move 3 to the beginning of P resulting in P=[3,1,2,4,5].\nFor i=1: queries[i]=1, P=[3,1,2,4,5], position of 1 in P is 1, then we move 1 to the beginning of P resulting in P=[1,3,2,4,5].\nFor i=2: queries[i]=2, P=[1,3,2,4,5], position of 2 in P is 2, then we move 2 to the beginning of P resulting in P=[2,1,3,4,5].\nFor i=3: queries[i]=1, P=[2,1,3,4,5], position of 1 in P is 1, then we move 1 to the beginning of P resulting in P=[1,2,3,4,5].\nTherefore, the array containing the result is [2,1,2,1].", "input": "Input: queries = [3,1,2,1], m = 5", "output": "Output: [2,1,2,1]", "explanation": "Explanation: The queries are processed as follow:\nFor i=0: queries[i]=3, P=[1,2,3,4,5], position of 3 in P is 2, then we move 3 to the beginning of P resulting in P=[3,1,2,4,5].\nFor i=1: queries[i]=1, P=[3,1,2,4,5], position of 1 in P is 1, then we move 1 to the beginning of P resulting in P=[1,3,2,4,5].\nFor i=2: queries[i]=2, P=[1,3,2,4,5], position of 2 in P is 2, then we move 2 to the beginning of P resulting in P=[2,1,3,4,5].\nFor i=3: queries[i]=1, P=[2,1,3,4,5], position of 1 in P is 1, then we move 1 to the beginning of P resulting in P=[1,2,3,4,5].\nTherefore, the array containing the result is [2,1,2,1]."}, {"full_text": "Example 2:\nInput: queries = [4,1,2,2], m = 4\nOutput: [3,1,2,0]", "input": "Input: queries = [4,1,2,2], m = 4", "output": "Output: [3,1,2,0]", "explanation": ""}, {"full_text": "Example 3:\nInput: queries = [7,5,5,8,3], m = 8\nOutput: [6,5,0,7,5]", "input": "Input: queries = [7,5,5,8,3], m = 8", "output": "Output: [6,5,0,7,5]", "explanation": ""}], "constraints": "Constraints:\n1 <= m <= 10^3\n1 <= queries.length <= m\n1 <= queries[i] <= m", "notes": ""}, "1405": {"label": "Medium", "title": "Longest Happy String", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5592, "total_accepted": 35500.0, "total_submissions": 63500.0, "testcase_example": "'1\\n1\\n7'", "body": "A string s is called happy if it satisfies the following conditions:\ns only contains the letters 'a', 'b', and 'c'.\ns does not contain any of \"aaa\", \"bbb\", or \"ccc\" as a substring.\ns contains at most a occurrences of the letter 'a'.\ns contains at most b occurrences of the letter 'b'.\ns contains at most c occurrences of the letter 'c'.\nGiven three integers a, b, and c, return the longest possible happy string. If there are multiple longest happy strings, return any of them. If there is no such string, return the empty string \"\".\nA substring is a contiguous sequence of characters within a string.", "examples": [{"full_text": "Example 1:\nInput: a = 1, b = 1, c = 7\nOutput: \"ccaccbcc\"\nExplanation: \"ccbccacc\" would also be a correct answer.", "input": "Input: a = 1, b = 1, c = 7", "output": "Output: \"ccaccbcc\"", "explanation": "Explanation: \"ccbccacc\" would also be a correct answer."}, {"full_text": "Example 2:\nInput: a = 7, b = 1, c = 0\nOutput: \"aabaa\"\nExplanation: It is the only correct answer in this case.", "input": "Input: a = 7, b = 1, c = 0", "output": "Output: \"aabaa\"", "explanation": "Explanation: It is the only correct answer in this case."}], "constraints": "Constraints:\n0 <= a, b, c <= 100\na + b + c > 0", "notes": ""}, "1404": {"label": "Medium", "title": "Number of Steps to Reduce a Number in Binary Representation to One", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5069, "total_accepted": 22300.0, "total_submissions": 43900.0, "testcase_example": "'\"1101\"'", "body": "Given the binary representation of an integer as a string s, return the number of steps to reduce it to 1 under the following rules:\n\nIf the current number is even, you have to divide it by 2.\n\n\nIf the current number is odd, you have to add 1 to it.\n\nIt is guaranteed that you can always reach one for all test cases.", "examples": [{"full_text": "Example 1:\nInput: s = \"1101\"\nOutput: 6\nExplanation: \"1101\" corressponds to number 13 in their decimal representation.\nStep 1) 13 is odd, add 1 and obtain 14.\nStep 2) 14 is even, divide by 2 and obtain 7.\nStep 3) 7 is odd, add 1 and obtain 8.\nStep 4) 8 is even, divide by 2 and obtain 4.\n\nStep 5) 4 is even, divide by 2 and obtain 2.\nStep 6) 2 is even, divide by 2 and obtain 1.\n", "input": "Input: s = \"1101\"", "output": "Output: 6", "explanation": "Explanation: \"1101\" corressponds to number 13 in their decimal representation.\nStep 1) 13 is odd, add 1 and obtain 14.\nStep 2) 14 is even, divide by 2 and obtain 7.\nStep 3) 7 is odd, add 1 and obtain 8.\nStep 4) 8 is even, divide by 2 and obtain 4.\n\nStep 5) 4 is even, divide by 2 and obtain 2.\nStep 6) 2 is even, divide by 2 and obtain 1.\n"}, {"full_text": "Example 2:\nInput: s = \"10\"\nOutput: 1\nExplanation: \"10\" corressponds to number 2 in their decimal representation.\nStep 1) 2 is even, divide by 2 and obtain 1.\n", "input": "Input: s = \"10\"", "output": "Output: 1", "explanation": "Explanation: \"10\" corressponds to number 2 in their decimal representation.\nStep 1) 2 is even, divide by 2 and obtain 1.\n"}, {"full_text": "Example 3:\nInput: s = \"1\"\nOutput: 0", "input": "Input: s = \"1\"", "output": "Output: 0", "explanation": ""}], "constraints": "Constraints:\n1 <= s.length\n<= 500\ns consists of characters '0' or '1'\ns[0] == '1'", "notes": ""}, "1401": {"label": "Medium", "title": "Circle and Rectangle Overlapping", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.436, "total_accepted": 9300.0, "total_submissions": 21400.0, "testcase_example": "'1\\n0\\n0\\n1\\n-1\\n3\\n1'", "body": "You are given a circle represented as (radius, xCenter, yCenter) and an axis-aligned rectangle represented as (x1, y1, x2, y2), where (x1, y1) are the coordinates of the bottom-left corner, and (x2, y2) are the coordinates of the top-right corner of the rectangle.\nReturn true if the circle and rectangle are overlapped otherwise return false. In other words, check if there is any point (xi, yi) that belongs to the circle and the rectangle at the same time.", "examples": [{"full_text": "Example 1:\nInput: radius = 1, xCenter = 0, yCenter = 0, x1 = 1, y1 = -1, x2 = 3, y2 = 1\nOutput: true\nExplanation: Circle and rectangle share the point (1,0).", "input": "Input: radius = 1, xCenter = 0, yCenter = 0, x1 = 1, y1 = -1, x2 = 3, y2 = 1", "output": "Output: true", "explanation": "Explanation: Circle and rectangle share the point (1,0)."}, {"full_text": "Example 2:\nInput: radius = 1, xCenter = 1, yCenter = 1, x1 = 1, y1 = -3, x2 = 2, y2 = -1\nOutput: false", "input": "Input: radius = 1, xCenter = 1, yCenter = 1, x1 = 1, y1 = -3, x2 = 2, y2 = -1", "output": "Output: false", "explanation": ""}, {"full_text": "Example 3:\nInput: radius = 1, xCenter = 0, yCenter = 0, x1 = -1, y1 = 0, x2 = 0, y2 = 1\nOutput: true", "input": "Input: radius = 1, xCenter = 0, yCenter = 0, x1 = -1, y1 = 0, x2 = 0, y2 = 1", "output": "Output: true", "explanation": ""}], "constraints": "Constraints:\n1 <= radius <= 2000\n-10^4 <= xCenter, yCenter <= 10^4\n-10^4 <= x1 < x2 <= 10^4\n-10^4 <= y1 < y2 <= 10^4", "notes": ""}, "1400": {"label": "Medium", "title": "Construct K Palindrome Strings", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6396000000000001, "total_accepted": 33100.0, "total_submissions": 51700.0, "testcase_example": "'\"annabelle\"\\n2'", "body": "Given a string s and an integer k, return true if you can use all the characters in s to construct k palindrome strings or false otherwise.", "examples": [{"full_text": "Example 1:\nInput: s = \"annabelle\", k = 2\nOutput: true\nExplanation: You can construct two palindromes using all characters in s.\nSome possible constructions \"anna\" + \"elble\", \"anbna\" + \"elle\", \"anellena\" + \"b\"", "input": "Input: s = \"annabelle\", k = 2", "output": "Output: true", "explanation": "Explanation: You can construct two palindromes using all characters in s.\nSome possible constructions \"anna\" + \"elble\", \"anbna\" + \"elle\", \"anellena\" + \"b\""}, {"full_text": "Example 2:\nInput: s = \"leetcode\", k = 3\nOutput: false\nExplanation: It is impossible to construct 3 palindromes using all the characters of s.", "input": "Input: s = \"leetcode\", k = 3", "output": "Output: false", "explanation": "Explanation: It is impossible to construct 3 palindromes using all the characters of s."}, {"full_text": "Example 3:\nInput: s = \"true\", k = 4\nOutput: true\nExplanation: The only possible solution is to put each character in a separate string.", "input": "Input: s = \"true\", k = 4", "output": "Output: true", "explanation": "Explanation: The only possible solution is to put each character in a separate string."}], "constraints": "Constraints:\n1 <= s.length <= 10^5\ns consists of lowercase English letters.\n1 <= k <= 10^5", "notes": ""}, "1396": {"label": "Medium", "title": "Design Underground System", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7179000000000001, "total_accepted": 89400.0, "total_submissions": 124500.0, "testcase_example": "'[\"UndergroundSystem\",\"checkIn\",\"checkIn\",\"checkIn\",\"checkOut\",\"checkOut\",\"checkOut\",\"getAverageTime\",\"getAverageTime\",\"checkIn\",\"getAverageTime\",\"checkOut\",\"getAverageTime\"]\\n' +\n  '[[],[45,\"Leyton\",3],[32,\"Paradise\",8],[27,\"Leyton\",10],[45,\"Waterloo\",15],[27,\"Waterloo\",20],[32,\"Cambridge\",22],[\"Paradise\",\"Cambridge\"],[\"Leyton\",\"Waterloo\"],[10,\"Leyton\",24],[\"Leyton\",\"Waterloo\"],[10,\"Waterloo\",38],[\"Leyton\",\"Waterloo\"]]'", "body": "An underground railway system is keeping track of customer travel times between different stations. They are using this data to calculate the average time it takes to travel from one station to another.\nImplement the UndergroundSystem class:\nvoid checkIn(int id, string stationName, int t)\n\nA customer with a card ID equal to id, checks in at the station stationName at time t.\nA customer can only be checked into one place at a time.\n\n\nvoid checkOut(int id, string stationName, int t)\n\nA customer with a card ID equal to id, checks out from the station stationName at time t.\n\n\ndouble getAverageTime(string startStation, string endStation)\n\nReturns the average time it takes to travel from startStation to endStation.\nThe average time is computed from all the previous traveling times from startStation to endStation that happened directly, meaning a check in at startStation followed by a check out from endStation.\nThe time it takes to travel from startStation to endStation may be different from the time it takes to travel from endStation to startStation.\nThere will be at least one customer that has traveled from startStation to endStation before getAverageTime is called.\n\n\nYou may assume all calls to the checkIn and checkOut methods are consistent. If a customer checks in at time t1 then checks out at time t2, then t1 < t2. All events happen in chronological order.", "examples": [{"full_text": "Example 1:\nInput\n[\"UndergroundSystem\",\"checkIn\",\"checkIn\",\"checkIn\",\"checkOut\",\"checkOut\",\"checkOut\",\"getAverageTime\",\"getAverageTime\",\"checkIn\",\"getAverageTime\",\"checkOut\",\"getAverageTime\"]\n[[],[45,\"Leyton\",3],[32,\"Paradise\",8],[27,\"Leyton\",10],[45,\"Waterloo\",15],[27,\"Waterloo\",20],[32,\"Cambridge\",22],[\"Paradise\",\"Cambridge\"],[\"Leyton\",\"Waterloo\"],[10,\"Leyton\",24],[\"Leyton\",\"Waterloo\"],[10,\"Waterloo\",38],[\"Leyton\",\"Waterloo\"]]\nOutput\n[null,null,null,null,null,null,null,14.00000,11.00000,null,11.00000,null,12.00000]\nExplanation\nUndergroundSystem undergroundSystem = new UndergroundSystem();\nundergroundSystem.checkIn(45, \"Leyton\", 3);\nundergroundSystem.checkIn(32, \"Paradise\", 8);\nundergroundSystem.checkIn(27, \"Leyton\", 10);\nundergroundSystem.checkOut(45, \"Waterloo\", 15); // Customer 45 \"Leyton\" -> \"Waterloo\" in 15-3 = 12\nundergroundSystem.checkOut(27, \"Waterloo\", 20); // Customer 27 \"Leyton\" -> \"Waterloo\" in 20-10 = 10\nundergroundSystem.checkOut(32, \"Cambridge\", 22); // Customer 32 \"Paradise\" -> \"Cambridge\" in 22-8 = 14\nundergroundSystem.getAverageTime(\"Paradise\", \"Cambridge\"); // return 14.00000. One trip \"Paradise\" -> \"Cambridge\", (14) / 1 = 14\nundergroundSystem.getAverageTime(\"Leyton\", \"Waterloo\"); // return 11.00000. Two trips \"Leyton\" -> \"Waterloo\", (10 + 12) / 2 = 11\nundergroundSystem.checkIn(10, \"Leyton\", 24);\nundergroundSystem.getAverageTime(\"Leyton\", \"Waterloo\"); // return 11.00000\nundergroundSystem.checkOut(10, \"Waterloo\", 38); // Customer 10 \"Leyton\" -> \"Waterloo\" in 38-24 = 14\nundergroundSystem.getAverageTime(\"Leyton\", \"Waterloo\"); // return 12.00000. Three trips \"Leyton\" -> \"Waterloo\", (10 + 12 + 14) / 3 = 12", "input": "Input\n[\"UndergroundSystem\",\"checkIn\",\"checkIn\",\"checkIn\",\"checkOut\",\"checkOut\",\"checkOut\",\"getAverageTime\",\"getAverageTime\",\"checkIn\",\"getAverageTime\",\"checkOut\",\"getAverageTime\"]\n[[],[45,\"Leyton\",3],[32,\"Paradise\",8],[27,\"Leyton\",10],[45,\"Waterloo\",15],[27,\"Waterloo\",20],[32,\"Cambridge\",22],[\"Paradise\",\"Cambridge\"],[\"Leyton\",\"Waterloo\"],[10,\"Leyton\",24],[\"Leyton\",\"Waterloo\"],[10,\"Waterloo\",38],[\"Leyton\",\"Waterloo\"]]", "output": "Output\n[null,null,null,null,null,null,null,14.00000,11.00000,null,11.00000,null,12.00000]", "explanation": "Explanation\nUndergroundSystem undergroundSystem = new UndergroundSystem();\nundergroundSystem.checkIn(45, \"Leyton\", 3);\nundergroundSystem.checkIn(32, \"Paradise\", 8);\nundergroundSystem.checkIn(27, \"Leyton\", 10);\nundergroundSystem.checkOut(45, \"Waterloo\", 15); // Customer 45 \"Leyton\" -> \"Waterloo\" in 15-3 = 12\nundergroundSystem.checkOut(27, \"Waterloo\", 20); // Customer 27 \"Leyton\" -> \"Waterloo\" in 20-10 = 10\nundergroundSystem.checkOut(32, \"Cambridge\", 22); // Customer 32 \"Paradise\" -> \"Cambridge\" in 22-8 = 14\nundergroundSystem.getAverageTime(\"Paradise\", \"Cambridge\"); // return 14.00000. One trip \"Paradise\" -> \"Cambridge\", (14) / 1 = 14\nundergroundSystem.getAverageTime(\"Leyton\", \"Waterloo\"); // return 11.00000. Two trips \"Leyton\" -> \"Waterloo\", (10 + 12) / 2 = 11\nundergroundSystem.checkIn(10, \"Leyton\", 24);\nundergroundSystem.getAverageTime(\"Leyton\", \"Waterloo\"); // return 11.00000\nundergroundSystem.checkOut(10, \"Waterloo\", 38); // Customer 10 \"Leyton\" -> \"Waterloo\" in 38-24 = 14\nundergroundSystem.getAverageTime(\"Leyton\", \"Waterloo\"); // return 12.00000. Three trips \"Leyton\" -> \"Waterloo\", (10 + 12 + 14) / 3 = 12"}, {"full_text": "Example 2:\nInput\n[\"UndergroundSystem\",\"checkIn\",\"checkOut\",\"getAverageTime\",\"checkIn\",\"checkOut\",\"getAverageTime\",\"checkIn\",\"checkOut\",\"getAverageTime\"]\n[[],[10,\"Leyton\",3],[10,\"Paradise\",8],[\"Leyton\",\"Paradise\"],[5,\"Leyton\",10],[5,\"Paradise\",16],[\"Leyton\",\"Paradise\"],[2,\"Leyton\",21],[2,\"Paradise\",30],[\"Leyton\",\"Paradise\"]]\nOutput\n[null,null,null,5.00000,null,null,5.50000,null,null,6.66667]\nExplanation\nUndergroundSystem undergroundSystem = new UndergroundSystem();\nundergroundSystem.checkIn(10, \"Leyton\", 3);\nundergroundSystem.checkOut(10, \"Paradise\", 8); // Customer 10 \"Leyton\" -> \"Paradise\" in 8-3 = 5\nundergroundSystem.getAverageTime(\"Leyton\", \"Paradise\"); // return 5.00000, (5) / 1 = 5\nundergroundSystem.checkIn(5, \"Leyton\", 10);\nundergroundSystem.checkOut(5, \"Paradise\", 16); // Customer 5 \"Leyton\" -> \"Paradise\" in 16-10 = 6\nundergroundSystem.getAverageTime(\"Leyton\", \"Paradise\"); // return 5.50000, (5 + 6) / 2 = 5.5\nundergroundSystem.checkIn(2, \"Leyton\", 21);\nundergroundSystem.checkOut(2, \"Paradise\", 30); // Customer 2 \"Leyton\" -> \"Paradise\" in 30-21 = 9\nundergroundSystem.getAverageTime(\"Leyton\", \"Paradise\"); // return 6.66667, (5 + 6 + 9) / 3 = 6.66667", "input": "Input\n[\"UndergroundSystem\",\"checkIn\",\"checkOut\",\"getAverageTime\",\"checkIn\",\"checkOut\",\"getAverageTime\",\"checkIn\",\"checkOut\",\"getAverageTime\"]\n[[],[10,\"Leyton\",3],[10,\"Paradise\",8],[\"Leyton\",\"Paradise\"],[5,\"Leyton\",10],[5,\"Paradise\",16],[\"Leyton\",\"Paradise\"],[2,\"Leyton\",21],[2,\"Paradise\",30],[\"Leyton\",\"Paradise\"]]", "output": "Output\n[null,null,null,5.00000,null,null,5.50000,null,null,6.66667]", "explanation": "Explanation\nUndergroundSystem undergroundSystem = new UndergroundSystem();\nundergroundSystem.checkIn(10, \"Leyton\", 3);\nundergroundSystem.checkOut(10, \"Paradise\", 8); // Customer 10 \"Leyton\" -> \"Paradise\" in 8-3 = 5\nundergroundSystem.getAverageTime(\"Leyton\", \"Paradise\"); // return 5.00000, (5) / 1 = 5\nundergroundSystem.checkIn(5, \"Leyton\", 10);\nundergroundSystem.checkOut(5, \"Paradise\", 16); // Customer 5 \"Leyton\" -> \"Paradise\" in 16-10 = 6\nundergroundSystem.getAverageTime(\"Leyton\", \"Paradise\"); // return 5.50000, (5 + 6) / 2 = 5.5\nundergroundSystem.checkIn(2, \"Leyton\", 21);\nundergroundSystem.checkOut(2, \"Paradise\", 30); // Customer 2 \"Leyton\" -> \"Paradise\" in 30-21 = 9\nundergroundSystem.getAverageTime(\"Leyton\", \"Paradise\"); // return 6.66667, (5 + 6 + 9) / 3 = 6.66667"}], "constraints": "Constraints:\n1 <= id, t <= 10^6\n1 <= stationName.length, startStation.length, endStation.length <= 10\nAll strings consist of uppercase and lowercase English letters and digits.\nThere will be at most 2 * 10^4 calls in total to checkIn, checkOut, and getAverageTime.\nAnswers within 10^-5 of the actual value will be accepted.", "notes": ""}, "1395": {"label": "Medium", "title": "Count Number of Teams", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6989, "total_accepted": 81900.0, "total_submissions": 117200.0, "testcase_example": "'[2,5,3,4,1]'", "body": "There are n soldiers standing in a line. Each soldier is assigned a unique rating value.\nYou have to form a team of 3 soldiers amongst them under the following rules:\nChoose 3 soldiers with index (i, j, k) with rating (rating[i], rating[j], rating[k]).\nA team is valid if: (rating[i] < rating[j] < rating[k]) or (rating[i] > rating[j] > rating[k]) where (0 <= i < j < k < n).\nReturn the number of teams you can form given the conditions. (soldiers can be part of multiple teams).", "examples": [{"full_text": "Example 1:\nInput: rating = [2,5,3,4,1]\nOutput: 3\nExplanation: We can form three teams given the conditions. (2,3,4), (5,4,1), (5,3,1).", "input": "Input: rating = [2,5,3,4,1]", "output": "Output: 3", "explanation": "Explanation: We can form three teams given the conditions. (2,3,4), (5,4,1), (5,3,1)."}, {"full_text": "Example 2:\nInput: rating = [2,1,3]\nOutput: 0\nExplanation: We can't form any team given the conditions.", "input": "Input: rating = [2,1,3]", "output": "Output: 0", "explanation": "Explanation: We can't form any team given the conditions."}, {"full_text": "Example 3:\nInput: rating = [1,2,3,4]\nOutput: 4", "input": "Input: rating = [1,2,3,4]", "output": "Output: 4", "explanation": ""}], "constraints": "Constraints:\nn == rating.length\n3 <= n <= 1000\n1 <= rating[i] <= 10^5\nAll the integers in rating are unique.", "notes": ""}, "1391": {"label": "Medium", "title": "Check if There is a Valid Path in a Grid", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4645, "total_accepted": 19900.0, "total_submissions": 42800.0, "testcase_example": "'[[2,4,3],[6,5,2]]'", "body": "You are given an m x n grid. Each cell of grid represents a street. The street of grid[i][j] can be:\n1 which means a street connecting the left cell and the right cell.\n2 which means a street connecting the upper cell and the lower cell.\n3 which means a street connecting the left cell and the lower cell.\n4 which means a street connecting the right cell and the lower cell.\n5 which means a street connecting the left cell and the upper cell.\n6 which means a street connecting the right cell and the upper cell.\nYou will initially start at the street of the upper-left cell (0, 0). A valid path in the grid is a path that starts from the upper left cell (0, 0) and ends at the bottom-right cell (m - 1, n - 1). The path should only follow the streets.\nNotice that you are not allowed to change any street.\nReturn true if there is a valid path in the grid or false otherwise.", "examples": [{"full_text": "Example 1:\nInput: grid = [[2,4,3],[6,5,2]]\nOutput: true\nExplanation: As shown you can start at cell (0, 0) and visit all the cells of the grid to reach (m - 1, n - 1).", "input": "Input: grid = [[2,4,3],[6,5,2]]", "output": "Output: true", "explanation": "Explanation: As shown you can start at cell (0, 0) and visit all the cells of the grid to reach (m - 1, n - 1)."}, {"full_text": "Example 2:\nInput: grid = [[1,2,1],[1,2,1]]\nOutput: false\nExplanation: As shown you the street at cell (0, 0) is not connected with any street of any other cell and you will get stuck at cell (0, 0)", "input": "Input: grid = [[1,2,1],[1,2,1]]", "output": "Output: false", "explanation": "Explanation: As shown you the street at cell (0, 0) is not connected with any street of any other cell and you will get stuck at cell (0, 0)"}, {"full_text": "Example 3:\nInput: grid = [[1,1,2]]\nOutput: false\nExplanation: You will get stuck at cell (0, 1) and you cannot reach cell (0, 2).", "input": "Input: grid = [[1,1,2]]", "output": "Output: false", "explanation": "Explanation: You will get stuck at cell (0, 1) and you cannot reach cell (0, 2)."}], "constraints": "Constraints:\nm == grid.length\nn == grid[i].length\n1 <= m, n <= 300\n1 <= grid[i][j] <= 6", "notes": ""}, "1390": {"label": "Medium", "title": "Four Divisors", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4053, "total_accepted": 19200.0, "total_submissions": 47500.0, "testcase_example": "'[21,4,7]'", "body": "Given an integer array nums, return the sum of divisors of the integers in that array that have exactly four divisors. If there is no such integer in the array, return 0.", "examples": [{"full_text": "Example 1:\nInput: nums = [21,4,7]\nOutput: 32\nExplanation:\n21 has 4 divisors: 1, 3, 7, 21\n4 has 3 divisors: 1, 2, 4\n7 has 2 divisors: 1, 7\nThe answer is the sum of divisors of 21 only.", "input": "Input: nums = [21,4,7]", "output": "Output: 32", "explanation": "Explanation:\n21 has 4 divisors: 1, 3, 7, 21\n4 has 3 divisors: 1, 2, 4\n7 has 2 divisors: 1, 7\nThe answer is the sum of divisors of 21 only."}, {"full_text": "Example 2:\nInput: nums = [21,21]\nOutput: 64", "input": "Input: nums = [21,21]", "output": "Output: 64", "explanation": ""}, {"full_text": "Example 3:\nInput: nums = [1,2,3,4,5]\nOutput: 0", "input": "Input: nums = [1,2,3,4,5]", "output": "Output: 0", "explanation": ""}], "constraints": "Constraints:\n1 <= nums.length <= 10^4\n1 <= nums[i] <= 10^5", "notes": ""}, "1387": {"label": "Medium", "title": "Sort Integers by The Power Value", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7012999999999999, "total_accepted": 49100.0, "total_submissions": 70000.0, "testcase_example": "'12\\n15\\n2'", "body": "The power of an integer x is defined as the number of steps needed to transform x into 1 using the following steps:\nif x is even then x = x / 2\nif x is odd then x = 3 * x + 1\nFor example, the power of x = 3 is 7 because 3 needs 7 steps to become 1 (3 --> 10 --> 5 --> 16 --> 8 --> 4 --> 2 --> 1).\nGiven three integers lo, hi and k. The task is to sort all integers in the interval [lo, hi] by the power value in ascending order, if two or more integers have the same power value sort them by ascending order.\nReturn the k^th integer in the range [lo, hi] sorted by the power value.\nNotice that for any integer x (lo <= x <= hi) it is guaranteed that x will transform into 1 using these steps and that the power of x is will fit in a 32-bit signed integer.", "examples": [{"full_text": "Example 1:\nInput: lo = 12, hi = 15, k = 2\nOutput: 13\nExplanation: The power of 12 is 9 (12 --> 6 --> 3 --> 10 --> 5 --> 16 --> 8 --> 4 --> 2 --> 1)\nThe power of 13 is 9\nThe power of 14 is 17\nThe power of 15 is 17\nThe interval sorted by the power value [12,13,14,15]. For k = 2 answer is the second element which is 13.\nNotice that 12 and 13 have the same power value and we sorted them in ascending order. Same for 14 and 15.", "input": "Input: lo = 12, hi = 15, k = 2", "output": "Output: 13", "explanation": "Explanation: The power of 12 is 9 (12 --> 6 --> 3 --> 10 --> 5 --> 16 --> 8 --> 4 --> 2 --> 1)\nThe power of 13 is 9\nThe power of 14 is 17\nThe power of 15 is 17\nThe interval sorted by the power value [12,13,14,15]. For k = 2 answer is the second element which is 13.\nNotice that 12 and 13 have the same power value and we sorted them in ascending order. Same for 14 and 15."}, {"full_text": "Example 2:\nInput: lo = 7, hi = 11, k = 4\nOutput: 7\nExplanation: The power array corresponding to the interval [7, 8, 9, 10, 11] is [16, 3, 19, 6, 14].\nThe interval sorted by power is [8, 10, 11, 7, 9].\nThe fourth number in the sorted array is 7.", "input": "Input: lo = 7, hi = 11, k = 4", "output": "Output: 7", "explanation": "Explanation: The power array corresponding to the interval [7, 8, 9, 10, 11] is [16, 3, 19, 6, 14].\nThe interval sorted by power is [8, 10, 11, 7, 9].\nThe fourth number in the sorted array is 7."}], "constraints": "Constraints:\n1 <= lo <= hi <= 1000\n1 <= k <= hi - lo + 1", "notes": ""}, "1386": {"label": "Medium", "title": "Cinema Seat Allocation", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3887, "total_accepted": 19900.0, "total_submissions": 51200.0, "testcase_example": "'3\\n[[1,2],[1,3],[1,8],[2,6],[3,1],[3,10]]'", "body": "A cinema\nhas n\nrows of seats, numbered from 1 to n\nand there are ten\nseats in each row, labelled from 1\nto 10\nas shown in the figure above.\nGiven the array reservedSeats containing the numbers of seats already reserved, for example, reservedSeats[i] = [3,8]\nmeans the seat located in row 3 and labelled with 8\nis already reserved.\nReturn the maximum number of four-person groups\nyou can assign on the cinema\nseats. A four-person group\noccupies four\nadjacent seats in one single row. Seats across an aisle (such as [3,3]\nand [3,4]) are not considered to be adjacent, but there is an exceptional case\non which an aisle split\na four-person group, in that case, the aisle split\na four-person group in the middle,\nwhich means to have two people on each side.", "examples": [{"full_text": "Example 1:\nInput: n = 3, reservedSeats = [[1,2],[1,3],[1,8],[2,6],[3,1],[3,10]]\nOutput: 4\nExplanation: The figure above shows the optimal allocation for four groups, where seats mark with blue are already reserved and contiguous seats mark with orange are for one group.", "input": "Input: n = 3, reservedSeats = [[1,2],[1,3],[1,8],[2,6],[3,1],[3,10]]", "output": "Output: 4", "explanation": "Explanation: The figure above shows the optimal allocation for four groups, where seats mark with blue are already reserved and contiguous seats mark with orange are for one group."}, {"full_text": "Example 2:\nInput: n = 2, reservedSeats = [[2,1],[1,8],[2,6]]\nOutput: 2", "input": "Input: n = 2, reservedSeats = [[2,1],[1,8],[2,6]]", "output": "Output: 2", "explanation": ""}, {"full_text": "Example 3:\nInput: n = 4, reservedSeats = [[4,3],[1,4],[4,6],[1,7]]\nOutput: 4", "input": "Input: n = 4, reservedSeats = [[4,3],[1,4],[4,6],[1,7]]", "output": "Output: 4", "explanation": ""}], "constraints": "Constraints:\n1 <= n <= 10^9\n1 <=\nreservedSeats.length <= min(10*n, 10^4)\nreservedSeats[i].length == 2\n1\n<=\nreservedSeats[i][0] <= n\n1 <=\nreservedSeats[i][1] <= 10\nAll reservedSeats[i] are distinct.", "notes": ""}, "1382": {"label": "Medium", "title": "Balance a Binary Search Tree", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7994, "total_accepted": 81800.0, "total_submissions": 102300.0, "testcase_example": "'[1,null,2,null,3,null,4]'", "body": "Given the root of a binary search tree, return a balanced binary search tree with the same node values. If there is more than one answer, return any of them.\nA binary search tree is balanced if the depth of the two subtrees of every node never differs by more than 1.", "examples": [{"full_text": "Example 1:\nInput: root = [1,null,2,null,3,null,4,null,null]\nOutput: [2,1,3,null,null,null,4]\nExplanation: This is not the only correct answer, [3,1,4,null,2] is also correct.", "input": "Input: root = [1,null,2,null,3,null,4,null,null]", "output": "Output: [2,1,3,null,null,null,4]", "explanation": "Explanation: This is not the only correct answer, [3,1,4,null,2] is also correct."}, {"full_text": "Example 2:\nInput: root = [2,1,3]\nOutput: [2,1,3]", "input": "Input: root = [2,1,3]", "output": "Output: [2,1,3]", "explanation": ""}], "constraints": "Constraints:\nThe number of nodes in the tree is in the range [1, 10^4].\n1 <= Node.val <= 10^5", "notes": ""}, "1381": {"label": "Medium", "title": "Design a Stack With Increment Operation", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7706999999999999, "total_accepted": 62600.0, "total_submissions": 81300.0, "testcase_example": "'[\"CustomStack\",\"push\",\"push\",\"pop\",\"push\",\"push\",\"push\",\"increment\",\"increment\",\"pop\",\"pop\",\"pop\",\"pop\"]\\n' +\n  '[[3],[1],[2],[],[2],[3],[4],[5,100],[2,100],[],[],[],[]]'", "body": "Design a stack which supports the following operations.\nImplement the CustomStack class:\nCustomStack(int maxSize) Initializes the object with maxSize which is the maximum number of elements in the stack or do nothing if the stack reached the maxSize.\nvoid push(int x)\nAdds x to the top of the stack if the stack hasn't reached the maxSize.\nint pop()\nPops and returns the top of stack or -1 if the stack is empty.\nvoid inc(int k, int val) Increments the bottom k elements of the stack by val. If there are less than k elements in the stack, just increment all the elements in the stack.", "examples": [{"full_text": "Example 1:\nInput\n[\"CustomStack\",\"push\",\"push\",\"pop\",\"push\",\"push\",\"push\",\"increment\",\"increment\",\"pop\",\"pop\",\"pop\",\"pop\"]\n[[3],[1],[2],[],[2],[3],[4],[5,100],[2,100],[],[],[],[]]\nOutput\n[null,null,null,2,null,null,null,null,null,103,202,201,-1]\nExplanation\nCustomStack customStack = new CustomStack(3); // Stack is Empty []\ncustomStack.push(1); // stack becomes [1]\ncustomStack.push(2); // stack becomes [1, 2]\ncustomStack.pop(); // return 2 --> Return top of the stack 2, stack becomes [1]\ncustomStack.push(2); // stack becomes [1, 2]\ncustomStack.push(3); // stack becomes [1, 2, 3]\ncustomStack.push(4); // stack still [1, 2, 3], Don't add another elements as size is 4\ncustomStack.increment(5, 100); // stack becomes [101, 102, 103]\ncustomStack.increment(2, 100); // stack becomes [201, 202, 103]\ncustomStack.pop(); // return 103 --> Return top of the stack 103, stack becomes [201, 202]\ncustomStack.pop(); // return 202 --> Return top of the stack 102, stack becomes [201]\ncustomStack.pop(); // return 201 --> Return top of the stack 101, stack becomes []\ncustomStack.pop(); // return -1 --> Stack is empty return -1.", "input": "Input\n[\"CustomStack\",\"push\",\"push\",\"pop\",\"push\",\"push\",\"push\",\"increment\",\"increment\",\"pop\",\"pop\",\"pop\",\"pop\"]\n[[3],[1],[2],[],[2],[3],[4],[5,100],[2,100],[],[],[],[]]", "output": "Output\n[null,null,null,2,null,null,null,null,null,103,202,201,-1]", "explanation": "Explanation\nCustomStack customStack = new CustomStack(3); // Stack is Empty []\ncustomStack.push(1); // stack becomes [1]\ncustomStack.push(2); // stack becomes [1, 2]\ncustomStack.pop(); // return 2 --> Return top of the stack 2, stack becomes [1]\ncustomStack.push(2); // stack becomes [1, 2]\ncustomStack.push(3); // stack becomes [1, 2, 3]\ncustomStack.push(4); // stack still [1, 2, 3], Don't add another elements as size is 4\ncustomStack.increment(5, 100); // stack becomes [101, 102, 103]\ncustomStack.increment(2, 100); // stack becomes [201, 202, 103]\ncustomStack.pop(); // return 103 --> Return top of the stack 103, stack becomes [201, 202]\ncustomStack.pop(); // return 202 --> Return top of the stack 102, stack becomes [201]\ncustomStack.pop(); // return 201 --> Return top of the stack 101, stack becomes []\ncustomStack.pop(); // return -1 --> Stack is empty return -1."}], "constraints": "Constraints:\n1 <= maxSize <= 1000\n1 <= x <= 1000\n1 <= k <= 1000\n0 <= val <= 100\nAt most\n1000\ncalls will be made to each method of increment, push and pop each separately.", "notes": ""}, "1379": {"label": "Medium", "title": "Find a Corresponding Node of a Binary Tree in a Clone of That Tree", "tags": "algorithms", "langs": "cpp,csharp,java,javascript,python,python3,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.8538, "total_accepted": 98300.0, "total_submissions": 115100.0, "testcase_example": "'[7,4,3,null,null,6,19]\\n3'", "body": "Given two binary trees original and cloned and given a reference to a node target in the original tree.\nThe cloned tree is a copy of the original tree.\nReturn a reference to the same node in the cloned tree.\nNote that you are not allowed to change any of the two trees or the target node and the answer must be a reference to a node in the cloned tree.", "examples": [{"full_text": "Example 1:\nInput: tree = [7,4,3,null,null,6,19], target = 3\nOutput: 3\nExplanation: In all examples the original and cloned trees are shown. The target node is a green node from the original tree. The answer is the yellow node from the cloned tree.", "input": "Input: tree = [7,4,3,null,null,6,19], target = 3", "output": "Output: 3", "explanation": "Explanation: In all examples the original and cloned trees are shown. The target node is a green node from the original tree. The answer is the yellow node from the cloned tree."}, {"full_text": "Example 2:\nInput: tree = [7], target = 7\nOutput: 7", "input": "Input: tree = [7], target = 7", "output": "Output: 7", "explanation": ""}, {"full_text": "Example 3:\nInput: tree = [8,null,6,null,5,null,4,null,3,null,2,null,1], target = 4\nOutput: 4", "input": "Input: tree = [8,null,6,null,5,null,4,null,3,null,2,null,1], target = 4", "output": "Output: 4", "explanation": ""}], "constraints": "Constraints:\nThe number of nodes in the tree is in the range [1, 10^4].\nThe values of the nodes of the tree are unique.\ntarget node is a node from the original tree and is not null.\nFollow up: Could you solve the problem if repeated values on the tree are allowed?", "notes": ""}, "1376": {"label": "Medium", "title": "Time Needed to Inform All Employees", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5789, "total_accepted": 78400.0, "total_submissions": 135400.0, "testcase_example": "'1\\n0\\n[-1]\\n[0]'", "body": "A company has n employees with a unique ID for each employee from 0 to n - 1. The head of the company is the one with headID.\nEach employee has one direct manager given in the manager array where manager[i] is the direct manager of the i-th employee, manager[headID] = -1. Also, it is guaranteed that the subordination relationships have a tree structure.\nThe head of the company wants to inform all the company employees of an urgent piece of news. He will inform his direct subordinates, and they will inform their subordinates, and so on until all employees know about the urgent news.\nThe i-th employee needs informTime[i] minutes to inform all of his direct subordinates (i.e., After informTime[i] minutes, all his direct subordinates can start spreading the news).\nReturn the number of minutes needed to inform all the employees about the urgent news.", "examples": [{"full_text": "Example 1:\nInput: n = 1, headID = 0, manager = [-1], informTime = [0]\nOutput: 0\nExplanation: The head of the company is the only employee in the company.", "input": "Input: n = 1, headID = 0, manager = [-1], informTime = [0]", "output": "Output: 0", "explanation": "Explanation: The head of the company is the only employee in the company."}, {"full_text": "Example 2:\nInput: n = 6, headID = 2, manager = [2,2,-1,2,2,2], informTime = [0,0,1,0,0,0]\nOutput: 1\nExplanation: The head of the company with id = 2 is the direct manager of all the employees in the company and needs 1 minute to inform them all.\nThe tree structure of the employees in the company is shown.", "input": "Input: n = 6, headID = 2, manager = [2,2,-1,2,2,2], informTime = [0,0,1,0,0,0]", "output": "Output: 1", "explanation": "Explanation: The head of the company with id = 2 is the direct manager of all the employees in the company and needs 1 minute to inform them all.\nThe tree structure of the employees in the company is shown."}], "constraints": "Constraints:\n1 <= n <= 10^5\n0 <= headID < n\nmanager.length == n\n0 <= manager[i] < n\nmanager[headID] == -1\ninformTime.length == n\n0 <= informTime[i] <= 1000\ninformTime[i] == 0 if employee i has no subordinates.\nIt is guaranteed that all the employees can be informed.", "notes": ""}, "1375": {"label": "Medium", "title": "Number of Times Binary String Is Prefix-Aligned", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6546, "total_accepted": 37500.0, "total_submissions": 57200.0, "testcase_example": "'[3,2,4,1,5]'", "body": "You have a 1-indexed binary string of length n where all the bits are 0 initially. We will flip all the bits of this binary string (i.e., change them from 0 to 1) one by one. You are given a 1-indexed integer array flips where flips[i] indicates that the bit at index i will be flipped in the i^th step.\nA binary string is prefix-aligned if, after the i^th step, all the bits in the inclusive range [1, i] are ones and all the other bits are zeros.\nReturn the number of times the binary string is prefix-aligned during the flipping process.", "examples": [{"full_text": "Example 1:\nInput: flips = [3,2,4,1,5]\nOutput: 2\nExplanation: The binary string is initially \"00000\".\nAfter applying step 1: The string becomes \"00100\", which is not prefix-aligned.\nAfter applying step 2: The string becomes \"01100\", which is not prefix-aligned.\nAfter applying step 3: The string becomes \"01110\", which is not prefix-aligned.\nAfter applying step 4: The string becomes \"11110\", which is prefix-aligned.\nAfter applying step 5: The string becomes \"11111\", which is prefix-aligned.\nWe can see that the string was prefix-aligned 2 times, so we return 2.", "input": "Input: flips = [3,2,4,1,5]", "output": "Output: 2", "explanation": "Explanation: The binary string is initially \"00000\".\nAfter applying step 1: The string becomes \"00100\", which is not prefix-aligned.\nAfter applying step 2: The string becomes \"01100\", which is not prefix-aligned.\nAfter applying step 3: The string becomes \"01110\", which is not prefix-aligned.\nAfter applying step 4: The string becomes \"11110\", which is prefix-aligned.\nAfter applying step 5: The string becomes \"11111\", which is prefix-aligned.\nWe can see that the string was prefix-aligned 2 times, so we return 2."}, {"full_text": "Example 2:\nInput: flips = [4,1,2,3]\nOutput: 1\nExplanation: The binary string is initially \"0000\".\nAfter applying step 1: The string becomes \"0001\", which is not prefix-aligned.\nAfter applying step 2: The string becomes \"1001\", which is not prefix-aligned.\nAfter applying step 3: The string becomes \"1101\", which is not prefix-aligned.\nAfter applying step 4: The string becomes \"1111\", which is prefix-aligned.\nWe can see that the string was prefix-aligned 1 time, so we return 1.", "input": "Input: flips = [4,1,2,3]", "output": "Output: 1", "explanation": "Explanation: The binary string is initially \"0000\".\nAfter applying step 1: The string becomes \"0001\", which is not prefix-aligned.\nAfter applying step 2: The string becomes \"1001\", which is not prefix-aligned.\nAfter applying step 3: The string becomes \"1101\", which is not prefix-aligned.\nAfter applying step 4: The string becomes \"1111\", which is prefix-aligned.\nWe can see that the string was prefix-aligned 1 time, so we return 1."}], "constraints": "Constraints:\nn == flips.length\n1 <= n <= 5 * 10^4\nflips is a permutation of the integers in the range [1, n].", "notes": ""}, "1372": {"label": "Medium", "title": "Longest ZigZag Path in a Binary Tree", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5744, "total_accepted": 30600.0, "total_submissions": 53200.0, "testcase_example": "'[1,null,1,1,1,null,null,1,1,null,1,null,null,null,1,null,1]'", "body": "You are given the root of a binary tree.\nA ZigZag path for a binary tree is defined as follow:\nChoose any node in the binary tree and a direction (right or left).\nIf the current direction is right, move to the right child of the current node; otherwise, move to the left child.\nChange the direction from right to left or from left to right.\nRepeat the second and third steps until you can't move in the tree.\nZigzag length is defined as the number of nodes visited - 1. (A single node has a length of 0).\nReturn the longest ZigZag path contained in that tree.", "examples": [{"full_text": "Example 1:\nInput: root = [1,null,1,1,1,null,null,1,1,null,1,null,null,null,1,null,1]\nOutput: 3\nExplanation: Longest ZigZag path in blue nodes (right -> left -> right).", "input": "Input: root = [1,null,1,1,1,null,null,1,1,null,1,null,null,null,1,null,1]", "output": "Output: 3", "explanation": "Explanation: Longest ZigZag path in blue nodes (right -> left -> right)."}, {"full_text": "Example 2:\nInput: root = [1,1,1,null,1,null,null,1,1,null,1]\nOutput: 4\nExplanation: Longest ZigZag path in blue nodes (left -> right -> left -> right).", "input": "Input: root = [1,1,1,null,1,null,null,1,1,null,1]", "output": "Output: 4", "explanation": "Explanation: Longest ZigZag path in blue nodes (left -> right -> left -> right)."}, {"full_text": "Example 3:\nInput: root = [1]\nOutput: 0", "input": "Input: root = [1]", "output": "Output: 0", "explanation": ""}], "constraints": "Constraints:\nThe number of nodes in the tree is in the range [1, 5 * 10^4].\n1 <= Node.val <= 100", "notes": ""}, "1371": {"label": "Medium", "title": "Find the Longest Substring Containing Vowels in Even Counts", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6228, "total_accepted": 17500.0, "total_submissions": 28100.0, "testcase_example": "'\"eleetminicoworoep\"'", "body": "Given the string s, return the size of the longest substring containing each vowel an even number of times. That is, 'a', 'e', 'i', 'o', and 'u' must appear an even number of times.", "examples": [{"full_text": "Example 1:\nInput: s = \"eleetminicoworoep\"\nOutput: 13\nExplanation: The longest substring is \"leetminicowor\" which contains two each of the vowels: e, i and o and zero of the vowels: a and u.", "input": "Input: s = \"eleetminicoworoep\"", "output": "Output: 13", "explanation": "Explanation: The longest substring is \"leetminicowor\" which contains two each of the vowels: e, i and o and zero of the vowels: a and u."}, {"full_text": "Example 2:\nInput: s = \"leetcodeisgreat\"\nOutput: 5\nExplanation: The longest substring is \"leetc\" which contains two e's.", "input": "Input: s = \"leetcodeisgreat\"", "output": "Output: 5", "explanation": "Explanation: The longest substring is \"leetc\" which contains two e's."}, {"full_text": "Example 3:\nInput: s = \"bcbcbc\"\nOutput: 6\nExplanation: In this case, the given string \"bcbcbc\" is the longest because all vowels: a, e, i, o and u appear zero times.", "input": "Input: s = \"bcbcbc\"", "output": "Output: 6", "explanation": "Explanation: In this case, the given string \"bcbcbc\" is the longest because all vowels: a, e, i, o and u appear zero times."}], "constraints": "Constraints:\n1 <= s.length <= 5 x 10^5\ns\ncontains only lowercase English letters.", "notes": ""}, "1367": {"label": "Medium", "title": "Linked List in Binary Tree", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4236, "total_accepted": 42900.0, "total_submissions": 101300.0, "testcase_example": "'[4,2,8]\\n[1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3]'", "body": "Given a binary tree root and a\nlinked list with\nhead\nas the first node.\nReturn True if all the elements in the linked list starting from the head correspond to some downward path connected in the binary tree\notherwise return False.\nIn this context downward path means a path that starts at some node and goes downwards.", "examples": [{"full_text": "Example 1:\nInput: head = [4,2,8], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3]\nOutput: true\nExplanation: Nodes in blue form a subpath in the binary Tree.", "input": "Input: head = [4,2,8], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3]", "output": "Output: true", "explanation": "Explanation: Nodes in blue form a subpath in the binary Tree."}, {"full_text": "Example 2:\nInput: head = [1,4,2,6], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3]\nOutput: true", "input": "Input: head = [1,4,2,6], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3]", "output": "Output: true", "explanation": ""}, {"full_text": "Example 3:\nInput: head = [1,4,2,6,8], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3]\nOutput: false\nExplanation: There is no path in the binary tree that contains all the elements of the linked list from head.", "input": "Input: head = [1,4,2,6,8], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3]", "output": "Output: false", "explanation": "Explanation: There is no path in the binary tree that contains all the elements of the linked list from head."}], "constraints": "Constraints:\nThe number of nodes in the tree will be in the range [1, 2500].\nThe number of nodes in the list will be in the range [1, 100].\n1 <= Node.val\n<= 100\nfor each node in the linked list and binary tree.", "notes": ""}, "1366": {"label": "Medium", "title": "Rank Teams by Votes", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5861999999999999, "total_accepted": 33100.0, "total_submissions": 56400.0, "testcase_example": "'[\"ABC\",\"ACB\",\"ABC\",\"ACB\",\"ACB\"]'", "body": "In a special ranking system, each voter gives a rank from highest to lowest to all teams participated in the competition.\nThe ordering of teams is decided by who received the most position-one votes. If two or more teams tie in the first position, we consider the second position to resolve the conflict, if they tie again, we continue this process until the ties are resolved. If two or more teams are still tied after considering all positions, we rank them alphabetically based on their team letter.\nGiven an array of strings votes which is the votes of all voters in the ranking systems. Sort all teams according to the ranking system described above.\nReturn a string of all teams sorted by the ranking system.", "examples": [{"full_text": "Example 1:\nInput: votes = [\"ABC\",\"ACB\",\"ABC\",\"ACB\",\"ACB\"]\nOutput: \"ACB\"\nExplanation: Team A was ranked first place by 5 voters. No other team was voted as first place so team A is the first team.\nTeam B was ranked second by 2 voters and was ranked third by 3 voters.\nTeam C was ranked second by 3 voters and was ranked third by 2 voters.\nAs most of the voters ranked C second, team C is the second team and team B is the third.", "input": "Input: votes = [\"ABC\",\"ACB\",\"ABC\",\"ACB\",\"ACB\"]", "output": "Output: \"ACB\"", "explanation": "Explanation: Team A was ranked first place by 5 voters. No other team was voted as first place so team A is the first team.\nTeam B was ranked second by 2 voters and was ranked third by 3 voters.\nTeam C was ranked second by 3 voters and was ranked third by 2 voters.\nAs most of the voters ranked C second, team C is the second team and team B is the third."}, {"full_text": "Example 2:\nInput: votes = [\"WXYZ\",\"XYZW\"]\nOutput: \"XWYZ\"\nExplanation: X is the winner due to tie-breaking rule. X has same votes as W for the first position but X has one vote as second position while W doesn't have any votes as second position.", "input": "Input: votes = [\"WXYZ\",\"XYZW\"]", "output": "Output: \"XWYZ\"", "explanation": "Explanation: X is the winner due to tie-breaking rule. X has same votes as W for the first position but X has one vote as second position while W doesn't have any votes as second position."}, {"full_text": "Example 3:\nInput: votes = [\"ZMNAGUEDSJYLBOPHRQICWFXTVK\"]\nOutput: \"ZMNAGUEDSJYLBOPHRQICWFXTVK\"\nExplanation: Only one voter so his votes are used for the ranking.", "input": "Input: votes = [\"ZMNAGUEDSJYLBOPHRQICWFXTVK\"]", "output": "Output: \"ZMNAGUEDSJYLBOPHRQICWFXTVK\"", "explanation": "Explanation: Only one voter so his votes are used for the ranking."}], "constraints": "Constraints:\n1 <= votes.length <= 1000\n1 <= votes[i].length <= 26\nvotes[i].length == votes[j].length for 0 <= i, j < votes.length.\nvotes[i][j] is an English uppercase letter.\nAll characters of votes[i] are unique.\nAll the characters that occur in votes[0] also occur in votes[j] where 1 <= j < votes.length.", "notes": ""}, "1362": {"label": "Medium", "title": "Closest Divisors", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5904, "total_accepted": 15000.0, "total_submissions": 25300.0, "testcase_example": "'8'", "body": "Given an integer num, find the closest two integers in absolute difference whose product equals\nnum + 1\nor num + 2.\nReturn the two integers in any order.", "examples": [{"full_text": "Example 1:\nInput: num = 8\nOutput: [3,3]\nExplanation: For num + 1 = 9, the closest divisors are 3 & 3, for num + 2 = 10, the closest divisors are 2 & 5, hence 3 & 3 is chosen.", "input": "Input: num = 8", "output": "Output: [3,3]", "explanation": "Explanation: For num + 1 = 9, the closest divisors are 3 & 3, for num + 2 = 10, the closest divisors are 2 & 5, hence 3 & 3 is chosen."}, {"full_text": "Example 2:\nInput: num = 123\nOutput: [5,25]", "input": "Input: num = 123", "output": "Output: [5,25]", "explanation": ""}, {"full_text": "Example 3:\nInput: num = 999\nOutput: [40,25]", "input": "Input: num = 999", "output": "Output: [40,25]", "explanation": ""}], "constraints": "Constraints:\n1 <= num <= 10^9", "notes": ""}, "1361": {"label": "Medium", "title": "Validate Binary Tree Nodes", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4171, "total_accepted": 32800.0, "total_submissions": 78700.0, "testcase_example": "'4\\n[1,-1,3,-1]\\n[2,-1,-1,-1]'", "body": "You have n binary tree nodes numbered from 0 to n - 1 where node i has two children leftChild[i] and rightChild[i], return true if and only if all the given nodes form exactly one valid binary tree.\nIf node i has no left child then leftChild[i] will equal -1, similarly for the right child.\nNote that the nodes have no values and that we only use the node numbers in this problem.", "examples": [{"full_text": "Example 1:\nInput: n = 4, leftChild = [1,-1,3,-1], rightChild = [2,-1,-1,-1]\nOutput: true", "input": "Input: n = 4, leftChild = [1,-1,3,-1], rightChild = [2,-1,-1,-1]", "output": "Output: true", "explanation": ""}, {"full_text": "Example 2:\nInput: n = 4, leftChild = [1,-1,3,-1], rightChild = [2,3,-1,-1]\nOutput: false", "input": "Input: n = 4, leftChild = [1,-1,3,-1], rightChild = [2,3,-1,-1]", "output": "Output: false", "explanation": ""}, {"full_text": "Example 3:\nInput: n = 2, leftChild = [1,0], rightChild = [-1,-1]\nOutput: false", "input": "Input: n = 2, leftChild = [1,0], rightChild = [-1,-1]", "output": "Output: false", "explanation": ""}], "constraints": "Constraints:\nn == leftChild.length == rightChild.length\n1 <= n <= 10^4\n-1 <= leftChild[i], rightChild[i] <= n - 1", "notes": ""}, "1358": {"label": "Medium", "title": "Number of Substrings Containing All Three Characters", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6204, "total_accepted": 33500.0, "total_submissions": 53900.0, "testcase_example": "'\"abcabc\"'", "body": "Given a string s\nconsisting only of characters a, b and c.\nReturn the number of substrings containing at least\none occurrence of all these characters a, b and c.", "examples": [{"full_text": "Example 1:\nInput: s = \"abcabc\"\nOutput: 10\nExplanation: The substrings containing\nat least\none occurrence of the characters\na,\nb\nand\nc are \"abc\", \"abca\", \"abcab\", \"abcabc\", \"bca\", \"bcab\", \"bcabc\", \"cab\", \"cabc\" and \"abc\" (again).", "input": "Input: s = \"abcabc\"", "output": "Output: 10", "explanation": "Explanation: The substrings containing\nat least\none occurrence of the characters\na,\nb\nand\nc are \"abc\", \"abca\", \"abcab\", \"abcabc\", \"bca\", \"bcab\", \"bcabc\", \"cab\", \"cabc\" and \"abc\" (again)."}, {"full_text": "Example 2:\nInput: s = \"aaacb\"\nOutput: 3\nExplanation: The substrings containing\nat least\none occurrence of the characters\na,\nb\nand\nc are \"aaacb\", \"aacb\" and \"acb\".", "input": "Input: s = \"aaacb\"", "output": "Output: 3", "explanation": "Explanation: The substrings containing\nat least\none occurrence of the characters\na,\nb\nand\nc are \"aaacb\", \"aacb\" and \"acb\"."}, {"full_text": "Example 3:\nInput: s = \"abc\"\nOutput: 1", "input": "Input: s = \"abc\"", "output": "Output: 1", "explanation": ""}], "constraints": "Constraints:\n3 <= s.length <= 5 x 10^4\ns\nonly consists of\na, b or c\ncharacters.", "notes": ""}, "1357": {"label": "Medium", "title": "Apply Discount Every n Orders", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6851, "total_accepted": 13800.0, "total_submissions": 20100.0, "testcase_example": "'[\"Cashier\",\"getBill\",\"getBill\",\"getBill\",\"getBill\",\"getBill\",\"getBill\",\"getBill\"]\\n' +\n  '[[3,50,[1,2,3,4,5,6,7],[100,200,300,400,300,200,100]],[[1,2],[1,2]],[[3,7],[10,10]],[[1,2,3,4,5,6,7],[1,1,1,1,1,1,1]],[[4],[10]],[[7,3],[10,10]],[[7,5,3,1,6,4,2],[10,10,10,9,9,9,7]],[[2,3,5],[5,3,2]]]'", "body": "There is a supermarket that is frequented by many customers. The products sold at the supermarket are represented as two parallel integer arrays products and prices, where the i^th product has an ID of products[i] and a price of prices[i].\nWhen a customer is paying, their bill is represented as two parallel integer arrays product and amount, where the j^th product they purchased has an ID of product[j], and amount[j] is how much of the product they bought. Their subtotal is calculated as the sum of each amount[j] * (price of the j^th product).\nThe supermarket decided to have a sale. Every n^th customer paying for their groceries will be given a percentage discount. The discount amount is given by discount, where they will be given discount percent off their subtotal. More formally, if their subtotal is bill, then they would actually pay bill * ((100 - discount) / 100).\nImplement the Cashier class:\nCashier(int n, int discount, int[] products, int[] prices) Initializes the object with n, the discount, and the products and their prices.\ndouble getBill(int[] product, int[] amount) Returns the final total of the bill with the discount applied (if any). Answers within 10^-5 of the actual value will be accepted.", "examples": [{"full_text": "Example 1:\nInput\n[\"Cashier\",\"getBill\",\"getBill\",\"getBill\",\"getBill\",\"getBill\",\"getBill\",\"getBill\"]\n[[3,50,[1,2,3,4,5,6,7],[100,200,300,400,300,200,100]],[[1,2],[1,2]],[[3,7],[10,10]],[[1,2,3,4,5,6,7],[1,1,1,1,1,1,1]],[[4],[10]],[[7,3],[10,10]],[[7,5,3,1,6,4,2],[10,10,10,9,9,9,7]],[[2,3,5],[5,3,2]]]\nOutput\n[null,500.0,4000.0,800.0,4000.0,4000.0,7350.0,2500.0]\nExplanation\nCashier cashier = new Cashier(3,50,[1,2,3,4,5,6,7],[100,200,300,400,300,200,100]);\ncashier.getBill([1,2],[1,2]); // return 500.0. 1^st customer, no discount.\n// bill = 1 * 100 + 2 * 200 = 500.\ncashier.getBill([3,7],[10,10]); // return 4000.0. 2^nd customer, no discount.\n// bill = 10 * 300 + 10 * 100 = 4000.\ncashier.getBill([1,2,3,4,5,6,7],[1,1,1,1,1,1,1]); // return 800.0. 3^rd customer, 50% discount.\n// Original bill = 1600\n// Actual bill = 1600 * ((100 - 50) / 100) = 800.\ncashier.getBill([4],[10]); // return 4000.0. 4^th customer, no discount.\ncashier.getBill([7,3],[10,10]); // return 4000.0. 5^th customer, no discount.\ncashier.getBill([7,5,3,1,6,4,2],[10,10,10,9,9,9,7]); // return 7350.0. 6^th customer, 50% discount.\n// Original bill = 14700, but with\n// Actual bill = 14700 * ((100 - 50) / 100) = 7350.\ncashier.getBill([2,3,5],[5,3,2]); // return 2500.0. 6^th customer, no discount.", "input": "Input\n[\"Cashier\",\"getBill\",\"getBill\",\"getBill\",\"getBill\",\"getBill\",\"getBill\",\"getBill\"]\n[[3,50,[1,2,3,4,5,6,7],[100,200,300,400,300,200,100]],[[1,2],[1,2]],[[3,7],[10,10]],[[1,2,3,4,5,6,7],[1,1,1,1,1,1,1]],[[4],[10]],[[7,3],[10,10]],[[7,5,3,1,6,4,2],[10,10,10,9,9,9,7]],[[2,3,5],[5,3,2]]]", "output": "Output\n[null,500.0,4000.0,800.0,4000.0,4000.0,7350.0,2500.0]", "explanation": "Explanation\nCashier cashier = new Cashier(3,50,[1,2,3,4,5,6,7],[100,200,300,400,300,200,100]);\ncashier.getBill([1,2],[1,2]); // return 500.0. 1^st customer, no discount.\n// bill = 1 * 100 + 2 * 200 = 500.\ncashier.getBill([3,7],[10,10]); // return 4000.0. 2^nd customer, no discount.\n// bill = 10 * 300 + 10 * 100 = 4000.\ncashier.getBill([1,2,3,4,5,6,7],[1,1,1,1,1,1,1]); // return 800.0. 3^rd customer, 50% discount.\n// Original bill = 1600\n// Actual bill = 1600 * ((100 - 50) / 100) = 800.\ncashier.getBill([4],[10]); // return 4000.0. 4^th customer, no discount.\ncashier.getBill([7,3],[10,10]); // return 4000.0. 5^th customer, no discount.\ncashier.getBill([7,5,3,1,6,4,2],[10,10,10,9,9,9,7]); // return 7350.0. 6^th customer, 50% discount.\n// Original bill = 14700, but with\n// Actual bill = 14700 * ((100 - 50) / 100) = 7350.\ncashier.getBill([2,3,5],[5,3,2]); // return 2500.0. 6^th customer, no discount."}], "constraints": "Constraints:\n1 <= n <= 10^4\n0 <= discount <= 100\n1 <= products.length <= 200\nprices.length == products.length\n1 <= products[i] <= 200\n1 <= prices[i] <= 1000\nThe elements in products are unique.\n1 <= product.length <= products.length\namount.length == product.length\nproduct[j] exists in products.\n1 <= amount[j] <= 1000\nThe elements of product are unique.\nAt most 1000 calls will be made to getBill.\nAnswers within 10^-5 of the actual value will be accepted.", "notes": ""}, "1353": {"label": "Medium", "title": "Maximum Number of Events That Can Be Attended", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3325, "total_accepted": 50000.0, "total_submissions": 150400.0, "testcase_example": "'[[1,2],[2,3],[3,4]]'", "body": "You are given an array of events where events[i] = [startDayi, endDayi]. Every event i starts at startDayi and ends at endDayi.\nYou can attend an event i at any day d where startTimei <= d <= endTimei. You can only attend one event at any time d.\nReturn the maximum number of events you can attend.", "examples": [{"full_text": "Example 1:\nInput: events = [[1,2],[2,3],[3,4]]\nOutput: 3\nExplanation: You can attend all the three events.\nOne way to attend them all is as shown.\nAttend the first event on day 1.\nAttend the second event on day 2.\nAttend the third event on day 3.", "input": "Input: events = [[1,2],[2,3],[3,4]]", "output": "Output: 3", "explanation": "Explanation: You can attend all the three events.\nOne way to attend them all is as shown.\nAttend the first event on day 1.\nAttend the second event on day 2.\nAttend the third event on day 3."}, {"full_text": "Example 2:\nInput: events= [[1,2],[2,3],[3,4],[1,2]]\nOutput: 4", "input": "Input: events= [[1,2],[2,3],[3,4],[1,2]]", "output": "Output: 4", "explanation": ""}], "constraints": "Constraints:\n1 <= events.length <= 10^5\nevents[i].length == 2\n1 <= startDayi <= endDayi <= 10^5", "notes": ""}, "1352": {"label": "Medium", "title": "Product of the Last K Numbers", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4744, "total_accepted": 44200.0, "total_submissions": 93200.0, "testcase_example": "'[\"ProductOfNumbers\",\"add\",\"add\",\"add\",\"add\",\"add\",\"getProduct\",\"getProduct\",\"getProduct\",\"add\",\"getProduct\"]\\n' +\n  '[[],[3],[0],[2],[5],[4],[2],[3],[4],[8],[2]]'", "body": "Design an algorithm that accepts a stream of integers and retrieves the product of the last k integers of the stream.\nImplement the ProductOfNumbers class:\nProductOfNumbers() Initializes the object with an empty stream.\nvoid add(int num) Appends the integer num to the stream.\nint getProduct(int k) Returns the product of the last k numbers in the current list. You can assume that always the current list has at least k numbers.\nThe test cases are generated so that, at any time, the product of any contiguous sequence of numbers will fit into a single 32-bit integer without overflowing.", "examples": [{"full_text": "Example:\nInput\n[\"ProductOfNumbers\",\"add\",\"add\",\"add\",\"add\",\"add\",\"getProduct\",\"getProduct\",\"getProduct\",\"add\",\"getProduct\"]\n[[],[3],[0],[2],[5],[4],[2],[3],[4],[8],[2]]\nOutput\n[null,null,null,null,null,null,20,40,0,null,32]\nExplanation\nProductOfNumbers productOfNumbers = new ProductOfNumbers();\nproductOfNumbers.add(3); // [3]\nproductOfNumbers.add(0); // [3,0]\nproductOfNumbers.add(2); // [3,0,2]\nproductOfNumbers.add(5); // [3,0,2,5]\nproductOfNumbers.add(4); // [3,0,2,5,4]\nproductOfNumbers.getProduct(2); // return 20. The product of the last 2 numbers is 5 * 4 = 20\nproductOfNumbers.getProduct(3); // return 40. The product of the last 3 numbers is 2 * 5 * 4 = 40\nproductOfNumbers.getProduct(4); // return 0. The product of the last 4 numbers is 0 * 2 * 5 * 4 = 0\nproductOfNumbers.add(8); // [3,0,2,5,4,8]\nproductOfNumbers.getProduct(2); // return 32. The product of the last 2 numbers is 4 * 8 = 32", "input": "Input\n[\"ProductOfNumbers\",\"add\",\"add\",\"add\",\"add\",\"add\",\"getProduct\",\"getProduct\",\"getProduct\",\"add\",\"getProduct\"]\n[[],[3],[0],[2],[5],[4],[2],[3],[4],[8],[2]]", "output": "Output\n[null,null,null,null,null,null,20,40,0,null,32]", "explanation": "Explanation\nProductOfNumbers productOfNumbers = new ProductOfNumbers();\nproductOfNumbers.add(3); // [3]\nproductOfNumbers.add(0); // [3,0]\nproductOfNumbers.add(2); // [3,0,2]\nproductOfNumbers.add(5); // [3,0,2,5]\nproductOfNumbers.add(4); // [3,0,2,5,4]\nproductOfNumbers.getProduct(2); // return 20. The product of the last 2 numbers is 5 * 4 = 20\nproductOfNumbers.getProduct(3); // return 40. The product of the last 3 numbers is 2 * 5 * 4 = 40\nproductOfNumbers.getProduct(4); // return 0. The product of the last 4 numbers is 0 * 2 * 5 * 4 = 0\nproductOfNumbers.add(8); // [3,0,2,5,4,8]\nproductOfNumbers.getProduct(2); // return 32. The product of the last 2 numbers is 4 * 8 = 32"}], "constraints": "Constraints:\n0 <= num <= 100\n1 <= k <= 4 * 10^4\nAt most 4 * 10^4 calls will be made to add and getProduct.\nThe product of the stream at any point in time will fit in a 32-bit integer.", "notes": ""}, "1348": {"label": "Medium", "title": "Tweet Counts Per Frequency", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.42590000000000006, "total_accepted": 25300.0, "total_submissions": 59400.0, "testcase_example": "'[\"TweetCounts\",\"recordTweet\",\"recordTweet\",\"recordTweet\",\"getTweetCountsPerFrequency\",\"getTweetCountsPerFrequency\",\"recordTweet\",\"getTweetCountsPerFrequency\"]\\n' +\n  '[[],[\"tweet3\",0],[\"tweet3\",60],[\"tweet3\",10],[\"minute\",\"tweet3\",0,59],[\"minute\",\"tweet3\",0,60],[\"tweet3\",120],[\"hour\",\"tweet3\",0,210]]'", "body": "A social media company is trying to monitor activity on their site by analyzing the number of tweets that occur in select periods of time. These periods can be partitioned into smaller time chunks based on a certain frequency (every minute, hour, or day).\nFor example, the period [10, 10000] (in seconds) would be partitioned into the following time chunks with these frequencies:\nEvery minute (60-second chunks): [10,69], [70,129], [130,189], ..., [9970,10000]\nEvery hour (3600-second chunks): [10,3609], [3610,7209], [7210,10000]\nEvery day (86400-second chunks): [10,10000]\nNotice that the last chunk may be shorter than the specified frequency's chunk size and will always end with the end time of the period (10000 in the above example).\nDesign and implement an API to help the company with their analysis.\nImplement the TweetCounts class:\nTweetCounts() Initializes the TweetCounts object.\nvoid recordTweet(String tweetName, int time) Stores the tweetName at the recorded time (in seconds).\nList<Integer> getTweetCountsPerFrequency(String freq, String tweetName, int startTime, int endTime) Returns a list of integers representing the number of tweets with tweetName in each time chunk for the given period of time [startTime, endTime] (in seconds) and frequency freq.\n\nfreq is one of \"minute\", \"hour\", or \"day\" representing a frequency of every minute, hour, or day respectively.\n\n", "examples": [{"full_text": "Example:\nInput\n[\"TweetCounts\",\"recordTweet\",\"recordTweet\",\"recordTweet\",\"getTweetCountsPerFrequency\",\"getTweetCountsPerFrequency\",\"recordTweet\",\"getTweetCountsPerFrequency\"]\n[[],[\"tweet3\",0],[\"tweet3\",60],[\"tweet3\",10],[\"minute\",\"tweet3\",0,59],[\"minute\",\"tweet3\",0,60],[\"tweet3\",120],[\"hour\",\"tweet3\",0,210]]\nOutput\n[null,null,null,null,[2],[2,1],null,[4]]\nExplanation\nTweetCounts tweetCounts = new TweetCounts();\ntweetCounts.recordTweet(\"tweet3\", 0); // New tweet \"tweet3\" at time 0\ntweetCounts.recordTweet(\"tweet3\", 60); // New tweet \"tweet3\" at time 60\ntweetCounts.recordTweet(\"tweet3\", 10); // New tweet \"tweet3\" at time 10\ntweetCounts.getTweetCountsPerFrequency(\"minute\", \"tweet3\", 0, 59); // return [2]; chunk [0,59] had 2 tweets\ntweetCounts.getTweetCountsPerFrequency(\"minute\", \"tweet3\", 0, 60); // return [2,1]; chunk [0,59] had 2 tweets, chunk [60,60] had 1 tweet\ntweetCounts.recordTweet(\"tweet3\", 120); // New tweet \"tweet3\" at time 120\ntweetCounts.getTweetCountsPerFrequency(\"hour\", \"tweet3\", 0, 210); // return [4]; chunk [0,210] had 4 tweets", "input": "Input\n[\"TweetCounts\",\"recordTweet\",\"recordTweet\",\"recordTweet\",\"getTweetCountsPerFrequency\",\"getTweetCountsPerFrequency\",\"recordTweet\",\"getTweetCountsPerFrequency\"]\n[[],[\"tweet3\",0],[\"tweet3\",60],[\"tweet3\",10],[\"minute\",\"tweet3\",0,59],[\"minute\",\"tweet3\",0,60],[\"tweet3\",120],[\"hour\",\"tweet3\",0,210]]", "output": "Output\n[null,null,null,null,[2],[2,1],null,[4]]", "explanation": "Explanation\nTweetCounts tweetCounts = new TweetCounts();\ntweetCounts.recordTweet(\"tweet3\", 0); // New tweet \"tweet3\" at time 0\ntweetCounts.recordTweet(\"tweet3\", 60); // New tweet \"tweet3\" at time 60\ntweetCounts.recordTweet(\"tweet3\", 10); // New tweet \"tweet3\" at time 10\ntweetCounts.getTweetCountsPerFrequency(\"minute\", \"tweet3\", 0, 59); // return [2]; chunk [0,59] had 2 tweets\ntweetCounts.getTweetCountsPerFrequency(\"minute\", \"tweet3\", 0, 60); // return [2,1]; chunk [0,59] had 2 tweets, chunk [60,60] had 1 tweet\ntweetCounts.recordTweet(\"tweet3\", 120); // New tweet \"tweet3\" at time 120\ntweetCounts.getTweetCountsPerFrequency(\"hour\", \"tweet3\", 0, 210); // return [4]; chunk [0,210] had 4 tweets"}], "constraints": "Constraints:\n0 <= time, startTime, endTime <= 10^9\n0 <= endTime - startTime <= 10^4\nThere will be at most 10^4 calls in total to recordTweet and getTweetCountsPerFrequency.", "notes": ""}, "1347": {"label": "Medium", "title": "Minimum Number of Steps to Make Two Strings Anagram", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.759, "total_accepted": 81000.0, "total_submissions": 106700.0, "testcase_example": "'\"bab\"\\n\"aba\"'", "body": "You are given two strings of the same length s and t. In one step you can choose any character of t and replace it with another character.\nReturn the minimum number of steps to make t an anagram of s.\nAn Anagram of a string is a string that contains the same characters with a different (or the same) ordering.", "examples": [{"full_text": "Example 1:\nInput: s = \"bab\", t = \"aba\"\nOutput: 1\nExplanation: Replace the first 'a' in t with b, t = \"bba\" which is anagram of s.", "input": "Input: s = \"bab\", t = \"aba\"", "output": "Output: 1", "explanation": "Explanation: Replace the first 'a' in t with b, t = \"bba\" which is anagram of s."}, {"full_text": "Example 2:\nInput: s = \"leetcode\", t = \"practice\"\nOutput: 5\nExplanation: Replace 'p', 'r', 'a', 'i' and 'c' from t with proper characters to make t anagram of s.", "input": "Input: s = \"leetcode\", t = \"practice\"", "output": "Output: 5", "explanation": "Explanation: Replace 'p', 'r', 'a', 'i' and 'c' from t with proper characters to make t anagram of s."}, {"full_text": "Example 3:\nInput: s = \"anagram\", t = \"mangaar\"\nOutput: 0\nExplanation: \"anagram\" and \"mangaar\" are anagrams.", "input": "Input: s = \"anagram\", t = \"mangaar\"", "output": "Output: 0", "explanation": "Explanation: \"anagram\" and \"mangaar\" are anagrams."}], "constraints": "Constraints:\n1 <= s.length <= 5 * 10^4\ns.length == t.length\ns and t consist of lowercase English letters only.", "notes": ""}, "1344": {"label": "Medium", "title": "Angle Between Hands of a Clock", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6282, "total_accepted": 82600.0, "total_submissions": 131500.0, "testcase_example": "'12\\n30'", "body": "Given two numbers, hour and minutes, return the smaller angle (in degrees) formed between the hour and the minute hand.\nAnswers within 10^-5 of the actual value will be accepted as correct.", "examples": [{"full_text": "Example 1:\nInput: hour = 12, minutes = 30\nOutput: 165", "input": "Input: hour = 12, minutes = 30", "output": "Output: 165", "explanation": ""}, {"full_text": "Example 2:\nInput: hour = 3, minutes = 30\nOutput: 75", "input": "Input: hour = 3, minutes = 30", "output": "Output: 75", "explanation": ""}, {"full_text": "Example 3:\nInput: hour = 3, minutes = 15\nOutput: 7.5", "input": "Input: hour = 3, minutes = 15", "output": "Output: 7.5", "explanation": ""}], "constraints": "Constraints:\n1 <= hour <= 12\n0 <= minutes <= 59", "notes": ""}, "1343": {"label": "Medium", "title": "Number of Sub-arrays of Size K and Average Greater than or Equal to Threshold", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6795, "total_accepted": 29400.0, "total_submissions": 43300.0, "testcase_example": "'[2,2,2,2,5,5,5,8]\\n3\\n4'", "body": "Given an array of integers arr and two integers k and threshold, return the number of sub-arrays of size k and average greater than or equal to threshold.", "examples": [{"full_text": "Example 1:\nInput: arr = [2,2,2,2,5,5,5,8], k = 3, threshold = 4\nOutput: 3\nExplanation: Sub-arrays [2,5,5],[5,5,5] and [5,5,8] have averages 4, 5 and 6 respectively. All other sub-arrays of size 3 have averages less than 4 (the threshold).", "input": "Input: arr = [2,2,2,2,5,5,5,8], k = 3, threshold = 4", "output": "Output: 3", "explanation": "Explanation: Sub-arrays [2,5,5],[5,5,5] and [5,5,8] have averages 4, 5 and 6 respectively. All other sub-arrays of size 3 have averages less than 4 (the threshold)."}, {"full_text": "Example 2:\nInput: arr = [11,13,17,23,29,31,7,5,2,3], k = 3, threshold = 5\nOutput: 6\nExplanation: The first 6 sub-arrays of size 3 have averages greater than 5. Note that averages are not integers.", "input": "Input: arr = [11,13,17,23,29,31,7,5,2,3], k = 3, threshold = 5", "output": "Output: 6", "explanation": "Explanation: The first 6 sub-arrays of size 3 have averages greater than 5. Note that averages are not integers."}], "constraints": "Constraints:\n1 <= arr.length <= 10^5\n1 <= arr[i] <= 10^4\n1 <= k <= arr.length\n0 <= threshold <= 10^4", "notes": ""}, "1339": {"label": "Medium", "title": "Maximum Product of Splitted Binary Tree", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4274, "total_accepted": 54000.0, "total_submissions": 126200.0, "testcase_example": "'[1,2,3,4,5,6]'", "body": "Given the root of a binary tree, split the binary tree into two subtrees by removing one edge such that the product of the sums of the subtrees is maximized.\nReturn the maximum product of the sums of the two subtrees. Since the answer may be too large, return it modulo 10^9 + 7.\nNote that you need to maximize the answer before taking the mod and not after taking it.", "examples": [{"full_text": "Example 1:\nInput: root = [1,2,3,4,5,6]\nOutput: 110\nExplanation: Remove the red edge and get 2 binary trees with sum 11 and 10. Their product is 110 (11*10)", "input": "Input: root = [1,2,3,4,5,6]", "output": "Output: 110", "explanation": "Explanation: Remove the red edge and get 2 binary trees with sum 11 and 10. Their product is 110 (11*10)"}, {"full_text": "Example 2:\nInput: root = [1,null,2,3,4,null,null,5,6]\nOutput: 90\nExplanation: Remove the red edge and get 2 binary trees with sum 15 and 6.Their product is 90 (15*6)", "input": "Input: root = [1,null,2,3,4,null,null,5,6]", "output": "Output: 90", "explanation": "Explanation: Remove the red edge and get 2 binary trees with sum 15 and 6.Their product is 90 (15*6)"}], "constraints": "Constraints:\nThe number of nodes in the tree is in the range [2, 5 * 10^4].\n1 <= Node.val <= 10^4", "notes": ""}, "1338": {"label": "Medium", "title": "Reduce Array Size to The Half", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6846, "total_accepted": 80300.0, "total_submissions": 117300.0, "testcase_example": "'[3,3,3,3,5,5,5,2,2,7]'", "body": "You are given an integer array arr. You can choose a set of integers and remove all the occurrences of these integers in the array.\nReturn the minimum size of the set so that at least half of the integers of the array are removed.", "examples": [{"full_text": "Example 1:\nInput: arr = [3,3,3,3,5,5,5,2,2,7]\nOutput: 2\nExplanation: Choosing {3,7} will make the new array [5,5,5,2,2] which has size 5 (i.e equal to half of the size of the old array).\nPossible sets of size 2 are {3,5},{3,2},{5,2}.\nChoosing set {2,7} is not possible as it will make the new array [3,3,3,3,5,5,5] which has a size greater than half of the size of the old array.", "input": "Input: arr = [3,3,3,3,5,5,5,2,2,7]", "output": "Output: 2", "explanation": "Explanation: Choosing {3,7} will make the new array [5,5,5,2,2] which has size 5 (i.e equal to half of the size of the old array).\nPossible sets of size 2 are {3,5},{3,2},{5,2}.\nChoosing set {2,7} is not possible as it will make the new array [3,3,3,3,5,5,5] which has a size greater than half of the size of the old array."}, {"full_text": "Example 2:\nInput: arr = [7,7,7,7,7,7]\nOutput: 1\nExplanation: The only possible set you can choose is {7}. This will make the new array empty.", "input": "Input: arr = [7,7,7,7,7,7]", "output": "Output: 1", "explanation": "Explanation: The only possible set you can choose is {7}. This will make the new array empty."}], "constraints": "Constraints:\n2 <= arr.length <= 10^5\narr.length is even.\n1 <= arr[i] <= 10^5", "notes": ""}, "1334": {"label": "Medium", "title": "Find the City With the Smallest Number of Neighbors at a Threshold Distance", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5072, "total_accepted": 35600.0, "total_submissions": 70200.0, "testcase_example": "'4\\n[[0,1,3],[1,2,1],[1,3,4],[2,3,1]]\\n4'", "body": "There are n cities numbered from 0 to n-1. Given the array edges where edges[i] = [fromi, toi, weighti] represents a bidirectional and weighted edge between cities fromi and toi, and given the integer distanceThreshold.\nReturn the city with the smallest number of cities that are reachable through some path and whose distance is at most distanceThreshold, If there are multiple such cities, return the city with the greatest number.\nNotice that the distance of a path connecting cities i and j is equal to the sum of the edges' weights along that path.", "examples": [{"full_text": "Example 1:\nInput: n = 4, edges = [[0,1,3],[1,2,1],[1,3,4],[2,3,1]], distanceThreshold = 4\nOutput: 3\nExplanation: The figure above describes the graph.\nThe neighboring cities at a distanceThreshold = 4 for each city are:\nCity 0 -> [City 1, City 2]\nCity 1 -> [City 0, City 2, City 3]\nCity 2 -> [City 0, City 1, City 3]\nCity 3 -> [City 1, City 2]\nCities 0 and 3 have 2 neighboring cities at a distanceThreshold = 4, but we have to return city 3 since it has the greatest number.", "input": "Input: n = 4, edges = [[0,1,3],[1,2,1],[1,3,4],[2,3,1]], distanceThreshold = 4", "output": "Output: 3", "explanation": "Explanation: The figure above describes the graph.\nThe neighboring cities at a distanceThreshold = 4 for each city are:\nCity 0 -> [City 1, City 2]\nCity 1 -> [City 0, City 2, City 3]\nCity 2 -> [City 0, City 1, City 3]\nCity 3 -> [City 1, City 2]\nCities 0 and 3 have 2 neighboring cities at a distanceThreshold = 4, but we have to return city 3 since it has the greatest number."}, {"full_text": "Example 2:\nInput: n = 5, edges = [[0,1,2],[0,4,8],[1,2,3],[1,4,2],[2,3,1],[3,4,1]], distanceThreshold = 2\nOutput: 0\nExplanation: The figure above describes the graph.\nThe neighboring cities at a distanceThreshold = 2 for each city are:\nCity 0 -> [City 1]\nCity 1 -> [City 0, City 4]\nCity 2 -> [City 3, City 4]\nCity 3 -> [City 2, City 4]\nCity 4 -> [City 1, City 2, City 3]\nThe city 0 has 1 neighboring city at a distanceThreshold = 2.", "input": "Input: n = 5, edges = [[0,1,2],[0,4,8],[1,2,3],[1,4,2],[2,3,1],[3,4,1]], distanceThreshold = 2", "output": "Output: 0", "explanation": "Explanation: The figure above describes the graph.\nThe neighboring cities at a distanceThreshold = 2 for each city are:\nCity 0 -> [City 1]\nCity 1 -> [City 0, City 4]\nCity 2 -> [City 3, City 4]\nCity 3 -> [City 2, City 4]\nCity 4 -> [City 1, City 2, City 3]\nThe city 0 has 1 neighboring city at a distanceThreshold = 2."}], "constraints": "Constraints:\n2 <= n <= 100\n1 <= edges.length <= n * (n - 1) / 2\nedges[i].length == 3\n0 <= fromi < toi < n\n1 <= weighti,\ndistanceThreshold <= 10^4\nAll pairs (fromi, toi) are distinct.", "notes": ""}, "1333": {"label": "Medium", "title": "Filter Restaurants by Vegan-Friendly, Price and Distance", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5858, "total_accepted": 21000.0, "total_submissions": 35800.0, "testcase_example": "'[[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]]\\n1\\n50\\n10'", "body": "Given the array restaurants where\nrestaurants[i] = [idi, ratingi, veganFriendlyi, pricei, distancei]. You have to filter the restaurants using three filters.\nThe veganFriendly filter will be either true (meaning you should only include restaurants with veganFriendlyi set to true)\nor false\n(meaning you can include any restaurant). In addition, you have the filters\nmaxPrice and maxDistance\nwhich\nare the maximum value for price and distance of restaurants you should consider respectively.\nReturn the array of restaurant IDs after filtering, ordered by rating from highest to lowest. For restaurants with the same rating, order them by id from highest to lowest. For simplicity veganFriendlyi and veganFriendly take value 1 when it is true, and 0 when it is false.", "examples": [{"full_text": "Example 1:\nInput: restaurants = [[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]], veganFriendly = 1, maxPrice = 50, maxDistance = 10\nOutput: [3,1,5]\nExplanation:\nThe restaurants are:\nRestaurant 1 [id=1, rating=4, veganFriendly=1, price=40, distance=10]\nRestaurant 2 [id=2, rating=8, veganFriendly=0, price=50, distance=5]\nRestaurant 3 [id=3, rating=8, veganFriendly=1, price=30, distance=4]\nRestaurant 4 [id=4, rating=10, veganFriendly=0, price=10, distance=3]\nRestaurant 5 [id=5, rating=1, veganFriendly=1, price=15, distance=1]\nAfter filter restaurants with veganFriendly = 1, maxPrice = 50 and maxDistance = 10 we have restaurant 3, restaurant 1 and restaurant 5 (ordered by rating from highest to lowest).", "input": "Input: restaurants = [[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]], veganFriendly = 1, maxPrice = 50, maxDistance = 10", "output": "Output: [3,1,5]", "explanation": "Explanation:\nThe restaurants are:\nRestaurant 1 [id=1, rating=4, veganFriendly=1, price=40, distance=10]\nRestaurant 2 [id=2, rating=8, veganFriendly=0, price=50, distance=5]\nRestaurant 3 [id=3, rating=8, veganFriendly=1, price=30, distance=4]\nRestaurant 4 [id=4, rating=10, veganFriendly=0, price=10, distance=3]\nRestaurant 5 [id=5, rating=1, veganFriendly=1, price=15, distance=1]\nAfter filter restaurants with veganFriendly = 1, maxPrice = 50 and maxDistance = 10 we have restaurant 3, restaurant 1 and restaurant 5 (ordered by rating from highest to lowest)."}, {"full_text": "Example 2:\nInput: restaurants = [[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]], veganFriendly = 0, maxPrice = 50, maxDistance = 10\nOutput: [4,3,2,1,5]\nExplanation: The restaurants are the same as in example 1, but in this case the filter veganFriendly = 0, therefore all restaurants are considered.", "input": "Input: restaurants = [[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]], veganFriendly = 0, maxPrice = 50, maxDistance = 10", "output": "Output: [4,3,2,1,5]", "explanation": "Explanation: The restaurants are the same as in example 1, but in this case the filter veganFriendly = 0, therefore all restaurants are considered."}, {"full_text": "Example 3:\nInput: restaurants = [[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]], veganFriendly = 0, maxPrice = 30, maxDistance = 3\nOutput: [4,5]", "input": "Input: restaurants = [[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]], veganFriendly = 0, maxPrice = 30, maxDistance = 3", "output": "Output: [4,5]", "explanation": ""}], "constraints": "Constraints:\n1 <=\nrestaurants.length <= 10^4\nrestaurants[i].length == 5\n1 <=\nidi, ratingi, pricei, distancei <= 10^5\n1 <=\nmaxPrice,\nmaxDistance <= 10^5\nveganFriendlyi and\nveganFriendly\nare\n0 or 1.\nAll idi are distinct.", "notes": ""}, "1329": {"label": "Medium", "title": "Sort the Matrix Diagonally", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.8136, "total_accepted": 79200.0, "total_submissions": 97300.0, "testcase_example": "'[[3,3,1,1],[2,2,1,2],[1,1,1,2]]'", "body": "A matrix diagonal is a diagonal line of cells starting from some cell in either the topmost row or leftmost column and going in the bottom-right direction until reaching the matrix's end. For example, the matrix diagonal starting from mat[2][0], where mat is a 6 x 3 matrix, includes cells mat[2][0], mat[3][1], and mat[4][2].\nGiven an m x n matrix mat of integers, sort each matrix diagonal in ascending order and return the resulting matrix.", "examples": [{"full_text": "Example 1:\nInput: mat = [[3,3,1,1],[2,2,1,2],[1,1,1,2]]\nOutput: [[1,1,1,1],[1,2,2,2],[1,2,3,3]]", "input": "Input: mat = [[3,3,1,1],[2,2,1,2],[1,1,1,2]]", "output": "Output: [[1,1,1,1],[1,2,2,2],[1,2,3,3]]", "explanation": ""}, {"full_text": "Example 2:\nInput: mat = [[11,25,66,1,69,7],[23,55,17,45,15,52],[75,31,36,44,58,8],[22,27,33,25,68,4],[84,28,14,11,5,50]]\nOutput: [[5,17,4,1,52,7],[11,11,25,45,8,69],[14,23,25,44,58,15],[22,27,31,36,50,66],[84,28,75,33,55,68]]", "input": "Input: mat = [[11,25,66,1,69,7],[23,55,17,45,15,52],[75,31,36,44,58,8],[22,27,33,25,68,4],[84,28,14,11,5,50]]", "output": "Output: [[5,17,4,1,52,7],[11,11,25,45,8,69],[14,23,25,44,58,15],[22,27,31,36,50,66],[84,28,75,33,55,68]]", "explanation": ""}], "constraints": "Constraints:\nm == mat.length\nn == mat[i].length\n1 <= m, n <= 100\n1 <= mat[i][j] <= 100", "notes": ""}, "1328": {"label": "Medium", "title": "Break a Palindrome", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.524, "total_accepted": 65099.99999999999, "total_submissions": 124300.0, "testcase_example": "'\"abccba\"'", "body": "Given a palindromic string of lowercase English letters palindrome, replace exactly one character with any lowercase English letter so that the resulting string is not a palindrome and that it is the lexicographically smallest one possible.\nReturn the resulting string. If there is no way to replace a character to make it not a palindrome, return an empty string.\nA string a is lexicographically smaller than a string b (of the same length) if in the first position where a and b differ, a has a character strictly smaller than the corresponding character in b. For example, \"abcc\" is lexicographically smaller than \"abcd\" because the first position they differ is at the fourth character, and 'c' is smaller than 'd'.", "examples": [{"full_text": "Example 1:\nInput: palindrome = \"abccba\"\nOutput: \"aaccba\"\nExplanation: There are many ways to make \"abccba\" not a palindrome, such as \"zbccba\", \"aaccba\", and \"abacba\".\nOf all the ways, \"aaccba\" is the lexicographically smallest.", "input": "Input: palindrome = \"abccba\"", "output": "Output: \"aaccba\"", "explanation": "Explanation: There are many ways to make \"abccba\" not a palindrome, such as \"zbccba\", \"aaccba\", and \"abacba\".\nOf all the ways, \"aaccba\" is the lexicographically smallest."}, {"full_text": "Example 2:\nInput: palindrome = \"a\"\nOutput: \"\"\nExplanation: There is no way to replace a single character to make \"a\" not a palindrome, so return an empty string.", "input": "Input: palindrome = \"a\"", "output": "Output: \"\"", "explanation": "Explanation: There is no way to replace a single character to make \"a\" not a palindrome, so return an empty string."}], "constraints": "Constraints:\n1 <= palindrome.length <= 1000\npalindrome consists of only lowercase English letters.", "notes": ""}, "1325": {"label": "Medium", "title": "Delete Leaves With a Given Value", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7478, "total_accepted": 61400.0, "total_submissions": 82100.0, "testcase_example": "'[1,2,3,2,null,2,4]\\n2'", "body": "Given a binary tree root and an integer target, delete all the leaf nodes with value target.\nNote that once you delete a leaf node with value target, if its parent node becomes a leaf node and has the value target, it should also be deleted (you need to continue doing that until you cannot).", "examples": [{"full_text": "Example 1:\nInput: root = [1,2,3,2,null,2,4], target = 2\nOutput: [1,null,3,null,4]\nExplanation: Leaf nodes in green with value (target = 2) are removed (Picture in left).\nAfter removing, new nodes become leaf nodes with value (target = 2) (Picture in center).", "input": "Input: root = [1,2,3,2,null,2,4], target = 2", "output": "Output: [1,null,3,null,4]", "explanation": "Explanation: Leaf nodes in green with value (target = 2) are removed (Picture in left).\nAfter removing, new nodes become leaf nodes with value (target = 2) (Picture in center)."}, {"full_text": "Example 2:\nInput: root = [1,3,3,3,2], target = 3\nOutput: [1,3,null,null,2]", "input": "Input: root = [1,3,3,3,2], target = 3", "output": "Output: [1,3,null,null,2]", "explanation": ""}, {"full_text": "Example 3:\nInput: root = [1,2,null,2,null,2], target = 2\nOutput: [1]\nExplanation: Leaf nodes in green with value (target = 2) are removed at each step.", "input": "Input: root = [1,2,null,2,null,2], target = 2", "output": "Output: [1]", "explanation": "Explanation: Leaf nodes in green with value (target = 2) are removed at each step."}], "constraints": "Constraints:\nThe number of nodes in the tree is in the range [1, 3000].\n1 <= Node.val, target <= 1000", "notes": ""}, "1324": {"label": "Medium", "title": "Print Words Vertically", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.594, "total_accepted": 24900.0, "total_submissions": 41900.0, "testcase_example": "'\"HOW ARE YOU\"'", "body": "Given a string s.\nReturn\nall the words vertically in the same order in which they appear in s.\nWords are returned as a list of strings, complete with\nspaces when is necessary. (Trailing spaces are not allowed).\nEach word would be put on only one column and that in one column there will be only one word.", "examples": [{"full_text": "Example 1:\nInput: s = \"HOW ARE YOU\"\nOutput: [\"HAY\",\"ORO\",\"WEU\"]\nExplanation: Each word is printed vertically.\n\"HAY\"\n\"ORO\"\n\"WEU\"", "input": "Input: s = \"HOW ARE YOU\"", "output": "Output: [\"HAY\",\"ORO\",\"WEU\"]", "explanation": "Explanation: Each word is printed vertically.\n\"HAY\"\n\"ORO\"\n\"WEU\""}, {"full_text": "Example 2:\nInput: s = \"TO BE OR NOT TO BE\"\nOutput: [\"TBONTB\",\"OEROOE\",\" T\"]\nExplanation: Trailing spaces is not allowed.\n\"TBONTB\"\n\"OEROOE\"\n\" T\"", "input": "Input: s = \"TO BE OR NOT TO BE\"", "output": "Output: [\"TBONTB\",\"OEROOE\",\" T\"]", "explanation": "Explanation: Trailing spaces is not allowed.\n\"TBONTB\"\n\"OEROOE\"\n\" T\""}, {"full_text": "Example 3:\nInput: s = \"CONTEST IS COMING\"\nOutput: [\"CIC\",\"OSO\",\"N M\",\"T I\",\"E N\",\"S G\",\"T\"]", "input": "Input: s = \"CONTEST IS COMING\"", "output": "Output: [\"CIC\",\"OSO\",\"N M\",\"T I\",\"E N\",\"S G\",\"T\"]", "explanation": ""}], "constraints": "Constraints:\n1 <= s.length <= 200\ns\ncontains only upper case English letters.\nIt's guaranteed that there is only one\nspace between 2 words.", "notes": ""}, "1319": {"label": "Medium", "title": "Number of Operations to Make Network Connected", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5717, "total_accepted": 64300.0, "total_submissions": 112400.0, "testcase_example": "'4\\n[[0,1],[0,2],[1,2]]'", "body": "There are n computers numbered from 0 to n - 1 connected by ethernet cables connections forming a network where connections[i] = [ai, bi] represents a connection between computers ai and bi. Any computer can reach any other computer directly or indirectly through the network.\nYou are given an initial computer network connections. You can extract certain cables between two directly connected computers, and place them between any pair of disconnected computers to make them directly connected.\nReturn the minimum number of times you need to do this in order to make all the computers connected. If it is not possible, return -1.", "examples": [{"full_text": "Example 1:\nInput: n = 4, connections = [[0,1],[0,2],[1,2]]\nOutput: 1\nExplanation: Remove cable between computer 1 and 2 and place between computers 1 and 3.", "input": "Input: n = 4, connections = [[0,1],[0,2],[1,2]]", "output": "Output: 1", "explanation": "Explanation: Remove cable between computer 1 and 2 and place between computers 1 and 3."}, {"full_text": "Example 2:\nInput: n = 6, connections = [[0,1],[0,2],[0,3],[1,2],[1,3]]\nOutput: 2", "input": "Input: n = 6, connections = [[0,1],[0,2],[0,3],[1,2],[1,3]]", "output": "Output: 2", "explanation": ""}, {"full_text": "Example 3:\nInput: n = 6, connections = [[0,1],[0,2],[0,3],[1,2]]\nOutput: -1\nExplanation: There are not enough cables.", "input": "Input: n = 6, connections = [[0,1],[0,2],[0,3],[1,2]]", "output": "Output: -1", "explanation": "Explanation: There are not enough cables."}], "constraints": "Constraints:\n1 <= n <= 10^5\n1 <= connections.length <= min(n * (n - 1) / 2, 10^5)\nconnections[i].length == 2\n0 <= ai, bi < n\nai != bi\nThere are no repeated connections.\nNo two computers are connected by more than one cable.", "notes": ""}, "1318": {"label": "Medium", "title": "Minimum Flips to Make a OR b Equal to c", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6496, "total_accepted": 22700.0, "total_submissions": 35000.0, "testcase_example": "'2\\n6\\n5'", "body": "Given 3 positives numbers a, b and c. Return the minimum flips required in some bits of a and b to make (\na OR b == c\n). (bitwise OR operation).\nFlip operation\nconsists of change\nany\nsingle bit 1 to 0 or change the bit 0 to 1\nin their binary representation.", "examples": [{"full_text": "Example 1:\nInput: a = 2, b = 6, c = 5\nOutput: 3\nExplanation: After flips a = 1 , b = 4 , c = 5 such that (a OR b == c)", "input": "Input: a = 2, b = 6, c = 5", "output": "Output: 3", "explanation": "Explanation: After flips a = 1 , b = 4 , c = 5 such that (a OR b == c)"}, {"full_text": "Example 2:\nInput: a = 4, b = 2, c = 7\nOutput: 1", "input": "Input: a = 4, b = 2, c = 7", "output": "Output: 1", "explanation": ""}, {"full_text": "Example 3:\nInput: a = 1, b = 2, c = 3\nOutput: 0", "input": "Input: a = 1, b = 2, c = 3", "output": "Output: 0", "explanation": ""}], "constraints": "Constraints:\n1 <= a <= 10^9\n1 <= b\n<= 10^9\n1 <= c\n<= 10^9", "notes": ""}, "1315": {"label": "Medium", "title": "Sum of Nodes with Even-Valued Grandparent", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.8504999999999999, "total_accepted": 93400.0, "total_submissions": 109900.0, "testcase_example": "'[6,7,8,2,7,1,3,9,null,1,4,null,null,null,5]'", "body": "Given the root of a binary tree, return the sum of values of nodes with an even-valued grandparent. If there are no nodes with an even-valued grandparent, return 0.\nA grandparent of a node is the parent of its parent if it exists.", "examples": [{"full_text": "Example 1:\nInput: root = [6,7,8,2,7,1,3,9,null,1,4,null,null,null,5]\nOutput: 18\nExplanation: The red nodes are the nodes with even-value grandparent while the blue nodes are the even-value grandparents.", "input": "Input: root = [6,7,8,2,7,1,3,9,null,1,4,null,null,null,5]", "output": "Output: 18", "explanation": "Explanation: The red nodes are the nodes with even-value grandparent while the blue nodes are the even-value grandparents."}, {"full_text": "Example 2:\nInput: root = [1]\nOutput: 0", "input": "Input: root = [1]", "output": "Output: 0", "explanation": ""}], "constraints": "Constraints:\nThe number of nodes in the tree is in the range [1, 10^4].\n1 <= Node.val <= 100", "notes": ""}, "1314": {"label": "Medium", "title": "Matrix Block Sum", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7497, "total_accepted": 55000.0, "total_submissions": 73400.0, "testcase_example": "'[[1,2,3],[4,5,6],[7,8,9]]\\n1'", "body": "Given a m x n matrix mat and an integer k, return a matrix answer where each answer[i][j] is the sum of all elements mat[r][c] for:\ni - k <= r <= i + k,\nj - k <= c <= j + k, and\n(r, c) is a valid position in the matrix.", "examples": [{"full_text": "Example 1:\nInput: mat = [[1,2,3],[4,5,6],[7,8,9]], k = 1\nOutput: [[12,21,16],[27,45,33],[24,39,28]]", "input": "Input: mat = [[1,2,3],[4,5,6],[7,8,9]], k = 1", "output": "Output: [[12,21,16],[27,45,33],[24,39,28]]", "explanation": ""}, {"full_text": "Example 2:\nInput: mat = [[1,2,3],[4,5,6],[7,8,9]], k = 2\nOutput: [[45,45,45],[45,45,45],[45,45,45]]", "input": "Input: mat = [[1,2,3],[4,5,6],[7,8,9]], k = 2", "output": "Output: [[45,45,45],[45,45,45],[45,45,45]]", "explanation": ""}], "constraints": "Constraints:\nm ==\nmat.length\nn ==\nmat[i].length\n1 <= m, n, k <= 100\n1 <= mat[i][j] <= 100", "notes": ""}, "1311": {"label": "Medium", "title": "Get Watched Videos by Your Friends", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4501, "total_accepted": 14500.0, "total_submissions": 32299.999999999996, "testcase_example": "'[[\"A\",\"B\"],[\"C\"],[\"B\",\"C\"],[\"D\"]]\\n[[1,2],[0,3],[0,3],[1,2]]\\n0\\n1'", "body": "There are n people, each person has a unique id between 0 and n-1. Given the arrays watchedVideos and friends, where watchedVideos[i] and friends[i] contain the list of watched videos and the list of friends respectively for the person with id = i.\nLevel 1 of videos are all watched videos by your\nfriends, level 2 of videos are all watched videos by the friends of your\nfriends and so on. In general, the level k of videos are all\nwatched videos by people\nwith the shortest path exactly equal\nto\nk with you. Given your\nid and the level of videos, return the list of videos ordered by their frequencies (increasing). For videos with the same frequency order them alphabetically from least to greatest.", "examples": [{"full_text": "Example 1:\nInput: watchedVideos = [[\"A\",\"B\"],[\"C\"],[\"B\",\"C\"],[\"D\"]], friends = [[1,2],[0,3],[0,3],[1,2]], id = 0, level = 1\nOutput: [\"B\",\"C\"]\nExplanation:\nYou have id = 0 (green color in the figure) and your friends are (yellow color in the figure):\nPerson with id = 1 -> watchedVideos = [\"C\"]\nPerson with id = 2 -> watchedVideos = [\"B\",\"C\"]\nThe frequencies of watchedVideos by your friends are:\nB -> 1\nC -> 2", "input": "Input: watchedVideos = [[\"A\",\"B\"],[\"C\"],[\"B\",\"C\"],[\"D\"]], friends = [[1,2],[0,3],[0,3],[1,2]], id = 0, level = 1", "output": "Output: [\"B\",\"C\"]", "explanation": "Explanation:\nYou have id = 0 (green color in the figure) and your friends are (yellow color in the figure):\nPerson with id = 1 -> watchedVideos = [\"C\"]\nPerson with id = 2 -> watchedVideos = [\"B\",\"C\"]\nThe frequencies of watchedVideos by your friends are:\nB -> 1\nC -> 2"}, {"full_text": "Example 2:\nInput: watchedVideos = [[\"A\",\"B\"],[\"C\"],[\"B\",\"C\"],[\"D\"]], friends = [[1,2],[0,3],[0,3],[1,2]], id = 0, level = 2\nOutput: [\"D\"]\nExplanation:\nYou have id = 0 (green color in the figure) and the only friend of your friends is the person with id = 3 (yellow color in the figure).", "input": "Input: watchedVideos = [[\"A\",\"B\"],[\"C\"],[\"B\",\"C\"],[\"D\"]], friends = [[1,2],[0,3],[0,3],[1,2]], id = 0, level = 2", "output": "Output: [\"D\"]", "explanation": "Explanation:\nYou have id = 0 (green color in the figure) and the only friend of your friends is the person with id = 3 (yellow color in the figure)."}], "constraints": "Constraints:\nn == watchedVideos.length ==\nfriends.length\n2 <= n\n<= 100\n1 <=\nwatchedVideos[i].length <= 100\n1 <=\nwatchedVideos[i][j].length <= 8\n0 <= friends[i].length < n\n0 <= friends[i][j]\n< n\n0 <= id < n\n1 <= level < n\nif\nfriends[i] contains j, then friends[j] contains i", "notes": ""}, "1310": {"label": "Medium", "title": "XOR Queries of a Subarray", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.711, "total_accepted": 34200.0, "total_submissions": 48200.0, "testcase_example": "'[1,3,4,8]\\n[[0,1],[1,2],[0,3],[3,3]]'", "body": "You are given an array arr of positive integers. You are also given the array queries where queries[i] = [lefti, righti].\nFor each query i compute the XOR of elements from lefti to righti (that is, arr[lefti] XOR arr[lefti + 1] XOR ... XOR arr[righti] ).\nReturn an array answer where answer[i] is the answer to the i^th query.", "examples": [{"full_text": "Example 1:\nInput: arr = [1,3,4,8], queries = [[0,1],[1,2],[0,3],[3,3]]\nOutput: [2,7,14,8]\nExplanation:\nThe binary representation of the elements in the array are:\n1 = 0001\n3 = 0011\n4 = 0100\n8 = 1000\nThe XOR values for queries are:\n[0,1] = 1 xor 3 = 2\n[1,2] = 3 xor 4 = 7\n[0,3] = 1 xor 3 xor 4 xor 8 = 14\n[3,3] = 8", "input": "Input: arr = [1,3,4,8], queries = [[0,1],[1,2],[0,3],[3,3]]", "output": "Output: [2,7,14,8]", "explanation": "Explanation:\nThe binary representation of the elements in the array are:\n1 = 0001\n3 = 0011\n4 = 0100\n8 = 1000\nThe XOR values for queries are:\n[0,1] = 1 xor 3 = 2\n[1,2] = 3 xor 4 = 7\n[0,3] = 1 xor 3 xor 4 xor 8 = 14\n[3,3] = 8"}, {"full_text": "Example 2:\nInput: arr = [4,8,2,10], queries = [[2,3],[1,3],[0,0],[0,3]]\nOutput: [8,0,4,4]", "input": "Input: arr = [4,8,2,10], queries = [[2,3],[1,3],[0,0],[0,3]]", "output": "Output: [8,0,4,4]", "explanation": ""}], "constraints": "Constraints:\n1 <= arr.length, queries.length <= 3 * 10^4\n1 <= arr[i] <= 10^9\nqueries[i].length == 2\n0 <= lefti <= righti < arr.length", "notes": ""}, "1306": {"label": "Medium", "title": "Jump Game III", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6258, "total_accepted": 132700.0, "total_submissions": 212100.0, "testcase_example": "'[4,2,3,0,3,1,2]\\n5'", "body": "Given an array of non-negative integers arr, you are initially positioned at start\nindex of the array. When you are at index i, you can jump\nto i + arr[i] or i - arr[i], check if you can reach to any index with value 0.\nNotice that you can not jump outside of the array at any time.", "examples": [{"full_text": "Example 1:\nInput: arr = [4,2,3,0,3,1,2], start = 5\nOutput: true\nExplanation:\nAll possible ways to reach at index 3 with value 0 are:\nindex 5 -> index 4 -> index 1 -> index 3\nindex 5 -> index 6 -> index 4 -> index 1 -> index 3", "input": "Input: arr = [4,2,3,0,3,1,2], start = 5", "output": "Output: true", "explanation": "Explanation:\nAll possible ways to reach at index 3 with value 0 are:\nindex 5 -> index 4 -> index 1 -> index 3\nindex 5 -> index 6 -> index 4 -> index 1 -> index 3"}, {"full_text": "Example 2:\nInput: arr = [4,2,3,0,3,1,2], start = 0\nOutput: true\nExplanation:\nOne possible way to reach at index 3 with value 0 is:\nindex 0 -> index 4 -> index 1 -> index 3", "input": "Input: arr = [4,2,3,0,3,1,2], start = 0", "output": "Output: true", "explanation": "Explanation:\nOne possible way to reach at index 3 with value 0 is:\nindex 0 -> index 4 -> index 1 -> index 3"}, {"full_text": "Example 3:\nInput: arr = [3,0,2,1,2], start = 2\nOutput: false\nExplanation: There is no way to reach at index 1 with value 0.", "input": "Input: arr = [3,0,2,1,2], start = 2", "output": "Output: false", "explanation": "Explanation: There is no way to reach at index 1 with value 0."}], "constraints": "Constraints:\n1 <= arr.length <= 5 * 10^4\n0 <= arr[i] <\narr.length\n0 <= start < arr.length", "notes": ""}, "1305": {"label": "Medium", "title": "All Elements in Two Binary Search Trees", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7961, "total_accepted": 154300.0, "total_submissions": 193700.0, "testcase_example": "'[2,1,4]\\n[1,0,3]'", "body": "Given two binary search trees root1 and root2, return a list containing all the integers from both trees sorted in ascending order.", "examples": [{"full_text": "Example 1:\nInput: root1 = [2,1,4], root2 = [1,0,3]\nOutput: [0,1,1,2,3,4]", "input": "Input: root1 = [2,1,4], root2 = [1,0,3]", "output": "Output: [0,1,1,2,3,4]", "explanation": ""}, {"full_text": "Example 2:\nInput: root1 = [1,null,8], root2 = [8,1]\nOutput: [1,1,8,8]", "input": "Input: root1 = [1,null,8], root2 = [8,1]", "output": "Output: [1,1,8,8]", "explanation": ""}], "constraints": "Constraints:\nThe number of nodes in each tree is in the range [0, 5000].\n-10^5 <= Node.val <= 10^5", "notes": ""}, "1302": {"label": "Medium", "title": "Deepest Leaves Sum", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.8564, "total_accepted": 157900.0, "total_submissions": 184300.0, "testcase_example": "'[1,2,3,4,5,null,6,7,null,null,null,null,8]'", "body": "Given the root of a binary tree, return the sum of values of its deepest leaves.", "examples": [{"full_text": "Example 1:\nInput: root = [1,2,3,4,5,null,6,7,null,null,null,null,8]\nOutput: 15", "input": "Input: root = [1,2,3,4,5,null,6,7,null,null,null,null,8]", "output": "Output: 15", "explanation": ""}, {"full_text": "Example 2:\nInput: root = [6,7,8,2,7,1,3,9,null,1,4,null,null,null,5]\nOutput: 19", "input": "Input: root = [6,7,8,2,7,1,3,9,null,1,4,null,null,null,5]", "output": "Output: 19", "explanation": ""}], "constraints": "Constraints:\nThe number of nodes in the tree is in the range [1, 10^4].\n1 <= Node.val <= 100", "notes": ""}, "1300": {"label": "Medium", "title": "Sum of Mutated Array Closest to Target", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.425, "total_accepted": 23200.0, "total_submissions": 54600.0, "testcase_example": "'[4,9,3]\\n10'", "body": "Given an integer array arr and a target value target, return the integer value such that when we change all the integers larger than value in the given array to be equal to value, the sum of the array gets as close as possible (in absolute difference) to target.\nIn case of a tie, return the minimum such integer.\nNotice that the answer is not neccesarilly a number from arr.", "examples": [{"full_text": "Example 1:\nInput: arr = [4,9,3], target = 10\nOutput: 3\nExplanation: When using 3 arr converts to [3, 3, 3] which sums 9 and that's the optimal answer.", "input": "Input: arr = [4,9,3], target = 10", "output": "Output: 3", "explanation": "Explanation: When using 3 arr converts to [3, 3, 3] which sums 9 and that's the optimal answer."}, {"full_text": "Example 2:\nInput: arr = [2,3,5], target = 10\nOutput: 5", "input": "Input: arr = [2,3,5], target = 10", "output": "Output: 5", "explanation": ""}, {"full_text": "Example 3:\nInput: arr = [60864,25176,27249,21296,20204], target = 56803\nOutput: 11361", "input": "Input: arr = [60864,25176,27249,21296,20204], target = 56803", "output": "Output: 11361", "explanation": ""}], "constraints": "Constraints:\n1 <= arr.length <= 10^4\n1 <= arr[i], target <= 10^5", "notes": ""}, "1297": {"label": "Medium", "title": "Maximum Number of Occurrences of a Substring", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5235, "total_accepted": 30700.0, "total_submissions": 58700.0, "testcase_example": "'\"aababcaab\"\\n2\\n3\\n4'", "body": "Given a string s, return the maximum number of ocurrences of any substring under the following rules:\nThe number of unique characters in the substring must be less than or equal to maxLetters.\nThe substring size must be between minSize and maxSize inclusive.", "examples": [{"full_text": "Example 1:\nInput: s = \"aababcaab\", maxLetters = 2, minSize = 3, maxSize = 4\nOutput: 2\nExplanation: Substring \"aab\" has 2 ocurrences in the original string.\nIt satisfies the conditions, 2 unique letters and size 3 (between minSize and maxSize).", "input": "Input: s = \"aababcaab\", maxLetters = 2, minSize = 3, maxSize = 4", "output": "Output: 2", "explanation": "Explanation: Substring \"aab\" has 2 ocurrences in the original string.\nIt satisfies the conditions, 2 unique letters and size 3 (between minSize and maxSize)."}, {"full_text": "Example 2:\nInput: s = \"aaaa\", maxLetters = 1, minSize = 3, maxSize = 3\nOutput: 2\nExplanation: Substring \"aaa\" occur 2 times in the string. It can overlap.", "input": "Input: s = \"aaaa\", maxLetters = 1, minSize = 3, maxSize = 3", "output": "Output: 2", "explanation": "Explanation: Substring \"aaa\" occur 2 times in the string. It can overlap."}], "constraints": "Constraints:\n1 <= s.length <= 10^5\n1 <= maxLetters <= 26\n1 <= minSize <= maxSize <= min(26, s.length)\ns consists of only lowercase English letters.", "notes": ""}, "1296": {"label": "Medium", "title": "Divide Array in Sets of K Consecutive Numbers", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.564, "total_accepted": 56400.0, "total_submissions": 99900.0, "testcase_example": "'[1,2,3,3,4,4,5,6]\\n4'", "body": "Given an array of integers nums and a positive integer k, check whether it is possible to divide this array into sets of k consecutive numbers.\nReturn true if it is possible. Otherwise, return false.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,2,3,3,4,4,5,6], k = 4\nOutput: true\nExplanation: Array can be divided into [1,2,3,4] and [3,4,5,6].", "input": "Input: nums = [1,2,3,3,4,4,5,6], k = 4", "output": "Output: true", "explanation": "Explanation: Array can be divided into [1,2,3,4] and [3,4,5,6]."}, {"full_text": "Example 2:\nInput: nums = [3,2,1,2,3,4,3,4,5,9,10,11], k = 3\nOutput: true\nExplanation: Array can be divided into [1,2,3] , [2,3,4] , [3,4,5] and [9,10,11].", "input": "Input: nums = [3,2,1,2,3,4,3,4,5,9,10,11], k = 3", "output": "Output: true", "explanation": "Explanation: Array can be divided into [1,2,3] , [2,3,4] , [3,4,5] and [9,10,11]."}, {"full_text": "Example 3:\nInput: nums = [1,2,3,4], k = 3\nOutput: false\nExplanation: Each array should be divided in subarrays of size 3.", "input": "Input: nums = [1,2,3,4], k = 3", "output": "Output: false", "explanation": "Explanation: Each array should be divided in subarrays of size 3."}], "constraints": "Constraints:\n1 <= k <= nums.length <= 10^5\n1 <= nums[i] <= 10^9", "notes": "Note: This question is the same as\n846:\nhttps://leetcode.com/problems/hand-of-straights/"}, "1292": {"label": "Medium", "title": "Maximum Side Length of a Square with Sum Less than or Equal to Threshold", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5219, "total_accepted": 22800.0, "total_submissions": 43700.0, "testcase_example": "'[[1,1,3,2,4,3,2],[1,1,3,2,4,3,2],[1,1,3,2,4,3,2]]\\n4'", "body": "Given a m x n matrix mat and an integer threshold, return the maximum side-length of a square with a sum less than or equal to threshold or return 0 if there is no such square.", "examples": [{"full_text": "Example 1:\nInput: mat = [[1,1,3,2,4,3,2],[1,1,3,2,4,3,2],[1,1,3,2,4,3,2]], threshold = 4\nOutput: 2\nExplanation: The maximum side length of square with sum less than 4 is 2 as shown.", "input": "Input: mat = [[1,1,3,2,4,3,2],[1,1,3,2,4,3,2],[1,1,3,2,4,3,2]], threshold = 4", "output": "Output: 2", "explanation": "Explanation: The maximum side length of square with sum less than 4 is 2 as shown."}, {"full_text": "Example 2:\nInput: mat = [[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2]], threshold = 1\nOutput: 0", "input": "Input: mat = [[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2]], threshold = 1", "output": "Output: 0", "explanation": ""}], "constraints": "Constraints:\nm == mat.length\nn == mat[i].length\n1 <= m, n <= 300\n0 <= mat[i][j] <= 10^4\n0 <= threshold <= 10^5", "notes": ""}, "1291": {"label": "Medium", "title": "Sequential Digits", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.608, "total_accepted": 73800.0, "total_submissions": 121300.0, "testcase_example": "'100\\n300'", "body": "An\ninteger has sequential digits if and only if each digit in the number is one more than the previous digit.\nReturn a sorted list of all the integers\nin the range [low, high]\ninclusive that have sequential digits.", "examples": [{"full_text": "Example 1:\nInput: low = 100, high = 300\nOutput: [123,234]", "input": "Input: low = 100, high = 300", "output": "Output: [123,234]", "explanation": ""}, {"full_text": "Example 2:\nInput: low = 1000, high = 13000\nOutput: [1234,2345,3456,4567,5678,6789,12345]", "input": "Input: low = 1000, high = 13000", "output": "Output: [1234,2345,3456,4567,5678,6789,12345]", "explanation": ""}], "constraints": "Constraints:\n10 <= low <= high <= 10^9", "notes": ""}, "1288": {"label": "Medium", "title": "Remove Covered Intervals", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5783, "total_accepted": 54000.0, "total_submissions": 93400.0, "testcase_example": "'[[1,4],[3,6],[2,8]]'", "body": "Given an array intervals where intervals[i] = [li, ri] represent the interval [li, ri), remove all intervals that are covered by another interval in the list.\nThe interval [a, b) is covered by the interval [c, d) if and only if c <= a and b <= d.\nReturn the number of remaining intervals.", "examples": [{"full_text": "Example 1:\nInput: intervals = [[1,4],[3,6],[2,8]]\nOutput: 2\nExplanation: Interval [3,6] is covered by [2,8], therefore it is removed.", "input": "Input: intervals = [[1,4],[3,6],[2,8]]", "output": "Output: 2", "explanation": "Explanation: Interval [3,6] is covered by [2,8], therefore it is removed."}, {"full_text": "Example 2:\nInput: intervals = [[1,4],[2,3]]\nOutput: 1", "input": "Input: intervals = [[1,4],[2,3]]", "output": "Output: 1", "explanation": ""}], "constraints": "Constraints:\n1 <= intervals.length <= 1000\nintervals[i].length == 2\n0 <= li <= ri <= 10^5\nAll the given intervals are unique.", "notes": ""}, "1286": {"label": "Medium", "title": "Iterator for Combination", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7315, "total_accepted": 60800.0, "total_submissions": 83100.0, "testcase_example": "'[\"CombinationIterator\",\"next\",\"hasNext\",\"next\",\"hasNext\",\"next\",\"hasNext\"]\\n' +\n  '[[\"abc\",2],[],[],[],[],[],[]]'", "body": "Design the CombinationIterator class:\nCombinationIterator(string characters, int combinationLength) Initializes the object with a string characters of sorted distinct lowercase English letters and a number combinationLength as arguments.\nnext() Returns the next combination of length combinationLength in lexicographical order.\nhasNext() Returns true if and only if there exists a next combination.", "examples": [{"full_text": "Example 1:\nInput\n[\"CombinationIterator\", \"next\", \"hasNext\", \"next\", \"hasNext\", \"next\", \"hasNext\"]\n[[\"abc\", 2], [], [], [], [], [], []]\nOutput\n[null, \"ab\", true, \"ac\", true, \"bc\", false]\nExplanation\nCombinationIterator itr = new CombinationIterator(\"abc\", 2);\nitr.next(); // return \"ab\"\nitr.hasNext(); // return True\nitr.next(); // return \"ac\"\nitr.hasNext(); // return True\nitr.next(); // return \"bc\"\nitr.hasNext(); // return False", "input": "Input\n[\"CombinationIterator\", \"next\", \"hasNext\", \"next\", \"hasNext\", \"next\", \"hasNext\"]\n[[\"abc\", 2], [], [], [], [], [], []]", "output": "Output\n[null, \"ab\", true, \"ac\", true, \"bc\", false]", "explanation": "Explanation\nCombinationIterator itr = new CombinationIterator(\"abc\", 2);\nitr.next(); // return \"ab\"\nitr.hasNext(); // return True\nitr.next(); // return \"ac\"\nitr.hasNext(); // return True\nitr.next(); // return \"bc\"\nitr.hasNext(); // return False"}], "constraints": "Constraints:\n1 <= combinationLength <= characters.length <= 15\nAll the characters of characters are unique.\nAt most 10^4 calls will be made to next and hasNext.\nIt is guaranteed that all calls of the function next are valid.", "notes": ""}, "1283": {"label": "Medium", "title": "Find the Smallest Divisor Given a Threshold", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5318999999999999, "total_accepted": 76300.0, "total_submissions": 143500.0, "testcase_example": "'[1,2,5,9]\\n6'", "body": "Given an array of integers nums and an integer threshold, we will choose a positive integer divisor, divide all the array by it, and sum the division's result. Find the smallest divisor such that the result mentioned above is less than or equal to threshold.\nEach result of the division is rounded to the nearest integer greater than or equal to that element. (For example: 7/3 = 3 and 10/2 = 5).\nThe test cases are generated so\nthat there will be an answer.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,2,5,9], threshold = 6\nOutput: 5\nExplanation: We can get a sum to 17 (1+2+5+9) if the divisor is 1.\nIf the divisor is 4 we can get a sum of 7 (1+1+2+3) and if the divisor is 5 the sum will be 5 (1+1+1+2).", "input": "Input: nums = [1,2,5,9], threshold = 6", "output": "Output: 5", "explanation": "Explanation: We can get a sum to 17 (1+2+5+9) if the divisor is 1.\nIf the divisor is 4 we can get a sum of 7 (1+1+2+3) and if the divisor is 5 the sum will be 5 (1+1+1+2)."}, {"full_text": "Example 2:\nInput: nums = [44,22,33,11,1], threshold = 5\nOutput: 44", "input": "Input: nums = [44,22,33,11,1], threshold = 5", "output": "Output: 44", "explanation": ""}], "constraints": "Constraints:\n1 <= nums.length <= 5 * 10^4\n1 <= nums[i] <= 10^6\nnums.length <= threshold <= 10^6", "notes": ""}, "1282": {"label": "Medium", "title": "Group the People Given the Group Size They Belong To", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.8517, "total_accepted": 75200.0, "total_submissions": 88200.0, "testcase_example": "'[3,3,3,3,3,1,3]'", "body": "There are n people\nthat are split into some unknown number of groups. Each person is labeled with a\nunique ID\nfrom\n0\nto\nn - 1.\nYou are given an integer array\ngroupSizes, where groupSizes[i]\nis the size of the group that person\ni\nis in. For example, if\ngroupSizes[1] = 3, then\nperson\n1\nmust be in a\ngroup of size\n3.\nReturn\na list of groups\nsuch that\neach person\ni\nis in a group of size\ngroupSizes[i].\nEach person should\nappear in\nexactly one group,\nand every person must be in a group. If there are\nmultiple answers, return any of them. It is guaranteed that there will be at least one valid solution for the given input.", "examples": [{"full_text": "Example 1:\nInput: groupSizes = [3,3,3,3,3,1,3]\nOutput: [[5],[0,1,2],[3,4,6]]\nExplanation:\nThe first group is [5]. The size is 1, and groupSizes[5] = 1.\nThe second group is [0,1,2]. The size is 3, and groupSizes[0] = groupSizes[1] = groupSizes[2] = 3.\nThe third group is [3,4,6]. The size is 3, and groupSizes[3] = groupSizes[4] = groupSizes[6] = 3.\nOther possible solutions are [[2,1,6],[5],[0,4,3]] and [[5],[0,6,2],[4,3,1]].", "input": "Input: groupSizes = [3,3,3,3,3,1,3]", "output": "Output: [[5],[0,1,2],[3,4,6]]", "explanation": "Explanation:\nThe first group is [5]. The size is 1, and groupSizes[5] = 1.\nThe second group is [0,1,2]. The size is 3, and groupSizes[0] = groupSizes[1] = groupSizes[2] = 3.\nThe third group is [3,4,6]. The size is 3, and groupSizes[3] = groupSizes[4] = groupSizes[6] = 3.\nOther possible solutions are [[2,1,6],[5],[0,4,3]] and [[5],[0,6,2],[4,3,1]]."}, {"full_text": "Example 2:\nInput: groupSizes = [2,1,3,3,3,2]\nOutput: [[1],[0,5],[2,3,4]]", "input": "Input: groupSizes = [2,1,3,3,3,2]", "output": "Output: [[1],[0,5],[2,3,4]]", "explanation": ""}], "constraints": "Constraints:\ngroupSizes.length == n\n1 <= n\n<= 500\n1 <=\ngroupSizes[i] <= n", "notes": ""}, "1277": {"label": "Medium", "title": "Count Square Submatrices with All Ones", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7412000000000001, "total_accepted": 152300.0, "total_submissions": 205400.0, "testcase_example": "'[[0,1,1,1],[1,1,1,1],[0,1,1,1]]'", "body": "Given a m * n matrix of ones and zeros, return how many square submatrices have all ones.", "examples": [{"full_text": "Example 1:\nInput: matrix =\n[\n[0,1,1,1],\n[1,1,1,1],\n[0,1,1,1]\n]\nOutput: 15\nExplanation:\nThere are 10 squares of side 1.\nThere are 4 squares of side 2.\nThere is 1 square of side 3.\nTotal number of squares = 10 + 4 + 1 = 15.", "input": "Input: matrix =\n[\n[0,1,1,1],\n[1,1,1,1],\n[0,1,1,1]\n]", "output": "Output: 15", "explanation": "Explanation:\nThere are 10 squares of side 1.\nThere are 4 squares of side 2.\nThere is 1 square of side 3.\nTotal number of squares = 10 + 4 + 1 = 15."}, {"full_text": "Example 2:\nInput: matrix =\n[\n[1,0,1],\n[1,1,0],\n[1,1,0]\n]\nOutput: 7\nExplanation:\nThere are 6 squares of side 1.\nThere is 1 square of side 2.\nTotal number of squares = 6 + 1 = 7.", "input": "Input: matrix =\n[\n[1,0,1],\n[1,1,0],\n[1,1,0]\n]", "output": "Output: 7", "explanation": "Explanation:\nThere are 6 squares of side 1.\nThere is 1 square of side 2.\nTotal number of squares = 6 + 1 = 7."}], "constraints": "Constraints:\n1 <= arr.length\n<= 300\n1 <= arr[0].length\n<= 300\n0 <= arr[i][j] <= 1", "notes": ""}, "1276": {"label": "Medium", "title": "Number of Burgers with No Waste of Ingredients", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5068, "total_accepted": 17300.0, "total_submissions": 34000.0, "testcase_example": "'16\\n7'", "body": "Given two integers tomatoSlices and cheeseSlices. The ingredients of different burgers are as follows:\nJumbo Burger: 4 tomato slices and 1 cheese slice.\nSmall Burger: 2 Tomato slices and 1 cheese slice.\nReturn [total_jumbo, total_small] so that the number of remaining tomatoSlices equal to 0 and the number of remaining cheeseSlices equal to 0. If it is not possible to make the remaining tomatoSlices and cheeseSlices equal to 0 return [].", "examples": [{"full_text": "Example 1:\nInput: tomatoSlices = 16, cheeseSlices = 7\nOutput: [1,6]\nExplantion: To make one jumbo burger and 6 small burgers we need 4*1 + 2*6 = 16 tomato and 1 + 6 = 7 cheese.\nThere will be no remaining ingredients.", "input": "Input: tomatoSlices = 16, cheeseSlices = 7", "output": "Output: [1,6]\nExplantion: To make one jumbo burger and 6 small burgers we need 4*1 + 2*6 = 16 tomato and 1 + 6 = 7 cheese.\nThere will be no remaining ingredients.", "explanation": ""}, {"full_text": "Example 2:\nInput: tomatoSlices = 17, cheeseSlices = 4\nOutput: []\nExplantion: There will be no way to use all ingredients to make small and jumbo burgers.", "input": "Input: tomatoSlices = 17, cheeseSlices = 4", "output": "Output: []\nExplantion: There will be no way to use all ingredients to make small and jumbo burgers.", "explanation": ""}, {"full_text": "Example 3:\nInput: tomatoSlices = 4, cheeseSlices = 17\nOutput: []\nExplantion: Making 1 jumbo burger there will be 16 cheese remaining and making 2 small burgers there will be 15 cheese remaining.", "input": "Input: tomatoSlices = 4, cheeseSlices = 17", "output": "Output: []\nExplantion: Making 1 jumbo burger there will be 16 cheese remaining and making 2 small burgers there will be 15 cheese remaining.", "explanation": ""}], "constraints": "Constraints:\n0 <= tomatoSlices, cheeseSlices <= 10^7", "notes": ""}, "1268": {"label": "Medium", "title": "Search Suggestions System", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6557999999999999, "total_accepted": 135300.0, "total_submissions": 206300.0, "testcase_example": "'[\"mobile\",\"mouse\",\"moneypot\",\"monitor\",\"mousepad\"]\\n\"mouse\"'", "body": "You are given an array of strings products and a string searchWord.\nDesign a system that suggests at most three product names from products after each character of searchWord is typed. Suggested products should have common prefix with searchWord. If there are more than three products with a common prefix return the three lexicographically minimums products.\nReturn a list of lists of the suggested products after each character of searchWord is typed.", "examples": [{"full_text": "Example 1:\nInput: products = [\"mobile\",\"mouse\",\"moneypot\",\"monitor\",\"mousepad\"], searchWord = \"mouse\"\nOutput: [\n[\"mobile\",\"moneypot\",\"monitor\"],\n[\"mobile\",\"moneypot\",\"monitor\"],\n[\"mouse\",\"mousepad\"],\n[\"mouse\",\"mousepad\"],\n[\"mouse\",\"mousepad\"]\n]\nExplanation: products sorted lexicographically = [\"mobile\",\"moneypot\",\"monitor\",\"mouse\",\"mousepad\"]\nAfter typing m and mo all products match and we show user [\"mobile\",\"moneypot\",\"monitor\"]\nAfter typing mou, mous and mouse the system suggests [\"mouse\",\"mousepad\"]", "input": "Input: products = [\"mobile\",\"mouse\",\"moneypot\",\"monitor\",\"mousepad\"], searchWord = \"mouse\"", "output": "Output: [\n[\"mobile\",\"moneypot\",\"monitor\"],\n[\"mobile\",\"moneypot\",\"monitor\"],\n[\"mouse\",\"mousepad\"],\n[\"mouse\",\"mousepad\"],\n[\"mouse\",\"mousepad\"]\n]", "explanation": "Explanation: products sorted lexicographically = [\"mobile\",\"moneypot\",\"monitor\",\"mouse\",\"mousepad\"]\nAfter typing m and mo all products match and we show user [\"mobile\",\"moneypot\",\"monitor\"]\nAfter typing mou, mous and mouse the system suggests [\"mouse\",\"mousepad\"]"}, {"full_text": "Example 2:\nInput: products = [\"havana\"], searchWord = \"havana\"\nOutput: [[\"havana\"],[\"havana\"],[\"havana\"],[\"havana\"],[\"havana\"],[\"havana\"]]", "input": "Input: products = [\"havana\"], searchWord = \"havana\"", "output": "Output: [[\"havana\"],[\"havana\"],[\"havana\"],[\"havana\"],[\"havana\"],[\"havana\"]]", "explanation": ""}, {"full_text": "Example 3:\nInput: products = [\"bags\",\"baggage\",\"banner\",\"box\",\"cloths\"], searchWord = \"bags\"\nOutput: [[\"baggage\",\"bags\",\"banner\"],[\"baggage\",\"bags\",\"banner\"],[\"baggage\",\"bags\"],[\"bags\"]]", "input": "Input: products = [\"bags\",\"baggage\",\"banner\",\"box\",\"cloths\"], searchWord = \"bags\"", "output": "Output: [[\"baggage\",\"bags\",\"banner\"],[\"baggage\",\"bags\",\"banner\"],[\"baggage\",\"bags\"],[\"bags\"]]", "explanation": ""}], "constraints": "Constraints:\n1 <= products.length <= 1000\n1 <= products[i].length <= 3000\n1 <= sum(products[i].length) <= 2 * 10^4\nAll the strings of products are unique.\nproducts[i] consists of lowercase English letters.\n1 <= searchWord.length <= 1000\nsearchWord consists of lowercase English letters.", "notes": ""}, "1267": {"label": "Medium", "title": "Count Servers that Communicate", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5806, "total_accepted": 38600.0, "total_submissions": 66400.0, "testcase_example": "'[[1,0],[0,1]]'", "body": "You are given a map of a server center, represented as a m * n integer matrix\ngrid, where 1 means that on that cell there is a server and 0 means that it is no server. Two servers are said to communicate if they are on the same row or on the same column.\nReturn the number of servers\nthat communicate with any other server.", "examples": [{"full_text": "Example 1:\nInput: grid = [[1,0],[0,1]]\nOutput: 0\nExplanation:\nNo servers can communicate with others.", "input": "Input: grid = [[1,0],[0,1]]", "output": "Output: 0", "explanation": "Explanation:\nNo servers can communicate with others."}, {"full_text": "Example 2:\nInput: grid = [[1,0],[1,1]]\nOutput: 3\nExplanation:\nAll three servers can communicate with at least one other server.", "input": "Input: grid = [[1,0],[1,1]]", "output": "Output: 3", "explanation": "Explanation:\nAll three servers can communicate with at least one other server."}, {"full_text": "Example 3:\nInput: grid = [[1,1,0,0],[0,0,1,0],[0,0,1,0],[0,0,0,1]]\nOutput: 4\nExplanation:\nThe two servers in the first row can communicate with each other. The two servers in the third column can communicate with each other. The server at right bottom corner can't communicate with any other server.", "input": "Input: grid = [[1,1,0,0],[0,0,1,0],[0,0,1,0],[0,0,0,1]]", "output": "Output: 4", "explanation": "Explanation:\nThe two servers in the first row can communicate with each other. The two servers in the third column can communicate with each other. The server at right bottom corner can't communicate with any other server."}], "constraints": "Constraints:\nm == grid.length\nn == grid[i].length\n1 <= m <= 250\n1 <= n <= 250\ngrid[i][j] == 0 or 1", "notes": ""}, "1262": {"label": "Medium", "title": "Greatest Sum Divisible by Three", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5077, "total_accepted": 36100.0, "total_submissions": 71000.0, "testcase_example": "'[3,6,5,1,8]'", "body": "Given an array\nnums\nof integers, we need to find the maximum possible sum of elements of the array such that it is divisible by three.", "examples": [{"full_text": "Example 1:\nInput: nums = [3,6,5,1,8]\nOutput: 18\nExplanation: Pick numbers 3, 6, 1 and 8 their sum is 18 (maximum sum divisible by 3).", "input": "Input: nums = [3,6,5,1,8]", "output": "Output: 18", "explanation": "Explanation: Pick numbers 3, 6, 1 and 8 their sum is 18 (maximum sum divisible by 3)."}, {"full_text": "Example 2:\nInput: nums = [4]\nOutput: 0\nExplanation: Since 4 is not divisible by 3, do not pick any number.", "input": "Input: nums = [4]", "output": "Output: 0", "explanation": "Explanation: Since 4 is not divisible by 3, do not pick any number."}, {"full_text": "Example 3:\nInput: nums = [1,2,3,4,4]\nOutput: 12\nExplanation: Pick numbers 1, 3, 4 and 4 their sum is 12 (maximum sum divisible by 3).", "input": "Input: nums = [1,2,3,4,4]", "output": "Output: 12", "explanation": "Explanation: Pick numbers 1, 3, 4 and 4 their sum is 12 (maximum sum divisible by 3)."}], "constraints": "Constraints:\n1 <= nums.length <= 4 * 10^4\n1 <= nums[i] <= 10^4", "notes": ""}, "1261": {"label": "Medium", "title": "Find Elements in a Contaminated Binary Tree", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7561, "total_accepted": 41300.0, "total_submissions": 54600.0, "testcase_example": "'[\"FindElements\",\"find\",\"find\"]\\n[[[-1,null,-1]],[1],[2]]'", "body": "Given a binary tree with the following rules:\nroot.val == 0\nIf treeNode.val == x and treeNode.left != null, then treeNode.left.val == 2 * x + 1\nIf treeNode.val == x and treeNode.right != null, then treeNode.right.val == 2 * x + 2\nNow the binary tree is contaminated, which means all treeNode.val have been changed to -1.\nImplement the FindElements class:\nFindElements(TreeNode* root) Initializes the object with a contaminated binary tree and recovers it.\nbool find(int target) Returns true if the target value exists in the recovered binary tree.", "examples": [{"full_text": "Example 1:\nInput\n[\"FindElements\",\"find\",\"find\"]\n[[[-1,null,-1]],[1],[2]]\nOutput\n[null,false,true]\nExplanation\nFindElements findElements = new FindElements([-1,null,-1]);\nfindElements.find(1); // return False\nfindElements.find(2); // return True", "input": "Input\n[\"FindElements\",\"find\",\"find\"]\n[[[-1,null,-1]],[1],[2]]", "output": "Output\n[null,false,true]", "explanation": "Explanation\nFindElements findElements = new FindElements([-1,null,-1]);\nfindElements.find(1); // return False\nfindElements.find(2); // return True"}, {"full_text": "Example 2:\nInput\n[\"FindElements\",\"find\",\"find\",\"find\"]\n[[[-1,-1,-1,-1,-1]],[1],[3],[5]]\nOutput\n[null,true,true,false]\nExplanation\nFindElements findElements = new FindElements([-1,-1,-1,-1,-1]);\nfindElements.find(1); // return True\nfindElements.find(3); // return True\nfindElements.find(5); // return False", "input": "Input\n[\"FindElements\",\"find\",\"find\",\"find\"]\n[[[-1,-1,-1,-1,-1]],[1],[3],[5]]", "output": "Output\n[null,true,true,false]", "explanation": "Explanation\nFindElements findElements = new FindElements([-1,-1,-1,-1,-1]);\nfindElements.find(1); // return True\nfindElements.find(3); // return True\nfindElements.find(5); // return False"}, {"full_text": "Example 3:\nInput\n[\"FindElements\",\"find\",\"find\",\"find\",\"find\"]\n[[[-1,null,-1,-1,null,-1]],[2],[3],[4],[5]]\nOutput\n[null,true,false,false,true]\nExplanation\nFindElements findElements = new FindElements([-1,null,-1,-1,null,-1]);\nfindElements.find(2); // return True\nfindElements.find(3); // return False\nfindElements.find(4); // return False\nfindElements.find(5); // return True", "input": "Input\n[\"FindElements\",\"find\",\"find\",\"find\",\"find\"]\n[[[-1,null,-1,-1,null,-1]],[2],[3],[4],[5]]", "output": "Output\n[null,true,false,false,true]", "explanation": "Explanation\nFindElements findElements = new FindElements([-1,null,-1,-1,null,-1]);\nfindElements.find(2); // return True\nfindElements.find(3); // return False\nfindElements.find(4); // return False\nfindElements.find(5); // return True"}], "constraints": "Constraints:\nTreeNode.val == -1\nThe height of the binary tree is less than or equal to 20\nThe total number of nodes is between [1, 10^4]\nTotal calls of find() is between [1, 10^4]\n0 <= target <= 10^6", "notes": ""}, "1254": {"label": "Medium", "title": "Number of Closed Islands", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6303, "total_accepted": 72300.0, "total_submissions": 114800.0, "testcase_example": "'[[1,1,1,1,1,1,1,0],[1,0,0,0,0,1,1,0],[1,0,1,0,1,1,1,0],[1,0,0,0,0,1,0,1],[1,1,1,1,1,1,1,0]]'", "body": "Given a 2D\ngrid consists of 0s (land)\nand 1s (water).\nAn island is a maximal 4-directionally connected group of 0s and a closed island\nis an island totally\n(all left, top, right, bottom) surrounded by 1s.\nReturn the number of closed islands.", "examples": [{"full_text": "Example 1:\nInput: grid = [[1,1,1,1,1,1,1,0],[1,0,0,0,0,1,1,0],[1,0,1,0,1,1,1,0],[1,0,0,0,0,1,0,1],[1,1,1,1,1,1,1,0]]\nOutput: 2\nExplanation:\nIslands in gray are closed because they are completely surrounded by water (group of 1s).", "input": "Input: grid = [[1,1,1,1,1,1,1,0],[1,0,0,0,0,1,1,0],[1,0,1,0,1,1,1,0],[1,0,0,0,0,1,0,1],[1,1,1,1,1,1,1,0]]", "output": "Output: 2", "explanation": "Explanation:\nIslands in gray are closed because they are completely surrounded by water (group of 1s)."}, {"full_text": "Example 2:\nInput: grid = [[0,0,1,0,0],[0,1,0,1,0],[0,1,1,1,0]]\nOutput: 1", "input": "Input: grid = [[0,0,1,0,0],[0,1,0,1,0],[0,1,1,1,0]]", "output": "Output: 1", "explanation": ""}, {"full_text": "Example 3:\nInput: grid = [[1,1,1,1,1,1,1],\n[1,0,0,0,0,0,1],\n[1,0,1,1,1,0,1],\n[1,0,1,0,1,0,1],\n[1,0,1,1,1,0,1],\n[1,0,0,0,0,0,1],\n[1,1,1,1,1,1,1]]\nOutput: 2", "input": "Input: grid = [[1,1,1,1,1,1,1],\n[1,0,0,0,0,0,1],\n[1,0,1,1,1,0,1],\n[1,0,1,0,1,0,1],\n[1,0,1,1,1,0,1],\n[1,0,0,0,0,0,1],\n[1,1,1,1,1,1,1]]", "output": "Output: 2", "explanation": ""}], "constraints": "Constraints:\n1 <= grid.length, grid[0].length <= 100\n0 <= grid[i][j] <=1", "notes": ""}, "1253": {"label": "Medium", "title": "Reconstruct a 2-Row Binary Matrix", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.43, "total_accepted": 18400.0, "total_submissions": 42800.0, "testcase_example": "'2\\n1\\n[1,1,1]'", "body": "Given the following details of a matrix with n columns and 2 rows :\nThe matrix is a binary matrix, which means each element in the matrix can be 0 or 1.\nThe sum of elements of the 0-th(upper) row is given as upper.\nThe sum of elements of the 1-st(lower) row is given as lower.\nThe sum of elements in the i-th column(0-indexed) is colsum[i], where colsum is given as an integer array with length n.\nYour task is to reconstruct the matrix with upper, lower and colsum.\nReturn it as a 2-D integer array.\nIf there are more than one valid solution, any of them will be accepted.\nIf no valid solution exists, return an empty 2-D array.", "examples": [{"full_text": "Example 1:\nInput: upper = 2, lower = 1, colsum = [1,1,1]\nOutput: [[1,1,0],[0,0,1]]\nExplanation: [[1,0,1],[0,1,0]], and [[0,1,1],[1,0,0]] are also correct answers.", "input": "Input: upper = 2, lower = 1, colsum = [1,1,1]", "output": "Output: [[1,1,0],[0,0,1]]", "explanation": "Explanation: [[1,0,1],[0,1,0]], and [[0,1,1],[1,0,0]] are also correct answers."}, {"full_text": "Example 2:\nInput: upper = 2, lower = 3, colsum = [2,2,1,1]\nOutput: []", "input": "Input: upper = 2, lower = 3, colsum = [2,2,1,1]", "output": "Output: []", "explanation": ""}, {"full_text": "Example 3:\nInput: upper = 5, lower = 5, colsum = [2,1,2,0,1,0,1,2,0,1]\nOutput: [[1,1,1,0,1,0,0,1,0,0],[1,0,1,0,0,0,1,1,0,1]]", "input": "Input: upper = 5, lower = 5, colsum = [2,1,2,0,1,0,1,2,0,1]", "output": "Output: [[1,1,1,0,1,0,0,1,0,0],[1,0,1,0,0,0,1,1,0,1]]", "explanation": ""}], "constraints": "Constraints:\n1 <= colsum.length <= 10^5\n0 <= upper, lower <= colsum.length\n0 <= colsum[i] <= 2", "notes": ""}, "1249": {"label": "Medium", "title": "Minimum Remove to Make Valid Parentheses", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6520999999999999, "total_accepted": 339100.0, "total_submissions": 520000.0, "testcase_example": "'\"lee(t(c)o)de)\"'", "body": "Given a string s of '(' , ')' and lowercase English characters.\nYour task is to remove the minimum number of parentheses ( '(' or ')', in any positions ) so that the resulting parentheses string is valid and return any valid string.\nFormally, a parentheses string is valid if and only if:\nIt is the empty string, contains only lowercase characters, or\nIt can be written as AB (A concatenated with B), where A and B are valid strings, or\nIt can be written as (A), where A is a valid string.", "examples": [{"full_text": "Example 1:\nInput: s = \"lee(t(c)o)de)\"\nOutput: \"lee(t(c)o)de\"\nExplanation: \"lee(t(co)de)\" , \"lee(t(c)ode)\" would also be accepted.", "input": "Input: s = \"lee(t(c)o)de)\"", "output": "Output: \"lee(t(c)o)de\"", "explanation": "Explanation: \"lee(t(co)de)\" , \"lee(t(c)ode)\" would also be accepted."}, {"full_text": "Example 2:\nInput: s = \"a)b(c)d\"\nOutput: \"ab(c)d\"", "input": "Input: s = \"a)b(c)d\"", "output": "Output: \"ab(c)d\"", "explanation": ""}, {"full_text": "Example 3:\nInput: s = \"))((\"\nOutput: \"\"\nExplanation: An empty string is also valid.", "input": "Input: s = \"))((\"", "output": "Output: \"\"", "explanation": "Explanation: An empty string is also valid."}], "constraints": "Constraints:\n1 <= s.length <= 10^5\ns[i] is either'(' , ')', or lowercase English letter.", "notes": ""}, "1248": {"label": "Medium", "title": "Count Number of Nice Subarrays", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5825, "total_accepted": 48400.0, "total_submissions": 83100.0, "testcase_example": "'[1,1,2,1,1]\\n3'", "body": "Given an array of integers nums and an integer k. A continuous subarray is called nice if there are k odd numbers on it.\nReturn the number of nice sub-arrays.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,1,2,1,1], k = 3\nOutput: 2\nExplanation: The only sub-arrays with 3 odd numbers are [1,1,2,1] and [1,2,1,1].", "input": "Input: nums = [1,1,2,1,1], k = 3", "output": "Output: 2", "explanation": "Explanation: The only sub-arrays with 3 odd numbers are [1,1,2,1] and [1,2,1,1]."}, {"full_text": "Example 2:\nInput: nums = [2,4,6], k = 1\nOutput: 0\nExplanation: There is no odd numbers in the array.", "input": "Input: nums = [2,4,6], k = 1", "output": "Output: 0", "explanation": "Explanation: There is no odd numbers in the array."}, {"full_text": "Example 3:\nInput: nums = [2,2,2,1,2,2,1,2,2,2], k = 2\nOutput: 16", "input": "Input: nums = [2,2,2,1,2,2,1,2,2,2], k = 2", "output": "Output: 16", "explanation": ""}], "constraints": "Constraints:\n1 <= nums.length <= 50000\n1 <= nums[i] <= 10^5\n1 <= k <= nums.length", "notes": ""}, "1247": {"label": "Medium", "title": "Minimum Swaps to Make Strings Equal", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6365999999999999, "total_accepted": 26400.0, "total_submissions": 41500.0, "testcase_example": "'\"xx\"\\n\"yy\"'", "body": "You are given two strings s1 and s2 of equal length consisting of letters \"x\" and \"y\" only. Your task is to make these two strings equal to each other. You can swap any two characters that belong to different strings, which means: swap s1[i] and s2[j].\nReturn the minimum number of swaps required to make s1 and s2 equal, or return -1 if it is impossible to do so.", "examples": [{"full_text": "Example 1:\nInput: s1 = \"xx\", s2 = \"yy\"\nOutput: 1\nExplanation: Swap s1[0] and s2[1], s1 = \"yx\", s2 = \"yx\".", "input": "Input: s1 = \"xx\", s2 = \"yy\"", "output": "Output: 1", "explanation": "Explanation: Swap s1[0] and s2[1], s1 = \"yx\", s2 = \"yx\"."}, {"full_text": "Example 2:\nInput: s1 = \"xy\", s2 = \"yx\"\nOutput: 2\nExplanation: Swap s1[0] and s2[0], s1 = \"yy\", s2 = \"xx\".\nSwap s1[0] and s2[1], s1 = \"xy\", s2 = \"xy\".\nNote that you cannot swap s1[0] and s1[1] to make s1 equal to \"yx\", cause we can only swap chars in different strings.", "input": "Input: s1 = \"xy\", s2 = \"yx\"", "output": "Output: 2", "explanation": "Explanation: Swap s1[0] and s2[0], s1 = \"yy\", s2 = \"xx\".\nSwap s1[0] and s2[1], s1 = \"xy\", s2 = \"xy\".\nNote that you cannot swap s1[0] and s1[1] to make s1 equal to \"yx\", cause we can only swap chars in different strings."}, {"full_text": "Example 3:\nInput: s1 = \"xx\", s2 = \"xy\"\nOutput: -1", "input": "Input: s1 = \"xx\", s2 = \"xy\"", "output": "Output: -1", "explanation": ""}], "constraints": "Constraints:\n1 <= s1.length, s2.length <= 1000\ns1, s2 only contain 'x' or 'y'.", "notes": ""}, "1239": {"label": "Medium", "title": "Maximum Length of a Concatenated String with Unique Characters", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5062, "total_accepted": 101400.0, "total_submissions": 200400.0, "testcase_example": "'[\"un\",\"iq\",\"ue\"]'", "body": "You are given an array of strings arr. A string s is formed by the concatenation of a subsequence of arr that has unique characters.\nReturn the maximum possible length of s.\nA subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.", "examples": [{"full_text": "Example 1:\nInput: arr = [\"un\",\"iq\",\"ue\"]\nOutput: 4\nExplanation: All the valid concatenations are:\n- \"\"\n- \"un\"\n- \"iq\"\n- \"ue\"\n- \"uniq\" (\"un\" + \"iq\")\n- \"ique\" (\"iq\" + \"ue\")\nMaximum length is 4.", "input": "Input: arr = [\"un\",\"iq\",\"ue\"]", "output": "Output: 4", "explanation": "Explanation: All the valid concatenations are:\n- \"\"\n- \"un\"\n- \"iq\"\n- \"ue\"\n- \"uniq\" (\"un\" + \"iq\")\n- \"ique\" (\"iq\" + \"ue\")\nMaximum length is 4."}, {"full_text": "Example 2:\nInput: arr = [\"cha\",\"r\",\"act\",\"ers\"]\nOutput: 6\nExplanation: Possible longest valid concatenations are \"chaers\" (\"cha\" + \"ers\") and \"acters\" (\"act\" + \"ers\").", "input": "Input: arr = [\"cha\",\"r\",\"act\",\"ers\"]", "output": "Output: 6", "explanation": "Explanation: Possible longest valid concatenations are \"chaers\" (\"cha\" + \"ers\") and \"acters\" (\"act\" + \"ers\")."}, {"full_text": "Example 3:\nInput: arr = [\"abcdefghijklmnopqrstuvwxyz\"]\nOutput: 26\nExplanation: The only string in arr has all 26 characters.", "input": "Input: arr = [\"abcdefghijklmnopqrstuvwxyz\"]", "output": "Output: 26", "explanation": "Explanation: The only string in arr has all 26 characters."}], "constraints": "Constraints:\n1 <= arr.length <= 16\n1 <= arr[i].length <= 26\narr[i] contains only lowercase English letters.", "notes": ""}, "1238": {"label": "Medium", "title": "Circular Permutation in Binary Representation", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6809000000000001, "total_accepted": 11600.0, "total_submissions": 17100.0, "testcase_example": "'2\\n3'", "body": "Given 2 integers n and start. Your task is return any permutation p\nof (0,1,2.....,2^n -1) such that :\np[0] = start\np[i] and p[i+1]\ndiffer by only one bit in their binary representation.\np[0] and p[2^n -1]\nmust also differ by only one bit in their binary representation.", "examples": [{"full_text": "Example 1:\nInput: n = 2, start = 3\nOutput: [3,2,0,1]\nExplanation: The binary representation of the permutation is (11,10,00,01).\nAll the adjacent element differ by one bit. Another valid permutation is [3,1,0,2]", "input": "Input: n = 2, start = 3", "output": "Output: [3,2,0,1]", "explanation": "Explanation: The binary representation of the permutation is (11,10,00,01).\nAll the adjacent element differ by one bit. Another valid permutation is [3,1,0,2]"}, {"full_text": "Example 2:\nInput: n = 3, start = 2\nOutput: [2,6,7,5,4,0,1,3]\nExplanation: The binary representation of the permutation is (010,110,111,101,100,000,001,011).", "input": "Input: n = 3, start = 2", "output": "Output: [2,6,7,5,4,0,1,3]", "explanation": "Explanation: The binary representation of the permutation is (010,110,111,101,100,000,001,011)."}], "constraints": "Constraints:\n1 <= n <= 16\n0 <= start\n<\n2 ^ n", "notes": ""}, "1237": {"label": "Medium", "title": "Find Positive Integer Solution for a Given Equation", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6943, "total_accepted": 46500.0, "total_submissions": 66900.0, "testcase_example": "'1\\n5'", "body": "Given a callable function f(x, y) with a hidden formula and a value z, reverse engineer the formula and return all positive integer pairs x and y where f(x,y) == z. You may return the pairs in any order.\nWhile the exact formula is hidden, the function is monotonically increasing, i.e.:\nf(x, y) < f(x + 1, y)\nf(x, y) < f(x, y + 1)\nThe function interface is defined like this:\ninterface CustomFunction {\npublic:\n// Returns some positive integer f(x, y) for two positive integers x and y based on a formula.\nint f(int x, int y);\n};\nWe will judge your solution as follows:\nThe judge has a list of 9 hidden implementations of CustomFunction, along with a way to generate an answer key of all valid pairs for a specific z.\nThe judge will receive two inputs: a function_id (to determine which implementation to test your code with), and the target z.\nThe judge will call your findSolution and compare your results with the answer key.\nIf your results match the answer key, your solution will be Accepted.", "examples": [{"full_text": "Example 1:\nInput: function_id = 1, z = 5\nOutput: [[1,4],[2,3],[3,2],[4,1]]\nExplanation: The hidden formula for function_id = 1 is f(x, y) = x + y.\nThe following positive integer values of x and y make f(x, y) equal to 5:\nx=1, y=4 -> f(1, 4) = 1 + 4 = 5.\nx=2, y=3 -> f(2, 3) = 2 + 3 = 5.\nx=3, y=2 -> f(3, 2) = 3 + 2 = 5.\nx=4, y=1 -> f(4, 1) = 4 + 1 = 5.", "input": "Input: function_id = 1, z = 5", "output": "Output: [[1,4],[2,3],[3,2],[4,1]]", "explanation": "Explanation: The hidden formula for function_id = 1 is f(x, y) = x + y.\nThe following positive integer values of x and y make f(x, y) equal to 5:\nx=1, y=4 -> f(1, 4) = 1 + 4 = 5.\nx=2, y=3 -> f(2, 3) = 2 + 3 = 5.\nx=3, y=2 -> f(3, 2) = 3 + 2 = 5.\nx=4, y=1 -> f(4, 1) = 4 + 1 = 5."}, {"full_text": "Example 2:\nInput: function_id = 2, z = 5\nOutput: [[1,5],[5,1]]\nExplanation: The hidden formula for function_id = 2 is f(x, y) = x * y.\nThe following positive integer values of x and y make f(x, y) equal to 5:\nx=1, y=5 -> f(1, 5) = 1 * 5 = 5.\nx=5, y=1 -> f(5, 1) = 5 * 1 = 5.", "input": "Input: function_id = 2, z = 5", "output": "Output: [[1,5],[5,1]]", "explanation": "Explanation: The hidden formula for function_id = 2 is f(x, y) = x * y.\nThe following positive integer values of x and y make f(x, y) equal to 5:\nx=1, y=5 -> f(1, 5) = 1 * 5 = 5.\nx=5, y=1 -> f(5, 1) = 5 * 1 = 5."}], "constraints": "Constraints:\n1 <= function_id <= 9\n1 <= z <= 100\nIt is guaranteed that the solutions of f(x, y) == z will be in the range 1 <= x, y <= 1000.\nIt is also guaranteed that f(x, y) will fit in 32 bit signed integer if 1 <= x, y <= 1000.", "notes": ""}, "1234": {"label": "Medium", "title": "Replace the Substring for Balanced String", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.35969999999999996, "total_accepted": 21500.0, "total_submissions": 59800.0, "testcase_example": "'\"QWER\"'", "body": "You are given a string s of length n containing only four kinds of characters: 'Q', 'W', 'E', and 'R'.\nA string is said to be balanced if each of its characters appears n / 4 times where n is the length of the string.\nReturn the minimum length of the substring that can be replaced with any other string of the same length to make s balanced. If s is already balanced, return 0.", "examples": [{"full_text": "Example 1:\nInput: s = \"QWER\"\nOutput: 0\nExplanation: s is already balanced.", "input": "Input: s = \"QWER\"", "output": "Output: 0", "explanation": "Explanation: s is already balanced."}, {"full_text": "Example 2:\nInput: s = \"QQWE\"\nOutput: 1\nExplanation: We need to replace a 'Q' to 'R', so that \"RQWE\" (or \"QRWE\") is balanced.", "input": "Input: s = \"QQWE\"", "output": "Output: 1", "explanation": "Explanation: We need to replace a 'Q' to 'R', so that \"RQWE\" (or \"QRWE\") is balanced."}, {"full_text": "Example 3:\nInput: s = \"QQQW\"\nOutput: 2\nExplanation: We can replace the first \"QQ\" to \"ER\".", "input": "Input: s = \"QQQW\"", "output": "Output: 2", "explanation": "Explanation: We can replace the first \"QQ\" to \"ER\"."}], "constraints": "Constraints:\nn == s.length\n4 <= n <= 10^5\nn is a multiple of 4.\ns contains only 'Q', 'W', 'E', and 'R'.", "notes": ""}, "1233": {"label": "Medium", "title": "Remove Sub-Folders from the Filesystem", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6487999999999999, "total_accepted": 40400.0, "total_submissions": 62200.0, "testcase_example": "'[\"/a\",\"/a/b\",\"/c/d\",\"/c/d/e\",\"/c/f\"]'", "body": "Given a list of folders folder, return the folders after removing all sub-folders in those folders. You may return the answer in any order.\nIf a folder[i] is located within another folder[j], it is called a sub-folder of it.\nThe format of a path is one or more concatenated strings of the form: '/' followed by one or more lowercase English letters.\nFor example, \"/leetcode\" and \"/leetcode/problems\" are valid paths while an empty string and \"/\" are not.", "examples": [{"full_text": "Example 1:\nInput: folder = [\"/a\",\"/a/b\",\"/c/d\",\"/c/d/e\",\"/c/f\"]\nOutput: [\"/a\",\"/c/d\",\"/c/f\"]\nExplanation: Folders \"/a/b\" is a subfolder of \"/a\" and \"/c/d/e\" is inside of folder \"/c/d\" in our filesystem.", "input": "Input: folder = [\"/a\",\"/a/b\",\"/c/d\",\"/c/d/e\",\"/c/f\"]", "output": "Output: [\"/a\",\"/c/d\",\"/c/f\"]", "explanation": "Explanation: Folders \"/a/b\" is a subfolder of \"/a\" and \"/c/d/e\" is inside of folder \"/c/d\" in our filesystem."}, {"full_text": "Example 2:\nInput: folder = [\"/a\",\"/a/b/c\",\"/a/b/d\"]\nOutput: [\"/a\"]\nExplanation: Folders \"/a/b/c\" and \"/a/b/d\" will be removed because they are subfolders of \"/a\".", "input": "Input: folder = [\"/a\",\"/a/b/c\",\"/a/b/d\"]", "output": "Output: [\"/a\"]", "explanation": "Explanation: Folders \"/a/b/c\" and \"/a/b/d\" will be removed because they are subfolders of \"/a\"."}, {"full_text": "Example 3:\nInput: folder = [\"/a/b/c\",\"/a/b/ca\",\"/a/b/d\"]\nOutput: [\"/a/b/c\",\"/a/b/ca\",\"/a/b/d\"]", "input": "Input: folder = [\"/a/b/c\",\"/a/b/ca\",\"/a/b/d\"]", "output": "Output: [\"/a/b/c\",\"/a/b/ca\",\"/a/b/d\"]", "explanation": ""}], "constraints": "Constraints:\n1 <= folder.length <= 4 * 10^4\n2 <= folder[i].length <= 100\nfolder[i] contains only lowercase letters and '/'.\nfolder[i] always starts with the character '/'.\nEach folder name is unique.", "notes": ""}, "1227": {"label": "Medium", "title": "Airplane Seat Assignment Probability", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6378, "total_accepted": 23700.0, "total_submissions": 37200.0, "testcase_example": "'1'", "body": "n passengers board an airplane with exactly n seats. The first passenger has lost the ticket and picks a seat randomly. But after that, the rest of the passengers will:\nTake their own seat if it is still available, and\nPick other seats randomly when they find their seat occupied\nReturn the probability that the n^th person gets his own seat.", "examples": [{"full_text": "Example 1:\nInput: n = 1\nOutput: 1.00000\nExplanation: The first person can only get the first seat.", "input": "Input: n = 1", "output": "Output: 1.00000", "explanation": "Explanation: The first person can only get the first seat."}, {"full_text": "Example 2:\nInput: n = 2\nOutput: 0.50000\nExplanation: The second person has a probability of 0.5 to get the second seat (when first person gets the first seat).", "input": "Input: n = 2", "output": "Output: 0.50000", "explanation": "Explanation: The second person has a probability of 0.5 to get the second seat (when first person gets the first seat)."}], "constraints": "Constraints:\n1 <= n <= 10^5", "notes": ""}, "1222": {"label": "Medium", "title": "Queens That Can Attack the King", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7084, "total_accepted": 30800.0, "total_submissions": 43400.0, "testcase_example": "'[[0,1],[1,0],[4,0],[0,4],[3,3],[2,4]]\\n[0,0]'", "body": "On an 8x8 chessboard, there can be multiple Black Queens and one White King.\nGiven an array of integer coordinates queens that represents the positions of the Black Queens, and a pair of coordinates king that represent the position of the White King, return the coordinates of all the queens (in any order) that can attack the King.", "examples": [{"full_text": "Example 1:\nInput: queens = [[0,1],[1,0],[4,0],[0,4],[3,3],[2,4]], king = [0,0]\nOutput: [[0,1],[1,0],[3,3]]\nExplanation:\n\nThe queen at [0,1] can attack the king cause they're in the same row.\nThe queen at [1,0] can attack the king cause they're in the same column.\nThe queen at [3,3] can attack the king cause they're in the same diagnal.\nThe queen at [0,4] can't attack the king cause it's blocked by the queen at [0,1].\nThe queen at [4,0] can't attack the king cause it's blocked by the queen at [1,0].\nThe queen at [2,4] can't attack the king cause it's not in the same row/column/diagnal as the king.", "input": "Input: queens = [[0,1],[1,0],[4,0],[0,4],[3,3],[2,4]], king = [0,0]", "output": "Output: [[0,1],[1,0],[3,3]]", "explanation": "Explanation:\n\nThe queen at [0,1] can attack the king cause they're in the same row.\nThe queen at [1,0] can attack the king cause they're in the same column.\nThe queen at [3,3] can attack the king cause they're in the same diagnal.\nThe queen at [0,4] can't attack the king cause it's blocked by the queen at [0,1].\nThe queen at [4,0] can't attack the king cause it's blocked by the queen at [1,0].\nThe queen at [2,4] can't attack the king cause it's not in the same row/column/diagnal as the king."}, {"full_text": "Example 2:\nInput: queens = [[0,0],[1,1],[2,2],[3,4],[3,5],[4,4],[4,5]], king = [3,3]\nOutput: [[2,2],[3,4],[4,4]]", "input": "Input: queens = [[0,0],[1,1],[2,2],[3,4],[3,5],[4,4],[4,5]], king = [3,3]", "output": "Output: [[2,2],[3,4],[4,4]]", "explanation": ""}, {"full_text": "Example 3:\nInput: queens = [[5,6],[7,7],[2,1],[0,7],[1,6],[5,1],[3,7],[0,3],[4,0],[1,2],[6,3],[5,0],[0,4],[2,2],[1,1],[6,4],[5,4],[0,0],[2,6],[4,5],[5,2],[1,4],[7,5],[2,3],[0,5],[4,2],[1,0],[2,7],[0,1],[4,6],[6,1],[0,6],[4,3],[1,7]], king = [3,4]\nOutput: [[2,3],[1,4],[1,6],[3,7],[4,3],[5,4],[4,5]]", "input": "Input: queens = [[5,6],[7,7],[2,1],[0,7],[1,6],[5,1],[3,7],[0,3],[4,0],[1,2],[6,3],[5,0],[0,4],[2,2],[1,1],[6,4],[5,4],[0,0],[2,6],[4,5],[5,2],[1,4],[7,5],[2,3],[0,5],[4,2],[1,0],[2,7],[0,1],[4,6],[6,1],[0,6],[4,3],[1,7]], king = [3,4]", "output": "Output: [[2,3],[1,4],[1,6],[3,7],[4,3],[5,4],[4,5]]", "explanation": ""}], "constraints": "Constraints:\n1 <= queens.length\n<= 63\nqueens[i].length == 2\n0 <= queens[i][j] <\n8\nking.length == 2\n0 <= king[0], king[1] < 8\nAt most one piece is allowed in a cell.", "notes": ""}, "1219": {"label": "Medium", "title": "Path with Maximum Gold", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.66, "total_accepted": 76800.0, "total_submissions": 116300.0, "testcase_example": "'[[0,6,0],[5,8,7],[0,9,0]]'", "body": "In a gold mine grid of size m x n, each cell in this mine has an integer representing the amount of gold in that cell, 0 if it is empty.\nReturn the maximum amount of gold you can collect under the conditions:\nEvery time you are located in a cell you will collect all the gold in that cell.\nFrom your position, you can walk one step to the left, right, up, or down.\nYou can't visit the same cell more than once.\nNever visit a cell with 0 gold.\nYou can start and stop collecting gold from any position in the grid that has some gold.", "examples": [{"full_text": "Example 1:\nInput: grid = [[0,6,0],[5,8,7],[0,9,0]]\nOutput: 24\nExplanation:\n[[0,6,0],\n[5,8,7],\n[0,9,0]]\nPath to get the maximum gold, 9 -> 8 -> 7.", "input": "Input: grid = [[0,6,0],[5,8,7],[0,9,0]]", "output": "Output: 24", "explanation": "Explanation:\n[[0,6,0],\n[5,8,7],\n[0,9,0]]\nPath to get the maximum gold, 9 -> 8 -> 7."}, {"full_text": "Example 2:\nInput: grid = [[1,0,7],[2,0,6],[3,4,5],[0,3,0],[9,0,20]]\nOutput: 28\nExplanation:\n[[1,0,7],\n[2,0,6],\n[3,4,5],\n[0,3,0],\n[9,0,20]]\nPath to get the maximum gold, 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7.", "input": "Input: grid = [[1,0,7],[2,0,6],[3,4,5],[0,3,0],[9,0,20]]", "output": "Output: 28", "explanation": "Explanation:\n[[1,0,7],\n[2,0,6],\n[3,4,5],\n[0,3,0],\n[9,0,20]]\nPath to get the maximum gold, 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7."}], "constraints": "Constraints:\nm == grid.length\nn == grid[i].length\n1 <= m, n <= 15\n0 <= grid[i][j] <= 100\nThere are at most 25 cells containing gold.", "notes": ""}, "1218": {"label": "Medium", "title": "Longest Arithmetic Subsequence of Given Difference", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5056, "total_accepted": 41900.0, "total_submissions": 82800.0, "testcase_example": "'[1,2,3,4]\\n1'", "body": "Given an integer array arr and an integer difference, return the length of the longest subsequence in arr which is an arithmetic sequence such that the difference between adjacent elements in the subsequence equals difference.\nA subsequence is a sequence that can be derived from arr by deleting some or no elements without changing the order of the remaining elements.", "examples": [{"full_text": "Example 1:\nInput: arr = [1,2,3,4], difference = 1\nOutput: 4\nExplanation: The longest arithmetic subsequence is [1,2,3,4].", "input": "Input: arr = [1,2,3,4], difference = 1", "output": "Output: 4", "explanation": "Explanation: The longest arithmetic subsequence is [1,2,3,4]."}, {"full_text": "Example 2:\nInput: arr = [1,3,5,7], difference = 1\nOutput: 1\nExplanation: The longest arithmetic subsequence is any single element.", "input": "Input: arr = [1,3,5,7], difference = 1", "output": "Output: 1", "explanation": "Explanation: The longest arithmetic subsequence is any single element."}, {"full_text": "Example 3:\nInput: arr = [1,5,7,8,5,3,4,2,1], difference = -2\nOutput: 4\nExplanation: The longest arithmetic subsequence is [7,5,3,1].", "input": "Input: arr = [1,5,7,8,5,3,4,2,1], difference = -2", "output": "Output: 4", "explanation": "Explanation: The longest arithmetic subsequence is [7,5,3,1]."}], "constraints": "Constraints:\n1 <= arr.length <= 10^5\n-10^4 <= arr[i], difference <= 10^4", "notes": ""}, "1209": {"label": "Medium", "title": "Remove All Adjacent Duplicates in String II", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5608, "total_accepted": 147400.0, "total_submissions": 262800.0, "testcase_example": "'\"abcd\"\\n2'", "body": "You are given a string s and an integer k, a k duplicate removal consists of choosing k adjacent and equal letters from s and removing them, causing the left and the right side of the deleted substring to concatenate together.\nWe repeatedly make k duplicate removals on s until we no longer can.\nReturn the final string after all such duplicate removals have been made. It is guaranteed that the answer is unique.", "examples": [{"full_text": "Example 1:\nInput: s = \"abcd\", k = 2\nOutput: \"abcd\"\nExplanation: There's nothing to delete.", "input": "Input: s = \"abcd\", k = 2", "output": "Output: \"abcd\"", "explanation": "Explanation: There's nothing to delete."}, {"full_text": "Example 2:\nInput: s = \"deeedbbcccbdaa\", k = 3\nOutput: \"aa\"\nExplanation:\nFirst delete \"eee\" and \"ccc\", get \"ddbbbdaa\"\nThen delete \"bbb\", get \"dddaa\"\nFinally delete \"ddd\", get \"aa\"", "input": "Input: s = \"deeedbbcccbdaa\", k = 3", "output": "Output: \"aa\"", "explanation": "Explanation:\nFirst delete \"eee\" and \"ccc\", get \"ddbbbdaa\"\nThen delete \"bbb\", get \"dddaa\"\nFinally delete \"ddd\", get \"aa\""}, {"full_text": "Example 3:\nInput: s = \"pbbcggttciiippooaais\", k = 2\nOutput: \"ps\"", "input": "Input: s = \"pbbcggttciiippooaais\", k = 2", "output": "Output: \"ps\"", "explanation": ""}], "constraints": "Constraints:\n1 <= s.length <= 10^5\n2 <= k <= 10^4\ns only contains lower case English letters.", "notes": ""}, "1208": {"label": "Medium", "title": "Get Equal Substrings Within Budget", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.46299999999999997, "total_accepted": 27400.0, "total_submissions": 59200.0, "testcase_example": "'\"abcd\"\\n\"bcdf\"\\n3'", "body": "You are given two strings s and t of the same length and an integer maxCost.\nYou want to change s to t. Changing the i^th character of s to i^th character of t costs |s[i] - t[i]| (i.e., the absolute difference between the ASCII values of the characters).\nReturn the maximum length of a substring of s that can be changed to be the same as the corresponding substring of t with a cost less than or equal to maxCost. If there is no substring from s that can be changed to its corresponding substring from t, return 0.", "examples": [{"full_text": "Example 1:\nInput: s = \"abcd\", t = \"bcdf\", maxCost = 3\nOutput: 3\nExplanation: \"abc\" of s can change to \"bcd\".\nThat costs 3, so the maximum length is 3.", "input": "Input: s = \"abcd\", t = \"bcdf\", maxCost = 3", "output": "Output: 3", "explanation": "Explanation: \"abc\" of s can change to \"bcd\".\nThat costs 3, so the maximum length is 3."}, {"full_text": "Example 2:\nInput: s = \"abcd\", t = \"cdef\", maxCost = 3\nOutput: 1\nExplanation: Each character in s costs 2 to change to character in t, so the maximum length is 1.", "input": "Input: s = \"abcd\", t = \"cdef\", maxCost = 3", "output": "Output: 1", "explanation": "Explanation: Each character in s costs 2 to change to character in t, so the maximum length is 1."}, {"full_text": "Example 3:\nInput: s = \"abcd\", t = \"acde\", maxCost = 0\nOutput: 1\nExplanation: You cannot make any change, so the maximum length is 1.", "input": "Input: s = \"abcd\", t = \"acde\", maxCost = 0", "output": "Output: 1", "explanation": "Explanation: You cannot make any change, so the maximum length is 1."}], "constraints": "Constraints:\n1 <= s.length <= 10^5\nt.length == s.length\n0 <= maxCost <= 10^6\ns and t consist of only lowercase English letters.", "notes": ""}, "1202": {"label": "Medium", "title": "Smallest String With Swaps", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5235, "total_accepted": 41000.0, "total_submissions": 78300.0, "testcase_example": "'\"dcab\"\\n[[0,3],[1,2]]'", "body": "You are given a string s, and an array of pairs of indices in the string\npairs\nwhere\npairs[i] =\n[a, b]\nindicates 2 indices(0-indexed) of the string.\nYou can\nswap the characters at any pair of indices in the given\npairs\nany number of times.\nReturn the\nlexicographically smallest string that s\ncan be changed to after using the swaps.", "examples": [{"full_text": "Example 1:\nInput: s = \"dcab\", pairs = [[0,3],[1,2]]\nOutput: \"bacd\"\nExplaination:\nSwap s[0] and s[3], s = \"bcad\"\nSwap s[1] and s[2], s = \"bacd\"", "input": "Input: s = \"dcab\", pairs = [[0,3],[1,2]]", "output": "Output: \"bacd\"\nExplaination:\nSwap s[0] and s[3], s = \"bcad\"\nSwap s[1] and s[2], s = \"bacd\"", "explanation": ""}, {"full_text": "Example 2:\nInput: s = \"dcab\", pairs = [[0,3],[1,2],[0,2]]\nOutput: \"abcd\"\nExplaination:\nSwap s[0] and s[3], s = \"bcad\"\nSwap s[0] and s[2], s = \"acbd\"\nSwap s[1] and s[2], s = \"abcd\"", "input": "Input: s = \"dcab\", pairs = [[0,3],[1,2],[0,2]]", "output": "Output: \"abcd\"\nExplaination:\nSwap s[0] and s[3], s = \"bcad\"\nSwap s[0] and s[2], s = \"acbd\"\nSwap s[1] and s[2], s = \"abcd\"", "explanation": ""}, {"full_text": "Example 3:\nInput: s = \"cba\", pairs = [[0,1],[1,2]]\nOutput: \"abc\"\nExplaination:\nSwap s[0] and s[1], s = \"bca\"\nSwap s[1] and s[2], s = \"bac\"\nSwap s[0] and s[1], s = \"abc\"", "input": "Input: s = \"cba\", pairs = [[0,1],[1,2]]", "output": "Output: \"abc\"\nExplaination:\nSwap s[0] and s[1], s = \"bca\"\nSwap s[1] and s[2], s = \"bac\"\nSwap s[0] and s[1], s = \"abc\"", "explanation": ""}], "constraints": "Constraints:\n1 <= s.length <= 10^5\n0 <= pairs.length <= 10^5\n0 <= pairs[i][0], pairs[i][1] <\ns.length\ns\nonly contains lower case English letters.", "notes": ""}, "1201": {"label": "Medium", "title": "Ugly Number III", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.27690000000000003, "total_accepted": 18400.0, "total_submissions": 66400.0, "testcase_example": "'3\\n2\\n3\\n5'", "body": "An ugly number is a positive integer that is divisible by a, b, or c.\nGiven four integers n, a, b, and c, return the n^th ugly number.", "examples": [{"full_text": "Example 1:\nInput: n = 3, a = 2, b = 3, c = 5\nOutput: 4\nExplanation: The ugly numbers are 2, 3, 4, 5, 6, 8, 9, 10... The 3^rd is 4.", "input": "Input: n = 3, a = 2, b = 3, c = 5", "output": "Output: 4", "explanation": "Explanation: The ugly numbers are 2, 3, 4, 5, 6, 8, 9, 10... The 3^rd is 4."}, {"full_text": "Example 2:\nInput: n = 4, a = 2, b = 3, c = 4\nOutput: 6\nExplanation: The ugly numbers are 2, 3, 4, 6, 8, 9, 10, 12... The 4^th is 6.", "input": "Input: n = 4, a = 2, b = 3, c = 4", "output": "Output: 6", "explanation": "Explanation: The ugly numbers are 2, 3, 4, 6, 8, 9, 10, 12... The 4^th is 6."}, {"full_text": "Example 3:\nInput: n = 5, a = 2, b = 11, c = 13\nOutput: 10\nExplanation: The ugly numbers are 2, 4, 6, 8, 10, 11, 12, 13... The 5^th is 10.", "input": "Input: n = 5, a = 2, b = 11, c = 13", "output": "Output: 10", "explanation": "Explanation: The ugly numbers are 2, 4, 6, 8, 10, 11, 12, 13... The 5^th is 10."}], "constraints": "Constraints:\n1 <= n, a, b, c <= 10^9\n1 <= a * b * c <= 10^18\nIt is guaranteed that the result will be in range [1, 2 * 10^9].", "notes": ""}, "1191": {"label": "Medium", "title": "K-Concatenation Maximum Sum", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.24170000000000003, "total_accepted": 23100.0, "total_submissions": 95400.0, "testcase_example": "'[1,2]\\n3'", "body": "Given an integer array arr and an integer k, modify the array by repeating it k times.\nFor example, if arr = [1, 2] and k = 3 then the modified array will be [1, 2, 1, 2, 1, 2].\nReturn the maximum sub-array sum in the modified array. Note that the length of the sub-array can be 0 and its sum in that case is 0.\nAs the answer can be very large, return the answer modulo 10^9 + 7.", "examples": [{"full_text": "Example 1:\nInput: arr = [1,2], k = 3\nOutput: 9", "input": "Input: arr = [1,2], k = 3", "output": "Output: 9", "explanation": ""}, {"full_text": "Example 2:\nInput: arr = [1,-2,1], k = 5\nOutput: 2", "input": "Input: arr = [1,-2,1], k = 5", "output": "Output: 2", "explanation": ""}, {"full_text": "Example 3:\nInput: arr = [-1,-2], k = 7\nOutput: 0", "input": "Input: arr = [-1,-2], k = 7", "output": "Output: 0", "explanation": ""}], "constraints": "Constraints:\n1 <= arr.length <= 10^5\n1 <= k <= 10^5\n-10^4 <= arr[i] <= 10^4", "notes": ""}, "1190": {"label": "Medium", "title": "Reverse Substrings Between Each Pair of Parentheses", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6559999999999999, "total_accepted": 45100.0, "total_submissions": 68800.0, "testcase_example": "'\"(abcd)\"'", "body": "You are given a string s that consists of lower case English letters and brackets.\nReverse the strings in each pair of matching parentheses, starting from the innermost one.\nYour result should not contain any brackets.", "examples": [{"full_text": "Example 1:\nInput: s = \"(abcd)\"\nOutput: \"dcba\"", "input": "Input: s = \"(abcd)\"", "output": "Output: \"dcba\"", "explanation": ""}, {"full_text": "Example 2:\nInput: s = \"(u(love)i)\"\nOutput: \"iloveu\"\nExplanation: The substring \"love\" is reversed first, then the whole string is reversed.", "input": "Input: s = \"(u(love)i)\"", "output": "Output: \"iloveu\"", "explanation": "Explanation: The substring \"love\" is reversed first, then the whole string is reversed."}, {"full_text": "Example 3:\nInput: s = \"(ed(et(oc))el)\"\nOutput: \"leetcode\"\nExplanation: First, we reverse the substring \"oc\", then \"etco\", and finally, the whole string.", "input": "Input: s = \"(ed(et(oc))el)\"", "output": "Output: \"leetcode\"", "explanation": "Explanation: First, we reverse the substring \"oc\", then \"etco\", and finally, the whole string."}], "constraints": "Constraints:\n1 <= s.length <= 2000\ns only contains lower case English characters and parentheses.\nIt is guaranteed that all parentheses are balanced.", "notes": ""}, "1186": {"label": "Medium", "title": "Maximum Subarray Sum with One Deletion", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4045, "total_accepted": 30100.0, "total_submissions": 74500.0, "testcase_example": "'[1,-2,0,3]'", "body": "Given an array of integers, return the maximum sum for a non-empty\nsubarray (contiguous elements) with at most one element deletion.\nIn other words, you want to choose a subarray and optionally delete one element from it so that there is still at least one element left and the\nsum of the remaining elements is maximum possible.\nNote that the subarray needs to be non-empty after deleting one element.", "examples": [{"full_text": "Example 1:\nInput: arr = [1,-2,0,3]\nOutput: 4\nExplanation: Because we can choose [1, -2, 0, 3] and drop -2, thus the subarray [1, 0, 3] becomes the maximum value.", "input": "Input: arr = [1,-2,0,3]", "output": "Output: 4", "explanation": "Explanation: Because we can choose [1, -2, 0, 3] and drop -2, thus the subarray [1, 0, 3] becomes the maximum value."}, {"full_text": "Example 2:\nInput: arr = [1,-2,-2,3]\nOutput: 3\nExplanation: We just choose [3] and it's the maximum sum.", "input": "Input: arr = [1,-2,-2,3]", "output": "Output: 3", "explanation": "Explanation: We just choose [3] and it's the maximum sum."}, {"full_text": "Example 3:\nInput: arr = [-1,-1,-1,-1]\nOutput: -1\nExplanation:\nThe final subarray needs to be non-empty. You can't choose [-1] and delete -1 from it, then get an empty subarray to make the sum equals to 0.", "input": "Input: arr = [-1,-1,-1,-1]", "output": "Output: -1", "explanation": "Explanation:\nThe final subarray needs to be non-empty. You can't choose [-1] and delete -1 from it, then get an empty subarray to make the sum equals to 0."}], "constraints": "Constraints:\n1 <= arr.length <= 10^5\n-10^4 <= arr[i] <= 10^4", "notes": ""}, "1177": {"label": "Medium", "title": "Can Make Palindrome from Substring", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3722, "total_accepted": 19400.0, "total_submissions": 52200.0, "testcase_example": "'\"abcda\"\\n[[3,3,0],[1,2,0],[0,3,1],[0,3,2],[0,4,1]]'", "body": "You are given a string s and array queries where queries[i] = [lefti, righti, ki]. We may rearrange the substring s[lefti...righti] for each query and then choose up to ki of them to replace with any lowercase English letter.\nIf the substring is possible to be a palindrome string after the operations above, the result of the query is true. Otherwise, the result is false.\nReturn a boolean array answer where answer[i] is the result of the i^th query queries[i].\nNote that each letter is counted individually for replacement, so if, for example s[lefti...righti] = \"aaa\", and ki = 2, we can only replace two of the letters. Also, note that no query modifies the initial string s.", "examples": [{"full_text": "Example :\nInput: s = \"abcda\", queries = [[3,3,0],[1,2,0],[0,3,1],[0,3,2],[0,4,1]]\nOutput: [true,false,false,true,true]\nExplanation:\nqueries[0]: substring = \"d\", is palidrome.\nqueries[1]: substring = \"bc\", is not palidrome.\nqueries[2]: substring = \"abcd\", is not palidrome after replacing only 1 character.\nqueries[3]: substring = \"abcd\", could be changed to \"abba\" which is palidrome. Also this can be changed to \"baab\" first rearrange it \"bacd\" then replace \"cd\" with \"ab\".\nqueries[4]: substring = \"abcda\", could be changed to \"abcba\" which is palidrome.", "input": "Input: s = \"abcda\", queries = [[3,3,0],[1,2,0],[0,3,1],[0,3,2],[0,4,1]]", "output": "Output: [true,false,false,true,true]", "explanation": "Explanation:\nqueries[0]: substring = \"d\", is palidrome.\nqueries[1]: substring = \"bc\", is not palidrome.\nqueries[2]: substring = \"abcd\", is not palidrome after replacing only 1 character.\nqueries[3]: substring = \"abcd\", could be changed to \"abba\" which is palidrome. Also this can be changed to \"baab\" first rearrange it \"bacd\" then replace \"cd\" with \"ab\".\nqueries[4]: substring = \"abcda\", could be changed to \"abcba\" which is palidrome."}, {"full_text": "Example 2:\nInput: s = \"lyb\", queries = [[0,1,0],[2,2,1]]\nOutput: [false,true]", "input": "Input: s = \"lyb\", queries = [[0,1,0],[2,2,1]]", "output": "Output: [false,true]", "explanation": ""}], "constraints": "Constraints:\n1 <= s.length, queries.length <= 10^5\n0 <= lefti <= righti < s.length\n0 <= ki <= s.length\ns consists of lowercase English letters.", "notes": ""}, "1171": {"label": "Medium", "title": "Remove Zero Sum Consecutive Nodes from Linked List", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.42369999999999997, "total_accepted": 33700.0, "total_submissions": 79500.0, "testcase_example": "'[1,2,-3,3,1]'", "body": "Given the head of a linked list, we repeatedly delete consecutive sequences of nodes that sum to 0 until there are no such sequences.\nAfter doing so, return the head of the final linked list.\nYou may return any such answer.\n(Note that in the examples below, all sequences are serializations of ListNode objects.)", "examples": [{"full_text": "Example 1:\nInput: head = [1,2,-3,3,1]\nOutput: [3,1]\nNote: The answer [1,2,1] would also be accepted.", "input": "Input: head = [1,2,-3,3,1]", "output": "Output: [3,1]\nNote: The answer [1,2,1] would also be accepted.", "explanation": ""}, {"full_text": "Example 2:\nInput: head = [1,2,3,-3,4]\nOutput: [1,2,4]", "input": "Input: head = [1,2,3,-3,4]", "output": "Output: [1,2,4]", "explanation": ""}, {"full_text": "Example 3:\nInput: head = [1,2,3,-3,-2]\nOutput: [1]", "input": "Input: head = [1,2,3,-3,-2]", "output": "Output: [1]", "explanation": ""}], "constraints": "Constraints:\nThe given linked list will contain between 1 and 1000 nodes.\nEach node in the linked list has -1000 <= node.val <= 1000.", "notes": ""}, "1170": {"label": "Medium", "title": "Compare Strings by Frequency of the Smallest Character", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6101, "total_accepted": 63900.0, "total_submissions": 104700.0, "testcase_example": "'[\"cbd\"]\\n[\"zaaaz\"]'", "body": "Let the function f(s) be the frequency of the lexicographically smallest character in a non-empty string s. For example, if s = \"dcce\" then f(s) = 2 because the lexicographically smallest character is 'c', which has a frequency of 2.\nYou are given an array of strings words and another array of query strings queries. For each query queries[i], count the number of words in words such that f(queries[i]) < f(W) for each W in words.\nReturn an integer array answer, where each answer[i] is the answer to the i^th query.", "examples": [{"full_text": "Example 1:\nInput: queries = [\"cbd\"], words = [\"zaaaz\"]\nOutput: [1]\nExplanation: On the first query we have f(\"cbd\") = 1, f(\"zaaaz\") = 3 so f(\"cbd\") < f(\"zaaaz\").", "input": "Input: queries = [\"cbd\"], words = [\"zaaaz\"]", "output": "Output: [1]", "explanation": "Explanation: On the first query we have f(\"cbd\") = 1, f(\"zaaaz\") = 3 so f(\"cbd\") < f(\"zaaaz\")."}, {"full_text": "Example 2:\nInput: queries = [\"bbb\",\"cc\"], words = [\"a\",\"aa\",\"aaa\",\"aaaa\"]\nOutput: [1,2]\nExplanation: On the first query only f(\"bbb\") < f(\"aaaa\"). On the second query both f(\"aaa\") and f(\"aaaa\") are both > f(\"cc\").", "input": "Input: queries = [\"bbb\",\"cc\"], words = [\"a\",\"aa\",\"aaa\",\"aaaa\"]", "output": "Output: [1,2]", "explanation": "Explanation: On the first query only f(\"bbb\") < f(\"aaaa\"). On the second query both f(\"aaa\") and f(\"aaaa\") are both > f(\"cc\")."}], "constraints": "Constraints:\n1 <= queries.length <= 2000\n1 <= words.length <= 2000\n1 <= queries[i].length, words[i].length <= 10\nqueries[i][j], words[i][j] consist of lowercase English letters.", "notes": ""}, "1169": {"label": "Medium", "title": "Invalid Transactions", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3017, "total_accepted": 37900.0, "total_submissions": 125600.0, "testcase_example": "'[\"alice,20,800,mtv\",\"alice,50,100,beijing\"]'", "body": "A transaction is possibly invalid if:\nthe amount exceeds $1000, or;\nif it occurs within (and including) 60 minutes of another transaction with the same name in a different city.\nYou are given an array of strings transaction where transactions[i] consists of comma-separated values representing the name, time (in minutes), amount, and city of the transaction.\nReturn a list of transactions that are possibly invalid. You may return the answer in any order.", "examples": [{"full_text": "Example 1:\nInput: transactions = [\"alice,20,800,mtv\",\"alice,50,100,beijing\"]\nOutput: [\"alice,20,800,mtv\",\"alice,50,100,beijing\"]\nExplanation: The first transaction is invalid because the second transaction occurs within a difference of 60 minutes, have the same name and is in a different city. Similarly the second one is invalid too.", "input": "Input: transactions = [\"alice,20,800,mtv\",\"alice,50,100,beijing\"]", "output": "Output: [\"alice,20,800,mtv\",\"alice,50,100,beijing\"]", "explanation": "Explanation: The first transaction is invalid because the second transaction occurs within a difference of 60 minutes, have the same name and is in a different city. Similarly the second one is invalid too."}, {"full_text": "Example 2:\nInput: transactions = [\"alice,20,800,mtv\",\"alice,50,1200,mtv\"]\nOutput: [\"alice,50,1200,mtv\"]", "input": "Input: transactions = [\"alice,20,800,mtv\",\"alice,50,1200,mtv\"]", "output": "Output: [\"alice,50,1200,mtv\"]", "explanation": ""}, {"full_text": "Example 3:\nInput: transactions = [\"alice,20,800,mtv\",\"bob,50,1200,mtv\"]\nOutput: [\"bob,50,1200,mtv\"]", "input": "Input: transactions = [\"alice,20,800,mtv\",\"bob,50,1200,mtv\"]", "output": "Output: [\"bob,50,1200,mtv\"]", "explanation": ""}], "constraints": "Constraints:\ntransactions.length <= 1000\nEach transactions[i] takes the form \"{name},{time},{amount},{city}\"\nEach {name} and {city} consist of lowercase English letters, and have lengths between 1 and 10.\nEach {time} consist of digits, and represent an integer between 0 and 1000.\nEach {amount} consist of digits, and represent an integer between 0 and 2000.", "notes": ""}, "1162": {"label": "Medium", "title": "As Far from Land as Possible", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4765, "total_accepted": 50700.0, "total_submissions": 106400.0, "testcase_example": "'[[1,0,1],[0,0,0],[1,0,1]]'", "body": "Given an n x n grid\ncontaining only values 0 and 1, where\n0 represents water\nand 1 represents land, find a water cell such that its distance to the nearest land cell is maximized, and return the distance.\nIf no land or water exists in the grid, return -1.\nThe distance used in this problem is the Manhattan distance:\nthe distance between two cells (x0, y0) and (x1, y1) is |x0 - x1| + |y0 - y1|.", "examples": [{"full_text": "Example 1:\nInput: grid = [[1,0,1],[0,0,0],[1,0,1]]\nOutput: 2\nExplanation: The cell (1, 1) is as far as possible from all the land with distance 2.", "input": "Input: grid = [[1,0,1],[0,0,0],[1,0,1]]", "output": "Output: 2", "explanation": "Explanation: The cell (1, 1) is as far as possible from all the land with distance 2."}, {"full_text": "Example 2:\nInput: grid = [[1,0,0],[0,0,0],[0,0,0]]\nOutput: 4\nExplanation: The cell (2, 2) is as far as possible from all the land with distance 4.", "input": "Input: grid = [[1,0,0],[0,0,0],[0,0,0]]", "output": "Output: 4", "explanation": "Explanation: The cell (2, 2) is as far as possible from all the land with distance 4."}], "constraints": "Constraints:\nn == grid.length\nn == grid[i].length\n1 <= n\n<= 100\ngrid[i][j]\nis 0 or 1", "notes": ""}, "1161": {"label": "Medium", "title": "Maximum Level Sum of a Binary Tree", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.667, "total_accepted": 96900.0, "total_submissions": 145300.0, "testcase_example": "'[1,7,0,7,-8,null,null]'", "body": "Given the root of a binary tree, the level of its root is 1, the level of its children is 2, and so on.\nReturn the smallest level x such that the sum of all the values of nodes at level x is maximal.", "examples": [{"full_text": "Example 1:\nInput: root = [1,7,0,7,-8,null,null]\nOutput: 2\nExplanation:\nLevel 1 sum = 1.\nLevel 2 sum = 7 + 0 = 7.\nLevel 3 sum = 7 + -8 = -1.\nSo we return the level with the maximum sum which is level 2.", "input": "Input: root = [1,7,0,7,-8,null,null]", "output": "Output: 2", "explanation": "Explanation:\nLevel 1 sum = 1.\nLevel 2 sum = 7 + 0 = 7.\nLevel 3 sum = 7 + -8 = -1.\nSo we return the level with the maximum sum which is level 2."}, {"full_text": "Example 2:\nInput: root = [989,null,10250,98693,-89388,null,null,null,-32127]\nOutput: 2", "input": "Input: root = [989,null,10250,98693,-89388,null,null,null,-32127]", "output": "Output: 2", "explanation": ""}], "constraints": "Constraints:\nThe number of nodes in the tree is in the range [1, 10^4].\n-10^5 <= Node.val <= 10^5", "notes": ""}, "1156": {"label": "Medium", "title": "Swap For Longest Repeated Character Substring", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.46590000000000004, "total_accepted": 21700.0, "total_submissions": 46500.0, "testcase_example": "'\"ababa\"'", "body": "You are given a string text. You can swap two of the characters in the text.\nReturn the length of the longest substring with repeated characters.", "examples": [{"full_text": "Example 1:\nInput: text = \"ababa\"\nOutput: 3\nExplanation: We can swap the first 'b' with the last 'a', or the last 'b' with the first 'a'. Then, the longest repeated character substring is \"aaa\" with length 3.", "input": "Input: text = \"ababa\"", "output": "Output: 3", "explanation": "Explanation: We can swap the first 'b' with the last 'a', or the last 'b' with the first 'a'. Then, the longest repeated character substring is \"aaa\" with length 3."}, {"full_text": "Example 2:\nInput: text = \"aaabaaa\"\nOutput: 6\nExplanation: Swap 'b' with the last 'a' (or the first 'a'), and we get longest repeated character substring \"aaaaaa\" with length 6.", "input": "Input: text = \"aaabaaa\"", "output": "Output: 6", "explanation": "Explanation: Swap 'b' with the last 'a' (or the first 'a'), and we get longest repeated character substring \"aaaaaa\" with length 6."}, {"full_text": "Example 3:\nInput: text = \"aaaaa\"\nOutput: 5\nExplanation: No need to swap, longest repeated character substring is \"aaaaa\" with length is 5.", "input": "Input: text = \"aaaaa\"", "output": "Output: 5", "explanation": "Explanation: No need to swap, longest repeated character substring is \"aaaaa\" with length is 5."}], "constraints": "Constraints:\n1 <= text.length <= 2 * 10^4\ntext consist of lowercase English characters only.", "notes": ""}, "1155": {"label": "Medium", "title": "Number of Dice Rolls With Target Sum", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.47590000000000005, "total_accepted": 96100.0, "total_submissions": 202000.0, "testcase_example": "'1\\n6\\n3'", "body": "You have n dice and each die has k faces numbered from 1 to k.\nGiven three integers n, k, and target, return the number of possible ways (out of the k^n total ways) to roll the dice so the sum of the face-up numbers equals target. Since the answer may be too large, return it modulo 10^9 + 7.", "examples": [{"full_text": "Example 1:\nInput: n = 1, k = 6, target = 3\nOutput: 1\nExplanation: You throw one die with 6 faces.\nThere is only one way to get a sum of 3.", "input": "Input: n = 1, k = 6, target = 3", "output": "Output: 1", "explanation": "Explanation: You throw one die with 6 faces.\nThere is only one way to get a sum of 3."}, {"full_text": "Example 2:\nInput: n = 2, k = 6, target = 7\nOutput: 6\nExplanation: You throw two dice, each with 6 faces.\nThere are 6 ways to get a sum of 7: 1+6, 2+5, 3+4, 4+3, 5+2, 6+1.", "input": "Input: n = 2, k = 6, target = 7", "output": "Output: 6", "explanation": "Explanation: You throw two dice, each with 6 faces.\nThere are 6 ways to get a sum of 7: 1+6, 2+5, 3+4, 4+3, 5+2, 6+1."}, {"full_text": "Example 3:\nInput: n = 30, k = 30, target = 500\nOutput: 222616187\nExplanation: The answer must be returned modulo 10^9 + 7.", "input": "Input: n = 30, k = 30, target = 500", "output": "Output: 222616187", "explanation": "Explanation: The answer must be returned modulo 10^9 + 7."}], "constraints": "Constraints:\n1 <= n, k <= 30\n1 <= target <= 1000", "notes": ""}, "1146": {"label": "Medium", "title": "Snapshot Array", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3705, "total_accepted": 92700.0, "total_submissions": 250400.0, "testcase_example": "'[\"SnapshotArray\",\"set\",\"snap\",\"set\",\"get\"]\\n[[3],[0,5],[],[0,6],[0,0]]'", "body": "Implement a SnapshotArray that supports the following interface:\nSnapshotArray(int length) initializes an array-like data structure with the given length.\nInitially, each element equals 0.\nvoid set(index, val) sets the element at the given index to be equal to val.\nint snap()\ntakes a snapshot of the array and returns the snap_id: the total number of times we called snap() minus 1.\nint get(index, snap_id)\nreturns the value at the given index, at the time we took the snapshot with the given snap_id", "examples": [{"full_text": "Example 1:\nInput: [\"SnapshotArray\",\"set\",\"snap\",\"set\",\"get\"]\n[[3],[0,5],[],[0,6],[0,0]]\nOutput: [null,null,0,null,5]\nExplanation:\nSnapshotArray snapshotArr = new SnapshotArray(3); // set the length to be 3\nsnapshotArr.set(0,5); // Set array[0] = 5\nsnapshotArr.snap(); // Take a snapshot, return snap_id = 0\nsnapshotArr.set(0,6);\nsnapshotArr.get(0,0); // Get the value of array[0] with snap_id = 0, return 5", "input": "Input: [\"SnapshotArray\",\"set\",\"snap\",\"set\",\"get\"]\n[[3],[0,5],[],[0,6],[0,0]]", "output": "Output: [null,null,0,null,5]", "explanation": "Explanation:\nSnapshotArray snapshotArr = new SnapshotArray(3); // set the length to be 3\nsnapshotArr.set(0,5); // Set array[0] = 5\nsnapshotArr.snap(); // Take a snapshot, return snap_id = 0\nsnapshotArr.set(0,6);\nsnapshotArr.get(0,0); // Get the value of array[0] with snap_id = 0, return 5"}], "constraints": "Constraints:\n1 <= length\n<= 50000\nAt most 50000\ncalls will be made to set, snap, and get.\n0 <= index\n<\nlength\n0 <=\nsnap_id <\n(the total number of times we call snap())\n0 <=\nval <= 10^9", "notes": ""}, "1145": {"label": "Medium", "title": "Binary Tree Coloring Game", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5115, "total_accepted": 33100.0, "total_submissions": 64700.0, "testcase_example": "'[1,2,3,4,5,6,7,8,9,10,11]\\n11\\n3'", "body": "Two players play a turn based game on a binary tree. We are given the root of this binary tree, and the number of nodes n in the tree. n is odd, and each node has a distinct value from 1 to n.\nInitially, the first player names a value x with 1 <= x <= n, and the second player names a value y with 1 <= y <= n and y != x. The first player colors the node with value x red, and the second player colors the node with value y blue.\nThen, the players take turns starting with the first player. In each turn, that player chooses a node of their color (red if player 1, blue if player 2) and colors an uncolored neighbor of the chosen node (either the left child, right child, or parent of the chosen node.)\nIf (and only if) a player cannot choose such a node in this way, they must pass their turn. If both players pass their turn, the game ends, and the winner is the player that colored more nodes.\nYou are the second player. If it is possible to choose such a y to ensure you win the game, return true. If it is not possible, return false.", "examples": [{"full_text": "Example 1:\nInput: root = [1,2,3,4,5,6,7,8,9,10,11], n = 11, x = 3\nOutput: true\nExplanation: The second player can choose the node with value 2.", "input": "Input: root = [1,2,3,4,5,6,7,8,9,10,11], n = 11, x = 3", "output": "Output: true", "explanation": "Explanation: The second player can choose the node with value 2."}, {"full_text": "Example 2:\nInput: root = [1,2,3], n = 3, x = 1\nOutput: false", "input": "Input: root = [1,2,3], n = 3, x = 1", "output": "Output: false", "explanation": ""}], "constraints": "Constraints:\nThe number of nodes in the tree is n.\n1 <= x <= n <= 100\nn is odd.\n1 <= Node.val <= n\nAll the values of the tree are unique.", "notes": ""}, "1144": {"label": "Medium", "title": "Decrease Elements To Make Array Zigzag", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4694, "total_accepted": 14100.0, "total_submissions": 29900.0, "testcase_example": "'[1,2,3]'", "body": "Given an array nums of integers, a move\nconsists of choosing any element and decreasing it by 1.\nAn array A is a\nzigzag array\nif either:\nEvery even-indexed element is greater than adjacent elements, ie.\nA[0] > A[1] < A[2] > A[3] < A[4] > ...\nOR, every odd-indexed element is greater than adjacent elements, ie.\nA[0] < A[1] > A[2] < A[3] > A[4] < ...\nReturn the minimum number of moves to transform the given array nums into a zigzag array.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,2,3]\nOutput: 2\nExplanation: We can decrease 2 to 0 or 3 to 1.", "input": "Input: nums = [1,2,3]", "output": "Output: 2", "explanation": "Explanation: We can decrease 2 to 0 or 3 to 1."}, {"full_text": "Example 2:\nInput: nums = [9,6,1,6,2]\nOutput: 4", "input": "Input: nums = [9,6,1,6,2]", "output": "Output: 4", "explanation": ""}], "constraints": "Constraints:\n1 <= nums.length <= 1000\n1 <= nums[i] <= 1000", "notes": ""}, "1143": {"label": "Medium", "title": "Longest Common Subsequence", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5882999999999999, "total_accepted": 355500.0, "total_submissions": 604300.0, "testcase_example": "'\"abcde\"\\n\"ace\"'", "body": "Given two strings text1 and text2, return the length of their longest common subsequence. If there is no common subsequence, return 0.\nA subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.\nFor example, \"ace\" is a subsequence of \"abcde\".\nA common subsequence of two strings is a subsequence that is common to both strings.", "examples": [{"full_text": "Example 1:\nInput: text1 = \"abcde\", text2 = \"ace\"\nOutput: 3\nExplanation: The longest common subsequence is \"ace\" and its length is 3.", "input": "Input: text1 = \"abcde\", text2 = \"ace\"", "output": "Output: 3", "explanation": "Explanation: The longest common subsequence is \"ace\" and its length is 3."}, {"full_text": "Example 2:\nInput: text1 = \"abc\", text2 = \"abc\"\nOutput: 3\nExplanation: The longest common subsequence is \"abc\" and its length is 3.", "input": "Input: text1 = \"abc\", text2 = \"abc\"", "output": "Output: 3", "explanation": "Explanation: The longest common subsequence is \"abc\" and its length is 3."}, {"full_text": "Example 3:\nInput: text1 = \"abc\", text2 = \"def\"\nOutput: 0\nExplanation: There is no such common subsequence, so the result is 0.", "input": "Input: text1 = \"abc\", text2 = \"def\"", "output": "Output: 0", "explanation": "Explanation: There is no such common subsequence, so the result is 0."}], "constraints": "Constraints:\n1 <= text1.length, text2.length <= 1000\ntext1 and text2 consist of only lowercase English characters.", "notes": ""}, "1140": {"label": "Medium", "title": "Stone Game II", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6485, "total_accepted": 37300.0, "total_submissions": 57500.0, "testcase_example": "'[2,7,9,4,4]'", "body": "Alice and Bob continue their\ngames with piles of stones.\nThere are a number of\npiles\narranged in a row, and each pile has a positive integer number of stones\npiles[i].\nThe objective of the game is to end with the most\nstones.\nAlice\nand Bob take turns, with Alice starting first.\nInitially, M = 1.\nOn each player's turn, that player\ncan take all the stones in the first X remaining piles, where 1 <= X <= 2M.\nThen, we set\nM = max(M, X).\nThe game continues until all the stones have been taken.\nAssuming Alice and Bob play optimally, return the maximum number of stones Alice\ncan get.", "examples": [{"full_text": "Example 1:\nInput: piles = [2,7,9,4,4]\nOutput: 10\nExplanation: If Alice takes one pile at the beginning, Bob takes two piles, then Alice takes 2 piles again. Alice can get 2 + 4 + 4 = 10 piles in total. If Alice takes two piles at the beginning, then Bob can take all three piles left. In this case, Alice get 2 + 7 = 9 piles in total. So we return 10 since it's larger.", "input": "Input: piles = [2,7,9,4,4]", "output": "Output: 10", "explanation": "Explanation: If Alice takes one pile at the beginning, Bob takes two piles, then Alice takes 2 piles again. Alice can get 2 + 4 + 4 = 10 piles in total. If Alice takes two piles at the beginning, then Bob can take all three piles left. In this case, Alice get 2 + 7 = 9 piles in total. So we return 10 since it's larger."}, {"full_text": "Example 2:\nInput: piles = [1,2,3,4,5,100]\nOutput: 104", "input": "Input: piles = [1,2,3,4,5,100]", "output": "Output: 104", "explanation": ""}], "constraints": "Constraints:\n1 <= piles.length <= 100\n1 <= piles[i]\n<= 10^4", "notes": ""}, "1139": {"label": "Medium", "title": "Largest 1-Bordered Square", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.493, "total_accepted": 17500.0, "total_submissions": 35400.0, "testcase_example": "'[[1,1,1],[1,0,1],[1,1,1]]'", "body": "Given a 2D grid of 0s and 1s, return the number of elements in\nthe largest square\nsubgrid that has all 1s on its border, or 0 if such a subgrid\ndoesn't exist in the grid.", "examples": [{"full_text": "Example 1:\nInput: grid = [[1,1,1],[1,0,1],[1,1,1]]\nOutput: 9", "input": "Input: grid = [[1,1,1],[1,0,1],[1,1,1]]", "output": "Output: 9", "explanation": ""}, {"full_text": "Example 2:\nInput: grid = [[1,1,0,0]]\nOutput: 1", "input": "Input: grid = [[1,1,0,0]]", "output": "Output: 1", "explanation": ""}], "constraints": "Constraints:\n1 <= grid.length <= 100\n1 <= grid[0].length <= 100\ngrid[i][j] is 0 or 1", "notes": ""}, "1138": {"label": "Medium", "title": "Alphabet Board Path", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5231, "total_accepted": 38000.0, "total_submissions": 72600.0, "testcase_example": "'\"leet\"'", "body": "On an alphabet board, we start at position (0, 0), corresponding to character\nboard[0][0].\nHere, board = [\"abcde\", \"fghij\", \"klmno\", \"pqrst\", \"uvwxy\", \"z\"], as shown in the diagram below.\nWe may make the following moves:\n'U' moves our position up one row, if the position exists on the board;\n'D' moves our position down one row, if the position exists on the board;\n'L' moves our position left one column, if the position exists on the board;\n'R' moves our position right one column, if the position exists on the board;\n'!'\nadds the character board[r][c] at our current position (r, c)\nto the\nanswer.\n(Here, the only positions that exist on the board are positions with letters on them.)\nReturn a sequence of moves that makes our answer equal to target\nin the minimum number of moves.\nYou may return any path that does so.", "examples": [{"full_text": "Example 1:\nInput: target = \"leet\"\nOutput: \"DDR!UURRR!!DDD!\"", "input": "Input: target = \"leet\"", "output": "Output: \"DDR!UURRR!!DDD!\"", "explanation": ""}, {"full_text": "Example 2:\nInput: target = \"code\"\nOutput: \"RR!DDRR!UUL!R!\"", "input": "Input: target = \"code\"", "output": "Output: \"RR!DDRR!UUL!R!\"", "explanation": ""}], "constraints": "Constraints:\n1 <= target.length <= 100\ntarget consists only of English lowercase letters.", "notes": ""}, "1131": {"label": "Medium", "title": "Maximum of Absolute Value Expression", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5018, "total_accepted": 15400.0, "total_submissions": 30600.0, "testcase_example": "'[1,2,3,4]\\n[-1,4,5,6]'", "body": "Given two arrays of integers with equal lengths, return the maximum value of:\n|arr1[i] - arr1[j]| + |arr2[i] - arr2[j]| + |i - j|\nwhere the maximum is taken over all 0 <= i, j < arr1.length.", "examples": [{"full_text": "Example 1:\nInput: arr1 = [1,2,3,4], arr2 = [-1,4,5,6]\nOutput: 13", "input": "Input: arr1 = [1,2,3,4], arr2 = [-1,4,5,6]", "output": "Output: 13", "explanation": ""}, {"full_text": "Example 2:\nInput: arr1 = [1,-2,-5,0,10], arr2 = [0,-2,-1,-7,-4]\nOutput: 20", "input": "Input: arr1 = [1,-2,-5,0,10], arr2 = [0,-2,-1,-7,-4]", "output": "Output: 20", "explanation": ""}], "constraints": "Constraints:\n2 <= arr1.length == arr2.length <= 40000\n-10^6 <= arr1[i], arr2[i] <= 10^6", "notes": ""}, "1130": {"label": "Medium", "title": "Minimum Cost Tree From Leaf Values", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.684, "total_accepted": 68200.0, "total_submissions": 99800.0, "testcase_example": "'[6,2,4]'", "body": "Given an array arr of positive integers, consider all binary trees such that:\nEach node has either 0 or 2 children;\nThe values of arr correspond to the values of each leaf in an in-order traversal of the tree.\nThe value of each non-leaf node is equal to the product of the largest leaf value in its left and right subtree, respectively.\nAmong all possible binary trees considered, return the smallest possible sum of the values of each non-leaf node. It is guaranteed this sum fits into a 32-bit integer.\nA node is a leaf if and only if it has zero children.", "examples": [{"full_text": "Example 1:\nInput: arr = [6,2,4]\nOutput: 32\nExplanation: There are two possible trees shown.\nThe first has a non-leaf node sum 36, and the second has non-leaf node sum 32.", "input": "Input: arr = [6,2,4]", "output": "Output: 32", "explanation": "Explanation: There are two possible trees shown.\nThe first has a non-leaf node sum 36, and the second has non-leaf node sum 32."}, {"full_text": "Example 2:\nInput: arr = [4,11]\nOutput: 44", "input": "Input: arr = [4,11]", "output": "Output: 44", "explanation": ""}], "constraints": "Constraints:\n2 <= arr.length <= 40\n1 <= arr[i] <= 15\nIt is guaranteed that the answer fits into a 32-bit signed integer (i.e., it is less than 2^31).", "notes": ""}, "1129": {"label": "Medium", "title": "Shortest Path with Alternating Colors", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.41479999999999995, "total_accepted": 31100.0, "total_submissions": 74900.0, "testcase_example": "'3\\n[[0,1],[1,2]]\\n[]'", "body": "You are given an integer n, the number of nodes in a directed graph where the nodes are labeled from 0 to n - 1. Each edge is red or blue in this graph, and there could be self-edges and parallel edges.\nYou are given two arrays redEdges and blueEdges where:\nredEdges[i] = [ai, bi] indicates that there is a directed red edge from node ai to node bi in the graph, and\nblueEdges[j] = [uj, vj] indicates that there is a directed blue edge from node uj to node vj in the graph.\nReturn an array answer of length n, where each answer[x] is the length of the shortest path from node 0 to node x such that the edge colors alternate along the path, or -1 if such a path does not exist.", "examples": [{"full_text": "Example 1:\nInput: n = 3, redEdges = [[0,1],[1,2]], blueEdges = []\nOutput: [0,1,-1]", "input": "Input: n = 3, redEdges = [[0,1],[1,2]], blueEdges = []", "output": "Output: [0,1,-1]", "explanation": ""}, {"full_text": "Example 2:\nInput: n = 3, redEdges = [[0,1]], blueEdges = [[2,1]]\nOutput: [0,1,-1]", "input": "Input: n = 3, redEdges = [[0,1]], blueEdges = [[2,1]]", "output": "Output: [0,1,-1]", "explanation": ""}], "constraints": "Constraints:\n1 <= n <= 100\n0 <= redEdges.length,\nblueEdges.length <= 400\nredEdges[i].length == blueEdges[j].length == 2\n0 <= ai, bi, uj, vj < n", "notes": ""}, "1124": {"label": "Medium", "title": "Longest Well-Performing Interval", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3408, "total_accepted": 20600.0, "total_submissions": 60500.0, "testcase_example": "'[9,9,6,0,6,6,9]'", "body": "We are given hours, a list of the number of hours worked per day for a given employee.\nA day is considered to be a tiring day if and only if the number of hours worked is (strictly) greater than 8.\nA well-performing interval is an interval of days for which the number of tiring days is strictly larger than the number of non-tiring days.\nReturn the length of the longest well-performing interval.", "examples": [{"full_text": "Example 1:\nInput: hours = [9,9,6,0,6,6,9]\nOutput: 3\nExplanation: The longest well-performing interval is [9,9,6].", "input": "Input: hours = [9,9,6,0,6,6,9]", "output": "Output: 3", "explanation": "Explanation: The longest well-performing interval is [9,9,6]."}, {"full_text": "Example 2:\nInput: hours = [6,6,6]\nOutput: 0", "input": "Input: hours = [6,6,6]", "output": "Output: 0", "explanation": ""}], "constraints": "Constraints:\n1 <= hours.length <= 10^4\n0 <= hours[i] <= 16", "notes": ""}, "1123": {"label": "Medium", "title": "Lowest Common Ancestor of Deepest Leaves", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6973, "total_accepted": 69700.0, "total_submissions": 100000.0, "testcase_example": "'[3,5,1,6,2,0,8,null,null,7,4]'", "body": "Given the root of a binary tree, return the lowest common ancestor of its deepest leaves.\nRecall that:\nThe node of a binary tree is a leaf if and only if it has no children\nThe depth of the root of the tree is 0. if the depth of a node is d, the depth of each of its children is d + 1.\nThe lowest common ancestor of a set S of nodes, is the node A with the largest depth such that every node in S is in the subtree with root A.", "examples": [{"full_text": "Example 1:\nInput: root = [3,5,1,6,2,0,8,null,null,7,4]\nOutput: [2,7,4]\nExplanation: We return the node with value 2, colored in yellow in the diagram.\nThe nodes coloured in blue are the deepest leaf-nodes of the tree.\nNote that nodes 6, 0, and 8 are also leaf nodes, but the depth of them is 2, but the depth of nodes 7 and 4 is 3.", "input": "Input: root = [3,5,1,6,2,0,8,null,null,7,4]", "output": "Output: [2,7,4]", "explanation": "Explanation: We return the node with value 2, colored in yellow in the diagram.\nThe nodes coloured in blue are the deepest leaf-nodes of the tree.\nNote that nodes 6, 0, and 8 are also leaf nodes, but the depth of them is 2, but the depth of nodes 7 and 4 is 3."}, {"full_text": "Example 2:\nInput: root = [1]\nOutput: [1]\nExplanation: The root is the deepest node in the tree, and it's the lca of itself.", "input": "Input: root = [1]", "output": "Output: [1]", "explanation": "Explanation: The root is the deepest node in the tree, and it's the lca of itself."}, {"full_text": "Example 3:\nInput: root = [0,1,3,null,2]\nOutput: [2]\nExplanation: The deepest leaf node in the tree is 2, the lca of one node is itself.", "input": "Input: root = [0,1,3,null,2]", "output": "Output: [2]", "explanation": "Explanation: The deepest leaf node in the tree is 2, the lca of one node is itself."}], "constraints": "Constraints:\nThe number of nodes in the tree will be in the range [1, 1000].\n0 <= Node.val <= 1000\nThe values of the nodes in the tree are unique.", "notes": "Note: This question is the same as 865: https://leetcode.com/problems/smallest-subtree-with-all-the-deepest-nodes/"}, "1111": {"label": "Medium", "title": "Maximum Nesting Depth of Two Valid Parentheses Strings", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7279000000000001, "total_accepted": 18200.0, "total_submissions": 25000.0, "testcase_example": "'\"(()())\"'", "body": "A string is a valid parentheses string\n(denoted VPS) if and only if it consists of \"(\" and \")\" characters only, and:\nIt is the empty string, or\nIt can be written as\nAB\n(A\nconcatenated with\nB), where\nA\nand\nB\nare VPS's, or\nIt can be written as\n(A), where\nA\nis a VPS.\nWe can\nsimilarly define the nesting depth depth(S) of any VPS S as follows:\ndepth(\"\") = 0\ndepth(A + B) = max(depth(A), depth(B)), where A and B are VPS's\ndepth(\"(\" + A + \")\") = 1 + depth(A), where A is a VPS.\nFor example,\n\"\",\n\"()()\", and\n\"()(()())\"\nare VPS's (with nesting depths 0, 1, and 2), and \")(\" and \"(()\" are not VPS's.\nGiven a VPS seq, split it into two disjoint subsequences A and B, such that\nA and B are VPS's (and\nA.length + B.length = seq.length).\nNow choose any such A and B such that\nmax(depth(A), depth(B)) is the minimum possible value.\nReturn an answer array (of length seq.length) that encodes such a\nchoice of A and B:\nanswer[i] = 0 if seq[i] is part of A, else answer[i] = 1.\nNote that even though multiple answers may exist, you may return any of them.", "examples": [{"full_text": "Example 1:\nInput: seq = \"(()())\"\nOutput: [0,1,1,1,1,0]", "input": "Input: seq = \"(()())\"", "output": "Output: [0,1,1,1,1,0]", "explanation": ""}, {"full_text": "Example 2:\nInput: seq = \"()(())()\"\nOutput: [0,0,0,1,1,0,1,1]", "input": "Input: seq = \"()(())()\"", "output": "Output: [0,0,0,1,1,0,1,1]", "explanation": ""}], "constraints": "Constraints:\n1 <= seq.size <= 10000", "notes": ""}, "1110": {"label": "Medium", "title": "Delete Nodes And Return Forest", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6916, "total_accepted": 148100.0, "total_submissions": 214100.0, "testcase_example": "'[1,2,3,4,5,6,7]\\n[3,5]'", "body": "Given the root of a binary tree, each node in the tree has a distinct value.\nAfter deleting all nodes with a value in to_delete, we are left with a forest (a disjoint union of trees).\nReturn the roots of the trees in the remaining forest. You may return the result in any order.", "examples": [{"full_text": "Example 1:\nInput: root = [1,2,3,4,5,6,7], to_delete = [3,5]\nOutput: [[1,2,null,4],[6],[7]]", "input": "Input: root = [1,2,3,4,5,6,7], to_delete = [3,5]", "output": "Output: [[1,2,null,4],[6],[7]]", "explanation": ""}, {"full_text": "Example 2:\nInput: root = [1,2,4,null,3], to_delete = [3]\nOutput: [[1,2,4]]", "input": "Input: root = [1,2,4,null,3], to_delete = [3]", "output": "Output: [[1,2,4]]", "explanation": ""}], "constraints": "Constraints:\nThe number of nodes in the given tree is at most 1000.\nEach node has a distinct value between 1 and 1000.\nto_delete.length <= 1000\nto_delete contains distinct values between 1 and 1000.", "notes": ""}, "1109": {"label": "Medium", "title": "Corporate Flight Bookings", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5777, "total_accepted": 35800.0, "total_submissions": 62000.0, "testcase_example": "'[[1,2,10],[2,3,20],[2,5,25]]\\n5'", "body": "There are n flights that are labeled from 1 to n.\nYou are given an array of flight bookings bookings, where bookings[i] = [firsti, lasti, seatsi] represents a booking for flights firsti through lasti (inclusive) with seatsi seats reserved for each flight in the range.\nReturn an array answer of length n, where answer[i] is the total number of seats reserved for flight i.", "examples": [{"full_text": "Example 1:\nInput: bookings = [[1,2,10],[2,3,20],[2,5,25]], n = 5\nOutput: [10,55,45,25,25]\nExplanation:\nFlight labels: 1 2 3 4 5\nBooking 1 reserved: 10 10\nBooking 2 reserved: 20 20\nBooking 3 reserved: 25 25 25 25\nTotal seats: 10 55 45 25 25\nHence, answer = [10,55,45,25,25]", "input": "Input: bookings = [[1,2,10],[2,3,20],[2,5,25]], n = 5", "output": "Output: [10,55,45,25,25]", "explanation": "Explanation:\nFlight labels: 1 2 3 4 5\nBooking 1 reserved: 10 10\nBooking 2 reserved: 20 20\nBooking 3 reserved: 25 25 25 25\nTotal seats: 10 55 45 25 25\nHence, answer = [10,55,45,25,25]"}, {"full_text": "Example 2:\nInput: bookings = [[1,2,10],[2,2,15]], n = 2\nOutput: [10,25]\nExplanation:\nFlight labels: 1 2\nBooking 1 reserved: 10 10\nBooking 2 reserved: 15\nTotal seats: 10 25\nHence, answer = [10,25]", "input": "Input: bookings = [[1,2,10],[2,2,15]], n = 2", "output": "Output: [10,25]", "explanation": "Explanation:\nFlight labels: 1 2\nBooking 1 reserved: 10 10\nBooking 2 reserved: 15\nTotal seats: 10 25\nHence, answer = [10,25]"}], "constraints": "Constraints:\n1 <= n <= 2 * 10^4\n1 <= bookings.length <= 2 * 10^4\nbookings[i].length == 3\n1 <= firsti <= lasti <= n\n1 <= seatsi <= 10^4", "notes": ""}, "1105": {"label": "Medium", "title": "Filling Bookcase Shelves", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5793, "total_accepted": 31000.0, "total_submissions": 53500.0, "testcase_example": "'[[1,1],[2,3],[2,3],[1,1],[1,1],[1,1],[1,2]]\\n4'", "body": "You are given an array books where books[i] = [thicknessi, heighti] indicates the thickness and height of the i^th book. You are also given an integer shelfWidth.\nWe want to place these books in order onto bookcase shelves that have a total width shelfWidth.\nWe choose some of the books to place on this shelf such that the sum of their thickness is less than or equal to shelfWidth, then build another level of the shelf of the bookcase so that the total height of the bookcase has increased by the maximum height of the books we just put down. We repeat this process until there are no more books to place.\nNote that at each step of the above process, the order of the books we place is the same order as the given sequence of books.\nFor example, if we have an ordered list of 5 books, we might place the first and second book onto the first shelf, the third book on the second shelf, and the fourth and fifth book on the last shelf.\nReturn the minimum possible height that the total bookshelf can be after placing shelves in this manner.", "examples": [{"full_text": "Example 1:\nInput: books = [[1,1],[2,3],[2,3],[1,1],[1,1],[1,1],[1,2]], shelf_width = 4\nOutput: 6\nExplanation:\nThe sum of the heights of the 3 shelves is 1 + 3 + 2 = 6.\nNotice that book number 2 does not have to be on the first shelf.", "input": "Input: books = [[1,1],[2,3],[2,3],[1,1],[1,1],[1,1],[1,2]], shelf_width = 4", "output": "Output: 6", "explanation": "Explanation:\nThe sum of the heights of the 3 shelves is 1 + 3 + 2 = 6.\nNotice that book number 2 does not have to be on the first shelf."}, {"full_text": "Example 2:\nInput: books = [[1,3],[2,4],[3,2]], shelfWidth = 6\nOutput: 4", "input": "Input: books = [[1,3],[2,4],[3,2]], shelfWidth = 6", "output": "Output: 4", "explanation": ""}], "constraints": "Constraints:\n1 <= books.length <= 1000\n1 <= thicknessi <= shelfWidth <= 1000\n1 <= heighti <= 1000", "notes": ""}, "1104": {"label": "Medium", "title": "Path In Zigzag Labelled Binary Tree", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7431, "total_accepted": 31200.0, "total_submissions": 42000.0, "testcase_example": "'14'", "body": "In an infinite binary tree where every node has two children, the nodes are labelled in row order.\nIn the odd numbered rows (ie., the first, third, fifth,...), the labelling is left to right, while in the even numbered rows (second, fourth, sixth,...), the labelling is right to left.\nGiven the label of a node in this tree, return the labels in the path from the root of the tree to the\nnode with that label.", "examples": [{"full_text": "Example 1:\nInput: label = 14\nOutput: [1,3,4,14]", "input": "Input: label = 14", "output": "Output: [1,3,4,14]", "explanation": ""}, {"full_text": "Example 2:\nInput: label = 26\nOutput: [1,2,6,10,26]", "input": "Input: label = 26", "output": "Output: [1,2,6,10,26]", "explanation": ""}], "constraints": "Constraints:\n1 <= label <= 10^6", "notes": ""}, "1094": {"label": "Medium", "title": "Car Pooling", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5868, "total_accepted": 140200.0, "total_submissions": 239000.0, "testcase_example": "'[[2,1,5],[3,3,7]]\\n4'", "body": "There is a car with capacity empty seats. The vehicle only drives east (i.e., it cannot turn around and drive west).\nYou are given the integer capacity and an array trips where trips[i] = [numPassengersi, fromi, toi] indicates that the i^th trip has numPassengersi passengers and the locations to pick them up and drop them off are fromi and toi respectively. The locations are given as the number of kilometers due east from the car's initial location.\nReturn true if it is possible to pick up and drop off all passengers for all the given trips, or false otherwise.", "examples": [{"full_text": "Example 1:\nInput: trips = [[2,1,5],[3,3,7]], capacity = 4\nOutput: false", "input": "Input: trips = [[2,1,5],[3,3,7]], capacity = 4", "output": "Output: false", "explanation": ""}, {"full_text": "Example 2:\nInput: trips = [[2,1,5],[3,3,7]], capacity = 5\nOutput: true", "input": "Input: trips = [[2,1,5],[3,3,7]], capacity = 5", "output": "Output: true", "explanation": ""}], "constraints": "Constraints:\n1 <= trips.length <= 1000\ntrips[i].length == 3\n1 <= numPassengersi <= 100\n0 <= fromi < toi <= 1000\n1 <= capacity <= 10^5", "notes": ""}, "1093": {"label": "Medium", "title": "Statistics from a Large Sample", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4618, "total_accepted": 12800.0, "total_submissions": 27800.0, "testcase_example": "'[0,1,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]'", "body": "You are given a large sample of integers in the range [0, 255]. Since the sample is so large, it is represented by an array count\nwhere count[k] is the number of times that k appears in the sample.\nCalculate the following statistics:\nminimum: The minimum element in the sample.\nmaximum: The maximum element in the sample.\nmean: The average of the sample, calculated as the total sum of all elements divided by the total number of elements.\nmedian:\n\nIf the sample has an odd number of elements, then the median is the middle element once the sample is sorted.\nIf the sample has an even number of elements, then the median is the average of the two middle elements once the sample is sorted.\n\n\nmode: The number that appears the most in the sample. It is guaranteed to be unique.\nReturn the statistics of the sample as an array of floating-point numbers [minimum, maximum, mean, median, mode]. Answers within 10^-5 of the actual answer will be accepted.", "examples": [{"full_text": "Example 1:\nInput: count = [0,1,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\nOutput: [1.00000,3.00000,2.37500,2.50000,3.00000]\nExplanation: The sample represented by count is [1,2,2,2,3,3,3,3].\nThe minimum and maximum are 1 and 3 respectively.\nThe mean is (1+2+2+2+3+3+3+3) / 8 = 19 / 8 = 2.375.\nSince the size of the sample is even, the median is the average of the two middle elements 2 and 3, which is 2.5.\nThe mode is 3 as it appears the most in the sample.", "input": "Input: count = [0,1,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]", "output": "Output: [1.00000,3.00000,2.37500,2.50000,3.00000]", "explanation": "Explanation: The sample represented by count is [1,2,2,2,3,3,3,3].\nThe minimum and maximum are 1 and 3 respectively.\nThe mean is (1+2+2+2+3+3+3+3) / 8 = 19 / 8 = 2.375.\nSince the size of the sample is even, the median is the average of the two middle elements 2 and 3, which is 2.5.\nThe mode is 3 as it appears the most in the sample."}, {"full_text": "Example 2:\nInput: count = [0,4,3,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\nOutput: [1.00000,4.00000,2.18182,2.00000,1.00000]\nExplanation: The sample represented by count is [1,1,1,1,2,2,2,3,3,4,4].\nThe minimum and maximum are 1 and 4 respectively.\nThe mean is (1+1+1+1+2+2+2+3+3+4+4) / 11 = 24 / 11 = 2.18181818... (for display purposes, the output shows the rounded number 2.18182).\nSince the size of the sample is odd, the median is the middle element 2.\nThe mode is 1 as it appears the most in the sample.", "input": "Input: count = [0,4,3,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]", "output": "Output: [1.00000,4.00000,2.18182,2.00000,1.00000]", "explanation": "Explanation: The sample represented by count is [1,1,1,1,2,2,2,3,3,4,4].\nThe minimum and maximum are 1 and 4 respectively.\nThe mean is (1+1+1+1+2+2+2+3+3+4+4) / 11 = 24 / 11 = 2.18181818... (for display purposes, the output shows the rounded number 2.18182).\nSince the size of the sample is odd, the median is the middle element 2.\nThe mode is 1 as it appears the most in the sample."}], "constraints": "Constraints:\ncount.length == 256\n0 <= count[i] <= 10^9\n1 <= sum(count) <= 10^9\nThe mode of the sample that count represents is unique.", "notes": ""}, "1091": {"label": "Medium", "title": "Shortest Path in Binary Matrix", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.42100000000000004, "total_accepted": 152800.0, "total_submissions": 362900.0, "testcase_example": "'[[0,1],[1,0]]'", "body": "Given an n x n binary matrix grid, return the length of the shortest clear path in the matrix. If there is no clear path, return -1.\nA clear path in a binary matrix is a path from the top-left cell (i.e., (0, 0)) to the bottom-right cell (i.e., (n - 1, n - 1)) such that:\nAll the visited cells of the path are 0.\nAll the adjacent cells of the path are 8-directionally connected (i.e., they are different and they share an edge or a corner).\nThe length of a clear path is the number of visited cells of this path.", "examples": [{"full_text": "Example 1:\nInput: grid = [[0,1],[1,0]]\nOutput: 2", "input": "Input: grid = [[0,1],[1,0]]", "output": "Output: 2", "explanation": ""}, {"full_text": "Example 2:\nInput: grid = [[0,0,0],[1,1,0],[1,1,0]]\nOutput: 4", "input": "Input: grid = [[0,0,0],[1,1,0],[1,1,0]]", "output": "Output: 4", "explanation": ""}, {"full_text": "Example 3:\nInput: grid = [[1,0,0],[1,1,0],[1,1,0]]\nOutput: -1", "input": "Input: grid = [[1,0,0],[1,1,0],[1,1,0]]", "output": "Output: -1", "explanation": ""}], "constraints": "Constraints:\nn == grid.length\nn == grid[i].length\n1 <= n <= 100\ngrid[i][j] is 0 or 1", "notes": ""}, "1090": {"label": "Medium", "title": "Largest Values From Labels", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6049, "total_accepted": 26300.0, "total_submissions": 43500.0, "testcase_example": "'[5,4,3,2,1]\\n[1,1,2,2,3]\\n3\\n1'", "body": "There is a set of n items. You are given two integer arrays values and labels where the value and the label of the i^th element are values[i] and labels[i] respectively. You are also given two integers numWanted and useLimit.\nChoose a subset s of the n elements such that:\nThe size of the subset s is less than or equal to numWanted.\nThere are at most useLimit items with the same label in s.\nThe score of a subset is the sum of the values in the subset.\nReturn the maximum score of a subset s.", "examples": [{"full_text": "Example 1:\nInput: values = [5,4,3,2,1], labels = [1,1,2,2,3], numWanted = 3, useLimit = 1\nOutput: 9\nExplanation: The subset chosen is the first, third, and fifth items.", "input": "Input: values = [5,4,3,2,1], labels = [1,1,2,2,3], numWanted = 3, useLimit = 1", "output": "Output: 9", "explanation": "Explanation: The subset chosen is the first, third, and fifth items."}, {"full_text": "Example 2:\nInput: values = [5,4,3,2,1], labels = [1,3,3,3,2], numWanted = 3, useLimit = 2\nOutput: 12\nExplanation: The subset chosen is the first, second, and third items.", "input": "Input: values = [5,4,3,2,1], labels = [1,3,3,3,2], numWanted = 3, useLimit = 2", "output": "Output: 12", "explanation": "Explanation: The subset chosen is the first, second, and third items."}, {"full_text": "Example 3:\nInput: values = [9,8,8,7,6], labels = [0,0,0,1,1], numWanted = 3, useLimit = 1\nOutput: 16\nExplanation: The subset chosen is the first and fourth items.", "input": "Input: values = [9,8,8,7,6], labels = [0,0,0,1,1], numWanted = 3, useLimit = 1", "output": "Output: 16", "explanation": "Explanation: The subset chosen is the first and fourth items."}], "constraints": "Constraints:\nn == values.length == labels.length\n1 <= n <= 2 * 10^4\n0 <= values[i], labels[i] <= 2 * 10^4\n1 <= numWanted, useLimit <= n", "notes": ""}, "1081": {"label": "Medium", "title": "Smallest Subsequence of Distinct Characters", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5490999999999999, "total_accepted": 32800.0, "total_submissions": 59700.0, "testcase_example": "'\"bcabc\"'", "body": "Given a string s, return the lexicographically smallest subsequence of s that contains all the distinct characters of s exactly once.", "examples": [{"full_text": "Example 1:\nInput: s = \"bcabc\"\nOutput: \"abc\"", "input": "Input: s = \"bcabc\"", "output": "Output: \"abc\"", "explanation": ""}, {"full_text": "Example 2:\nInput: s = \"cbacdcbc\"\nOutput: \"acdb\"", "input": "Input: s = \"cbacdcbc\"", "output": "Output: \"acdb\"", "explanation": ""}], "constraints": "Constraints:\n1 <= s.length <= 1000\ns consists of lowercase English letters.", "notes": "Note: This question is the same as 316: https://leetcode.com/problems/remove-duplicate-letters/"}, "1080": {"label": "Medium", "title": "Insufficient Nodes in Root to Leaf Paths", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5162, "total_accepted": 24000.0, "total_submissions": 46500.0, "testcase_example": "'[1,2,3,4,-99,-99,7,8,9,-99,-99,12,13,-99,14]\\n1'", "body": "Given the root of a binary tree and an integer limit, delete all insufficient nodes in the tree simultaneously, and return the root of the resulting binary tree.\nA node is insufficient if every root to leaf path intersecting this node has a sum strictly less than limit.\nA leaf is a node with no children.", "examples": [{"full_text": "Example 1:\nInput: root = [1,2,3,4,-99,-99,7,8,9,-99,-99,12,13,-99,14], limit = 1\nOutput: [1,2,3,4,null,null,7,8,9,null,14]", "input": "Input: root = [1,2,3,4,-99,-99,7,8,9,-99,-99,12,13,-99,14], limit = 1", "output": "Output: [1,2,3,4,null,null,7,8,9,null,14]", "explanation": ""}, {"full_text": "Example 2:\nInput: root = [5,4,8,11,null,17,4,7,1,null,null,5,3], limit = 22\nOutput: [5,4,8,11,null,17,4,7,null,null,null,5]", "input": "Input: root = [5,4,8,11,null,17,4,7,1,null,null,5,3], limit = 22", "output": "Output: [5,4,8,11,null,17,4,7,null,null,null,5]", "explanation": ""}, {"full_text": "Example 3:\nInput: root = [1,2,-3,-5,null,4,null], limit = -1\nOutput: [1,null,-3,4]", "input": "Input: root = [1,2,-3,-5,null,4,null], limit = -1", "output": "Output: [1,null,-3,4]", "explanation": ""}], "constraints": "Constraints:\nThe number of nodes in the tree is in the range [1, 5000].\n-10^5 <= Node.val <= 10^5\n-10^9 <= limit <= 10^9", "notes": ""}, "1079": {"label": "Medium", "title": "Letter Tile Possibilities", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7615999999999999, "total_accepted": 64000.0, "total_submissions": 84100.0, "testcase_example": "'\"AAB\"'", "body": "You have n\ntiles, where each tile has one letter tiles[i] printed on it.\nReturn the number of possible non-empty sequences of letters you can make using the letters printed on those tiles.", "examples": [{"full_text": "Example 1:\nInput: tiles = \"AAB\"\nOutput: 8\nExplanation: The possible sequences are \"A\", \"B\", \"AA\", \"AB\", \"BA\", \"AAB\", \"ABA\", \"BAA\".", "input": "Input: tiles = \"AAB\"", "output": "Output: 8", "explanation": "Explanation: The possible sequences are \"A\", \"B\", \"AA\", \"AB\", \"BA\", \"AAB\", \"ABA\", \"BAA\"."}, {"full_text": "Example 2:\nInput: tiles = \"AAABBC\"\nOutput: 188", "input": "Input: tiles = \"AAABBC\"", "output": "Output: 188", "explanation": ""}, {"full_text": "Example 3:\nInput: tiles = \"V\"\nOutput: 1", "input": "Input: tiles = \"V\"", "output": "Output: 1", "explanation": ""}], "constraints": "Constraints:\n1 <= tiles.length <= 7\ntiles consists of uppercase English letters.", "notes": ""}, "1073": {"label": "Medium", "title": "Adding Two Negabinary Numbers", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.35509999999999997, "total_accepted": 11100.0, "total_submissions": 31300.0, "testcase_example": "'[1,1,1,1,1]\\n[1,0,1]'", "body": "Given two numbers arr1 and arr2 in base -2, return the result of adding them together.\nEach number is given in array format:\nas an array of 0s and 1s, from most significant bit to least significant bit.\nFor example, arr = [1,1,0,1] represents the number (-2)^3\n+ (-2)^2 + (-2)^0 = -3.\nA number arr in array, format is also guaranteed to have no leading zeros: either\narr == [0] or arr[0] == 1.\nReturn the result of adding arr1 and arr2 in the same format: as an array of 0s and 1s with no leading zeros.", "examples": [{"full_text": "Example 1:\nInput: arr1 = [1,1,1,1,1], arr2 = [1,0,1]\nOutput: [1,0,0,0,0]\nExplanation: arr1 represents 11, arr2 represents 5, the output represents 16.", "input": "Input: arr1 = [1,1,1,1,1], arr2 = [1,0,1]", "output": "Output: [1,0,0,0,0]", "explanation": "Explanation: arr1 represents 11, arr2 represents 5, the output represents 16."}, {"full_text": "Example 2:\nInput: arr1 = [0], arr2 = [0]\nOutput: [0]", "input": "Input: arr1 = [0], arr2 = [0]", "output": "Output: [0]", "explanation": ""}, {"full_text": "Example 3:\nInput: arr1 = [0], arr2 = [1]\nOutput: [1]", "input": "Input: arr1 = [0], arr2 = [1]", "output": "Output: [1]", "explanation": ""}], "constraints": "Constraints:\n1 <= arr1.length,\narr2.length <= 1000\narr1[i]\nand arr2[i] are\n0 or 1\narr1 and arr2 have no leading zeros", "notes": ""}, "1072": {"label": "Medium", "title": "Flip Columns For Maximum Number of Equal Rows", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6293, "total_accepted": 16100.000000000002, "total_submissions": 25600.0, "testcase_example": "'[[0,1],[1,1]]'", "body": "You are given an m x n binary matrix matrix.\nYou can choose any number of columns in the matrix and flip every cell in that column (i.e., Change the value of the cell from 0 to 1 or vice versa).\nReturn the maximum number of rows that have all values equal after some number of flips.", "examples": [{"full_text": "Example 1:\nInput: matrix = [[0,1],[1,1]]\nOutput: 1\nExplanation: After flipping no values, 1 row has all values equal.", "input": "Input: matrix = [[0,1],[1,1]]", "output": "Output: 1", "explanation": "Explanation: After flipping no values, 1 row has all values equal."}, {"full_text": "Example 2:\nInput: matrix = [[0,1],[1,0]]\nOutput: 2\nExplanation: After flipping values in the first column, both rows have equal values.", "input": "Input: matrix = [[0,1],[1,0]]", "output": "Output: 2", "explanation": "Explanation: After flipping values in the first column, both rows have equal values."}, {"full_text": "Example 3:\nInput: matrix = [[0,0,0],[0,0,1],[1,1,0]]\nOutput: 2\nExplanation: After flipping values in the first two columns, the last two rows have equal values.", "input": "Input: matrix = [[0,0,0],[0,0,1],[1,1,0]]", "output": "Output: 2", "explanation": "Explanation: After flipping values in the first two columns, the last two rows have equal values."}], "constraints": "Constraints:\nm == matrix.length\nn == matrix[i].length\n1 <= m, n <= 300\nmatrix[i][j] is either\n0 or 1.", "notes": ""}, "1054": {"label": "Medium", "title": "Distant Barcodes", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4515, "total_accepted": 28500.0, "total_submissions": 63100.0, "testcase_example": "'[1,1,1,2,2,2]'", "body": "In a warehouse, there is a row of barcodes, where the i^th barcode is barcodes[i].\nRearrange the barcodes so that no two adjacent barcodes are equal. You may return any answer, and it is guaranteed an answer exists.", "examples": [{"full_text": "Example 1:\nInput: barcodes = [1,1,1,2,2,2]\nOutput: [2,1,2,1,2,1]", "input": "Input: barcodes = [1,1,1,2,2,2]", "output": "Output: [2,1,2,1,2,1]", "explanation": ""}, {"full_text": "Example 2:\nInput: barcodes = [1,1,1,1,2,2,3,3]\nOutput: [1,3,1,3,1,2,1,2]", "input": "Input: barcodes = [1,1,1,1,2,2,3,3]", "output": "Output: [1,3,1,3,1,2,1,2]", "explanation": ""}], "constraints": "Constraints:\n1 <= barcodes.length <= 10000\n1 <= barcodes[i] <= 10000", "notes": ""}, "1053": {"label": "Medium", "title": "Previous Permutation With One Swap", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5204, "total_accepted": 29000.0, "total_submissions": 55700.0, "testcase_example": "'[3,2,1]'", "body": "Given an array of positive integers arr (not necessarily distinct), return the lexicographically largest permutation that is smaller than arr, that can be made with exactly one swap (A swap exchanges the positions of two numbers arr[i] and arr[j]). If it cannot be done, then return the same array.", "examples": [{"full_text": "Example 1:\nInput: arr = [3,2,1]\nOutput: [3,1,2]\nExplanation: Swapping 2 and 1.", "input": "Input: arr = [3,2,1]", "output": "Output: [3,1,2]", "explanation": "Explanation: Swapping 2 and 1."}, {"full_text": "Example 2:\nInput: arr = [1,1,5]\nOutput: [1,1,5]\nExplanation: This is already the smallest permutation.", "input": "Input: arr = [1,1,5]", "output": "Output: [1,1,5]", "explanation": "Explanation: This is already the smallest permutation."}, {"full_text": "Example 3:\nInput: arr = [1,9,4,6,7]\nOutput: [1,7,4,6,9]\nExplanation: Swapping 9 and 7.", "input": "Input: arr = [1,9,4,6,7]", "output": "Output: [1,7,4,6,9]", "explanation": "Explanation: Swapping 9 and 7."}], "constraints": "Constraints:\n1 <= arr.length <= 10^4\n1 <= arr[i] <= 10^4", "notes": ""}, "1052": {"label": "Medium", "title": "Grumpy Bookstore Owner", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5661999999999999, "total_accepted": 50800.0, "total_submissions": 89700.0, "testcase_example": "'[1,0,1,2,1,1,7,5]\\n[0,1,0,1,0,1,0,1]\\n3'", "body": "There is a bookstore owner that has a store open for n minutes. Every minute, some number of customers enter the store. You are given an integer array customers of length n where customers[i] is the number of the customer that enters the store at the start of the i^th minute and all those customers leave after the end of that minute.\nOn some minutes, the bookstore owner is grumpy. You are given a binary array grumpy where grumpy[i] is 1 if the bookstore owner is grumpy during the i^th minute, and is 0 otherwise.\nWhen the bookstore owner is grumpy, the customers of that minute are not satisfied, otherwise, they are satisfied.\nThe bookstore owner knows a secret technique to keep themselves not grumpy for minutes consecutive minutes, but can only use it once.\nReturn the maximum number of customers that can be satisfied throughout the day.", "examples": [{"full_text": "Example 1:\nInput: customers = [1,0,1,2,1,1,7,5], grumpy = [0,1,0,1,0,1,0,1], minutes = 3\nOutput: 16\nExplanation: The bookstore owner keeps themselves not grumpy for the last 3 minutes.\nThe maximum number of customers that can be satisfied = 1 + 1 + 1 + 1 + 7 + 5 = 16.", "input": "Input: customers = [1,0,1,2,1,1,7,5], grumpy = [0,1,0,1,0,1,0,1], minutes = 3", "output": "Output: 16", "explanation": "Explanation: The bookstore owner keeps themselves not grumpy for the last 3 minutes.\nThe maximum number of customers that can be satisfied = 1 + 1 + 1 + 1 + 7 + 5 = 16."}, {"full_text": "Example 2:\nInput: customers = [1], grumpy = [0], minutes = 1\nOutput: 1", "input": "Input: customers = [1], grumpy = [0], minutes = 1", "output": "Output: 1", "explanation": ""}], "constraints": "Constraints:\nn == customers.length == grumpy.length\n1 <= minutes <= n <= 2 * 10^4\n0 <= customers[i] <= 1000\ngrumpy[i] is either 0 or 1.", "notes": ""}, "1049": {"label": "Medium", "title": "Last Stone Weight II", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5055, "total_accepted": 49500.0, "total_submissions": 97900.0, "testcase_example": "'[2,7,4,1,8,1]'", "body": "You are given an array of integers stones where stones[i] is the weight of the i^th stone.\nWe are playing a game with the stones. On each turn, we choose any two stones and smash them together. Suppose the stones have weights x and y with x <= y. The result of this smash is:\nIf x == y, both stones are destroyed, and\nIf x != y, the stone of weight x is destroyed, and the stone of weight y has new weight y - x.\nAt the end of the game, there is at most one stone left.\nReturn the smallest possible weight of the left stone. If there are no stones left, return 0.", "examples": [{"full_text": "Example 1:\nInput: stones = [2,7,4,1,8,1]\nOutput: 1\nExplanation:\nWe can combine 2 and 4 to get 2, so the array converts to [2,7,1,8,1] then,\nwe can combine 7 and 8 to get 1, so the array converts to [2,1,1,1] then,\nwe can combine 2 and 1 to get 1, so the array converts to [1,1,1] then,\nwe can combine 1 and 1 to get 0, so the array converts to [1], then that's the optimal value.", "input": "Input: stones = [2,7,4,1,8,1]", "output": "Output: 1", "explanation": "Explanation:\nWe can combine 2 and 4 to get 2, so the array converts to [2,7,1,8,1] then,\nwe can combine 7 and 8 to get 1, so the array converts to [2,1,1,1] then,\nwe can combine 2 and 1 to get 1, so the array converts to [1,1,1] then,\nwe can combine 1 and 1 to get 0, so the array converts to [1], then that's the optimal value."}, {"full_text": "Example 2:\nInput: stones = [31,26,33,21,40]\nOutput: 5", "input": "Input: stones = [31,26,33,21,40]", "output": "Output: 5", "explanation": ""}], "constraints": "Constraints:\n1 <= stones.length <= 30\n1 <= stones[i] <= 100", "notes": ""}, "1048": {"label": "Medium", "title": "Longest String Chain", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5759000000000001, "total_accepted": 183000.0, "total_submissions": 317700.0, "testcase_example": "'[\"a\",\"b\",\"ba\",\"bca\",\"bda\",\"bdca\"]'", "body": "You are given an array of words where each word consists of lowercase English letters.\nwordA is a predecessor of wordB if and only if we can insert exactly one letter anywhere in wordA without changing the order of the other characters to make it equal to wordB.\nFor example, \"abc\" is a predecessor of \"abac\", while \"cba\" is not a predecessor of \"bcad\".\nA word chain is a sequence of words [word1, word2, ..., wordk] with k >= 1, where word1 is a predecessor of word2, word2 is a predecessor of word3, and so on. A single word is trivially a word chain with k == 1.\nReturn the length of the longest possible word chain with words chosen from the given list of words.", "examples": [{"full_text": "Example 1:\nInput: words = [\"a\",\"b\",\"ba\",\"bca\",\"bda\",\"bdca\"]\nOutput: 4\nExplanation: One of the longest word chains is [\"a\",\"ba\",\"bda\",\"bdca\"].", "input": "Input: words = [\"a\",\"b\",\"ba\",\"bca\",\"bda\",\"bdca\"]", "output": "Output: 4", "explanation": "Explanation: One of the longest word chains is [\"a\",\"ba\",\"bda\",\"bdca\"]."}, {"full_text": "Example 2:\nInput: words = [\"xbc\",\"pcxbcf\",\"xb\",\"cxbc\",\"pcxbc\"]\nOutput: 5\nExplanation: All the words can be put in a word chain [\"xb\", \"xbc\", \"cxbc\", \"pcxbc\", \"pcxbcf\"].", "input": "Input: words = [\"xbc\",\"pcxbcf\",\"xb\",\"cxbc\",\"pcxbc\"]", "output": "Output: 5", "explanation": "Explanation: All the words can be put in a word chain [\"xb\", \"xbc\", \"cxbc\", \"pcxbc\", \"pcxbcf\"]."}, {"full_text": "Example 3:\nInput: words = [\"abcd\",\"dbqca\"]\nOutput: 1\nExplanation: The trivial word chain [\"abcd\"] is one of the longest word chains.\n[\"abcd\",\"dbqca\"] is not a valid word chain because the ordering of the letters is changed.", "input": "Input: words = [\"abcd\",\"dbqca\"]", "output": "Output: 1", "explanation": "Explanation: The trivial word chain [\"abcd\"] is one of the longest word chains.\n[\"abcd\",\"dbqca\"] is not a valid word chain because the ordering of the letters is changed."}], "constraints": "Constraints:\n1 <= words.length <= 1000\n1 <= words[i].length <= 16\nwords[i] only consists of lowercase English letters.", "notes": ""}, "1043": {"label": "Medium", "title": "Partition Array for Maximum Sum", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.701, "total_accepted": 44900.0, "total_submissions": 64099.99999999999, "testcase_example": "'[1,15,7,9,2,5,10]\\n3'", "body": "Given an integer array arr, partition the array into (contiguous) subarrays of length at most k. After partitioning, each subarray has their values changed to become the maximum value of that subarray.\nReturn the largest sum of the given array after partitioning. Test cases are generated so that the answer fits in a 32-bit integer.", "examples": [{"full_text": "Example 1:\nInput: arr = [1,15,7,9,2,5,10], k = 3\nOutput: 84\nExplanation: arr becomes [15,15,15,9,10,10,10]", "input": "Input: arr = [1,15,7,9,2,5,10], k = 3", "output": "Output: 84", "explanation": "Explanation: arr becomes [15,15,15,9,10,10,10]"}, {"full_text": "Example 2:\nInput: arr = [1,4,1,5,7,3,6,1,9,9,3], k = 4\nOutput: 83", "input": "Input: arr = [1,4,1,5,7,3,6,1,9,9,3], k = 4", "output": "Output: 83", "explanation": ""}, {"full_text": "Example 3:\nInput: arr = [1], k = 1\nOutput: 1", "input": "Input: arr = [1], k = 1", "output": "Output: 1", "explanation": ""}], "constraints": "Constraints:\n1 <= arr.length <= 500\n0 <= arr[i] <= 10^9\n1 <= k <= arr.length", "notes": ""}, "1042": {"label": "Medium", "title": "Flower Planting With No Adjacent", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.49729999999999996, "total_accepted": 52200.0, "total_submissions": 104900.0, "testcase_example": "'3\\n[[1,2],[2,3],[3,1]]'", "body": "You have n gardens, labeled from 1 to n, and an array paths where paths[i] = [xi, yi] describes a bidirectional path between garden xi to garden yi. In each garden, you want to plant one of 4 types of flowers.\nAll gardens have at most 3 paths coming into or leaving it.\nYour task is to choose a flower type for each garden such that, for any two gardens connected by a path, they have different types of flowers.\nReturn any such a choice as an array answer, where answer[i] is the type of flower planted in the (i+1)^th garden. The flower types are denoted 1, 2, 3, or 4. It is guaranteed an answer exists.", "examples": [{"full_text": "Example 1:\nInput: n = 3, paths = [[1,2],[2,3],[3,1]]\nOutput: [1,2,3]\nExplanation:\nGardens 1 and 2 have different types.\nGardens 2 and 3 have different types.\nGardens 3 and 1 have different types.\nHence, [1,2,3] is a valid answer. Other valid answers include [1,2,4], [1,4,2], and [3,2,1].", "input": "Input: n = 3, paths = [[1,2],[2,3],[3,1]]", "output": "Output: [1,2,3]", "explanation": "Explanation:\nGardens 1 and 2 have different types.\nGardens 2 and 3 have different types.\nGardens 3 and 1 have different types.\nHence, [1,2,3] is a valid answer. Other valid answers include [1,2,4], [1,4,2], and [3,2,1]."}, {"full_text": "Example 2:\nInput: n = 4, paths = [[1,2],[3,4]]\nOutput: [1,2,1,2]", "input": "Input: n = 4, paths = [[1,2],[3,4]]", "output": "Output: [1,2,1,2]", "explanation": ""}, {"full_text": "Example 3:\nInput: n = 4, paths = [[1,2],[2,3],[3,4],[4,1],[1,3],[2,4]]\nOutput: [1,2,3,4]", "input": "Input: n = 4, paths = [[1,2],[2,3],[3,4],[4,1],[1,3],[2,4]]", "output": "Output: [1,2,3,4]", "explanation": ""}], "constraints": "Constraints:\n1 <= n <= 10^4\n0 <= paths.length <= 2 * 10^4\npaths[i].length == 2\n1 <= xi, yi <= n\nxi != yi\nEvery garden has at most 3 paths coming into or leaving it.", "notes": ""}, "1041": {"label": "Medium", "title": "Robot Bounded In Circle", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5556, "total_accepted": 175400.0, "total_submissions": 315700.0, "testcase_example": "'\"GGLLGG\"'", "body": "On an infinite plane, a robot initially stands at (0, 0) and faces north. Note that:\nThe north direction is the positive direction of the y-axis.\nThe south direction is the negative direction of the y-axis.\nThe east direction is the positive direction of the x-axis.\nThe west direction is the negative direction of the x-axis.\nThe robot can receive one of three instructions:\n\"G\": go straight 1 unit.\n\"L\": turn 90 degrees to the left (i.e., anti-clockwise direction).\n\"R\": turn 90 degrees to the right (i.e., clockwise direction).\nThe robot performs the instructions given in order, and repeats them forever.\nReturn true if and only if there exists a circle in the plane such that the robot never leaves the circle.", "examples": [{"full_text": "Example 1:\nInput: instructions = \"GGLLGG\"\nOutput: true\nExplanation: The robot is initially at (0, 0) facing the north direction.\n\"G\": move one step. Position: (0, 1). Direction: North.\n\"G\": move one step. Position: (0, 2). Direction: North.\n\"L\": turn 90 degrees anti-clockwise. Position: (0, 2). Direction: West.\n\"L\": turn 90 degrees anti-clockwise. Position: (0, 2). Direction: South.\n\"G\": move one step. Position: (0, 1). Direction: South.\n\"G\": move one step. Position: (0, 0). Direction: South.\nRepeating the instructions, the robot goes into the cycle: (0, 0) --> (0, 1) --> (0, 2) --> (0, 1) --> (0, 0).\nBased on that, we return true.", "input": "Input: instructions = \"GGLLGG\"", "output": "Output: true", "explanation": "Explanation: The robot is initially at (0, 0) facing the north direction.\n\"G\": move one step. Position: (0, 1). Direction: North.\n\"G\": move one step. Position: (0, 2). Direction: North.\n\"L\": turn 90 degrees anti-clockwise. Position: (0, 2). Direction: West.\n\"L\": turn 90 degrees anti-clockwise. Position: (0, 2). Direction: South.\n\"G\": move one step. Position: (0, 1). Direction: South.\n\"G\": move one step. Position: (0, 0). Direction: South.\nRepeating the instructions, the robot goes into the cycle: (0, 0) --> (0, 1) --> (0, 2) --> (0, 1) --> (0, 0).\nBased on that, we return true."}, {"full_text": "Example 2:\nInput: instructions = \"GG\"\nOutput: false\nExplanation: The robot is initially at (0, 0) facing the north direction.\n\"G\": move one step. Position: (0, 1). Direction: North.\n\"G\": move one step. Position: (0, 2). Direction: North.\nRepeating the instructions, keeps advancing in the north direction and does not go into cycles.\nBased on that, we return false.", "input": "Input: instructions = \"GG\"", "output": "Output: false", "explanation": "Explanation: The robot is initially at (0, 0) facing the north direction.\n\"G\": move one step. Position: (0, 1). Direction: North.\n\"G\": move one step. Position: (0, 2). Direction: North.\nRepeating the instructions, keeps advancing in the north direction and does not go into cycles.\nBased on that, we return false."}, {"full_text": "Example 3:\nInput: instructions = \"GL\"\nOutput: true\nExplanation: The robot is initially at (0, 0) facing the north direction.\n\"G\": move one step. Position: (0, 1). Direction: North.\n\"L\": turn 90 degrees anti-clockwise. Position: (0, 1). Direction: West.\n\"G\": move one step. Position: (-1, 1). Direction: West.\n\"L\": turn 90 degrees anti-clockwise. Position: (-1, 1). Direction: South.\n\"G\": move one step. Position: (-1, 0). Direction: South.\n\"L\": turn 90 degrees anti-clockwise. Position: (-1, 0). Direction: East.\n\"G\": move one step. Position: (0, 0). Direction: East.\n\"L\": turn 90 degrees anti-clockwise. Position: (0, 0). Direction: North.\nRepeating the instructions, the robot goes into the cycle: (0, 0) --> (0, 1) --> (-1, 1) --> (-1, 0) --> (0, 0).\nBased on that, we return true.", "input": "Input: instructions = \"GL\"", "output": "Output: true", "explanation": "Explanation: The robot is initially at (0, 0) facing the north direction.\n\"G\": move one step. Position: (0, 1). Direction: North.\n\"L\": turn 90 degrees anti-clockwise. Position: (0, 1). Direction: West.\n\"G\": move one step. Position: (-1, 1). Direction: West.\n\"L\": turn 90 degrees anti-clockwise. Position: (-1, 1). Direction: South.\n\"G\": move one step. Position: (-1, 0). Direction: South.\n\"L\": turn 90 degrees anti-clockwise. Position: (-1, 0). Direction: East.\n\"G\": move one step. Position: (0, 0). Direction: East.\n\"L\": turn 90 degrees anti-clockwise. Position: (0, 0). Direction: North.\nRepeating the instructions, the robot goes into the cycle: (0, 0) --> (0, 1) --> (-1, 1) --> (-1, 0) --> (0, 0).\nBased on that, we return true."}], "constraints": "Constraints:\n1 <= instructions.length <= 100\ninstructions[i] is 'G', 'L' or, 'R'.", "notes": ""}, "1040": {"label": "Medium", "title": "Moving Stones Until Consecutive II", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5535, "total_accepted": 7500.0, "total_submissions": 13500.0, "testcase_example": "'[7,4,9]'", "body": "There are some stones in different positions on the X-axis. You are given an integer array stones, the positions of the stones.\nCall a stone an endpoint stone if it has the smallest or largest position. In one move, you pick up an endpoint stone and move it to an unoccupied position so that it is no longer an endpoint stone.\nIn particular, if the stones are at say, stones = [1,2,5], you cannot move the endpoint stone at position 5, since moving it to any position (such as 0, or 3) will still keep that stone as an endpoint stone.\nThe game ends when you cannot make any more moves (i.e., the stones are in three consecutive positions).\nReturn an integer array answer of length 2 where:\nanswer[0] is the minimum number of moves you can play, and\nanswer[1] is the maximum number of moves you can play.", "examples": [{"full_text": "Example 1:\nInput: stones = [7,4,9]\nOutput: [1,2]\nExplanation: We can move 4 -> 8 for one move to finish the game.\nOr, we can move 9 -> 5, 4 -> 6 for two moves to finish the game.", "input": "Input: stones = [7,4,9]", "output": "Output: [1,2]", "explanation": "Explanation: We can move 4 -> 8 for one move to finish the game.\nOr, we can move 9 -> 5, 4 -> 6 for two moves to finish the game."}, {"full_text": "Example 2:\nInput: stones = [6,5,4,3,10]\nOutput: [2,3]\nExplanation: We can move 3 -> 8 then 10 -> 7 to finish the game.\nOr, we can move 3 -> 7, 4 -> 8, 5 -> 9 to finish the game.\nNotice we cannot move 10 -> 2 to finish the game, because that would be an illegal move.", "input": "Input: stones = [6,5,4,3,10]", "output": "Output: [2,3]", "explanation": "Explanation: We can move 3 -> 8 then 10 -> 7 to finish the game.\nOr, we can move 3 -> 7, 4 -> 8, 5 -> 9 to finish the game.\nNotice we cannot move 10 -> 2 to finish the game, because that would be an illegal move."}], "constraints": "Constraints:\n3 <= stones.length <= 10^4\n1 <= stones[i] <= 10^9\nAll the values of stones are unique.", "notes": ""}, "1039": {"label": "Medium", "title": "Minimum Score Triangulation of Polygon", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5222, "total_accepted": 20900.0, "total_submissions": 39900.0, "testcase_example": "'[1,2,3]'", "body": "You have a convex n-sided polygon where each vertex has an integer value. You are given an integer array values where values[i] is the value of the i^th vertex (i.e., clockwise order).\nYou will triangulate the polygon into n - 2 triangles. For each triangle, the value of that triangle is the product of the values of its vertices, and the total score of the triangulation is the sum of these values over all n - 2 triangles in the triangulation.\nReturn the smallest possible total score that you can achieve with some triangulation of the polygon.", "examples": [{"full_text": "Example 1:\nInput: values = [1,2,3]\nOutput: 6\nExplanation: The polygon is already triangulated, and the score of the only triangle is 6.", "input": "Input: values = [1,2,3]", "output": "Output: 6", "explanation": "Explanation: The polygon is already triangulated, and the score of the only triangle is 6."}, {"full_text": "Example 2:\nInput: values = [3,7,4,5]\nOutput: 144\nExplanation: There are two triangulations, with possible scores: 3*7*5 + 4*5*7 = 245, or 3*4*5 + 3*4*7 = 144.\nThe minimum score is 144.", "input": "Input: values = [3,7,4,5]", "output": "Output: 144", "explanation": "Explanation: There are two triangulations, with possible scores: 3*7*5 + 4*5*7 = 245, or 3*4*5 + 3*4*7 = 144.\nThe minimum score is 144."}, {"full_text": "Example 3:\nInput: values = [1,3,1,4,1,5]\nOutput: 13\nExplanation: The minimum score triangulation has score 1*1*3 + 1*1*4 + 1*1*5 + 1*1*1 = 13.", "input": "Input: values = [1,3,1,4,1,5]", "output": "Output: 13", "explanation": "Explanation: The minimum score triangulation has score 1*1*3 + 1*1*4 + 1*1*5 + 1*1*1 = 13."}], "constraints": "Constraints:\nn == values.length\n3 <= n <= 50\n1 <= values[i] <= 100", "notes": ""}, "1038": {"label": "Medium", "title": "Binary Search Tree to Greater Sum Tree", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.8436, "total_accepted": 111100.0, "total_submissions": 131700.0, "testcase_example": "'[4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]'", "body": "Given the root of a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus the sum of all keys greater than the original key in BST.\nAs a reminder, a binary search tree is a tree that satisfies these constraints:\nThe left subtree of a node contains only nodes with keys less than the node's key.\nThe right subtree of a node contains only nodes with keys greater than the node's key.\nBoth the left and right subtrees must also be binary search trees.", "examples": [{"full_text": "Example 1:\nInput: root = [4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]\nOutput: [30,36,21,36,35,26,15,null,null,null,33,null,null,null,8]", "input": "Input: root = [4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]", "output": "Output: [30,36,21,36,35,26,15,null,null,null,33,null,null,null,8]", "explanation": ""}, {"full_text": "Example 2:\nInput: root = [0,null,1]\nOutput: [1,null,1]", "input": "Input: root = [0,null,1]", "output": "Output: [1,null,1]", "explanation": ""}], "constraints": "Constraints:\nThe number of nodes in the tree is in the range [1, 100].\n0 <= Node.val <= 100\nAll the values in the tree are unique.", "notes": "Note: This question is the same as 538: https://leetcode.com/problems/convert-bst-to-greater-tree/"}, "1035": {"label": "Medium", "title": "Uncrossed Lines", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5765, "total_accepted": 64700.0, "total_submissions": 112300.0, "testcase_example": "'[1,4,2]\\n[1,2,4]'", "body": "You are given two integer arrays nums1 and nums2. We write the integers of nums1 and nums2 (in the order they are given) on two separate horizontal lines.\nWe may draw connecting lines: a straight line connecting two numbers nums1[i] and nums2[j] such that:\nnums1[i] == nums2[j], and\nthe line we draw does not intersect any other connecting (non-horizontal) line.\nNote that a connecting line cannot intersect even at the endpoints (i.e., each number can only belong to one connecting line).\nReturn the maximum number of connecting lines we can draw in this way.", "examples": [{"full_text": "Example 1:\nInput: nums1 = [1,4,2], nums2 = [1,2,4]\nOutput: 2\nExplanation: We can draw 2 uncrossed lines as in the diagram.\nWe cannot draw 3 uncrossed lines, because the line from nums1[1] = 4 to nums2[2] = 4 will intersect the line from nums1[2]=2 to nums2[1]=2.", "input": "Input: nums1 = [1,4,2], nums2 = [1,2,4]", "output": "Output: 2", "explanation": "Explanation: We can draw 2 uncrossed lines as in the diagram.\nWe cannot draw 3 uncrossed lines, because the line from nums1[1] = 4 to nums2[2] = 4 will intersect the line from nums1[2]=2 to nums2[1]=2."}, {"full_text": "Example 2:\nInput: nums1 = [2,5,1,2,5], nums2 = [10,5,2,1,5,2]\nOutput: 3", "input": "Input: nums1 = [2,5,1,2,5], nums2 = [10,5,2,1,5,2]", "output": "Output: 3", "explanation": ""}, {"full_text": "Example 3:\nInput: nums1 = [1,3,7,1,7,5], nums2 = [1,9,2,5,1]\nOutput: 2", "input": "Input: nums1 = [1,3,7,1,7,5], nums2 = [1,9,2,5,1]", "output": "Output: 2", "explanation": ""}], "constraints": "Constraints:\n1 <= nums1.length, nums2.length <= 500\n1 <= nums1[i], nums2[j] <= 2000", "notes": ""}, "1034": {"label": "Medium", "title": "Coloring A Border", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4813, "total_accepted": 20700.0, "total_submissions": 43000.0, "testcase_example": "'[[1,1],[1,2]]\\n0\\n0\\n3'", "body": "You are given an m x n integer matrix grid, and three integers row, col, and color. Each value in the grid represents the color of the grid square at that location.\nTwo squares belong to the same connected component if they have the same color and are next to each other in any of the 4 directions.\nThe border of a connected component is all the squares in the connected component that are either 4-directionally adjacent to a square not in the component, or on the boundary of the grid (the first or last row or column).\nYou should color the border of the connected component that contains the square grid[row][col] with color.\nReturn the final grid.", "examples": [{"full_text": "Example 1:\nInput: grid = [[1,1],[1,2]], row = 0, col = 0, color = 3\nOutput: [[3,3],[3,2]]", "input": "Input: grid = [[1,1],[1,2]], row = 0, col = 0, color = 3", "output": "Output: [[3,3],[3,2]]", "explanation": ""}, {"full_text": "Example 2:\nInput: grid = [[1,2,2],[2,3,2]], row = 0, col = 1, color = 3\nOutput: [[1,3,3],[2,3,3]]", "input": "Input: grid = [[1,2,2],[2,3,2]], row = 0, col = 1, color = 3", "output": "Output: [[1,3,3],[2,3,3]]", "explanation": ""}, {"full_text": "Example 3:\nInput: grid = [[1,1,1],[1,1,1],[1,1,1]], row = 1, col = 1, color = 2\nOutput: [[2,2,2],[2,1,2],[2,2,2]]", "input": "Input: grid = [[1,1,1],[1,1,1],[1,1,1]], row = 1, col = 1, color = 2", "output": "Output: [[2,2,2],[2,1,2],[2,2,2]]", "explanation": ""}], "constraints": "Constraints:\nm == grid.length\nn == grid[i].length\n1 <= m, n <= 50\n1 <= grid[i][j], color <= 1000\n0 <= row < m\n0 <= col < n", "notes": ""}, "1033": {"label": "Medium", "title": "Moving Stones Until Consecutive", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4472, "total_accepted": 19100.0, "total_submissions": 42700.0, "testcase_example": "'1\\n2\\n5'", "body": "There are three stones in different positions on the X-axis. You are given three integers a, b, and c, the positions of the stones.\nIn one move, you pick up a stone at an endpoint (i.e., either the lowest or highest position stone), and move it to an unoccupied position between those endpoints. Formally, let's say the stones are currently at positions x, y, and z with x < y < z. You pick up the stone at either position x or position z, and move that stone to an integer position k, with x < k < z and k != y.\nThe game ends when you cannot make any more moves (i.e., the stones are in three consecutive positions).\nReturn an integer array answer of length 2 where:\nanswer[0] is the minimum number of moves you can play, and\nanswer[1] is the maximum number of moves you can play.", "examples": [{"full_text": "Example 1:\nInput: a = 1, b = 2, c = 5\nOutput: [1,2]\nExplanation: Move the stone from 5 to 3, or move the stone from 5 to 4 to 3.", "input": "Input: a = 1, b = 2, c = 5", "output": "Output: [1,2]", "explanation": "Explanation: Move the stone from 5 to 3, or move the stone from 5 to 4 to 3."}, {"full_text": "Example 2:\nInput: a = 4, b = 3, c = 2\nOutput: [0,0]\nExplanation: We cannot make any moves.", "input": "Input: a = 4, b = 3, c = 2", "output": "Output: [0,0]", "explanation": "Explanation: We cannot make any moves."}, {"full_text": "Example 3:\nInput: a = 3, b = 5, c = 1\nOutput: [1,2]\nExplanation: Move the stone from 1 to 4; or move the stone from 1 to 2 to 4.", "input": "Input: a = 3, b = 5, c = 1", "output": "Output: [1,2]", "explanation": "Explanation: Move the stone from 1 to 4; or move the stone from 1 to 2 to 4."}], "constraints": "Constraints:\n1 <= a, b, c <= 100\na, b, and c have different values.", "notes": ""}, "1031": {"label": "Medium", "title": "Maximum Sum of Two Non-Overlapping Subarrays", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5932, "total_accepted": 47100.0, "total_submissions": 79400.0, "testcase_example": "'[0,6,5,2,2,5,1,9,4]\\n1\\n2'", "body": "Given an integer array nums and two integers firstLen and secondLen, return the maximum sum of elements in two non-overlapping subarrays with lengths firstLen and secondLen.\nThe array with length firstLen could occur before or after the array with length secondLen, but they have to be non-overlapping.\nA subarray is a contiguous part of an array.", "examples": [{"full_text": "Example 1:\nInput: nums = [0,6,5,2,2,5,1,9,4], firstLen = 1, secondLen = 2\nOutput: 20\nExplanation: One choice of subarrays is [9] with length 1, and [6,5] with length 2.", "input": "Input: nums = [0,6,5,2,2,5,1,9,4], firstLen = 1, secondLen = 2", "output": "Output: 20", "explanation": "Explanation: One choice of subarrays is [9] with length 1, and [6,5] with length 2."}, {"full_text": "Example 2:\nInput: nums = [3,8,1,3,2,1,8,9,0], firstLen = 3, secondLen = 2\nOutput: 29\nExplanation: One choice of subarrays is [3,8,1] with length 3, and [8,9] with length 2.", "input": "Input: nums = [3,8,1,3,2,1,8,9,0], firstLen = 3, secondLen = 2", "output": "Output: 29", "explanation": "Explanation: One choice of subarrays is [3,8,1] with length 3, and [8,9] with length 2."}, {"full_text": "Example 3:\nInput: nums = [2,1,5,6,0,9,5,0,3,8], firstLen = 4, secondLen = 3\nOutput: 31\nExplanation: One choice of subarrays is [5,6,0,9] with length 4, and [3,8] with length 3.", "input": "Input: nums = [2,1,5,6,0,9,5,0,3,8], firstLen = 4, secondLen = 3", "output": "Output: 31", "explanation": "Explanation: One choice of subarrays is [5,6,0,9] with length 4, and [3,8] with length 3."}], "constraints": "Constraints:\n1 <= firstLen, secondLen <= 1000\n2 <= firstLen + secondLen <= 1000\nfirstLen + secondLen <= nums.length <= 1000\n0 <= nums[i] <= 1000", "notes": ""}, "1029": {"label": "Medium", "title": "Two City Scheduling", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5986, "total_accepted": 132600.0, "total_submissions": 221500.0, "testcase_example": "'[[10,20],[30,200],[400,50],[30,20]]'", "body": "A company is planning to interview 2n people. Given the array costs where costs[i] = [aCosti, bCosti],\nthe cost of flying the i^th person to city a is aCosti, and the cost of flying the i^th person to city b is bCosti.\nReturn the minimum cost to fly every person to a city such that exactly n people arrive in each city.", "examples": [{"full_text": "Example 1:\nInput: costs = [[10,20],[30,200],[400,50],[30,20]]\nOutput: 110\nExplanation:\nThe first person goes to city A for a cost of 10.\nThe second person goes to city A for a cost of 30.\nThe third person goes to city B for a cost of 50.\nThe fourth person goes to city B for a cost of 20.\nThe total minimum cost is 10 + 30 + 50 + 20 = 110 to have half the people interviewing in each city.", "input": "Input: costs = [[10,20],[30,200],[400,50],[30,20]]", "output": "Output: 110", "explanation": "Explanation:\nThe first person goes to city A for a cost of 10.\nThe second person goes to city A for a cost of 30.\nThe third person goes to city B for a cost of 50.\nThe fourth person goes to city B for a cost of 20.\nThe total minimum cost is 10 + 30 + 50 + 20 = 110 to have half the people interviewing in each city."}, {"full_text": "Example 2:\nInput: costs = [[259,770],[448,54],[926,667],[184,139],[840,118],[577,469]]\nOutput: 1859", "input": "Input: costs = [[259,770],[448,54],[926,667],[184,139],[840,118],[577,469]]", "output": "Output: 1859", "explanation": ""}, {"full_text": "Example 3:\nInput: costs = [[515,563],[451,713],[537,709],[343,819],[855,779],[457,60],[650,359],[631,42]]\nOutput: 3086", "input": "Input: costs = [[515,563],[451,713],[537,709],[343,819],[855,779],[457,60],[650,359],[631,42]]", "output": "Output: 3086", "explanation": ""}], "constraints": "Constraints:\n2 * n == costs.length\n2 <= costs.length <= 100\ncosts.length is even.\n1 <= aCosti, bCosti <= 1000", "notes": ""}, "1027": {"label": "Medium", "title": "Longest Arithmetic Subsequence", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4842, "total_accepted": 81800.0, "total_submissions": 168900.0, "testcase_example": "'[3,6,9,12]'", "body": "Given an array nums of integers, return the length of the longest arithmetic subsequence in nums.\nRecall that a subsequence of an array nums is a list nums[i1], nums[i2], ..., nums[ik] with 0 <= i1 < i2 < ... < ik <= nums.length - 1, and that a sequence seq is arithmetic if seq[i+1] - seq[i] are all the same value (for 0 <= i < seq.length - 1).", "examples": [{"full_text": "Example 1:\nInput: nums = [3,6,9,12]\nOutput: 4\nExplanation:\nThe whole array is an arithmetic sequence with steps of length = 3.", "input": "Input: nums = [3,6,9,12]", "output": "Output: 4", "explanation": "Explanation:\nThe whole array is an arithmetic sequence with steps of length = 3."}, {"full_text": "Example 2:\nInput: nums = [9,4,7,2,10]\nOutput: 3\nExplanation:\nThe longest arithmetic subsequence is [4,7,10].", "input": "Input: nums = [9,4,7,2,10]", "output": "Output: 3", "explanation": "Explanation:\nThe longest arithmetic subsequence is [4,7,10]."}, {"full_text": "Example 3:\nInput: nums = [20,1,15,3,10,5,8]\nOutput: 4\nExplanation:\nThe longest arithmetic subsequence is [20,15,10,5].", "input": "Input: nums = [20,1,15,3,10,5,8]", "output": "Output: 4", "explanation": "Explanation:\nThe longest arithmetic subsequence is [20,15,10,5]."}], "constraints": "Constraints:\n2 <= nums.length <= 1000\n0 <= nums[i] <= 500", "notes": ""}, "1026": {"label": "Medium", "title": "Maximum Difference Between Node and Ancestor", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7303000000000001, "total_accepted": 124700.0, "total_submissions": 170800.0, "testcase_example": "'[8,3,10,1,6,null,14,null,null,4,7,13]'", "body": "Given the root of a binary tree, find the maximum value v for which there exist different nodes a and b where v = |a.val - b.val| and a is an ancestor of b.\nA node a is an ancestor of b if either: any child of a is equal to b\nor any child of a is an ancestor of b.", "examples": [{"full_text": "Example 1:\nInput: root = [8,3,10,1,6,null,14,null,null,4,7,13]\nOutput: 7\nExplanation: We have various ancestor-node differences, some of which are given below :\n|8 - 3| = 5\n|3 - 7| = 4\n|8 - 1| = 7\n|10 - 13| = 3\nAmong all possible differences, the maximum value of 7 is obtained by |8 - 1| = 7.", "input": "Input: root = [8,3,10,1,6,null,14,null,null,4,7,13]", "output": "Output: 7", "explanation": "Explanation: We have various ancestor-node differences, some of which are given below :\n|8 - 3| = 5\n|3 - 7| = 4\n|8 - 1| = 7\n|10 - 13| = 3\nAmong all possible differences, the maximum value of 7 is obtained by |8 - 1| = 7."}, {"full_text": "Example 2:\nInput: root = [1,null,2,null,0,3]\nOutput: 3", "input": "Input: root = [1,null,2,null,0,3]", "output": "Output: 3", "explanation": ""}], "constraints": "Constraints:\nThe number of nodes in the tree is in the range [2, 5000].\n0 <= Node.val <= 10^5", "notes": ""}, "1024": {"label": "Medium", "title": "Video Stitching", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.49950000000000006, "total_accepted": 44500.0, "total_submissions": 89100.0, "testcase_example": "'[[0,2],[4,6],[8,10],[1,9],[1,5],[5,9]]\\n10'", "body": "You are given a series of video clips from a sporting event that lasted time seconds. These video clips can be overlapping with each other and have varying lengths.\nEach video clip is described by an array clips where clips[i] = [starti, endi] indicates that the ith clip started at starti and ended at endi.\nWe can cut these clips into segments freely.\nFor example, a clip [0, 7] can be cut into segments [0, 1] + [1, 3] + [3, 7].\nReturn the minimum number of clips needed so that we can cut the clips into segments that cover the entire sporting event [0, time]. If the task is impossible, return -1.", "examples": [{"full_text": "Example 1:\nInput: clips = [[0,2],[4,6],[8,10],[1,9],[1,5],[5,9]], time = 10\nOutput: 3\nExplanation: We take the clips [0,2], [8,10], [1,9]; a total of 3 clips.\nThen, we can reconstruct the sporting event as follows:\nWe cut [1,9] into segments [1,2] + [2,8] + [8,9].\nNow we have segments [0,2] + [2,8] + [8,10] which cover the sporting event [0, 10].", "input": "Input: clips = [[0,2],[4,6],[8,10],[1,9],[1,5],[5,9]], time = 10", "output": "Output: 3", "explanation": "Explanation: We take the clips [0,2], [8,10], [1,9]; a total of 3 clips.\nThen, we can reconstruct the sporting event as follows:\nWe cut [1,9] into segments [1,2] + [2,8] + [8,9].\nNow we have segments [0,2] + [2,8] + [8,10] which cover the sporting event [0, 10]."}, {"full_text": "Example 2:\nInput: clips = [[0,1],[1,2]], time = 5\nOutput: -1\nExplanation: We cannot cover [0,5] with only [0,1] and [1,2].", "input": "Input: clips = [[0,1],[1,2]], time = 5", "output": "Output: -1", "explanation": "Explanation: We cannot cover [0,5] with only [0,1] and [1,2]."}, {"full_text": "Example 3:\nInput: clips = [[0,1],[6,8],[0,2],[5,6],[0,4],[0,3],[6,7],[1,3],[4,7],[1,4],[2,5],[2,6],[3,4],[4,5],[5,7],[6,9]], time = 9\nOutput: 3\nExplanation: We can take clips [0,4], [4,7], and [6,9].", "input": "Input: clips = [[0,1],[6,8],[0,2],[5,6],[0,4],[0,3],[6,7],[1,3],[4,7],[1,4],[2,5],[2,6],[3,4],[4,5],[5,7],[6,9]], time = 9", "output": "Output: 3", "explanation": "Explanation: We can take clips [0,4], [4,7], and [6,9]."}], "constraints": "Constraints:\n1 <= clips.length <= 100\n0 <= starti <= endi <= 100\n1 <= time <= 100", "notes": ""}, "1023": {"label": "Medium", "title": "Camelcase Matching", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5887, "total_accepted": 29800.0, "total_submissions": 50500.0, "testcase_example": "'[\"FooBar\",\"FooBarTest\",\"FootBall\",\"FrameBuffer\",\"ForceFeedBack\"]\\n\"FB\"'", "body": "Given an array of strings queries and a string pattern, return a boolean array answer where answer[i] is true if queries[i] matches pattern, and false otherwise.\nA query word queries[i] matches pattern if you can insert lowercase English letters pattern so that it equals the query. You may insert each character at any position and you may not insert any characters.", "examples": [{"full_text": "Example 1:\nInput: queries = [\"FooBar\",\"FooBarTest\",\"FootBall\",\"FrameBuffer\",\"ForceFeedBack\"], pattern = \"FB\"\nOutput: [true,false,true,true,false]\nExplanation: \"FooBar\" can be generated like this \"F\" + \"oo\" + \"B\" + \"ar\".\n\"FootBall\" can be generated like this \"F\" + \"oot\" + \"B\" + \"all\".\n\"FrameBuffer\" can be generated like this \"F\" + \"rame\" + \"B\" + \"uffer\".", "input": "Input: queries = [\"FooBar\",\"FooBarTest\",\"FootBall\",\"FrameBuffer\",\"ForceFeedBack\"], pattern = \"FB\"", "output": "Output: [true,false,true,true,false]", "explanation": "Explanation: \"FooBar\" can be generated like this \"F\" + \"oo\" + \"B\" + \"ar\".\n\"FootBall\" can be generated like this \"F\" + \"oot\" + \"B\" + \"all\".\n\"FrameBuffer\" can be generated like this \"F\" + \"rame\" + \"B\" + \"uffer\"."}, {"full_text": "Example 2:\nInput: queries = [\"FooBar\",\"FooBarTest\",\"FootBall\",\"FrameBuffer\",\"ForceFeedBack\"], pattern = \"FoBa\"\nOutput: [true,false,true,false,false]\nExplanation: \"FooBar\" can be generated like this \"Fo\" + \"o\" + \"Ba\" + \"r\".\n\"FootBall\" can be generated like this \"Fo\" + \"ot\" + \"Ba\" + \"ll\".", "input": "Input: queries = [\"FooBar\",\"FooBarTest\",\"FootBall\",\"FrameBuffer\",\"ForceFeedBack\"], pattern = \"FoBa\"", "output": "Output: [true,false,true,false,false]", "explanation": "Explanation: \"FooBar\" can be generated like this \"Fo\" + \"o\" + \"Ba\" + \"r\".\n\"FootBall\" can be generated like this \"Fo\" + \"ot\" + \"Ba\" + \"ll\"."}, {"full_text": "Example 3:\nInput: queries = [\"FooBar\",\"FooBarTest\",\"FootBall\",\"FrameBuffer\",\"ForceFeedBack\"], pattern = \"FoBaT\"\nOutput: [false,true,false,false,false]\nExplanation: \"FooBarTest\" can be generated like this \"Fo\" + \"o\" + \"Ba\" + \"r\" + \"T\" + \"est\".", "input": "Input: queries = [\"FooBar\",\"FooBarTest\",\"FootBall\",\"FrameBuffer\",\"ForceFeedBack\"], pattern = \"FoBaT\"", "output": "Output: [false,true,false,false,false]", "explanation": "Explanation: \"FooBarTest\" can be generated like this \"Fo\" + \"o\" + \"Ba\" + \"r\" + \"T\" + \"est\"."}], "constraints": "Constraints:\n1 <= pattern.length, queries.length <= 100\n1 <= queries[i].length <= 100\nqueries[i] and pattern consist of English letters.", "notes": ""}, "1020": {"label": "Medium", "title": "Number of Enclaves", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6139, "total_accepted": 41100.0, "total_submissions": 66900.0, "testcase_example": "'[[0,0,0,0],[1,0,1,0],[0,1,1,0],[0,0,0,0]]'", "body": "You are given an m x n binary matrix grid, where 0 represents a sea cell and 1 represents a land cell.\nA move consists of walking from one land cell to another adjacent (4-directionally) land cell or walking off the boundary of the grid.\nReturn the number of land cells in grid for which we cannot walk off the boundary of the grid in any number of moves.", "examples": [{"full_text": "Example 1:\nInput: grid = [[0,0,0,0],[1,0,1,0],[0,1,1,0],[0,0,0,0]]\nOutput: 3\nExplanation: There are three 1s that are enclosed by 0s, and one 1 that is not enclosed because its on the boundary.", "input": "Input: grid = [[0,0,0,0],[1,0,1,0],[0,1,1,0],[0,0,0,0]]", "output": "Output: 3", "explanation": "Explanation: There are three 1s that are enclosed by 0s, and one 1 that is not enclosed because its on the boundary."}, {"full_text": "Example 2:\nInput: grid = [[0,1,1,0],[0,0,1,0],[0,0,1,0],[0,0,0,0]]\nOutput: 0\nExplanation: All 1s are either on the boundary or can reach the boundary.", "input": "Input: grid = [[0,1,1,0],[0,0,1,0],[0,0,1,0],[0,0,0,0]]", "output": "Output: 0", "explanation": "Explanation: All 1s are either on the boundary or can reach the boundary."}], "constraints": "Constraints:\nm == grid.length\nn == grid[i].length\n1 <= m, n <= 500\ngrid[i][j] is either 0 or 1.", "notes": ""}, "1019": {"label": "Medium", "title": "Next Greater Node In Linked List", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5947, "total_accepted": 95600.0, "total_submissions": 160800.0, "testcase_example": "'[2,1,5]'", "body": "You are given the head of a linked list with n nodes.\nFor each node in the list, find the value of the next greater node. That is, for each node, find the value of the first node that is next to it and has a strictly larger value than it.\nReturn an integer array answer where answer[i] is the value of the next greater node of the i^th node (1-indexed). If the i^th node does not have a next greater node, set answer[i] = 0.", "examples": [{"full_text": "Example 1:\nInput: head = [2,1,5]\nOutput: [5,5,0]", "input": "Input: head = [2,1,5]", "output": "Output: [5,5,0]", "explanation": ""}, {"full_text": "Example 2:\nInput: head = [2,7,4,3,5]\nOutput: [7,0,5,5,0]", "input": "Input: head = [2,7,4,3,5]", "output": "Output: [7,0,5,5,0]", "explanation": ""}], "constraints": "Constraints:\nThe number of nodes in the list is n.\n1 <= n <= 10^4\n1 <= Node.val <= 10^9", "notes": ""}, "1017": {"label": "Medium", "title": "Convert to Base -2", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5995, "total_accepted": 17500.0, "total_submissions": 29100.0, "testcase_example": "'2'", "body": "Given an integer n, return a binary string representing its representation in base -2.\nNote that the returned string should not have leading zeros unless the string is \"0\".", "examples": [{"full_text": "Example 1:\nInput: n = 2\nOutput: \"110\"\nExplantion: (-2)^2 + (-2)^1 = 2", "input": "Input: n = 2", "output": "Output: \"110\"\nExplantion: (-2)^2 + (-2)^1 = 2", "explanation": ""}, {"full_text": "Example 2:\nInput: n = 3\nOutput: \"111\"\nExplantion: (-2)^2 + (-2)^1 + (-2)^0 = 3", "input": "Input: n = 3", "output": "Output: \"111\"\nExplantion: (-2)^2 + (-2)^1 + (-2)^0 = 3", "explanation": ""}, {"full_text": "Example 3:\nInput: n = 4\nOutput: \"100\"\nExplantion: (-2)^2 = 4", "input": "Input: n = 4", "output": "Output: \"100\"\nExplantion: (-2)^2 = 4", "explanation": ""}], "constraints": "Constraints:\n0 <= n <= 10^9", "notes": ""}, "1016": {"label": "Medium", "title": "Binary String With Substrings Representing 1 To N", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5805, "total_accepted": 27400.0, "total_submissions": 47200.0, "testcase_example": "'\"0110\"\\n3'", "body": "Given a binary string s and a positive integer n, return true if the binary representation of all the integers in the range [1, n] are substrings of s, or false otherwise.\nA substring is a contiguous sequence of characters within a string.", "examples": [{"full_text": "Example 1:\nInput: s = \"0110\", n = 3\nOutput: true", "input": "Input: s = \"0110\", n = 3", "output": "Output: true", "explanation": ""}, {"full_text": "Example 2:\nInput: s = \"0110\", n = 4\nOutput: false", "input": "Input: s = \"0110\", n = 4", "output": "Output: false", "explanation": ""}], "constraints": "Constraints:\n1 <= s.length <= 1000\ns[i] is either '0' or '1'.\n1 <= n <= 10^9", "notes": ""}, "1015": {"label": "Medium", "title": "Smallest Integer Divisible by K", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4694, "total_accepted": 53900.0, "total_submissions": 114700.0, "testcase_example": "'1'", "body": "Given a positive integer k, you need to find the length of the smallest positive integer n such that n is divisible by k, and n only contains the digit 1.\nReturn the length of n. If there is no such n, return -1.\nNote: n may not fit in a 64-bit signed integer.", "examples": [{"full_text": "Example 1:\nInput: k = 1\nOutput: 1\nExplanation: The smallest answer is n = 1, which has length 1.", "input": "Input: k = 1", "output": "Output: 1", "explanation": "Explanation: The smallest answer is n = 1, which has length 1."}, {"full_text": "Example 2:\nInput: k = 2\nOutput: -1\nExplanation: There is no such positive integer n divisible by 2.", "input": "Input: k = 2", "output": "Output: -1", "explanation": "Explanation: There is no such positive integer n divisible by 2."}, {"full_text": "Example 3:\nInput: k = 3\nOutput: 3\nExplanation: The smallest answer is n = 111, which has length 3.", "input": "Input: k = 3", "output": "Output: 3", "explanation": "Explanation: The smallest answer is n = 111, which has length 3."}], "constraints": "Constraints:\n1 <= k <= 10^5", "notes": ""}, "1014": {"label": "Medium", "title": "Best Sightseeing Pair", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5793, "total_accepted": 48000.0, "total_submissions": 82900.0, "testcase_example": "'[8,1,5,2,6]'", "body": "You are given an integer array values where values[i] represents the value of the i^th sightseeing spot. Two sightseeing spots i and j have a distance j - i between them.\nThe score of a pair (i < j) of sightseeing spots is values[i] + values[j] + i - j: the sum of the values of the sightseeing spots, minus the distance between them.\nReturn the maximum score of a pair of sightseeing spots.", "examples": [{"full_text": "Example 1:\nInput: values = [8,1,5,2,6]\nOutput: 11\nExplanation: i = 0, j = 2, values[i] + values[j] + i - j = 8 + 5 + 0 - 2 = 11", "input": "Input: values = [8,1,5,2,6]", "output": "Output: 11", "explanation": "Explanation: i = 0, j = 2, values[i] + values[j] + i - j = 8 + 5 + 0 - 2 = 11"}, {"full_text": "Example 2:\nInput: values = [1,2]\nOutput: 2", "input": "Input: values = [1,2]", "output": "Output: 2", "explanation": ""}], "constraints": "Constraints:\n2 <= values.length <= 5 * 10^4\n1 <= values[i] <= 1000", "notes": ""}, "1011": {"label": "Medium", "title": "Capacity To Ship Packages Within D Days", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6301, "total_accepted": 127100.0, "total_submissions": 201700.0, "testcase_example": "'[1,2,3,4,5,6,7,8,9,10]\\n5'", "body": "A conveyor belt has packages that must be shipped from one port to another within days days.\nThe i^th package on the conveyor belt has a weight of weights[i]. Each day, we load the ship with packages on the conveyor belt (in the order given by weights). We may not load more weight than the maximum weight capacity of the ship.\nReturn the least weight capacity of the ship that will result in all the packages on the conveyor belt being shipped within days days.", "examples": [{"full_text": "Example 1:\nInput: weights = [1,2,3,4,5,6,7,8,9,10], days = 5\nOutput: 15\nExplanation: A ship capacity of 15 is the minimum to ship all the packages in 5 days like this:\n1st day: 1, 2, 3, 4, 5\n2nd day: 6, 7\n3rd day: 8\n4th day: 9\n5th day: 10\nNote that the cargo must be shipped in the order given, so using a ship of capacity 14 and splitting the packages into parts like (2, 3, 4, 5), (1, 6, 7), (8), (9), (10) is not allowed.", "input": "Input: weights = [1,2,3,4,5,6,7,8,9,10], days = 5", "output": "Output: 15", "explanation": "Explanation: A ship capacity of 15 is the minimum to ship all the packages in 5 days like this:\n1st day: 1, 2, 3, 4, 5\n2nd day: 6, 7\n3rd day: 8\n4th day: 9\n5th day: 10\nNote that the cargo must be shipped in the order given, so using a ship of capacity 14 and splitting the packages into parts like (2, 3, 4, 5), (1, 6, 7), (8), (9), (10) is not allowed."}, {"full_text": "Example 2:\nInput: weights = [3,2,2,4,1,4], days = 3\nOutput: 6\nExplanation: A ship capacity of 6 is the minimum to ship all the packages in 3 days like this:\n1st day: 3, 2\n2nd day: 2, 4\n3rd day: 1, 4", "input": "Input: weights = [3,2,2,4,1,4], days = 3", "output": "Output: 6", "explanation": "Explanation: A ship capacity of 6 is the minimum to ship all the packages in 3 days like this:\n1st day: 3, 2\n2nd day: 2, 4\n3rd day: 1, 4"}, {"full_text": "Example 3:\nInput: weights = [1,2,3,1,1], days = 4\nOutput: 3\nExplanation:\n1st day: 1\n2nd day: 2\n3rd day: 3\n4th day: 1, 1", "input": "Input: weights = [1,2,3,1,1], days = 4", "output": "Output: 3", "explanation": "Explanation:\n1st day: 1\n2nd day: 2\n3rd day: 3\n4th day: 1, 1"}], "constraints": "Constraints:\n1 <= days <= weights.length <= 5 * 10^4\n1 <= weights[i] <= 500", "notes": ""}, "1010": {"label": "Medium", "title": "Pairs of Songs With Total Durations Divisible by 60", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5381, "total_accepted": 180000.0, "total_submissions": 334600.0, "testcase_example": "'[30,20,150,100,40]'", "body": "You are given a list of songs where the i^th song has a duration of time[i] seconds.\nReturn the number of pairs of songs for which their total duration in seconds is divisible by 60. Formally, we want the number of indices i, j such that i < j with (time[i] + time[j]) % 60 == 0.", "examples": [{"full_text": "Example 1:\nInput: time = [30,20,150,100,40]\nOutput: 3\nExplanation: Three pairs have a total duration divisible by 60:\n(time[0] = 30, time[2] = 150): total duration 180\n(time[1] = 20, time[3] = 100): total duration 120\n(time[1] = 20, time[4] = 40): total duration 60", "input": "Input: time = [30,20,150,100,40]", "output": "Output: 3", "explanation": "Explanation: Three pairs have a total duration divisible by 60:\n(time[0] = 30, time[2] = 150): total duration 180\n(time[1] = 20, time[3] = 100): total duration 120\n(time[1] = 20, time[4] = 40): total duration 60"}, {"full_text": "Example 2:\nInput: time = [60,60,60]\nOutput: 3\nExplanation: All three pairs have a total duration of 120, which is divisible by 60.", "input": "Input: time = [60,60,60]", "output": "Output: 3", "explanation": "Explanation: All three pairs have a total duration of 120, which is divisible by 60."}], "constraints": "Constraints:\n1 <= time.length <= 6 * 10^4\n1 <= time[i] <= 500", "notes": ""}, "1008": {"label": "Medium", "title": "Construct Binary Search Tree from Preorder Traversal", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.8, "total_accepted": 220400.0, "total_submissions": 275500.0, "testcase_example": "'[8,5,1,7,10,12]'", "body": "Given an array of integers preorder, which represents the preorder traversal of a BST (i.e., binary search tree), construct the tree and return its root.\nIt is guaranteed that there is always possible to find a binary search tree with the given requirements for the given test cases.\nA binary search tree is a binary tree where for every node, any descendant of Node.left has a value strictly less than Node.val, and any descendant of Node.right has a value strictly greater than Node.val.\nA preorder traversal of a binary tree displays the value of the node first, then traverses Node.left, then traverses Node.right.", "examples": [{"full_text": "Example 1:\nInput: preorder = [8,5,1,7,10,12]\nOutput: [8,5,10,1,7,null,12]", "input": "Input: preorder = [8,5,1,7,10,12]", "output": "Output: [8,5,10,1,7,null,12]", "explanation": ""}, {"full_text": "Example 2:\nInput: preorder = [1,3]\nOutput: [1,null,3]", "input": "Input: preorder = [1,3]", "output": "Output: [1,null,3]", "explanation": ""}], "constraints": "Constraints:\n1 <= preorder.length <= 100\n1 <= preorder[i] <= 1000\nAll the values of preorder are unique.", "notes": ""}, "1007": {"label": "Medium", "title": "Minimum Domino Rotations For Equal Row", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5078, "total_accepted": 139000.0, "total_submissions": 273700.0, "testcase_example": "'[2,1,2,4,2,2]\\n[5,2,6,2,3,2]'", "body": "In a row of dominoes, tops[i] and bottoms[i] represent the top and bottom halves of the i^th domino. (A domino is a tile with two numbers from 1 to 6 - one on each half of the tile.)\nWe may rotate the i^th domino, so that tops[i] and bottoms[i] swap values.\nReturn the minimum number of rotations so that all the values in tops are the same, or all the values in bottoms are the same.\nIf it cannot be done, return -1.", "examples": [{"full_text": "Example 1:\nInput: tops = [2,1,2,4,2,2], bottoms = [5,2,6,2,3,2]\nOutput: 2\nExplanation:\nThe first figure represents the dominoes as given by tops and bottoms: before we do any rotations.\nIf we rotate the second and fourth dominoes, we can make every value in the top row equal to 2, as indicated by the second figure.", "input": "Input: tops = [2,1,2,4,2,2], bottoms = [5,2,6,2,3,2]", "output": "Output: 2", "explanation": "Explanation:\nThe first figure represents the dominoes as given by tops and bottoms: before we do any rotations.\nIf we rotate the second and fourth dominoes, we can make every value in the top row equal to 2, as indicated by the second figure."}, {"full_text": "Example 2:\nInput: tops = [3,5,1,2,3], bottoms = [3,6,3,3,4]\nOutput: -1\nExplanation:\nIn this case, it is not possible to rotate the dominoes to make one row of values equal.", "input": "Input: tops = [3,5,1,2,3], bottoms = [3,6,3,3,4]", "output": "Output: -1", "explanation": "Explanation:\nIn this case, it is not possible to rotate the dominoes to make one row of values equal."}], "constraints": "Constraints:\n2 <= tops.length <= 2 * 10^4\nbottoms.length == tops.length\n1 <= tops[i], bottoms[i] <= 6", "notes": ""}, "1006": {"label": "Medium", "title": "Clumsy Factorial", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5444, "total_accepted": 19200.0, "total_submissions": 35300.0, "testcase_example": "'4'", "body": "The factorial of a positive integer n is the product of all positive integers less than or equal to n.\nFor example, factorial(10) = 10 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1.\nWe make a clumsy factorial using the integers in decreasing order by swapping out the multiply operations for a fixed rotation of operations with multiply '*', divide '/', add '+', and subtract '-' in this order.\nFor example, clumsy(10) = 10 * 9 / 8 + 7 - 6 * 5 / 4 + 3 - 2 * 1.\nHowever, these operations are still applied using the usual order of operations of arithmetic. We do all multiplication and division steps before any addition or subtraction steps, and multiplication and division steps are processed left to right.\nAdditionally, the division that we use is floor division such that 10 * 9 / 8 = 90 / 8 = 11.\nGiven an integer n, return the clumsy factorial of n.", "examples": [{"full_text": "Example 1:\nInput: n = 4\nOutput: 7\nExplanation: 7 = 4 * 3 / 2 + 1", "input": "Input: n = 4", "output": "Output: 7", "explanation": "Explanation: 7 = 4 * 3 / 2 + 1"}, {"full_text": "Example 2:\nInput: n = 10\nOutput: 12\nExplanation: 12 = 10 * 9 / 8 + 7 - 6 * 5 / 4 + 3 - 2 * 1", "input": "Input: n = 10", "output": "Output: 12", "explanation": "Explanation: 12 = 10 * 9 / 8 + 7 - 6 * 5 / 4 + 3 - 2 * 1"}], "constraints": "Constraints:\n1 <= n <= 10^4", "notes": ""}, "1004": {"label": "Medium", "title": "Max Consecutive Ones III", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6248, "total_accepted": 185600.0, "total_submissions": 297100.0, "testcase_example": "'[1,1,1,0,0,0,1,1,1,1,0]\\n2'", "body": "Given a binary array nums and an integer k, return the maximum number of consecutive 1's in the array if you can flip at most k 0's.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,1,1,0,0,0,1,1,1,1,0], k = 2\nOutput: 6\nExplanation: [1,1,1,0,0,1,1,1,1,1,1]\nBolded numbers were flipped from 0 to 1. The longest subarray is underlined.", "input": "Input: nums = [1,1,1,0,0,0,1,1,1,1,0], k = 2", "output": "Output: 6", "explanation": "Explanation: [1,1,1,0,0,1,1,1,1,1,1]\nBolded numbers were flipped from 0 to 1. The longest subarray is underlined."}, {"full_text": "Example 2:\nInput: nums = [0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1], k = 3\nOutput: 10\nExplanation: [0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1]\nBolded numbers were flipped from 0 to 1. The longest subarray is underlined.", "input": "Input: nums = [0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1], k = 3", "output": "Output: 10", "explanation": "Explanation: [0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1]\nBolded numbers were flipped from 0 to 1. The longest subarray is underlined."}], "constraints": "Constraints:\n1 <= nums.length <= 10^5\nnums[i] is either 0 or 1.\n0 <= k <= nums.length", "notes": ""}, "1003": {"label": "Medium", "title": "Check If Word Is Valid After Substitutions", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5766, "total_accepted": 38900.0, "total_submissions": 67500.0, "testcase_example": "'\"aabcbc\"'", "body": "Given a string s, determine if it is valid.\nA string s is valid if, starting with an empty string t = \"\", you can transform t into s after performing the following operation any number of times:\nInsert string \"abc\" into any position in t. More formally, t becomes tleft + \"abc\" + tright, where t == tleft + tright. Note that tleft and tright may be empty.\nReturn true if s is a valid string, otherwise, return false.", "examples": [{"full_text": "Example 1:\nInput: s = \"aabcbc\"\nOutput: true\nExplanation:\n\"\" -> \"abc\" -> \"aabcbc\"\nThus, \"aabcbc\" is valid.", "input": "Input: s = \"aabcbc\"", "output": "Output: true", "explanation": "Explanation:\n\"\" -> \"abc\" -> \"aabcbc\"\nThus, \"aabcbc\" is valid."}, {"full_text": "Example 2:\nInput: s = \"abcabcababcc\"\nOutput: true\nExplanation:\n\"\" -> \"abc\" -> \"abcabc\" -> \"abcabcabc\" -> \"abcabcababcc\"\nThus, \"abcabcababcc\" is valid.", "input": "Input: s = \"abcabcababcc\"", "output": "Output: true", "explanation": "Explanation:\n\"\" -> \"abc\" -> \"abcabc\" -> \"abcabcabc\" -> \"abcabcababcc\"\nThus, \"abcabcababcc\" is valid."}, {"full_text": "Example 3:\nInput: s = \"abccba\"\nOutput: false\nExplanation: It is impossible to get \"abccba\" using the operation.", "input": "Input: s = \"abccba\"", "output": "Output: false", "explanation": "Explanation: It is impossible to get \"abccba\" using the operation."}], "constraints": "Constraints:\n1 <= s.length <= 2 * 10^4\ns consists of letters 'a', 'b', and 'c'", "notes": ""}, "998": {"label": "Medium", "title": "Maximum Binary Tree II", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6531, "total_accepted": 25500.0, "total_submissions": 39100.0, "testcase_example": "'[4,1,3,null,null,2]\\n5'", "body": "A maximum tree is a tree where every node has a value greater than any other value in its subtree.\nYou are given the root of a maximum binary tree and an integer val.\nJust as in the previous problem, the given tree was constructed from a list a (root = Construct(a)) recursively with the following Construct(a) routine:\nIf a is empty, return null.\nOtherwise, let a[i] be the largest element of a. Create a root node with the value a[i].\nThe left child of root will be Construct([a[0], a[1], ..., a[i - 1]]).\nThe right child of root will be Construct([a[i + 1], a[i + 2], ..., a[a.length - 1]]).\nReturn root.\nNote that we were not given a directly, only a root node root = Construct(a).\nSuppose b is a copy of a with the value val appended to it. It is guaranteed that b has unique values.\nReturn Construct(b).", "examples": [{"full_text": "Example 1:\nInput: root = [4,1,3,null,null,2], val = 5\nOutput: [5,4,null,1,3,null,null,2]\nExplanation: a = [1,4,2,3], b = [1,4,2,3,5]", "input": "Input: root = [4,1,3,null,null,2], val = 5", "output": "Output: [5,4,null,1,3,null,null,2]", "explanation": "Explanation: a = [1,4,2,3], b = [1,4,2,3,5]"}, {"full_text": "Example 2:\nInput: root = [5,2,4,null,1], val = 3\nOutput: [5,2,4,null,1,null,3]\nExplanation: a = [2,1,5,4], b = [2,1,5,4,3]", "input": "Input: root = [5,2,4,null,1], val = 3", "output": "Output: [5,2,4,null,1,null,3]", "explanation": "Explanation: a = [2,1,5,4], b = [2,1,5,4,3]"}, {"full_text": "Example 3:\nInput: root = [5,2,3,null,1], val = 4\nOutput: [5,2,4,null,1,3]\nExplanation: a = [2,1,5,3], b = [2,1,5,3,4]", "input": "Input: root = [5,2,3,null,1], val = 4", "output": "Output: [5,2,4,null,1,3]", "explanation": "Explanation: a = [2,1,5,3], b = [2,1,5,3,4]"}], "constraints": "Constraints:\nThe number of nodes in the tree is in the range [1, 100].\n1 <= Node.val <= 100\nAll the values of the tree are unique.\n1 <= val <= 100", "notes": ""}, "994": {"label": "Medium", "title": "Rotting Oranges", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5153, "total_accepted": 342300.0, "total_submissions": 664300.0, "testcase_example": "'[[2,1,1],[1,1,0],[0,1,1]]'", "body": "You are given an m x n grid where each cell can have one of three values:\n0 representing an empty cell,\n1 representing a fresh orange, or\n2 representing a rotten orange.\nEvery minute, any fresh orange that is 4-directionally adjacent to a rotten orange becomes rotten.\nReturn the minimum number of minutes that must elapse until no cell has a fresh orange. If this is impossible, return -1.", "examples": [{"full_text": "Example 1:\nInput: grid = [[2,1,1],[1,1,0],[0,1,1]]\nOutput: 4", "input": "Input: grid = [[2,1,1],[1,1,0],[0,1,1]]", "output": "Output: 4", "explanation": ""}, {"full_text": "Example 2:\nInput: grid = [[2,1,1],[0,1,1],[1,0,1]]\nOutput: -1\nExplanation: The orange in the bottom left corner (row 2, column 0) is never rotten, because rotting only happens 4-directionally.", "input": "Input: grid = [[2,1,1],[0,1,1],[1,0,1]]", "output": "Output: -1", "explanation": "Explanation: The orange in the bottom left corner (row 2, column 0) is never rotten, because rotting only happens 4-directionally."}, {"full_text": "Example 3:\nInput: grid = [[0,2]]\nOutput: 0\nExplanation: Since there are already no fresh oranges at minute 0, the answer is just 0.", "input": "Input: grid = [[0,2]]", "output": "Output: 0", "explanation": "Explanation: Since there are already no fresh oranges at minute 0, the answer is just 0."}], "constraints": "Constraints:\nm == grid.length\nn == grid[i].length\n1 <= m, n <= 10\ngrid[i][j] is 0, 1, or 2.", "notes": ""}, "991": {"label": "Medium", "title": "Broken Calculator", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5006, "total_accepted": 47200.0, "total_submissions": 94300.0, "testcase_example": "'2\\n3'", "body": "There is a broken calculator that has the integer startValue on its display initially. In one operation, you can:\nmultiply the number on display by 2, or\nsubtract 1 from the number on display.\nGiven two integers startValue and target, return the minimum number of operations needed to display target on the calculator.", "examples": [{"full_text": "Example 1:\nInput: startValue = 2, target = 3\nOutput: 2\nExplanation: Use double operation and then decrement operation {2 -> 4 -> 3}.", "input": "Input: startValue = 2, target = 3", "output": "Output: 2", "explanation": "Explanation: Use double operation and then decrement operation {2 -> 4 -> 3}."}, {"full_text": "Example 2:\nInput: startValue = 5, target = 8\nOutput: 2\nExplanation: Use decrement and then double {5 -> 4 -> 8}.", "input": "Input: startValue = 5, target = 8", "output": "Output: 2", "explanation": "Explanation: Use decrement and then double {5 -> 4 -> 8}."}, {"full_text": "Example 3:\nInput: startValue = 3, target = 10\nOutput: 3\nExplanation: Use double, decrement and double {3 -> 6 -> 5 -> 10}.", "input": "Input: startValue = 3, target = 10", "output": "Output: 3", "explanation": "Explanation: Use double, decrement and double {3 -> 6 -> 5 -> 10}."}], "constraints": "Constraints:\n1 <= x, y <= 10^9", "notes": ""}, "990": {"label": "Medium", "title": "Satisfiability of Equality Equations", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4959, "total_accepted": 44800.0, "total_submissions": 90300.0, "testcase_example": "'[\"a==b\",\"b!=a\"]'", "body": "You are given an array of strings equations that represent relationships between variables where each string equations[i] is of length 4 and takes one of two different forms: \"xi==yi\" or \"xi!=yi\".Here, xi and yi are lowercase letters (not necessarily different) that represent one-letter variable names.\nReturn true if it is possible to assign integers to variable names so as to satisfy all the given equations, or false otherwise.", "examples": [{"full_text": "Example 1:\nInput: equations = [\"a==b\",\"b!=a\"]\nOutput: false\nExplanation: If we assign say, a = 1 and b = 1, then the first equation is satisfied, but not the second.\nThere is no way to assign the variables to satisfy both equations.", "input": "Input: equations = [\"a==b\",\"b!=a\"]", "output": "Output: false", "explanation": "Explanation: If we assign say, a = 1 and b = 1, then the first equation is satisfied, but not the second.\nThere is no way to assign the variables to satisfy both equations."}, {"full_text": "Example 2:\nInput: equations = [\"b==a\",\"a==b\"]\nOutput: true\nExplanation: We could assign a = 1 and b = 1 to satisfy both equations.", "input": "Input: equations = [\"b==a\",\"a==b\"]", "output": "Output: true", "explanation": "Explanation: We could assign a = 1 and b = 1 to satisfy both equations."}], "constraints": "Constraints:\n1 <= equations.length <= 500\nequations[i].length == 4\nequations[i][0] is a lowercase letter.\nequations[i][1] is either '=' or '!'.\nequations[i][2] is '='.\nequations[i][3] is a lowercase letter.", "notes": ""}, "988": {"label": "Medium", "title": "Smallest String Starting From Leaf", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4849, "total_accepted": 49800.0, "total_submissions": 102700.0, "testcase_example": "'[0,1,2,3,4,3,4]'", "body": "You are given the root of a binary tree where each node has a value in the range [0, 25] representing the letters 'a' to 'z'.\nReturn the lexicographically smallest string that starts at a leaf of this tree and ends at the root.\nAs a reminder, any shorter prefix of a string is lexicographically smaller.\nFor example, \"ab\" is lexicographically smaller than \"aba\".\nA leaf of a node is a node that has no children.", "examples": [{"full_text": "Example 1:\nInput: root = [0,1,2,3,4,3,4]\nOutput: \"dba\"", "input": "Input: root = [0,1,2,3,4,3,4]", "output": "Output: \"dba\"", "explanation": ""}, {"full_text": "Example 2:\nInput: root = [25,1,3,1,3,0,2]\nOutput: \"adz\"", "input": "Input: root = [25,1,3,1,3,0,2]", "output": "Output: \"adz\"", "explanation": ""}, {"full_text": "Example 3:\nInput: root = [2,2,1,null,1,0,null,0]\nOutput: \"abc\"", "input": "Input: root = [2,2,1,null,1,0,null,0]", "output": "Output: \"abc\"", "explanation": ""}], "constraints": "Constraints:\nThe number of nodes in the tree is in the range [1, 8500].\n0 <= Node.val <= 25", "notes": ""}, "986": {"label": "Medium", "title": "Interval List Intersections", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7082999999999999, "total_accepted": 276100.0, "total_submissions": 389700.0, "testcase_example": "'[[0,2],[5,10],[13,23],[24,25]]\\n[[1,5],[8,12],[15,24],[25,26]]'", "body": "You are given two lists of closed intervals, firstList and secondList, where firstList[i] = [starti, endi] and secondList[j] = [startj, endj]. Each list of intervals is pairwise disjoint and in sorted order.\nReturn the intersection of these two interval lists.\nA closed interval [a, b] (with a <= b) denotes the set of real numbers x with a <= x <= b.\nThe intersection of two closed intervals is a set of real numbers that are either empty or represented as a closed interval. For example, the intersection of [1, 3] and [2, 4] is [2, 3].", "examples": [{"full_text": "Example 1:\nInput: firstList = [[0,2],[5,10],[13,23],[24,25]], secondList = [[1,5],[8,12],[15,24],[25,26]]\nOutput: [[1,2],[5,5],[8,10],[15,23],[24,24],[25,25]]", "input": "Input: firstList = [[0,2],[5,10],[13,23],[24,25]], secondList = [[1,5],[8,12],[15,24],[25,26]]", "output": "Output: [[1,2],[5,5],[8,10],[15,23],[24,24],[25,25]]", "explanation": ""}, {"full_text": "Example 2:\nInput: firstList = [[1,3],[5,9]], secondList = []\nOutput: []", "input": "Input: firstList = [[1,3],[5,9]], secondList = []", "output": "Output: []", "explanation": ""}], "constraints": "Constraints:\n0 <= firstList.length, secondList.length <= 1000\nfirstList.length + secondList.length >= 1\n0 <= starti < endi <= 10^9\nendi < starti+1\n0 <= startj < endj <= 10^9\nendj < startj+1", "notes": ""}, "985": {"label": "Medium", "title": "Sum of Even Numbers After Queries", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6084, "total_accepted": 61500.0, "total_submissions": 101100.0, "testcase_example": "'[1,2,3,4]\\n[[1,0],[-3,1],[-4,0],[2,3]]'", "body": "You are given an integer array nums and an array queries where queries[i] = [vali, indexi].\nFor each query i, first, apply nums[indexi] = nums[indexi] + vali, then print the sum of the even values of nums.\nReturn an integer array answer where answer[i] is the answer to the i^th query.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,2,3,4], queries = [[1,0],[-3,1],[-4,0],[2,3]]\nOutput: [8,6,2,4]\nExplanation: At the beginning, the array is [1,2,3,4].\nAfter adding 1 to nums[0], the array is [2,2,3,4], and the sum of even values is 2 + 2 + 4 = 8.\nAfter adding -3 to nums[1], the array is [2,-1,3,4], and the sum of even values is 2 + 4 = 6.\nAfter adding -4 to nums[0], the array is [-2,-1,3,4], and the sum of even values is -2 + 4 = 2.\nAfter adding 2 to nums[3], the array is [-2,-1,3,6], and the sum of even values is -2 + 6 = 4.", "input": "Input: nums = [1,2,3,4], queries = [[1,0],[-3,1],[-4,0],[2,3]]", "output": "Output: [8,6,2,4]", "explanation": "Explanation: At the beginning, the array is [1,2,3,4].\nAfter adding 1 to nums[0], the array is [2,2,3,4], and the sum of even values is 2 + 2 + 4 = 8.\nAfter adding -3 to nums[1], the array is [2,-1,3,4], and the sum of even values is 2 + 4 = 6.\nAfter adding -4 to nums[0], the array is [-2,-1,3,4], and the sum of even values is -2 + 4 = 2.\nAfter adding 2 to nums[3], the array is [-2,-1,3,6], and the sum of even values is -2 + 6 = 4."}, {"full_text": "Example 2:\nInput: nums = [1], queries = [[4,0]]\nOutput: [0]", "input": "Input: nums = [1], queries = [[4,0]]", "output": "Output: [0]", "explanation": ""}], "constraints": "Constraints:\n1 <= nums.length <= 10^4\n-10^4 <= nums[i] <= 10^4\n1 <= queries.length <= 10^4\n-10^4 <= vali <= 10^4\n0 <= indexi < nums.length", "notes": ""}, "984": {"label": "Medium", "title": "String Without AAA or BBB", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4144, "total_accepted": 30700.0, "total_submissions": 74100.0, "testcase_example": "'1\\n2'", "body": "Given two integers a and b, return any string s such that:\ns has length a + b and contains exactly a 'a' letters, and exactly b 'b' letters,\nThe substring 'aaa' does not occur in s, and\nThe substring 'bbb' does not occur in s.", "examples": [{"full_text": "Example 1:\nInput: a = 1, b = 2\nOutput: \"abb\"\nExplanation: \"abb\", \"bab\" and \"bba\" are all correct answers.", "input": "Input: a = 1, b = 2", "output": "Output: \"abb\"", "explanation": "Explanation: \"abb\", \"bab\" and \"bba\" are all correct answers."}, {"full_text": "Example 2:\nInput: a = 4, b = 1\nOutput: \"aabaa\"", "input": "Input: a = 4, b = 1", "output": "Output: \"aabaa\"", "explanation": ""}], "constraints": "Constraints:\n0 <= a, b <= 100\nIt is guaranteed such an s exists for the given a and b.", "notes": ""}, "983": {"label": "Medium", "title": "Minimum Cost For Tickets", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6379, "total_accepted": 142900.0, "total_submissions": 224100.0, "testcase_example": "'[1,4,6,7,8,20]\\n[2,7,15]'", "body": "You have planned some train traveling one year in advance. The days of the year in which you will travel are given as an integer array days. Each day is an integer from 1 to 365.\nTrain tickets are sold in three different ways:\na 1-day pass is sold for costs[0] dollars,\na 7-day pass is sold for costs[1] dollars, and\na 30-day pass is sold for costs[2] dollars.\nThe passes allow that many days of consecutive travel.\nFor example, if we get a 7-day pass on day 2, then we can travel for 7 days: 2, 3, 4, 5, 6, 7, and 8.\nReturn the minimum number of dollars you need to travel every day in the given list of days.", "examples": [{"full_text": "Example 1:\nInput: days = [1,4,6,7,8,20], costs = [2,7,15]\nOutput: 11\nExplanation: For example, here is one way to buy passes that lets you travel your travel plan:\nOn day 1, you bought a 1-day pass for costs[0] = $2, which covered day 1.\nOn day 3, you bought a 7-day pass for costs[1] = $7, which covered days 3, 4, ..., 9.\nOn day 20, you bought a 1-day pass for costs[0] = $2, which covered day 20.\nIn total, you spent $11 and covered all the days of your travel.", "input": "Input: days = [1,4,6,7,8,20], costs = [2,7,15]", "output": "Output: 11", "explanation": "Explanation: For example, here is one way to buy passes that lets you travel your travel plan:\nOn day 1, you bought a 1-day pass for costs[0] = $2, which covered day 1.\nOn day 3, you bought a 7-day pass for costs[1] = $7, which covered days 3, 4, ..., 9.\nOn day 20, you bought a 1-day pass for costs[0] = $2, which covered day 20.\nIn total, you spent $11 and covered all the days of your travel."}, {"full_text": "Example 2:\nInput: days = [1,2,3,4,5,6,7,8,9,10,30,31], costs = [2,7,15]\nOutput: 17\nExplanation: For example, here is one way to buy passes that lets you travel your travel plan:\nOn day 1, you bought a 30-day pass for costs[2] = $15 which covered days 1, 2, ..., 30.\nOn day 31, you bought a 1-day pass for costs[0] = $2 which covered day 31.\nIn total, you spent $17 and covered all the days of your travel.", "input": "Input: days = [1,2,3,4,5,6,7,8,9,10,30,31], costs = [2,7,15]", "output": "Output: 17", "explanation": "Explanation: For example, here is one way to buy passes that lets you travel your travel plan:\nOn day 1, you bought a 30-day pass for costs[2] = $15 which covered days 1, 2, ..., 30.\nOn day 31, you bought a 1-day pass for costs[0] = $2 which covered day 31.\nIn total, you spent $17 and covered all the days of your travel."}], "constraints": "Constraints:\n1 <= days.length <= 365\n1 <= days[i] <= 365\ndays is in strictly increasing order.\ncosts.length == 3\n1 <= costs[i] <= 1000", "notes": ""}, "981": {"label": "Medium", "title": "Time Based Key-Value Store", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5281, "total_accepted": 166500.0, "total_submissions": 315200.0, "testcase_example": "'[\"TimeMap\",\"set\",\"get\",\"get\",\"set\",\"get\",\"get\"]\\n' +\n  '[[],[\"foo\",\"bar\",1],[\"foo\",1],[\"foo\",3],[\"foo\",\"bar2\",4],[\"foo\",4],[\"foo\",5]]'", "body": "Design a time-based key-value data structure that can store multiple values for the same key at different time stamps and retrieve the key's value at a certain timestamp.\nImplement the TimeMap class:\nTimeMap() Initializes the object of the data structure.\nvoid set(String key, String value, int timestamp) Stores the key key with the value value at the given time timestamp.\nString get(String key, int timestamp) Returns a value such that set was called previously, with timestamp_prev <= timestamp. If there are multiple such values, it returns the value associated with the largest timestamp_prev. If there are no values, it returns \"\".", "examples": [{"full_text": "Example 1:\nInput\n[\"TimeMap\", \"set\", \"get\", \"get\", \"set\", \"get\", \"get\"]\n[[], [\"foo\", \"bar\", 1], [\"foo\", 1], [\"foo\", 3], [\"foo\", \"bar2\", 4], [\"foo\", 4], [\"foo\", 5]]\nOutput\n[null, null, \"bar\", \"bar\", null, \"bar2\", \"bar2\"]\nExplanation\nTimeMap timeMap = new TimeMap();\ntimeMap.set(\"foo\", \"bar\", 1); // store the key \"foo\" and value \"bar\" along with timestamp = 1.\ntimeMap.get(\"foo\", 1); // return \"bar\"\ntimeMap.get(\"foo\", 3); // return \"bar\", since there is no value corresponding to foo at timestamp 3 and timestamp 2, then the only value is at timestamp 1 is \"bar\".\ntimeMap.set(\"foo\", \"bar2\", 4); // store the key \"foo\" and value \"bar2\" along with timestamp = 4.\ntimeMap.get(\"foo\", 4); // return \"bar2\"\ntimeMap.get(\"foo\", 5); // return \"bar2\"", "input": "Input\n[\"TimeMap\", \"set\", \"get\", \"get\", \"set\", \"get\", \"get\"]\n[[], [\"foo\", \"bar\", 1], [\"foo\", 1], [\"foo\", 3], [\"foo\", \"bar2\", 4], [\"foo\", 4], [\"foo\", 5]]", "output": "Output\n[null, null, \"bar\", \"bar\", null, \"bar2\", \"bar2\"]", "explanation": "Explanation\nTimeMap timeMap = new TimeMap();\ntimeMap.set(\"foo\", \"bar\", 1); // store the key \"foo\" and value \"bar\" along with timestamp = 1.\ntimeMap.get(\"foo\", 1); // return \"bar\"\ntimeMap.get(\"foo\", 3); // return \"bar\", since there is no value corresponding to foo at timestamp 3 and timestamp 2, then the only value is at timestamp 1 is \"bar\".\ntimeMap.set(\"foo\", \"bar2\", 4); // store the key \"foo\" and value \"bar2\" along with timestamp = 4.\ntimeMap.get(\"foo\", 4); // return \"bar2\"\ntimeMap.get(\"foo\", 5); // return \"bar2\""}], "constraints": "Constraints:\n1 <= key.length, value.length <= 100\nkey and value consist of lowercase English letters and digits.\n1 <= timestamp <= 10^7\nAll the timestamps timestamp of set are strictly increasing.\nAt most 2 * 10^5 calls will be made to set and get.", "notes": ""}, "979": {"label": "Medium", "title": "Distribute Coins in Binary Tree", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7121, "total_accepted": 78000.0, "total_submissions": 109600.0, "testcase_example": "'[3,0,0]'", "body": "You are given the root of a binary tree with n nodes where each node in the tree has node.val coins. There are n coins in total throughout the whole tree.\nIn one move, we may choose two adjacent nodes and move one coin from one node to another. A move may be from parent to child, or from child to parent.\nReturn the minimum number of moves required to make every node have exactly one coin.", "examples": [{"full_text": "Example 1:\nInput: root = [3,0,0]\nOutput: 2\nExplanation: From the root of the tree, we move one coin to its left child, and one coin to its right child.", "input": "Input: root = [3,0,0]", "output": "Output: 2", "explanation": "Explanation: From the root of the tree, we move one coin to its left child, and one coin to its right child."}, {"full_text": "Example 2:\nInput: root = [0,3,0]\nOutput: 3\nExplanation: From the left child of the root, we move two coins to the root [taking two moves]. Then, we move one coin from the root of the tree to the right child.", "input": "Input: root = [0,3,0]", "output": "Output: 3", "explanation": "Explanation: From the left child of the root, we move two coins to the root [taking two moves]. Then, we move one coin from the root of the tree to the right child."}], "constraints": "Constraints:\nThe number of nodes in the tree is n.\n1 <= n <= 100\n0 <= Node.val <= n\nThe sum of all Node.val is n.", "notes": ""}, "978": {"label": "Medium", "title": "Longest Turbulent Subarray", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4753, "total_accepted": 69500.0, "total_submissions": 146300.0, "testcase_example": "'[9,4,2,10,7,8,8,1,9]'", "body": "Given an integer array arr, return the length of a maximum size turbulent subarray of arr.\nA subarray is turbulent if the comparison sign flips between each adjacent pair of elements in the subarray.\nMore formally, a subarray [arr[i], arr[i + 1], ..., arr[j]] of arr is said to be turbulent if and only if:\nFor i <= k < j:\n\narr[k] > arr[k + 1] when k is odd, and\narr[k] < arr[k + 1] when k is even.\n\n\nOr, for i <= k < j:\n\narr[k] > arr[k + 1] when k is even, and\narr[k] < arr[k + 1] when k is odd.\n\n", "examples": [{"full_text": "Example 1:\nInput: arr = [9,4,2,10,7,8,8,1,9]\nOutput: 5\nExplanation: arr[1] > arr[2] < arr[3] > arr[4] < arr[5]", "input": "Input: arr = [9,4,2,10,7,8,8,1,9]", "output": "Output: 5", "explanation": "Explanation: arr[1] > arr[2] < arr[3] > arr[4] < arr[5]"}, {"full_text": "Example 2:\nInput: arr = [4,8,12,16]\nOutput: 2", "input": "Input: arr = [4,8,12,16]", "output": "Output: 2", "explanation": ""}, {"full_text": "Example 3:\nInput: arr = [100]\nOutput: 1", "input": "Input: arr = [100]", "output": "Output: 1", "explanation": ""}], "constraints": "Constraints:\n1 <= arr.length <= 4 * 10^4\n0 <= arr[i] <= 10^9", "notes": ""}, "974": {"label": "Medium", "title": "Subarray Sums Divisible by K", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5294, "total_accepted": 87000.0, "total_submissions": 164400.0, "testcase_example": "'[4,5,0,-2,-3,1]\\n5'", "body": "Given an integer array nums and an integer k, return the number of non-empty subarrays that have a sum divisible by k.\nA subarray is a contiguous part of an array.", "examples": [{"full_text": "Example 1:\nInput: nums = [4,5,0,-2,-3,1], k = 5\nOutput: 7\nExplanation: There are 7 subarrays with a sum divisible by k = 5:\n[4, 5, 0, -2, -3, 1], [5], [5, 0], [5, 0, -2, -3], [0], [0, -2, -3], [-2, -3]", "input": "Input: nums = [4,5,0,-2,-3,1], k = 5", "output": "Output: 7", "explanation": "Explanation: There are 7 subarrays with a sum divisible by k = 5:\n[4, 5, 0, -2, -3, 1], [5], [5, 0], [5, 0, -2, -3], [0], [0, -2, -3], [-2, -3]"}, {"full_text": "Example 2:\nInput: nums = [5], k = 9\nOutput: 0", "input": "Input: nums = [5], k = 9", "output": "Output: 0", "explanation": ""}], "constraints": "Constraints:\n1 <= nums.length <= 3 * 10^4\n-10^4 <= nums[i] <= 10^4\n2 <= k <= 10^4", "notes": ""}, "973": {"label": "Medium", "title": "K Closest Points to Origin", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6605, "total_accepted": 688600.0, "total_submissions": 1000000.0, "testcase_example": "'[[1,3],[-2,2]]\\n1'", "body": "Given an array of points where points[i] = [xi, yi] represents a point on the X-Y plane and an integer k, return the k closest points to the origin (0, 0).\nThe distance between two points on the X-Y plane is the Euclidean distance (i.e., \u221a(x1 - x2)^2 + (y1 - y2)^2).\nYou may return the answer in any order. The answer is guaranteed to be unique (except for the order that it is in).", "examples": [{"full_text": "Example 1:\nInput: points = [[1,3],[-2,2]], k = 1\nOutput: [[-2,2]]\nExplanation:\nThe distance between (1, 3) and the origin is sqrt(10).\nThe distance between (-2, 2) and the origin is sqrt(8).\nSince sqrt(8) < sqrt(10), (-2, 2) is closer to the origin.\nWe only want the closest k = 1 points from the origin, so the answer is just [[-2,2]].", "input": "Input: points = [[1,3],[-2,2]], k = 1", "output": "Output: [[-2,2]]", "explanation": "Explanation:\nThe distance between (1, 3) and the origin is sqrt(10).\nThe distance between (-2, 2) and the origin is sqrt(8).\nSince sqrt(8) < sqrt(10), (-2, 2) is closer to the origin.\nWe only want the closest k = 1 points from the origin, so the answer is just [[-2,2]]."}, {"full_text": "Example 2:\nInput: points = [[3,3],[5,-1],[-2,4]], k = 2\nOutput: [[3,3],[-2,4]]\nExplanation: The answer [[-2,4],[3,3]] would also be accepted.", "input": "Input: points = [[3,3],[5,-1],[-2,4]], k = 2", "output": "Output: [[3,3],[-2,4]]", "explanation": "Explanation: The answer [[-2,4],[3,3]] would also be accepted."}], "constraints": "Constraints:\n1 <= k <= points.length <= 10^4\n-10^4 < xi, yi < 10^4", "notes": ""}, "971": {"label": "Medium", "title": "Flip Binary Tree To Match Preorder Traversal", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4988, "total_accepted": 34100.0, "total_submissions": 68400.0, "testcase_example": "'[1,2]\\n[2,1]'", "body": "You are given the root of a binary tree with n nodes, where each node is uniquely assigned a value from 1 to n. You are also given a sequence of n values voyage, which is the desired pre-order traversal of the binary tree.\nAny node in the binary tree can be flipped by swapping its left and right subtrees. For example, flipping node 1 will have the following effect:\nFlip the smallest number of nodes so that the pre-order traversal of the tree matches voyage.\nReturn a list of the values of all flipped nodes. You may return the answer in any order. If it is impossible to flip the nodes in the tree to make the pre-order traversal match voyage, return the list [-1].", "examples": [{"full_text": "Example 1:\nInput: root = [1,2], voyage = [2,1]\nOutput: [-1]\nExplanation: It is impossible to flip the nodes such that the pre-order traversal matches voyage.", "input": "Input: root = [1,2], voyage = [2,1]", "output": "Output: [-1]", "explanation": "Explanation: It is impossible to flip the nodes such that the pre-order traversal matches voyage."}, {"full_text": "Example 2:\nInput: root = [1,2,3], voyage = [1,3,2]\nOutput: [1]\nExplanation: Flipping node 1 swaps nodes 2 and 3, so the pre-order traversal matches voyage.", "input": "Input: root = [1,2,3], voyage = [1,3,2]", "output": "Output: [1]", "explanation": "Explanation: Flipping node 1 swaps nodes 2 and 3, so the pre-order traversal matches voyage."}, {"full_text": "Example 3:\nInput: root = [1,2,3], voyage = [1,2,3]\nOutput: []\nExplanation: The tree's pre-order traversal already matches voyage, so no nodes need to be flipped.", "input": "Input: root = [1,2,3], voyage = [1,2,3]", "output": "Output: []", "explanation": "Explanation: The tree's pre-order traversal already matches voyage, so no nodes need to be flipped."}], "constraints": "Constraints:\nThe number of nodes in the tree is n.\nn == voyage.length\n1 <= n <= 100\n1 <= Node.val, voyage[i] <= n\nAll the values in the tree are unique.\nAll the values in voyage are unique.", "notes": ""}, "970": {"label": "Medium", "title": "Powerful Integers", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.43479999999999996, "total_accepted": 45400.0, "total_submissions": 104300.0, "testcase_example": "'2\\n3\\n10'", "body": "Given three integers x, y, and bound, return a list of all the powerful integers that have a value less than or equal to bound.\nAn integer is powerful if it can be represented as x^i + y^j for some integers i >= 0 and j >= 0.\nYou may return the answer in any order. In your answer, each value should occur at most once.", "examples": [{"full_text": "Example 1:\nInput: x = 2, y = 3, bound = 10\nOutput: [2,3,4,5,7,9,10]\nExplanation:\n2 = 2^0 + 3^0\n3 = 2^1 + 3^0\n4 = 2^0 + 3^1\n5 = 2^1 + 3^1\n7 = 2^2 + 3^1\n9 = 2^3 + 3^0\n10 = 2^0 + 3^2", "input": "Input: x = 2, y = 3, bound = 10", "output": "Output: [2,3,4,5,7,9,10]", "explanation": "Explanation:\n2 = 2^0 + 3^0\n3 = 2^1 + 3^0\n4 = 2^0 + 3^1\n5 = 2^1 + 3^1\n7 = 2^2 + 3^1\n9 = 2^3 + 3^0\n10 = 2^0 + 3^2"}, {"full_text": "Example 2:\nInput: x = 3, y = 5, bound = 15\nOutput: [2,4,6,8,10,14]", "input": "Input: x = 3, y = 5, bound = 15", "output": "Output: [2,4,6,8,10,14]", "explanation": ""}], "constraints": "Constraints:\n1 <= x, y <= 100\n0 <= bound <= 10^6", "notes": ""}, "969": {"label": "Medium", "title": "Pancake Sorting", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6959000000000001, "total_accepted": 71100.0, "total_submissions": 102200.0, "testcase_example": "'[3,2,4,1]'", "body": "Given an array of integers arr, sort the array by performing a series of pancake flips.\nIn one pancake flip we do the following steps:\nChoose an integer k where 1 <= k <= arr.length.\nReverse the sub-array arr[0...k-1] (0-indexed).\nFor example, if arr = [3,2,1,4] and we performed a pancake flip choosing k = 3, we reverse the sub-array [3,2,1], so arr = [1,2,3,4] after the pancake flip at k = 3.\nReturn an array of the k-values corresponding to a sequence of pancake flips that sort arr. Any valid answer that sorts the array within 10 * arr.length flips will be judged as correct.", "examples": [{"full_text": "Example 1:\nInput: arr = [3,2,4,1]\nOutput: [4,2,4,3]\nExplanation:\nWe perform 4 pancake flips, with k values 4, 2, 4, and 3.\nStarting state: arr = [3, 2, 4, 1]\nAfter 1st flip (k = 4): arr = [1, 4, 2, 3]\nAfter 2nd flip (k = 2): arr = [4, 1, 2, 3]\nAfter 3rd flip (k = 4): arr = [3, 2, 1, 4]\nAfter 4th flip (k = 3): arr = [1, 2, 3, 4], which is sorted.", "input": "Input: arr = [3,2,4,1]", "output": "Output: [4,2,4,3]", "explanation": "Explanation:\nWe perform 4 pancake flips, with k values 4, 2, 4, and 3.\nStarting state: arr = [3, 2, 4, 1]\nAfter 1st flip (k = 4): arr = [1, 4, 2, 3]\nAfter 2nd flip (k = 2): arr = [4, 1, 2, 3]\nAfter 3rd flip (k = 4): arr = [3, 2, 1, 4]\nAfter 4th flip (k = 3): arr = [1, 2, 3, 4], which is sorted."}, {"full_text": "Example 2:\nInput: arr = [1,2,3]\nOutput: []\nExplanation: The input is already sorted, so there is no need to flip anything.\nNote that other answers, such as [3, 3], would also be accepted.", "input": "Input: arr = [1,2,3]", "output": "Output: []", "explanation": "Explanation: The input is already sorted, so there is no need to flip anything.\nNote that other answers, such as [3, 3], would also be accepted."}], "constraints": "Constraints:\n1 <= arr.length <= 100\n1 <= arr[i] <= arr.length\nAll integers in arr are unique (i.e. arr is a permutation of the integers from 1 to arr.length).", "notes": ""}, "967": {"label": "Medium", "title": "Numbers With Same Consecutive Differences", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.469, "total_accepted": 48300.0, "total_submissions": 103100.0, "testcase_example": "'3\\n7'", "body": "Return all non-negative integers of length n such that the absolute difference between every two consecutive digits is k.\nNote that every number in the answer must not have leading zeros. For example, 01 has one leading zero and is invalid.\nYou may return the answer in any order.", "examples": [{"full_text": "Example 1:\nInput: n = 3, k = 7\nOutput: [181,292,707,818,929]\nExplanation: Note that 070 is not a valid number, because it has leading zeroes.", "input": "Input: n = 3, k = 7", "output": "Output: [181,292,707,818,929]", "explanation": "Explanation: Note that 070 is not a valid number, because it has leading zeroes."}, {"full_text": "Example 2:\nInput: n = 2, k = 1\nOutput: [10,12,21,23,32,34,43,45,54,56,65,67,76,78,87,89,98]", "input": "Input: n = 2, k = 1", "output": "Output: [10,12,21,23,32,34,43,45,54,56,65,67,76,78,87,89,98]", "explanation": ""}], "constraints": "Constraints:\n2 <= n <= 9\n0 <= k <= 9", "notes": ""}, "966": {"label": "Medium", "title": "Vowel Spellchecker", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5159, "total_accepted": 34700.0, "total_submissions": 67300.0, "testcase_example": "'[\"KiTe\",\"kite\",\"hare\",\"Hare\"]\\n' +\n  '[\"kite\",\"Kite\",\"KiTe\",\"Hare\",\"HARE\",\"Hear\",\"hear\",\"keti\",\"keet\",\"keto\"]'", "body": "Given a wordlist, we want to implement a spellchecker that converts a query word into a correct word.\nFor a given query word, the spell checker handles two categories of spelling mistakes:\nCapitalization: If the query matches a word in the wordlist (case-insensitive), then the query word is returned with the same case as the case in the wordlist.\n\nExample: wordlist = [\"yellow\"], query = \"YellOw\": correct = \"yellow\"\nExample: wordlist = [\"Yellow\"], query = \"yellow\": correct = \"Yellow\"\nExample: wordlist = [\"yellow\"], query = \"yellow\": correct = \"yellow\"\n\n\nVowel Errors: If after replacing the vowels ('a', 'e', 'i', 'o', 'u') of the query word with any vowel individually, it matches a word in the wordlist (case-insensitive), then the query word is returned with the same case as the match in the wordlist.\n\nExample: wordlist = [\"YellOw\"], query = \"yollow\": correct = \"YellOw\"\nExample: wordlist = [\"YellOw\"], query = \"yeellow\": correct = \"\" (no match)\nExample: wordlist = [\"YellOw\"], query = \"yllw\": correct = \"\" (no match)\n\n\nIn addition, the spell checker operates under the following precedence rules:\nWhen the query exactly matches a word in the wordlist (case-sensitive), you should return the same word back.\nWhen the query matches a word up to capitlization, you should return the first such match in the wordlist.\nWhen the query matches a word up to vowel errors, you should return the first such match in the wordlist.\nIf the query has no matches in the wordlist, you should return the empty string.\nGiven some queries, return a list of words answer, where answer[i] is the correct word for query = queries[i].", "examples": [{"full_text": "Example 1:\nInput: wordlist = [\"KiTe\",\"kite\",\"hare\",\"Hare\"], queries = [\"kite\",\"Kite\",\"KiTe\",\"Hare\",\"HARE\",\"Hear\",\"hear\",\"keti\",\"keet\",\"keto\"]\nOutput: [\"kite\",\"KiTe\",\"KiTe\",\"Hare\",\"hare\",\"\",\"\",\"KiTe\",\"\",\"KiTe\"]", "input": "Input: wordlist = [\"KiTe\",\"kite\",\"hare\",\"Hare\"], queries = [\"kite\",\"Kite\",\"KiTe\",\"Hare\",\"HARE\",\"Hear\",\"hear\",\"keti\",\"keet\",\"keto\"]", "output": "Output: [\"kite\",\"KiTe\",\"KiTe\",\"Hare\",\"hare\",\"\",\"\",\"KiTe\",\"\",\"KiTe\"]", "explanation": ""}, {"full_text": "Example 2:\nInput: wordlist = [\"yellow\"], queries = [\"YellOw\"]\nOutput: [\"yellow\"]", "input": "Input: wordlist = [\"yellow\"], queries = [\"YellOw\"]", "output": "Output: [\"yellow\"]", "explanation": ""}], "constraints": "Constraints:\n1 <= wordlist.length, queries.length <= 5000\n1 <= wordlist[i].length, queries[i].length <= 7\nwordlist[i] and queries[i] consist only of only English letters.", "notes": ""}, "963": {"label": "Medium", "title": "Minimum Area Rectangle II", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5435, "total_accepted": 21900.0, "total_submissions": 40200.0, "testcase_example": "'[[1,2],[2,1],[1,0],[0,1]]'", "body": "You are given an array of points in the X-Y plane points where points[i] = [xi, yi].\nReturn the minimum area of any rectangle formed from these points, with sides not necessarily parallel to the X and Y axes. If there is not any such rectangle, return 0.\nAnswers within 10^-5 of the actual answer will be accepted.", "examples": [{"full_text": "Example 1:\nInput: points = [[1,2],[2,1],[1,0],[0,1]]\nOutput: 2.00000\nExplanation: The minimum area rectangle occurs at [1,2],[2,1],[1,0],[0,1], with an area of 2.", "input": "Input: points = [[1,2],[2,1],[1,0],[0,1]]", "output": "Output: 2.00000", "explanation": "Explanation: The minimum area rectangle occurs at [1,2],[2,1],[1,0],[0,1], with an area of 2."}, {"full_text": "Example 2:\nInput: points = [[0,1],[2,1],[1,1],[1,0],[2,0]]\nOutput: 1.00000\nExplanation: The minimum area rectangle occurs at [1,0],[1,1],[2,1],[2,0], with an area of 1.", "input": "Input: points = [[0,1],[2,1],[1,1],[1,0],[2,0]]", "output": "Output: 1.00000", "explanation": "Explanation: The minimum area rectangle occurs at [1,0],[1,1],[2,1],[2,0], with an area of 1."}, {"full_text": "Example 3:\nInput: points = [[0,3],[1,2],[3,1],[1,3],[2,1]]\nOutput: 0\nExplanation: There is no possible rectangle to form from these points.", "input": "Input: points = [[0,3],[1,2],[3,1],[1,3],[2,1]]", "output": "Output: 0", "explanation": "Explanation: There is no possible rectangle to form from these points."}], "constraints": "Constraints:\n1 <= points.length <= 50\npoints[i].length == 2\n0 <= xi, yi <= 4 * 10^4\nAll the given points are unique.", "notes": ""}, "962": {"label": "Medium", "title": "Maximum Width Ramp", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.47909999999999997, "total_accepted": 31500.0, "total_submissions": 65800.0, "testcase_example": "'[6,0,8,2,1,5]'", "body": "A ramp in an integer array nums is a pair (i, j) for which i < j and nums[i] <= nums[j]. The width of such a ramp is j - i.\nGiven an integer array nums, return the maximum width of a ramp in nums. If there is no ramp in nums, return 0.", "examples": [{"full_text": "Example 1:\nInput: nums = [6,0,8,2,1,5]\nOutput: 4\nExplanation: The maximum width ramp is achieved at (i, j) = (1, 5): nums[1] = 0 and nums[5] = 5.", "input": "Input: nums = [6,0,8,2,1,5]", "output": "Output: 4", "explanation": "Explanation: The maximum width ramp is achieved at (i, j) = (1, 5): nums[1] = 0 and nums[5] = 5."}, {"full_text": "Example 2:\nInput: nums = [9,8,1,0,1,9,4,0,4,1]\nOutput: 7\nExplanation: The maximum width ramp is achieved at (i, j) = (2, 9): nums[2] = 1 and nums[9] = 1.", "input": "Input: nums = [9,8,1,0,1,9,4,0,4,1]", "output": "Output: 7", "explanation": "Explanation: The maximum width ramp is achieved at (i, j) = (2, 9): nums[2] = 1 and nums[9] = 1."}], "constraints": "Constraints:\n2 <= nums.length <= 5 * 10^4\n0 <= nums[i] <= 5 * 10^4", "notes": ""}, "959": {"label": "Medium", "title": "Regions Cut By Slashes", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.684, "total_accepted": 34700.0, "total_submissions": 50800.0, "testcase_example": "'[\" /\",\"/ \"]'", "body": "An n x n grid is composed of 1 x 1 squares where each 1 x 1 square consists of a '/', '\\', or blank space ' '. These characters divide the square into contiguous regions.\nGiven the grid grid represented as a string array, return the number of regions.\nNote that backslash characters are escaped, so a '\\' is represented as '\\\\'.", "examples": [{"full_text": "Example 1:\nInput: grid = [\" /\",\"/ \"]\nOutput: 2", "input": "Input: grid = [\" /\",\"/ \"]", "output": "Output: 2", "explanation": ""}, {"full_text": "Example 2:\nInput: grid = [\" /\",\" \"]\nOutput: 1", "input": "Input: grid = [\" /\",\" \"]", "output": "Output: 1", "explanation": ""}, {"full_text": "Example 3:\nInput: grid = [\"/\\\\\",\"\\\\/\"]\nOutput: 5\nExplanation: Recall that because \\ characters are escaped, \"\\\\/\" refers to \\/, and \"/\\\\\" refers to /\\.", "input": "Input: grid = [\"/\\\\\",\"\\\\/\"]", "output": "Output: 5", "explanation": "Explanation: Recall that because \\ characters are escaped, \"\\\\/\" refers to \\/, and \"/\\\\\" refers to /\\."}], "constraints": "Constraints:\nn == grid.length == grid[i].length\n1 <= n <= 30\ngrid[i][j] is either '/', '\\', or ' '.", "notes": ""}, "958": {"label": "Medium", "title": "Check Completeness of a Binary Tree", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5342, "total_accepted": 108300.0, "total_submissions": 202700.0, "testcase_example": "'[1,2,3,4,5,6]'", "body": "Given the root of a binary tree, determine if it is a complete binary tree.\nIn a complete binary tree, every level, except possibly the last, is completely filled, and all nodes in the last level are as far left as possible. It can have between 1 and 2^h nodes inclusive at the last level h.", "examples": [{"full_text": "Example 1:\nInput: root = [1,2,3,4,5,6]\nOutput: true\nExplanation: Every level before the last is full (ie. levels with node-values {1} and {2, 3}), and all nodes in the last level ({4, 5, 6}) are as far left as possible.", "input": "Input: root = [1,2,3,4,5,6]", "output": "Output: true", "explanation": "Explanation: Every level before the last is full (ie. levels with node-values {1} and {2, 3}), and all nodes in the last level ({4, 5, 6}) are as far left as possible."}, {"full_text": "Example 2:\nInput: root = [1,2,3,4,5,null,7]\nOutput: false\nExplanation: The node with value 7 isn't as far left as possible.", "input": "Input: root = [1,2,3,4,5,null,7]", "output": "Output: false", "explanation": "Explanation: The node with value 7 isn't as far left as possible."}], "constraints": "Constraints:\nThe number of nodes in the tree is in the range [1, 100].\n1 <= Node.val <= 1000", "notes": ""}, "957": {"label": "Medium", "title": "Prison Cells After N Days", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3954, "total_accepted": 137400.0, "total_submissions": 347600.0, "testcase_example": "'[0,1,0,1,1,0,0,1]\\n7'", "body": "There are 8 prison cells in a row and each cell is either occupied or vacant.\nEach day, whether the cell is occupied or vacant changes according to the following rules:\nIf a cell has two adjacent neighbors that are both occupied or both vacant, then the cell becomes occupied.\nOtherwise, it becomes vacant.\nNote that because the prison is a row, the first and the last cells in the row can't have two adjacent neighbors.\nYou are given an integer array cells where cells[i] == 1 if the i^th cell is occupied and cells[i] == 0 if the i^th cell is vacant, and you are given an integer n.\nReturn the state of the prison after n days (i.e., n such changes described above).", "examples": [{"full_text": "Example 1:\nInput: cells = [0,1,0,1,1,0,0,1], n = 7\nOutput: [0,0,1,1,0,0,0,0]\nExplanation: The following table summarizes the state of the prison on each day:\nDay 0: [0, 1, 0, 1, 1, 0, 0, 1]\nDay 1: [0, 1, 1, 0, 0, 0, 0, 0]\nDay 2: [0, 0, 0, 0, 1, 1, 1, 0]\nDay 3: [0, 1, 1, 0, 0, 1, 0, 0]\nDay 4: [0, 0, 0, 0, 0, 1, 0, 0]\nDay 5: [0, 1, 1, 1, 0, 1, 0, 0]\nDay 6: [0, 0, 1, 0, 1, 1, 0, 0]\nDay 7: [0, 0, 1, 1, 0, 0, 0, 0]", "input": "Input: cells = [0,1,0,1,1,0,0,1], n = 7", "output": "Output: [0,0,1,1,0,0,0,0]", "explanation": "Explanation: The following table summarizes the state of the prison on each day:\nDay 0: [0, 1, 0, 1, 1, 0, 0, 1]\nDay 1: [0, 1, 1, 0, 0, 0, 0, 0]\nDay 2: [0, 0, 0, 0, 1, 1, 1, 0]\nDay 3: [0, 1, 1, 0, 0, 1, 0, 0]\nDay 4: [0, 0, 0, 0, 0, 1, 0, 0]\nDay 5: [0, 1, 1, 1, 0, 1, 0, 0]\nDay 6: [0, 0, 1, 0, 1, 1, 0, 0]\nDay 7: [0, 0, 1, 1, 0, 0, 0, 0]"}, {"full_text": "Example 2:\nInput: cells = [1,0,0,1,0,0,1,0], n = 1000000000\nOutput: [0,0,1,1,1,1,1,0]", "input": "Input: cells = [1,0,0,1,0,0,1,0], n = 1000000000", "output": "Output: [0,0,1,1,1,1,1,0]", "explanation": ""}], "constraints": "Constraints:\ncells.length == 8\ncells[i]\nis either 0 or 1.\n1 <= n <= 10^9", "notes": ""}, "955": {"label": "Medium", "title": "Delete Columns to Make Sorted II", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.34119999999999995, "total_accepted": 14800.0, "total_submissions": 43400.0, "testcase_example": "'[\"ca\",\"bb\",\"ac\"]'", "body": "You are given an array of n strings strs, all of the same length.\nWe may choose any deletion indices, and we delete all the characters in those indices for each string.\nFor example, if we have strs = [\"abcdef\",\"uvwxyz\"] and deletion indices {0, 2, 3}, then the final array after deletions is [\"bef\", \"vyz\"].\nSuppose we chose a set of deletion indices answer such that after deletions, the final array has its elements in lexicographic order (i.e., strs[0] <= strs[1] <= strs[2] <= ... <= strs[n - 1]). Return the minimum possible value of answer.length.", "examples": [{"full_text": "Example 1:\nInput: strs = [\"ca\",\"bb\",\"ac\"]\nOutput: 1\nExplanation:\nAfter deleting the first column, strs = [\"a\", \"b\", \"c\"].\nNow strs is in lexicographic order (ie. strs[0] <= strs[1] <= strs[2]).\nWe require at least 1 deletion since initially strs was not in lexicographic order, so the answer is 1.", "input": "Input: strs = [\"ca\",\"bb\",\"ac\"]", "output": "Output: 1", "explanation": "Explanation:\nAfter deleting the first column, strs = [\"a\", \"b\", \"c\"].\nNow strs is in lexicographic order (ie. strs[0] <= strs[1] <= strs[2]).\nWe require at least 1 deletion since initially strs was not in lexicographic order, so the answer is 1."}, {"full_text": "Example 2:\nInput: strs = [\"xc\",\"yb\",\"za\"]\nOutput: 0\nExplanation:\nstrs is already in lexicographic order, so we do not need to delete anything.\nNote that the rows of strs are not necessarily in lexicographic order:\ni.e., it is NOT necessarily true that (strs[0][0] <= strs[0][1] <= ...)", "input": "Input: strs = [\"xc\",\"yb\",\"za\"]", "output": "Output: 0", "explanation": "Explanation:\nstrs is already in lexicographic order, so we do not need to delete anything.\nNote that the rows of strs are not necessarily in lexicographic order:\ni.e., it is NOT necessarily true that (strs[0][0] <= strs[0][1] <= ...)"}, {"full_text": "Example 3:\nInput: strs = [\"zyx\",\"wvu\",\"tsr\"]\nOutput: 3\nExplanation: We have to delete every column.", "input": "Input: strs = [\"zyx\",\"wvu\",\"tsr\"]", "output": "Output: 3", "explanation": "Explanation: We have to delete every column."}], "constraints": "Constraints:\nn == strs.length\n1 <= n <= 100\n1 <= strs[i].length <= 100\nstrs[i] consists of lowercase English letters.", "notes": ""}, "954": {"label": "Medium", "title": "Array of Doubled Pairs", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3834, "total_accepted": 66500.0, "total_submissions": 173500.0, "testcase_example": "'[3,1,3,6]'", "body": "Given an integer array of even length arr, return true if it is possible to reorder arr such that arr[2 * i + 1] = 2 * arr[2 * i] for every 0 <= i < len(arr) / 2, or false otherwise.", "examples": [{"full_text": "Example 1:\nInput: arr = [3,1,3,6]\nOutput: false", "input": "Input: arr = [3,1,3,6]", "output": "Output: false", "explanation": ""}, {"full_text": "Example 2:\nInput: arr = [2,1,2,6]\nOutput: false", "input": "Input: arr = [2,1,2,6]", "output": "Output: false", "explanation": ""}, {"full_text": "Example 3:\nInput: arr = [4,-2,2,-4]\nOutput: true\nExplanation: We can take two groups, [-2,-4] and [2,4] to form [-2,-4,2,4] or [2,4,-2,-4].", "input": "Input: arr = [4,-2,2,-4]", "output": "Output: true", "explanation": "Explanation: We can take two groups, [-2,-4] and [2,4] to form [-2,-4,2,4] or [2,4,-2,-4]."}], "constraints": "Constraints:\n2 <= arr.length <= 3 * 10^4\narr.length is even.\n-10^5 <= arr[i] <= 10^5", "notes": ""}, "951": {"label": "Medium", "title": "Flip Equivalent Binary Trees", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6659999999999999, "total_accepted": 103500.0, "total_submissions": 155400.0, "testcase_example": "'[1,2,3,4,5,6,null,null,null,7,8]\\n[1,3,2,null,6,4,5,null,null,null,null,8,7]'", "body": "For a binary tree T, we can define a flip operation as follows: choose any node, and swap the left and right child subtrees.\nA binary tree X\nis flip equivalent to a binary tree Y if and only if we can make X equal to Y after some number of flip operations.\nGiven the roots of two binary trees root1 and root2, return true if the two trees are flip equivalent or false otherwise.", "examples": [{"full_text": "Example 1:\nInput: root1 = [1,2,3,4,5,6,null,null,null,7,8], root2 = [1,3,2,null,6,4,5,null,null,null,null,8,7]\nOutput: true\nExplanation: We flipped at nodes with values 1, 3, and 5.", "input": "Input: root1 = [1,2,3,4,5,6,null,null,null,7,8], root2 = [1,3,2,null,6,4,5,null,null,null,null,8,7]", "output": "Output: true", "explanation": "Explanation: We flipped at nodes with values 1, 3, and 5."}, {"full_text": "Example 2:\nInput: root1 = [], root2 = []\nOutput: true", "input": "Input: root1 = [], root2 = []", "output": "Output: true", "explanation": ""}, {"full_text": "Example 3:\nInput: root1 = [], root2 = [1]\nOutput: false", "input": "Input: root1 = [], root2 = [1]", "output": "Output: false", "explanation": ""}], "constraints": "Constraints:\nThe number of nodes in each tree is in the range [0, 100].\nEach tree will have unique node values in the range [0, 99].", "notes": ""}, "950": {"label": "Medium", "title": "Reveal Cards In Increasing Order", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.768, "total_accepted": 54900.0, "total_submissions": 71500.0, "testcase_example": "'[17,13,11,2,3,5,7]'", "body": "You are given an integer array deck. There is a deck of cards where every card has a unique integer. The integer on the i^th card is deck[i].\nYou can order the deck in any order you want. Initially, all the cards start face down (unrevealed) in one deck.\nYou will do the following steps repeatedly until all cards are revealed:\nTake the top card of the deck, reveal it, and take it out of the deck.\nIf there are still cards in the deck then put the next top card of the deck at the bottom of the deck.\nIf there are still unrevealed cards, go back to step 1. Otherwise, stop.\nReturn an ordering of the deck that would reveal the cards in increasing order.\nNote that the first entry in the answer is considered to be the top of the deck.", "examples": [{"full_text": "Example 1:\nInput: deck = [17,13,11,2,3,5,7]\nOutput: [2,13,3,11,5,17,7]\nExplanation:\nWe get the deck in the order [17,13,11,2,3,5,7] (this order does not matter), and reorder it.\nAfter reordering, the deck starts as [2,13,3,11,5,17,7], where 2 is the top of the deck.\nWe reveal 2, and move 13 to the bottom. The deck is now [3,11,5,17,7,13].\nWe reveal 3, and move 11 to the bottom. The deck is now [5,17,7,13,11].\nWe reveal 5, and move 17 to the bottom. The deck is now [7,13,11,17].\nWe reveal 7, and move 13 to the bottom. The deck is now [11,17,13].\nWe reveal 11, and move 17 to the bottom. The deck is now [13,17].\nWe reveal 13, and move 17 to the bottom. The deck is now [17].\nWe reveal 17.\nSince all the cards revealed are in increasing order, the answer is correct.", "input": "Input: deck = [17,13,11,2,3,5,7]", "output": "Output: [2,13,3,11,5,17,7]", "explanation": "Explanation:\nWe get the deck in the order [17,13,11,2,3,5,7] (this order does not matter), and reorder it.\nAfter reordering, the deck starts as [2,13,3,11,5,17,7], where 2 is the top of the deck.\nWe reveal 2, and move 13 to the bottom. The deck is now [3,11,5,17,7,13].\nWe reveal 3, and move 11 to the bottom. The deck is now [5,17,7,13,11].\nWe reveal 5, and move 17 to the bottom. The deck is now [7,13,11,17].\nWe reveal 7, and move 13 to the bottom. The deck is now [11,17,13].\nWe reveal 11, and move 17 to the bottom. The deck is now [13,17].\nWe reveal 13, and move 17 to the bottom. The deck is now [17].\nWe reveal 17.\nSince all the cards revealed are in increasing order, the answer is correct."}, {"full_text": "Example 2:\nInput: deck = [1,1000]\nOutput: [1,1000]", "input": "Input: deck = [1,1000]", "output": "Output: [1,1000]", "explanation": ""}], "constraints": "Constraints:\n1 <= deck.length <= 1000\n1 <= deck[i] <= 10^6\nAll the values of deck are unique.", "notes": ""}, "949": {"label": "Medium", "title": "Largest Time for Given Digits", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.35600000000000004, "total_accepted": 69000.0, "total_submissions": 194000.0, "testcase_example": "'[1,2,3,4]'", "body": "Given an array arr of 4 digits, find the latest 24-hour time that can be made using each digit exactly once.\n24-hour times are formatted as \"HH:MM\", where HH is between 00 and 23, and MM is between 00 and 59. The earliest 24-hour time is 00:00, and the latest is 23:59.\nReturn the latest 24-hour time in \"HH:MM\" format. If no valid time can be made, return an empty string.", "examples": [{"full_text": "Example 1:\nInput: arr = [1,2,3,4]\nOutput: \"23:41\"\nExplanation: The valid 24-hour times are \"12:34\", \"12:43\", \"13:24\", \"13:42\", \"14:23\", \"14:32\", \"21:34\", \"21:43\", \"23:14\", and \"23:41\". Of these times, \"23:41\" is the latest.", "input": "Input: arr = [1,2,3,4]", "output": "Output: \"23:41\"", "explanation": "Explanation: The valid 24-hour times are \"12:34\", \"12:43\", \"13:24\", \"13:42\", \"14:23\", \"14:32\", \"21:34\", \"21:43\", \"23:14\", and \"23:41\". Of these times, \"23:41\" is the latest."}, {"full_text": "Example 2:\nInput: arr = [5,5,5,5]\nOutput: \"\"\nExplanation: There are no valid 24-hour times as \"55:55\" is not valid.", "input": "Input: arr = [5,5,5,5]", "output": "Output: \"\"", "explanation": "Explanation: There are no valid 24-hour times as \"55:55\" is not valid."}], "constraints": "Constraints:\narr.length == 4\n0 <= arr[i] <= 9", "notes": ""}, "948": {"label": "Medium", "title": "Bag of Tokens", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4618, "total_accepted": 38000.0, "total_submissions": 82300.0, "testcase_example": "'[100]\\n50'", "body": "You have an initial power of power, an initial score of 0, and a bag of tokens where tokens[i] is the value of the i^th token (0-indexed).\nYour goal is to maximize your total score by potentially playing each token in one of two ways:\nIf your current power is at least tokens[i], you may play the i^th token face up, losing tokens[i] power and gaining 1 score.\nIf your current score is at least 1, you may play the i^th token face down, gaining tokens[i] power and losing 1 score.\nEach token may be played at most once and in any order. You do not have to play all the tokens.\nReturn the largest possible score you can achieve after playing any number of tokens.", "examples": [{"full_text": "Example 1:\nInput: tokens = [100], power = 50\nOutput: 0\nExplanation: Playing the only token in the bag is impossible because you either have too little power or too little score.", "input": "Input: tokens = [100], power = 50", "output": "Output: 0", "explanation": "Explanation: Playing the only token in the bag is impossible because you either have too little power or too little score."}, {"full_text": "Example 2:\nInput: tokens = [100,200], power = 150\nOutput: 1\nExplanation: Play the 0^th token (100) face up, your power becomes 50 and score becomes 1.\nThere is no need to play the 1^st token since you cannot play it face up to add to your score.", "input": "Input: tokens = [100,200], power = 150", "output": "Output: 1", "explanation": "Explanation: Play the 0^th token (100) face up, your power becomes 50 and score becomes 1.\nThere is no need to play the 1^st token since you cannot play it face up to add to your score."}, {"full_text": "Example 3:\nInput: tokens = [100,200,300,400], power = 200\nOutput: 2\nExplanation: Play the tokens in this order to get a score of 2:\n1. Play the 0^th token (100) face up, your power becomes 100 and score becomes 1.\n2. Play the 3^rd token (400) face down, your power becomes 500 and score becomes 0.\n3. Play the 1^st token (200) face up, your power becomes 300 and score becomes 1.\n4. Play the 2^nd token (300) face up, your power becomes 0 and score becomes 2.", "input": "Input: tokens = [100,200,300,400], power = 200", "output": "Output: 2", "explanation": "Explanation: Play the tokens in this order to get a score of 2:\n1. Play the 0^th token (100) face up, your power becomes 100 and score becomes 1.\n2. Play the 3^rd token (400) face down, your power becomes 500 and score becomes 0.\n3. Play the 1^st token (200) face up, your power becomes 300 and score becomes 1.\n4. Play the 2^nd token (300) face up, your power becomes 0 and score becomes 2."}], "constraints": "Constraints:\n0 <= tokens.length <= 1000\n0 <= tokens[i],\npower < 10^4", "notes": ""}, "947": {"label": "Medium", "title": "Most Stones Removed with Same Row or Column", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5621, "total_accepted": 95600.0, "total_submissions": 170000.0, "testcase_example": "'[[0,0],[0,1],[1,0],[1,2],[2,1],[2,2]]'", "body": "On a 2D plane, we place n stones at some integer coordinate points. Each coordinate point may have at most one stone.\nA stone can be removed if it shares either the same row or the same column as another stone that has not been removed.\nGiven an array stones of length n where stones[i] = [xi, yi] represents the location of the i^th stone, return the largest possible number of stones that can be removed.", "examples": [{"full_text": "Example 1:\nInput: stones = [[0,0],[0,1],[1,0],[1,2],[2,1],[2,2]]\nOutput: 5\nExplanation: One way to remove 5 stones is as follows:\n1. Remove stone [2,2] because it shares the same row as [2,1].\n2. Remove stone [2,1] because it shares the same column as [0,1].\n3. Remove stone [1,2] because it shares the same row as [1,0].\n4. Remove stone [1,0] because it shares the same column as [0,0].\n5. Remove stone [0,1] because it shares the same row as [0,0].\nStone [0,0] cannot be removed since it does not share a row/column with another stone still on the plane.", "input": "Input: stones = [[0,0],[0,1],[1,0],[1,2],[2,1],[2,2]]", "output": "Output: 5", "explanation": "Explanation: One way to remove 5 stones is as follows:\n1. Remove stone [2,2] because it shares the same row as [2,1].\n2. Remove stone [2,1] because it shares the same column as [0,1].\n3. Remove stone [1,2] because it shares the same row as [1,0].\n4. Remove stone [1,0] because it shares the same column as [0,0].\n5. Remove stone [0,1] because it shares the same row as [0,0].\nStone [0,0] cannot be removed since it does not share a row/column with another stone still on the plane."}, {"full_text": "Example 2:\nInput: stones = [[0,0],[0,2],[1,1],[2,0],[2,2]]\nOutput: 3\nExplanation: One way to make 3 moves is as follows:\n1. Remove stone [2,2] because it shares the same row as [2,0].\n2. Remove stone [2,0] because it shares the same column as [0,0].\n3. Remove stone [0,2] because it shares the same row as [0,0].\nStones [0,0] and [1,1] cannot be removed since they do not share a row/column with another stone still on the plane.", "input": "Input: stones = [[0,0],[0,2],[1,1],[2,0],[2,2]]", "output": "Output: 3", "explanation": "Explanation: One way to make 3 moves is as follows:\n1. Remove stone [2,2] because it shares the same row as [2,0].\n2. Remove stone [2,0] because it shares the same column as [0,0].\n3. Remove stone [0,2] because it shares the same row as [0,0].\nStones [0,0] and [1,1] cannot be removed since they do not share a row/column with another stone still on the plane."}, {"full_text": "Example 3:\nInput: stones = [[0,0]]\nOutput: 0\nExplanation: [0,0] is the only stone on the plane, so you cannot remove it.", "input": "Input: stones = [[0,0]]", "output": "Output: 0", "explanation": "Explanation: [0,0] is the only stone on the plane, so you cannot remove it."}], "constraints": "Constraints:\n1 <= stones.length <= 1000\n0 <= xi, yi <= 10^4\nNo two stones are at the same coordinate point.", "notes": ""}, "946": {"label": "Medium", "title": "Validate Stack Sequences", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6527, "total_accepted": 128199.99999999999, "total_submissions": 196400.0, "testcase_example": "'[1,2,3,4,5]\\n[4,5,3,2,1]'", "body": "Given two integer arrays pushed and popped each with distinct values, return true if this could have been the result of a sequence of push and pop operations on an initially empty stack, or false otherwise.", "examples": [{"full_text": "Example 1:\nInput: pushed = [1,2,3,4,5], popped = [4,5,3,2,1]\nOutput: true\nExplanation: We might do the following sequence:\npush(1), push(2), push(3), push(4),\npop() -> 4,\npush(5),\npop() -> 5, pop() -> 3, pop() -> 2, pop() -> 1", "input": "Input: pushed = [1,2,3,4,5], popped = [4,5,3,2,1]", "output": "Output: true", "explanation": "Explanation: We might do the following sequence:\npush(1), push(2), push(3), push(4),\npop() -> 4,\npush(5),\npop() -> 5, pop() -> 3, pop() -> 2, pop() -> 1"}, {"full_text": "Example 2:\nInput: pushed = [1,2,3,4,5], popped = [4,3,5,1,2]\nOutput: false\nExplanation: 1 cannot be popped before 2.", "input": "Input: pushed = [1,2,3,4,5], popped = [4,3,5,1,2]", "output": "Output: false", "explanation": "Explanation: 1 cannot be popped before 2."}], "constraints": "Constraints:\n1 <= pushed.length <= 1000\n0 <= pushed[i] <= 1000\nAll the elements of pushed are unique.\npopped.length == pushed.length\npopped is a permutation of pushed.", "notes": ""}, "945": {"label": "Medium", "title": "Minimum Increment to Make Array Unique", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4869, "total_accepted": 50000.0, "total_submissions": 102600.0, "testcase_example": "'[1,2,2]'", "body": "You are given an integer array nums. In one move, you can pick an index i where 0 <= i < nums.length and increment nums[i] by 1.\nReturn the minimum number of moves to make every value in nums unique.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,2,2]\nOutput: 1\nExplanation: After 1 move, the array could be [1, 2, 3].", "input": "Input: nums = [1,2,2]", "output": "Output: 1", "explanation": "Explanation: After 1 move, the array could be [1, 2, 3]."}, {"full_text": "Example 2:\nInput: nums = [3,2,1,2,1,7]\nOutput: 6\nExplanation: After 6 moves, the array could be [3, 4, 1, 2, 5, 7].\nIt can be shown with 5 or less moves that it is impossible for the array to have all unique values.", "input": "Input: nums = [3,2,1,2,1,7]", "output": "Output: 6", "explanation": "Explanation: After 6 moves, the array could be [3, 4, 1, 2, 5, 7].\nIt can be shown with 5 or less moves that it is impossible for the array to have all unique values."}], "constraints": "Constraints:\n1 <= nums.length <= 10^5\n0 <= nums[i] <= 10^5", "notes": ""}, "939": {"label": "Medium", "title": "Minimum Area Rectangle", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5341, "total_accepted": 93500.0, "total_submissions": 175000.0, "testcase_example": "'[[1,1],[1,3],[3,1],[3,3],[2,2]]'", "body": "You are given an array of points in the X-Y plane points where points[i] = [xi, yi].\nReturn the minimum area of a rectangle formed from these points, with sides parallel to the X and Y axes. If there is not any such rectangle, return 0.", "examples": [{"full_text": "Example 1:\nInput: points = [[1,1],[1,3],[3,1],[3,3],[2,2]]\nOutput: 4", "input": "Input: points = [[1,1],[1,3],[3,1],[3,3],[2,2]]", "output": "Output: 4", "explanation": ""}, {"full_text": "Example 2:\nInput: points = [[1,1],[1,3],[3,1],[3,3],[4,1],[4,3]]\nOutput: 2", "input": "Input: points = [[1,1],[1,3],[3,1],[3,3],[4,1],[4,3]]", "output": "Output: 2", "explanation": ""}], "constraints": "Constraints:\n1 <= points.length <= 500\npoints[i].length == 2\n0 <= xi, yi <= 4 * 10^4\nAll the given points are unique.", "notes": ""}, "935": {"label": "Medium", "title": "Knight Dialer", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4869, "total_accepted": 72300.0, "total_submissions": 148600.0, "testcase_example": "'1'", "body": "The chess knight has a unique movement,\nit may move two squares vertically and one square horizontally, or two squares horizontally and one square vertically (with both forming the shape of an L). The possible movements of chess knight are shown in this diagaram:\nA chess knight can move as indicated in the chess diagram below:\nWe have a chess knight and a phone pad as shown below, the knight can only stand on a numeric cell\n(i.e. blue cell).\nGiven an integer n, return how many distinct phone numbers of length n we can dial.\nYou are allowed to place the knight on any numeric cell initially and then you should perform n - 1 jumps to dial a number of length n. All jumps should be valid knight jumps.\nAs the answer may be very large, return the answer modulo 10^9 + 7.", "examples": [{"full_text": "Example 1:\nInput: n = 1\nOutput: 10\nExplanation: We need to dial a number of length 1, so placing the knight over any numeric cell of the 10 cells is sufficient.", "input": "Input: n = 1", "output": "Output: 10", "explanation": "Explanation: We need to dial a number of length 1, so placing the knight over any numeric cell of the 10 cells is sufficient."}, {"full_text": "Example 2:\nInput: n = 2\nOutput: 20\nExplanation: All the valid number we can dial are [04, 06, 16, 18, 27, 29, 34, 38, 40, 43, 49, 60, 61, 67, 72, 76, 81, 83, 92, 94]", "input": "Input: n = 2", "output": "Output: 20", "explanation": "Explanation: All the valid number we can dial are [04, 06, 16, 18, 27, 29, 34, 38, 40, 43, 49, 60, 61, 67, 72, 76, 81, 83, 92, 94]"}, {"full_text": "Example 3:\nInput: n = 3131\nOutput: 136006598\nExplanation: Please take care of the mod.", "input": "Input: n = 3131", "output": "Output: 136006598", "explanation": "Explanation: Please take care of the mod."}], "constraints": "Constraints:\n1 <= n <= 5000", "notes": ""}, "934": {"label": "Medium", "title": "Shortest Bridge", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5219, "total_accepted": 80600.0, "total_submissions": 154500.0, "testcase_example": "'[[0,1],[1,0]]'", "body": "You are given an n x n binary matrix grid where 1 represents land and 0 represents water.\nAn island is a 4-directionally connected group of 1's not connected to any other 1's. There are exactly two islands in grid.\nYou may change 0's to 1's to connect the two islands to form one island.\nReturn the smallest number of 0's you must flip to connect the two islands.", "examples": [{"full_text": "Example 1:\nInput: grid = [[0,1],[1,0]]\nOutput: 1", "input": "Input: grid = [[0,1],[1,0]]", "output": "Output: 1", "explanation": ""}, {"full_text": "Example 2:\nInput: grid = [[0,1,0],[0,0,0],[0,0,1]]\nOutput: 2", "input": "Input: grid = [[0,1,0],[0,0,0],[0,0,1]]", "output": "Output: 2", "explanation": ""}, {"full_text": "Example 3:\nInput: grid = [[1,1,1,1,1],[1,0,0,0,1],[1,0,1,0,1],[1,0,0,0,1],[1,1,1,1,1]]\nOutput: 1", "input": "Input: grid = [[1,1,1,1,1],[1,0,0,0,1],[1,0,1,0,1],[1,0,0,0,1],[1,1,1,1,1]]", "output": "Output: 1", "explanation": ""}], "constraints": "Constraints:\nn == grid.length == grid[i].length\n2 <= n <= 100\ngrid[i][j] is either 0 or 1.\nThere are exactly two islands in grid.", "notes": ""}, "932": {"label": "Medium", "title": "Beautiful Array", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6448999999999999, "total_accepted": 34900.0, "total_submissions": 54200.0, "testcase_example": "'4'", "body": "An array nums of length n is beautiful if:\nnums is a permutation of the integers in the range [1, n].\nFor every 0 <= i < j < n, there is no index k with i < k < j where 2 * nums[k] == nums[i] + nums[j].\nGiven the integer n, return any beautiful array nums of length n. There will be at least one valid answer for the given n.", "examples": [{"full_text": "Example 1:\nInput: n = 4\nOutput: [2,1,4,3]", "input": "Input: n = 4", "output": "Output: [2,1,4,3]", "explanation": ""}, {"full_text": "Example 2:\nInput: n = 5\nOutput: [3,1,2,5,4]", "input": "Input: n = 5", "output": "Output: [3,1,2,5,4]", "explanation": ""}], "constraints": "Constraints:\n1 <= n <= 1000", "notes": ""}, "931": {"label": "Medium", "title": "Minimum Falling Path Sum", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6692, "total_accepted": 111100.0, "total_submissions": 166000.0, "testcase_example": "'[[2,1,3],[6,5,4],[7,8,9]]'", "body": "Given an n x n array of integers matrix, return the minimum sum of any falling path through matrix.\nA falling path starts at any element in the first row and chooses the element in the next row that is either directly below or diagonally left/right. Specifically, the next element from position (row, col) will be (row + 1, col - 1), (row + 1, col), or (row + 1, col + 1).", "examples": [{"full_text": "Example 1:\nInput: matrix = [[2,1,3],[6,5,4],[7,8,9]]\nOutput: 13\nExplanation: There are two falling paths with a minimum sum as shown.", "input": "Input: matrix = [[2,1,3],[6,5,4],[7,8,9]]", "output": "Output: 13", "explanation": "Explanation: There are two falling paths with a minimum sum as shown."}, {"full_text": "Example 2:\nInput: matrix = [[-19,57],[-40,-5]]\nOutput: -59\nExplanation: The falling path with a minimum sum is shown.", "input": "Input: matrix = [[-19,57],[-40,-5]]", "output": "Output: -59", "explanation": "Explanation: The falling path with a minimum sum is shown."}], "constraints": "Constraints:\nn == matrix.length == matrix[i].length\n1 <= n <= 100\n-100 <= matrix[i][j] <= 100", "notes": ""}, "930": {"label": "Medium", "title": "Binary Subarrays With Sum", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4824, "total_accepted": 42900.0, "total_submissions": 89000.0, "testcase_example": "'[1,0,1,0,1]\\n2'", "body": "Given a binary array nums and an integer goal, return the number of non-empty subarrays with a sum goal.\nA subarray is a contiguous part of the array.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,0,1,0,1], goal = 2\nOutput: 4\nExplanation: The 4 subarrays are bolded and underlined below:\n[1,0,1,0,1]\n[1,0,1,0,1]\n[1,0,1,0,1]\n[1,0,1,0,1]", "input": "Input: nums = [1,0,1,0,1], goal = 2", "output": "Output: 4", "explanation": "Explanation: The 4 subarrays are bolded and underlined below:\n[1,0,1,0,1]\n[1,0,1,0,1]\n[1,0,1,0,1]\n[1,0,1,0,1]"}, {"full_text": "Example 2:\nInput: nums = [0,0,0,0,0], goal = 0\nOutput: 15", "input": "Input: nums = [0,0,0,0,0], goal = 0", "output": "Output: 15", "explanation": ""}], "constraints": "Constraints:\n1 <= nums.length <= 3 * 10^4\nnums[i] is either 0 or 1.\n0 <= goal <= nums.length", "notes": ""}, "926": {"label": "Medium", "title": "Flip String to Monotone Increasing", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5811, "total_accepted": 76900.0, "total_submissions": 132300.0, "testcase_example": "'\"00110\"'", "body": "A binary string is monotone increasing if it consists of some number of 0's (possibly none), followed by some number of 1's (also possibly none).\nYou are given a binary string s. You can flip s[i] changing it from 0 to 1 or from 1 to 0.\nReturn the minimum number of flips to make s monotone increasing.", "examples": [{"full_text": "Example 1:\nInput: s = \"00110\"\nOutput: 1\nExplanation: We flip the last digit to get 00111.", "input": "Input: s = \"00110\"", "output": "Output: 1", "explanation": "Explanation: We flip the last digit to get 00111."}, {"full_text": "Example 2:\nInput: s = \"010110\"\nOutput: 2\nExplanation: We flip to get 011111, or alternatively 000111.", "input": "Input: s = \"010110\"", "output": "Output: 2", "explanation": "Explanation: We flip to get 011111, or alternatively 000111."}, {"full_text": "Example 3:\nInput: s = \"00011000\"\nOutput: 2\nExplanation: We flip to get 00000000.", "input": "Input: s = \"00011000\"", "output": "Output: 2", "explanation": "Explanation: We flip to get 00000000."}], "constraints": "Constraints:\n1 <= s.length <= 10^5\ns[i] is either '0' or '1'.", "notes": ""}, "923": {"label": "Medium", "title": "3Sum With Multiplicity", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.41359999999999997, "total_accepted": 45000.0, "total_submissions": 108700.0, "testcase_example": "'[1,1,2,2,3,3,4,4,5,5]\\n8'", "body": "Given an integer array arr, and an integer target, return the number of tuples i, j, k such that i < j < k and arr[i] + arr[j] + arr[k] == target.\nAs the answer can be very large, return it modulo 10^9 + 7.", "examples": [{"full_text": "Example 1:\nInput: arr = [1,1,2,2,3,3,4,4,5,5], target = 8\nOutput: 20\nExplanation:\nEnumerating by the values (arr[i], arr[j], arr[k]):\n(1, 2, 5) occurs 8 times;\n(1, 3, 4) occurs 8 times;\n(2, 2, 4) occurs 2 times;\n(2, 3, 3) occurs 2 times.", "input": "Input: arr = [1,1,2,2,3,3,4,4,5,5], target = 8", "output": "Output: 20", "explanation": "Explanation:\nEnumerating by the values (arr[i], arr[j], arr[k]):\n(1, 2, 5) occurs 8 times;\n(1, 3, 4) occurs 8 times;\n(2, 2, 4) occurs 2 times;\n(2, 3, 3) occurs 2 times."}, {"full_text": "Example 2:\nInput: arr = [1,1,2,2,2,2], target = 5\nOutput: 12\nExplanation:\narr[i] = 1, arr[j] = arr[k] = 2 occurs 12 times:\nWe choose one 1 from [1,1] in 2 ways,\nand two 2s from [2,2,2,2] in 6 ways.", "input": "Input: arr = [1,1,2,2,2,2], target = 5", "output": "Output: 12", "explanation": "Explanation:\narr[i] = 1, arr[j] = arr[k] = 2 occurs 12 times:\nWe choose one 1 from [1,1] in 2 ways,\nand two 2s from [2,2,2,2] in 6 ways."}], "constraints": "Constraints:\n3 <= arr.length <= 3000\n0 <= arr[i] <= 100\n0 <= target <= 300", "notes": ""}, "921": {"label": "Medium", "title": "Minimum Add to Make Parentheses Valid", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7737, "total_accepted": 180300.0, "total_submissions": 233000.0, "testcase_example": "'\"())\"'", "body": "A parentheses string is valid if and only if:\nIt is the empty string,\nIt can be written as AB (A concatenated with B), where A and B are valid strings, or\nIt can be written as (A), where A is a valid string.\nYou are given a parentheses string s. In one move, you can insert a parenthesis at any position of the string.\nFor example, if s = \"()))\", you can insert an opening parenthesis to be \"(()))\" or a closing parenthesis to be \"())))\".\nReturn the minimum number of moves required to make s valid.", "examples": [{"full_text": "Example 1:\nInput: s = \"())\"\nOutput: 1", "input": "Input: s = \"())\"", "output": "Output: 1", "explanation": ""}, {"full_text": "Example 2:\nInput: s = \"(((\"\nOutput: 3", "input": "Input: s = \"(((\"", "output": "Output: 3", "explanation": ""}], "constraints": "Constraints:\n1 <= s.length <= 1000\ns[i] is either '(' or ')'.", "notes": ""}, "919": {"label": "Medium", "title": "Complete Binary Tree Inserter", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6355, "total_accepted": 36600.0, "total_submissions": 57600.0, "testcase_example": "'[\"CBTInserter\",\"insert\",\"insert\",\"get_root\"]\\n[[[1,2]],[3],[4],[]]'", "body": "A complete binary tree is a binary tree in which every level, except possibly the last, is completely filled, and all nodes are as far left as possible.\nDesign an algorithm to insert a new node to a complete binary tree keeping it complete after the insertion.\nImplement the CBTInserter class:\nCBTInserter(TreeNode root) Initializes the data structure with the root of the complete binary tree.\nint insert(int v) Inserts a TreeNode into the tree with value Node.val == val so that the tree remains complete, and returns the value of the parent of the inserted TreeNode.\nTreeNode get_root() Returns the root node of the tree.", "examples": [{"full_text": "Example 1:\nInput\n[\"CBTInserter\", \"insert\", \"insert\", \"get_root\"]\n[[[1, 2]], [3], [4], []]\nOutput\n[null, 1, 2, [1, 2, 3, 4]]\nExplanation\nCBTInserter cBTInserter = new CBTInserter([1, 2]);\ncBTInserter.insert(3); // return 1\ncBTInserter.insert(4); // return 2\ncBTInserter.get_root(); // return [1, 2, 3, 4]", "input": "Input\n[\"CBTInserter\", \"insert\", \"insert\", \"get_root\"]\n[[[1, 2]], [3], [4], []]", "output": "Output\n[null, 1, 2, [1, 2, 3, 4]]", "explanation": "Explanation\nCBTInserter cBTInserter = new CBTInserter([1, 2]);\ncBTInserter.insert(3); // return 1\ncBTInserter.insert(4); // return 2\ncBTInserter.get_root(); // return [1, 2, 3, 4]"}], "constraints": "Constraints:\nThe number of nodes in the tree will be in the range [1, 1000].\n0 <= Node.val <= 5000\nroot is a complete binary tree.\n0 <= val <= 5000\nAt most 10^4 calls will be made to insert and get_root.", "notes": ""}, "918": {"label": "Medium", "title": "Maximum Sum Circular Subarray", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.36619999999999997, "total_accepted": 105200.0, "total_submissions": 287200.0, "testcase_example": "'[1,-2,3,-2]'", "body": "Given a circular integer array nums of length n, return the maximum possible sum of a non-empty subarray of nums.\nA circular array means the end of the array connects to the beginning of the array. Formally, the next element of nums[i] is nums[(i + 1) % n] and the previous element of nums[i] is nums[(i - 1 + n) % n].\nA subarray may only include each element of the fixed buffer nums at most once. Formally, for a subarray nums[i], nums[i + 1], ..., nums[j], there does not exist i <= k1, k2 <= j with k1 % n == k2 % n.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,-2,3,-2]\nOutput: 3\nExplanation: Subarray [3] has maximum sum 3.", "input": "Input: nums = [1,-2,3,-2]", "output": "Output: 3", "explanation": "Explanation: Subarray [3] has maximum sum 3."}, {"full_text": "Example 2:\nInput: nums = [5,-3,5]\nOutput: 10\nExplanation: Subarray [5,5] has maximum sum 5 + 5 = 10.", "input": "Input: nums = [5,-3,5]", "output": "Output: 10", "explanation": "Explanation: Subarray [5,5] has maximum sum 5 + 5 = 10."}, {"full_text": "Example 3:\nInput: nums = [-3,-2,-3]\nOutput: -2\nExplanation: Subarray [-2] has maximum sum -2.", "input": "Input: nums = [-3,-2,-3]", "output": "Output: -2", "explanation": "Explanation: Subarray [-2] has maximum sum -2."}], "constraints": "Constraints:\nn == nums.length\n1 <= n <= 3 * 10^4\n-3 * 10^4 <= nums[i] <= 3 * 10^4", "notes": ""}, "916": {"label": "Medium", "title": "Word Subsets", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5279, "total_accepted": 48800.0, "total_submissions": 92400.0, "testcase_example": "'[\"amazon\",\"apple\",\"facebook\",\"google\",\"leetcode\"]\\n[\"e\",\"o\"]'", "body": "You are given two string arrays words1 and words2.\nA string b is a subset of string a if every letter in b occurs in a including multiplicity.\nFor example, \"wrr\" is a subset of \"warrior\" but is not a subset of \"world\".\nA string a from words1 is universal if for every string b in words2, b is a subset of a.\nReturn an array of all the universal strings in words1. You may return the answer in any order.", "examples": [{"full_text": "Example 1:\nInput: words1 = [\"amazon\",\"apple\",\"facebook\",\"google\",\"leetcode\"], words2 = [\"e\",\"o\"]\nOutput: [\"facebook\",\"google\",\"leetcode\"]", "input": "Input: words1 = [\"amazon\",\"apple\",\"facebook\",\"google\",\"leetcode\"], words2 = [\"e\",\"o\"]", "output": "Output: [\"facebook\",\"google\",\"leetcode\"]", "explanation": ""}, {"full_text": "Example 2:\nInput: words1 = [\"amazon\",\"apple\",\"facebook\",\"google\",\"leetcode\"], words2 = [\"l\",\"e\"]\nOutput: [\"apple\",\"google\",\"leetcode\"]", "input": "Input: words1 = [\"amazon\",\"apple\",\"facebook\",\"google\",\"leetcode\"], words2 = [\"l\",\"e\"]", "output": "Output: [\"apple\",\"google\",\"leetcode\"]", "explanation": ""}], "constraints": "Constraints:\n1 <= words1.length, words2.length <= 10^4\n1 <= words1[i].length, words2[i].length <= 10\nwords1[i] and words2[i] consist only of lowercase English letters.\nAll the strings of words1 are unique.", "notes": ""}, "915": {"label": "Medium", "title": "Partition Array into Disjoint Intervals", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.48369999999999996, "total_accepted": 64099.99999999999, "total_submissions": 132500.0, "testcase_example": "'[5,0,3,8,6]'", "body": "Given an integer array nums, partition it into two (contiguous) subarrays left and right so that:\nEvery element in left is less than or equal to every element in right.\nleft and right are non-empty.\nleft has the smallest possible size.\nReturn the length of left after such a partitioning.\nTest cases are generated such that partitioning exists.", "examples": [{"full_text": "Example 1:\nInput: nums = [5,0,3,8,6]\nOutput: 3\nExplanation: left = [5,0,3], right = [8,6]", "input": "Input: nums = [5,0,3,8,6]", "output": "Output: 3", "explanation": "Explanation: left = [5,0,3], right = [8,6]"}, {"full_text": "Example 2:\nInput: nums = [1,1,1,0,6,12]\nOutput: 4\nExplanation: left = [1,1,1,0], right = [6,12]", "input": "Input: nums = [1,1,1,0,6,12]", "output": "Output: 4", "explanation": "Explanation: left = [1,1,1,0], right = [6,12]"}], "constraints": "Constraints:\n2 <= nums.length <= 10^5\n0 <= nums[i] <= 10^6\nThere is at least one valid answer for the given input.", "notes": ""}, "912": {"label": "Medium", "title": "Sort an Array", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6182, "total_accepted": 235600.0, "total_submissions": 381100.0, "testcase_example": "'[5,2,3,1]'", "body": "Given an array of integers nums, sort the array in ascending order.", "examples": [{"full_text": "Example 1:\nInput: nums = [5,2,3,1]\nOutput: [1,2,3,5]", "input": "Input: nums = [5,2,3,1]", "output": "Output: [1,2,3,5]", "explanation": ""}, {"full_text": "Example 2:\nInput: nums = [5,1,1,2,0,0]\nOutput: [0,0,1,1,2,5]", "input": "Input: nums = [5,1,1,2,0,0]", "output": "Output: [0,0,1,1,2,5]", "explanation": ""}], "constraints": "Constraints:\n1 <= nums.length <= 5 * 10^4\n-5 * 10^4 <= nums[i] <= 5 * 10^4", "notes": ""}, "911": {"label": "Medium", "title": "Online Election", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5161, "total_accepted": 37500.0, "total_submissions": 72700.0, "testcase_example": "'[\"TopVotedCandidate\",\"q\",\"q\",\"q\",\"q\",\"q\",\"q\"]\\n' +\n  '[[[0,1,1,0,0,1,0],[0,5,10,15,20,25,30]],[3],[12],[25],[15],[24],[8]]'", "body": "You are given two integer arrays persons and times. In an election, the i^th vote was cast for persons[i] at time times[i].\nFor each query at a time t, find the person that was leading the election at time t. Votes cast at time t will count towards our query. In the case of a tie, the most recent vote (among tied candidates) wins.\nImplement the TopVotedCandidate class:\nTopVotedCandidate(int[] persons, int[] times) Initializes the object with the persons and times arrays.\nint q(int t) Returns the number of the person that was leading the election at time t according to the mentioned rules.", "examples": [{"full_text": "Example 1:\nInput\n[\"TopVotedCandidate\", \"q\", \"q\", \"q\", \"q\", \"q\", \"q\"]\n[[[0, 1, 1, 0, 0, 1, 0], [0, 5, 10, 15, 20, 25, 30]], [3], [12], [25], [15], [24], [8]]\nOutput\n[null, 0, 1, 1, 0, 0, 1]\nExplanation\nTopVotedCandidate topVotedCandidate = new TopVotedCandidate([0, 1, 1, 0, 0, 1, 0], [0, 5, 10, 15, 20, 25, 30]);\ntopVotedCandidate.q(3); // return 0, At time 3, the votes are [0], and 0 is leading.\ntopVotedCandidate.q(12); // return 1, At time 12, the votes are [0,1,1], and 1 is leading.\ntopVotedCandidate.q(25); // return 1, At time 25, the votes are [0,1,1,0,0,1], and 1 is leading (as ties go to the most recent vote.)\ntopVotedCandidate.q(15); // return 0\ntopVotedCandidate.q(24); // return 0\ntopVotedCandidate.q(8); // return 1", "input": "Input\n[\"TopVotedCandidate\", \"q\", \"q\", \"q\", \"q\", \"q\", \"q\"]\n[[[0, 1, 1, 0, 0, 1, 0], [0, 5, 10, 15, 20, 25, 30]], [3], [12], [25], [15], [24], [8]]", "output": "Output\n[null, 0, 1, 1, 0, 0, 1]", "explanation": "Explanation\nTopVotedCandidate topVotedCandidate = new TopVotedCandidate([0, 1, 1, 0, 0, 1, 0], [0, 5, 10, 15, 20, 25, 30]);\ntopVotedCandidate.q(3); // return 0, At time 3, the votes are [0], and 0 is leading.\ntopVotedCandidate.q(12); // return 1, At time 12, the votes are [0,1,1], and 1 is leading.\ntopVotedCandidate.q(25); // return 1, At time 25, the votes are [0,1,1,0,0,1], and 1 is leading (as ties go to the most recent vote.)\ntopVotedCandidate.q(15); // return 0\ntopVotedCandidate.q(24); // return 0\ntopVotedCandidate.q(8); // return 1"}], "constraints": "Constraints:\n1 <= persons.length <= 5000\ntimes.length == persons.length\n0 <= persons[i] < persons.length\n0 <= times[i] <= 10^9\ntimes is sorted in a strictly increasing order.\ntimes[0] <= t <= 10^9\nAt most 10^4 calls will be made to q.", "notes": ""}, "910": {"label": "Medium", "title": "Smallest Range II", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3223, "total_accepted": 31200.0, "total_submissions": 96800.0, "testcase_example": "'[1]\\n0'", "body": "You are given an integer array nums and an integer k.\nFor each index i where 0 <= i < nums.length, change nums[i] to be either nums[i] + k or nums[i] - k.\nThe score of nums is the difference between the maximum and minimum elements in nums.\nReturn the minimum score of nums after changing the values at each index.", "examples": [{"full_text": "Example 1:\nInput: nums = [1], k = 0\nOutput: 0\nExplanation: The score is max(nums) - min(nums) = 1 - 1 = 0.", "input": "Input: nums = [1], k = 0", "output": "Output: 0", "explanation": "Explanation: The score is max(nums) - min(nums) = 1 - 1 = 0."}, {"full_text": "Example 2:\nInput: nums = [0,10], k = 2\nOutput: 6\nExplanation: Change nums to be [2, 8]. The score is max(nums) - min(nums) = 8 - 2 = 6.", "input": "Input: nums = [0,10], k = 2", "output": "Output: 6", "explanation": "Explanation: Change nums to be [2, 8]. The score is max(nums) - min(nums) = 8 - 2 = 6."}, {"full_text": "Example 3:\nInput: nums = [1,3,6], k = 3\nOutput: 3\nExplanation: Change nums to be [4, 6, 3]. The score is max(nums) - min(nums) = 6 - 3 = 3.", "input": "Input: nums = [1,3,6], k = 3", "output": "Output: 3", "explanation": "Explanation: Change nums to be [4, 6, 3]. The score is max(nums) - min(nums) = 6 - 3 = 3."}], "constraints": "Constraints:\n1 <= nums.length <= 10^4\n0 <= nums[i] <= 10^4\n0 <= k <= 10^4", "notes": ""}, "909": {"label": "Medium", "title": "Snakes and Ladders", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4023, "total_accepted": 68600.0, "total_submissions": 170500.0, "testcase_example": "'[[-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1],[-1,35,-1,-1,13,-1],[-1,-1,-1,-1,-1,-1],[-1,15,-1,-1,-1,-1]]'", "body": "You are given an n x n integer matrix board where the cells are labeled from 1 to n^2 in a Boustrophedon style starting from the bottom left of the board (i.e. board[n - 1][0]) and alternating direction each row.\nYou start on square 1 of the board. In each move, starting from square curr, do the following:\nChoose a destination square next with a label in the range [curr + 1, min(curr + 6, n^2)].\n\nThis choice simulates the result of a standard 6-sided die roll: i.e., there are always at most 6 destinations, regardless of the size of the board.\n\n\nIf next has a snake or ladder, you must move to the destination of that snake or ladder. Otherwise, you move to next.\nThe game ends when you reach the square n^2.\nA board square on row r and column c has a snake or ladder if board[r][c] != -1. The destination of that snake or ladder is board[r][c]. Squares 1 and n^2 do not have a snake or ladder.\nNote that you only take a snake or ladder at most once per move. If the destination to a snake or ladder is the start of another snake or ladder, you do not follow the subsequent\nsnake or ladder.\nFor example, suppose the board is [[-1,4],[-1,3]], and on the first move, your destination square is 2. You follow the ladder to square 3, but do not follow the subsequent ladder to 4.\nReturn the least number of moves required to reach the square n^2. If it is not possible to reach the square, return -1.", "examples": [{"full_text": "Example 1:\nInput: board = [[-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1],[-1,35,-1,-1,13,-1],[-1,-1,-1,-1,-1,-1],[-1,15,-1,-1,-1,-1]]\nOutput: 4\nExplanation:\nIn the beginning, you start at square 1 (at row 5, column 0).\nYou decide to move to square 2 and must take the ladder to square 15.\nYou then decide to move to square 17 and must take the snake to square 13.\nYou then decide to move to square 14 and must take the ladder to square 35.\nYou then decide to move to square 36, ending the game.\nThis is the lowest possible number of moves to reach the last square, so return 4.", "input": "Input: board = [[-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1],[-1,-1,-1,-1,-1,-1],[-1,35,-1,-1,13,-1],[-1,-1,-1,-1,-1,-1],[-1,15,-1,-1,-1,-1]]", "output": "Output: 4", "explanation": "Explanation:\nIn the beginning, you start at square 1 (at row 5, column 0).\nYou decide to move to square 2 and must take the ladder to square 15.\nYou then decide to move to square 17 and must take the snake to square 13.\nYou then decide to move to square 14 and must take the ladder to square 35.\nYou then decide to move to square 36, ending the game.\nThis is the lowest possible number of moves to reach the last square, so return 4."}, {"full_text": "Example 2:\nInput: board = [[-1,-1],[-1,3]]\nOutput: 1", "input": "Input: board = [[-1,-1],[-1,3]]", "output": "Output: 1", "explanation": ""}], "constraints": "Constraints:\nn == board.length == board[i].length\n2 <= n <= 20\ngrid[i][j] is either -1 or in the range [1, n^2].\nThe squares labeled 1 and n^2 do not have any ladders or snakes.", "notes": ""}, "907": {"label": "Medium", "title": "Sum of Subarray Minimums", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.33649999999999997, "total_accepted": 65300.0, "total_submissions": 194100.0, "testcase_example": "'[3,1,2,4]'", "body": "Given an array of integers arr, find the sum of min(b), where b ranges over every (contiguous) subarray of arr. Since the answer may be large, return the answer modulo 10^9 + 7.", "examples": [{"full_text": "Example 1:\nInput: arr = [3,1,2,4]\nOutput: 17\nExplanation:\nSubarrays are [3], [1], [2], [4], [3,1], [1,2], [2,4], [3,1,2], [1,2,4], [3,1,2,4].\nMinimums are 3, 1, 2, 4, 1, 1, 2, 1, 1, 1.\nSum is 17.", "input": "Input: arr = [3,1,2,4]", "output": "Output: 17", "explanation": "Explanation:\nSubarrays are [3], [1], [2], [4], [3,1], [1,2], [2,4], [3,1,2], [1,2,4], [3,1,2,4].\nMinimums are 3, 1, 2, 4, 1, 1, 2, 1, 1, 1.\nSum is 17."}, {"full_text": "Example 2:\nInput: arr = [11,81,94,43,3]\nOutput: 444", "input": "Input: arr = [11,81,94,43,3]", "output": "Output: 444", "explanation": ""}], "constraints": "Constraints:\n1 <= arr.length <= 3 * 10^4\n1 <= arr[i] <= 3 * 10^4", "notes": ""}, "904": {"label": "Medium", "title": "Fruit Into Baskets", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.42979999999999996, "total_accepted": 183900.0, "total_submissions": 427800.0, "testcase_example": "'[1,2,1]'", "body": "You are visiting a farm that has a single row of fruit trees arranged from left to right. The trees are represented by an integer array fruits where fruits[i] is the type of fruit the i^th tree produces.\nYou want to collect as much fruit as possible. However, the owner has some strict rules that you must follow:\nYou only have two baskets, and each basket can only hold a single type of fruit. There is no limit on the amount of fruit each basket can hold.\nStarting from any tree of your choice, you must pick exactly one fruit from every tree (including the start tree) while moving to the right. The picked fruits must fit in one of your baskets.\nOnce you reach a tree with fruit that cannot fit in your baskets, you must stop.\nGiven the integer array fruits, return the maximum number of fruits you can pick.", "examples": [{"full_text": "Example 1:\nInput: fruits = [1,2,1]\nOutput: 3\nExplanation: We can pick from all 3 trees.", "input": "Input: fruits = [1,2,1]", "output": "Output: 3", "explanation": "Explanation: We can pick from all 3 trees."}, {"full_text": "Example 2:\nInput: fruits = [0,1,2,2]\nOutput: 3\nExplanation: We can pick from trees [1,2,2].\nIf we had started at the first tree, we would only pick from trees [0,1].", "input": "Input: fruits = [0,1,2,2]", "output": "Output: 3", "explanation": "Explanation: We can pick from trees [1,2,2].\nIf we had started at the first tree, we would only pick from trees [0,1]."}, {"full_text": "Example 3:\nInput: fruits = [1,2,3,2,2]\nOutput: 4\nExplanation: We can pick from trees [2,3,2,2].\nIf we had started at the first tree, we would only pick from trees [1,2].", "input": "Input: fruits = [1,2,3,2,2]", "output": "Output: 4", "explanation": "Explanation: We can pick from trees [2,3,2,2].\nIf we had started at the first tree, we would only pick from trees [1,2]."}], "constraints": "Constraints:\n1 <= fruits.length <= 10^5\n0 <= fruits[i] < fruits.length", "notes": ""}, "901": {"label": "Medium", "title": "Online Stock Span", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6286999999999999, "total_accepted": 116300.0, "total_submissions": 184900.0, "testcase_example": "'[\"StockSpanner\",\"next\",\"next\",\"next\",\"next\",\"next\",\"next\",\"next\"]\\n' +\n  '[[],[100],[80],[60],[70],[60],[75],[85]]'", "body": "Design an algorithm that collects daily price quotes for some stock and returns the span of that stock's price for the current day.\nThe span of the stock's price today is defined as the maximum number of consecutive days (starting from today and going backward) for which the stock price was less than or equal to today's price.\nFor example, if the price of a stock over the next 7 days were [100,80,60,70,60,75,85], then the stock spans would be [1,1,1,2,1,4,6].\nImplement the StockSpanner class:\nStockSpanner() Initializes the object of the class.\nint next(int price) Returns the span of the stock's price given that today's price is price.", "examples": [{"full_text": "Example 1:\nInput\n[\"StockSpanner\", \"next\", \"next\", \"next\", \"next\", \"next\", \"next\", \"next\"]\n[[], [100], [80], [60], [70], [60], [75], [85]]\nOutput\n[null, 1, 1, 1, 2, 1, 4, 6]\nExplanation\nStockSpanner stockSpanner = new StockSpanner();\nstockSpanner.next(100); // return 1\nstockSpanner.next(80); // return 1\nstockSpanner.next(60); // return 1\nstockSpanner.next(70); // return 2\nstockSpanner.next(60); // return 1\nstockSpanner.next(75); // return 4, because the last 4 prices (including today's price of 75) were less than or equal to today's price.\nstockSpanner.next(85); // return 6", "input": "Input\n[\"StockSpanner\", \"next\", \"next\", \"next\", \"next\", \"next\", \"next\", \"next\"]\n[[], [100], [80], [60], [70], [60], [75], [85]]", "output": "Output\n[null, 1, 1, 1, 2, 1, 4, 6]", "explanation": "Explanation\nStockSpanner stockSpanner = new StockSpanner();\nstockSpanner.next(100); // return 1\nstockSpanner.next(80); // return 1\nstockSpanner.next(60); // return 1\nstockSpanner.next(70); // return 2\nstockSpanner.next(60); // return 1\nstockSpanner.next(75); // return 4, because the last 4 prices (including today's price of 75) were less than or equal to today's price.\nstockSpanner.next(85); // return 6"}], "constraints": "Constraints:\n1 <= price <= 10^5\nAt most 10^4 calls will be made to next.", "notes": ""}, "900": {"label": "Medium", "title": "RLE Iterator", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5842, "total_accepted": 48800.0, "total_submissions": 83500.0, "testcase_example": "'[\"RLEIterator\",\"next\",\"next\",\"next\",\"next\"]\\n' +\n  '[[[3,8,0,9,2,5]],[2],[1],[1],[2]]'", "body": "We can use run-length encoding (i.e., RLE) to encode a sequence of integers. In a run-length encoded array of even length encoding (0-indexed), for all even i, encoding[i] tells us the number of times that the non-negative integer value encoding[i + 1] is repeated in the sequence.\nFor example, the sequence arr = [8,8,8,5,5] can be encoded to be encoding = [3,8,2,5]. encoding = [3,8,0,9,2,5] and encoding = [2,8,1,8,2,5] are also valid RLE of arr.\nGiven a run-length encoded array, design an iterator that iterates through it.\nImplement the RLEIterator class:\nRLEIterator(int[] encoded) Initializes the object with the encoded array encoded.\nint next(int n) Exhausts the next n elements and returns the last element exhausted in this way. If there is no element left to exhaust, return -1 instead.", "examples": [{"full_text": "Example 1:\nInput\n[\"RLEIterator\", \"next\", \"next\", \"next\", \"next\"]\n[[[3, 8, 0, 9, 2, 5]], [2], [1], [1], [2]]\nOutput\n[null, 8, 8, 5, -1]\nExplanation\nRLEIterator rLEIterator = new RLEIterator([3, 8, 0, 9, 2, 5]); // This maps to the sequence [8,8,8,5,5].\nrLEIterator.next(2); // exhausts 2 terms of the sequence, returning 8. The remaining sequence is now [8, 5, 5].\nrLEIterator.next(1); // exhausts 1 term of the sequence, returning 8. The remaining sequence is now [5, 5].\nrLEIterator.next(1); // exhausts 1 term of the sequence, returning 5. The remaining sequence is now [5].\nrLEIterator.next(2); // exhausts 2 terms, returning -1. This is because the first term exhausted was 5,\nbut the second term did not exist. Since the last term exhausted does not exist, we return -1.", "input": "Input\n[\"RLEIterator\", \"next\", \"next\", \"next\", \"next\"]\n[[[3, 8, 0, 9, 2, 5]], [2], [1], [1], [2]]", "output": "Output\n[null, 8, 8, 5, -1]", "explanation": "Explanation\nRLEIterator rLEIterator = new RLEIterator([3, 8, 0, 9, 2, 5]); // This maps to the sequence [8,8,8,5,5].\nrLEIterator.next(2); // exhausts 2 terms of the sequence, returning 8. The remaining sequence is now [8, 5, 5].\nrLEIterator.next(1); // exhausts 1 term of the sequence, returning 8. The remaining sequence is now [5, 5].\nrLEIterator.next(1); // exhausts 1 term of the sequence, returning 5. The remaining sequence is now [5].\nrLEIterator.next(2); // exhausts 2 terms, returning -1. This is because the first term exhausted was 5,\nbut the second term did not exist. Since the last term exhausted does not exist, we return -1."}], "constraints": "Constraints:\n2 <= encoding.length <= 1000\nencoding.length is even.\n0 <= encoding[i] <= 10^9\n1 <= n <= 10^9\nAt most 1000 calls will be made to next.", "notes": ""}, "898": {"label": "Medium", "title": "Bitwise ORs of Subarrays", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.36200000000000004, "total_accepted": 25200.0, "total_submissions": 69600.0, "testcase_example": "'[0]'", "body": "We have an array arr of non-negative integers.\nFor every (contiguous) subarray sub = [arr[i], arr[i + 1], ..., arr[j]] (with i <= j), we take the bitwise OR of all the elements in sub, obtaining a result arr[i] | arr[i + 1] | ... | arr[j].\nReturn the number of possible results. Results that occur more than once are only counted once in the final answer", "examples": [{"full_text": "Example 1:\nInput: arr = [0]\nOutput: 1\nExplanation: There is only one possible result: 0.", "input": "Input: arr = [0]", "output": "Output: 1", "explanation": "Explanation: There is only one possible result: 0."}, {"full_text": "Example 2:\nInput: arr = [1,1,2]\nOutput: 3\nExplanation: The possible subarrays are [1], [1], [2], [1, 1], [1, 2], [1, 1, 2].\nThese yield the results 1, 1, 2, 1, 3, 3.\nThere are 3 unique values, so the answer is 3.", "input": "Input: arr = [1,1,2]", "output": "Output: 3", "explanation": "Explanation: The possible subarrays are [1], [1], [2], [1, 1], [1, 2], [1, 1, 2].\nThese yield the results 1, 1, 2, 1, 3, 3.\nThere are 3 unique values, so the answer is 3."}, {"full_text": "Example 3:\nInput: arr = [1,2,4]\nOutput: 6\nExplanation: The possible results are 1, 2, 3, 4, 6, and 7.", "input": "Input: arr = [1,2,4]", "output": "Output: 6", "explanation": "Explanation: The possible results are 1, 2, 3, 4, 6, and 7."}], "constraints": "Constraints:\n1 <= nums.length <= 5 * 10^4\n0 <= nums[i]\n<= 10^9", "notes": ""}, "894": {"label": "Medium", "title": "All Possible Full Binary Trees", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7923, "total_accepted": 77500.0, "total_submissions": 97800.0, "testcase_example": "'7'", "body": "Given an integer n, return a list of all possible full binary trees with n nodes. Each node of each tree in the answer must have Node.val == 0.\nEach element of the answer is the root node of one possible tree. You may return the final list of trees in any order.\nA full binary tree is a binary tree where each node has exactly 0 or 2 children.", "examples": [{"full_text": "Example 1:\nInput: n = 7\nOutput: [[0,0,0,null,null,0,0,null,null,0,0],[0,0,0,null,null,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,null,null,null,null,0,0],[0,0,0,0,0,null,null,0,0]]", "input": "Input: n = 7", "output": "Output: [[0,0,0,null,null,0,0,null,null,0,0],[0,0,0,null,null,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,null,null,null,null,0,0],[0,0,0,0,0,null,null,0,0]]", "explanation": ""}, {"full_text": "Example 2:\nInput: n = 3\nOutput: [[0,0,0]]", "input": "Input: n = 3", "output": "Output: [[0,0,0]]", "explanation": ""}], "constraints": "Constraints:\n1 <= n <= 20", "notes": ""}, "893": {"label": "Medium", "title": "Groups of Special-Equivalent Strings", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7040000000000001, "total_accepted": 40300.0, "total_submissions": 57300.0, "testcase_example": "'[\"abcd\",\"cdab\",\"cbad\",\"xyzz\",\"zzxy\",\"zzyx\"]'", "body": "You are given an array of strings of the same length words.\nIn one move, you can swap any two even indexed characters or any two odd indexed characters of a string words[i].\nTwo strings words[i] and words[j] are special-equivalent if after any number of moves, words[i] == words[j].\nFor example, words[i] = \"zzxy\" and words[j] = \"xyzz\" are special-equivalent because we may make the moves \"zzxy\" -> \"xzzy\" -> \"xyzz\".\nA group of special-equivalent strings from words is a non-empty subset of words such that:\nEvery pair of strings in the group are special equivalent, and\nThe group is the largest size possible (i.e., there is not a string words[i] not in the group such that words[i] is special-equivalent to every string in the group).\nReturn the number of groups of special-equivalent strings from words.", "examples": [{"full_text": "Example 1:\nInput: words = [\"abcd\",\"cdab\",\"cbad\",\"xyzz\",\"zzxy\",\"zzyx\"]\nOutput: 3\nExplanation:\nOne group is [\"abcd\", \"cdab\", \"cbad\"], since they are all pairwise special equivalent, and none of the other strings is all pairwise special equivalent to these.\nThe other two groups are [\"xyzz\", \"zzxy\"] and [\"zzyx\"].\nNote that in particular, \"zzxy\" is not special equivalent to \"zzyx\".", "input": "Input: words = [\"abcd\",\"cdab\",\"cbad\",\"xyzz\",\"zzxy\",\"zzyx\"]", "output": "Output: 3", "explanation": "Explanation:\nOne group is [\"abcd\", \"cdab\", \"cbad\"], since they are all pairwise special equivalent, and none of the other strings is all pairwise special equivalent to these.\nThe other two groups are [\"xyzz\", \"zzxy\"] and [\"zzyx\"].\nNote that in particular, \"zzxy\" is not special equivalent to \"zzyx\"."}, {"full_text": "Example 2:\nInput: words = [\"abc\",\"acb\",\"bac\",\"bca\",\"cab\",\"cba\"]\nOutput: 3", "input": "Input: words = [\"abc\",\"acb\",\"bac\",\"bca\",\"cab\",\"cba\"]", "output": "Output: 3", "explanation": ""}], "constraints": "Constraints:\n1 <= words.length <= 1000\n1 <= words[i].length <= 20\nwords[i] consist of lowercase English letters.\nAll the strings are of the same length.", "notes": ""}, "890": {"label": "Medium", "title": "Find and Replace Pattern", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7556, "total_accepted": 94900.0, "total_submissions": 125600.0, "testcase_example": "'[\"abc\",\"deq\",\"mee\",\"aqq\",\"dkd\",\"ccc\"]\\n\"abb\"'", "body": "Given a list of strings words and a string pattern, return a list of words[i] that match pattern. You may return the answer in any order.\nA word matches the pattern if there exists a permutation of letters p so that after replacing every letter x in the pattern with p(x), we get the desired word.\nRecall that a permutation of letters is a bijection from letters to letters: every letter maps to another letter, and no two letters map to the same letter.", "examples": [{"full_text": "Example 1:\nInput: words = [\"abc\",\"deq\",\"mee\",\"aqq\",\"dkd\",\"ccc\"], pattern = \"abb\"\nOutput: [\"mee\",\"aqq\"]\nExplanation: \"mee\" matches the pattern because there is a permutation {a -> m, b -> e, ...}.\n\"ccc\" does not match the pattern because {a -> c, b -> c, ...} is not a permutation, since a and b map to the same letter.", "input": "Input: words = [\"abc\",\"deq\",\"mee\",\"aqq\",\"dkd\",\"ccc\"], pattern = \"abb\"", "output": "Output: [\"mee\",\"aqq\"]", "explanation": "Explanation: \"mee\" matches the pattern because there is a permutation {a -> m, b -> e, ...}.\n\"ccc\" does not match the pattern because {a -> c, b -> c, ...} is not a permutation, since a and b map to the same letter."}, {"full_text": "Example 2:\nInput: words = [\"a\",\"b\",\"c\"], pattern = \"a\"\nOutput: [\"a\",\"b\",\"c\"]", "input": "Input: words = [\"a\",\"b\",\"c\"], pattern = \"a\"", "output": "Output: [\"a\",\"b\",\"c\"]", "explanation": ""}], "constraints": "Constraints:\n1 <= pattern.length <= 20\n1 <= words.length <= 50\nwords[i].length == pattern.length\npattern and words[i] are lowercase English letters.", "notes": ""}, "889": {"label": "Medium", "title": "Construct Binary Tree from Preorder and Postorder Traversal", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6956, "total_accepted": 66500.0, "total_submissions": 95600.0, "testcase_example": "'[1,2,4,5,3,6,7]\\n[4,5,2,6,7,3,1]'", "body": "Given two integer arrays, preorder and postorder where preorder is the preorder traversal of a binary tree of distinct values and postorder is the postorder traversal of the same tree, reconstruct and return the binary tree.\nIf there exist multiple answers, you can return any of them.", "examples": [{"full_text": "Example 1:\nInput: preorder = [1,2,4,5,3,6,7], postorder = [4,5,2,6,7,3,1]\nOutput: [1,2,3,4,5,6,7]", "input": "Input: preorder = [1,2,4,5,3,6,7], postorder = [4,5,2,6,7,3,1]", "output": "Output: [1,2,3,4,5,6,7]", "explanation": ""}, {"full_text": "Example 2:\nInput: preorder = [1], postorder = [1]\nOutput: [1]", "input": "Input: preorder = [1], postorder = [1]", "output": "Output: [1]", "explanation": ""}], "constraints": "Constraints:\n1 <= preorder.length <= 30\n1 <= preorder[i] <= preorder.length\nAll the values of preorder are unique.\npostorder.length == preorder.length\n1 <= postorder[i] <= postorder.length\nAll the values of postorder are unique.\nIt is guaranteed that preorder and postorder are the preorder traversal and postorder traversal of the same binary tree.", "notes": ""}, "886": {"label": "Medium", "title": "Possible Bipartition", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4679, "total_accepted": 98600.0, "total_submissions": 210800.0, "testcase_example": "'4\\n[[1,2],[1,3],[2,4]]'", "body": "We want to split a group of n people (labeled from 1 to n) into two groups of any size. Each person may dislike some other people, and they should not go into the same group.\nGiven the integer n and the array dislikes where dislikes[i] = [ai, bi] indicates that the person labeled ai does not like the person labeled bi, return true if it is possible to split everyone into two groups in this way.", "examples": [{"full_text": "Example 1:\nInput: n = 4, dislikes = [[1,2],[1,3],[2,4]]\nOutput: true\nExplanation: group1 [1,4] and group2 [2,3].", "input": "Input: n = 4, dislikes = [[1,2],[1,3],[2,4]]", "output": "Output: true", "explanation": "Explanation: group1 [1,4] and group2 [2,3]."}, {"full_text": "Example 2:\nInput: n = 3, dislikes = [[1,2],[1,3],[2,3]]\nOutput: false", "input": "Input: n = 3, dislikes = [[1,2],[1,3],[2,3]]", "output": "Output: false", "explanation": ""}, {"full_text": "Example 3:\nInput: n = 5, dislikes = [[1,2],[2,3],[3,4],[4,5],[1,5]]\nOutput: false", "input": "Input: n = 5, dislikes = [[1,2],[2,3],[3,4],[4,5],[1,5]]", "output": "Output: false", "explanation": ""}], "constraints": "Constraints:\n1 <= n <= 2000\n0 <= dislikes.length <= 10^4\ndislikes[i].length == 2\n1 <= dislikes[i][j] <= n\nai < bi\nAll the pairs of dislikes are unique.", "notes": ""}, "885": {"label": "Medium", "title": "Spiral Matrix III", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7215, "total_accepted": 32400.0, "total_submissions": 44900.0, "testcase_example": "'1\\n4\\n0\\n0'", "body": "You start at the cell (rStart, cStart) of an rows x cols grid facing east. The northwest corner is at the first row and column in the grid, and the southeast corner is at the last row and column.\nYou will walk in a clockwise spiral shape to visit every position in this grid. Whenever you move outside the grid's boundary, we continue our walk outside the grid (but may return to the grid boundary later.). Eventually, we reach all rows * cols spaces of the grid.\nReturn an array of coordinates representing the positions of the grid in the order you visited them.", "examples": [{"full_text": "Example 1:\nInput: rows = 1, cols = 4, rStart = 0, cStart = 0\nOutput: [[0,0],[0,1],[0,2],[0,3]]", "input": "Input: rows = 1, cols = 4, rStart = 0, cStart = 0", "output": "Output: [[0,0],[0,1],[0,2],[0,3]]", "explanation": ""}, {"full_text": "Example 2:\nInput: rows = 5, cols = 6, rStart = 1, cStart = 4\nOutput: [[1,4],[1,5],[2,5],[2,4],[2,3],[1,3],[0,3],[0,4],[0,5],[3,5],[3,4],[3,3],[3,2],[2,2],[1,2],[0,2],[4,5],[4,4],[4,3],[4,2],[4,1],[3,1],[2,1],[1,1],[0,1],[4,0],[3,0],[2,0],[1,0],[0,0]]", "input": "Input: rows = 5, cols = 6, rStart = 1, cStart = 4", "output": "Output: [[1,4],[1,5],[2,5],[2,4],[2,3],[1,3],[0,3],[0,4],[0,5],[3,5],[3,4],[3,3],[3,2],[2,2],[1,2],[0,2],[4,5],[4,4],[4,3],[4,2],[4,1],[3,1],[2,1],[1,1],[0,1],[4,0],[3,0],[2,0],[1,0],[0,0]]", "explanation": ""}], "constraints": "Constraints:\n1 <= rows, cols <= 100\n0 <= rStart < rows\n0 <= cStart < cols", "notes": ""}, "881": {"label": "Medium", "title": "Boats to Save People", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4984, "total_accepted": 92200.0, "total_submissions": 184900.0, "testcase_example": "'[1,2]\\n3'", "body": "You are given an array people where people[i] is the weight of the i^th person, and an infinite number of boats where each boat can carry a maximum weight of limit. Each boat carries at most two people at the same time, provided the sum of the weight of those people is at most limit.\nReturn the minimum number of boats to carry every given person.", "examples": [{"full_text": "Example 1:\nInput: people = [1,2], limit = 3\nOutput: 1\nExplanation: 1 boat (1, 2)", "input": "Input: people = [1,2], limit = 3", "output": "Output: 1", "explanation": "Explanation: 1 boat (1, 2)"}, {"full_text": "Example 2:\nInput: people = [3,2,2,1], limit = 3\nOutput: 3\nExplanation: 3 boats (1, 2), (2) and (3)", "input": "Input: people = [3,2,2,1], limit = 3", "output": "Output: 3", "explanation": "Explanation: 3 boats (1, 2), (2) and (3)"}, {"full_text": "Example 3:\nInput: people = [3,5,3,4], limit = 5\nOutput: 4\nExplanation: 4 boats (3), (3), (4), (5)", "input": "Input: people = [3,5,3,4], limit = 5", "output": "Output: 4", "explanation": "Explanation: 4 boats (3), (3), (4), (5)"}], "constraints": "Constraints:\n1 <= people.length <= 5 * 10^4\n1 <= people[i] <= limit <= 3 * 10^4", "notes": ""}, "880": {"label": "Medium", "title": "Decoded String at Index", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.2828, "total_accepted": 32600.0, "total_submissions": 115200.0, "testcase_example": "'\"leet2code3\"\\n10'", "body": "You are given an encoded string s. To decode the string to a tape, the encoded string is read one character at a time and the following steps are taken:\nIf the character read is a letter, that letter is written onto the tape.\nIf the character read is a digit d, the entire current tape is repeatedly written d - 1 more times in total.\nGiven an integer k, return the k^th letter (1-indexed) in the decoded string.", "examples": [{"full_text": "Example 1:\nInput: s = \"leet2code3\", k = 10\nOutput: \"o\"\nExplanation: The decoded string is \"leetleetcodeleetleetcodeleetleetcode\".\nThe 10^th letter in the string is \"o\".", "input": "Input: s = \"leet2code3\", k = 10", "output": "Output: \"o\"", "explanation": "Explanation: The decoded string is \"leetleetcodeleetleetcodeleetleetcode\".\nThe 10^th letter in the string is \"o\"."}, {"full_text": "Example 2:\nInput: s = \"ha22\", k = 5\nOutput: \"h\"\nExplanation: The decoded string is \"hahahaha\".\nThe 5^th letter is \"h\".", "input": "Input: s = \"ha22\", k = 5", "output": "Output: \"h\"", "explanation": "Explanation: The decoded string is \"hahahaha\".\nThe 5^th letter is \"h\"."}, {"full_text": "Example 3:\nInput: s = \"a2345678999999999999999\", k = 1\nOutput: \"a\"\nExplanation: The decoded string is \"a\" repeated 8301530446056247680 times.\nThe 1^st letter is \"a\".", "input": "Input: s = \"a2345678999999999999999\", k = 1", "output": "Output: \"a\"", "explanation": "Explanation: The decoded string is \"a\" repeated 8301530446056247680 times.\nThe 1^st letter is \"a\"."}], "constraints": "Constraints:\n2 <= s.length <= 100\ns consists of lowercase English letters and digits 2 through 9.\ns starts with a letter.\n1 <= k <= 10^9\nIt is guaranteed that k is less than or equal to the length of the decoded string.\nThe decoded string is guaranteed to have less than 2^63 letters.", "notes": ""}, "877": {"label": "Medium", "title": "Stone Game", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6898000000000001, "total_accepted": 148300.0, "total_submissions": 215000.0, "testcase_example": "'[5,3,4,5]'", "body": "Alice and Bob play a game with piles of stones. There are an even number of piles arranged in a row, and each pile has a positive integer number of stones piles[i].\nThe objective of the game is to end with the most stones. The total number of stones across all the piles is odd, so there are no ties.\nAlice and Bob take turns, with Alice starting first. Each turn, a player takes the entire pile of stones either from the beginning or from the end of the row. This continues until there are no more piles left, at which point the person with the most stones wins.\nAssuming Alice and Bob play optimally, return true if Alice wins the game, or false if Bob wins.", "examples": [{"full_text": "Example 1:\nInput: piles = [5,3,4,5]\nOutput: true\nExplanation:\nAlice starts first, and can only take the first 5 or the last 5.\nSay she takes the first 5, so that the row becomes [3, 4, 5].\nIf Bob takes 3, then the board is [4, 5], and Alice takes 5 to win with 10 points.\nIf Bob takes the last 5, then the board is [3, 4], and Alice takes 4 to win with 9 points.\nThis demonstrated that taking the first 5 was a winning move for Alice, so we return true.", "input": "Input: piles = [5,3,4,5]", "output": "Output: true", "explanation": "Explanation:\nAlice starts first, and can only take the first 5 or the last 5.\nSay she takes the first 5, so that the row becomes [3, 4, 5].\nIf Bob takes 3, then the board is [4, 5], and Alice takes 5 to win with 10 points.\nIf Bob takes the last 5, then the board is [3, 4], and Alice takes 4 to win with 9 points.\nThis demonstrated that taking the first 5 was a winning move for Alice, so we return true."}, {"full_text": "Example 2:\nInput: piles = [3,7,2,3]\nOutput: true", "input": "Input: piles = [3,7,2,3]", "output": "Output: true", "explanation": ""}], "constraints": "Constraints:\n2 <= piles.length <= 500\npiles.length is even.\n1 <= piles[i] <= 500\nsum(piles[i]) is odd.", "notes": ""}, "875": {"label": "Medium", "title": "Koko Eating Bananas", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5457, "total_accepted": 155700.0, "total_submissions": 285400.0, "testcase_example": "'[3,6,7,11]\\n8'", "body": "Koko loves to eat bananas. There are n piles of bananas, the i^th pile has piles[i] bananas. The guards have gone and will come back in h hours.\nKoko can decide her bananas-per-hour eating speed of k. Each hour, she chooses some pile of bananas and eats k bananas from that pile. If the pile has less than k bananas, she eats all of them instead and will not eat any more bananas during this hour.\nKoko likes to eat slowly but still wants to finish eating all the bananas before the guards return.\nReturn the minimum integer k such that she can eat all the bananas within h hours.", "examples": [{"full_text": "Example 1:\nInput: piles = [3,6,7,11], h = 8\nOutput: 4", "input": "Input: piles = [3,6,7,11], h = 8", "output": "Output: 4", "explanation": ""}, {"full_text": "Example 2:\nInput: piles = [30,11,23,4,20], h = 5\nOutput: 30", "input": "Input: piles = [30,11,23,4,20], h = 5", "output": "Output: 30", "explanation": ""}, {"full_text": "Example 3:\nInput: piles = [30,11,23,4,20], h = 6\nOutput: 23", "input": "Input: piles = [30,11,23,4,20], h = 6", "output": "Output: 23", "explanation": ""}], "constraints": "Constraints:\n1 <= piles.length <= 10^4\npiles.length <= h <= 10^9\n1 <= piles[i] <= 10^9", "notes": ""}, "874": {"label": "Medium", "title": "Walking Robot Simulation", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3757, "total_accepted": 30700.0, "total_submissions": 81800.0, "testcase_example": "'[4,-1,3]\\n[]'", "body": "A robot on an infinite XY-plane starts at point (0, 0) facing north. The robot can receive a sequence of these three possible types of commands:\n-2: Turn left 90 degrees.\n-1: Turn right 90 degrees.\n1 <= k <= 9: Move forward k units, one unit at a time.\nSome of the grid squares are obstacles. The i^th obstacle is at grid point obstacles[i] = (xi, yi). If the robot runs into an obstacle, then it will instead stay in its current location and move on to the next command.\nReturn the maximum Euclidean distance that the robot ever gets from the origin squared (i.e. if the distance is 5, return 25).\nNote:\nNorth means +Y direction.\nEast means +X direction.\nSouth means -Y direction.\nWest means -X direction.", "examples": [{"full_text": "Example 1:\nInput: commands = [4,-1,3], obstacles = []\nOutput: 25\nExplanation: The robot starts at (0, 0):\n1. Move north 4 units to (0, 4).\n2. Turn right.\n3. Move east 3 units to (3, 4).\nThe furthest point the robot ever gets from the origin is (3, 4), which squared is 3^2 + 4^2 = 25 units away.", "input": "Input: commands = [4,-1,3], obstacles = []", "output": "Output: 25", "explanation": "Explanation: The robot starts at (0, 0):\n1. Move north 4 units to (0, 4).\n2. Turn right.\n3. Move east 3 units to (3, 4).\nThe furthest point the robot ever gets from the origin is (3, 4), which squared is 3^2 + 4^2 = 25 units away."}, {"full_text": "Example 2:\nInput: commands = [4,-1,4,-2,4], obstacles = [[2,4]]\nOutput: 65\nExplanation: The robot starts at (0, 0):\n1. Move north 4 units to (0, 4).\n2. Turn right.\n3. Move east 1 unit and get blocked by the obstacle at (2, 4), robot is at (1, 4).\n4. Turn left.\n5. Move north 4 units to (1, 8).\nThe furthest point the robot ever gets from the origin is (1, 8), which squared is 1^2 + 8^2 = 65 units away.", "input": "Input: commands = [4,-1,4,-2,4], obstacles = [[2,4]]", "output": "Output: 65", "explanation": "Explanation: The robot starts at (0, 0):\n1. Move north 4 units to (0, 4).\n2. Turn right.\n3. Move east 1 unit and get blocked by the obstacle at (2, 4), robot is at (1, 4).\n4. Turn left.\n5. Move north 4 units to (1, 8).\nThe furthest point the robot ever gets from the origin is (1, 8), which squared is 1^2 + 8^2 = 65 units away."}, {"full_text": "Example 3:\nInput: commands = [6,-1,-1,6], obstacles = []\nOutput: 36\nExplanation: The robot starts at (0, 0):\n1. Move north 6 units to (0, 6).\n2. Turn right.\n3. Turn right.\n4. Move south 6 units to (0, 0).\nThe furthest point the robot ever gets from the origin is (0, 6), which squared is 6^2 = 36 units away.", "input": "Input: commands = [6,-1,-1,6], obstacles = []", "output": "Output: 36", "explanation": "Explanation: The robot starts at (0, 0):\n1. Move north 6 units to (0, 6).\n2. Turn right.\n3. Turn right.\n4. Move south 6 units to (0, 0).\nThe furthest point the robot ever gets from the origin is (0, 6), which squared is 6^2 = 36 units away."}], "constraints": "Constraints:\n1 <= commands.length <= 10^4\ncommands[i] is either -2, -1, or an integer in the range [1, 9].\n0 <= obstacles.length <= 10^4\n-3 * 10^4 <= xi, yi <= 3 * 10^4\nThe answer is guaranteed to be less than 2^31.", "notes": ""}, "873": {"label": "Medium", "title": "Length of Longest Fibonacci Subsequence", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4853, "total_accepted": 46000.0, "total_submissions": 94700.0, "testcase_example": "'[1,2,3,4,5,6,7,8]'", "body": "A sequence x1, x2, ..., xn is Fibonacci-like if:\nn >= 3\nxi + xi+1 == xi+2 for all i + 2 <= n\nGiven a strictly increasing array arr of positive integers forming a sequence, return the length of the longest Fibonacci-like subsequence of arr. If one does not exist, return 0.\nA subsequence is derived from another sequence arr by deleting any number of elements (including none) from arr, without changing the order of the remaining elements. For example, [3, 5, 8] is a subsequence of [3, 4, 5, 6, 7, 8].", "examples": [{"full_text": "Example 1:\nInput: arr = [1,2,3,4,5,6,7,8]\nOutput: 5\nExplanation: The longest subsequence that is fibonacci-like: [1,2,3,5,8].", "input": "Input: arr = [1,2,3,4,5,6,7,8]", "output": "Output: 5", "explanation": "Explanation: The longest subsequence that is fibonacci-like: [1,2,3,5,8]."}, {"full_text": "Example 2:\nInput: arr = [1,3,7,11,12,14,18]\nOutput: 3\nExplanation: The longest subsequence that is fibonacci-like: [1,11,12], [3,11,14] or [7,11,18].", "input": "Input: arr = [1,3,7,11,12,14,18]", "output": "Output: 3", "explanation": "Explanation: The longest subsequence that is fibonacci-like: [1,11,12], [3,11,14] or [7,11,18]."}], "constraints": "Constraints:\n3 <= arr.length <= 1000\n1 <= arr[i] < arr[i + 1] <= 10^9", "notes": ""}, "870": {"label": "Medium", "title": "Advantage Shuffle", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5115, "total_accepted": 51400.0, "total_submissions": 100500.0, "testcase_example": "'[2,7,11,15]\\n[1,10,4,11]'", "body": "You are given two integer arrays nums1 and nums2 both of the same length. The advantage of nums1 with respect to nums2 is the number of indices i for which nums1[i] > nums2[i].\nReturn any permutation of nums1 that maximizes its advantage with respect to nums2.", "examples": [{"full_text": "Example 1:\nInput: nums1 = [2,7,11,15], nums2 = [1,10,4,11]\nOutput: [2,11,7,15]", "input": "Input: nums1 = [2,7,11,15], nums2 = [1,10,4,11]", "output": "Output: [2,11,7,15]", "explanation": ""}, {"full_text": "Example 2:\nInput: nums1 = [12,24,8,32], nums2 = [13,25,32,11]\nOutput: [24,32,8,12]", "input": "Input: nums1 = [12,24,8,32], nums2 = [13,25,32,11]", "output": "Output: [24,32,8,12]", "explanation": ""}], "constraints": "Constraints:\n1 <= nums1.length <= 10^5\nnums2.length == nums1.length\n0 <= nums1[i], nums2[i] <= 10^9", "notes": ""}, "869": {"label": "Medium", "title": "Reordered Power of 2", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6133, "total_accepted": 40000.0, "total_submissions": 65300.0, "testcase_example": "'1'", "body": "You are given an integer n. We reorder the digits in any order (including the original order) such that the leading digit is not zero.\nReturn true if and only if we can do this so that the resulting number is a power of two.", "examples": [{"full_text": "Example 1:\nInput: n = 1\nOutput: true", "input": "Input: n = 1", "output": "Output: true", "explanation": ""}, {"full_text": "Example 2:\nInput: n = 10\nOutput: false", "input": "Input: n = 10", "output": "Output: false", "explanation": ""}], "constraints": "Constraints:\n1 <= n <= 10^9", "notes": ""}, "866": {"label": "Medium", "title": "Prime Palindrome", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.2548, "total_accepted": 24500.0, "total_submissions": 96100.0, "testcase_example": "'6'", "body": "Given an integer n, return the smallest prime palindrome greater than or equal to n.\nAn integer is prime if it has exactly two divisors: 1 and itself. Note that 1 is not a prime number.\nFor example, 2, 3, 5, 7, 11, and 13 are all primes.\nAn integer is a palindrome if it reads the same from left to right as it does from right to left.\nFor example, 101 and 12321 are palindromes.\nThe test cases are generated so that the answer always exists and is in the range [2, 2 * 10^8].", "examples": [{"full_text": "Example 1:\nInput: n = 6\nOutput: 7", "input": "Input: n = 6", "output": "Output: 7", "explanation": ""}, {"full_text": "Example 2:\nInput: n = 8\nOutput: 11", "input": "Input: n = 8", "output": "Output: 11", "explanation": ""}, {"full_text": "Example 3:\nInput: n = 13\nOutput: 101", "input": "Input: n = 13", "output": "Output: 101", "explanation": ""}], "constraints": "Constraints:\n1 <= n <= 10^8", "notes": ""}, "865": {"label": "Medium", "title": "Smallest Subtree with all the Deepest Nodes", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6744, "total_accepted": 96900.0, "total_submissions": 143700.0, "testcase_example": "'[3,5,1,6,2,0,8,null,null,7,4]'", "body": "Given the root of a binary tree, the depth of each node is the shortest distance to the root.\nReturn the smallest subtree such that it contains all the deepest nodes in the original tree.\nA node is called the deepest if it has the largest depth possible among any node in the entire tree.\nThe subtree of a node is a tree consisting of that node, plus the set of all descendants of that node.", "examples": [{"full_text": "Example 1:\nInput: root = [3,5,1,6,2,0,8,null,null,7,4]\nOutput: [2,7,4]\nExplanation: We return the node with value 2, colored in yellow in the diagram.\nThe nodes coloured in blue are the deepest nodes of the tree.\nNotice that nodes 5, 3 and 2 contain the deepest nodes in the tree but node 2 is the smallest subtree among them, so we return it.", "input": "Input: root = [3,5,1,6,2,0,8,null,null,7,4]", "output": "Output: [2,7,4]", "explanation": "Explanation: We return the node with value 2, colored in yellow in the diagram.\nThe nodes coloured in blue are the deepest nodes of the tree.\nNotice that nodes 5, 3 and 2 contain the deepest nodes in the tree but node 2 is the smallest subtree among them, so we return it."}, {"full_text": "Example 2:\nInput: root = [1]\nOutput: [1]\nExplanation: The root is the deepest node in the tree.", "input": "Input: root = [1]", "output": "Output: [1]", "explanation": "Explanation: The root is the deepest node in the tree."}, {"full_text": "Example 3:\nInput: root = [0,1,3,null,2]\nOutput: [2]\nExplanation: The deepest node in the tree is 2, the valid subtrees are the subtrees of nodes 2, 1 and 0 but the subtree of node 2 is the smallest.", "input": "Input: root = [0,1,3,null,2]", "output": "Output: [2]", "explanation": "Explanation: The deepest node in the tree is 2, the valid subtrees are the subtrees of nodes 2, 1 and 0 but the subtree of node 2 is the smallest."}], "constraints": "Constraints:\nThe number of nodes in the tree will be in the range [1, 500].\n0 <= Node.val <= 500\nThe values of the nodes in the tree are unique.", "notes": "Note: This question is the same as 1123: https://leetcode.com/problems/lowest-common-ancestor-of-deepest-leaves/"}, "863": {"label": "Medium", "title": "All Nodes Distance K in Binary Tree", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6063000000000001, "total_accepted": 210300.0, "total_submissions": 346800.0, "testcase_example": "'[3,5,1,6,2,0,8,null,null,7,4]\\n5\\n2'", "body": "Given the root of a binary tree, the value of a target node target, and an integer k, return an array of the values of all nodes that have a distance k from the target node.\nYou can return the answer in any order.", "examples": [{"full_text": "Example 1:\nInput: root = [3,5,1,6,2,0,8,null,null,7,4], target = 5, k = 2\nOutput: [7,4,1]\nExplanation: The nodes that are a distance 2 from the target node (with value 5) have values 7, 4, and 1.", "input": "Input: root = [3,5,1,6,2,0,8,null,null,7,4], target = 5, k = 2", "output": "Output: [7,4,1]", "explanation": "Explanation: The nodes that are a distance 2 from the target node (with value 5) have values 7, 4, and 1."}, {"full_text": "Example 2:\nInput: root = [1], target = 1, k = 3\nOutput: []", "input": "Input: root = [1], target = 1, k = 3", "output": "Output: []", "explanation": ""}], "constraints": "Constraints:\nThe number of nodes in the tree is in the range [1, 500].\n0 <= Node.val <= 500\nAll the values Node.val are unique.\ntarget is the value of one of the nodes in the tree.\n0 <= k <= 1000", "notes": ""}, "861": {"label": "Medium", "title": "Score After Flipping Matrix", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7465, "total_accepted": 33000.0, "total_submissions": 44200.0, "testcase_example": "'[[0,0,1,1],[1,0,1,0],[1,1,0,0]]'", "body": "You are given an m x n binary matrix grid.\nA move consists of choosing any row or column and toggling each value in that row or column (i.e., changing all 0's to 1's, and all 1's to 0's).\nEvery row of the matrix is interpreted as a binary number, and the score of the matrix is the sum of these numbers.\nReturn the highest possible score after making any number of moves (including zero moves).", "examples": [{"full_text": "Example 1:\nInput: grid = [[0,0,1,1],[1,0,1,0],[1,1,0,0]]\nOutput: 39\nExplanation: 0b1111 + 0b1001 + 0b1111 = 15 + 9 + 15 = 39", "input": "Input: grid = [[0,0,1,1],[1,0,1,0],[1,1,0,0]]", "output": "Output: 39", "explanation": "Explanation: 0b1111 + 0b1001 + 0b1111 = 15 + 9 + 15 = 39"}, {"full_text": "Example 2:\nInput: grid = [[0]]\nOutput: 1", "input": "Input: grid = [[0]]", "output": "Output: 1", "explanation": ""}], "constraints": "Constraints:\nm == grid.length\nn == grid[i].length\n1 <= m, n <= 20\ngrid[i][j] is either 0 or 1.", "notes": ""}, "858": {"label": "Medium", "title": "Mirror Reflection", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5954, "total_accepted": 26000.0, "total_submissions": 43600.0, "testcase_example": "'2\\n1'", "body": "There is a special square room with mirrors on each of the four walls. Except for the southwest corner, there are receptors on each of the remaining corners, numbered 0, 1, and 2.\nThe square room has walls of length p\nand a laser ray from the southwest corner first meets the east wall at a distance q from the 0^th receptor.\nGiven the two integers p and q, return the number of the receptor that the ray meets first.\nThe test cases are guaranteed so that the ray will meet a receptor eventually.", "examples": [{"full_text": "Example 1:\nInput: p = 2, q = 1\nOutput: 2\nExplanation: The ray meets receptor 2 the first time it gets reflected back to the left wall.", "input": "Input: p = 2, q = 1", "output": "Output: 2", "explanation": "Explanation: The ray meets receptor 2 the first time it gets reflected back to the left wall."}, {"full_text": "Example 2:\nInput: p = 3, q = 1\nOutput: 1", "input": "Input: p = 3, q = 1", "output": "Output: 1", "explanation": ""}], "constraints": "Constraints:\n1 <= q <= p <= 1000", "notes": ""}, "856": {"label": "Medium", "title": "Score of Parentheses", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6546, "total_accepted": 93500.0, "total_submissions": 142900.0, "testcase_example": "'\"()\"'", "body": "Given a balanced parentheses string s, return the score of the string.\nThe score of a balanced parentheses string is based on the following rule:\n\"()\" has score 1.\nAB has score A + B, where A and B are balanced parentheses strings.\n(A) has score 2 * A, where A is a balanced parentheses string.", "examples": [{"full_text": "Example 1:\nInput: s = \"()\"\nOutput: 1", "input": "Input: s = \"()\"", "output": "Output: 1", "explanation": ""}, {"full_text": "Example 2:\nInput: s = \"(())\"\nOutput: 2", "input": "Input: s = \"(())\"", "output": "Output: 2", "explanation": ""}, {"full_text": "Example 3:\nInput: s = \"()()\"\nOutput: 2", "input": "Input: s = \"()()\"", "output": "Output: 2", "explanation": ""}], "constraints": "Constraints:\n2 <= s.length <= 50\ns consists of only '(' and ')'.\ns is a balanced parentheses string.", "notes": ""}, "855": {"label": "Medium", "title": "Exam Room", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4351, "total_accepted": 45100.0, "total_submissions": 103600.0, "testcase_example": "'[\"ExamRoom\",\"seat\",\"seat\",\"seat\",\"seat\",\"leave\",\"seat\"]\\n' +\n  '[[10],[],[],[],[],[4],[]]'", "body": "There is an exam room with n seats in a single row labeled from 0 to n - 1.\nWhen a student enters the room, they must sit in the seat that maximizes the distance to the closest person. If there are multiple such seats, they sit in the seat with the lowest number. If no one is in the room, then the student sits at seat number 0.\nDesign a class that simulates the mentioned exam room.\nImplement the ExamRoom class:\nExamRoom(int n) Initializes the object of the exam room with the number of the seats n.\nint seat() Returns the label of the seat at which the next student will set.\nvoid leave(int p) Indicates that the student sitting at seat p will leave the room. It is guaranteed that there will be a student sitting at seat p.", "examples": [{"full_text": "Example 1:\nInput\n[\"ExamRoom\", \"seat\", \"seat\", \"seat\", \"seat\", \"leave\", \"seat\"]\n[[10], [], [], [], [], [4], []]\nOutput\n[null, 0, 9, 4, 2, null, 5]\nExplanation\nExamRoom examRoom = new ExamRoom(10);\nexamRoom.seat(); // return 0, no one is in the room, then the student sits at seat number 0.\nexamRoom.seat(); // return 9, the student sits at the last seat number 9.\nexamRoom.seat(); // return 4, the student sits at the last seat number 4.\nexamRoom.seat(); // return 2, the student sits at the last seat number 2.\nexamRoom.leave(4);\nexamRoom.seat(); // return 5, the student sits at the last seat number 5.", "input": "Input\n[\"ExamRoom\", \"seat\", \"seat\", \"seat\", \"seat\", \"leave\", \"seat\"]\n[[10], [], [], [], [], [4], []]", "output": "Output\n[null, 0, 9, 4, 2, null, 5]", "explanation": "Explanation\nExamRoom examRoom = new ExamRoom(10);\nexamRoom.seat(); // return 0, no one is in the room, then the student sits at seat number 0.\nexamRoom.seat(); // return 9, the student sits at the last seat number 9.\nexamRoom.seat(); // return 4, the student sits at the last seat number 4.\nexamRoom.seat(); // return 2, the student sits at the last seat number 2.\nexamRoom.leave(4);\nexamRoom.seat(); // return 5, the student sits at the last seat number 5."}], "constraints": "Constraints:\n1 <= n <= 10^9\nIt is guaranteed that there is a student sitting at seat p.\nAt most 10^4 calls will be made to seat and leave.", "notes": ""}, "853": {"label": "Medium", "title": "Car Fleet", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4769, "total_accepted": 73200.0, "total_submissions": 153600.0, "testcase_example": "'12\\n[10,8,0,5,3]\\n[2,4,1,1,3]'", "body": "There are n cars going to the same destination along a one-lane road. The destination is target miles away.\nYou are given two integer array position and speed, both of length n, where position[i] is the position of the i^th car and speed[i] is the speed of the i^th car (in miles per hour).\nA car can never pass another car ahead of it, but it can catch up to it\nand drive bumper to bumper at the same speed. The faster car will slow down to match the slower car's speed. The distance between these two cars is ignored (i.e., they are assumed to have the same position).\nA car fleet is some non-empty set of cars driving at the same position and same speed. Note that a single car is also a car fleet.\nIf a car catches up to a car fleet right at the destination point, it will still be considered as one car fleet.\nReturn the number of car fleets that will arrive at the destination.", "examples": [{"full_text": "Example 1:\nInput: target = 12, position = [10,8,0,5,3], speed = [2,4,1,1,3]\nOutput: 3\nExplanation:\nThe cars starting at 10 (speed 2) and 8 (speed 4) become a fleet, meeting each other at 12.\nThe car starting at 0 does not catch up to any other car, so it is a fleet by itself.\nThe cars starting at 5 (speed 1) and 3 (speed 3) become a fleet, meeting each other at 6. The fleet moves at speed 1 until it reaches target.\nNote that no other cars meet these fleets before the destination, so the answer is 3.", "input": "Input: target = 12, position = [10,8,0,5,3], speed = [2,4,1,1,3]", "output": "Output: 3", "explanation": "Explanation:\nThe cars starting at 10 (speed 2) and 8 (speed 4) become a fleet, meeting each other at 12.\nThe car starting at 0 does not catch up to any other car, so it is a fleet by itself.\nThe cars starting at 5 (speed 1) and 3 (speed 3) become a fleet, meeting each other at 6. The fleet moves at speed 1 until it reaches target.\nNote that no other cars meet these fleets before the destination, so the answer is 3."}, {"full_text": "Example 2:\nInput: target = 10, position = [3], speed = [3]\nOutput: 1\nExplanation: There is only one car, hence there is only one fleet.", "input": "Input: target = 10, position = [3], speed = [3]", "output": "Output: 1", "explanation": "Explanation: There is only one car, hence there is only one fleet."}, {"full_text": "Example 3:\nInput: target = 100, position = [0,2,4], speed = [4,2,1]\nOutput: 1\nExplanation:\nThe cars starting at 0 (speed 4) and 2 (speed 2) become a fleet, meeting each other at 4. The fleet moves at speed 2.\nThen, the fleet (speed 2) and the car starting at 4 (speed 1) become one fleet, meeting each other at 6. The fleet moves at speed 1 until it reaches target.", "input": "Input: target = 100, position = [0,2,4], speed = [4,2,1]", "output": "Output: 1", "explanation": "Explanation:\nThe cars starting at 0 (speed 4) and 2 (speed 2) become a fleet, meeting each other at 4. The fleet moves at speed 2.\nThen, the fleet (speed 2) and the car starting at 4 (speed 1) become one fleet, meeting each other at 6. The fleet moves at speed 1 until it reaches target."}], "constraints": "Constraints:\nn == position.length == speed.length\n1 <= n <= 10^5\n0 < target <= 10^6\n0 <= position[i] < target\nAll the values of position are unique.\n0 < speed[i] <= 10^6", "notes": ""}, "851": {"label": "Medium", "title": "Loud and Rich", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5604, "total_accepted": 22000.0, "total_submissions": 39200.0, "testcase_example": "'[[1,0],[2,1],[3,1],[3,7],[4,3],[5,3],[6,3]]\\n[3,2,5,4,6,1,7,0]'", "body": "There is a group of n people labeled from 0 to n - 1 where each person has a different amount of money and a different level of quietness.\nYou are given an array richer where richer[i] = [ai, bi] indicates that ai has more money than bi and an integer array quiet where quiet[i] is the quietness of the i^th person. All the given data in richer are logically correct (i.e., the data will not lead you to a situation where x is richer than y and y is richer than x at the same time).\nReturn an integer array answer where answer[x] = y if y is the least quiet person (that is, the person y with the smallest value of quiet[y]) among all people who definitely have equal to or more money than the person x.", "examples": [{"full_text": "Example 1:\nInput: richer = [[1,0],[2,1],[3,1],[3,7],[4,3],[5,3],[6,3]], quiet = [3,2,5,4,6,1,7,0]\nOutput: [5,5,2,5,4,5,6,7]\nExplanation:\nanswer[0] = 5.\nPerson 5 has more money than 3, which has more money than 1, which has more money than 0.\nThe only person who is quieter (has lower quiet[x]) is person 7, but it is not clear if they have more money than person 0.\nanswer[7] = 7.\nAmong all people that definitely have equal to or more money than person 7 (which could be persons 3, 4, 5, 6, or 7), the person who is the quietest (has lower quiet[x]) is person 7.\nThe other answers can be filled out with similar reasoning.", "input": "Input: richer = [[1,0],[2,1],[3,1],[3,7],[4,3],[5,3],[6,3]], quiet = [3,2,5,4,6,1,7,0]", "output": "Output: [5,5,2,5,4,5,6,7]", "explanation": "Explanation:\nanswer[0] = 5.\nPerson 5 has more money than 3, which has more money than 1, which has more money than 0.\nThe only person who is quieter (has lower quiet[x]) is person 7, but it is not clear if they have more money than person 0.\nanswer[7] = 7.\nAmong all people that definitely have equal to or more money than person 7 (which could be persons 3, 4, 5, 6, or 7), the person who is the quietest (has lower quiet[x]) is person 7.\nThe other answers can be filled out with similar reasoning."}, {"full_text": "Example 2:\nInput: richer = [], quiet = [0]\nOutput: [0]", "input": "Input: richer = [], quiet = [0]", "output": "Output: [0]", "explanation": ""}], "constraints": "Constraints:\nn == quiet.length\n1 <= n <= 500\n0 <= quiet[i] < n\nAll the values of quiet are unique.\n0 <= richer.length <= n * (n - 1) / 2\n0 <= ai, bi < n\nai != bi\nAll the pairs of richer are unique.\nThe observations in richer are all logically consistent.", "notes": ""}, "849": {"label": "Medium", "title": "Maximize Distance to Closest Person", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.474, "total_accepted": 165200.0, "total_submissions": 348400.0, "testcase_example": "'[1,0,0,0,1,0,1]'", "body": "You are given an array representing a row of seats where seats[i] = 1 represents a person sitting in the i^th seat, and seats[i] = 0 represents that the i^th seat is empty (0-indexed).\nThere is at least one empty seat, and at least one person sitting.\nAlex wants to sit in the seat such that the distance between him and the closest person to him is maximized.\nReturn that maximum distance to the closest person.", "examples": [{"full_text": "Example 1:\nInput: seats = [1,0,0,0,1,0,1]\nOutput: 2\nExplanation:\nIf Alex sits in the second open seat (i.e. seats[2]), then the closest person has distance 2.\nIf Alex sits in any other open seat, the closest person has distance 1.\nThus, the maximum distance to the closest person is 2.", "input": "Input: seats = [1,0,0,0,1,0,1]", "output": "Output: 2", "explanation": "Explanation:\nIf Alex sits in the second open seat (i.e. seats[2]), then the closest person has distance 2.\nIf Alex sits in any other open seat, the closest person has distance 1.\nThus, the maximum distance to the closest person is 2."}, {"full_text": "Example 2:\nInput: seats = [1,0,0,0]\nOutput: 3\nExplanation:\nIf Alex sits in the last seat (i.e. seats[3]), the closest person is 3 seats away.\nThis is the maximum distance possible, so the answer is 3.", "input": "Input: seats = [1,0,0,0]", "output": "Output: 3", "explanation": "Explanation:\nIf Alex sits in the last seat (i.e. seats[3]), the closest person is 3 seats away.\nThis is the maximum distance possible, so the answer is 3."}, {"full_text": "Example 3:\nInput: seats = [0,1]\nOutput: 1", "input": "Input: seats = [0,1]", "output": "Output: 1", "explanation": ""}], "constraints": "Constraints:\n2 <= seats.length <= 2 * 10^4\nseats[i]\nis 0 or\n1.\nAt least one seat is empty.\nAt least one seat is occupied.", "notes": ""}, "848": {"label": "Medium", "title": "Shifting Letters", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4548, "total_accepted": 69800.0, "total_submissions": 153500.0, "testcase_example": "'\"abc\"\\n[3,5,9]'", "body": "You are given a string s of lowercase English letters and an integer array shifts of the same length.\nCall the shift() of a letter, the next letter in the alphabet, (wrapping around so that 'z' becomes 'a').\nFor example, shift('a') = 'b', shift('t') = 'u', and shift('z') = 'a'.\nNow for each shifts[i] = x, we want to shift the first i + 1 letters of s, x times.\nReturn the final string after all such shifts to s are applied.", "examples": [{"full_text": "Example 1:\nInput: s = \"abc\", shifts = [3,5,9]\nOutput: \"rpl\"\nExplanation: We start with \"abc\".\nAfter shifting the first 1 letters of s by 3, we have \"dbc\".\nAfter shifting the first 2 letters of s by 5, we have \"igc\".\nAfter shifting the first 3 letters of s by 9, we have \"rpl\", the answer.", "input": "Input: s = \"abc\", shifts = [3,5,9]", "output": "Output: \"rpl\"", "explanation": "Explanation: We start with \"abc\".\nAfter shifting the first 1 letters of s by 3, we have \"dbc\".\nAfter shifting the first 2 letters of s by 5, we have \"igc\".\nAfter shifting the first 3 letters of s by 9, we have \"rpl\", the answer."}, {"full_text": "Example 2:\nInput: s = \"aaa\", shifts = [1,2,3]\nOutput: \"gfd\"", "input": "Input: s = \"aaa\", shifts = [1,2,3]", "output": "Output: \"gfd\"", "explanation": ""}], "constraints": "Constraints:\n1 <= s.length <= 10^5\ns consists of lowercase English letters.\nshifts.length == s.length\n0 <= shifts[i] <= 10^9", "notes": ""}, "846": {"label": "Medium", "title": "Hand of Straights", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5614, "total_accepted": 83400.0, "total_submissions": 148500.0, "testcase_example": "'[1,2,3,6,2,3,4,7,8]\\n3'", "body": "Alice has some number of cards and she wants to rearrange the cards into groups so that each group is of size groupSize, and consists of groupSize consecutive cards.\nGiven an integer array hand where hand[i] is the value written on the i^th card and an integer groupSize, return true if she can rearrange the cards, or false otherwise.", "examples": [{"full_text": "Example 1:\nInput: hand = [1,2,3,6,2,3,4,7,8], groupSize = 3\nOutput: true\nExplanation: Alice's hand can be rearranged as [1,2,3],[2,3,4],[6,7,8]", "input": "Input: hand = [1,2,3,6,2,3,4,7,8], groupSize = 3", "output": "Output: true", "explanation": "Explanation: Alice's hand can be rearranged as [1,2,3],[2,3,4],[6,7,8]"}, {"full_text": "Example 2:\nInput: hand = [1,2,3,4,5], groupSize = 4\nOutput: false\nExplanation: Alice's hand can not be rearranged into groups of 4.", "input": "Input: hand = [1,2,3,4,5], groupSize = 4", "output": "Output: false", "explanation": "Explanation: Alice's hand can not be rearranged into groups of 4."}], "constraints": "Constraints:\n1 <= hand.length <= 10^4\n0 <= hand[i] <= 10^9\n1 <= groupSize <= hand.length", "notes": "Note: This question is the same as 1296: https://leetcode.com/problems/divide-array-in-sets-of-k-consecutive-numbers/"}, "845": {"label": "Medium", "title": "Longest Mountain in Array", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.39649999999999996, "total_accepted": 85600.0, "total_submissions": 215900.0, "testcase_example": "'[2,1,4,7,3,2,5]'", "body": "You may recall that an array arr is a mountain array if and only if:\narr.length >= 3\nThere exists some index i (0-indexed) with 0 < i < arr.length - 1 such that:\n\narr[0] < arr[1] < ... < arr[i - 1] < arr[i]\narr[i] > arr[i + 1] > ... > arr[arr.length - 1]\n\n\nGiven an integer array arr, return the length of the longest subarray, which is a mountain. Return 0 if there is no mountain subarray.", "examples": [{"full_text": "Example 1:\nInput: arr = [2,1,4,7,3,2,5]\nOutput: 5\nExplanation: The largest mountain is [1,4,7,3,2] which has length 5.", "input": "Input: arr = [2,1,4,7,3,2,5]", "output": "Output: 5", "explanation": "Explanation: The largest mountain is [1,4,7,3,2] which has length 5."}, {"full_text": "Example 2:\nInput: arr = [2,2,2]\nOutput: 0\nExplanation: There is no mountain.", "input": "Input: arr = [2,2,2]", "output": "Output: 0", "explanation": "Explanation: There is no mountain."}], "constraints": "Constraints:\n1 <= arr.length <= 10^4\n0 <= arr[i] <= 10^4\nFollow up:\nCan you solve it using only one pass?\nCan you solve it in O(1) space?", "notes": ""}, "842": {"label": "Medium", "title": "Split Array into Fibonacci Sequence", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3763, "total_accepted": 29600.0, "total_submissions": 78700.0, "testcase_example": "'\"1101111\"'", "body": "You are given a string of digits num, such as \"123456579\". We can split it into a Fibonacci-like sequence [123, 456, 579].\nFormally, a Fibonacci-like sequence is a list f of non-negative integers such that:\n0 <= f[i] < 2^31, (that is, each integer fits in a 32-bit signed integer type),\nf.length >= 3, and\nf[i] + f[i + 1] == f[i + 2] for all 0 <= i < f.length - 2.\nNote that when splitting the string into pieces, each piece must not have extra leading zeroes, except if the piece is the number 0 itself.\nReturn any Fibonacci-like sequence split from num, or return [] if it cannot be done.", "examples": [{"full_text": "Example 1:\nInput: num = \"1101111\"\nOutput: [11,0,11,11]\nExplanation: The output [110, 1, 111] would also be accepted.", "input": "Input: num = \"1101111\"", "output": "Output: [11,0,11,11]", "explanation": "Explanation: The output [110, 1, 111] would also be accepted."}, {"full_text": "Example 2:\nInput: num = \"112358130\"\nOutput: []\nExplanation: The task is impossible.", "input": "Input: num = \"112358130\"", "output": "Output: []", "explanation": "Explanation: The task is impossible."}, {"full_text": "Example 3:\nInput: num = \"0123\"\nOutput: []\nExplanation: Leading zeroes are not allowed, so \"01\", \"2\", \"3\" is not valid.", "input": "Input: num = \"0123\"", "output": "Output: []", "explanation": "Explanation: Leading zeroes are not allowed, so \"01\", \"2\", \"3\" is not valid."}], "constraints": "Constraints:\n1 <= num.length <= 200\nnum contains only digits.", "notes": ""}, "841": {"label": "Medium", "title": "Keys and Rooms", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6831999999999999, "total_accepted": 175700.0, "total_submissions": 257100.00000000003, "testcase_example": "'[[1],[2],[3],[]]'", "body": "There are n rooms labeled from 0 to n - 1\nand all the rooms are locked except for room 0. Your goal is to visit all the rooms. However, you cannot enter a locked room without having its key.\nWhen you visit a room, you may find a set of distinct keys in it. Each key has a number on it, denoting which room it unlocks, and you can take all of them with you to unlock the other rooms.\nGiven an array rooms where rooms[i] is the set of keys that you can obtain if you visited room i, return true if you can visit all the rooms, or false otherwise.", "examples": [{"full_text": "Example 1:\nInput: rooms = [[1],[2],[3],[]]\nOutput: true\nExplanation:\nWe visit room 0 and pick up key 1.\nWe then visit room 1 and pick up key 2.\nWe then visit room 2 and pick up key 3.\nWe then visit room 3.\nSince we were able to visit every room, we return true.", "input": "Input: rooms = [[1],[2],[3],[]]", "output": "Output: true", "explanation": "Explanation:\nWe visit room 0 and pick up key 1.\nWe then visit room 1 and pick up key 2.\nWe then visit room 2 and pick up key 3.\nWe then visit room 3.\nSince we were able to visit every room, we return true."}, {"full_text": "Example 2:\nInput: rooms = [[1,3],[3,0,1],[2],[0]]\nOutput: false\nExplanation: We can not enter room number 2 since the only key that unlocks it is in that room.", "input": "Input: rooms = [[1,3],[3,0,1],[2],[0]]", "output": "Output: false", "explanation": "Explanation: We can not enter room number 2 since the only key that unlocks it is in that room."}], "constraints": "Constraints:\nn == rooms.length\n2 <= n <= 1000\n0 <= rooms[i].length <= 1000\n1 <= sum(rooms[i].length) <= 3000\n0 <= rooms[i][j] < n\nAll the values of rooms[i] are unique.", "notes": ""}, "840": {"label": "Medium", "title": "Magic Squares In Grid", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.38299999999999995, "total_accepted": 31500.0, "total_submissions": 82200.0, "testcase_example": "'[[4,3,8,4],[9,5,1,9],[2,7,6,2]]'", "body": "A 3 x 3 magic square is a 3 x 3 grid filled with distinct numbers from 1 to 9 such that each row, column, and both diagonals all have the same sum.\nGiven a row x col\ngrid\nof integers, how many 3 x 3 \"magic square\" subgrids are there?\n(Each subgrid is contiguous).", "examples": [{"full_text": "Example 1:\nInput: grid = [[4,3,8,4],[9,5,1,9],[2,7,6,2]]\nOutput: 1\nExplanation:\nThe following subgrid is a 3 x 3 magic square:\nwhile this one is not:\nIn total, there is only one magic square inside the given grid.", "input": "Input: grid = [[4,3,8,4],[9,5,1,9],[2,7,6,2]]", "output": "Output: 1", "explanation": "Explanation:\nThe following subgrid is a 3 x 3 magic square:\nwhile this one is not:\nIn total, there is only one magic square inside the given grid."}, {"full_text": "Example 2:\nInput: grid = [[8]]\nOutput: 0", "input": "Input: grid = [[8]]", "output": "Output: 0", "explanation": ""}], "constraints": "Constraints:\nrow == grid.length\ncol == grid[i].length\n1 <= row, col <= 10\n0 <= grid[i][j] <= 15", "notes": ""}, "838": {"label": "Medium", "title": "Push Dominoes", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5211, "total_accepted": 55500.0, "total_submissions": 106500.0, "testcase_example": "'\"RR.L\"'", "body": "There are n dominoes in a line, and we place each domino vertically upright. In the beginning, we simultaneously push some of the dominoes either to the left or to the right.\nAfter each second, each domino that is falling to the left pushes the adjacent domino on the left. Similarly, the dominoes falling to the right push their adjacent dominoes standing on the right.\nWhen a vertical domino has dominoes falling on it from both sides, it stays still due to the balance of the forces.\nFor the purposes of this question, we will consider that a falling domino expends no additional force to a falling or already fallen domino.\nYou are given a string dominoes representing the initial state where:\ndominoes[i] = 'L', if the i^th domino has been pushed to the left,\ndominoes[i] = 'R', if the i^th domino has been pushed to the right, and\ndominoes[i] = '.', if the i^th domino has not been pushed.\nReturn a string representing the final state.", "examples": [{"full_text": "Example 1:\nInput: dominoes = \"RR.L\"\nOutput: \"RR.L\"\nExplanation: The first domino expends no additional force on the second domino.", "input": "Input: dominoes = \"RR.L\"", "output": "Output: \"RR.L\"", "explanation": "Explanation: The first domino expends no additional force on the second domino."}, {"full_text": "Example 2:\nInput: dominoes = \".L.R...LR..L..\"\nOutput: \"LL.RR.LLRRLL..\"", "input": "Input: dominoes = \".L.R...LR..L..\"", "output": "Output: \"LL.RR.LLRRLL..\"", "explanation": ""}], "constraints": "Constraints:\nn == dominoes.length\n1 <= n <= 10^5\ndominoes[i] is either 'L', 'R', or '.'.", "notes": ""}, "837": {"label": "Medium", "title": "New 21 Game", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.36, "total_accepted": 30000.0, "total_submissions": 83400.0, "testcase_example": "'10\\n1\\n10'", "body": "Alice plays the following game, loosely based on the card game \"21\".\nAlice starts with 0 points and draws numbers while she has less than k points. During each draw, she gains an integer number of points randomly from the range [1, maxPts], where maxPts is an integer. Each draw is independent and the outcomes have equal probabilities.\nAlice stops drawing numbers when she gets k or more points.\nReturn the probability that Alice has n or fewer points.\nAnswers within 10^-5 of the actual answer are considered accepted.", "examples": [{"full_text": "Example 1:\nInput: n = 10, k = 1, maxPts = 10\nOutput: 1.00000\nExplanation: Alice gets a single card, then stops.", "input": "Input: n = 10, k = 1, maxPts = 10", "output": "Output: 1.00000", "explanation": "Explanation: Alice gets a single card, then stops."}, {"full_text": "Example 2:\nInput: n = 6, k = 1, maxPts = 10\nOutput: 0.60000\nExplanation: Alice gets a single card, then stops.\nIn 6 out of 10 possibilities, she is at or below 6 points.", "input": "Input: n = 6, k = 1, maxPts = 10", "output": "Output: 0.60000", "explanation": "Explanation: Alice gets a single card, then stops.\nIn 6 out of 10 possibilities, she is at or below 6 points."}, {"full_text": "Example 3:\nInput: n = 21, k = 17, maxPts = 10\nOutput: 0.73278", "input": "Input: n = 21, k = 17, maxPts = 10", "output": "Output: 0.73278", "explanation": ""}], "constraints": "Constraints:\n0 <= k <= n <= 10^4\n1 <= maxPts <= 10^4", "notes": ""}, "835": {"label": "Medium", "title": "Image Overlap", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6126, "total_accepted": 46700.0, "total_submissions": 76200.0, "testcase_example": "'[[1,1,0],[0,1,0],[0,1,0]]\\n[[0,0,0],[0,1,1],[0,0,1]]'", "body": "You are given two images, img1 and img2, represented as binary, square matrices of size n x n. A binary matrix has only 0s and 1s as values.\nWe translate one image however we choose by sliding all the 1 bits left, right, up, and/or down any number of units. We then place it on top of the other image. We can then calculate the overlap by counting the number of positions that have a 1 in both images.\nNote also that a translation does not include any kind of rotation. Any 1 bits that are translated outside of the matrix borders are erased.\nReturn the largest possible overlap.", "examples": [{"full_text": "Example 1:\nInput: img1 = [[1,1,0],[0,1,0],[0,1,0]], img2 = [[0,0,0],[0,1,1],[0,0,1]]\nOutput: 3\nExplanation: We translate img1 to right by 1 unit and down by 1 unit.\nThe number of positions that have a 1 in both images is 3 (shown in red).", "input": "Input: img1 = [[1,1,0],[0,1,0],[0,1,0]], img2 = [[0,0,0],[0,1,1],[0,0,1]]", "output": "Output: 3", "explanation": "Explanation: We translate img1 to right by 1 unit and down by 1 unit.\nThe number of positions that have a 1 in both images is 3 (shown in red)."}, {"full_text": "Example 2:\nInput: img1 = [[1]], img2 = [[1]]\nOutput: 1", "input": "Input: img1 = [[1]], img2 = [[1]]", "output": "Output: 1", "explanation": ""}, {"full_text": "Example 3:\nInput: img1 = [[0]], img2 = [[0]]\nOutput: 0", "input": "Input: img1 = [[0]], img2 = [[0]]", "output": "Output: 0", "explanation": ""}], "constraints": "Constraints:\nn == img1.length == img1[i].length\nn == img2.length == img2[i].length\n1 <= n <= 30\nimg1[i][j] is either 0 or 1.\nimg2[i][j] is either 0 or 1.", "notes": ""}, "833": {"label": "Medium", "title": "Find And Replace in String", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5407, "total_accepted": 96600.0, "total_submissions": 178600.0, "testcase_example": "'\"abcd\"\\n[0, 2]\\n[\"a\", \"cd\"]\\n[\"eee\", \"ffff\"]'", "body": "You are given a 0-indexed string s that you must perform k replacement operations on. The replacement operations are given as three 0-indexed parallel arrays, indices, sources, and targets, all of length k.\nTo complete the i^th replacement operation:\nCheck if the substring sources[i] occurs at index indices[i] in the original string s.\nIf it does not occur, do nothing.\nOtherwise if it does occur, replace that substring with targets[i].\nFor example, if s = \"abcd\", indices[i] = 0, sources[i] = \"ab\", and targets[i] = \"eee\", then the result of this replacement will be \"eeecd\".\nAll replacement operations must occur simultaneously, meaning the replacement operations should not affect the indexing of each other. The testcases will be generated such that the replacements will not overlap.\nFor example, a testcase with s = \"abc\", indices = [0, 1], and sources = [\"ab\",\"bc\"] will not be generated because the \"ab\" and \"bc\" replacements overlap.\nReturn the resulting string after performing all replacement operations on s.\nA substring is a contiguous sequence of characters in a string.", "examples": [{"full_text": "Example 1:\nInput: s = \"abcd\", indices = [0, 2], sources = [\"a\", \"cd\"], targets = [\"eee\", \"ffff\"]\nOutput: \"eeebffff\"\nExplanation:\n\"a\" occurs at index 0 in s, so we replace it with \"eee\".\n\"cd\" occurs at index 2 in s, so we replace it with \"ffff\".", "input": "Input: s = \"abcd\", indices = [0, 2], sources = [\"a\", \"cd\"], targets = [\"eee\", \"ffff\"]", "output": "Output: \"eeebffff\"", "explanation": "Explanation:\n\"a\" occurs at index 0 in s, so we replace it with \"eee\".\n\"cd\" occurs at index 2 in s, so we replace it with \"ffff\"."}, {"full_text": "Example 2:\nInput: s = \"abcd\", indices = [0, 2], sources = [\"ab\",\"ec\"], targets = [\"eee\",\"ffff\"]\nOutput: \"eeecd\"\nExplanation:\n\"ab\" occurs at index 0 in s, so we replace it with \"eee\".\n\"ec\" does not occur at index 2 in s, so we do nothing.", "input": "Input: s = \"abcd\", indices = [0, 2], sources = [\"ab\",\"ec\"], targets = [\"eee\",\"ffff\"]", "output": "Output: \"eeecd\"", "explanation": "Explanation:\n\"ab\" occurs at index 0 in s, so we replace it with \"eee\".\n\"ec\" does not occur at index 2 in s, so we do nothing."}], "constraints": "Constraints:\n1 <= s.length <= 1000\nk == indices.length == sources.length == targets.length\n1 <= k <= 100\n0 <= indexes[i] < s.length\n1 <= sources[i].length, targets[i].length <= 50\ns consists of only lowercase English letters.\nsources[i] and targets[i] consist of only lowercase English letters.", "notes": ""}, "831": {"label": "Medium", "title": "Masking Personal Information", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4573, "total_accepted": 13900.0, "total_submissions": 30400.0, "testcase_example": "'\"LeetCode@LeetCode.com\"'", "body": "You are given a personal information string s, representing either an email address or a phone number. Return the masked personal information using the below rules.\nEmail address:\nAn email address is:\nA name consisting of uppercase and lowercase English letters, followed by\nThe '@' symbol, followed by\nThe domain consisting of uppercase and lowercase English letters with a dot '.' somewhere in the middle (not the first or last character).\nTo mask an email:\nThe uppercase letters in the name and domain must be converted to lowercase letters.\nThe middle letters of the name (i.e., all but the first and last letters) must be replaced by 5 asterisks \"*****\".\nPhone number:\nA phone number is formatted as follows:\nThe phone number contains 10-13 digits.\nThe last 10 digits make up the local number.\nThe remaining 0-3 digits, in the beginning, make up the country code.\nSeparation characters from the set {'+', '-', '(', ')', ' '} separate the above digits in some way.\nTo mask a phone number:\nRemove all separation characters.\nThe masked phone number should have the form:\n\n\"***-***-XXXX\" if the country code has 0 digits.\n\"+*-***-***-XXXX\" if the country code has 1 digit.\n\"+**-***-***-XXXX\" if the country code has 2 digits.\n\"+***-***-***-XXXX\" if the country code has 3 digits.\n\n\n\"XXXX\" is the last 4 digits of the local number.", "examples": [{"full_text": "Example 1:\nInput: s = \"LeetCode@LeetCode.com\"\nOutput: \"l*****e@leetcode.com\"\nExplanation: s is an email address.\nThe name and domain are converted to lowercase, and the middle of the name is replaced by 5 asterisks.", "input": "Input: s = \"LeetCode@LeetCode.com\"", "output": "Output: \"l*****e@leetcode.com\"", "explanation": "Explanation: s is an email address.\nThe name and domain are converted to lowercase, and the middle of the name is replaced by 5 asterisks."}, {"full_text": "Example 2:\nInput: s = \"AB@qq.com\"\nOutput: \"a*****b@qq.com\"\nExplanation: s is an email address.\nThe name and domain are converted to lowercase, and the middle of the name is replaced by 5 asterisks.\nNote that even though \"ab\" is 2 characters, it still must have 5 asterisks in the middle.", "input": "Input: s = \"AB@qq.com\"", "output": "Output: \"a*****b@qq.com\"", "explanation": "Explanation: s is an email address.\nThe name and domain are converted to lowercase, and the middle of the name is replaced by 5 asterisks.\nNote that even though \"ab\" is 2 characters, it still must have 5 asterisks in the middle."}, {"full_text": "Example 3:\nInput: s = \"1(234)567-890\"\nOutput: \"***-***-7890\"\nExplanation: s is a phone number.\nThere are 10 digits, so the local number is 10 digits and the country code is 0 digits.\nThus, the resulting masked number is \"***-***-7890\".", "input": "Input: s = \"1(234)567-890\"", "output": "Output: \"***-***-7890\"", "explanation": "Explanation: s is a phone number.\nThere are 10 digits, so the local number is 10 digits and the country code is 0 digits.\nThus, the resulting masked number is \"***-***-7890\"."}], "constraints": "Constraints:\ns is either a valid email or a phone number.\nIf s is an email:\n\n8 <= s.length <= 40\ns consists of uppercase and lowercase English letters and exactly one '@' symbol and '.' symbol.\n\n\nIf s is a phone number:\n\n10 <= s.length <= 20\ns consists of digits, spaces, and the symbols '(', ')', '-', and '+'.\n\n", "notes": ""}, "826": {"label": "Medium", "title": "Most Profit Assigning Work", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.40979999999999994, "total_accepted": 33100.0, "total_submissions": 80700.0, "testcase_example": "'[2,4,6,8,10]\\n[10,20,30,40,50]\\n[4,5,6,7]'", "body": "You have n jobs and m workers. You are given three arrays: difficulty, profit, and worker where:\ndifficulty[i] and profit[i] are the difficulty and the profit of the i^th job, and\nworker[j] is the ability of j^th worker (i.e., the j^th worker can only complete a job with difficulty at most worker[j]).\nEvery worker can be assigned at most one job, but one job can be completed multiple times.\nFor example, if three workers attempt the same job that pays $1, then the total profit will be $3. If a worker cannot complete any job, their profit is $0.\nReturn the maximum profit we can achieve after assigning the workers to the jobs.", "examples": [{"full_text": "Example 1:\nInput: difficulty = [2,4,6,8,10], profit = [10,20,30,40,50], worker = [4,5,6,7]\nOutput: 100\nExplanation: Workers are assigned jobs of difficulty [4,4,6,6] and they get a profit of [20,20,30,30] separately.", "input": "Input: difficulty = [2,4,6,8,10], profit = [10,20,30,40,50], worker = [4,5,6,7]", "output": "Output: 100", "explanation": "Explanation: Workers are assigned jobs of difficulty [4,4,6,6] and they get a profit of [20,20,30,30] separately."}, {"full_text": "Example 2:\nInput: difficulty = [85,47,57], profit = [24,66,99], worker = [40,25,25]\nOutput: 0", "input": "Input: difficulty = [85,47,57], profit = [24,66,99], worker = [40,25,25]", "output": "Output: 0", "explanation": ""}], "constraints": "Constraints:\nn == difficulty.length\nn == profit.length\nm == worker.length\n1 <= n, m <= 10^4\n1 <= difficulty[i], profit[i], worker[i] <= 10^5", "notes": ""}, "825": {"label": "Medium", "title": "Friends Of Appropriate Ages", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.45520000000000005, "total_accepted": 59900.0, "total_submissions": 131500.0, "testcase_example": "'[16,16]'", "body": "There are n persons on a social media website. You are given an integer array ages where ages[i] is the age of the i^th person.\nA Person x will not send a friend request to a person y (x != y) if any of the following conditions is true:\nage[y] <= 0.5 * age[x] + 7\nage[y] > age[x]\nage[y] > 100 && age[x] < 100\nOtherwise, x will send a friend request to y.\nNote that if x sends a request to y, y will not necessarily send a request to x. Also, a person will not send a friend request to themself.\nReturn the total number of friend requests made.", "examples": [{"full_text": "Example 1:\nInput: ages = [16,16]\nOutput: 2\nExplanation: 2 people friend request each other.", "input": "Input: ages = [16,16]", "output": "Output: 2", "explanation": "Explanation: 2 people friend request each other."}, {"full_text": "Example 2:\nInput: ages = [16,17,18]\nOutput: 2\nExplanation: Friend requests are made 17 -> 16, 18 -> 17.", "input": "Input: ages = [16,17,18]", "output": "Output: 2", "explanation": "Explanation: Friend requests are made 17 -> 16, 18 -> 17."}, {"full_text": "Example 3:\nInput: ages = [20,30,100,110,120]\nOutput: 3\nExplanation: Friend requests are made 110 -> 100, 120 -> 110, 120 -> 100.", "input": "Input: ages = [20,30,100,110,120]", "output": "Output: 3", "explanation": "Explanation: Friend requests are made 110 -> 100, 120 -> 110, 120 -> 100."}], "constraints": "Constraints:\nn == ages.length\n1 <= n <= 2 * 10^4\n1 <= ages[i] <= 120", "notes": ""}, "823": {"label": "Medium", "title": "Binary Trees With Factors", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.43670000000000003, "total_accepted": 36000.0, "total_submissions": 82400.0, "testcase_example": "'[2,4]'", "body": "Given an array of unique integers, arr, where each integer arr[i] is strictly greater than 1.\nWe make a binary tree using these integers, and each number may be used for any number of times. Each non-leaf node's value should be equal to the product of the values of its children.\nReturn the number of binary trees we can make. The answer may be too large so return the answer modulo 10^9 + 7.", "examples": [{"full_text": "Example 1:\nInput: arr = [2,4]\nOutput: 3\nExplanation: We can make these trees: [2], [4], [4, 2, 2]", "input": "Input: arr = [2,4]", "output": "Output: 3", "explanation": "Explanation: We can make these trees: [2], [4], [4, 2, 2]"}, {"full_text": "Example 2:\nInput: arr = [2,4,5,10]\nOutput: 7\nExplanation: We can make these trees: [2], [4], [5], [10], [4, 2, 2], [10, 2, 5], [10, 5, 2].", "input": "Input: arr = [2,4,5,10]", "output": "Output: 7", "explanation": "Explanation: We can make these trees: [2], [4], [5], [10], [4, 2, 2], [10, 2, 5], [10, 5, 2]."}], "constraints": "Constraints:\n1 <= arr.length <= 1000\n2 <= arr[i] <= 10^9\nAll the values of arr are unique.", "notes": ""}, "822": {"label": "Medium", "title": "Card Flipping Game", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4448, "total_accepted": 12600.0, "total_submissions": 28200.0, "testcase_example": "'[1,2,4,4,7]\\n[1,3,4,1,3]'", "body": "You are given n cards, with a positive integer printed on the front and back of each card (possibly different). You can flip any number of cards (possibly zero).\nAfter choosing the front and the back of each card, you will pick each card, and if the integer printed on the back of this card is not printed on the front of any other card, then this integer is good.\nYou are given two integer array fronts and backs where fronts[i] and backs[i] are the integers printer on the front and the back of the i^th card respectively.\nReturn the smallest good and integer after flipping the cards. If there are no good integers, return 0.\nNote that a flip swaps the front and back numbers, so the value on the front is now on the back and vice versa.", "examples": [{"full_text": "Example 1:\nInput: fronts = [1,2,4,4,7], backs = [1,3,4,1,3]\nOutput: 2\nExplanation: If we flip the second card, the fronts are [1,3,4,4,7] and the backs are [1,2,4,1,3].\nWe choose the second card, which has the number 2 on the back, and it is not on the front of any card, so 2 is good.", "input": "Input: fronts = [1,2,4,4,7], backs = [1,3,4,1,3]", "output": "Output: 2", "explanation": "Explanation: If we flip the second card, the fronts are [1,3,4,4,7] and the backs are [1,2,4,1,3].\nWe choose the second card, which has the number 2 on the back, and it is not on the front of any card, so 2 is good."}, {"full_text": "Example 2:\nInput: fronts = [1], backs = [1]\nOutput: 0", "input": "Input: fronts = [1], backs = [1]", "output": "Output: 0", "explanation": ""}], "constraints": "Constraints:\nn == fronts.length\nn == backs.length\n1 <= n <= 1000\n1 <= fronts[i], backs[i] <= 2000", "notes": ""}, "820": {"label": "Medium", "title": "Short Encoding of Words", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5515, "total_accepted": 44400.0, "total_submissions": 80400.0, "testcase_example": "'[\"time\",\"me\",\"bell\"]'", "body": "A valid encoding of an array of words is any reference string s and array of indices indices such that:\nwords.length == indices.length\nThe reference string s ends with the '#' character.\nFor each index indices[i], the substring of s starting from indices[i] and up to (but not including) the next '#' character is equal to words[i].\nGiven an array of words, return the length of the shortest reference string s possible of any valid encoding of words.", "examples": [{"full_text": "Example 1:\nInput: words = [\"time\", \"me\", \"bell\"]\nOutput: 10\nExplanation: A valid encoding would be s = \"time#bell#\" and indices = [0, 2, 5].\nwords[0] = \"time\", the substring of s starting from indices[0] = 0 to the next '#' is underlined in \"time#bell#\"\nwords[1] = \"me\", the substring of s starting from indices[1] = 2 to the next '#' is underlined in \"time#bell#\"\nwords[2] = \"bell\", the substring of s starting from indices[2] = 5 to the next '#' is underlined in \"time#bell#\"", "input": "Input: words = [\"time\", \"me\", \"bell\"]", "output": "Output: 10", "explanation": "Explanation: A valid encoding would be s = \"time#bell#\" and indices = [0, 2, 5].\nwords[0] = \"time\", the substring of s starting from indices[0] = 0 to the next '#' is underlined in \"time#bell#\"\nwords[1] = \"me\", the substring of s starting from indices[1] = 2 to the next '#' is underlined in \"time#bell#\"\nwords[2] = \"bell\", the substring of s starting from indices[2] = 5 to the next '#' is underlined in \"time#bell#\""}, {"full_text": "Example 2:\nInput: words = [\"t\"]\nOutput: 2\nExplanation: A valid encoding would be s = \"t#\" and indices = [0].", "input": "Input: words = [\"t\"]", "output": "Output: 2", "explanation": "Explanation: A valid encoding would be s = \"t#\" and indices = [0]."}], "constraints": "Constraints:\n1 <= words.length <= 2000\n1 <= words[i].length <= 7\nwords[i] consists of only lowercase letters.", "notes": ""}, "817": {"label": "Medium", "title": "Linked List Components", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.58, "total_accepted": 65800.0, "total_submissions": 113400.0, "testcase_example": "'[0,1,2,3]\\n[0,1,3]'", "body": "You are given the head of a linked list containing unique integer values and an integer array nums that is a subset of the linked list values.\nReturn the number of connected components in nums where two values are connected if they appear consecutively in the linked list.", "examples": [{"full_text": "Example 1:\nInput: head = [0,1,2,3], nums = [0,1,3]\nOutput: 2\nExplanation: 0 and 1 are connected, so [0, 1] and [3] are the two connected components.", "input": "Input: head = [0,1,2,3], nums = [0,1,3]", "output": "Output: 2", "explanation": "Explanation: 0 and 1 are connected, so [0, 1] and [3] are the two connected components."}, {"full_text": "Example 2:\nInput: head = [0,1,2,3,4], nums = [0,3,1,4]\nOutput: 2\nExplanation: 0 and 1 are connected, 3 and 4 are connected, so [0, 1] and [3, 4] are the two connected components.", "input": "Input: head = [0,1,2,3,4], nums = [0,3,1,4]", "output": "Output: 2", "explanation": "Explanation: 0 and 1 are connected, 3 and 4 are connected, so [0, 1] and [3, 4] are the two connected components."}], "constraints": "Constraints:\nThe number of nodes in the linked list is n.\n1 <= n <= 10^4\n0 <= Node.val < n\nAll the values Node.val are unique.\n1 <= nums.length <= n\n0 <= nums[i] < n\nAll the values of nums are unique.", "notes": ""}, "816": {"label": "Medium", "title": "Ambiguous Coordinates", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5590999999999999, "total_accepted": 25200.0, "total_submissions": 45000.0, "testcase_example": "'\"(123)\"'", "body": "We had some 2-dimensional coordinates, like \"(1, 3)\" or \"(2, 0.5)\". Then, we removed all commas, decimal points, and spaces and ended up with the string s.\nFor example, \"(1, 3)\" becomes s = \"(13)\" and \"(2, 0.5)\" becomes s = \"(205)\".\nReturn a list of strings representing all possibilities for what our original coordinates could have been.\nOur original representation never had extraneous zeroes, so we never started with numbers like \"00\", \"0.0\", \"0.00\", \"1.0\", \"001\", \"00.01\", or any other number that can be represented with fewer digits. Also, a decimal point within a number never occurs without at least one digit occurring before it, so we never started with numbers like \".1\".\nThe final answer list can be returned in any order. All coordinates in the final answer have exactly one space between them (occurring after the comma.)", "examples": [{"full_text": "Example 1:\nInput: s = \"(123)\"\nOutput: [\"(1, 2.3)\",\"(1, 23)\",\"(1.2, 3)\",\"(12, 3)\"]", "input": "Input: s = \"(123)\"", "output": "Output: [\"(1, 2.3)\",\"(1, 23)\",\"(1.2, 3)\",\"(12, 3)\"]", "explanation": ""}, {"full_text": "Example 2:\nInput: s = \"(0123)\"\nOutput: [\"(0, 1.23)\",\"(0, 12.3)\",\"(0, 123)\",\"(0.1, 2.3)\",\"(0.1, 23)\",\"(0.12, 3)\"]\nExplanation: 0.0, 00, 0001 or 00.01 are not allowed.", "input": "Input: s = \"(0123)\"", "output": "Output: [\"(0, 1.23)\",\"(0, 12.3)\",\"(0, 123)\",\"(0.1, 2.3)\",\"(0.1, 23)\",\"(0.12, 3)\"]", "explanation": "Explanation: 0.0, 00, 0001 or 00.01 are not allowed."}, {"full_text": "Example 3:\nInput: s = \"(00011)\"\nOutput: [\"(0, 0.011)\",\"(0.001, 1)\"]", "input": "Input: s = \"(00011)\"", "output": "Output: [\"(0, 0.011)\",\"(0.001, 1)\"]", "explanation": ""}], "constraints": "Constraints:\n4 <= s.length <= 12\ns[0] == '(' and s[s.length - 1] == ')'.\nThe rest of s are digits.", "notes": ""}, "814": {"label": "Medium", "title": "Binary Tree Pruning", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7105, "total_accepted": 135000.0, "total_submissions": 190000.0, "testcase_example": "'[1,null,0,0,1]'", "body": "Given the root of a binary tree, return the same tree where every subtree (of the given tree) not containing a 1 has been removed.\nA subtree of a node node is node plus every node that is a descendant of node.", "examples": [{"full_text": "Example 1:\nInput: root = [1,null,0,0,1]\nOutput: [1,null,0,null,1]\nExplanation:\nOnly the red nodes satisfy the property \"every subtree not containing a 1\".\nThe diagram on the right represents the answer.", "input": "Input: root = [1,null,0,0,1]", "output": "Output: [1,null,0,null,1]", "explanation": "Explanation:\nOnly the red nodes satisfy the property \"every subtree not containing a 1\".\nThe diagram on the right represents the answer."}, {"full_text": "Example 2:\nInput: root = [1,0,1,0,0,0,1]\nOutput: [1,null,1,null,1]", "input": "Input: root = [1,0,1,0,0,0,1]", "output": "Output: [1,null,1,null,1]", "explanation": ""}, {"full_text": "Example 3:\nInput: root = [1,1,0,1,1,0,1,0]\nOutput: [1,1,0,1,1,null,1]", "input": "Input: root = [1,1,0,1,1,0,1,0]", "output": "Output: [1,1,0,1,1,null,1]", "explanation": ""}], "constraints": "Constraints:\nThe number of nodes in the tree is in the range [1, 200].\nNode.val is either 0 or 1.", "notes": ""}, "813": {"label": "Medium", "title": "Largest Sum of Averages", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5217, "total_accepted": 38300.0, "total_submissions": 73400.0, "testcase_example": "'[9,1,2,3,9]\\n3'", "body": "You are given an integer array nums and an integer k. You can partition the array into at most k non-empty adjacent subarrays. The score of a partition is the sum of the averages of each subarray.\nNote that the partition must use every integer in nums, and that the score is not necessarily an integer.\nReturn the maximum score you can achieve of all the possible partitions. Answers within 10^-6 of the actual answer will be accepted.", "examples": [{"full_text": "Example 1:\nInput: nums = [9,1,2,3,9], k = 3\nOutput: 20.00000\nExplanation:\nThe best choice is to partition nums into [9], [1, 2, 3], [9]. The answer is 9 + (1 + 2 + 3) / 3 + 9 = 20.\nWe could have also partitioned nums into [9, 1], [2], [3, 9], for example.\nThat partition would lead to a score of 5 + 2 + 6 = 13, which is worse.", "input": "Input: nums = [9,1,2,3,9], k = 3", "output": "Output: 20.00000", "explanation": "Explanation:\nThe best choice is to partition nums into [9], [1, 2, 3], [9]. The answer is 9 + (1 + 2 + 3) / 3 + 9 = 20.\nWe could have also partitioned nums into [9, 1], [2], [3, 9], for example.\nThat partition would lead to a score of 5 + 2 + 6 = 13, which is worse."}, {"full_text": "Example 2:\nInput: nums = [1,2,3,4,5,6,7], k = 4\nOutput: 20.50000", "input": "Input: nums = [1,2,3,4,5,6,7], k = 4", "output": "Output: 20.50000", "explanation": ""}], "constraints": "Constraints:\n1 <= nums.length <= 100\n1 <= nums[i] <= 10^4\n1 <= k <= nums.length", "notes": ""}, "811": {"label": "Medium", "title": "Subdomain Visit Count", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7382, "total_accepted": 161100.0, "total_submissions": 218200.0, "testcase_example": "'[\"9001 discuss.leetcode.com\"]'", "body": "A website domain \"discuss.leetcode.com\" consists of various subdomains. At the top level, we have \"com\", at the next level, we have \"leetcode.com\"\nand at the lowest level, \"discuss.leetcode.com\". When we visit a domain like \"discuss.leetcode.com\", we will also visit the parent domains \"leetcode.com\" and \"com\" implicitly.\nA count-paired domain is a domain that has one of the two formats \"rep d1.d2.d3\" or \"rep d1.d2\" where rep is the number of visits to the domain and d1.d2.d3 is the domain itself.\nFor example, \"9001 discuss.leetcode.com\" is a count-paired domain that indicates that discuss.leetcode.com was visited 9001 times.\nGiven an array of count-paired domains cpdomains, return an array of the count-paired domains of each subdomain in the input. You may return the answer in any order.", "examples": [{"full_text": "Example 1:\nInput: cpdomains = [\"9001 discuss.leetcode.com\"]\nOutput: [\"9001 leetcode.com\",\"9001 discuss.leetcode.com\",\"9001 com\"]\nExplanation: We only have one website domain: \"discuss.leetcode.com\".\nAs discussed above, the subdomain \"leetcode.com\" and \"com\" will also be visited. So they will all be visited 9001 times.", "input": "Input: cpdomains = [\"9001 discuss.leetcode.com\"]", "output": "Output: [\"9001 leetcode.com\",\"9001 discuss.leetcode.com\",\"9001 com\"]", "explanation": "Explanation: We only have one website domain: \"discuss.leetcode.com\".\nAs discussed above, the subdomain \"leetcode.com\" and \"com\" will also be visited. So they will all be visited 9001 times."}, {"full_text": "Example 2:\nInput: cpdomains = [\"900 google.mail.com\", \"50 yahoo.com\", \"1 intel.mail.com\", \"5 wiki.org\"]\nOutput: [\"901 mail.com\",\"50 yahoo.com\",\"900 google.mail.com\",\"5 wiki.org\",\"5 org\",\"1 intel.mail.com\",\"951 com\"]\nExplanation: We will visit \"google.mail.com\" 900 times, \"yahoo.com\" 50 times, \"intel.mail.com\" once and \"wiki.org\" 5 times.\nFor the subdomains, we will visit \"mail.com\" 900 + 1 = 901 times, \"com\" 900 + 50 + 1 = 951 times, and \"org\" 5 times.", "input": "Input: cpdomains = [\"900 google.mail.com\", \"50 yahoo.com\", \"1 intel.mail.com\", \"5 wiki.org\"]", "output": "Output: [\"901 mail.com\",\"50 yahoo.com\",\"900 google.mail.com\",\"5 wiki.org\",\"5 org\",\"1 intel.mail.com\",\"951 com\"]", "explanation": "Explanation: We will visit \"google.mail.com\" 900 times, \"yahoo.com\" 50 times, \"intel.mail.com\" once and \"wiki.org\" 5 times.\nFor the subdomains, we will visit \"mail.com\" 900 + 1 = 901 times, \"com\" 900 + 50 + 1 = 951 times, and \"org\" 5 times."}], "constraints": "Constraints:\n1 <= cpdomain.length <= 100\n1 <= cpdomain[i].length <= 100\ncpdomain[i] follows either the \"repi d1i.d2i.d3i\" format or the \"repi d1i.d2i\" format.\nrepi is an integer in the range [1, 10^4].\nd1i, d2i, and d3i consist of lowercase English letters.", "notes": ""}, "809": {"label": "Medium", "title": "Expressive Words", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4633, "total_accepted": 90900.0, "total_submissions": 196300.0, "testcase_example": "'\"heeellooo\"\\n[\"hello\", \"hi\", \"helo\"]'", "body": "Sometimes people repeat letters to represent extra feeling. For example:\n\"hello\" -> \"heeellooo\"\n\"hi\" -> \"hiiii\"\nIn these strings like \"heeellooo\", we have groups of adjacent letters that are all the same: \"h\", \"eee\", \"ll\", \"ooo\".\nYou are given a string s and an array of query strings words. A query word is stretchy if it can be made to be equal to s by any number of applications of the following extension operation: choose a group consisting of characters c, and add some number of characters c to the group so that the size of the group is three or more.\nFor example, starting with \"hello\", we could do an extension on the group \"o\" to get \"hellooo\", but we cannot get \"helloo\" since the group \"oo\" has a size less than three. Also, we could do another extension like \"ll\" -> \"lllll\" to get \"helllllooo\". If s = \"helllllooo\", then the query word \"hello\" would be stretchy because of these two extension operations: query = \"hello\" -> \"hellooo\" -> \"helllllooo\" = s.\nReturn the number of query strings that are stretchy.", "examples": [{"full_text": "Example 1:\nInput: s = \"heeellooo\", words = [\"hello\", \"hi\", \"helo\"]\nOutput: 1\nExplanation:\nWe can extend \"e\" and \"o\" in the word \"hello\" to get \"heeellooo\".\nWe can't extend \"helo\" to get \"heeellooo\" because the group \"ll\" is not size 3 or more.", "input": "Input: s = \"heeellooo\", words = [\"hello\", \"hi\", \"helo\"]", "output": "Output: 1", "explanation": "Explanation:\nWe can extend \"e\" and \"o\" in the word \"hello\" to get \"heeellooo\".\nWe can't extend \"helo\" to get \"heeellooo\" because the group \"ll\" is not size 3 or more."}, {"full_text": "Example 2:\nInput: s = \"zzzzzyyyyy\", words = [\"zzyy\",\"zy\",\"zyy\"]\nOutput: 3", "input": "Input: s = \"zzzzzyyyyy\", words = [\"zzyy\",\"zy\",\"zyy\"]", "output": "Output: 3", "explanation": ""}], "constraints": "Constraints:\n1 <= s.length, words.length <= 100\n1 <= words[i].length <= 100\ns and words[i] consist of lowercase letters.", "notes": ""}, "808": {"label": "Medium", "title": "Soup Servings", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.42119999999999996, "total_accepted": 14200.0, "total_submissions": 33700.0, "testcase_example": "'50'", "body": "There are two types of soup: type A and type B. Initially, we have n ml of each type of soup. There are four kinds of operations:\nServe 100 ml of soup A and 0 ml of soup B,\nServe 75 ml of soup A and 25 ml of soup B,\nServe 50 ml of soup A and 50 ml of soup B, and\nServe 25 ml of soup A and 75 ml of soup B.\nWhen we serve some soup, we give it to someone, and we no longer have it. Each turn, we will choose from the four operations with an equal probability 0.25. If the remaining volume of soup is not enough to complete the operation, we will serve as much as possible. We stop once we no longer have some quantity of both types of soup.\nNote that we do not have an operation where all 100 ml's of soup B are used first.\nReturn the probability that soup A will be empty first, plus half the probability that A and B become empty at the same time. Answers within 10^-5 of the actual answer will be accepted.", "examples": [{"full_text": "Example 1:\nInput: n = 50\nOutput: 0.62500\nExplanation: If we choose the first two operations, A will become empty first.\nFor the third operation, A and B will become empty at the same time.\nFor the fourth operation, B will become empty first.\nSo the total probability of A becoming empty first plus half the probability that A and B become empty at the same time, is 0.25 * (1 + 1 + 0.5 + 0) = 0.625.", "input": "Input: n = 50", "output": "Output: 0.62500", "explanation": "Explanation: If we choose the first two operations, A will become empty first.\nFor the third operation, A and B will become empty at the same time.\nFor the fourth operation, B will become empty first.\nSo the total probability of A becoming empty first plus half the probability that A and B become empty at the same time, is 0.25 * (1 + 1 + 0.5 + 0) = 0.625."}, {"full_text": "Example 2:\nInput: n = 100\nOutput: 0.71875", "input": "Input: n = 100", "output": "Output: 0.71875", "explanation": ""}], "constraints": "Constraints:\n0 <= n <= 10^9", "notes": ""}, "807": {"label": "Medium", "title": "Max Increase to Keep City Skyline", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.8534999999999999, "total_accepted": 119200.0, "total_submissions": 139600.0, "testcase_example": "'[[3,0,8,4],[2,4,5,7],[9,2,6,3],[0,3,1,0]]'", "body": "There is a city composed of n x n blocks, where each block contains a single building shaped like a vertical square prism. You are given a 0-indexed n x n integer matrix grid where grid[r][c] represents the height of the building located in the block at row r and column c.\nA city's skyline is the the outer contour formed by all the building when viewing the side of the city from a distance. The skyline from each cardinal direction north, east, south, and west may be different.\nWe are allowed to increase the height of any number of buildings by any amount (the amount can be different per building). The height of a 0-height building can also be increased. However, increasing the height of a building should not affect the city's skyline from any cardinal direction.\nReturn the maximum total sum that the height of the buildings can be increased by without changing the city's skyline from any cardinal direction.", "examples": [{"full_text": "Example 1:\nInput: grid = [[3,0,8,4],[2,4,5,7],[9,2,6,3],[0,3,1,0]]\nOutput: 35\nExplanation: The building heights are shown in the center of the above image.\nThe skylines when viewed from each cardinal direction are drawn in red.\nThe grid after increasing the height of buildings without affecting skylines is:\ngridNew = [ [8, 4, 8, 7],\n[7, 4, 7, 7],\n[9, 4, 8, 7],\n[3, 3, 3, 3] ]", "input": "Input: grid = [[3,0,8,4],[2,4,5,7],[9,2,6,3],[0,3,1,0]]", "output": "Output: 35", "explanation": "Explanation: The building heights are shown in the center of the above image.\nThe skylines when viewed from each cardinal direction are drawn in red.\nThe grid after increasing the height of buildings without affecting skylines is:\ngridNew = [ [8, 4, 8, 7],\n[7, 4, 7, 7],\n[9, 4, 8, 7],\n[3, 3, 3, 3] ]"}, {"full_text": "Example 2:\nInput: grid = [[0,0,0],[0,0,0],[0,0,0]]\nOutput: 0\nExplanation: Increasing the height of any building will result in the skyline changing.", "input": "Input: grid = [[0,0,0],[0,0,0],[0,0,0]]", "output": "Output: 0", "explanation": "Explanation: Increasing the height of any building will result in the skyline changing."}], "constraints": "Constraints:\nn == grid.length\nn == grid[r].length\n2 <= n <= 50\n0 <= grid[r][c] <= 100", "notes": ""}, "802": {"label": "Medium", "title": "Find Eventual Safe States", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5188, "total_accepted": 70000.0, "total_submissions": 135000.0, "testcase_example": "'[[1,2],[2,3],[5],[0],[5],[],[]]'", "body": "There is a directed graph of n nodes with each node labeled from 0 to n - 1. The graph is represented by a 0-indexed 2D integer array graph where graph[i] is an integer array of nodes adjacent to node i, meaning there is an edge from node i to each node in graph[i].\nA node is a terminal node if there are no outgoing edges. A node is a safe node if every possible path starting from that node leads to a terminal node.\nReturn an array containing all the safe nodes of the graph. The answer should be sorted in ascending order.", "examples": [{"full_text": "Example 1:\nInput: graph = [[1,2],[2,3],[5],[0],[5],[],[]]\nOutput: [2,4,5,6]\nExplanation: The given graph is shown above.\nNodes 5 and 6 are terminal nodes as there are no outgoing edges from either of them.\nEvery path starting at nodes 2, 4, 5, and 6 all lead to either node 5 or 6.", "input": "Input: graph = [[1,2],[2,3],[5],[0],[5],[],[]]", "output": "Output: [2,4,5,6]", "explanation": "Explanation: The given graph is shown above.\nNodes 5 and 6 are terminal nodes as there are no outgoing edges from either of them.\nEvery path starting at nodes 2, 4, 5, and 6 all lead to either node 5 or 6."}, {"full_text": "Example 2:\nInput: graph = [[1,2,3,4],[1,2],[3,4],[0,4],[]]\nOutput: [4]\nExplanation:\nOnly node 4 is a terminal node, and every path starting at node 4 leads to node 4.", "input": "Input: graph = [[1,2,3,4],[1,2],[3,4],[0,4],[]]", "output": "Output: [4]", "explanation": "Explanation:\nOnly node 4 is a terminal node, and every path starting at node 4 leads to node 4."}], "constraints": "Constraints:\nn == graph.length\n1 <= n <= 10^4\n0 <= graph[i].length <= n\n0 <= graph[i][j] <= n - 1\ngraph[i] is sorted in a strictly increasing order.\nThe graph may contain self-loops.\nThe number of edges in the graph will be in the range [1, 4 * 10^4].", "notes": ""}, "799": {"label": "Medium", "title": "Champagne Tower", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4473, "total_accepted": 38700.0, "total_submissions": 86500.0, "testcase_example": "'1\\n1\\n1'", "body": "We stack glasses in a pyramid, where the first row has 1 glass, the second row has 2 glasses, and so on until the 100^th row.\nEach glass holds one cup\nof champagne.\nThen, some champagne is poured into the first glass at the top.\nWhen the topmost glass is full, any excess liquid poured will fall equally to the glass immediately to the left and right of it.\nWhen those glasses become full, any excess champagne will fall equally to the left and right of those glasses, and so on.\n(A glass at the bottom row has its excess champagne fall on the floor.)\nFor example, after one cup of champagne is poured, the top most glass is full.\nAfter two cups of champagne are poured, the two glasses on the second row are half full.\nAfter three cups of champagne are poured, those two cups become full - there are 3 full glasses total now.\nAfter four cups of champagne are poured, the third row has the middle glass half full, and the two outside glasses are a quarter full, as pictured below.\nNow after pouring some non-negative integer cups of champagne, return how full the j^th glass in the i^th row is (both i and j are 0-indexed.)", "examples": [{"full_text": "Example 1:\nInput: poured = 1, query_row = 1, query_glass = 1\nOutput: 0.00000\nExplanation: We poured 1 cup of champange to the top glass of the tower (which is indexed as (0, 0)). There will be no excess liquid so all the glasses under the top glass will remain empty.", "input": "Input: poured = 1, query_row = 1, query_glass = 1", "output": "Output: 0.00000", "explanation": "Explanation: We poured 1 cup of champange to the top glass of the tower (which is indexed as (0, 0)). There will be no excess liquid so all the glasses under the top glass will remain empty."}, {"full_text": "Example 2:\nInput: poured = 2, query_row = 1, query_glass = 1\nOutput: 0.50000\nExplanation: We poured 2 cups of champange to the top glass of the tower (which is indexed as (0, 0)). There is one cup of excess liquid. The glass indexed as (1, 0) and the glass indexed as (1, 1) will share the excess liquid equally, and each will get half cup of champange.", "input": "Input: poured = 2, query_row = 1, query_glass = 1", "output": "Output: 0.50000", "explanation": "Explanation: We poured 2 cups of champange to the top glass of the tower (which is indexed as (0, 0)). There is one cup of excess liquid. The glass indexed as (1, 0) and the glass indexed as (1, 1) will share the excess liquid equally, and each will get half cup of champange."}, {"full_text": "Example 3:\nInput: poured = 100000009, query_row = 33, query_glass = 17\nOutput: 1.00000", "input": "Input: poured = 100000009, query_row = 33, query_glass = 17", "output": "Output: 1.00000", "explanation": ""}], "constraints": "Constraints:\n0 <=\npoured <= 10^9\n0 <= query_glass <= query_row\n< 100", "notes": ""}, "797": {"label": "Medium", "title": "All Paths From Source to Target", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.8066, "total_accepted": 248000.0, "total_submissions": 307500.0, "testcase_example": "'[[1,2],[3],[3],[]]'", "body": "Given a directed acyclic graph (DAG) of n nodes labeled from 0 to n - 1, find all possible paths from node 0 to node n - 1 and return them in any order.\nThe graph is given as follows: graph[i] is a list of all nodes you can visit from node i (i.e., there is a directed edge from node i to node graph[i][j]).", "examples": [{"full_text": "Example 1:\nInput: graph = [[1,2],[3],[3],[]]\nOutput: [[0,1,3],[0,2,3]]\nExplanation: There are two paths: 0 -> 1 -> 3 and 0 -> 2 -> 3.", "input": "Input: graph = [[1,2],[3],[3],[]]", "output": "Output: [[0,1,3],[0,2,3]]", "explanation": "Explanation: There are two paths: 0 -> 1 -> 3 and 0 -> 2 -> 3."}, {"full_text": "Example 2:\nInput: graph = [[4,3,1],[3,2,4],[3],[4],[]]\nOutput: [[0,4],[0,3,4],[0,1,3,4],[0,1,2,3,4],[0,1,4]]", "input": "Input: graph = [[4,3,1],[3,2,4],[3],[4],[]]", "output": "Output: [[0,4],[0,3,4],[0,1,3,4],[0,1,2,3,4],[0,1,4]]", "explanation": ""}], "constraints": "Constraints:\nn == graph.length\n2 <= n <= 15\n0 <= graph[i][j] < n\ngraph[i][j] != i (i.e., there will be no self-loops).\nAll the elements of graph[i] are unique.\nThe input graph is guaranteed to be a DAG.", "notes": ""}, "795": {"label": "Medium", "title": "Number of Subarrays with Bounded Maximum", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5234000000000001, "total_accepted": 50500.0, "total_submissions": 96500.0, "testcase_example": "'[2,1,4,3]\\n2\\n3'", "body": "Given an integer array nums and two integers left and right, return the number of contiguous non-empty subarrays such that the value of the maximum array element in that subarray is in the range [left, right].\nThe test cases are generated so that the answer will fit in a 32-bit integer.", "examples": [{"full_text": "Example 1:\nInput: nums = [2,1,4,3], left = 2, right = 3\nOutput: 3\nExplanation: There are three subarrays that meet the requirements: [2], [2, 1], [3].", "input": "Input: nums = [2,1,4,3], left = 2, right = 3", "output": "Output: 3", "explanation": "Explanation: There are three subarrays that meet the requirements: [2], [2, 1], [3]."}, {"full_text": "Example 2:\nInput: nums = [2,9,2,5,6], left = 2, right = 8\nOutput: 7", "input": "Input: nums = [2,9,2,5,6], left = 2, right = 8", "output": "Output: 7", "explanation": ""}], "constraints": "Constraints:\n1 <= nums.length <= 10^5\n0 <= nums[i] <= 10^9\n0 <= left <= right <= 10^9", "notes": ""}, "794": {"label": "Medium", "title": "Valid Tic-Tac-Toe State", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3507, "total_accepted": 43000.0, "total_submissions": 122600.0, "testcase_example": "'[\"O \",\" \",\" \"]'", "body": "Given a Tic-Tac-Toe board as a string array board, return true if and only if it is possible to reach this board position during the course of a valid tic-tac-toe game.\nThe board is a 3 x 3 array that consists of characters ' ', 'X', and 'O'. The ' ' character represents an empty square.\nHere are the rules of Tic-Tac-Toe:\nPlayers take turns placing characters into empty squares ' '.\nThe first player always places 'X' characters, while the second player always places 'O' characters.\n'X' and 'O' characters are always placed into empty squares, never filled ones.\nThe game ends when there are three of the same (non-empty) character filling any row, column, or diagonal.\nThe game also ends if all squares are non-empty.\nNo more moves can be played if the game is over.", "examples": [{"full_text": "Example 1:\nInput: board = [\"O \",\" \",\" \"]\nOutput: false\nExplanation: The first player always plays \"X\".", "input": "Input: board = [\"O \",\" \",\" \"]", "output": "Output: false", "explanation": "Explanation: The first player always plays \"X\"."}, {"full_text": "Example 2:\nInput: board = [\"XOX\",\" X \",\" \"]\nOutput: false\nExplanation: Players take turns making moves.", "input": "Input: board = [\"XOX\",\" X \",\" \"]", "output": "Output: false", "explanation": "Explanation: Players take turns making moves."}, {"full_text": "Example 3:\nInput: board = [\"XOX\",\"O O\",\"XOX\"]\nOutput: true", "input": "Input: board = [\"XOX\",\"O O\",\"XOX\"]", "output": "Output: true", "explanation": ""}], "constraints": "Constraints:\nboard.length == 3\nboard[i].length == 3\nboard[i][j] is either 'X', 'O', or ' '.", "notes": ""}, "792": {"label": "Medium", "title": "Number of Matching Subsequences", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5042, "total_accepted": 119300.0, "total_submissions": 236700.0, "testcase_example": "'\"abcde\"\\n[\"a\",\"bb\",\"acd\",\"ace\"]'", "body": "Given a string s and an array of strings words, return the number of words[i] that is a subsequence of s.\nA subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.\nFor example, \"ace\" is a subsequence of \"abcde\".", "examples": [{"full_text": "Example 1:\nInput: s = \"abcde\", words = [\"a\",\"bb\",\"acd\",\"ace\"]\nOutput: 3\nExplanation: There are three strings in words that are a subsequence of s: \"a\", \"acd\", \"ace\".", "input": "Input: s = \"abcde\", words = [\"a\",\"bb\",\"acd\",\"ace\"]", "output": "Output: 3", "explanation": "Explanation: There are three strings in words that are a subsequence of s: \"a\", \"acd\", \"ace\"."}, {"full_text": "Example 2:\nInput: s = \"dsahjpjauf\", words = [\"ahjpjau\",\"ja\",\"ahbwzgqnuk\",\"tnmlanowax\"]\nOutput: 2", "input": "Input: s = \"dsahjpjauf\", words = [\"ahjpjau\",\"ja\",\"ahbwzgqnuk\",\"tnmlanowax\"]", "output": "Output: 2", "explanation": ""}], "constraints": "Constraints:\n1 <= s.length <= 5 * 10^4\n1 <= words.length <= 5000\n1 <= words[i].length <= 50\ns and words[i] consist of only lowercase English letters.", "notes": ""}, "791": {"label": "Medium", "title": "Custom Sort String", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6859000000000001, "total_accepted": 160200.0, "total_submissions": 233600.0, "testcase_example": "'\"cba\"\\n\"abcd\"'", "body": "You are given two strings order and s. All the words of order are unique and were sorted in some custom order previously.\nPermute the characters of s so that they match the order that order was sorted. More specifically, if a character x occurs before a character y in order, then x should occur before y in the permuted string.\nReturn any permutation of s that satisfies this property.", "examples": [{"full_text": "Example 1:\nInput: order = \"cba\", s = \"abcd\"\nOutput: \"cbad\"\nExplanation:\n\"a\", \"b\", \"c\" appear in order, so the order of \"a\", \"b\", \"c\" should be \"c\", \"b\", and \"a\".\nSince \"d\" does not appear in order, it can be at any position in the returned string. \"dcba\", \"cdba\", \"cbda\" are also valid outputs.", "input": "Input: order = \"cba\", s = \"abcd\"", "output": "Output: \"cbad\"", "explanation": "Explanation:\n\"a\", \"b\", \"c\" appear in order, so the order of \"a\", \"b\", \"c\" should be \"c\", \"b\", and \"a\".\nSince \"d\" does not appear in order, it can be at any position in the returned string. \"dcba\", \"cdba\", \"cbda\" are also valid outputs."}, {"full_text": "Example 2:\nInput: order = \"cbafg\", s = \"abcd\"\nOutput: \"cbad\"", "input": "Input: order = \"cbafg\", s = \"abcd\"", "output": "Output: \"cbad\"", "explanation": ""}], "constraints": "Constraints:\n1 <= order.length <= 26\n1 <= s.length <= 200\norder and s consist of lowercase English letters.\nAll the characters of order are unique.", "notes": ""}, "790": {"label": "Medium", "title": "Domino and Tromino Tiling", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.47600000000000003, "total_accepted": 43300.0, "total_submissions": 91000.0, "testcase_example": "'3'", "body": "You have two types of tiles: a 2 x 1 domino shape and a tromino shape. You may rotate these shapes.\nGiven an integer n, return the number of ways to tile an 2 x n board. Since the answer may be very large, return it modulo 10^9 + 7.\nIn a tiling, every square must be covered by a tile. Two tilings are different if and only if there are two 4-directionally adjacent cells on the board such that exactly one of the tilings has both squares occupied by a tile.", "examples": [{"full_text": "Example 1:\nInput: n = 3\nOutput: 5\nExplanation: The five different ways are show above.", "input": "Input: n = 3", "output": "Output: 5", "explanation": "Explanation: The five different ways are show above."}, {"full_text": "Example 2:\nInput: n = 1\nOutput: 1", "input": "Input: n = 1", "output": "Output: 1", "explanation": ""}], "constraints": "Constraints:\n1 <= n <= 1000", "notes": ""}, "789": {"label": "Medium", "title": "Escape The Ghosts", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5999, "total_accepted": 20300.0, "total_submissions": 33900.0, "testcase_example": "'[[1,0],[0,3]]\\n[0,1]'", "body": "You are playing a simplified PAC-MAN game on an infinite 2-D grid. You start at the point [0, 0], and you are given a destination point target = [xtarget, ytarget] that you are trying to get to. There are several ghosts on the map with their starting positions given as a 2D array ghosts, where ghosts[i] = [xi, yi] represents the starting position of the i^th ghost. All inputs are integral coordinates.\nEach turn, you and all the ghosts may independently choose to either move 1 unit in any of the four cardinal directions: north, east, south, or west, or stay still. All actions happen simultaneously.\nYou escape if and only if you can reach the target before any ghost reaches you. If you reach any square (including the target) at the same time as a ghost, it does not count as an escape.\nReturn true if it is possible to escape regardless of how the ghosts move, otherwise return false.", "examples": [{"full_text": "Example 1:\nInput: ghosts = [[1,0],[0,3]], target = [0,1]\nOutput: true\nExplanation: You can reach the destination (0, 1) after 1 turn, while the ghosts located at (1, 0) and (0, 3) cannot catch up with you.", "input": "Input: ghosts = [[1,0],[0,3]], target = [0,1]", "output": "Output: true", "explanation": "Explanation: You can reach the destination (0, 1) after 1 turn, while the ghosts located at (1, 0) and (0, 3) cannot catch up with you."}, {"full_text": "Example 2:\nInput: ghosts = [[1,0]], target = [2,0]\nOutput: false\nExplanation: You need to reach the destination (2, 0), but the ghost at (1, 0) lies between you and the destination.", "input": "Input: ghosts = [[1,0]], target = [2,0]", "output": "Output: false", "explanation": "Explanation: You need to reach the destination (2, 0), but the ghost at (1, 0) lies between you and the destination."}, {"full_text": "Example 3:\nInput: ghosts = [[2,0]], target = [1,0]\nOutput: false\nExplanation: The ghost can reach the target at the same time as you.", "input": "Input: ghosts = [[2,0]], target = [1,0]", "output": "Output: false", "explanation": "Explanation: The ghost can reach the target at the same time as you."}], "constraints": "Constraints:\n1 <= ghosts.length <= 100\nghosts[i].length == 2\n-10^4 <= xi, yi <= 10^4\nThere can be multiple ghosts in the same location.\ntarget.length == 2\n-10^4 <= xtarget, ytarget <= 10^4", "notes": ""}, "788": {"label": "Medium", "title": "Rotated Digits", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5729, "total_accepted": 81800.0, "total_submissions": 142800.0, "testcase_example": "'10'", "body": "An integer x is a good if after rotating each digit individually by 180 degrees, we get a valid number that is different from x. Each digit must be rotated - we cannot choose to leave it alone.\nA number is valid if each digit remains a digit after rotation. For example:\n0, 1, and 8 rotate to themselves,\n2 and 5 rotate to each other (in this case they are rotated in a different direction, in other words, 2 or 5 gets mirrored),\n6 and 9 rotate to each other, and\nthe rest of the numbers do not rotate to any other number and become invalid.\nGiven an integer n, return the number of good integers in the range [1, n].", "examples": [{"full_text": "Example 1:\nInput: n = 10\nOutput: 4\nExplanation: There are four good numbers in the range [1, 10] : 2, 5, 6, 9.\nNote that 1 and 10 are not good numbers, since they remain unchanged after rotating.", "input": "Input: n = 10", "output": "Output: 4", "explanation": "Explanation: There are four good numbers in the range [1, 10] : 2, 5, 6, 9.\nNote that 1 and 10 are not good numbers, since they remain unchanged after rotating."}, {"full_text": "Example 2:\nInput: n = 1\nOutput: 0", "input": "Input: n = 1", "output": "Output: 0", "explanation": ""}, {"full_text": "Example 3:\nInput: n = 2\nOutput: 1", "input": "Input: n = 2", "output": "Output: 1", "explanation": ""}], "constraints": "Constraints:\n1 <= n <= 10^4", "notes": ""}, "787": {"label": "Medium", "title": "Cheapest Flights Within K Stops", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3636, "total_accepted": 213600.0, "total_submissions": 587500.0, "testcase_example": "'3\\n[[0,1,100],[1,2,100],[0,2,500]]\\n0\\n2\\n1'", "body": "There are n cities connected by some number of flights. You are given an array flights where flights[i] = [fromi, toi, pricei] indicates that there is a flight from city fromi to city toi with cost pricei.\nYou are also given three integers src, dst, and k, return the cheapest price from src to dst with at most k stops. If there is no such route, return -1.", "examples": [{"full_text": "Example 1:\nInput: n = 3, flights = [[0,1,100],[1,2,100],[0,2,500]], src = 0, dst = 2, k = 1\nOutput: 200\nExplanation: The graph is shown.\nThe cheapest price from city 0 to city 2 with at most 1 stop costs 200, as marked red in the picture.", "input": "Input: n = 3, flights = [[0,1,100],[1,2,100],[0,2,500]], src = 0, dst = 2, k = 1", "output": "Output: 200", "explanation": "Explanation: The graph is shown.\nThe cheapest price from city 0 to city 2 with at most 1 stop costs 200, as marked red in the picture."}, {"full_text": "Example 2:\nInput: n = 3, flights = [[0,1,100],[1,2,100],[0,2,500]], src = 0, dst = 2, k = 0\nOutput: 500\nExplanation: The graph is shown.\nThe cheapest price from city 0 to city 2 with at most 0 stop costs 500, as marked blue in the picture.", "input": "Input: n = 3, flights = [[0,1,100],[1,2,100],[0,2,500]], src = 0, dst = 2, k = 0", "output": "Output: 500", "explanation": "Explanation: The graph is shown.\nThe cheapest price from city 0 to city 2 with at most 0 stop costs 500, as marked blue in the picture."}], "constraints": "Constraints:\n1 <= n <= 100\n0 <= flights.length <= (n * (n - 1) / 2)\nflights[i].length == 3\n0 <= fromi, toi < n\nfromi != toi\n1 <= pricei <= 10^4\nThere will not be any multiple flights between two cities.\n0 <= src, dst, k < n\nsrc != dst", "notes": ""}, "785": {"label": "Medium", "title": "Is Graph Bipartite?", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5002, "total_accepted": 260899.99999999997, "total_submissions": 521500.0, "testcase_example": "'[[1,2,3],[0,2],[0,1,3],[0,2]]'", "body": "There is an undirected graph with n nodes, where each node is numbered between 0 and n - 1. You are given a 2D array graph, where graph[u] is an array of nodes that node u is adjacent to. More formally, for each v in graph[u], there is an undirected edge between node u and node v. The graph has the following properties:\nThere are no self-edges (graph[u] does not contain u).\nThere are no parallel edges (graph[u] does not contain duplicate values).\nIf v is in graph[u], then u is in graph[v] (the graph is undirected).\nThe graph may not be connected, meaning there may be two nodes u and v such that there is no path between them.\nA graph is bipartite if the nodes can be partitioned into two independent sets A and B such that every edge in the graph connects a node in set A and a node in set B.\nReturn true if and only if it is bipartite.", "examples": [{"full_text": "Example 1:\nInput: graph = [[1,2,3],[0,2],[0,1,3],[0,2]]\nOutput: false\nExplanation: There is no way to partition the nodes into two independent sets such that every edge connects a node in one and a node in the other.", "input": "Input: graph = [[1,2,3],[0,2],[0,1,3],[0,2]]", "output": "Output: false", "explanation": "Explanation: There is no way to partition the nodes into two independent sets such that every edge connects a node in one and a node in the other."}, {"full_text": "Example 2:\nInput: graph = [[1,3],[0,2],[1,3],[0,2]]\nOutput: true\nExplanation: We can partition the nodes into two sets: {0, 2} and {1, 3}.", "input": "Input: graph = [[1,3],[0,2],[1,3],[0,2]]", "output": "Output: true", "explanation": "Explanation: We can partition the nodes into two sets: {0, 2} and {1, 3}."}], "constraints": "Constraints:\ngraph.length == n\n1 <= n <= 100\n0 <= graph[u].length < n\n0 <= graph[u][i] <= n - 1\ngraph[u]\ndoes not contain\nu.\nAll the values of graph[u] are unique.\nIf graph[u] contains v, then graph[v] contains u.", "notes": ""}, "784": {"label": "Medium", "title": "Letter Case Permutation", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7171, "total_accepted": 194900.0, "total_submissions": 271800.0, "testcase_example": "'\"a1b2\"'", "body": "Given a string s, you\ncan transform every letter individually to be lowercase or uppercase to create another string.\nReturn a list of all possible strings we could create. Return the output in any order.", "examples": [{"full_text": "Example 1:\nInput: s = \"a1b2\"\nOutput: [\"a1b2\",\"a1B2\",\"A1b2\",\"A1B2\"]", "input": "Input: s = \"a1b2\"", "output": "Output: [\"a1b2\",\"a1B2\",\"A1b2\",\"A1B2\"]", "explanation": ""}, {"full_text": "Example 2:\nInput: s = \"3z4\"\nOutput: [\"3z4\",\"3Z4\"]", "input": "Input: s = \"3z4\"", "output": "Output: [\"3z4\",\"3Z4\"]", "explanation": ""}], "constraints": "Constraints:\n1 <= s.length <= 12\ns consists of lowercase English letters, uppercase English letters, and digits.", "notes": ""}, "781": {"label": "Medium", "title": "Rabbits in Forest", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5574, "total_accepted": 34300.0, "total_submissions": 61500.0, "testcase_example": "'[1,1,2]'", "body": "There is a forest with an unknown number of rabbits. We asked n rabbits \"How many rabbits have the same color as you?\" and collected the answers in an integer array answers where answers[i] is the answer of the i^th rabbit.\nGiven the array answers, return the minimum number of rabbits that could be in the forest.", "examples": [{"full_text": "Example 1:\nInput: answers = [1,1,2]\nOutput: 5\nExplanation:\nThe two rabbits that answered \"1\" could both be the same color, say red.\nThe rabbit that answered \"2\" can't be red or the answers would be inconsistent.\nSay the rabbit that answered \"2\" was blue.\nThen there should be 2 other blue rabbits in the forest that didn't answer into the array.\nThe smallest possible number of rabbits in the forest is therefore 5: 3 that answered plus 2 that didn't.", "input": "Input: answers = [1,1,2]", "output": "Output: 5", "explanation": "Explanation:\nThe two rabbits that answered \"1\" could both be the same color, say red.\nThe rabbit that answered \"2\" can't be red or the answers would be inconsistent.\nSay the rabbit that answered \"2\" was blue.\nThen there should be 2 other blue rabbits in the forest that didn't answer into the array.\nThe smallest possible number of rabbits in the forest is therefore 5: 3 that answered plus 2 that didn't."}, {"full_text": "Example 2:\nInput: answers = [10,10,10]\nOutput: 11", "input": "Input: answers = [10,10,10]", "output": "Output: 11", "explanation": ""}], "constraints": "Constraints:\n1 <= answers.length <= 1000\n0 <= answers[i] < 1000", "notes": ""}, "779": {"label": "Medium", "title": "K-th Symbol in Grammar", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3975, "total_accepted": 78200.0, "total_submissions": 196700.0, "testcase_example": "'1\\n1'", "body": "We build a table of n rows (1-indexed). We start by writing 0 in the 1^st row. Now in every subsequent row, we look at the previous row and replace each occurrence of 0 with 01, and each occurrence of 1 with 10.\nFor example, for n = 3, the 1^st row is 0, the 2^nd row is 01, and the 3^rd row is 0110.\nGiven two integer n and k, return the k^th (1-indexed) symbol in the n^th row of a table of n rows.", "examples": [{"full_text": "Example 1:\nInput: n = 1, k = 1\nOutput: 0\nExplanation: row 1: 0", "input": "Input: n = 1, k = 1", "output": "Output: 0", "explanation": "Explanation: row 1: 0"}, {"full_text": "Example 2:\nInput: n = 2, k = 1\nOutput: 0\nExplanation:\nrow 1: 0\nrow 2: 01", "input": "Input: n = 2, k = 1", "output": "Output: 0", "explanation": "Explanation:\nrow 1: 0\nrow 2: 01"}, {"full_text": "Example 3:\nInput: n = 2, k = 2\nOutput: 1\nExplanation:\nrow 1: 0\nrow 2: 01", "input": "Input: n = 2, k = 2", "output": "Output: 1", "explanation": "Explanation:\nrow 1: 0\nrow 2: 01"}], "constraints": "Constraints:\n1 <= n <= 30\n1 <= k <= 2^n - 1", "notes": ""}, "777": {"label": "Medium", "title": "Swap Adjacent in LR String", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3611, "total_accepted": 48300.0, "total_submissions": 133600.0, "testcase_example": "'\"RXXLRXRXL\"\\n\"XRLXXRRLX\"'", "body": "In a string composed of 'L', 'R', and 'X' characters, like \"RXXLRXRXL\", a move consists of either replacing one occurrence of \"XL\" with \"LX\", or replacing one occurrence of \"RX\" with \"XR\". Given the starting string start and the ending string end, return True if and only if there exists a sequence of moves to transform one string to the other.", "examples": [{"full_text": "Example 1:\nInput: start = \"RXXLRXRXL\", end = \"XRLXXRRLX\"\nOutput: true\nExplanation: We can transform start to end following these steps:\nRXXLRXRXL ->\nXRXLRXRXL ->\nXRLXRXRXL ->\nXRLXXRRXL ->\nXRLXXRRLX", "input": "Input: start = \"RXXLRXRXL\", end = \"XRLXXRRLX\"", "output": "Output: true", "explanation": "Explanation: We can transform start to end following these steps:\nRXXLRXRXL ->\nXRXLRXRXL ->\nXRLXRXRXL ->\nXRLXXRRXL ->\nXRLXXRRLX"}, {"full_text": "Example 2:\nInput: start = \"X\", end = \"L\"\nOutput: false", "input": "Input: start = \"X\", end = \"L\"", "output": "Output: false", "explanation": ""}], "constraints": "Constraints:\n1 <= start.length\n<= 10^4\nstart.length == end.length\nBoth start and end will only consist of characters in 'L', 'R', and\n'X'.", "notes": ""}, "775": {"label": "Medium", "title": "Global and Local Inversions", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4546, "total_accepted": 55100.0, "total_submissions": 121200.0, "testcase_example": "'[1,0,2]'", "body": "You are given an integer array nums of length n which represents a permutation of all the integers in the range [0, n - 1].\nThe number of global inversions is the number of the different pairs (i, j) where:\n0 <= i < j < n\nnums[i] > nums[j]\nThe number of local inversions is the number of indices i where:\n0 <= i < n - 1\nnums[i] > nums[i + 1]\nReturn true if the number of global inversions is equal to the number of local inversions.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,0,2]\nOutput: true\nExplanation: There is 1 global inversion and 1 local inversion.", "input": "Input: nums = [1,0,2]", "output": "Output: true", "explanation": "Explanation: There is 1 global inversion and 1 local inversion."}, {"full_text": "Example 2:\nInput: nums = [1,2,0]\nOutput: false\nExplanation: There are 2 global inversions and 1 local inversion.", "input": "Input: nums = [1,2,0]", "output": "Output: false", "explanation": "Explanation: There are 2 global inversions and 1 local inversion."}], "constraints": "Constraints:\nn == nums.length\n1 <= n <= 10^5\n0 <= nums[i] < n\nAll the integers of nums are unique.\nnums is a permutation of all the numbers in the range [0, n - 1].", "notes": ""}, "769": {"label": "Medium", "title": "Max Chunks To Make Sorted", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5746, "total_accepted": 67000.0, "total_submissions": 116600.0, "testcase_example": "'[4,3,2,1,0]'", "body": "You are given an integer array arr of length n that represents a permutation of the integers in the range [0, n - 1].\nWe split arr into some number of chunks (i.e., partitions), and individually sort each chunk. After concatenating them, the result should equal the sorted array.\nReturn the largest number of chunks we can make to sort the array.", "examples": [{"full_text": "Example 1:\nInput: arr = [4,3,2,1,0]\nOutput: 1\nExplanation:\nSplitting into two or more chunks will not return the required result.\nFor example, splitting into [4, 3], [2, 1, 0] will result in [3, 4, 0, 1, 2], which isn't sorted.", "input": "Input: arr = [4,3,2,1,0]", "output": "Output: 1", "explanation": "Explanation:\nSplitting into two or more chunks will not return the required result.\nFor example, splitting into [4, 3], [2, 1, 0] will result in [3, 4, 0, 1, 2], which isn't sorted."}, {"full_text": "Example 2:\nInput: arr = [1,0,2,3,4]\nOutput: 4\nExplanation:\nWe can split into two chunks, such as [1, 0], [2, 3, 4].\nHowever, splitting into [1, 0], [2], [3], [4] is the highest number of chunks possible.", "input": "Input: arr = [1,0,2,3,4]", "output": "Output: 4", "explanation": "Explanation:\nWe can split into two chunks, such as [1, 0], [2, 3, 4].\nHowever, splitting into [1, 0], [2], [3], [4] is the highest number of chunks possible."}], "constraints": "Constraints:\nn == arr.length\n1 <= n <= 10\n0 <= arr[i] < n\nAll the elements of arr are unique.", "notes": ""}, "767": {"label": "Medium", "title": "Reorganize String", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5171, "total_accepted": 193700.0, "total_submissions": 374500.0, "testcase_example": "'\"aab\"'", "body": "Given a string s, rearrange the characters of s so that any two adjacent characters are not the same.\nReturn any possible rearrangement of s or return \"\" if not possible.", "examples": [{"full_text": "Example 1:\nInput: s = \"aab\"\nOutput: \"aba\"", "input": "Input: s = \"aab\"", "output": "Output: \"aba\"", "explanation": ""}, {"full_text": "Example 2:\nInput: s = \"aaab\"\nOutput: \"\"", "input": "Input: s = \"aaab\"", "output": "Output: \"\"", "explanation": ""}], "constraints": "Constraints:\n1 <= s.length <= 500\ns consists of lowercase English letters.", "notes": ""}, "764": {"label": "Medium", "title": "Largest Plus Sign", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4853, "total_accepted": 47200.0, "total_submissions": 97300.0, "testcase_example": "'5\\n[[4,2]]'", "body": "You are given an integer n. You have an n x n binary grid grid with all values initially 1's except for some indices given in the array mines. The i^th element of the array mines is defined as mines[i] = [xi, yi] where grid[xi][yi] == 0.\nReturn the order of the largest axis-aligned plus sign of 1's contained in grid. If there is none, return 0.\nAn axis-aligned plus sign of 1's of order k has some center grid[r][c] == 1 along with four arms of length k - 1 going up, down, left, and right, and made of 1's. Note that there could be 0's or 1's beyond the arms of the plus sign, only the relevant area of the plus sign is checked for 1's.", "examples": [{"full_text": "Example 1:\nInput: n = 5, mines = [[4,2]]\nOutput: 2\nExplanation: In the above grid, the largest plus sign can only be of order 2. One of them is shown.", "input": "Input: n = 5, mines = [[4,2]]", "output": "Output: 2", "explanation": "Explanation: In the above grid, the largest plus sign can only be of order 2. One of them is shown."}, {"full_text": "Example 2:\nInput: n = 1, mines = [[0,0]]\nOutput: 0\nExplanation: There is no plus sign, so return 0.", "input": "Input: n = 1, mines = [[0,0]]", "output": "Output: 0", "explanation": "Explanation: There is no plus sign, so return 0."}], "constraints": "Constraints:\n1 <= n <= 500\n1 <= mines.length <= 5000\n0 <= xi, yi < n\nAll the pairs (xi, yi) are unique.", "notes": ""}, "763": {"label": "Medium", "title": "Partition Labels", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7864, "total_accepted": 327200.0, "total_submissions": 416000.0, "testcase_example": "'\"ababcbacadefegdehijhklij\"'", "body": "You are given a string s. We want to partition the string into as many parts as possible so that each letter appears in at most one part.\nNote that the partition is done so that after concatenating all the parts in order, the resultant string should be s.\nReturn a list of integers representing the size of these parts.", "examples": [{"full_text": "Example 1:\nInput: s = \"ababcbacadefegdehijhklij\"\nOutput: [9,7,8]\nExplanation:\nThe partition is \"ababcbaca\", \"defegde\", \"hijhklij\".\nThis is a partition so that each letter appears in at most one part.\nA partition like \"ababcbacadefegde\", \"hijhklij\" is incorrect, because it splits s into less parts.", "input": "Input: s = \"ababcbacadefegdehijhklij\"", "output": "Output: [9,7,8]", "explanation": "Explanation:\nThe partition is \"ababcbaca\", \"defegde\", \"hijhklij\".\nThis is a partition so that each letter appears in at most one part.\nA partition like \"ababcbacadefegde\", \"hijhklij\" is incorrect, because it splits s into less parts."}, {"full_text": "Example 2:\nInput: s = \"eccbbbbdec\"\nOutput: [10]", "input": "Input: s = \"eccbbbbdec\"", "output": "Output: [10]", "explanation": ""}], "constraints": "Constraints:\n1 <= s.length <= 500\ns consists of lowercase English letters.", "notes": ""}, "756": {"label": "Medium", "title": "Pyramid Transition Matrix", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5487, "total_accepted": 26600.0, "total_submissions": 48400.0, "testcase_example": "'\"BCD\"\\n[\"BCC\",\"CDE\",\"CEA\",\"FFF\"]'", "body": "You are stacking blocks to form a pyramid. Each block has a color, which is represented by a single letter. Each row of blocks contains one less block than the row beneath it and is centered on top.\nTo make the pyramid aesthetically pleasing, there are only specific triangular patterns that are allowed. A triangular pattern consists of a single block stacked on top of two blocks. The patterns are given\nas a list of\nthree-letter strings allowed, where the first two characters of a pattern represent the left and right bottom blocks respectively, and the third character is the top block.\nFor example, \"ABC\" represents a triangular pattern with a 'C' block stacked on top of an 'A' (left) and 'B' (right) block. Note that this is different from \"BAC\" where 'B' is on the left bottom and 'A' is on the right bottom.\nYou start with a bottom row of blocks bottom, given as a single string, that you must use as the base of the pyramid.\nGiven bottom and allowed, return true if you can build the pyramid all the way to the top such that every triangular pattern in the pyramid is in allowed, or false otherwise.", "examples": [{"full_text": "Example 1:\nInput: bottom = \"BCD\", allowed = [\"BCC\",\"CDE\",\"CEA\",\"FFF\"]\nOutput: true\nExplanation: The allowed triangular patterns are shown on the right.\nStarting from the bottom (level 3), we can build \"CE\" on level 2 and then build \"E\" on level 1.\nThere are three triangular patterns in the pyramid, which are \"BCC\", \"CDE\", and \"CEA\". All are allowed.", "input": "Input: bottom = \"BCD\", allowed = [\"BCC\",\"CDE\",\"CEA\",\"FFF\"]", "output": "Output: true", "explanation": "Explanation: The allowed triangular patterns are shown on the right.\nStarting from the bottom (level 3), we can build \"CE\" on level 2 and then build \"E\" on level 1.\nThere are three triangular patterns in the pyramid, which are \"BCC\", \"CDE\", and \"CEA\". All are allowed."}, {"full_text": "Example 2:\nInput: bottom = \"AAAA\", allowed = [\"AAB\",\"AAC\",\"BCD\",\"BBE\",\"DEF\"]\nOutput: false\nExplanation: The allowed triangular patterns are shown on the right.\nStarting from the bottom (level 4), there are multiple ways to build level 3, but trying all the possibilites, you will get always stuck before building level 1.", "input": "Input: bottom = \"AAAA\", allowed = [\"AAB\",\"AAC\",\"BCD\",\"BBE\",\"DEF\"]", "output": "Output: false", "explanation": "Explanation: The allowed triangular patterns are shown on the right.\nStarting from the bottom (level 4), there are multiple ways to build level 3, but trying all the possibilites, you will get always stuck before building level 1."}], "constraints": "Constraints:\n2 <= bottom.length <= 6\n0 <= allowed.length <= 216\nallowed[i].length == 3\nThe letters in all input strings are from the set {'A', 'B', 'C', 'D', 'E', 'F'}.\nAll the values of allowed are unique.", "notes": ""}, "754": {"label": "Medium", "title": "Reach a Number", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.41700000000000004, "total_accepted": 37100.0, "total_submissions": 89000.0, "testcase_example": "'2'", "body": "You are standing at position 0 on an infinite number line. There is a destination at position target.\nYou can make some number of moves numMoves so that:\nOn each move, you can either go left or right.\nDuring the i^th move (starting from i == 1 to i == numMoves), you take i steps in the chosen direction.\nGiven the integer target, return the minimum number of moves required (i.e., the minimum numMoves) to reach the destination.", "examples": [{"full_text": "Example 1:\nInput: target = 2\nOutput: 3\nExplanation:\nOn the 1^st move, we step from 0 to 1 (1 step).\nOn the 2^nd move, we step from 1 to -1 (2 steps).\nOn the 3^rd move, we step from -1 to 2 (3 steps).", "input": "Input: target = 2", "output": "Output: 3", "explanation": "Explanation:\nOn the 1^st move, we step from 0 to 1 (1 step).\nOn the 2^nd move, we step from 1 to -1 (2 steps).\nOn the 3^rd move, we step from -1 to 2 (3 steps)."}, {"full_text": "Example 2:\nInput: target = 3\nOutput: 2\nExplanation:\nOn the 1^st move, we step from 0 to 1 (1 step).\nOn the 2^nd move, we step from 1 to 3 (2 steps).", "input": "Input: target = 3", "output": "Output: 2", "explanation": "Explanation:\nOn the 1^st move, we step from 0 to 1 (1 step).\nOn the 2^nd move, we step from 1 to 3 (2 steps)."}], "constraints": "Constraints:\n-10^9 <= target <= 10^9\ntarget != 0", "notes": ""}, "752": {"label": "Medium", "title": "Open the Lock", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.552, "total_accepted": 148800.0, "total_submissions": 269500.0, "testcase_example": "'[\"0201\",\"0101\",\"0102\",\"1212\",\"2002\"]\\n\"0202\"'", "body": "You have a lock in front of you with 4 circular wheels. Each wheel has 10 slots: '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'. The wheels can rotate freely and wrap around: for example we can turn '9' to be '0', or '0' to be '9'. Each move consists of turning one wheel one slot.\nThe lock initially starts at '0000', a string representing the state of the 4 wheels.\nYou are given a list of deadends dead ends, meaning if the lock displays any of these codes, the wheels of the lock will stop turning and you will be unable to open it.\nGiven a target representing the value of the wheels that will unlock the lock, return the minimum total number of turns required to open the lock, or -1 if it is impossible.", "examples": [{"full_text": "Example 1:\nInput: deadends = [\"0201\",\"0101\",\"0102\",\"1212\",\"2002\"], target = \"0202\"\nOutput: 6\nExplanation:\nA sequence of valid moves would be \"0000\" -> \"1000\" -> \"1100\" -> \"1200\" -> \"1201\" -> \"1202\" -> \"0202\".\nNote that a sequence like \"0000\" -> \"0001\" -> \"0002\" -> \"0102\" -> \"0202\" would be invalid,\nbecause the wheels of the lock become stuck after the display becomes the dead end \"0102\".", "input": "Input: deadends = [\"0201\",\"0101\",\"0102\",\"1212\",\"2002\"], target = \"0202\"", "output": "Output: 6", "explanation": "Explanation:\nA sequence of valid moves would be \"0000\" -> \"1000\" -> \"1100\" -> \"1200\" -> \"1201\" -> \"1202\" -> \"0202\".\nNote that a sequence like \"0000\" -> \"0001\" -> \"0002\" -> \"0102\" -> \"0202\" would be invalid,\nbecause the wheels of the lock become stuck after the display becomes the dead end \"0102\"."}, {"full_text": "Example 2:\nInput: deadends = [\"8888\"], target = \"0009\"\nOutput: 1\nExplanation: We can turn the last wheel in reverse to move from \"0000\" -> \"0009\".", "input": "Input: deadends = [\"8888\"], target = \"0009\"", "output": "Output: 1", "explanation": "Explanation: We can turn the last wheel in reverse to move from \"0000\" -> \"0009\"."}, {"full_text": "Example 3:\nInput: deadends = [\"8887\",\"8889\",\"8878\",\"8898\",\"8788\",\"8988\",\"7888\",\"9888\"], target = \"8888\"\nOutput: -1\nExplanation: We cannot reach the target without getting stuck.", "input": "Input: deadends = [\"8887\",\"8889\",\"8878\",\"8898\",\"8788\",\"8988\",\"7888\",\"9888\"], target = \"8888\"", "output": "Output: -1", "explanation": "Explanation: We cannot reach the target without getting stuck."}], "constraints": "Constraints:\n1 <= deadends.length <= 500\ndeadends[i].length == 4\ntarget.length == 4\ntarget will not be in the list deadends.\ntarget and deadends[i] consist of digits only.", "notes": ""}, "743": {"label": "Medium", "title": "Network Delay Time", "tags": "algorithms,binary-search", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.48, "total_accepted": 216300.0, "total_submissions": 450600.0, "testcase_example": "'[[2,1,1],[2,3,1],[3,4,1]]\\n4\\n2'", "body": "You are given a network of n nodes, labeled from 1 to n. You are also given times, a list of travel times as directed edges times[i] = (ui, vi, wi), where ui is the source node, vi is the target node, and wi is the time it takes for a signal to travel from source to target.\nWe will send a signal from a given node k. Return the time it takes for all the n nodes to receive the signal. If it is impossible for all the n nodes to receive the signal, return -1.", "examples": [{"full_text": "Example 1:\nInput: times = [[2,1,1],[2,3,1],[3,4,1]], n = 4, k = 2\nOutput: 2", "input": "Input: times = [[2,1,1],[2,3,1],[3,4,1]], n = 4, k = 2", "output": "Output: 2", "explanation": ""}, {"full_text": "Example 2:\nInput: times = [[1,2,1]], n = 2, k = 1\nOutput: 1", "input": "Input: times = [[1,2,1]], n = 2, k = 1", "output": "Output: 1", "explanation": ""}, {"full_text": "Example 3:\nInput: times = [[1,2,1]], n = 2, k = 2\nOutput: -1", "input": "Input: times = [[1,2,1]], n = 2, k = 2", "output": "Output: -1", "explanation": ""}], "constraints": "Constraints:\n1 <= k <= n <= 100\n1 <= times.length <= 6000\ntimes[i].length == 3\n1 <= ui, vi <= n\nui != vi\n0 <= wi <= 100\nAll the pairs (ui, vi) are unique. (i.e., no multiple edges.)", "notes": ""}, "740": {"label": "Medium", "title": "Delete and Earn", "tags": "algorithms,dynamic-programming", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.55, "total_accepted": 124500.0, "total_submissions": 226300.0, "testcase_example": "'[3,4,2]'", "body": "You are given an integer array nums. You want to maximize the number of points you get by performing the following operation any number of times:\nPick any nums[i] and delete it to earn nums[i] points. Afterwards, you must delete every element equal to nums[i] - 1 and every element equal to nums[i] + 1.\nReturn the maximum number of points you can earn by applying the above operation some number of times.", "examples": [{"full_text": "Example 1:\nInput: nums = [3,4,2]\nOutput: 6\nExplanation: You can perform the following operations:\n- Delete 4 to earn 4 points. Consequently, 3 is also deleted. nums = [2].\n- Delete 2 to earn 2 points. nums = [].\nYou earn a total of 6 points.", "input": "Input: nums = [3,4,2]", "output": "Output: 6", "explanation": "Explanation: You can perform the following operations:\n- Delete 4 to earn 4 points. Consequently, 3 is also deleted. nums = [2].\n- Delete 2 to earn 2 points. nums = [].\nYou earn a total of 6 points."}, {"full_text": "Example 2:\nInput: nums = [2,2,3,3,3,4]\nOutput: 9\nExplanation: You can perform the following operations:\n- Delete a 3 to earn 3 points. All 2's and 4's are also deleted. nums = [3,3].\n- Delete a 3 again to earn 3 points. nums = [3].\n- Delete a 3 once more to earn 3 points. nums = [].\nYou earn a total of 9 points.", "input": "Input: nums = [2,2,3,3,3,4]", "output": "Output: 9", "explanation": "Explanation: You can perform the following operations:\n- Delete a 3 to earn 3 points. All 2's and 4's are also deleted. nums = [3,3].\n- Delete a 3 again to earn 3 points. nums = [3].\n- Delete a 3 once more to earn 3 points. nums = [].\nYou earn a total of 9 points."}], "constraints": "Constraints:\n1 <= nums.length <= 2 * 10^4\n1 <= nums[i] <= 10^4", "notes": ""}, "739": {"label": "Medium", "title": "Daily Temperatures", "tags": "algorithms,hash-table,stack", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6681, "total_accepted": 353200.0, "total_submissions": 528700.0, "testcase_example": "'[73,74,75,71,69,72,76,73]'", "body": "Given an array of integers temperatures represents the daily temperatures, return an array answer such that answer[i] is the number of days you have to wait after the i^th day to get a warmer temperature. If there is no future day for which this is possible, keep answer[i] == 0 instead.", "examples": [{"full_text": "Example 1:\nInput: temperatures = [73,74,75,71,69,72,76,73]\nOutput: [1,1,4,2,1,1,0,0]", "input": "Input: temperatures = [73,74,75,71,69,72,76,73]", "output": "Output: [1,1,4,2,1,1,0,0]", "explanation": ""}, {"full_text": "Example 2:\nInput: temperatures = [30,40,50,60]\nOutput: [1,1,1,0]", "input": "Input: temperatures = [30,40,50,60]", "output": "Output: [1,1,1,0]", "explanation": ""}, {"full_text": "Example 3:\nInput: temperatures = [30,60,90]\nOutput: [1,1,0]", "input": "Input: temperatures = [30,60,90]", "output": "Output: [1,1,0]", "explanation": ""}], "constraints": "Constraints:\n1 <=\ntemperatures.length <= 10^5\n30 <=\ntemperatures[i] <= 100", "notes": ""}, "738": {"label": "Medium", "title": "Monotone Increasing Digits", "tags": "algorithms,greedy", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.46630000000000005, "total_accepted": 35500.0, "total_submissions": 76100.0, "testcase_example": "'10'", "body": "An integer has monotone increasing digits if and only if each pair of adjacent digits x and y satisfy x <= y.\nGiven an integer n, return the largest number that is less than or equal to n with monotone increasing digits.", "examples": [{"full_text": "Example 1:\nInput: n = 10\nOutput: 9", "input": "Input: n = 10", "output": "Output: 9", "explanation": ""}, {"full_text": "Example 2:\nInput: n = 1234\nOutput: 1234", "input": "Input: n = 1234", "output": "Output: 1234", "explanation": ""}, {"full_text": "Example 3:\nInput: n = 332\nOutput: 299", "input": "Input: n = 332", "output": "Output: 299", "explanation": ""}], "constraints": "Constraints:\n0 <= n <= 10^9", "notes": ""}, "735": {"label": "Medium", "title": "Asteroid Collision", "tags": "algorithms,stack", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.44329999999999997, "total_accepted": 180300.0, "total_submissions": 406700.0, "testcase_example": "'[5,10,-5]'", "body": "We are given an array asteroids of integers representing asteroids in a row.\nFor each asteroid, the absolute value represents its size, and the sign represents its direction (positive meaning right, negative meaning left). Each asteroid moves at the same speed.\nFind out the state of the asteroids after all collisions. If two asteroids meet, the smaller one will explode. If both are the same size, both will explode. Two asteroids moving in the same direction will never meet.", "examples": [{"full_text": "Example 1:\nInput: asteroids = [5,10,-5]\nOutput: [5,10]\nExplanation: The 10 and -5 collide resulting in 10. The 5 and 10 never collide.", "input": "Input: asteroids = [5,10,-5]", "output": "Output: [5,10]", "explanation": "Explanation: The 10 and -5 collide resulting in 10. The 5 and 10 never collide."}, {"full_text": "Example 2:\nInput: asteroids = [8,-8]\nOutput: []\nExplanation: The 8 and -8 collide exploding each other.", "input": "Input: asteroids = [8,-8]", "output": "Output: []", "explanation": "Explanation: The 8 and -8 collide exploding each other."}, {"full_text": "Example 3:\nInput: asteroids = [10,2,-5]\nOutput: [10]\nExplanation: The 2 and -5 collide resulting in -5. The 10 and -5 collide resulting in 10.", "input": "Input: asteroids = [10,2,-5]", "output": "Output: [10]", "explanation": "Explanation: The 2 and -5 collide resulting in -5. The 10 and -5 collide resulting in 10."}], "constraints": "Constraints:\n2 <= asteroids.length <= 10^4\n-1000 <= asteroids[i] <= 1000\nasteroids[i] != 0", "notes": ""}, "731": {"label": "Medium", "title": "My Calendar II", "tags": "algorithms,google,array,binary-search-tree", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5303, "total_accepted": 69700.0, "total_submissions": 131500.0, "testcase_example": "'[\"MyCalendarTwo\",\"book\",\"book\",\"book\",\"book\",\"book\",\"book\"]\\n' +\n  '[[],[10,20],[50,60],[10,40],[5,15],[5,10],[25,55]]'", "body": "You are implementing a program to use as your calendar. We can add a new event if adding the event will not cause a triple booking.\nA triple booking happens when three events have some non-empty intersection (i.e., some moment is common to all the three events.).\nThe event can be represented as a pair of integers start and end that represents a booking on the half-open interval [start, end), the range of real numbers x such that start <= x < end.\nImplement the MyCalendarTwo class:\nMyCalendarTwo() Initializes the calendar object.\nboolean book(int start, int end) Returns true if the event can be added to the calendar successfully without causing a triple booking. Otherwise, return false and do not add the event to the calendar.", "examples": [{"full_text": "Example 1:\nInput\n[\"MyCalendarTwo\", \"book\", \"book\", \"book\", \"book\", \"book\", \"book\"]\n[[], [10, 20], [50, 60], [10, 40], [5, 15], [5, 10], [25, 55]]\nOutput\n[null, true, true, true, false, true, true]\nExplanation\nMyCalendarTwo myCalendarTwo = new MyCalendarTwo();\nmyCalendarTwo.book(10, 20); // return True, The event can be booked.\nmyCalendarTwo.book(50, 60); // return True, The event can be booked.\nmyCalendarTwo.book(10, 40); // return True, The event can be double booked.\nmyCalendarTwo.book(5, 15); // return False, The event cannot be booked, because it would result in a triple booking.\nmyCalendarTwo.book(5, 10); // return True, The event can be booked, as it does not use time 10 which is already double booked.\nmyCalendarTwo.book(25, 55); // return True, The event can be booked, as the time in [25, 40) will be double booked with the third event, the time [40, 50) will be single booked, and the time [50, 55) will be double booked with the second event.", "input": "Input\n[\"MyCalendarTwo\", \"book\", \"book\", \"book\", \"book\", \"book\", \"book\"]\n[[], [10, 20], [50, 60], [10, 40], [5, 15], [5, 10], [25, 55]]", "output": "Output\n[null, true, true, true, false, true, true]", "explanation": "Explanation\nMyCalendarTwo myCalendarTwo = new MyCalendarTwo();\nmyCalendarTwo.book(10, 20); // return True, The event can be booked.\nmyCalendarTwo.book(50, 60); // return True, The event can be booked.\nmyCalendarTwo.book(10, 40); // return True, The event can be double booked.\nmyCalendarTwo.book(5, 15); // return False, The event cannot be booked, because it would result in a triple booking.\nmyCalendarTwo.book(5, 10); // return True, The event can be booked, as it does not use time 10 which is already double booked.\nmyCalendarTwo.book(25, 55); // return True, The event can be booked, as the time in [25, 40) will be double booked with the third event, the time [40, 50) will be single booked, and the time [50, 55) will be double booked with the second event."}], "constraints": "Constraints:\n0 <= start < end <= 10^9\nAt most 1000 calls will be made to book.", "notes": ""}, "729": {"label": "Medium", "title": "My Calendar I", "tags": "algorithms,google,array", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5495, "total_accepted": 139500.0, "total_submissions": 253800.0, "testcase_example": "'[\"MyCalendar\",\"book\",\"book\",\"book\"]\\n[[],[10,20],[15,25],[20,30]]'", "body": "You are implementing a program to use as your calendar. We can add a new event if adding the event will not cause a double booking.\nA double booking happens when two events have some non-empty intersection (i.e., some moment is common to both events.).\nThe event can be represented as a pair of integers start and end that represents a booking on the half-open interval [start, end), the range of real numbers x such that start <= x < end.\nImplement the MyCalendar class:\nMyCalendar() Initializes the calendar object.\nboolean book(int start, int end) Returns true if the event can be added to the calendar successfully without causing a double booking. Otherwise, return false and do not add the event to the calendar.", "examples": [{"full_text": "Example 1:\nInput\n[\"MyCalendar\", \"book\", \"book\", \"book\"]\n[[], [10, 20], [15, 25], [20, 30]]\nOutput\n[null, true, false, true]\nExplanation\nMyCalendar myCalendar = new MyCalendar();\nmyCalendar.book(10, 20); // return True\nmyCalendar.book(15, 25); // return False, It can not be booked because time 15 is already booked by another event.\nmyCalendar.book(20, 30); // return True, The event can be booked, as the first event takes every time less than 20, but not including 20.", "input": "Input\n[\"MyCalendar\", \"book\", \"book\", \"book\"]\n[[], [10, 20], [15, 25], [20, 30]]", "output": "Output\n[null, true, false, true]", "explanation": "Explanation\nMyCalendar myCalendar = new MyCalendar();\nmyCalendar.book(10, 20); // return True\nmyCalendar.book(15, 25); // return False, It can not be booked because time 15 is already booked by another event.\nmyCalendar.book(20, 30); // return True, The event can be booked, as the first event takes every time less than 20, but not including 20."}], "constraints": "Constraints:\n0 <= start < end <= 10^9\nAt most 1000 calls will be made to book.", "notes": ""}, "725": {"label": "Medium", "title": "Split Linked List in Parts", "tags": "algorithms,amazon,linked-list", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5654, "total_accepted": 91900.0, "total_submissions": 162600.0, "testcase_example": "'[1,2,3]\\n5'", "body": "Given the head of a singly linked list and an integer k, split the linked list into k consecutive linked list parts.\nThe length of each part should be as equal as possible: no two parts should have a size differing by more than one. This may lead to some parts being null.\nThe parts should be in the order of occurrence in the input list, and parts occurring earlier should always have a size greater than or equal to parts occurring later.\nReturn an array of the k parts.", "examples": [{"full_text": "Example 1:\nInput: head = [1,2,3], k = 5\nOutput: [[1],[2],[3],[],[]]\nExplanation:\nThe first element output[0] has output[0].val = 1, output[0].next = null.\nThe last element output[4] is null, but its string representation as a ListNode is [].", "input": "Input: head = [1,2,3], k = 5", "output": "Output: [[1],[2],[3],[],[]]", "explanation": "Explanation:\nThe first element output[0] has output[0].val = 1, output[0].next = null.\nThe last element output[4] is null, but its string representation as a ListNode is []."}, {"full_text": "Example 2:\nInput: head = [1,2,3,4,5,6,7,8,9,10], k = 3\nOutput: [[1,2,3,4],[5,6,7],[8,9,10]]\nExplanation:\nThe input has been split into consecutive parts with size difference at most 1, and earlier parts are a larger size than the later parts.", "input": "Input: head = [1,2,3,4,5,6,7,8,9,10], k = 3", "output": "Output: [[1,2,3,4],[5,6,7],[8,9,10]]", "explanation": "Explanation:\nThe input has been split into consecutive parts with size difference at most 1, and earlier parts are a larger size than the later parts."}], "constraints": "Constraints:\nThe number of nodes in the list is in the range [0, 1000].\n0 <= Node.val <= 1000\n1 <= k <= 50", "notes": ""}, "722": {"label": "Medium", "title": "Remove Comments", "tags": "algorithms,microsoft,string", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3725, "total_accepted": 51900.0, "total_submissions": 139200.0, "testcase_example": "'[\"/*Test program */\", \"int main()\", \"{ \", \" // variable declaration \", \"int a, b, c;\", \"/* This is a test\", \" multiline \", \" comment for \", \" testing */\", \"a = b + c;\", \"}\"]'", "body": "Given a C++ program, remove comments from it. The program source is an array of strings source where source[i] is the i^th line of the source code. This represents the result of splitting the original source code string by the newline character '\\n'.\nIn C++, there are two types of comments, line comments, and block comments.\nThe string \"//\" denotes a line comment, which represents that it and the rest of the characters to the right of it in the same line should be ignored.\nThe string \"/*\" denotes a block comment, which represents that all characters until the next (non-overlapping) occurrence of \"*/\" should be ignored. (Here, occurrences happen in reading order: line by line from left to right.) To be clear, the string \"/*/\" does not yet end the block comment, as the ending would be overlapping the beginning.\nThe first effective comment takes precedence over others.\nFor example, if the string \"//\" occurs in a block comment, it is ignored.\nSimilarly, if the string \"/*\" occurs in a line or block comment, it is also ignored.\nIf a certain line of code is empty after removing comments, you must not output that line: each string in the answer list will be non-empty.\nThere will be no control characters, single quote, or double quote characters.\nFor example, source = \"string s = \"/* Not a comment. */\";\" will not be a test case.\nAlso, nothing else such as defines or macros will interfere with the comments.\nIt is guaranteed that every open block comment will eventually be closed, so \"/*\" outside of a line or block comment always starts a new comment.\nFinally, implicit newline characters can be deleted by block comments. Please see the examples below for details.\nAfter removing the comments from the source code, return the source code in the same format.", "examples": [{"full_text": "Example 1:\nInput: source = [\"/*Test program */\", \"int main()\", \"{ \", \" // variable declaration \", \"int a, b, c;\", \"/* This is a test\", \" multiline \", \" comment for \", \" testing */\", \"a = b + c;\", \"}\"]\nOutput: [\"int main()\",\"{ \",\" \",\"int a, b, c;\",\"a = b + c;\",\"}\"]\nExplanation: The line by line code is visualized as below:\n/*Test program */\nint main()\n{\n// variable declaration\nint a, b, c;\n/* This is a test\nmultiline\ncomment for\ntesting */\na = b + c;\n}\nThe string /* denotes a block comment, including line 1 and lines 6-9. The string // denotes line 4 as comments.\nThe line by line output code is visualized as below:\nint main()\n{\n\nint a, b, c;\na = b + c;\n}", "input": "Input: source = [\"/*Test program */\", \"int main()\", \"{ \", \" // variable declaration \", \"int a, b, c;\", \"/* This is a test\", \" multiline \", \" comment for \", \" testing */\", \"a = b + c;\", \"}\"]", "output": "Output: [\"int main()\",\"{ \",\" \",\"int a, b, c;\",\"a = b + c;\",\"}\"]", "explanation": "Explanation: The line by line code is visualized as below:\n/*Test program */\nint main()\n{\n// variable declaration\nint a, b, c;\n/* This is a test\nmultiline\ncomment for\ntesting */\na = b + c;\n}\nThe string /* denotes a block comment, including line 1 and lines 6-9. The string // denotes line 4 as comments.\nThe line by line output code is visualized as below:\nint main()\n{\n\nint a, b, c;\na = b + c;\n}"}, {"full_text": "Example 2:\nInput: source = [\"a/*comment\", \"line\", \"more_comment*/b\"]\nOutput: [\"ab\"]\nExplanation: The original source string is \"a/*comment\\nline\\nmore_comment*/b\", where we have bolded the newline characters. After deletion, the implicit newline characters are deleted, leaving the string \"ab\", which when delimited by newline characters becomes [\"ab\"].", "input": "Input: source = [\"a/*comment\", \"line\", \"more_comment*/b\"]", "output": "Output: [\"ab\"]", "explanation": "Explanation: The original source string is \"a/*comment\\nline\\nmore_comment*/b\", where we have bolded the newline characters. After deletion, the implicit newline characters are deleted, leaving the string \"ab\", which when delimited by newline characters becomes [\"ab\"]."}], "constraints": "Constraints:\n1 <= source.length <= 100\n0 <= source[i].length <= 80\nsource[i] consists of printable ASCII characters.\nEvery open block comment is eventually closed.\nThere are no single-quote or\ndouble-quote in the input.", "notes": ""}, "721": {"label": "Medium", "title": "Accounts Merge", "tags": "algorithms,facebook,depth-first-search,union-find", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5540999999999999, "total_accepted": 227700.0, "total_submissions": 410800.0, "testcase_example": "'[[\"John\",\"johnsmith@mail.com\",\"john_newyork@mail.com\"],[\"John\",\"johnsmith@mail.com\",\"john00@mail.com\"],[\"Mary\",\"mary@mail.com\"],[\"John\",\"johnnybravo@mail.com\"]]'", "body": "Given a list of accounts where each element accounts[i] is a list of strings, where the first element accounts[i][0] is a name, and the rest of the elements are emails representing emails of the account.\nNow, we would like to merge these accounts. Two accounts definitely belong to the same person if there is some common email to both accounts. Note that even if two accounts have the same name, they may belong to different people as people could have the same name. A person can have any number of accounts initially, but all of their accounts definitely have the same name.\nAfter merging the accounts, return the accounts in the following format: the first element of each account is the name, and the rest of the elements are emails in sorted order. The accounts themselves can be returned in any order.", "examples": [{"full_text": "Example 1:\nInput: accounts = [[\"John\",\"johnsmith@mail.com\",\"john_newyork@mail.com\"],[\"John\",\"johnsmith@mail.com\",\"john00@mail.com\"],[\"Mary\",\"mary@mail.com\"],[\"John\",\"johnnybravo@mail.com\"]]\nOutput: [[\"John\",\"john00@mail.com\",\"john_newyork@mail.com\",\"johnsmith@mail.com\"],[\"Mary\",\"mary@mail.com\"],[\"John\",\"johnnybravo@mail.com\"]]\nExplanation:\nThe first and second John's are the same person as they have the common email \"johnsmith@mail.com\".\nThe third John and Mary are different people as none of their email addresses are used by other accounts.\nWe could return these lists in any order, for example the answer [['Mary', 'mary@mail.com'], ['John', 'johnnybravo@mail.com'],\n['John', 'john00@mail.com', 'john_newyork@mail.com', 'johnsmith@mail.com']] would still be accepted.", "input": "Input: accounts = [[\"John\",\"johnsmith@mail.com\",\"john_newyork@mail.com\"],[\"John\",\"johnsmith@mail.com\",\"john00@mail.com\"],[\"Mary\",\"mary@mail.com\"],[\"John\",\"johnnybravo@mail.com\"]]", "output": "Output: [[\"John\",\"john00@mail.com\",\"john_newyork@mail.com\",\"johnsmith@mail.com\"],[\"Mary\",\"mary@mail.com\"],[\"John\",\"johnnybravo@mail.com\"]]", "explanation": "Explanation:\nThe first and second John's are the same person as they have the common email \"johnsmith@mail.com\".\nThe third John and Mary are different people as none of their email addresses are used by other accounts.\nWe could return these lists in any order, for example the answer [['Mary', 'mary@mail.com'], ['John', 'johnnybravo@mail.com'],\n['John', 'john00@mail.com', 'john_newyork@mail.com', 'johnsmith@mail.com']] would still be accepted."}, {"full_text": "Example 2:\nInput: accounts = [[\"Gabe\",\"Gabe0@m.co\",\"Gabe3@m.co\",\"Gabe1@m.co\"],[\"Kevin\",\"Kevin3@m.co\",\"Kevin5@m.co\",\"Kevin0@m.co\"],[\"Ethan\",\"Ethan5@m.co\",\"Ethan4@m.co\",\"Ethan0@m.co\"],[\"Hanzo\",\"Hanzo3@m.co\",\"Hanzo1@m.co\",\"Hanzo0@m.co\"],[\"Fern\",\"Fern5@m.co\",\"Fern1@m.co\",\"Fern0@m.co\"]]\nOutput: [[\"Ethan\",\"Ethan0@m.co\",\"Ethan4@m.co\",\"Ethan5@m.co\"],[\"Gabe\",\"Gabe0@m.co\",\"Gabe1@m.co\",\"Gabe3@m.co\"],[\"Hanzo\",\"Hanzo0@m.co\",\"Hanzo1@m.co\",\"Hanzo3@m.co\"],[\"Kevin\",\"Kevin0@m.co\",\"Kevin3@m.co\",\"Kevin5@m.co\"],[\"Fern\",\"Fern0@m.co\",\"Fern1@m.co\",\"Fern5@m.co\"]]", "input": "Input: accounts = [[\"Gabe\",\"Gabe0@m.co\",\"Gabe3@m.co\",\"Gabe1@m.co\"],[\"Kevin\",\"Kevin3@m.co\",\"Kevin5@m.co\",\"Kevin0@m.co\"],[\"Ethan\",\"Ethan5@m.co\",\"Ethan4@m.co\",\"Ethan0@m.co\"],[\"Hanzo\",\"Hanzo3@m.co\",\"Hanzo1@m.co\",\"Hanzo0@m.co\"],[\"Fern\",\"Fern5@m.co\",\"Fern1@m.co\",\"Fern0@m.co\"]]", "output": "Output: [[\"Ethan\",\"Ethan0@m.co\",\"Ethan4@m.co\",\"Ethan5@m.co\"],[\"Gabe\",\"Gabe0@m.co\",\"Gabe1@m.co\",\"Gabe3@m.co\"],[\"Hanzo\",\"Hanzo0@m.co\",\"Hanzo1@m.co\",\"Hanzo3@m.co\"],[\"Kevin\",\"Kevin0@m.co\",\"Kevin3@m.co\",\"Kevin5@m.co\"],[\"Fern\",\"Fern0@m.co\",\"Fern1@m.co\",\"Fern5@m.co\"]]", "explanation": ""}], "constraints": "Constraints:\n1 <= accounts.length <= 1000\n2 <= accounts[i].length <= 10\n1 <= accounts[i][j] <= 30\naccounts[i][0] consists of English letters.\naccounts[i][j] (for j > 0) is a valid email.", "notes": ""}, "720": {"label": "Medium", "title": "Longest Word in Dictionary", "tags": "algorithms,hash-table,trie", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5075999999999999, "total_accepted": 107600.0, "total_submissions": 211900.0, "testcase_example": "'[\"w\",\"wo\",\"wor\",\"worl\",\"world\"]'", "body": "Given an array of strings words representing an English Dictionary, return the longest word in words that can be built one character at a time by other words in words.\nIf there is more than one possible answer, return the longest word with the smallest lexicographical order. If there is no answer, return the empty string.", "examples": [{"full_text": "Example 1:\nInput: words = [\"w\",\"wo\",\"wor\",\"worl\",\"world\"]\nOutput: \"world\"\nExplanation: The word \"world\" can be built one character at a time by \"w\", \"wo\", \"wor\", and \"worl\".", "input": "Input: words = [\"w\",\"wo\",\"wor\",\"worl\",\"world\"]", "output": "Output: \"world\"", "explanation": "Explanation: The word \"world\" can be built one character at a time by \"w\", \"wo\", \"wor\", and \"worl\"."}, {"full_text": "Example 2:\nInput: words = [\"a\",\"banana\",\"app\",\"appl\",\"ap\",\"apply\",\"apple\"]\nOutput: \"apple\"\nExplanation: Both \"apply\" and \"apple\" can be built from other words in the dictionary. However, \"apple\" is lexicographically smaller than \"apply\".", "input": "Input: words = [\"a\",\"banana\",\"app\",\"appl\",\"ap\",\"apply\",\"apple\"]", "output": "Output: \"apple\"", "explanation": "Explanation: Both \"apply\" and \"apple\" can be built from other words in the dictionary. However, \"apple\" is lexicographically smaller than \"apply\"."}], "constraints": "Constraints:\n1 <= words.length <= 1000\n1 <= words[i].length <= 30\nwords[i] consists of lowercase English letters.", "notes": ""}, "718": {"label": "Medium", "title": "Maximum Length of Repeated Subarray", "tags": "algorithms,array,binary-search,dynamic-programming,hash-table", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5135000000000001, "total_accepted": 159500.0, "total_submissions": 310600.0, "testcase_example": "'[1,2,3,2,1]\\n[3,2,1,4,7]'", "body": "Given two integer arrays nums1 and nums2, return the maximum length of a subarray that appears in both arrays.", "examples": [{"full_text": "Example 1:\nInput: nums1 = [1,2,3,2,1], nums2 = [3,2,1,4,7]\nOutput: 3\nExplanation: The repeated subarray with maximum length is [3,2,1].", "input": "Input: nums1 = [1,2,3,2,1], nums2 = [3,2,1,4,7]", "output": "Output: 3", "explanation": "Explanation: The repeated subarray with maximum length is [3,2,1]."}, {"full_text": "Example 2:\nInput: nums1 = [0,0,0,0,0], nums2 = [0,0,0,0,0]\nOutput: 5", "input": "Input: nums1 = [0,0,0,0,0], nums2 = [0,0,0,0,0]", "output": "Output: 5", "explanation": ""}], "constraints": "Constraints:\n1 <= nums1.length, nums2.length <= 1000\n0 <= nums1[i], nums2[i] <= 100", "notes": ""}, "714": {"label": "Medium", "title": "Best Time to Buy and Sell Stock with Transaction Fee", "tags": "algorithms,bloomberg,facebook,array,dynamic-programming,greedy", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6144, "total_accepted": 152100.0, "total_submissions": 247600.0, "testcase_example": "'[1,3,2,8,4,9]\\n2'", "body": "You are given an array prices where prices[i] is the price of a given stock on the i^th day, and an integer fee representing a transaction fee.\nFind the maximum profit you can achieve. You may complete as many transactions as you like, but you need to pay the transaction fee for each transaction.\nNote: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).", "examples": [{"full_text": "Example 1:\nInput: prices = [1,3,2,8,4,9], fee = 2\nOutput: 8\nExplanation: The maximum profit can be achieved by:\n- Buying at prices[0] = 1\n- Selling at prices[3] = 8\n- Buying at prices[4] = 4\n- Selling at prices[5] = 9\nThe total profit is ((8 - 1) - 2) + ((9 - 4) - 2) = 8.", "input": "Input: prices = [1,3,2,8,4,9], fee = 2", "output": "Output: 8", "explanation": "Explanation: The maximum profit can be achieved by:\n- Buying at prices[0] = 1\n- Selling at prices[3] = 8\n- Buying at prices[4] = 4\n- Selling at prices[5] = 9\nThe total profit is ((8 - 1) - 2) + ((9 - 4) - 2) = 8."}, {"full_text": "Example 2:\nInput: prices = [1,3,7,5,10,3], fee = 3\nOutput: 6", "input": "Input: prices = [1,3,7,5,10,3], fee = 3", "output": "Output: 6", "explanation": ""}], "constraints": "Constraints:\n1 <= prices.length <= 5 * 10^4\n1 <= prices[i] < 5 * 10^4\n0 <= fee < 5 * 10^4", "notes": ""}, "713": {"label": "Medium", "title": "Subarray Product Less Than K", "tags": "algorithms,array,two-pointers", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.431, "total_accepted": 148000.0, "total_submissions": 343500.0, "testcase_example": "'[10,5,2,6]\\n100'", "body": "Given an array of integers nums and an integer k, return the number of contiguous subarrays where the product of all the elements in the subarray is strictly less than k.", "examples": [{"full_text": "Example 1:\nInput: nums = [10,5,2,6], k = 100\nOutput: 8\nExplanation: The 8 subarrays that have product less than 100 are:\n[10], [5], [2], [6], [10, 5], [5, 2], [2, 6], [5, 2, 6]\nNote that [10, 5, 2] is not included as the product of 100 is not strictly less than k.", "input": "Input: nums = [10,5,2,6], k = 100", "output": "Output: 8", "explanation": "Explanation: The 8 subarrays that have product less than 100 are:\n[10], [5], [2], [6], [10, 5], [5, 2], [2, 6], [5, 2, 6]\nNote that [10, 5, 2] is not included as the product of 100 is not strictly less than k."}, {"full_text": "Example 2:\nInput: nums = [1,2,3], k = 0\nOutput: 0", "input": "Input: nums = [1,2,3], k = 0", "output": "Output: 0", "explanation": ""}], "constraints": "Constraints:\n1 <= nums.length <= 3 * 10^4\n1 <= nums[i] <= 1000\n0 <= k <= 10^6", "notes": ""}, "712": {"label": "Medium", "title": "Minimum ASCII Delete Sum for Two Strings", "tags": "algorithms,dynamic-programming", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6127, "total_accepted": 58900.0, "total_submissions": 96100.0, "testcase_example": "'\"sea\"\\n\"eat\"'", "body": "Given two strings s1 and\ns2, return the lowest ASCII sum of deleted characters to make two strings equal.", "examples": [{"full_text": "Example 1:\nInput: s1 = \"sea\", s2 = \"eat\"\nOutput: 231\nExplanation: Deleting \"s\" from \"sea\" adds the ASCII value of \"s\" (115) to the sum.\nDeleting \"t\" from \"eat\" adds 116 to the sum.\nAt the end, both strings are equal, and 115 + 116 = 231 is the minimum sum possible to achieve this.", "input": "Input: s1 = \"sea\", s2 = \"eat\"", "output": "Output: 231", "explanation": "Explanation: Deleting \"s\" from \"sea\" adds the ASCII value of \"s\" (115) to the sum.\nDeleting \"t\" from \"eat\" adds 116 to the sum.\nAt the end, both strings are equal, and 115 + 116 = 231 is the minimum sum possible to achieve this."}, {"full_text": "Example 2:\nInput: s1 = \"delete\", s2 = \"leet\"\nOutput: 403\nExplanation: Deleting \"dee\" from \"delete\" to turn the string into \"let\",\nadds 100[d] + 101[e] + 101[e] to the sum.\nDeleting \"e\" from \"leet\" adds 101[e] to the sum.\nAt the end, both strings are equal to \"let\", and the answer is 100+101+101+101 = 403.\nIf instead we turned both strings into \"lee\" or \"eet\", we would get answers of 433 or 417, which are higher.", "input": "Input: s1 = \"delete\", s2 = \"leet\"", "output": "Output: 403", "explanation": "Explanation: Deleting \"dee\" from \"delete\" to turn the string into \"let\",\nadds 100[d] + 101[e] + 101[e] to the sum.\nDeleting \"e\" from \"leet\" adds 101[e] to the sum.\nAt the end, both strings are equal to \"let\", and the answer is 100+101+101+101 = 403.\nIf instead we turned both strings into \"lee\" or \"eet\", we would get answers of 433 or 417, which are higher."}], "constraints": "Constraints:\n1 <= s1.length, s2.length <= 1000\ns1 and s2 consist of lowercase English letters.", "notes": ""}, "707": {"label": "Medium", "title": "Design Linked List", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.2681, "total_accepted": 169700.0, "total_submissions": 633200.0, "testcase_example": "'[\"MyLinkedList\",\"addAtHead\",\"addAtTail\",\"addAtIndex\",\"get\",\"deleteAtIndex\",\"get\"]\\n' +\n  '[[],[1],[3],[1,2],[1],[1],[1]]'", "body": "Design your implementation of the linked list. You can choose to use a singly or doubly linked list.\nA node in a singly linked list should have two attributes: val and next. val is the value of the current node, and next is a pointer/reference to the next node.\nIf you want to use the doubly linked list, you will need one more attribute prev to indicate the previous node in the linked list. Assume all nodes in the linked list are 0-indexed.\nImplement the MyLinkedList class:\nMyLinkedList() Initializes the MyLinkedList object.\nint get(int index) Get the value of the index^th node in the linked list. If the index is invalid, return -1.\nvoid addAtHead(int val) Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list.\nvoid addAtTail(int val) Append a node of value val as the last element of the linked list.\nvoid addAtIndex(int index, int val) Add a node of value val before the index^th node in the linked list. If index equals the length of the linked list, the node will be appended to the end of the linked list. If index is greater than the length, the node will not be inserted.\nvoid deleteAtIndex(int index) Delete the index^th node in the linked list, if the index is valid.", "examples": [{"full_text": "Example 1:\nInput\n[\"MyLinkedList\", \"addAtHead\", \"addAtTail\", \"addAtIndex\", \"get\", \"deleteAtIndex\", \"get\"]\n[[], [1], [3], [1, 2], [1], [1], [1]]\nOutput\n[null, null, null, null, 2, null, 3]\nExplanation\nMyLinkedList myLinkedList = new MyLinkedList();\nmyLinkedList.addAtHead(1);\nmyLinkedList.addAtTail(3);\nmyLinkedList.addAtIndex(1, 2); // linked list becomes 1->2->3\nmyLinkedList.get(1); // return 2\nmyLinkedList.deleteAtIndex(1); // now the linked list is 1->3\nmyLinkedList.get(1); // return 3", "input": "Input\n[\"MyLinkedList\", \"addAtHead\", \"addAtTail\", \"addAtIndex\", \"get\", \"deleteAtIndex\", \"get\"]\n[[], [1], [3], [1, 2], [1], [1], [1]]", "output": "Output\n[null, null, null, null, 2, null, 3]", "explanation": "Explanation\nMyLinkedList myLinkedList = new MyLinkedList();\nmyLinkedList.addAtHead(1);\nmyLinkedList.addAtTail(3);\nmyLinkedList.addAtIndex(1, 2); // linked list becomes 1->2->3\nmyLinkedList.get(1); // return 2\nmyLinkedList.deleteAtIndex(1); // now the linked list is 1->3\nmyLinkedList.get(1); // return 3"}], "constraints": "Constraints:\n0 <= index, val <= 1000\nPlease do not use the built-in LinkedList library.\nAt most 2000 calls will be made to get, addAtHead, addAtTail, addAtIndex and deleteAtIndex.", "notes": ""}, "701": {"label": "Medium", "title": "Insert into a Binary Search Tree", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7501000000000001, "total_accepted": 280400.0, "total_submissions": 373800.0, "testcase_example": "'[4,2,7,1,3]\\n5'", "body": "You are given the root node of a binary search tree (BST) and a value to insert into the tree. Return the root node of the BST after the insertion. It is guaranteed that the new value does not exist in the original BST.\nNotice\nthat there may exist\nmultiple valid ways for the\ninsertion, as long as the tree remains a BST after insertion. You can return any of them.", "examples": [{"full_text": "Example 1:\nInput: root = [4,2,7,1,3], val = 5\nOutput: [4,2,7,1,3,5]\nExplanation: Another accepted tree is:", "input": "Input: root = [4,2,7,1,3], val = 5", "output": "Output: [4,2,7,1,3,5]", "explanation": "Explanation: Another accepted tree is:"}, {"full_text": "Example 2:\nInput: root = [40,20,60,10,30,50,70], val = 25\nOutput: [40,20,60,10,30,50,70,null,null,25]", "input": "Input: root = [40,20,60,10,30,50,70], val = 25", "output": "Output: [40,20,60,10,30,50,70,null,null,25]", "explanation": ""}, {"full_text": "Example 3:\nInput: root = [4,2,7,1,3,null,null,null,null,null,null], val = 5\nOutput: [4,2,7,1,3,5]", "input": "Input: root = [4,2,7,1,3,null,null,null,null,null,null], val = 5", "output": "Output: [4,2,7,1,3,5]", "explanation": ""}], "constraints": "Constraints:\nThe number of nodes in\nthe tree will be in the range [0,\n10^4].\n-10^8 <= Node.val <= 10^8\nAll the values Node.val are unique.\n-10^8 <= val <= 10^8\nIt's guaranteed that val does not exist in the original BST.", "notes": ""}, "698": {"label": "Medium", "title": "Partition to K Equal Sum Subsets", "tags": "algorithms,linkedin,dynamic-programming", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.45299999999999996, "total_accepted": 184800.0, "total_submissions": 408000.0, "testcase_example": "'[4,3,2,3,5,2,1]\\n4'", "body": "Given an integer array nums and an integer k, return true if it is possible to divide this array into k non-empty subsets whose sums are all equal.", "examples": [{"full_text": "Example 1:\nInput: nums = [4,3,2,3,5,2,1], k = 4\nOutput: true\nExplanation: It is possible to divide it into 4 subsets (5), (1, 4), (2,3), (2,3) with equal sums.", "input": "Input: nums = [4,3,2,3,5,2,1], k = 4", "output": "Output: true", "explanation": "Explanation: It is possible to divide it into 4 subsets (5), (1, 4), (2,3), (2,3) with equal sums."}, {"full_text": "Example 2:\nInput: nums = [1,2,3,4], k = 3\nOutput: false", "input": "Input: nums = [1,2,3,4], k = 3", "output": "Output: false", "explanation": ""}], "constraints": "Constraints:\n1 <= k <= nums.length <= 16\n1 <= nums[i] <= 10^4\nThe frequency of each element is in the range [1, 4].", "notes": ""}, "695": {"label": "Medium", "title": "Max Area of Island", "tags": "algorithms,array,depth-first-search", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6892, "total_accepted": 412400.0, "total_submissions": 598400.0, "testcase_example": "'[[0,0,1,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,1,1,0,1,0,0,0,0,0,0,0,0],[0,1,0,0,1,1,0,0,1,0,1,0,0],[0,1,0,0,1,1,0,0,1,1,1,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,0,0,1,1,0,0,0,0]]'", "body": "You are given an m x n binary matrix grid. An island is a group of 1's (representing land) connected 4-directionally (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water.\nThe area of an island is the number of cells with a value 1 in the island.\nReturn the maximum area of an island in grid. If there is no island, return 0.", "examples": [{"full_text": "Example 1:\nInput: grid = [[0,0,1,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,1,1,0,1,0,0,0,0,0,0,0,0],[0,1,0,0,1,1,0,0,1,0,1,0,0],[0,1,0,0,1,1,0,0,1,1,1,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,0,0,1,1,0,0,0,0]]\nOutput: 6\nExplanation: The answer is not 11, because the island must be connected 4-directionally.", "input": "Input: grid = [[0,0,1,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,1,1,0,1,0,0,0,0,0,0,0,0],[0,1,0,0,1,1,0,0,1,0,1,0,0],[0,1,0,0,1,1,0,0,1,1,1,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,0,0,1,1,0,0,0,0]]", "output": "Output: 6", "explanation": "Explanation: The answer is not 11, because the island must be connected 4-directionally."}, {"full_text": "Example 2:\nInput: grid = [[0,0,0,0,0,0,0,0]]\nOutput: 0", "input": "Input: grid = [[0,0,0,0,0,0,0,0]]", "output": "Output: 0", "explanation": ""}], "constraints": "Constraints:\nm == grid.length\nn == grid[i].length\n1 <= m, n <= 50\ngrid[i][j] is either 0 or 1.", "notes": ""}, "692": {"label": "Medium", "title": "Top K Frequent Words", "tags": "algorithms,amazon,bloomberg,uber,yelp,hash-table,heap,trie", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5416, "total_accepted": 353900.0, "total_submissions": 653500.0, "testcase_example": "'[\"i\",\"love\",\"leetcode\",\"i\",\"love\",\"coding\"]\\n2'", "body": "Given an array of strings words and an integer k, return the k most frequent strings.\nReturn the answer sorted by the frequency from highest to lowest. Sort the words with the same frequency by their lexicographical order.", "examples": [{"full_text": "Example 1:\nInput: words = [\"i\",\"love\",\"leetcode\",\"i\",\"love\",\"coding\"], k = 2\nOutput: [\"i\",\"love\"]\nExplanation: \"i\" and \"love\" are the two most frequent words.\nNote that \"i\" comes before \"love\" due to a lower alphabetical order.", "input": "Input: words = [\"i\",\"love\",\"leetcode\",\"i\",\"love\",\"coding\"], k = 2", "output": "Output: [\"i\",\"love\"]", "explanation": "Explanation: \"i\" and \"love\" are the two most frequent words.\nNote that \"i\" comes before \"love\" due to a lower alphabetical order."}, {"full_text": "Example 2:\nInput: words = [\"the\",\"day\",\"is\",\"sunny\",\"the\",\"the\",\"the\",\"sunny\",\"is\",\"is\"], k = 4\nOutput: [\"the\",\"is\",\"sunny\",\"day\"]\nExplanation: \"the\", \"is\", \"sunny\" and \"day\" are the four most frequent words, with the number of occurrence being 4, 3, 2 and 1 respectively.", "input": "Input: words = [\"the\",\"day\",\"is\",\"sunny\",\"the\",\"the\",\"the\",\"sunny\",\"is\",\"is\"], k = 4", "output": "Output: [\"the\",\"is\",\"sunny\",\"day\"]", "explanation": "Explanation: \"the\", \"is\", \"sunny\" and \"day\" are the four most frequent words, with the number of occurrence being 4, 3, 2 and 1 respectively."}], "constraints": "Constraints:\n1 <= words.length <= 500\n1 <= words[i] <= 10\nwords[i] consists of lowercase English letters.\nk is in the range [1, The number of unique words[i]]", "notes": "Follow-up: Could you solve it in O(n log(k)) time and O(n) extra space?"}, "690": {"label": "Medium", "title": "Employee Importance", "tags": "algorithms,uber,breadth-first-search,depth-first-search,hash-table", "langs": "cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.633, "total_accepted": 165400.0, "total_submissions": 261300.0, "testcase_example": "'[[1,5,[2,3]],[2,3,[]],[3,3,[]]]\\n1'", "body": "You have a data structure of employee information, including the employee's unique ID, importance value, and direct subordinates' IDs.\nYou are given an array of employees employees where:\nemployees[i].id is the ID of the i^th employee.\nemployees[i].importance is the importance value of the i^th employee.\nemployees[i].subordinates is a list of the IDs of the direct subordinates of the i^th employee.\nGiven an integer id that represents an employee's ID, return the total importance value of this employee and all their direct and indirect subordinates.", "examples": [{"full_text": "Example 1:\nInput: employees = [[1,5,[2,3]],[2,3,[]],[3,3,[]]], id = 1\nOutput: 11\nExplanation: Employee 1 has an importance value of 5 and has two direct subordinates: employee 2 and employee 3.\nThey both have an importance value of 3.\nThus, the total importance value of employee 1 is 5 + 3 + 3 = 11.", "input": "Input: employees = [[1,5,[2,3]],[2,3,[]],[3,3,[]]], id = 1", "output": "Output: 11", "explanation": "Explanation: Employee 1 has an importance value of 5 and has two direct subordinates: employee 2 and employee 3.\nThey both have an importance value of 3.\nThus, the total importance value of employee 1 is 5 + 3 + 3 = 11."}, {"full_text": "Example 2:\nInput: employees = [[1,2,[5]],[5,-3,[]]], id = 5\nOutput: -3\nExplanation: Employee 5 has an importance value of -3 and has no direct subordinates.\nThus, the total importance value of employee 5 is -3.", "input": "Input: employees = [[1,2,[5]],[5,-3,[]]], id = 5", "output": "Output: -3", "explanation": "Explanation: Employee 5 has an importance value of -3 and has no direct subordinates.\nThus, the total importance value of employee 5 is -3."}], "constraints": "Constraints:\n1 <= employees.length <= 2000\n1 <= employees[i].id <= 2000\nAll employees[i].id are unique.\n-100 <= employees[i].importance <= 100\nOne employee has at most one direct leader and may have several subordinates.\nThe IDs in employees[i].subordinates are valid IDs.", "notes": ""}, "688": {"label": "Medium", "title": "Knight Probability in Chessboard", "tags": "algorithms,dynamic-programming", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5142, "total_accepted": 76300.0, "total_submissions": 148300.0, "testcase_example": "'3\\n2\\n0\\n0'", "body": "On an n x n chessboard, a knight starts at the cell (row, column) and attempts to make exactly k moves. The rows and columns are 0-indexed, so the top-left cell is (0, 0), and the bottom-right cell is (n - 1, n - 1).\nA chess knight has eight possible moves it can make, as illustrated below. Each move is two cells in a cardinal direction, then one cell in an orthogonal direction.\nEach time the knight is to move, it chooses one of eight possible moves uniformly at random (even if the piece would go off the chessboard) and moves there.\nThe knight continues moving until it has made exactly k moves or has moved off the chessboard.\nReturn the probability that the knight remains on the board after it has stopped moving.", "examples": [{"full_text": "Example 1:\nInput: n = 3, k = 2, row = 0, column = 0\nOutput: 0.06250\nExplanation: There are two moves (to (1,2), (2,1)) that will keep the knight on the board.\nFrom each of those positions, there are also two moves that will keep the knight on the board.\nThe total probability the knight stays on the board is 0.0625.", "input": "Input: n = 3, k = 2, row = 0, column = 0", "output": "Output: 0.06250", "explanation": "Explanation: There are two moves (to (1,2), (2,1)) that will keep the knight on the board.\nFrom each of those positions, there are also two moves that will keep the knight on the board.\nThe total probability the knight stays on the board is 0.0625."}, {"full_text": "Example 2:\nInput: n = 1, k = 0, row = 0, column = 0\nOutput: 1.00000", "input": "Input: n = 1, k = 0, row = 0, column = 0", "output": "Output: 1.00000", "explanation": ""}], "constraints": "Constraints:\n1 <= n <= 25\n0 <= k <= 100\n0 <= row, column <= n", "notes": ""}, "687": {"label": "Medium", "title": "Longest Univalue Path", "tags": "algorithms,google,tree", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.391, "total_accepted": 135900.0, "total_submissions": 347600.0, "testcase_example": "'[5,4,5,1,1,5]'", "body": "Given the root of a binary tree, return the length of the longest path, where each node in the path has the same value. This path may or may not pass through the root.\nThe length of the path between two nodes is represented by the number of edges between them.", "examples": [{"full_text": "Example 1:\nInput: root = [5,4,5,1,1,5]\nOutput: 2", "input": "Input: root = [5,4,5,1,1,5]", "output": "Output: 2", "explanation": ""}, {"full_text": "Example 2:\nInput: root = [1,4,5,4,4,5]\nOutput: 2", "input": "Input: root = [1,4,5,4,4,5]", "output": "Output: 2", "explanation": ""}], "constraints": "Constraints:\nThe number of nodes in the tree is in the range [0, 10^4].\n-1000 <= Node.val <= 1000\nThe depth of the tree will not exceed 1000.", "notes": ""}, "686": {"label": "Medium", "title": "Repeated String Match", "tags": "algorithms,google,string", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3344, "total_accepted": 117600.0, "total_submissions": 351700.0, "testcase_example": "'\"abcd\"\\n\"cdabcdab\"'", "body": "Given two strings a and b, return the minimum number of times you should repeat string a so that string b is a substring of it. If it is impossible for b\u200b\u200b\u200b\u200b\u200b\u200b to be a substring of a after repeating it, return -1.\nNotice: string \"abc\" repeated 0 times is \"\", repeated 1 time is \"abc\" and repeated 2 times is \"abcabc\".", "examples": [{"full_text": "Example 1:\nInput: a = \"abcd\", b = \"cdabcdab\"\nOutput: 3\nExplanation: We return 3 because by repeating a three times \"abcdabcdabcd\", b is a substring of it.", "input": "Input: a = \"abcd\", b = \"cdabcdab\"", "output": "Output: 3", "explanation": "Explanation: We return 3 because by repeating a three times \"abcdabcdabcd\", b is a substring of it."}, {"full_text": "Example 2:\nInput: a = \"a\", b = \"aa\"\nOutput: 2", "input": "Input: a = \"a\", b = \"aa\"", "output": "Output: 2", "explanation": ""}], "constraints": "Constraints:\n1 <= a.length, b.length <= 10^4\na and b consist of lowercase English letters.", "notes": ""}, "684": {"label": "Medium", "title": "Redundant Connection", "tags": "algorithms,google,graph,tree,union-find", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6092, "total_accepted": 185900.0, "total_submissions": 305200.0, "testcase_example": "'[[1,2],[1,3],[2,3]]'", "body": "In this problem, a tree is an undirected graph that is connected and has no cycles.\nYou are given a graph that started as a tree with n nodes labeled from 1 to n, with one additional edge added. The added edge has two different vertices chosen from 1 to n, and was not an edge that already existed. The graph is represented as an array edges of length n where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the graph.\nReturn an edge that can be removed so that the resulting graph is a tree of n nodes. If there are multiple answers, return the answer that occurs last in the input.", "examples": [{"full_text": "Example 1:\nInput: edges = [[1,2],[1,3],[2,3]]\nOutput: [2,3]", "input": "Input: edges = [[1,2],[1,3],[2,3]]", "output": "Output: [2,3]", "explanation": ""}, {"full_text": "Example 2:\nInput: edges = [[1,2],[2,3],[3,4],[1,4],[1,5]]\nOutput: [1,4]", "input": "Input: edges = [[1,2],[2,3],[3,4],[1,4],[1,5]]", "output": "Output: [1,4]", "explanation": ""}], "constraints": "Constraints:\nn == edges.length\n3 <= n <= 1000\nedges[i].length == 2\n1 <= ai < bi <= edges.length\nai != bi\nThere are no repeated edges.\nThe given graph is connected.", "notes": ""}, "678": {"label": "Medium", "title": "Valid Parenthesis String", "tags": "algorithms,string", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3292, "total_accepted": 160000.0, "total_submissions": 486100.0, "testcase_example": "'\"()\"'", "body": "Given a string s containing only three types of characters: '(', ')' and '*', return true if s is valid.\nThe following rules define a valid string:\nAny left parenthesis '(' must have a corresponding right parenthesis ')'.\nAny right parenthesis ')' must have a corresponding left parenthesis '('.\nLeft parenthesis '(' must go before the corresponding right parenthesis ')'.\n'*' could be treated as a single right parenthesis ')' or a single left parenthesis '(' or an empty string \"\".", "examples": [{"full_text": "Example 1:\nInput: s = \"()\"\nOutput: true", "input": "Input: s = \"()\"", "output": "Output: true", "explanation": ""}, {"full_text": "Example 2:\nInput: s = \"(*)\"\nOutput: true", "input": "Input: s = \"(*)\"", "output": "Output: true", "explanation": ""}, {"full_text": "Example 3:\nInput: s = \"(*))\"\nOutput: true", "input": "Input: s = \"(*))\"", "output": "Output: true", "explanation": ""}], "constraints": "Constraints:\n1 <= s.length <= 100\ns[i] is '(', ')' or '*'.", "notes": ""}, "677": {"label": "Medium", "title": "Map Sum Pairs", "tags": "algorithms,trie", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5698, "total_accepted": 83800.0, "total_submissions": 147100.0, "testcase_example": "'[\"MapSum\",\"insert\",\"sum\",\"insert\",\"sum\"]\\n' +\n  '[[],[\"apple\",3],[\"ap\"],[\"app\",2],[\"ap\"]]'", "body": "Design a map that allows you to do the following:\nMaps a string key to a given value.\nReturns the sum of the values that have a key with a prefix equal to a given string.\nImplement the MapSum class:\nMapSum() Initializes the MapSum object.\nvoid insert(String key, int val) Inserts the key-val pair into the map. If the key already existed, the original key-value pair will be overridden to the new one.\nint sum(string prefix) Returns the sum of all the pairs' value whose key starts with the prefix.", "examples": [{"full_text": "Example 1:\nInput\n[\"MapSum\", \"insert\", \"sum\", \"insert\", \"sum\"]\n[[], [\"apple\", 3], [\"ap\"], [\"app\", 2], [\"ap\"]]\nOutput\n[null, null, 3, null, 5]\nExplanation\nMapSum mapSum = new MapSum();\nmapSum.insert(\"apple\", 3);\nmapSum.sum(\"ap\"); // return 3 (apple = 3)\nmapSum.insert(\"app\", 2);\nmapSum.sum(\"ap\"); // return 5 (apple + app = 3 + 2 = 5)", "input": "Input\n[\"MapSum\", \"insert\", \"sum\", \"insert\", \"sum\"]\n[[], [\"apple\", 3], [\"ap\"], [\"app\", 2], [\"ap\"]]", "output": "Output\n[null, null, 3, null, 5]", "explanation": "Explanation\nMapSum mapSum = new MapSum();\nmapSum.insert(\"apple\", 3);\nmapSum.sum(\"ap\"); // return 3 (apple = 3)\nmapSum.insert(\"app\", 2);\nmapSum.sum(\"ap\"); // return 5 (apple + app = 3 + 2 = 5)"}], "constraints": "Constraints:\n1 <= key.length, prefix.length <= 50\nkey and prefix consist of only lowercase English letters.\n1 <= val <= 1000\nAt most 50 calls will be made to insert and sum.", "notes": ""}, "676": {"label": "Medium", "title": "Implement Magic Dictionary", "tags": "algorithms,google,hash-table,trie", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5644, "total_accepted": 60600.0, "total_submissions": 107300.0, "testcase_example": "'[\"MagicDictionary\", \"buildDict\", \"search\", \"search\", \"search\", \"search\"]\\n' +\n  '[[], [[\"hello\",\"leetcode\"]], [\"hello\"], [\"hhllo\"], [\"hell\"], [\"leetcoded\"]]'", "body": "Design a data structure that is initialized with a list of different words. Provided a string, you should determine if you can change exactly one character in this string to match any word in the data structure.\nImplement the\nMagicDictionary\nclass:\nMagicDictionary()\nInitializes the object.\nvoid buildDict(String[]\ndictionary)\nSets the data structure\nwith an array of distinct strings dictionary.\nbool search(String searchWord) Returns true if you can change exactly one character in searchWord to match any string in the data structure, otherwise returns false.", "examples": [{"full_text": "Example 1:\nInput\n[\"MagicDictionary\", \"buildDict\", \"search\", \"search\", \"search\", \"search\"]\n[[], [[\"hello\", \"leetcode\"]], [\"hello\"], [\"hhllo\"], [\"hell\"], [\"leetcoded\"]]\nOutput\n[null, null, false, true, false, false]\nExplanation\nMagicDictionary magicDictionary = new MagicDictionary();\nmagicDictionary.buildDict([\"hello\", \"leetcode\"]);\nmagicDictionary.search(\"hello\"); // return False\nmagicDictionary.search(\"hhllo\"); // We can change the second 'h' to 'e' to match \"hello\" so we return True\nmagicDictionary.search(\"hell\"); // return False\nmagicDictionary.search(\"leetcoded\"); // return False", "input": "Input\n[\"MagicDictionary\", \"buildDict\", \"search\", \"search\", \"search\", \"search\"]\n[[], [[\"hello\", \"leetcode\"]], [\"hello\"], [\"hhllo\"], [\"hell\"], [\"leetcoded\"]]", "output": "Output\n[null, null, false, true, false, false]", "explanation": "Explanation\nMagicDictionary magicDictionary = new MagicDictionary();\nmagicDictionary.buildDict([\"hello\", \"leetcode\"]);\nmagicDictionary.search(\"hello\"); // return False\nmagicDictionary.search(\"hhllo\"); // We can change the second 'h' to 'e' to match \"hello\" so we return True\nmagicDictionary.search(\"hell\"); // return False\nmagicDictionary.search(\"leetcoded\"); // return False"}], "constraints": "Constraints:\n1 <=\ndictionary.length <= 100\n1 <=\ndictionary[i].length <= 100\ndictionary[i] consists of only lower-case English letters.\nAll the strings in\ndictionary\nare distinct.\n1 <=\nsearchWord.length <= 100\nsearchWord\nconsists of only lower-case English letters.\nbuildDict\nwill be called only once before search.\nAt most 100 calls will be made to search.", "notes": ""}, "673": {"label": "Medium", "title": "Number of Longest Increasing Subsequence", "tags": "algorithms,facebook,dynamic-programming", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4045, "total_accepted": 103300.0, "total_submissions": 255500.0, "testcase_example": "'[1,3,5,4,7]'", "body": "Given an integer array\nnums, return the number of longest increasing subsequences.\nNotice that the sequence has to be strictly increasing.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,3,5,4,7]\nOutput: 2\nExplanation: The two longest increasing subsequences are [1, 3, 4, 7] and [1, 3, 5, 7].", "input": "Input: nums = [1,3,5,4,7]", "output": "Output: 2", "explanation": "Explanation: The two longest increasing subsequences are [1, 3, 4, 7] and [1, 3, 5, 7]."}, {"full_text": "Example 2:\nInput: nums = [2,2,2,2,2]\nOutput: 5\nExplanation: The length of longest continuous increasing subsequence is 1, and there are 5 subsequences' length is 1, so output 5.", "input": "Input: nums = [2,2,2,2,2]", "output": "Output: 5", "explanation": "Explanation: The length of longest continuous increasing subsequence is 1, and there are 5 subsequences' length is 1, so output 5."}], "constraints": "Constraints:\n1 <= nums.length <= 2000\n-10^6 <= nums[i] <= 10^6", "notes": ""}, "672": {"label": "Medium", "title": "Bulb Switcher II", "tags": "algorithms,microsoft,math", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5089, "total_accepted": 16400.0, "total_submissions": 32100.0, "testcase_example": "'1\\n1'", "body": "There is a room with n bulbs labeled from 1 to n that all are turned on initially, and four buttons on the wall. Each of the four buttons has a different functionality where:\nButton 1: Flips the status of all the bulbs.\nButton 2: Flips the status of all the bulbs with even labels (i.e., 2, 4, ...).\nButton 3: Flips the status of all the bulbs with odd labels (i.e., 1, 3, ...).\nButton 4: Flips the status of all the bulbs with a label j = 3k + 1 where k = 0, 1, 2, ... (i.e., 1, 4, 7, 10, ...).\nYou must make exactly presses button presses in total. For each press, you may pick any of the four buttons to press.\nGiven the two integers n and presses, return the number of different possible statuses after performing all presses button presses.", "examples": [{"full_text": "Example 1:\nInput: n = 1, presses = 1\nOutput: 2\nExplanation: Status can be:\n- [off] by pressing button 1\n- [on] by pressing button 2", "input": "Input: n = 1, presses = 1", "output": "Output: 2", "explanation": "Explanation: Status can be:\n- [off] by pressing button 1\n- [on] by pressing button 2"}, {"full_text": "Example 2:\nInput: n = 2, presses = 1\nOutput: 3\nExplanation: Status can be:\n- [off, off] by pressing button 1\n- [on, off] by pressing button 2\n- [off, on] by pressing button 3", "input": "Input: n = 2, presses = 1", "output": "Output: 3", "explanation": "Explanation: Status can be:\n- [off, off] by pressing button 1\n- [on, off] by pressing button 2\n- [off, on] by pressing button 3"}, {"full_text": "Example 3:\nInput: n = 3, presses = 1\nOutput: 4\nExplanation: Status can be:\n- [off, off, off] by pressing button 1\n- [off, on, off] by pressing button 2\n- [on, off, on] by pressing button 3\n- [off, on, on] by pressing button 4", "input": "Input: n = 3, presses = 1", "output": "Output: 4", "explanation": "Explanation: Status can be:\n- [off, off, off] by pressing button 1\n- [off, on, off] by pressing button 2\n- [on, off, on] by pressing button 3\n- [off, on, on] by pressing button 4"}], "constraints": "Constraints:\n1 <= n <= 1000\n0 <= presses <= 1000", "notes": ""}, "670": {"label": "Medium", "title": "Maximum Swap", "tags": "algorithms,facebook,array,math", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.47200000000000003, "total_accepted": 151000.0, "total_submissions": 319900.0, "testcase_example": "'2736'", "body": "You are given an integer num. You can swap two digits at most once to get the maximum valued number.\nReturn the maximum valued number you can get.", "examples": [{"full_text": "Example 1:\nInput: num = 2736\nOutput: 7236\nExplanation: Swap the number 2 and the number 7.", "input": "Input: num = 2736", "output": "Output: 7236", "explanation": "Explanation: Swap the number 2 and the number 7."}, {"full_text": "Example 2:\nInput: num = 9973\nOutput: 9973\nExplanation: No swap.", "input": "Input: num = 9973", "output": "Output: 9973", "explanation": "Explanation: No swap."}], "constraints": "Constraints:\n0 <= num <= 10^8", "notes": ""}, "669": {"label": "Medium", "title": "Trim a Binary Search Tree", "tags": "algorithms,bloomberg,tree", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6453, "total_accepted": 184200.0, "total_submissions": 285500.0, "testcase_example": "'[1,0,2]\\n1\\n2'", "body": "Given the root of a binary search tree and the lowest and highest boundaries as low and high, trim the tree so that all its elements lies in [low, high]. Trimming the tree should not change the relative structure of the elements that will remain in the tree (i.e., any node's descendant should remain a descendant). It can be proven that there is a unique answer.\nReturn the root of the trimmed binary search tree. Note that the root may change depending on the given bounds.", "examples": [{"full_text": "Example 1:\nInput: root = [1,0,2], low = 1, high = 2\nOutput: [1,null,2]", "input": "Input: root = [1,0,2], low = 1, high = 2", "output": "Output: [1,null,2]", "explanation": ""}, {"full_text": "Example 2:\nInput: root = [3,0,4,null,2,null,null,1], low = 1, high = 3\nOutput: [3,2,null,1]", "input": "Input: root = [3,0,4,null,2,null,null,1], low = 1, high = 3", "output": "Output: [3,2,null,1]", "explanation": ""}], "constraints": "Constraints:\nThe number of nodes in the tree in the range [1, 10^4].\n0 <= Node.val <= 10^4\nThe value of each node in the tree is unique.\nroot is guaranteed to be a valid binary search tree.\n0 <= low <= high <= 10^4", "notes": ""}, "667": {"label": "Medium", "title": "Beautiful Arrangement II", "tags": "algorithms,google,array", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5928, "total_accepted": 46400.0, "total_submissions": 78200.0, "testcase_example": "'3\\n1'", "body": "Given two integers n and k, construct a list answer that contains n different positive integers ranging from 1 to n and obeys the following requirement:\nSuppose this list is answer =\n[a1, a2, a3, ... , an], then the list [|a1 - a2|, |a2 - a3|, |a3 - a4|, ... , |an-1 - an|] has exactly k distinct integers.\nReturn the list answer. If there multiple valid answers, return any of them.", "examples": [{"full_text": "Example 1:\nInput: n = 3, k = 1\nOutput: [1,2,3]\nExplanation: The [1,2,3] has three different positive integers ranging from 1 to 3, and the [1,1] has exactly 1 distinct integer: 1", "input": "Input: n = 3, k = 1", "output": "Output: [1,2,3]", "explanation": "Explanation: The [1,2,3] has three different positive integers ranging from 1 to 3, and the [1,1] has exactly 1 distinct integer: 1"}, {"full_text": "Example 2:\nInput: n = 3, k = 2\nOutput: [1,3,2]\nExplanation: The [1,3,2] has three different positive integers ranging from 1 to 3, and the [2,1] has exactly 2 distinct integers: 1 and 2.", "input": "Input: n = 3, k = 2", "output": "Output: [1,3,2]", "explanation": "Explanation: The [1,3,2] has three different positive integers ranging from 1 to 3, and the [2,1] has exactly 2 distinct integers: 1 and 2."}], "constraints": "Constraints:\n1 <= k < n <= 10^4", "notes": ""}, "665": {"label": "Medium", "title": "Non-decreasing Array", "tags": "algorithms,google,array", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.2139, "total_accepted": 167800.0, "total_submissions": 784300.0, "testcase_example": "'[4,2,3]'", "body": "Given an array nums with n integers, your task is to check if it could become non-decreasing by modifying at most one element.\nWe define an array is non-decreasing if nums[i] <= nums[i + 1] holds for every i (0-based) such that (0 <= i <= n - 2).", "examples": [{"full_text": "Example 1:\nInput: nums = [4,2,3]\nOutput: true\nExplanation: You could modify the first 4 to 1 to get a non-decreasing array.", "input": "Input: nums = [4,2,3]", "output": "Output: true", "explanation": "Explanation: You could modify the first 4 to 1 to get a non-decreasing array."}, {"full_text": "Example 2:\nInput: nums = [4,2,1]\nOutput: false\nExplanation: You can't get a non-decreasing array by modify at most one element.", "input": "Input: nums = [4,2,1]", "output": "Output: false", "explanation": "Explanation: You can't get a non-decreasing array by modify at most one element."}], "constraints": "Constraints:\nn == nums.length\n1 <= n <= 10^4\n-10^5 <= nums[i] <= 10^5", "notes": ""}, "662": {"label": "Medium", "title": "Maximum Width of Binary Tree", "tags": "algorithms,amazon,tree", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.39590000000000003, "total_accepted": 144000.0, "total_submissions": 363800.0, "testcase_example": "'[1,3,2,5,3,null,9]'", "body": "Given the root of a binary tree, return the maximum width of the given tree.\nThe maximum width of a tree is the maximum width among all levels.\nThe width of one level is defined as the length between the end-nodes (the leftmost and rightmost non-null nodes), where the null nodes between the end-nodes are also counted into the length calculation.\nIt is guaranteed that the answer will in the range of 32-bit signed integer.", "examples": [{"full_text": "Example 1:\nInput: root = [1,3,2,5,3,null,9]\nOutput: 4\nExplanation: The maximum width existing in the third level with the length 4 (5,3,null,9).", "input": "Input: root = [1,3,2,5,3,null,9]", "output": "Output: 4", "explanation": "Explanation: The maximum width existing in the third level with the length 4 (5,3,null,9)."}, {"full_text": "Example 2:\nInput: root = [1,3,null,5,3]\nOutput: 2\nExplanation: The maximum width existing in the third level with the length 2 (5,3).", "input": "Input: root = [1,3,null,5,3]", "output": "Output: 2", "explanation": "Explanation: The maximum width existing in the third level with the length 2 (5,3)."}, {"full_text": "Example 3:\nInput: root = [1,3,2,5]\nOutput: 2\nExplanation: The maximum width existing in the second level with the length 2 (3,2).", "input": "Input: root = [1,3,2,5]", "output": "Output: 2", "explanation": "Explanation: The maximum width existing in the second level with the length 2 (3,2)."}], "constraints": "Constraints:\nThe number of nodes in the tree is in the range [1, 3000].\n-100 <= Node.val <= 100", "notes": ""}, "659": {"label": "Medium", "title": "Split Array into Consecutive Subsequences", "tags": "algorithms,google,greedy,heap", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4546, "total_accepted": 67100.0, "total_submissions": 147500.0, "testcase_example": "'[1,2,3,3,4,5]'", "body": "You are given an integer array nums that is sorted in non-decreasing order.\nDetermine if it is possible to split nums into one or more subsequences such that both of the following conditions are true:\nEach subsequence is a consecutive increasing sequence (i.e. each integer is exactly one more than the previous integer).\nAll subsequences have a length of 3 or more.\nReturn true if you can split nums according to the above conditions, or false otherwise.\nA subsequence of an array is a new array that is formed from the original array by deleting some (can be none) of the elements without disturbing the relative positions of the remaining elements. (i.e., [1,3,5] is a subsequence of [1,2,3,4,5] while [1,3,2] is not).", "examples": [{"full_text": "Example 1:\nInput: nums = [1,2,3,3,4,5]\nOutput: true\nExplanation: nums can be split into the following subsequences:\n[1,2,3,3,4,5] --> 1, 2, 3\n[1,2,3,3,4,5] --> 3, 4, 5", "input": "Input: nums = [1,2,3,3,4,5]", "output": "Output: true", "explanation": "Explanation: nums can be split into the following subsequences:\n[1,2,3,3,4,5] --> 1, 2, 3\n[1,2,3,3,4,5] --> 3, 4, 5"}, {"full_text": "Example 2:\nInput: nums = [1,2,3,3,4,4,5,5]\nOutput: true\nExplanation: nums can be split into the following subsequences:\n[1,2,3,3,4,4,5,5] --> 1, 2, 3, 4, 5\n[1,2,3,3,4,4,5,5] --> 3, 4, 5", "input": "Input: nums = [1,2,3,3,4,4,5,5]", "output": "Output: true", "explanation": "Explanation: nums can be split into the following subsequences:\n[1,2,3,3,4,4,5,5] --> 1, 2, 3, 4, 5\n[1,2,3,3,4,4,5,5] --> 3, 4, 5"}, {"full_text": "Example 3:\nInput: nums = [1,2,3,4,4,5]\nOutput: false\nExplanation: It is impossible to split nums into consecutive increasing subsequences of length 3 or more.", "input": "Input: nums = [1,2,3,4,4,5]", "output": "Output: false", "explanation": "Explanation: It is impossible to split nums into consecutive increasing subsequences of length 3 or more."}], "constraints": "Constraints:\n1 <= nums.length <= 10^4\n-1000 <= nums[i] <= 1000\nnums is sorted in non-decreasing order.", "notes": ""}, "658": {"label": "Medium", "title": "Find K Closest Elements", "tags": "algorithms,google,binary-search", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4424, "total_accepted": 260100.00000000003, "total_submissions": 587900.0, "testcase_example": "'[1,2,3,4,5]\\n4\\n3'", "body": "Given a sorted integer array arr, two integers k and x, return the k closest integers to x in the array. The result should also be sorted in ascending order.\nAn integer a is closer to x than an integer b if:\n|a - x| < |b - x|, or\n|a - x| == |b - x| and a < b", "examples": [{"full_text": "Example 1:\nInput: arr = [1,2,3,4,5], k = 4, x = 3\nOutput: [1,2,3,4]", "input": "Input: arr = [1,2,3,4,5], k = 4, x = 3", "output": "Output: [1,2,3,4]", "explanation": ""}, {"full_text": "Example 2:\nInput: arr = [1,2,3,4,5], k = 4, x = -1\nOutput: [1,2,3,4]", "input": "Input: arr = [1,2,3,4,5], k = 4, x = -1", "output": "Output: [1,2,3,4]", "explanation": ""}], "constraints": "Constraints:\n1 <= k <= arr.length\n1 <= arr.length <= 10^4\narr is sorted in ascending order.\n-10^4 <= arr[i], x <= 10^4", "notes": ""}, "655": {"label": "Medium", "title": "Print Binary Tree", "tags": "algorithms,tree", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5902000000000001, "total_accepted": 48100.0, "total_submissions": 81500.0, "testcase_example": "'[1,2]'", "body": "Given the root of a binary tree, construct a 0-indexed m x n string matrix res that represents a formatted layout of the tree. The formatted layout matrix should be constructed using the following rules:\nThe height of the tree is height\nand the number of rows m should be equal to height + 1.\nThe number of columns n should be equal to 2^height+1 - 1.\nPlace the root node in the middle of the top row (more formally, at location res[0][(n-1)/2]).\nFor each node that has been placed in the matrix at position res[r][c], place its left child at res[r+1][c-2^height-r-1] and its right child at res[r+1][c+2^height-r-1].\nContinue this process until all the nodes in the tree have been placed.\nAny empty cells should contain the empty string \"\".\nReturn the constructed matrix res.", "examples": [{"full_text": "Example 1:\nInput: root = [1,2]\nOutput:\n[[\"\",\"1\",\"\"],\n[\"2\",\"\",\"\"]]", "input": "Input: root = [1,2]", "output": "Output:\n[[\"\",\"1\",\"\"],\n[\"2\",\"\",\"\"]]", "explanation": ""}, {"full_text": "Example 2:\nInput: root = [1,2,3,null,4]\nOutput:\n[[\"\",\"\",\"\",\"1\",\"\",\"\",\"\"],\n[\"\",\"2\",\"\",\"\",\"\",\"3\",\"\"],\n[\"\",\"\",\"4\",\"\",\"\",\"\",\"\"]]", "input": "Input: root = [1,2,3,null,4]", "output": "Output:\n[[\"\",\"\",\"\",\"1\",\"\",\"\",\"\"],\n[\"\",\"2\",\"\",\"\",\"\",\"3\",\"\"],\n[\"\",\"\",\"4\",\"\",\"\",\"\",\"\"]]", "explanation": ""}], "constraints": "Constraints:\nThe number of nodes in the tree is in the range [1, 2^10].\n-99 <= Node.val <= 99\nThe depth of the tree will be in the range [1, 10].", "notes": ""}, "654": {"label": "Medium", "title": "Maximum Binary Tree", "tags": "algorithms,microsoft,tree", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.8319, "total_accepted": 201200.0, "total_submissions": 241900.0, "testcase_example": "'[3,2,1,6,0,5]'", "body": "You are given an integer array nums with no duplicates. A maximum binary tree can be built recursively from nums using the following algorithm:\nCreate a root node whose value is the maximum value in nums.\nRecursively build the left subtree on the subarray prefix to the left of the maximum value.\nRecursively build the right subtree on the subarray suffix to the right of the maximum value.\nReturn the maximum binary tree built from nums.", "examples": [{"full_text": "Example 1:\nInput: nums = [3,2,1,6,0,5]\nOutput: [6,3,5,null,2,0,null,null,1]\nExplanation: The recursive calls are as follow:\n- The largest value in [3,2,1,6,0,5] is 6. Left prefix is [3,2,1] and right suffix is [0,5].\n- The largest value in [3,2,1] is 3. Left prefix is [] and right suffix is [2,1].\n- Empty array, so no child.\n- The largest value in [2,1] is 2. Left prefix is [] and right suffix is [1].\n- Empty array, so no child.\n- Only one element, so child is a node with value 1.\n- The largest value in [0,5] is 5. Left prefix is [0] and right suffix is [].\n- Only one element, so child is a node with value 0.\n- Empty array, so no child.", "input": "Input: nums = [3,2,1,6,0,5]", "output": "Output: [6,3,5,null,2,0,null,null,1]", "explanation": "Explanation: The recursive calls are as follow:\n- The largest value in [3,2,1,6,0,5] is 6. Left prefix is [3,2,1] and right suffix is [0,5].\n- The largest value in [3,2,1] is 3. Left prefix is [] and right suffix is [2,1].\n- Empty array, so no child.\n- The largest value in [2,1] is 2. Left prefix is [] and right suffix is [1].\n- Empty array, so no child.\n- Only one element, so child is a node with value 1.\n- The largest value in [0,5] is 5. Left prefix is [0] and right suffix is [].\n- Only one element, so child is a node with value 0.\n- Empty array, so no child."}, {"full_text": "Example 2:\nInput: nums = [3,2,1]\nOutput: [3,null,2,null,1]", "input": "Input: nums = [3,2,1]", "output": "Output: [3,null,2,null,1]", "explanation": ""}], "constraints": "Constraints:\n1 <= nums.length <= 1000\n0 <= nums[i] <= 1000\nAll integers in nums are unique.", "notes": ""}, "652": {"label": "Medium", "title": "Find Duplicate Subtrees", "tags": "algorithms,google,tree", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5537, "total_accepted": 136300.0, "total_submissions": 246100.0, "testcase_example": "'[1,2,3,4,null,2,4,null,null,4]'", "body": "Given the root\nof a binary tree, return all duplicate subtrees.\nFor each kind of duplicate subtrees, you only need to return the root node of any one of them.\nTwo trees are duplicate if they have the same structure with the same node values.", "examples": [{"full_text": "Example 1:\nInput: root = [1,2,3,4,null,2,4,null,null,4]\nOutput: [[2,4],[4]]", "input": "Input: root = [1,2,3,4,null,2,4,null,null,4]", "output": "Output: [[2,4],[4]]", "explanation": ""}, {"full_text": "Example 2:\nInput: root = [2,1,1]\nOutput: [[1]]", "input": "Input: root = [2,1,1]", "output": "Output: [[1]]", "explanation": ""}, {"full_text": "Example 3:\nInput: root = [2,2,2,3,null,3,null]\nOutput: [[2,3],[3]]", "input": "Input: root = [2,2,2,3,null,3,null]", "output": "Output: [[2,3],[3]]", "explanation": ""}], "constraints": "Constraints:\nThe number of the nodes in the tree will be in the range [1, 10^4]\n-200 <= Node.val <= 200", "notes": ""}, "650": {"label": "Medium", "title": "2 Keys Keyboard", "tags": "algorithms,microsoft,dynamic-programming", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.52, "total_accepted": 94400.0, "total_submissions": 181600.0, "testcase_example": "'3'", "body": "There is only one character 'A' on the screen of a notepad. You can perform two operations on this notepad for each step:\nCopy All: You can copy all the characters present on the screen (a partial copy is not allowed).\nPaste: You can paste the characters which are copied last time.\nGiven an integer n, return the minimum number of operations to get the character 'A' exactly n times on the screen.", "examples": [{"full_text": "Example 1:\nInput: n = 3\nOutput: 3\nExplanation: Intitally, we have one character 'A'.\nIn step 1, we use Copy All operation.\nIn step 2, we use Paste operation to get 'AA'.\nIn step 3, we use Paste operation to get 'AAA'.", "input": "Input: n = 3", "output": "Output: 3", "explanation": "Explanation: Intitally, we have one character 'A'.\nIn step 1, we use Copy All operation.\nIn step 2, we use Paste operation to get 'AA'.\nIn step 3, we use Paste operation to get 'AAA'."}, {"full_text": "Example 2:\nInput: n = 1\nOutput: 0", "input": "Input: n = 1", "output": "Output: 0", "explanation": ""}], "constraints": "Constraints:\n1 <= n <= 1000", "notes": ""}, "649": {"label": "Medium", "title": "Dota2 Senate", "tags": "algorithms,greedy", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.39770000000000005, "total_accepted": 18100.0, "total_submissions": 45500.0, "testcase_example": "'\"RD\"'", "body": "In the world of Dota2, there are two parties: the Radiant and the Dire.\nThe Dota2 senate consists of senators coming from two parties. Now the Senate wants to decide on a change in the Dota2 game. The voting for this change is a round-based procedure. In each round, each senator can exercise one of the two rights:\nBan one senator's right: A senator can make another senator lose all his rights in this and all the following rounds.\nAnnounce the victory: If this senator found the senators who still have rights to vote are all from the same party, he can announce the victory and decide on the change in the game.\nGiven a string senate representing each senator's party belonging. The character 'R' and 'D' represent the Radiant party and the Dire party. Then if there are n senators, the size of the given string will be n.\nThe round-based procedure starts from the first senator to the last senator in the given order. This procedure will last until the end of voting. All the senators who have lost their rights will be skipped during the procedure.\nSuppose every senator is smart enough and will play the best strategy for his own party. Predict which party will finally announce the victory and change the Dota2 game. The output should be \"Radiant\" or \"Dire\".", "examples": [{"full_text": "Example 1:\nInput: senate = \"RD\"\nOutput: \"Radiant\"\nExplanation:\nThe first senator comes from Radiant and he can just ban the next senator's right in round 1.\nAnd the second senator can't exercise any rights anymore since his right has been banned.\nAnd in round 2, the first senator can just announce the victory since he is the only guy in the senate who can vote.", "input": "Input: senate = \"RD\"", "output": "Output: \"Radiant\"", "explanation": "Explanation:\nThe first senator comes from Radiant and he can just ban the next senator's right in round 1.\nAnd the second senator can't exercise any rights anymore since his right has been banned.\nAnd in round 2, the first senator can just announce the victory since he is the only guy in the senate who can vote."}, {"full_text": "Example 2:\nInput: senate = \"RDD\"\nOutput: \"Dire\"\nExplanation:\nThe first senator comes from Radiant and he can just ban the next senator's right in round 1.\nAnd the second senator can't exercise any rights anymore since his right has been banned.\nAnd the third senator comes from Dire and he can ban the first senator's right in round 1.\nAnd in round 2, the third senator can just announce the victory since he is the only guy in the senate who can vote.", "input": "Input: senate = \"RDD\"", "output": "Output: \"Dire\"", "explanation": "Explanation:\nThe first senator comes from Radiant and he can just ban the next senator's right in round 1.\nAnd the second senator can't exercise any rights anymore since his right has been banned.\nAnd the third senator comes from Dire and he can ban the first senator's right in round 1.\nAnd in round 2, the third senator can just announce the victory since he is the only guy in the senate who can vote."}], "constraints": "Constraints:\nn == senate.length\n1 <= n <= 10^4\nsenate[i] is either 'R' or 'D'.", "notes": ""}, "648": {"label": "Medium", "title": "Replace Words", "tags": "algorithms,uber,hash-table,trie", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6163000000000001, "total_accepted": 90100.0, "total_submissions": 146200.0, "testcase_example": "'[\"cat\",\"bat\",\"rat\"]\\n\"the cattle was rattled by the battery\"'", "body": "In English, we have a concept called root, which can be followed by some other word to form another longer word - let's call this word successor. For example, when the root \"an\" is followed by the successor word \"other\", we can form a new word \"another\".\nGiven a dictionary consisting of many roots and a sentence consisting of words separated by spaces, replace all the successors in the sentence with the root forming it. If a successor can be replaced by more than one root, replace it with the root that has the shortest length.\nReturn the sentence after the replacement.", "examples": [{"full_text": "Example 1:\nInput: dictionary = [\"cat\",\"bat\",\"rat\"], sentence = \"the cattle was rattled by the battery\"\nOutput: \"the cat was rat by the bat\"", "input": "Input: dictionary = [\"cat\",\"bat\",\"rat\"], sentence = \"the cattle was rattled by the battery\"", "output": "Output: \"the cat was rat by the bat\"", "explanation": ""}, {"full_text": "Example 2:\nInput: dictionary = [\"a\",\"b\",\"c\"], sentence = \"aadsfasf absbs bbab cadsfafs\"\nOutput: \"a a b c\"", "input": "Input: dictionary = [\"a\",\"b\",\"c\"], sentence = \"aadsfasf absbs bbab cadsfafs\"", "output": "Output: \"a a b c\"", "explanation": ""}], "constraints": "Constraints:\n1 <= dictionary.length <= 1000\n1 <= dictionary[i].length <= 100\ndictionary[i] consists of only lower-case letters.\n1 <= sentence.length <= 10^6\nsentence consists of only lower-case letters and spaces.\nThe number of words in sentence is in the range [1, 1000]\nThe length of each word in sentence is in the range [1, 1000]\nEvery two consecutive words in sentence will be separated by exactly one space.\nsentence does not have leading or trailing spaces.", "notes": ""}, "647": {"label": "Medium", "title": "Palindromic Substrings", "tags": "algorithms,facebook,linkedin,dynamic-programming,string", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6420999999999999, "total_accepted": 373800.0, "total_submissions": 582100.0, "testcase_example": "'\"abc\"'", "body": "Given a string s, return the number of palindromic substrings in it.\nA string is a palindrome when it reads the same backward as forward.\nA substring is a contiguous sequence of characters within the string.", "examples": [{"full_text": "Example 1:\nInput: s = \"abc\"\nOutput: 3\nExplanation: Three palindromic strings: \"a\", \"b\", \"c\".", "input": "Input: s = \"abc\"", "output": "Output: 3", "explanation": "Explanation: Three palindromic strings: \"a\", \"b\", \"c\"."}, {"full_text": "Example 2:\nInput: s = \"aaa\"\nOutput: 6\nExplanation: Six palindromic strings: \"a\", \"a\", \"a\", \"aa\", \"aa\", \"aaa\".", "input": "Input: s = \"aaa\"", "output": "Output: 6", "explanation": "Explanation: Six palindromic strings: \"a\", \"a\", \"a\", \"aa\", \"aa\", \"aaa\"."}], "constraints": "Constraints:\n1 <= s.length <= 1000\ns consists of lowercase English letters.", "notes": ""}, "646": {"label": "Medium", "title": "Maximum Length of Pair Chain", "tags": "algorithms,amazon,dynamic-programming", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5538000000000001, "total_accepted": 102500.0, "total_submissions": 185100.0, "testcase_example": "'[[1,2],[2,3],[3,4]]'", "body": "You are given an array of n pairs pairs where pairs[i] = [lefti, righti] and lefti < righti.\nA pair p2 = [c, d] follows a pair p1 = [a, b] if b < c. A chain of pairs can be formed in this fashion.\nReturn the length longest chain which can be formed.\nYou do not need to use up all the given intervals. You can select pairs in any order.", "examples": [{"full_text": "Example 1:\nInput: pairs = [[1,2],[2,3],[3,4]]\nOutput: 2\nExplanation: The longest chain is [1,2] -> [3,4].", "input": "Input: pairs = [[1,2],[2,3],[3,4]]", "output": "Output: 2", "explanation": "Explanation: The longest chain is [1,2] -> [3,4]."}, {"full_text": "Example 2:\nInput: pairs = [[1,2],[7,8],[4,5]]\nOutput: 3\nExplanation: The longest chain is [1,2] -> [4,5] -> [7,8].", "input": "Input: pairs = [[1,2],[7,8],[4,5]]", "output": "Output: 3", "explanation": "Explanation: The longest chain is [1,2] -> [4,5] -> [7,8]."}], "constraints": "Constraints:\nn == pairs.length\n1 <= n <= 1000\n-1000 <= lefti < righti <= 1000", "notes": ""}, "641": {"label": "Medium", "title": "Design Circular Deque", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5717, "total_accepted": 40100.0, "total_submissions": 70100.0, "testcase_example": "'[\"MyCircularDeque\",\"insertLast\",\"insertLast\",\"insertFront\",\"insertFront\",\"getRear\",\"isFull\",\"deleteLast\",\"insertFront\",\"getFront\"]\\n' +\n  '[[3],[1],[2],[3],[4],[],[],[],[4],[]]'", "body": "Design your implementation of the circular double-ended queue (deque).\nImplement the MyCircularDeque class:\nMyCircularDeque(int k) Initializes the deque with a maximum size of k.\nboolean insertFront() Adds an item at the front of Deque. Returns true if the operation is successful, or false otherwise.\nboolean insertLast() Adds an item at the rear of Deque. Returns true if the operation is successful, or false otherwise.\nboolean deleteFront() Deletes an item from the front of Deque. Returns true if the operation is successful, or false otherwise.\nboolean deleteLast() Deletes an item from the rear of Deque. Returns true if the operation is successful, or false otherwise.\nint getFront() Returns the front item from the Deque. Returns -1 if the deque is empty.\nint getRear() Returns the last item from Deque. Returns -1 if the deque is empty.\nboolean isEmpty() Returns true if the deque is empty, or false otherwise.\nboolean isFull() Returns true if the deque is full, or false otherwise.", "examples": [{"full_text": "Example 1:\nInput\n[\"MyCircularDeque\", \"insertLast\", \"insertLast\", \"insertFront\", \"insertFront\", \"getRear\", \"isFull\", \"deleteLast\", \"insertFront\", \"getFront\"]\n[[3], [1], [2], [3], [4], [], [], [], [4], []]\nOutput\n[null, true, true, true, false, 2, true, true, true, 4]\nExplanation\nMyCircularDeque myCircularDeque = new MyCircularDeque(3);\nmyCircularDeque.insertLast(1); // return True\nmyCircularDeque.insertLast(2); // return True\nmyCircularDeque.insertFront(3); // return True\nmyCircularDeque.insertFront(4); // return False, the queue is full.\nmyCircularDeque.getRear(); // return 2\nmyCircularDeque.isFull(); // return True\nmyCircularDeque.deleteLast(); // return True\nmyCircularDeque.insertFront(4); // return True\nmyCircularDeque.getFront(); // return 4", "input": "Input\n[\"MyCircularDeque\", \"insertLast\", \"insertLast\", \"insertFront\", \"insertFront\", \"getRear\", \"isFull\", \"deleteLast\", \"insertFront\", \"getFront\"]\n[[3], [1], [2], [3], [4], [], [], [], [4], []]", "output": "Output\n[null, true, true, true, false, 2, true, true, true, 4]", "explanation": "Explanation\nMyCircularDeque myCircularDeque = new MyCircularDeque(3);\nmyCircularDeque.insertLast(1); // return True\nmyCircularDeque.insertLast(2); // return True\nmyCircularDeque.insertFront(3); // return True\nmyCircularDeque.insertFront(4); // return False, the queue is full.\nmyCircularDeque.getRear(); // return 2\nmyCircularDeque.isFull(); // return True\nmyCircularDeque.deleteLast(); // return True\nmyCircularDeque.insertFront(4); // return True\nmyCircularDeque.getFront(); // return 4"}], "constraints": "Constraints:\n1 <= k <= 1000\n0 <= value <= 1000\nAt most 2000 calls will be made to insertFront, insertLast, deleteFront, deleteLast, getFront, getRear, isEmpty, isFull.", "notes": ""}, "640": {"label": "Medium", "title": "Solve the Equation", "tags": "algorithms,amazon,math", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4329, "total_accepted": 31400.0, "total_submissions": 72600.0, "testcase_example": "'\"x+5-3+x=6+x-2\"'", "body": "Solve a given equation and return the value of 'x' in the form of a string \"x=#value\". The equation contains only '+', '-' operation, the variable 'x' and its coefficient. You should return \"No solution\" if there is no solution for the equation, or \"Infinite solutions\" if there are infinite solutions for the equation.\nIf there is exactly one solution for the equation, we ensure that the value of 'x' is an integer.", "examples": [{"full_text": "Example 1:\nInput: equation = \"x+5-3+x=6+x-2\"\nOutput: \"x=2\"", "input": "Input: equation = \"x+5-3+x=6+x-2\"", "output": "Output: \"x=2\"", "explanation": ""}, {"full_text": "Example 2:\nInput: equation = \"x=x\"\nOutput: \"Infinite solutions\"", "input": "Input: equation = \"x=x\"", "output": "Output: \"Infinite solutions\"", "explanation": ""}, {"full_text": "Example 3:\nInput: equation = \"2x=x\"\nOutput: \"x=0\"", "input": "Input: equation = \"2x=x\"", "output": "Output: \"x=0\"", "explanation": ""}], "constraints": "Constraints:\n3 <= equation.length <= 1000\nequation has exactly one '='.\nequation consists of integers with an absolute value in the range [0, 100] without any leading zeros, and the variable 'x'.", "notes": ""}, "638": {"label": "Medium", "title": "Shopping Offers", "tags": "algorithms,google,depth-first-search,dynamic-programming", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5439, "total_accepted": 44300.0, "total_submissions": 81500.0, "testcase_example": "'[2,5]\\n[[3,0,5],[1,2,10]]\\n[3,2]'", "body": "In LeetCode Store, there are n items to sell. Each item has a price. However, there are some special offers, and a special offer consists of one or more different kinds of items with a sale price.\nYou are given an integer array price where price[i] is the price of the i^th item, and an integer array needs where needs[i] is the number of pieces of the i^th item you want to buy.\nYou are also given an array special where special[i] is of size n + 1 where special[i][j] is the number of pieces of the j^th item in the i^th offer and special[i][n] (i.e., the last integer in the array) is the price of the i^th offer.\nReturn the lowest price you have to pay for exactly certain items as given, where you could make optimal use of the special offers. You are not allowed to buy more items than you want, even if that would lower the overall price. You could use any of the special offers as many times as you want.", "examples": [{"full_text": "Example 1:\nInput: price = [2,5], special = [[3,0,5],[1,2,10]], needs = [3,2]\nOutput: 14\nExplanation: There are two kinds of items, A and B. Their prices are $2 and $5 respectively.\nIn special offer 1, you can pay $5 for 3A and 0B\nIn special offer 2, you can pay $10 for 1A and 2B.\nYou need to buy 3A and 2B, so you may pay $10 for 1A and 2B (special offer #2), and $4 for 2A.", "input": "Input: price = [2,5], special = [[3,0,5],[1,2,10]], needs = [3,2]", "output": "Output: 14", "explanation": "Explanation: There are two kinds of items, A and B. Their prices are $2 and $5 respectively.\nIn special offer 1, you can pay $5 for 3A and 0B\nIn special offer 2, you can pay $10 for 1A and 2B.\nYou need to buy 3A and 2B, so you may pay $10 for 1A and 2B (special offer #2), and $4 for 2A."}, {"full_text": "Example 2:\nInput: price = [2,3,4], special = [[1,1,0,4],[2,2,1,9]], needs = [1,2,1]\nOutput: 11\nExplanation: The price of A is $2, and $3 for B, $4 for C.\nYou may pay $4 for 1A and 1B, and $9 for 2A ,2B and 1C.\nYou need to buy 1A ,2B and 1C, so you may pay $4 for 1A and 1B (special offer #1), and $3 for 1B, $4 for 1C.\nYou cannot add more items, though only $9 for 2A ,2B and 1C.", "input": "Input: price = [2,3,4], special = [[1,1,0,4],[2,2,1,9]], needs = [1,2,1]", "output": "Output: 11", "explanation": "Explanation: The price of A is $2, and $3 for B, $4 for C.\nYou may pay $4 for 1A and 1B, and $9 for 2A ,2B and 1C.\nYou need to buy 1A ,2B and 1C, so you may pay $4 for 1A and 1B (special offer #1), and $3 for 1B, $4 for 1C.\nYou cannot add more items, though only $9 for 2A ,2B and 1C."}], "constraints": "Constraints:\nn == price.length\nn == needs.length\n1 <= n <= 6\n0 <= price[i] <= 10\n0 <= needs[i] <= 10\n1 <= special.length <= 100\nspecial[i].length == n + 1\n0 <= special[i][j] <= 50", "notes": ""}, "636": {"label": "Medium", "title": "Exclusive Time of Functions", "tags": "algorithms,facebook,uber,stack", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5943999999999999, "total_accepted": 156300.0, "total_submissions": 262900.0, "testcase_example": "'2\\n[\"0:start:0\",\"1:start:2\",\"1:end:5\",\"0:end:6\"]'", "body": "On a single-threaded CPU, we execute a program containing n functions. Each function has a unique ID between 0 and n-1.\nFunction calls are stored in a call stack: when a function call starts, its ID is pushed onto the stack, and when a function call ends, its ID is popped off the stack. The function whose ID is at the top of the stack is the current function being executed. Each time a function starts or ends, we write a log with the ID, whether it started or ended, and the timestamp.\nYou are given a list logs, where logs[i] represents the i^th log message formatted as a string \"{function_id}:{\"start\" | \"end\"}:{timestamp}\". For example, \"0:start:3\" means a function call with function ID 0 started at the beginning of timestamp 3, and \"1:end:2\" means a function call with function ID 1 ended at the end of timestamp 2. Note that a function can be called multiple times, possibly recursively.\nA function's exclusive time is the sum of execution times for all function calls in the program. For example, if a function is called twice, one call executing for 2 time units and another call executing for 1 time unit, the exclusive time is 2 + 1 = 3.\nReturn the exclusive time of each function in an array, where the value at the i^th index represents the exclusive time for the function with ID i.", "examples": [{"full_text": "Example 1:\nInput: n = 2, logs = [\"0:start:0\",\"1:start:2\",\"1:end:5\",\"0:end:6\"]\nOutput: [3,4]\nExplanation:\nFunction 0 starts at the beginning of time 0, then it executes 2 for units of time and reaches the end of time 1.\nFunction 1 starts at the beginning of time 2, executes for 4 units of time, and ends at the end of time 5.\nFunction 0 resumes execution at the beginning of time 6 and executes for 1 unit of time.\nSo function 0 spends 2 + 1 = 3 units of total time executing, and function 1 spends 4 units of total time executing.", "input": "Input: n = 2, logs = [\"0:start:0\",\"1:start:2\",\"1:end:5\",\"0:end:6\"]", "output": "Output: [3,4]", "explanation": "Explanation:\nFunction 0 starts at the beginning of time 0, then it executes 2 for units of time and reaches the end of time 1.\nFunction 1 starts at the beginning of time 2, executes for 4 units of time, and ends at the end of time 5.\nFunction 0 resumes execution at the beginning of time 6 and executes for 1 unit of time.\nSo function 0 spends 2 + 1 = 3 units of total time executing, and function 1 spends 4 units of total time executing."}, {"full_text": "Example 2:\nInput: n = 1, logs = [\"0:start:0\",\"0:start:2\",\"0:end:5\",\"0:start:6\",\"0:end:6\",\"0:end:7\"]\nOutput: [8]\nExplanation:\nFunction 0 starts at the beginning of time 0, executes for 2 units of time, and recursively calls itself.\nFunction 0 (recursive call) starts at the beginning of time 2 and executes for 4 units of time.\nFunction 0 (initial call) resumes execution then immediately calls itself again.\nFunction 0 (2nd recursive call) starts at the beginning of time 6 and executes for 1 unit of time.\nFunction 0 (initial call) resumes execution at the beginning of time 7 and executes for 1 unit of time.\nSo function 0 spends 2 + 4 + 1 + 1 = 8 units of total time executing.", "input": "Input: n = 1, logs = [\"0:start:0\",\"0:start:2\",\"0:end:5\",\"0:start:6\",\"0:end:6\",\"0:end:7\"]", "output": "Output: [8]", "explanation": "Explanation:\nFunction 0 starts at the beginning of time 0, executes for 2 units of time, and recursively calls itself.\nFunction 0 (recursive call) starts at the beginning of time 2 and executes for 4 units of time.\nFunction 0 (initial call) resumes execution then immediately calls itself again.\nFunction 0 (2nd recursive call) starts at the beginning of time 6 and executes for 1 unit of time.\nFunction 0 (initial call) resumes execution at the beginning of time 7 and executes for 1 unit of time.\nSo function 0 spends 2 + 4 + 1 + 1 = 8 units of total time executing."}, {"full_text": "Example 3:\nInput: n = 2, logs = [\"0:start:0\",\"0:start:2\",\"0:end:5\",\"1:start:6\",\"1:end:6\",\"0:end:7\"]\nOutput: [7,1]\nExplanation:\nFunction 0 starts at the beginning of time 0, executes for 2 units of time, and recursively calls itself.\nFunction 0 (recursive call) starts at the beginning of time 2 and executes for 4 units of time.\nFunction 0 (initial call) resumes execution then immediately calls function 1.\nFunction 1 starts at the beginning of time 6, executes 1 unit of time, and ends at the end of time 6.\nFunction 0 resumes execution at the beginning of time 6 and executes for 2 units of time.\nSo function 0 spends 2 + 4 + 1 = 7 units of total time executing, and function 1 spends 1 unit of total time executing.", "input": "Input: n = 2, logs = [\"0:start:0\",\"0:start:2\",\"0:end:5\",\"1:start:6\",\"1:end:6\",\"0:end:7\"]", "output": "Output: [7,1]", "explanation": "Explanation:\nFunction 0 starts at the beginning of time 0, executes for 2 units of time, and recursively calls itself.\nFunction 0 (recursive call) starts at the beginning of time 2 and executes for 4 units of time.\nFunction 0 (initial call) resumes execution then immediately calls function 1.\nFunction 1 starts at the beginning of time 6, executes 1 unit of time, and ends at the end of time 6.\nFunction 0 resumes execution at the beginning of time 6 and executes for 2 units of time.\nSo function 0 spends 2 + 4 + 1 = 7 units of total time executing, and function 1 spends 1 unit of total time executing."}], "constraints": "Constraints:\n1 <= n <= 100\n1 <= logs.length <= 500\n0 <= function_id < n\n0 <= timestamp <= 10^9\nNo two start events will happen at the same timestamp.\nNo two end events will happen at the same timestamp.\nEach function has an \"end\" log for each \"start\" log.", "notes": ""}, "633": {"label": "Medium", "title": "Sum of Square Numbers", "tags": "algorithms,linkedin,math", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3456, "total_accepted": 126700.0, "total_submissions": 366700.0, "testcase_example": "'5'", "body": "Given a non-negative integer c, decide whether there're two integers a and b such that a^2 + b^2 = c.", "examples": [{"full_text": "Example 1:\nInput: c = 5\nOutput: true\nExplanation: 1 * 1 + 2 * 2 = 5", "input": "Input: c = 5", "output": "Output: true", "explanation": "Explanation: 1 * 1 + 2 * 2 = 5"}, {"full_text": "Example 2:\nInput: c = 3\nOutput: false", "input": "Input: c = 3", "output": "Output: false", "explanation": ""}], "constraints": "Constraints:\n0 <= c <= 2^31 - 1", "notes": ""}, "626": {"label": "Medium", "title": "Exchange Seats", "tags": "database", "langs": "mssql,mysql,oraclesql", "related_topics": "database", "acceptance_ratio": 0.6879000000000001, "total_accepted": 94800.0, "total_submissions": 137700.0, "testcase_example": "'{\"headers\": {\"Seat\": [\"id\",\"student\"]}, \"rows\": {\"Seat\": [[1,\"Abbot\"],[2,\"Doris\"],[3,\"Emerson\"],[4,\"Green\"],[5,\"Jeames\"]]}}'", "body": "Table: Seat\n+-------------+---------+\n| Column Name | Type |\n+-------------+---------+\n| id | int |\n| name | varchar |\n+-------------+---------+\nid is the primary key column for this table.\nEach row of this table indicates the name and the ID of a student.\nid is a continuous increment.\nWrite an SQL query to swap the seat id of every two consecutive students. If the number of students is odd, the id of the last student is not swapped.\nReturn the result table ordered by id in ascending order.\nThe query result format is in the following example.", "examples": [{"full_text": "Example 1:\nInput:\nSeat table:\n+----+---------+\n| id | student |\n+----+---------+\n| 1 | Abbot |\n| 2 | Doris |\n| 3 | Emerson |\n| 4 | Green |\n| 5 | Jeames |\n+----+---------+\nOutput:\n+----+---------+\n| id | student |\n+----+---------+\n| 1 | Doris |\n| 2 | Abbot |\n| 3 | Green |\n| 4 | Emerson |\n| 5 | Jeames |\n+----+---------+\nExplanation:\nNote that if the number of students is odd, there is no need to change the last one's seat.", "input": "Input:\nSeat table:\n+----+---------+\n| id | student |\n+----+---------+\n| 1 | Abbot |\n| 2 | Doris |\n| 3 | Emerson |\n| 4 | Green |\n| 5 | Jeames |\n+----+---------+", "output": "Output:\n+----+---------+\n| id | student |\n+----+---------+\n| 1 | Doris |\n| 2 | Abbot |\n| 3 | Green |\n| 4 | Emerson |\n| 5 | Jeames |\n+----+---------+", "explanation": "Explanation:\nNote that if the number of students is odd, there is no need to change the last one's seat."}], "constraints": "", "notes": ""}, "623": {"label": "Medium", "title": "Add One Row to Tree", "tags": "algorithms,tree", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5371, "total_accepted": 80300.0, "total_submissions": 149500.0, "testcase_example": "'[4,2,6,3,1,5]\\n1\\n2'", "body": "Given the root of a binary tree and two integers val and depth, add a row of nodes with value val at the given depth depth.\nNote that the root node is at depth 1.\nThe adding rule is:\nGiven the integer depth, for each not null tree node cur at the depth depth - 1, create two tree nodes with value val as cur's left subtree root and right subtree root.\ncur's original left subtree should be the left subtree of the new left subtree root.\ncur's original right subtree should be the right subtree of the new right subtree root.\nIf depth == 1 that means there is no depth depth - 1 at all, then create a tree node with value val as the new root of the whole original tree, and the original tree is the new root's left subtree.", "examples": [{"full_text": "Example 1:\nInput: root = [4,2,6,3,1,5], val = 1, depth = 2\nOutput: [4,1,1,2,null,null,6,3,1,5]", "input": "Input: root = [4,2,6,3,1,5], val = 1, depth = 2", "output": "Output: [4,1,1,2,null,null,6,3,1,5]", "explanation": ""}, {"full_text": "Example 2:\nInput: root = [4,2,null,3,1], val = 1, depth = 3\nOutput: [4,2,null,1,1,3,null,null,1]", "input": "Input: root = [4,2,null,3,1], val = 1, depth = 3", "output": "Output: [4,2,null,1,1,3,null,null,1]", "explanation": ""}], "constraints": "Constraints:\nThe number of nodes in the tree is in the range [1, 10^4].\nThe depth of the tree is in the range [1, 10^4].\n-100 <= Node.val <= 100\n-10^5 <= val <= 10^5\n1 <= depth <= the depth of tree + 1", "notes": ""}, "622": {"label": "Medium", "title": "Design Circular Queue", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4849, "total_accepted": 160300.0, "total_submissions": 330600.0, "testcase_example": "'[\"MyCircularQueue\",\"enQueue\",\"enQueue\",\"enQueue\",\"enQueue\",\"Rear\",\"isFull\",\"deQueue\",\"enQueue\",\"Rear\"]\\n' +\n  '[[3],[1],[2],[3],[4],[],[],[],[4],[]]'", "body": "Design your implementation of the circular queue. The circular queue is a linear data structure in which the operations are performed based on FIFO (First In First Out) principle and the last position is connected back to the first position to make a circle. It is also called \"Ring Buffer\".\nOne of the benefits of the circular queue is that we can make use of the spaces in front of the queue. In a normal queue, once the queue becomes full, we cannot insert the next element even if there is a space in front of the queue. But using the circular queue, we can use the space to store new values.\nImplementation the MyCircularQueue class:\nMyCircularQueue(k) Initializes the object with the size of the queue to be k.\nint Front() Gets the front item from the queue. If the queue is empty, return -1.\nint Rear() Gets the last item from the queue. If the queue is empty, return -1.\nboolean enQueue(int value) Inserts an element into the circular queue. Return true if the operation is successful.\nboolean deQueue() Deletes an element from the circular queue. Return true if the operation is successful.\nboolean isEmpty() Checks whether the circular queue is empty or not.\nboolean isFull() Checks whether the circular queue is full or not.\nYou must solve the problem without using the built-in queue data structure in your programming language.", "examples": [{"full_text": "Example 1:\nInput\n[\"MyCircularQueue\", \"enQueue\", \"enQueue\", \"enQueue\", \"enQueue\", \"Rear\", \"isFull\", \"deQueue\", \"enQueue\", \"Rear\"]\n[[3], [1], [2], [3], [4], [], [], [], [4], []]\nOutput\n[null, true, true, true, false, 3, true, true, true, 4]\nExplanation\nMyCircularQueue myCircularQueue = new MyCircularQueue(3);\nmyCircularQueue.enQueue(1); // return True\nmyCircularQueue.enQueue(2); // return True\nmyCircularQueue.enQueue(3); // return True\nmyCircularQueue.enQueue(4); // return False\nmyCircularQueue.Rear(); // return 3\nmyCircularQueue.isFull(); // return True\nmyCircularQueue.deQueue(); // return True\nmyCircularQueue.enQueue(4); // return True\nmyCircularQueue.Rear(); // return 4", "input": "Input\n[\"MyCircularQueue\", \"enQueue\", \"enQueue\", \"enQueue\", \"enQueue\", \"Rear\", \"isFull\", \"deQueue\", \"enQueue\", \"Rear\"]\n[[3], [1], [2], [3], [4], [], [], [], [4], []]", "output": "Output\n[null, true, true, true, false, 3, true, true, true, 4]", "explanation": "Explanation\nMyCircularQueue myCircularQueue = new MyCircularQueue(3);\nmyCircularQueue.enQueue(1); // return True\nmyCircularQueue.enQueue(2); // return True\nmyCircularQueue.enQueue(3); // return True\nmyCircularQueue.enQueue(4); // return False\nmyCircularQueue.Rear(); // return 3\nmyCircularQueue.isFull(); // return True\nmyCircularQueue.deQueue(); // return True\nmyCircularQueue.enQueue(4); // return True\nmyCircularQueue.Rear(); // return 4"}], "constraints": "Constraints:\n1 <= k <= 1000\n0 <= value <= 1000\nAt most 3000 calls will be made to\nenQueue, deQueue,\nFront,\nRear,\nisEmpty, and\nisFull.", "notes": ""}, "621": {"label": "Medium", "title": "Task Scheduler", "tags": "algorithms,facebook,array,greedy,queue", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5417000000000001, "total_accepted": 322500.0, "total_submissions": 595400.0, "testcase_example": "'[\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"]\\n2'", "body": "Given a characters array tasks, representing the tasks a CPU needs to do, where each letter represents a different task. Tasks could be done in any order. Each task is done in one unit of time. For each unit of time, the CPU could complete either one task or just be idle.\nHowever, there is a non-negative integer\nn that represents the cooldown period between\ntwo same tasks\n(the same letter in the array), that is that there must be at least n units of time between any two same tasks.\nReturn the least number of units of times that the CPU will take to finish all the given tasks.", "examples": [{"full_text": "Example 1:\nInput: tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2\nOutput: 8\nExplanation:\nA -> B -> idle -> A -> B -> idle -> A -> B\nThere is at least 2 units of time between any two same tasks.", "input": "Input: tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2", "output": "Output: 8", "explanation": "Explanation:\nA -> B -> idle -> A -> B -> idle -> A -> B\nThere is at least 2 units of time between any two same tasks."}, {"full_text": "Example 2:\nInput: tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 0\nOutput: 6\nExplanation: On this case any permutation of size 6 would work since n = 0.\n[\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"]\n[\"A\",\"B\",\"A\",\"B\",\"A\",\"B\"]\n[\"B\",\"B\",\"B\",\"A\",\"A\",\"A\"]\n...\nAnd so on.", "input": "Input: tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 0", "output": "Output: 6", "explanation": "Explanation: On this case any permutation of size 6 would work since n = 0.\n[\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"]\n[\"A\",\"B\",\"A\",\"B\",\"A\",\"B\"]\n[\"B\",\"B\",\"B\",\"A\",\"A\",\"A\"]\n...\nAnd so on."}, {"full_text": "Example 3:\nInput: tasks = [\"A\",\"A\",\"A\",\"A\",\"A\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\"], n = 2\nOutput: 16\nExplanation:\nOne possible solution is\nA -> B -> C -> A -> D -> E -> A -> F -> G -> A -> idle -> idle -> A -> idle -> idle -> A", "input": "Input: tasks = [\"A\",\"A\",\"A\",\"A\",\"A\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\"], n = 2", "output": "Output: 16", "explanation": "Explanation:\nOne possible solution is\nA -> B -> C -> A -> D -> E -> A -> F -> G -> A -> idle -> idle -> A -> idle -> idle -> A"}], "constraints": "Constraints:\n1 <= task.length <= 10^4\ntasks[i] is upper-case English letter.\nThe integer n is in the range [0, 100].", "notes": ""}, "611": {"label": "Medium", "title": "Valid Triangle Number", "tags": "algorithms,array", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4951, "total_accepted": 129199.99999999999, "total_submissions": 260899.99999999997, "testcase_example": "'[2,2,3,4]'", "body": "Given an integer array nums, return the number of triplets chosen from the array that can make triangles if we take them as side lengths of a triangle.", "examples": [{"full_text": "Example 1:\nInput: nums = [2,2,3,4]\nOutput: 3\nExplanation: Valid combinations are:\n2,3,4 (using the first 2)\n2,3,4 (using the second 2)\n2,2,3", "input": "Input: nums = [2,2,3,4]", "output": "Output: 3", "explanation": "Explanation: Valid combinations are:\n2,3,4 (using the first 2)\n2,3,4 (using the second 2)\n2,2,3"}, {"full_text": "Example 2:\nInput: nums = [4,2,3,4]\nOutput: 4", "input": "Input: nums = [4,2,3,4]", "output": "Output: 4", "explanation": ""}], "constraints": "Constraints:\n1 <= nums.length <= 1000\n0 <= nums[i] <= 1000", "notes": ""}, "609": {"label": "Medium", "title": "Find Duplicate File in System", "tags": "algorithms,hash-table,string", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6364, "total_accepted": 92700.0, "total_submissions": 145600.0, "testcase_example": "'[\"root/a 1.txt(abcd) 2.txt(efgh)\",\"root/c 3.txt(abcd)\",\"root/c/d 4.txt(efgh)\",\"root 4.txt(efgh)\"]'", "body": "Given a list paths of directory info, including the directory path, and all the files with contents in this directory, return all the duplicate files in the file system in terms of their paths. You may return the answer in any order.\nA group of duplicate files consists of at least two files that have the same content.\nA single directory info string in the input list has the following format:\n\"root/d1/d2/.../dm f1.txt(f1_content) f2.txt(f2_content) ... fn.txt(fn_content)\"\nIt means there are n files (f1.txt, f2.txt ... fn.txt) with content (f1_content, f2_content ... fn_content) respectively in the directory \"root/d1/d2/.../dm\". Note that n >= 1 and m >= 0. If m = 0, it means the directory is just the root directory.\nThe output is a list of groups of duplicate file paths. For each group, it contains all the file paths of the files that have the same content. A file path is a string that has the following format:\n\"directory_path/file_name.txt\"", "examples": [{"full_text": "Example 1:\nInput: paths = [\"root/a 1.txt(abcd) 2.txt(efgh)\",\"root/c 3.txt(abcd)\",\"root/c/d 4.txt(efgh)\",\"root 4.txt(efgh)\"]\nOutput: [[\"root/a/2.txt\",\"root/c/d/4.txt\",\"root/4.txt\"],[\"root/a/1.txt\",\"root/c/3.txt\"]]", "input": "Input: paths = [\"root/a 1.txt(abcd) 2.txt(efgh)\",\"root/c 3.txt(abcd)\",\"root/c/d 4.txt(efgh)\",\"root 4.txt(efgh)\"]", "output": "Output: [[\"root/a/2.txt\",\"root/c/d/4.txt\",\"root/4.txt\"],[\"root/a/1.txt\",\"root/c/3.txt\"]]", "explanation": ""}, {"full_text": "Example 2:\nInput: paths = [\"root/a 1.txt(abcd) 2.txt(efgh)\",\"root/c 3.txt(abcd)\",\"root/c/d 4.txt(efgh)\"]\nOutput: [[\"root/a/2.txt\",\"root/c/d/4.txt\"],[\"root/a/1.txt\",\"root/c/3.txt\"]]", "input": "Input: paths = [\"root/a 1.txt(abcd) 2.txt(efgh)\",\"root/c 3.txt(abcd)\",\"root/c/d 4.txt(efgh)\"]", "output": "Output: [[\"root/a/2.txt\",\"root/c/d/4.txt\"],[\"root/a/1.txt\",\"root/c/3.txt\"]]", "explanation": ""}], "constraints": "Constraints:\n1 <= paths.length <= 2 * 10^4\n1 <= paths[i].length <= 3000\n1 <= sum(paths[i].length) <= 5 * 10^5\npaths[i] consist of English letters, digits, '/', '.', '(', ')', and ' '.\nYou may assume no files or directories share the same name in the same directory.\nYou may assume each given directory info represents a unique directory. A single blank space separates the directory path and file info.\nFollow up:\nImagine you are given a real file system, how will you search files? DFS or BFS?\nIf the file content is very large (GB level), how will you modify your solution?\nIf you can only read the file by 1kb each time, how will you modify your solution?\nWhat is the time complexity of your modified solution? What is the most time-consuming part and memory-consuming part of it? How to optimize?\nHow to make sure the duplicated files you find are not false positive?", "notes": ""}, "593": {"label": "Medium", "title": "Valid Square", "tags": "algorithms,math", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.43770000000000003, "total_accepted": 79500.0, "total_submissions": 181700.0, "testcase_example": "'[0,0]\\n[1,1]\\n[1,0]\\n[0,1]'", "body": "Given the coordinates of four points in 2D space p1, p2, p3 and p4, return true if the four points construct a square.\nThe coordinate of a point pi is represented as [xi, yi]. The input is not given in any order.\nA valid square has four equal sides with positive length and four equal angles (90-degree angles).", "examples": [{"full_text": "Example 1:\nInput: p1 = [0,0], p2 = [1,1], p3 = [1,0], p4 = [0,1]\nOutput: true", "input": "Input: p1 = [0,0], p2 = [1,1], p3 = [1,0], p4 = [0,1]", "output": "Output: true", "explanation": ""}, {"full_text": "Example 2:\nInput: p1 = [0,0], p2 = [1,1], p3 = [1,0], p4 = [0,12]\nOutput: false", "input": "Input: p1 = [0,0], p2 = [1,1], p3 = [1,0], p4 = [0,12]", "output": "Output: false", "explanation": ""}, {"full_text": "Example 3:\nInput: p1 = [1,0], p2 = [-1,0], p3 = [0,1], p4 = [0,-1]\nOutput: true", "input": "Input: p1 = [1,0], p2 = [-1,0], p3 = [0,1], p4 = [0,-1]", "output": "Output: true", "explanation": ""}], "constraints": "Constraints:\np1.length == p2.length == p3.length == p4.length == 2\n-10^4 <= xi, yi <= 10^4", "notes": ""}, "592": {"label": "Medium", "title": "Fraction Addition and Subtraction", "tags": "algorithms,math", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5157, "total_accepted": 27900.0, "total_submissions": 54100.0, "testcase_example": "'\"-1/2+1/2\"'", "body": "Given a string expression representing an expression of fraction addition and subtraction, return the calculation result in string format.\nThe final result should be an irreducible fraction. If your final result is an integer, change it to the format of a fraction that has a denominator 1. So in this case, 2 should be converted to 2/1.", "examples": [{"full_text": "Example 1:\nInput: expression = \"-1/2+1/2\"\nOutput: \"0/1\"", "input": "Input: expression = \"-1/2+1/2\"", "output": "Output: \"0/1\"", "explanation": ""}, {"full_text": "Example 2:\nInput: expression = \"-1/2+1/2+1/3\"\nOutput: \"1/3\"", "input": "Input: expression = \"-1/2+1/2+1/3\"", "output": "Output: \"1/3\"", "explanation": ""}, {"full_text": "Example 3:\nInput: expression = \"1/3-1/2\"\nOutput: \"-1/6\"", "input": "Input: expression = \"1/3-1/2\"", "output": "Output: \"-1/6\"", "explanation": ""}], "constraints": "Constraints:\nThe input string only contains '0' to '9', '/', '+' and '-'. So does the output.\nEach fraction (input and output) has the format \u00b1numerator/denominator. If the first input fraction or the output is positive, then '+' will be omitted.\nThe input only contains valid irreducible fractions, where the numerator and denominator of each fraction will always be in the range [1, 10]. If the denominator is 1, it means this fraction is actually an integer in a fraction format defined above.\nThe number of given fractions will be in the range [1, 10].\nThe numerator and denominator of the final result are guaranteed to be valid and in the range of 32-bit int.", "notes": ""}, "583": {"label": "Medium", "title": "Delete Operation for Two Strings", "tags": "algorithms,google,string", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5504, "total_accepted": 107000.0, "total_submissions": 194300.0, "testcase_example": "'\"sea\"\\n\"eat\"'", "body": "Given two strings word1 and word2, return the minimum number of steps required to make word1 and word2 the same.\nIn one step, you can delete exactly one character in either string.", "examples": [{"full_text": "Example 1:\nInput: word1 = \"sea\", word2 = \"eat\"\nOutput: 2\nExplanation: You need one step to make \"sea\" to \"ea\" and another step to make \"eat\" to \"ea\".", "input": "Input: word1 = \"sea\", word2 = \"eat\"", "output": "Output: 2", "explanation": "Explanation: You need one step to make \"sea\" to \"ea\" and another step to make \"eat\" to \"ea\"."}, {"full_text": "Example 2:\nInput: word1 = \"leetcode\", word2 = \"etco\"\nOutput: 4", "input": "Input: word1 = \"leetcode\", word2 = \"etco\"", "output": "Output: 4", "explanation": ""}], "constraints": "Constraints:\n1 <= word1.length, word2.length <= 500\nword1 and word2 consist of only lowercase English letters.", "notes": ""}, "581": {"label": "Medium", "title": "Shortest Unsorted Continuous Subarray", "tags": "algorithms,google,array", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3398, "total_accepted": 209500.0, "total_submissions": 616400.0, "testcase_example": "'[2,6,4,8,10,9,15]'", "body": "Given an integer array nums, you need to find one continuous subarray that if you only sort this subarray in ascending order, then the whole array will be sorted in ascending order.\nReturn the shortest such subarray and output its length.", "examples": [{"full_text": "Example 1:\nInput: nums = [2,6,4,8,10,9,15]\nOutput: 5\nExplanation: You need to sort [6, 4, 8, 10, 9] in ascending order to make the whole array sorted in ascending order.", "input": "Input: nums = [2,6,4,8,10,9,15]", "output": "Output: 5", "explanation": "Explanation: You need to sort [6, 4, 8, 10, 9] in ascending order to make the whole array sorted in ascending order."}, {"full_text": "Example 2:\nInput: nums = [1,2,3,4]\nOutput: 0", "input": "Input: nums = [1,2,3,4]", "output": "Output: 0", "explanation": ""}, {"full_text": "Example 3:\nInput: nums = [1]\nOutput: 0", "input": "Input: nums = [1]", "output": "Output: 0", "explanation": ""}], "constraints": "Constraints:\n1 <= nums.length <= 10^4\n-10^5 <= nums[i] <= 10^5\nFollow up: Can you solve it in O(n) time complexity?", "notes": ""}, "576": {"label": "Medium", "title": "Out of Boundary Paths", "tags": "algorithms,baidu,depth-first-search,dynamic-programming", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3997, "total_accepted": 61700.0, "total_submissions": 154400.0, "testcase_example": "'2\\n2\\n2\\n0\\n0'", "body": "There is an m x n grid with a ball. The ball is initially at the position [startRow, startColumn]. You are allowed to move the ball to one of the four adjacent cells in the grid (possibly out of the grid crossing the grid boundary). You can apply at most maxMove moves to the ball.\nGiven the five integers m, n, maxMove, startRow, startColumn, return the number of paths to move the ball out of the grid boundary. Since the answer can be very large, return it modulo 10^9 + 7.", "examples": [{"full_text": "Example 1:\nInput: m = 2, n = 2, maxMove = 2, startRow = 0, startColumn = 0\nOutput: 6", "input": "Input: m = 2, n = 2, maxMove = 2, startRow = 0, startColumn = 0", "output": "Output: 6", "explanation": ""}, {"full_text": "Example 2:\nInput: m = 1, n = 3, maxMove = 3, startRow = 0, startColumn = 1\nOutput: 12", "input": "Input: m = 1, n = 3, maxMove = 3, startRow = 0, startColumn = 1", "output": "Output: 12", "explanation": ""}], "constraints": "Constraints:\n1 <= m, n <= 50\n0 <= maxMove <= 50\n0 <= startRow < m\n0 <= startColumn < n", "notes": ""}, "567": {"label": "Medium", "title": "Permutation in String", "tags": "algorithms,microsoft,two-pointers", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.451, "total_accepted": 337200.0, "total_submissions": 747800.0, "testcase_example": "'\"ab\"\\n\"eidbaooo\"'", "body": "Given two strings s1 and s2, return true if s2 contains a permutation of s1, or false otherwise.\nIn other words, return true if one of s1's permutations is the substring of s2.", "examples": [{"full_text": "Example 1:\nInput: s1 = \"ab\", s2 = \"eidbaooo\"\nOutput: true\nExplanation: s2 contains one permutation of s1 (\"ba\").", "input": "Input: s1 = \"ab\", s2 = \"eidbaooo\"", "output": "Output: true", "explanation": "Explanation: s2 contains one permutation of s1 (\"ba\")."}, {"full_text": "Example 2:\nInput: s1 = \"ab\", s2 = \"eidboaoo\"\nOutput: false", "input": "Input: s1 = \"ab\", s2 = \"eidboaoo\"", "output": "Output: false", "explanation": ""}], "constraints": "Constraints:\n1 <= s1.length, s2.length <= 10^4\ns1 and s2 consist of lowercase English letters.", "notes": ""}, "565": {"label": "Medium", "title": "Array Nesting", "tags": "algorithms,array", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5624, "total_accepted": 110900.0, "total_submissions": 197300.0, "testcase_example": "'[5,4,0,3,1,6,2]'", "body": "You are given an integer array nums of length n where nums is a permutation of the numbers in the range [0, n - 1].\nYou should build a set s[k] = {nums[k], nums[nums[k]], nums[nums[nums[k]]], ... } subjected to the following rule:\nThe first element in s[k] starts with the selection of the element nums[k] of index = k.\nThe next element in s[k] should be nums[nums[k]], and then nums[nums[nums[k]]], and so on.\nWe stop adding right before a duplicate element occurs in s[k].\nReturn the longest length of a set s[k].", "examples": [{"full_text": "Example 1:\nInput: nums = [5,4,0,3,1,6,2]\nOutput: 4\nExplanation:\nnums[0] = 5, nums[1] = 4, nums[2] = 0, nums[3] = 3, nums[4] = 1, nums[5] = 6, nums[6] = 2.\nOne of the longest sets s[k]:\ns[0] = {nums[0], nums[5], nums[6], nums[2]} = {5, 6, 2, 0}", "input": "Input: nums = [5,4,0,3,1,6,2]", "output": "Output: 4", "explanation": "Explanation:\nnums[0] = 5, nums[1] = 4, nums[2] = 0, nums[3] = 3, nums[4] = 1, nums[5] = 6, nums[6] = 2.\nOne of the longest sets s[k]:\ns[0] = {nums[0], nums[5], nums[6], nums[2]} = {5, 6, 2, 0}"}, {"full_text": "Example 2:\nInput: nums = [0,1,2]\nOutput: 1", "input": "Input: nums = [0,1,2]", "output": "Output: 1", "explanation": ""}], "constraints": "Constraints:\n1 <= nums.length <= 10^5\n0 <= nums[i] < nums.length\nAll the values of nums are unique.", "notes": ""}, "560": {"label": "Medium", "title": "Subarray Sum Equals K", "tags": "algorithms,google,array,map", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.441, "total_accepted": 714600.0, "total_submissions": 1600000.0, "testcase_example": "'[1,1,1]\\n2'", "body": "Given an array of integers nums and an integer k, return the total number of subarrays whose sum equals to k.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,1,1], k = 2\nOutput: 2", "input": "Input: nums = [1,1,1], k = 2", "output": "Output: 2", "explanation": ""}, {"full_text": "Example 2:\nInput: nums = [1,2,3], k = 3\nOutput: 2", "input": "Input: nums = [1,2,3], k = 3", "output": "Output: 2", "explanation": ""}], "constraints": "Constraints:\n1 <= nums.length <= 2 * 10^4\n-1000 <= nums[i] <= 1000\n-10^7 <= k <= 10^7", "notes": ""}, "558": {"label": "Medium", "title": "Logical OR of Two Binary Grids Represented as Quad-Trees", "tags": "algorithms", "langs": "cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4711, "total_accepted": 10900.0, "total_submissions": 23100.0, "testcase_example": "'[[0,1],[1,1],[1,1],[1,0],[1,0]]\\n' +\n  '[[0,1],[1,1],[0,1],[1,1],[1,0],null,null,null,null,[1,0],[1,0],[1,1],[1,1]]'", "body": "A Binary Matrix is a matrix in which all the elements are either 0 or 1.\nGiven quadTree1 and quadTree2. quadTree1 represents a n * n binary matrix and quadTree2 represents another n * n binary matrix.\nReturn a Quad-Tree representing the n * n binary matrix which is the result of logical bitwise OR of the two binary matrixes represented by quadTree1 and quadTree2.\nNotice that you can assign the value of a node to True or False when isLeaf is False, and both are accepted in the answer.\nA Quad-Tree is a tree data structure in which each internal node has exactly four children. Besides, each node has two attributes:\nval: True if the node represents a grid of 1's or False if the node represents a grid of 0's.\nisLeaf: True if the node is leaf node on the tree or False if the node has the four children.\nclass Node {\npublic boolean val;\npublic boolean isLeaf;\npublic Node topLeft;\npublic Node topRight;\npublic Node bottomLeft;\npublic Node bottomRight;\n}\nWe can construct a Quad-Tree from a two-dimensional area using the following steps:\nIf the current grid has the same value (i.e all 1's or all 0's) set isLeaf True and set val to the value of the grid and set the four children to Null and stop.\nIf the current grid has different values, set isLeaf to False and set val to any value and divide the current grid into four sub-grids as shown in the photo.\nRecurse for each of the children with the proper sub-grid.\nIf you want to know more about the Quad-Tree, you can refer to the wiki.\nQuad-Tree format:\nThe input/output represents the serialized format of a Quad-Tree using level order traversal, where null signifies a path terminator where no node exists below.\nIt is very similar to the serialization of the binary tree. The only difference is that the node is represented as a list [isLeaf, val].\nIf the value of isLeaf or val is True we represent it as 1 in the list [isLeaf, val] and if the value of isLeaf or val is False we represent it as 0.", "examples": [{"full_text": "Example 1:\n\nInput: quadTree1 = [[0,1],[1,1],[1,1],[1,0],[1,0]]\n, quadTree2 = [[0,1],[1,1],[0,1],[1,1],[1,0],null,null,null,null,[1,0],[1,0],[1,1],[1,1]]\nOutput: [[0,0],[1,1],[1,1],[1,1],[1,0]]\nExplanation: quadTree1 and quadTree2 are shown above. You can see the binary matrix which is represented by each Quad-Tree.\nIf we apply logical bitwise OR on the two binary matrices we get the binary matrix below which is represented by the result Quad-Tree.\nNotice that the binary matrices shown are only for illustration, you don't have to construct the binary matrix to get the result tree.", "input": "Input: quadTree1 = [[0,1],[1,1],[1,1],[1,0],[1,0]]\n, quadTree2 = [[0,1],[1,1],[0,1],[1,1],[1,0],null,null,null,null,[1,0],[1,0],[1,1],[1,1]]", "output": "Output: [[0,0],[1,1],[1,1],[1,1],[1,0]]", "explanation": "Explanation: quadTree1 and quadTree2 are shown above. You can see the binary matrix which is represented by each Quad-Tree.\nIf we apply logical bitwise OR on the two binary matrices we get the binary matrix below which is represented by the result Quad-Tree.\nNotice that the binary matrices shown are only for illustration, you don't have to construct the binary matrix to get the result tree."}, {"full_text": "Example 2:\nInput: quadTree1 = [[1,0]], quadTree2 = [[1,0]]\nOutput: [[1,0]]\nExplanation: Each tree represents a binary matrix of size 1*1. Each matrix contains only zero.\nThe resulting matrix is of size 1*1 with also zero.", "input": "Input: quadTree1 = [[1,0]], quadTree2 = [[1,0]]", "output": "Output: [[1,0]]", "explanation": "Explanation: Each tree represents a binary matrix of size 1*1. Each matrix contains only zero.\nThe resulting matrix is of size 1*1 with also zero."}], "constraints": "Constraints:\nquadTree1 and quadTree2 are both valid Quad-Trees each representing a n * n grid.\nn == 2^x where 0 <= x <= 9.", "notes": ""}, "556": {"label": "Medium", "title": "Next Greater Element III", "tags": "algorithms,bloomberg,string", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.33640000000000003, "total_accepted": 90100.0, "total_submissions": 267700.0, "testcase_example": "'12'", "body": "Given a positive integer n, find the smallest integer which has exactly the same digits existing in the integer n and is greater in value than n. If no such positive integer exists, return -1.\nNote that the returned integer should fit in 32-bit integer, if there is a valid answer but it does not fit in 32-bit integer, return -1.", "examples": [{"full_text": "Example 1:\nInput: n = 12\nOutput: 21", "input": "Input: n = 12", "output": "Output: 21", "explanation": ""}, {"full_text": "Example 2:\nInput: n = 21\nOutput: -1", "input": "Input: n = 21", "output": "Output: -1", "explanation": ""}], "constraints": "Constraints:\n1 <= n <= 2^31 - 1", "notes": ""}, "554": {"label": "Medium", "title": "Brick Wall", "tags": "algorithms,facebook,hash-table", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5242, "total_accepted": 97800.0, "total_submissions": 186500.0, "testcase_example": "'[[1,2,2,1],[3,1,2],[1,3,2],[2,4],[3,1,2],[1,3,1,1]]'", "body": "There is a rectangular brick wall in front of you with n rows of bricks. The i^th row has some number of bricks each of the same height (i.e., one unit) but they can be of different widths. The total width of each row is the same.\nDraw a vertical line from the top to the bottom and cross the least bricks. If your line goes through the edge of a brick, then the brick is not considered as crossed. You cannot draw a line just along one of the two vertical edges of the wall, in which case the line will obviously cross no bricks.\nGiven the 2D array wall that contains the information about the wall, return the minimum number of crossed bricks after drawing such a vertical line.", "examples": [{"full_text": "Example 1:\nInput: wall = [[1,2,2,1],[3,1,2],[1,3,2],[2,4],[3,1,2],[1,3,1,1]]\nOutput: 2", "input": "Input: wall = [[1,2,2,1],[3,1,2],[1,3,2],[2,4],[3,1,2],[1,3,1,1]]", "output": "Output: 2", "explanation": ""}, {"full_text": "Example 2:\nInput: wall = [[1],[1],[1]]\nOutput: 3", "input": "Input: wall = [[1],[1],[1]]", "output": "Output: 3", "explanation": ""}], "constraints": "Constraints:\nn == wall.length\n1 <= n <= 10^4\n1 <= wall[i].length <= 10^4\n1 <= sum(wall[i].length) <= 2 * 10^4\nsum(wall[i]) is the same for each row i.\n1 <= wall[i][j] <= 2^31 - 1", "notes": ""}, "553": {"label": "Medium", "title": "Optimal Division", "tags": "algorithms,amazon,math,string", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5871, "total_accepted": 30800.0, "total_submissions": 52400.0, "testcase_example": "'[1000,100,10,2]'", "body": "You are given an integer array nums. The adjacent integers in nums will perform the float division.\nFor example, for nums = [2,3,4], we will evaluate the expression \"2/3/4\".\nHowever, you can add any number of parenthesis at any position to change the priority of operations. You want to add these parentheses such the value of the expression after the evaluation is maximum.\nReturn the corresponding expression that has the maximum value in string format.\nNote: your expression should not contain redundant parenthesis.", "examples": [{"full_text": "Example 1:\nInput: nums = [1000,100,10,2]\nOutput: \"1000/(100/10/2)\"\nExplanation:\n1000/(100/10/2) = 1000/((100/10)/2) = 200\nHowever, the bold parenthesis in \"1000/((100/10)/2)\" are redundant, since they don't influence the operation priority. So you should return \"1000/(100/10/2)\".\nOther cases:\n1000/(100/10)/2 = 50\n1000/(100/(10/2)) = 50\n1000/100/10/2 = 0.5\n1000/100/(10/2) = 2", "input": "Input: nums = [1000,100,10,2]", "output": "Output: \"1000/(100/10/2)\"", "explanation": "Explanation:\n1000/(100/10/2) = 1000/((100/10)/2) = 200\nHowever, the bold parenthesis in \"1000/((100/10)/2)\" are redundant, since they don't influence the operation priority. So you should return \"1000/(100/10/2)\".\nOther cases:\n1000/(100/10)/2 = 50\n1000/(100/(10/2)) = 50\n1000/100/10/2 = 0.5\n1000/100/(10/2) = 2"}, {"full_text": "Example 2:\nInput: nums = [2,3,4]\nOutput: \"2/(3/4)\"", "input": "Input: nums = [2,3,4]", "output": "Output: \"2/(3/4)\"", "explanation": ""}, {"full_text": "Example 3:\nInput: nums = [2]\nOutput: \"2\"", "input": "Input: nums = [2]", "output": "Output: \"2\"", "explanation": ""}], "constraints": "Constraints:\n1 <= nums.length <= 10\n2 <= nums[i] <= 1000\nThere is only one optimal division for the given iput.", "notes": ""}, "547": {"label": "Medium", "title": "Number of Provinces", "tags": "algorithms,bloomberg,twosigma,depth-first-search,union-find", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6246, "total_accepted": 415200.0, "total_submissions": 664800.0, "testcase_example": "'[[1,1,0],[1,1,0],[0,0,1]]'", "body": "There are n cities. Some of them are connected, while some are not. If city a is connected directly with city b, and city b is connected directly with city c, then city a is connected indirectly with city c.\nA province is a group of directly or indirectly connected cities and no other cities outside of the group.\nYou are given an n x n matrix isConnected where isConnected[i][j] = 1 if the i^th city and the j^th city are directly connected, and isConnected[i][j] = 0 otherwise.\nReturn the total number of provinces.", "examples": [{"full_text": "Example 1:\nInput: isConnected = [[1,1,0],[1,1,0],[0,0,1]]\nOutput: 2", "input": "Input: isConnected = [[1,1,0],[1,1,0],[0,0,1]]", "output": "Output: 2", "explanation": ""}, {"full_text": "Example 2:\nInput: isConnected = [[1,0,0],[0,1,0],[0,0,1]]\nOutput: 3", "input": "Input: isConnected = [[1,0,0],[0,1,0],[0,0,1]]", "output": "Output: 3", "explanation": ""}], "constraints": "Constraints:\n1 <= n <= 200\nn == isConnected.length\nn == isConnected[i].length\nisConnected[i][j] is 1 or 0.\nisConnected[i][i] == 1\nisConnected[i][j] == isConnected[j][i]", "notes": ""}, "542": {"label": "Medium", "title": "01 Matrix", "tags": "algorithms,google,breadth-first-search,depth-first-search", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.43420000000000003, "total_accepted": 213700.0, "total_submissions": 492200.0, "testcase_example": "'[[0,0,0],[0,1,0],[0,0,0]]'", "body": "Given an m x n binary matrix mat, return the distance of the nearest 0 for each cell.\nThe distance between two adjacent cells is 1.", "examples": [{"full_text": "Example 1:\nInput: mat = [[0,0,0],[0,1,0],[0,0,0]]\nOutput: [[0,0,0],[0,1,0],[0,0,0]]", "input": "Input: mat = [[0,0,0],[0,1,0],[0,0,0]]", "output": "Output: [[0,0,0],[0,1,0],[0,0,0]]", "explanation": ""}, {"full_text": "Example 2:\nInput: mat = [[0,0,0],[0,1,0],[1,1,1]]\nOutput: [[0,0,0],[0,1,0],[1,2,1]]", "input": "Input: mat = [[0,0,0],[0,1,0],[1,1,1]]", "output": "Output: [[0,0,0],[0,1,0],[1,2,1]]", "explanation": ""}], "constraints": "Constraints:\nm == mat.length\nn == mat[i].length\n1 <= m, n <= 10^4\n1 <= m * n <= 10^4\nmat[i][j] is either 0 or 1.\nThere is at least one 0 in mat.", "notes": ""}, "540": {"label": "Medium", "title": "Single Element in a Sorted Array", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5871999999999999, "total_accepted": 271800.0, "total_submissions": 462900.0, "testcase_example": "'[1,1,2,3,3,4,4,8,8]'", "body": "You are given a sorted array consisting of only integers where every element appears exactly twice, except for one element which appears exactly once.\nReturn the single element that appears only once.\nYour solution must run in O(log n) time and O(1) space.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,1,2,3,3,4,4,8,8]\nOutput: 2", "input": "Input: nums = [1,1,2,3,3,4,4,8,8]", "output": "Output: 2", "explanation": ""}, {"full_text": "Example 2:\nInput: nums = [3,3,7,7,10,11,11]\nOutput: 10", "input": "Input: nums = [3,3,7,7,10,11,11]", "output": "Output: 10", "explanation": ""}], "constraints": "Constraints:\n1 <= nums.length <= 10^5\n0 <= nums[i] <= 10^5", "notes": ""}, "539": {"label": "Medium", "title": "Minimum Time Difference", "tags": "algorithms,string", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5372, "total_accepted": 75000.0, "total_submissions": 139600.0, "testcase_example": "'[\"23:59\",\"00:00\"]'", "body": "Given a list of 24-hour clock time points in \"HH:MM\" format, return the minimum minutes difference between any two time-points in the list.", "examples": [{"full_text": "Example 1:\nInput: timePoints = [\"23:59\",\"00:00\"]\nOutput: 1", "input": "Input: timePoints = [\"23:59\",\"00:00\"]", "output": "Output: 1", "explanation": ""}, {"full_text": "Example 2:\nInput: timePoints = [\"00:00\",\"23:59\",\"00:00\"]\nOutput: 0", "input": "Input: timePoints = [\"00:00\",\"23:59\",\"00:00\"]", "output": "Output: 0", "explanation": ""}], "constraints": "Constraints:\n2 <= timePoints.length <= 2 * 10^4\ntimePoints[i] is in the format \"HH:MM\".", "notes": ""}, "538": {"label": "Medium", "title": "Convert BST to Greater Tree", "tags": "algorithms,amazon,tree", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6243, "total_accepted": 191200.0, "total_submissions": 306200.0, "testcase_example": "'[4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]'", "body": "Given the root of a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus the sum of all keys greater than the original key in BST.\nAs a reminder, a binary search tree is a tree that satisfies these constraints:\nThe left subtree of a node contains only nodes with keys less than the node's key.\nThe right subtree of a node contains only nodes with keys greater than the node's key.\nBoth the left and right subtrees must also be binary search trees.", "examples": [{"full_text": "Example 1:\nInput: root = [4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]\nOutput: [30,36,21,36,35,26,15,null,null,null,33,null,null,null,8]", "input": "Input: root = [4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]", "output": "Output: [30,36,21,36,35,26,15,null,null,null,33,null,null,null,8]", "explanation": ""}, {"full_text": "Example 2:\nInput: root = [0,null,1]\nOutput: [1,null,1]", "input": "Input: root = [0,null,1]", "output": "Output: [1,null,1]", "explanation": ""}], "constraints": "Constraints:\nThe number of nodes in the tree is in the range [0, 10^4].\n-10^4 <= Node.val <= 10^4\nAll the values in the tree are unique.\nroot is guaranteed to be a valid binary search tree.", "notes": "Note: This question is the same as 1038: https://leetcode.com/problems/binary-search-tree-to-greater-sum-tree/"}, "537": {"label": "Medium", "title": "Complex Number Multiplication", "tags": "algorithms,amazon,math,string", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7103, "total_accepted": 79300.0, "total_submissions": 111700.0, "testcase_example": "'\"1+1i\"\\n\"1+1i\"'", "body": "A complex number can be represented as a string on the form \"real+imaginaryi\" where:\nreal is the real part and is an integer in the range [-100, 100].\nimaginary is the imaginary part and is an integer in the range [-100, 100].\ni^2 == -1.\nGiven two complex numbers num1 and num2 as strings, return a string of the complex number that represents their multiplications.", "examples": [{"full_text": "Example 1:\nInput: num1 = \"1+1i\", num2 = \"1+1i\"\nOutput: \"0+2i\"\nExplanation: (1 + i) * (1 + i) = 1 + i2 + 2 * i = 2i, and you need convert it to the form of 0+2i.", "input": "Input: num1 = \"1+1i\", num2 = \"1+1i\"", "output": "Output: \"0+2i\"", "explanation": "Explanation: (1 + i) * (1 + i) = 1 + i2 + 2 * i = 2i, and you need convert it to the form of 0+2i."}, {"full_text": "Example 2:\nInput: num1 = \"1+-1i\", num2 = \"1+-1i\"\nOutput: \"0+-2i\"\nExplanation: (1 - i) * (1 - i) = 1 + i2 - 2 * i = -2i, and you need convert it to the form of 0+-2i.", "input": "Input: num1 = \"1+-1i\", num2 = \"1+-1i\"", "output": "Output: \"0+-2i\"", "explanation": "Explanation: (1 - i) * (1 - i) = 1 + i2 - 2 * i = -2i, and you need convert it to the form of 0+-2i."}], "constraints": "Constraints:\nnum1 and num2 are valid complex numbers.", "notes": ""}, "535": {"label": "Medium", "title": "Encode and Decode TinyURL", "tags": "algorithms,amazon,facebook,google,uber,hash-table,math", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.8331000000000001, "total_accepted": 162200.0, "total_submissions": 194700.0, "testcase_example": "'\"https://leetcode.com/problems/design-tinyurl\"'", "body": "Note: This is a companion problem to the System Design problem: Design TinyURL.\nTinyURL is a URL shortening service where you enter a URL such as https://leetcode.com/problems/design-tinyurl and it returns a short URL such as http://tinyurl.com/4e9iAk. Design a class to encode a URL and decode a tiny URL.\nThere is no restriction on how your encode/decode algorithm should work. You just need to ensure that a URL can be encoded to a tiny URL and the tiny URL can be decoded to the original URL.\nImplement the Solution class:\nSolution() Initializes the object of the system.\nString encode(String longUrl) Returns a tiny URL for the given longUrl.\nString decode(String shortUrl) Returns the original long URL for the given shortUrl. It is guaranteed that the given shortUrl was encoded by the same object.", "examples": [{"full_text": "Example 1:\nInput: url = \"https://leetcode.com/problems/design-tinyurl\"\nOutput: \"https://leetcode.com/problems/design-tinyurl\"\nExplanation:\nSolution obj = new Solution();\nstring tiny = obj.encode(url); // returns the encoded tiny url.\nstring ans = obj.decode(tiny); // returns the original url after deconding it.", "input": "Input: url = \"https://leetcode.com/problems/design-tinyurl\"", "output": "Output: \"https://leetcode.com/problems/design-tinyurl\"", "explanation": "Explanation:\nSolution obj = new Solution();\nstring tiny = obj.encode(url); // returns the encoded tiny url.\nstring ans = obj.decode(tiny); // returns the original url after deconding it."}], "constraints": "Constraints:\n1 <= url.length <= 10^4\nurl is guranteed to be a valid URL.", "notes": ""}, "532": {"label": "Medium", "title": "K-diff Pairs in an Array", "tags": "algorithms,amazon,array,two-pointers", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3983, "total_accepted": 243400.0, "total_submissions": 611200.0, "testcase_example": "'[3,1,4,1,5]\\n2'", "body": "Given an array of integers nums and an integer k, return the number of unique k-diff pairs in the array.\nA k-diff pair is an integer pair (nums[i], nums[j]), where the following are true:\n0 <= i, j < nums.length\ni != j\nnums[i] - nums[j] == k\nNotice that |val| denotes the absolute value of val.", "examples": [{"full_text": "Example 1:\nInput: nums = [3,1,4,1,5], k = 2\nOutput: 2\nExplanation: There are two 2-diff pairs in the array, (1, 3) and (3, 5).\nAlthough we have two 1s in the input, we should only return the number of unique pairs.", "input": "Input: nums = [3,1,4,1,5], k = 2", "output": "Output: 2", "explanation": "Explanation: There are two 2-diff pairs in the array, (1, 3) and (3, 5).\nAlthough we have two 1s in the input, we should only return the number of unique pairs."}, {"full_text": "Example 2:\nInput: nums = [1,2,3,4,5], k = 1\nOutput: 4\nExplanation: There are four 1-diff pairs in the array, (1, 2), (2, 3), (3, 4) and (4, 5).", "input": "Input: nums = [1,2,3,4,5], k = 1", "output": "Output: 4", "explanation": "Explanation: There are four 1-diff pairs in the array, (1, 2), (2, 3), (3, 4) and (4, 5)."}, {"full_text": "Example 3:\nInput: nums = [1,3,1,5,4], k = 0\nOutput: 1\nExplanation: There is one 0-diff pair in the array, (1, 1).", "input": "Input: nums = [1,3,1,5,4], k = 0", "output": "Output: 1", "explanation": "Explanation: There is one 0-diff pair in the array, (1, 1)."}], "constraints": "Constraints:\n1 <= nums.length <= 10^4\n-10^7 <= nums[i] <= 10^7\n0 <= k <= 10^7", "notes": ""}, "529": {"label": "Medium", "title": "Minesweeper", "tags": "algorithms,amazon,breadth-first-search,depth-first-search", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6424, "total_accepted": 109300.0, "total_submissions": 170100.0, "testcase_example": "'[[\"E\",\"E\",\"E\",\"E\",\"E\"],[\"E\",\"E\",\"M\",\"E\",\"E\"],[\"E\",\"E\",\"E\",\"E\",\"E\"],[\"E\",\"E\",\"E\",\"E\",\"E\"]]\\n' +\n  '[3,0]'", "body": "Let's play the minesweeper game (Wikipedia, online game)!\nYou are given an m x n char matrix board representing the game board where:\n'M' represents an unrevealed mine,\n'E' represents an unrevealed empty square,\n'B' represents a revealed blank square that has no adjacent mines (i.e., above, below, left, right, and all 4 diagonals),\ndigit ('1' to '8') represents how many mines are adjacent to this revealed square, and\n'X' represents a revealed mine.\nYou are also given an integer array click where click = [clickr, clickc] represents the next click position among all the unrevealed squares ('M' or 'E').\nReturn the board after revealing this position according to the following rules:\nIf a mine 'M' is revealed, then the game is over. You should change it to 'X'.\nIf an empty square 'E' with no adjacent mines is revealed, then change it to a revealed blank 'B' and all of its adjacent unrevealed squares should be revealed recursively.\nIf an empty square 'E' with at least one adjacent mine is revealed, then change it to a digit ('1' to '8') representing the number of adjacent mines.\nReturn the board when no more squares will be revealed.", "examples": [{"full_text": "Example 1:\nInput: board = [[\"E\",\"E\",\"E\",\"E\",\"E\"],[\"E\",\"E\",\"M\",\"E\",\"E\"],[\"E\",\"E\",\"E\",\"E\",\"E\"],[\"E\",\"E\",\"E\",\"E\",\"E\"]], click = [3,0]\nOutput: [[\"B\",\"1\",\"E\",\"1\",\"B\"],[\"B\",\"1\",\"M\",\"1\",\"B\"],[\"B\",\"1\",\"1\",\"1\",\"B\"],[\"B\",\"B\",\"B\",\"B\",\"B\"]]", "input": "Input: board = [[\"E\",\"E\",\"E\",\"E\",\"E\"],[\"E\",\"E\",\"M\",\"E\",\"E\"],[\"E\",\"E\",\"E\",\"E\",\"E\"],[\"E\",\"E\",\"E\",\"E\",\"E\"]], click = [3,0]", "output": "Output: [[\"B\",\"1\",\"E\",\"1\",\"B\"],[\"B\",\"1\",\"M\",\"1\",\"B\"],[\"B\",\"1\",\"1\",\"1\",\"B\"],[\"B\",\"B\",\"B\",\"B\",\"B\"]]", "explanation": ""}, {"full_text": "Example 2:\nInput: board = [[\"B\",\"1\",\"E\",\"1\",\"B\"],[\"B\",\"1\",\"M\",\"1\",\"B\"],[\"B\",\"1\",\"1\",\"1\",\"B\"],[\"B\",\"B\",\"B\",\"B\",\"B\"]], click = [1,2]\nOutput: [[\"B\",\"1\",\"E\",\"1\",\"B\"],[\"B\",\"1\",\"X\",\"1\",\"B\"],[\"B\",\"1\",\"1\",\"1\",\"B\"],[\"B\",\"B\",\"B\",\"B\",\"B\"]]", "input": "Input: board = [[\"B\",\"1\",\"E\",\"1\",\"B\"],[\"B\",\"1\",\"M\",\"1\",\"B\"],[\"B\",\"1\",\"1\",\"1\",\"B\"],[\"B\",\"B\",\"B\",\"B\",\"B\"]], click = [1,2]", "output": "Output: [[\"B\",\"1\",\"E\",\"1\",\"B\"],[\"B\",\"1\",\"X\",\"1\",\"B\"],[\"B\",\"1\",\"1\",\"1\",\"B\"],[\"B\",\"B\",\"B\",\"B\",\"B\"]]", "explanation": ""}], "constraints": "Constraints:\nm == board.length\nn == board[i].length\n1 <= m, n <= 50\nboard[i][j] is either 'M', 'E', 'B', or a digit from '1' to '8'.\nclick.length == 2\n0 <= clickr < m\n0 <= clickc < n\nboard[clickr][clickc] is either 'M' or 'E'.", "notes": ""}, "528": {"label": "Medium", "title": "Random Pick with Weight", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4598, "total_accepted": 261200.0, "total_submissions": 568000.0, "testcase_example": "'[\"Solution\",\"pickIndex\"]\\n[[[1]],[]]'", "body": "You are given a 0-indexed array of positive integers w where w[i] describes the weight of the i^th index.\nYou need to implement the function pickIndex(), which randomly picks an index in the range [0, w.length - 1] (inclusive) and returns it. The probability of picking an index i is w[i] / sum(w).\nFor example, if w = [1, 3], the probability of picking index 0 is 1 / (1 + 3) = 0.25 (i.e., 25%), and the probability of picking index 1 is 3 / (1 + 3) = 0.75 (i.e., 75%).", "examples": [{"full_text": "Example 1:\nInput\n[\"Solution\",\"pickIndex\"]\n[[[1]],[]]\nOutput\n[null,0]\nExplanation\nSolution solution = new Solution([1]);\nsolution.pickIndex(); // return 0. The only option is to return 0 since there is only one element in w.", "input": "Input\n[\"Solution\",\"pickIndex\"]\n[[[1]],[]]", "output": "Output\n[null,0]", "explanation": "Explanation\nSolution solution = new Solution([1]);\nsolution.pickIndex(); // return 0. The only option is to return 0 since there is only one element in w."}, {"full_text": "Example 2:\nInput\n[\"Solution\",\"pickIndex\",\"pickIndex\",\"pickIndex\",\"pickIndex\",\"pickIndex\"]\n[[[1,3]],[],[],[],[],[]]\nOutput\n[null,1,1,1,1,0]\nExplanation\nSolution solution = new Solution([1, 3]);\nsolution.pickIndex(); // return 1. It is returning the second element (index = 1) that has a probability of 3/4.\nsolution.pickIndex(); // return 1\nsolution.pickIndex(); // return 1\nsolution.pickIndex(); // return 1\nsolution.pickIndex(); // return 0. It is returning the first element (index = 0) that has a probability of 1/4.\nSince this is a randomization problem, multiple answers are allowed.\nAll of the following outputs can be considered correct:\n[null,1,1,1,1,0]\n[null,1,1,1,1,1]\n[null,1,1,1,0,0]\n[null,1,1,1,0,1]\n[null,1,0,1,0,0]\n......\nand so on.", "input": "Input\n[\"Solution\",\"pickIndex\",\"pickIndex\",\"pickIndex\",\"pickIndex\",\"pickIndex\"]\n[[[1,3]],[],[],[],[],[]]", "output": "Output\n[null,1,1,1,1,0]", "explanation": "Explanation\nSolution solution = new Solution([1, 3]);\nsolution.pickIndex(); // return 1. It is returning the second element (index = 1) that has a probability of 3/4.\nsolution.pickIndex(); // return 1\nsolution.pickIndex(); // return 1\nsolution.pickIndex(); // return 1\nsolution.pickIndex(); // return 0. It is returning the first element (index = 0) that has a probability of 1/4.\nSince this is a randomization problem, multiple answers are allowed.\nAll of the following outputs can be considered correct:\n[null,1,1,1,1,0]\n[null,1,1,1,1,1]\n[null,1,1,1,0,0]\n[null,1,1,1,0,1]\n[null,1,0,1,0,0]\n......\nand so on."}], "constraints": "Constraints:\n1 <= w.length <= 10^4\n1 <= w[i] <= 10^5\npickIndex will be called at most 10^4 times.", "notes": ""}, "526": {"label": "Medium", "title": "Beautiful Arrangement", "tags": "algorithms,google,backtracking", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6406999999999999, "total_accepted": 122700.0, "total_submissions": 191600.0, "testcase_example": "'2'", "body": "Suppose you have n integers labeled 1 through n. A permutation of those n integers perm (1-indexed) is considered a beautiful arrangement if for every i (1 <= i <= n), either of the following is true:\nperm[i] is divisible by i.\ni is divisible by perm[i].\nGiven an integer n, return the number of the beautiful arrangements that you can construct.", "examples": [{"full_text": "Example 1:\nInput: n = 2\nOutput: 2\nExplanation:\nThe first beautiful arrangement is [1,2]:\n- perm[1] = 1 is divisible by i = 1\n- perm[2] = 2 is divisible by i = 2\nThe second beautiful arrangement is [2,1]:\n- perm[1] = 2 is divisible by i = 1\n- i = 2 is divisible by perm[2] = 1", "input": "Input: n = 2", "output": "Output: 2", "explanation": "Explanation:\nThe first beautiful arrangement is [1,2]:\n- perm[1] = 1 is divisible by i = 1\n- perm[2] = 2 is divisible by i = 2\nThe second beautiful arrangement is [2,1]:\n- perm[1] = 2 is divisible by i = 1\n- i = 2 is divisible by perm[2] = 1"}, {"full_text": "Example 2:\nInput: n = 1\nOutput: 1", "input": "Input: n = 1", "output": "Output: 1", "explanation": ""}], "constraints": "Constraints:\n1 <= n <= 15", "notes": ""}, "525": {"label": "Medium", "title": "Contiguous Array", "tags": "algorithms,facebook,hash-table", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.46130000000000004, "total_accepted": 251600.0, "total_submissions": 545400.0, "testcase_example": "'[0,1]'", "body": "Given a binary array nums, return the maximum length of a contiguous subarray with an equal number of 0 and 1.", "examples": [{"full_text": "Example 1:\nInput: nums = [0,1]\nOutput: 2\nExplanation: [0, 1] is the longest contiguous subarray with an equal number of 0 and 1.", "input": "Input: nums = [0,1]", "output": "Output: 2", "explanation": "Explanation: [0, 1] is the longest contiguous subarray with an equal number of 0 and 1."}, {"full_text": "Example 2:\nInput: nums = [0,1,0]\nOutput: 2\nExplanation: [0, 1] (or [1, 0]) is a longest contiguous subarray with equal number of 0 and 1.", "input": "Input: nums = [0,1,0]", "output": "Output: 2", "explanation": "Explanation: [0, 1] (or [1, 0]) is a longest contiguous subarray with equal number of 0 and 1."}], "constraints": "Constraints:\n1 <= nums.length <= 10^5\nnums[i] is either 0 or 1.", "notes": ""}, "524": {"label": "Medium", "title": "Longest Word in Dictionary through Deleting", "tags": "algorithms,google,sort,two-pointers", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.508, "total_accepted": 122100.0, "total_submissions": 240200.0, "testcase_example": "'\"abpcplea\"\\n[\"ale\",\"apple\",\"monkey\",\"plea\"]'", "body": "Given a string s and a string array dictionary, return the longest string in the dictionary that can be formed by deleting some of the given string characters. If there is more than one possible result, return the longest word with the smallest lexicographical order. If there is no possible result, return the empty string.", "examples": [{"full_text": "Example 1:\nInput: s = \"abpcplea\", dictionary = [\"ale\",\"apple\",\"monkey\",\"plea\"]\nOutput: \"apple\"", "input": "Input: s = \"abpcplea\", dictionary = [\"ale\",\"apple\",\"monkey\",\"plea\"]", "output": "Output: \"apple\"", "explanation": ""}, {"full_text": "Example 2:\nInput: s = \"abpcplea\", dictionary = [\"a\",\"b\",\"c\"]\nOutput: \"a\"", "input": "Input: s = \"abpcplea\", dictionary = [\"a\",\"b\",\"c\"]", "output": "Output: \"a\"", "explanation": ""}], "constraints": "Constraints:\n1 <= s.length <= 1000\n1 <= dictionary.length <= 1000\n1 <= dictionary[i].length <= 1000\ns and dictionary[i] consist of lowercase English letters.", "notes": ""}, "523": {"label": "Medium", "title": "Continuous Subarray Sum", "tags": "algorithms,facebook,dynamic-programming,math", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.2685, "total_accepted": 267300.0, "total_submissions": 995600.0, "testcase_example": "'[23,2,4,6,7]\\n6'", "body": "Given an integer array nums and an integer k, return true if nums has a continuous subarray of size at least two whose elements sum up to a multiple of k, or false otherwise.\nAn integer x is a multiple of k if there exists an integer n such that x = n * k. 0 is always a multiple of k.", "examples": [{"full_text": "Example 1:\nInput: nums = [23,2,4,6,7], k = 6\nOutput: true\nExplanation: [2, 4] is a continuous subarray of size 2 whose elements sum up to 6.", "input": "Input: nums = [23,2,4,6,7], k = 6", "output": "Output: true", "explanation": "Explanation: [2, 4] is a continuous subarray of size 2 whose elements sum up to 6."}, {"full_text": "Example 2:\nInput: nums = [23,2,6,4,7], k = 6\nOutput: true\nExplanation: [23, 2, 6, 4, 7] is an continuous subarray of size 5 whose elements sum up to 42.\n42 is a multiple of 6 because 42 = 7 * 6 and 7 is an integer.", "input": "Input: nums = [23,2,6,4,7], k = 6", "output": "Output: true", "explanation": "Explanation: [23, 2, 6, 4, 7] is an continuous subarray of size 5 whose elements sum up to 42.\n42 is a multiple of 6 because 42 = 7 * 6 and 7 is an integer."}, {"full_text": "Example 3:\nInput: nums = [23,2,6,4,7], k = 13\nOutput: false", "input": "Input: nums = [23,2,6,4,7], k = 13", "output": "Output: false", "explanation": ""}], "constraints": "Constraints:\n1 <= nums.length <= 10^5\n0 <= nums[i] <= 10^9\n0 <= sum(nums[i]) <= 2^31 - 1\n1 <= k <= 2^31 - 1", "notes": ""}, "522": {"label": "Medium", "title": "Longest Uncommon Subsequence II", "tags": "algorithms,google,string", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4006, "total_accepted": 42100.0, "total_submissions": 105100.0, "testcase_example": "'[\"aba\",\"cdc\",\"eae\"]'", "body": "Given an array of strings strs, return the length of the longest uncommon subsequence between them. If the longest uncommon subsequence does not exist, return -1.\nAn uncommon subsequence between an array of strings is a string that is a subsequence of one string but not the others.\nA subsequence of a string s is a string that can be obtained after deleting any number of characters from s.\nFor example, \"abc\" is a subsequence of \"aebdc\" because you can delete the underlined characters in \"aebdc\" to get \"abc\". Other subsequences of \"aebdc\" include \"aebdc\", \"aeb\", and \"\" (empty string).", "examples": [{"full_text": "Example 1:\nInput: strs = [\"aba\",\"cdc\",\"eae\"]\nOutput: 3", "input": "Input: strs = [\"aba\",\"cdc\",\"eae\"]", "output": "Output: 3", "explanation": ""}, {"full_text": "Example 2:\nInput: strs = [\"aaa\",\"aaa\",\"aa\"]\nOutput: -1", "input": "Input: strs = [\"aaa\",\"aaa\",\"aa\"]", "output": "Output: -1", "explanation": ""}], "constraints": "Constraints:\n2 <= strs.length <= 50\n1 <= strs[i].length <= 10\nstrs[i] consists of lowercase English letters.", "notes": ""}, "519": {"label": "Medium", "title": "Random Flip Matrix", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3893, "total_accepted": 12800.0, "total_submissions": 32900.0, "testcase_example": "'[\"Solution\",\"flip\",\"flip\",\"flip\",\"reset\",\"flip\"]\\n[[3,1],[],[],[],[],[]]'", "body": "There is an m x n binary grid matrix with all the values set 0 initially. Design an algorithm to randomly pick an index (i, j) where matrix[i][j] == 0 and flips it to 1. All the indices (i, j) where matrix[i][j] == 0 should be equally likely to be returned.\nOptimize your algorithm to minimize the number of calls made to the built-in random function of your language and optimize the time and space complexity.\nImplement the Solution class:\nSolution(int m, int n) Initializes the object with the size of the binary matrix m and n.\nint[] flip() Returns a random index [i, j] of the matrix where matrix[i][j] == 0 and flips it to 1.\nvoid reset() Resets all the values of the matrix to be 0.", "examples": [{"full_text": "Example 1:\nInput\n[\"Solution\", \"flip\", \"flip\", \"flip\", \"reset\", \"flip\"]\n[[3, 1], [], [], [], [], []]\nOutput\n[null, [1, 0], [2, 0], [0, 0], null, [2, 0]]\nExplanation\nSolution solution = new Solution(3, 1);\nsolution.flip(); // return [1, 0], [0,0], [1,0], and [2,0] should be equally likely to be returned.\nsolution.flip(); // return [2, 0], Since [1,0] was returned, [2,0] and [0,0]\nsolution.flip(); // return [0, 0], Based on the previously returned indices, only [0,0] can be returned.\nsolution.reset(); // All the values are reset to 0 and can be returned.\nsolution.flip(); // return [2, 0], [0,0], [1,0], and [2,0] should be equally likely to be returned.", "input": "Input\n[\"Solution\", \"flip\", \"flip\", \"flip\", \"reset\", \"flip\"]\n[[3, 1], [], [], [], [], []]", "output": "Output\n[null, [1, 0], [2, 0], [0, 0], null, [2, 0]]", "explanation": "Explanation\nSolution solution = new Solution(3, 1);\nsolution.flip(); // return [1, 0], [0,0], [1,0], and [2,0] should be equally likely to be returned.\nsolution.flip(); // return [2, 0], Since [1,0] was returned, [2,0] and [0,0]\nsolution.flip(); // return [0, 0], Based on the previously returned indices, only [0,0] can be returned.\nsolution.reset(); // All the values are reset to 0 and can be returned.\nsolution.flip(); // return [2, 0], [0,0], [1,0], and [2,0] should be equally likely to be returned."}], "constraints": "Constraints:\n1 <= m, n <= 10^4\nThere will be at least one free cell for each call to flip.\nAt most 1000 calls will be made to flip and reset.", "notes": ""}, "518": {"label": "Medium", "title": "Coin Change 2", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5661, "total_accepted": 268000.0, "total_submissions": 473300.0, "testcase_example": "'5\\n[1,2,5]'", "body": "You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money.\nReturn the number of combinations that make up that amount. If that amount of money cannot be made up by any combination of the coins, return 0.\nYou may assume that you have an infinite number of each kind of coin.\nThe answer is guaranteed to fit into a signed 32-bit integer.", "examples": [{"full_text": "Example 1:\nInput: amount = 5, coins = [1,2,5]\nOutput: 4\nExplanation: there are four ways to make up the amount:\n5=5\n5=2+2+1\n5=2+1+1+1\n5=1+1+1+1+1", "input": "Input: amount = 5, coins = [1,2,5]", "output": "Output: 4", "explanation": "Explanation: there are four ways to make up the amount:\n5=5\n5=2+2+1\n5=2+1+1+1\n5=1+1+1+1+1"}, {"full_text": "Example 2:\nInput: amount = 3, coins = [2]\nOutput: 0\nExplanation: the amount of 3 cannot be made up just with coins of 2.", "input": "Input: amount = 3, coins = [2]", "output": "Output: 0", "explanation": "Explanation: the amount of 3 cannot be made up just with coins of 2."}, {"full_text": "Example 3:\nInput: amount = 10, coins = [10]\nOutput: 1", "input": "Input: amount = 10, coins = [10]", "output": "Output: 1", "explanation": ""}], "constraints": "Constraints:\n1 <= coins.length <= 300\n1 <= coins[i] <= 5000\nAll the values of coins are unique.\n0 <= amount <= 5000", "notes": ""}, "516": {"label": "Medium", "title": "Longest Palindromic Subsequence", "tags": "algorithms,amazon,uber,dynamic-programming", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5879, "total_accepted": 233600.0, "total_submissions": 397300.0, "testcase_example": "'\"bbbab\"'", "body": "Given a string s, find the longest palindromic subsequence's length in s.\nA subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.", "examples": [{"full_text": "Example 1:\nInput: s = \"bbbab\"\nOutput: 4\nExplanation: One possible longest palindromic subsequence is \"bbbb\".", "input": "Input: s = \"bbbab\"", "output": "Output: 4", "explanation": "Explanation: One possible longest palindromic subsequence is \"bbbb\"."}, {"full_text": "Example 2:\nInput: s = \"cbbd\"\nOutput: 2\nExplanation: One possible longest palindromic subsequence is \"bb\".", "input": "Input: s = \"cbbd\"", "output": "Output: 2", "explanation": "Explanation: One possible longest palindromic subsequence is \"bb\"."}], "constraints": "Constraints:\n1 <= s.length <= 1000\ns consists only of lowercase English letters.", "notes": ""}, "515": {"label": "Medium", "title": "Find Largest Value in Each Tree Row", "tags": "algorithms,linkedin,breadth-first-search,depth-first-search,tree", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.642, "total_accepted": 178200.0, "total_submissions": 277600.0, "testcase_example": "'[1,3,2,5,3,null,9]'", "body": "Given the root of a binary tree, return an array of the largest value in each row of the tree (0-indexed).", "examples": [{"full_text": "Example 1:\nInput: root = [1,3,2,5,3,null,9]\nOutput: [1,3,9]", "input": "Input: root = [1,3,2,5,3,null,9]", "output": "Output: [1,3,9]", "explanation": ""}, {"full_text": "Example 2:\nInput: root = [1,2,3]\nOutput: [1,3]", "input": "Input: root = [1,2,3]", "output": "Output: [1,3]", "explanation": ""}], "constraints": "Constraints:\nThe number of nodes in the tree will be in the range [0, 10^4].\n-2^31 <= Node.val <= 2^31 - 1", "notes": ""}, "513": {"label": "Medium", "title": "Find Bottom Left Tree Value", "tags": "algorithms,microsoft,breadth-first-search,depth-first-search,tree", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.648, "total_accepted": 162800.0, "total_submissions": 251200.0, "testcase_example": "'[2,1,3]'", "body": "Given the root of a binary tree, return the leftmost value in the last row of the tree.", "examples": [{"full_text": "Example 1:\nInput: root = [2,1,3]\nOutput: 1", "input": "Input: root = [2,1,3]", "output": "Output: 1", "explanation": ""}, {"full_text": "Example 2:\nInput: root = [1,2,3,4,null,5,6,null,null,7]\nOutput: 7", "input": "Input: root = [1,2,3,4,null,5,6,null,null,7]", "output": "Output: 7", "explanation": ""}], "constraints": "Constraints:\nThe number of nodes in the tree is in the range [1, 10^4].\n-2^31 <= Node.val <= 2^31 - 1", "notes": ""}, "508": {"label": "Medium", "title": "Most Frequent Subtree Sum", "tags": "algorithms,amazon,hash-table,tree", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6222, "total_accepted": 102900.0, "total_submissions": 165400.0, "testcase_example": "'[5,2,-3]'", "body": "Given the root of a binary tree, return the most frequent subtree sum. If there is a tie, return all the values with the highest frequency in any order.\nThe subtree sum of a node is defined as the sum of all the node values formed by the subtree rooted at that node (including the node itself).", "examples": [{"full_text": "Example 1:\nInput: root = [5,2,-3]\nOutput: [2,-3,4]", "input": "Input: root = [5,2,-3]", "output": "Output: [2,-3,4]", "explanation": ""}, {"full_text": "Example 2:\nInput: root = [5,2,-5]\nOutput: [2]", "input": "Input: root = [5,2,-5]", "output": "Output: [2]", "explanation": ""}], "constraints": "Constraints:\nThe number of nodes in the tree is in the range [1, 10^4].\n-10^5 <= Node.val <= 10^5", "notes": ""}, "503": {"label": "Medium", "title": "Next Greater Element II", "tags": "algorithms,google,stack", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6153, "total_accepted": 197700.0, "total_submissions": 321200.0, "testcase_example": "'[1,2,1]'", "body": "Given a circular integer array nums (i.e., the next element of nums[nums.length - 1] is nums[0]), return the next greater number for every element in nums.\nThe next greater number of a number x is the first greater number to its traversing-order next in the array, which means you could search circularly to find its next greater number. If it doesn't exist, return -1 for this number.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,2,1]\nOutput: [2,-1,2]\nExplanation: The first 1's next greater number is 2;\nThe number 2 can't find next greater number.\nThe second 1's next greater number needs to search circularly, which is also 2.", "input": "Input: nums = [1,2,1]", "output": "Output: [2,-1,2]", "explanation": "Explanation: The first 1's next greater number is 2;\nThe number 2 can't find next greater number.\nThe second 1's next greater number needs to search circularly, which is also 2."}, {"full_text": "Example 2:\nInput: nums = [1,2,3,4,3]\nOutput: [2,3,4,-1,4]", "input": "Input: nums = [1,2,3,4,3]", "output": "Output: [2,3,4,-1,4]", "explanation": ""}], "constraints": "Constraints:\n1 <= nums.length <= 10^4\n-10^9 <= nums[i] <= 10^9", "notes": ""}, "498": {"label": "Medium", "title": "Diagonal Traverse", "tags": "algorithms,google", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5556, "total_accepted": 180000.0, "total_submissions": 324000.0, "testcase_example": "'[[1,2,3],[4,5,6],[7,8,9]]'", "body": "Given an m x n matrix mat, return an array of all the elements of the array in a diagonal order.", "examples": [{"full_text": "Example 1:\nInput: mat = [[1,2,3],[4,5,6],[7,8,9]]\nOutput: [1,2,4,7,5,3,6,8,9]", "input": "Input: mat = [[1,2,3],[4,5,6],[7,8,9]]", "output": "Output: [1,2,4,7,5,3,6,8,9]", "explanation": ""}, {"full_text": "Example 2:\nInput: mat = [[1,2],[3,4]]\nOutput: [1,2,3,4]", "input": "Input: mat = [[1,2],[3,4]]", "output": "Output: [1,2,3,4]", "explanation": ""}], "constraints": "Constraints:\nm == mat.length\nn == mat[i].length\n1 <= m, n <= 10^4\n1 <= m * n <= 10^4\n-10^5 <= mat[i][j] <= 10^5", "notes": ""}, "497": {"label": "Medium", "title": "Random Point in Non-overlapping Rectangles", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3912, "total_accepted": 33400.0, "total_submissions": 85500.0, "testcase_example": "'[\"Solution\",\"pick\",\"pick\",\"pick\",\"pick\",\"pick\"]\\n' +\n  '[[[[-2,-2,1,1],[2,2,4,6]]],[],[],[],[],[]]'", "body": "You are given an array of non-overlapping axis-aligned rectangles rects where rects[i] = [ai, bi, xi, yi] indicates that (ai, bi) is the bottom-left corner point of the i^th rectangle and (xi, yi) is the top-right corner point of the i^th rectangle. Design an algorithm to pick a random integer point inside the space covered by one of the given rectangles. A point on the perimeter of a rectangle is included in the space covered by the rectangle.\nAny integer point inside the space covered by one of the given rectangles should be equally likely to be returned.\nNote that an integer point is a point that has integer coordinates.\nImplement the Solution class:\nSolution(int[][] rects) Initializes the object with the given rectangles rects.\nint[] pick() Returns a random integer point [u, v] inside the space covered by one of the given rectangles.", "examples": [{"full_text": "Example 1:\nInput\n[\"Solution\", \"pick\", \"pick\", \"pick\", \"pick\", \"pick\"]\n[[[[-2, -2, 1, 1], [2, 2, 4, 6]]], [], [], [], [], []]\nOutput\n[null, [1, -2], [1, -1], [-1, -2], [-2, -2], [0, 0]]\nExplanation\nSolution solution = new Solution([[-2, -2, 1, 1], [2, 2, 4, 6]]);\nsolution.pick(); // return [1, -2]\nsolution.pick(); // return [1, -1]\nsolution.pick(); // return [-1, -2]\nsolution.pick(); // return [-2, -2]\nsolution.pick(); // return [0, 0]", "input": "Input\n[\"Solution\", \"pick\", \"pick\", \"pick\", \"pick\", \"pick\"]\n[[[[-2, -2, 1, 1], [2, 2, 4, 6]]], [], [], [], [], []]", "output": "Output\n[null, [1, -2], [1, -1], [-1, -2], [-2, -2], [0, 0]]", "explanation": "Explanation\nSolution solution = new Solution([[-2, -2, 1, 1], [2, 2, 4, 6]]);\nsolution.pick(); // return [1, -2]\nsolution.pick(); // return [1, -1]\nsolution.pick(); // return [-1, -2]\nsolution.pick(); // return [-2, -2]\nsolution.pick(); // return [0, 0]"}], "constraints": "Constraints:\n1 <= rects.length <= 100\nrects[i].length == 4\n-10^9 <= ai < xi <= 10^9\n-10^9 <= bi < yi <= 10^9\nxi - ai <= 2000\nyi - bi <= 2000\nAll the rectangles do not overlap.\nAt most 10^4 calls will be made to pick.", "notes": ""}, "494": {"label": "Medium", "title": "Target Sum", "tags": "algorithms,facebook,google,depth-first-search,dynamic-programming", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4533, "total_accepted": 320900.0, "total_submissions": 707800.0, "testcase_example": "'[1,1,1,1,1]\\n3'", "body": "You are given an integer array nums and an integer target.\nYou want to build an expression out of nums by adding one of the symbols '+' and '-' before each integer in nums and then concatenate all the integers.\nFor example, if nums = [2, 1], you can add a '+' before 2 and a '-' before 1 and concatenate them to build the expression \"+2-1\".\nReturn the number of different expressions that you can build, which evaluates to target.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,1,1,1,1], target = 3\nOutput: 5\nExplanation: There are 5 ways to assign symbols to make the sum of nums be target 3.\n-1 + 1 + 1 + 1 + 1 = 3\n+1 - 1 + 1 + 1 + 1 = 3\n+1 + 1 - 1 + 1 + 1 = 3\n+1 + 1 + 1 - 1 + 1 = 3\n+1 + 1 + 1 + 1 - 1 = 3", "input": "Input: nums = [1,1,1,1,1], target = 3", "output": "Output: 5", "explanation": "Explanation: There are 5 ways to assign symbols to make the sum of nums be target 3.\n-1 + 1 + 1 + 1 + 1 = 3\n+1 - 1 + 1 + 1 + 1 = 3\n+1 + 1 - 1 + 1 + 1 = 3\n+1 + 1 + 1 - 1 + 1 = 3\n+1 + 1 + 1 + 1 - 1 = 3"}, {"full_text": "Example 2:\nInput: nums = [1], target = 1\nOutput: 1", "input": "Input: nums = [1], target = 1", "output": "Output: 1", "explanation": ""}], "constraints": "Constraints:\n1 <= nums.length <= 20\n0 <= nums[i] <= 1000\n0 <= sum(nums[i]) <= 1000\n-1000 <= target <= 1000", "notes": ""}, "491": {"label": "Medium", "title": "Increasing Subsequences", "tags": "algorithms,yahoo,depth-first-search", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5036999999999999, "total_accepted": 70900.0, "total_submissions": 140700.0, "testcase_example": "'[4,6,7,7]'", "body": "Given an integer array nums, return all the different possible increasing subsequences of the given array with at least two elements. You may return the answer in any order.\nThe given array may contain duplicates, and two equal integers should also be considered a special case of increasing sequence.", "examples": [{"full_text": "Example 1:\nInput: nums = [4,6,7,7]\nOutput: [[4,6],[4,6,7],[4,6,7,7],[4,7],[4,7,7],[6,7],[6,7,7],[7,7]]", "input": "Input: nums = [4,6,7,7]", "output": "Output: [[4,6],[4,6,7],[4,6,7,7],[4,7],[4,7,7],[6,7],[6,7,7],[7,7]]", "explanation": ""}, {"full_text": "Example 2:\nInput: nums = [4,4,3,2,1]\nOutput: [[4,4]]", "input": "Input: nums = [4,4,3,2,1]", "output": "Output: [[4,4]]", "explanation": ""}], "constraints": "Constraints:\n1 <= nums.length <= 15\n-100 <= nums[i] <= 100", "notes": ""}, "486": {"label": "Medium", "title": "Predict the Winner", "tags": "algorithms,google,dynamic-programming", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5, "total_accepted": 106000.0, "total_submissions": 212100.0, "testcase_example": "'[1,5,2]'", "body": "You are given an integer array nums. Two players are playing a game with this array: player 1 and player 2.\nPlayer 1 and player 2 take turns, with player 1 starting first. Both players start the game with a score of 0. At each turn, the player takes one of the numbers from either end of the array (i.e., nums[0] or nums[nums.length - 1]) which reduces the size of the array by 1. The player adds the chosen number to their score. The game ends when there are no more elements in the array.\nReturn true if Player 1 can win the game. If the scores of both players are equal, then player 1 is still the winner, and you should also return true. You may assume that both players are playing optimally.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,5,2]\nOutput: false\nExplanation: Initially, player 1 can choose between 1 and 2.\nIf he chooses 2 (or 1), then player 2 can choose from 1 (or 2) and 5. If player 2 chooses 5, then player 1 will be left with 1 (or 2).\nSo, final score of player 1 is 1 + 2 = 3, and player 2 is 5.\nHence, player 1 will never be the winner and you need to return false.", "input": "Input: nums = [1,5,2]", "output": "Output: false", "explanation": "Explanation: Initially, player 1 can choose between 1 and 2.\nIf he chooses 2 (or 1), then player 2 can choose from 1 (or 2) and 5. If player 2 chooses 5, then player 1 will be left with 1 (or 2).\nSo, final score of player 1 is 1 + 2 = 3, and player 2 is 5.\nHence, player 1 will never be the winner and you need to return false."}, {"full_text": "Example 2:\nInput: nums = [1,5,233,7]\nOutput: true\nExplanation: Player 1 first chooses 1. Then player 2 has to choose between 5 and 7. No matter which number player 2 choose, player 1 can choose 233.\nFinally, player 1 has more score (234) than player 2 (12), so you need to return True representing player1 can win.", "input": "Input: nums = [1,5,233,7]", "output": "Output: true", "explanation": "Explanation: Player 1 first chooses 1. Then player 2 has to choose between 5 and 7. No matter which number player 2 choose, player 1 can choose 233.\nFinally, player 1 has more score (234) than player 2 (12), so you need to return True representing player1 can win."}], "constraints": "Constraints:\n1 <= nums.length <= 20\n0 <= nums[i] <= 10^7", "notes": ""}, "481": {"label": "Medium", "title": "Magical String", "tags": "algorithms,google", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.49420000000000003, "total_accepted": 27000.0, "total_submissions": 54700.0, "testcase_example": "'6'", "body": "A magical string s consists of only '1' and '2' and obeys the following rules:\nThe string s is magical because concatenating the number of contiguous occurrences of characters '1' and '2' generates the string s itself.\nThe first few elements of s is s = \"1221121221221121122\u2026\u2026\". If we group the consecutive 1's and 2's in s, it will be \"1 22 11 2 1 22 1 22 11 2 11 22 ......\" and the occurrences of 1's or 2's in each group are \"1 2 2 1 1 2 1 2 2 1 2 2 ......\". You can see that the occurrence sequence is s itself.\nGiven an integer n, return the number of 1's in the first n number in the magical string s.", "examples": [{"full_text": "Example 1:\nInput: n = 6\nOutput: 3\nExplanation: The first 6 elements of magical string s is \"122112\" and it contains three 1's, so return 3.", "input": "Input: n = 6", "output": "Output: 3", "explanation": "Explanation: The first 6 elements of magical string s is \"122112\" and it contains three 1's, so return 3."}, {"full_text": "Example 2:\nInput: n = 1\nOutput: 1", "input": "Input: n = 1", "output": "Output: 1", "explanation": ""}], "constraints": "Constraints:\n1 <= n <= 10^5", "notes": ""}, "478": {"label": "Medium", "title": "Generate Random Point in a Circle", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3931, "total_accepted": 32600.0, "total_submissions": 83000.0, "testcase_example": "'[\"Solution\",\"randPoint\",\"randPoint\",\"randPoint\"]\\n[[1.0,0.0,0.0],[],[],[]]'", "body": "Given the radius and the position of the center of a circle, implement the function randPoint which generates a uniform random point inside the circle.\nImplement the Solution class:\nSolution(double radius, double x_center, double y_center) initializes the object with the radius of the circle radius and the position of the center (x_center, y_center).\nrandPoint() returns a random point inside the circle. A point on the circumference of the circle is considered to be in the circle. The answer is returned as an array [x, y].", "examples": [{"full_text": "Example 1:\nInput\n[\"Solution\", \"randPoint\", \"randPoint\", \"randPoint\"]\n[[1.0, 0.0, 0.0], [], [], []]\nOutput\n[null, [-0.02493, -0.38077], [0.82314, 0.38945], [0.36572, 0.17248]]\nExplanation\nSolution solution = new Solution(1.0, 0.0, 0.0);\nsolution.randPoint(); // return [-0.02493, -0.38077]\nsolution.randPoint(); // return [0.82314, 0.38945]\nsolution.randPoint(); // return [0.36572, 0.17248]", "input": "Input\n[\"Solution\", \"randPoint\", \"randPoint\", \"randPoint\"]\n[[1.0, 0.0, 0.0], [], [], []]", "output": "Output\n[null, [-0.02493, -0.38077], [0.82314, 0.38945], [0.36572, 0.17248]]", "explanation": "Explanation\nSolution solution = new Solution(1.0, 0.0, 0.0);\nsolution.randPoint(); // return [-0.02493, -0.38077]\nsolution.randPoint(); // return [0.82314, 0.38945]\nsolution.randPoint(); // return [0.36572, 0.17248]"}], "constraints": "Constraints:\n0 <\nradius <= 10^8\n-10^7 <= x_center, y_center <= 10^7\nAt most 3 * 10^4 calls will be made to randPoint.", "notes": ""}, "477": {"label": "Medium", "title": "Total Hamming Distance", "tags": "algorithms,facebook,bit-manipulation", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5185, "total_accepted": 85100.0, "total_submissions": 164200.0, "testcase_example": "'[4,14,2]'", "body": "The Hamming distance between two integers is the number of positions at which the corresponding bits are different.\nGiven an integer array nums, return the sum of Hamming distances between all the pairs of the integers in nums.", "examples": [{"full_text": "Example 1:\nInput: nums = [4,14,2]\nOutput: 6\nExplanation: In binary representation, the 4 is 0100, 14 is 1110, and 2 is 0010 (just\nshowing the four bits relevant in this case).\nThe answer will be:\nHammingDistance(4, 14) + HammingDistance(4, 2) + HammingDistance(14, 2) = 2 + 2 + 2 = 6.", "input": "Input: nums = [4,14,2]", "output": "Output: 6", "explanation": "Explanation: In binary representation, the 4 is 0100, 14 is 1110, and 2 is 0010 (just\nshowing the four bits relevant in this case).\nThe answer will be:\nHammingDistance(4, 14) + HammingDistance(4, 2) + HammingDistance(14, 2) = 2 + 2 + 2 = 6."}, {"full_text": "Example 2:\nInput: nums = [4,14,4]\nOutput: 4", "input": "Input: nums = [4,14,4]", "output": "Output: 4", "explanation": ""}], "constraints": "Constraints:\n1 <= nums.length <= 10^4\n0 <= nums[i] <= 10^9\nThe answer for the given input will fit in a 32-bit integer.", "notes": ""}, "475": {"label": "Medium", "title": "Heaters", "tags": "algorithms,google,binary-search", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.34979999999999994, "total_accepted": 84700.0, "total_submissions": 242200.0, "testcase_example": "'[1,2,3]\\n[2]'", "body": "Winter is coming! During the contest, your first job is to design a standard heater with a fixed warm radius to warm all the houses.\nEvery house can be warmed, as long as the house is within the heater's warm radius range.\nGiven the positions of houses and heaters on a horizontal line, return the minimum radius standard of heaters\nso that those heaters could cover all houses.\nNotice that\nall the heaters follow your radius standard, and the warm radius will the same.", "examples": [{"full_text": "Example 1:\nInput: houses = [1,2,3], heaters = [2]\nOutput: 1\nExplanation: The only heater was placed in the position 2, and if we use the radius 1 standard, then all the houses can be warmed.", "input": "Input: houses = [1,2,3], heaters = [2]", "output": "Output: 1", "explanation": "Explanation: The only heater was placed in the position 2, and if we use the radius 1 standard, then all the houses can be warmed."}, {"full_text": "Example 2:\nInput: houses = [1,2,3,4], heaters = [1,4]\nOutput: 1\nExplanation: The two heater was placed in the position 1 and 4. We need to use radius 1 standard, then all the houses can be warmed.", "input": "Input: houses = [1,2,3,4], heaters = [1,4]", "output": "Output: 1", "explanation": "Explanation: The two heater was placed in the position 1 and 4. We need to use radius 1 standard, then all the houses can be warmed."}, {"full_text": "Example 3:\nInput: houses = [1,5], heaters = [2]\nOutput: 3", "input": "Input: houses = [1,5], heaters = [2]", "output": "Output: 3", "explanation": ""}], "constraints": "Constraints:\n1 <= houses.length, heaters.length <= 3 * 10^4\n1 <= houses[i], heaters[i] <= 10^9", "notes": ""}, "474": {"label": "Medium", "title": "Ones and Zeroes", "tags": "algorithms,google,dynamic-programming", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4434, "total_accepted": 101800.0, "total_submissions": 229600.0, "testcase_example": "'[\"10\",\"0001\",\"111001\",\"1\",\"0\"]\\n5\\n3'", "body": "You are given an array of binary strings strs and two integers m and n.\nReturn the size of the largest subset of strs such that there are at most m 0's and n 1's in the subset.\nA set x is a subset of a set y if all elements of x are also elements of y.", "examples": [{"full_text": "Example 1:\nInput: strs = [\"10\",\"0001\",\"111001\",\"1\",\"0\"], m = 5, n = 3\nOutput: 4\nExplanation: The largest subset with at most 5 0's and 3 1's is {\"10\", \"0001\", \"1\", \"0\"}, so the answer is 4.\nOther valid but smaller subsets include {\"0001\", \"1\"} and {\"10\", \"1\", \"0\"}.\n{\"111001\"} is an invalid subset because it contains 4 1's, greater than the maximum of 3.", "input": "Input: strs = [\"10\",\"0001\",\"111001\",\"1\",\"0\"], m = 5, n = 3", "output": "Output: 4", "explanation": "Explanation: The largest subset with at most 5 0's and 3 1's is {\"10\", \"0001\", \"1\", \"0\"}, so the answer is 4.\nOther valid but smaller subsets include {\"0001\", \"1\"} and {\"10\", \"1\", \"0\"}.\n{\"111001\"} is an invalid subset because it contains 4 1's, greater than the maximum of 3."}, {"full_text": "Example 2:\nInput: strs = [\"10\",\"0\",\"1\"], m = 1, n = 1\nOutput: 2\nExplanation: The largest subset is {\"0\", \"1\"}, so the answer is 2.", "input": "Input: strs = [\"10\",\"0\",\"1\"], m = 1, n = 1", "output": "Output: 2", "explanation": "Explanation: The largest subset is {\"0\", \"1\"}, so the answer is 2."}], "constraints": "Constraints:\n1 <= strs.length <= 600\n1 <= strs[i].length <= 100\nstrs[i] consists only of digits '0' and '1'.\n1 <= m, n <= 100", "notes": ""}, "473": {"label": "Medium", "title": "Matchsticks to Square", "tags": "algorithms,depth-first-search", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.40409999999999996, "total_accepted": 73800.0, "total_submissions": 182700.0, "testcase_example": "'[1,1,2,2,2]'", "body": "You are given an integer array matchsticks where matchsticks[i] is the length of the i^th matchstick. You want to use all the matchsticks to make one square. You should not break any stick, but you can link them up, and each matchstick must be used exactly one time.\nReturn true if you can make this square and false otherwise.", "examples": [{"full_text": "Example 1:\nInput: matchsticks = [1,1,2,2,2]\nOutput: true\nExplanation: You can form a square with length 2, one side of the square came two sticks with length 1.", "input": "Input: matchsticks = [1,1,2,2,2]", "output": "Output: true", "explanation": "Explanation: You can form a square with length 2, one side of the square came two sticks with length 1."}, {"full_text": "Example 2:\nInput: matchsticks = [3,3,3,3,4]\nOutput: false\nExplanation: You cannot find a way to form a square with all the matchsticks.", "input": "Input: matchsticks = [3,3,3,3,4]", "output": "Output: false", "explanation": "Explanation: You cannot find a way to form a square with all the matchsticks."}], "constraints": "Constraints:\n1 <= matchsticks.length <= 15\n1 <= matchsticks[i] <= 10^8", "notes": ""}, "470": {"label": "Medium", "title": "Implement Rand10() Using Rand7()", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4664, "total_accepted": 59700.0, "total_submissions": 128100.0, "testcase_example": "'1'", "body": "Given the API rand7() that generates a uniform random integer in the range [1, 7], write a function rand10() that generates a uniform random integer in the range [1, 10]. You can only call the API rand7(), and you shouldn't call any other API. Please do not use a language's built-in random API.\nEach test case will have one internal argument n, the number of times that your implemented function rand10() will be called while testing. Note that this is not an argument passed to rand10().", "examples": [{"full_text": "Example 1:\nInput: n = 1\nOutput: [2]", "input": "Input: n = 1", "output": "Output: [2]", "explanation": ""}, {"full_text": "Example 2:\nInput: n = 2\nOutput: [2,8]", "input": "Input: n = 2", "output": "Output: [2,8]", "explanation": ""}, {"full_text": "Example 3:\nInput: n = 3\nOutput: [3,8,10]", "input": "Input: n = 3", "output": "Output: [3,8,10]", "explanation": ""}], "constraints": "Constraints:\n1 <= n <= 10^5\nFollow up:\nWhat is the expected value for the number of calls to rand7() function?\nCould you minimize the number of calls to rand7()?", "notes": ""}, "468": {"label": "Medium", "title": "Validate IP Address", "tags": "algorithms,twitter,string", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.2607, "total_accepted": 120900.0, "total_submissions": 463500.0, "testcase_example": "'\"172.16.254.1\"'", "body": "Given a string queryIP, return \"IPv4\" if IP is a valid IPv4 address, \"IPv6\" if IP is a valid IPv6 address or \"Neither\" if IP is not a correct IP of any type.\nA valid IPv4 address is an IP in the form \"x1.x2.x3.x4\" where 0 <= xi <= 255 and xi cannot contain leading zeros. For example, \"192.168.1.1\" and \"192.168.1.0\" are valid IPv4 addresses but \"192.168.01.1\", while \"192.168.1.00\" and \"192.168@1.1\" are invalid IPv4 addresses.\nA valid IPv6 address is an IP in the form \"x1:x2:x3:x4:x5:x6:x7:x8\" where:\n1 <= xi.length <= 4\nxi is a hexadecimal string which may contain digits, lower-case English letter ('a' to 'f') and upper-case English letters ('A' to 'F').\nLeading zeros are allowed in xi.\nFor example, \"2001:0db8:85a3:0000:0000:8a2e:0370:7334\" and \"2001:db8:85a3:0:0:8A2E:0370:7334\" are valid IPv6 addresses, while \"2001:0db8:85a3::8A2E:037j:7334\" and \"02001:0db8:85a3:0000:0000:8a2e:0370:7334\" are invalid IPv6 addresses.", "examples": [{"full_text": "Example 1:\nInput: queryIP = \"172.16.254.1\"\nOutput: \"IPv4\"\nExplanation: This is a valid IPv4 address, return \"IPv4\".", "input": "Input: queryIP = \"172.16.254.1\"", "output": "Output: \"IPv4\"", "explanation": "Explanation: This is a valid IPv4 address, return \"IPv4\"."}, {"full_text": "Example 2:\nInput: queryIP = \"2001:0db8:85a3:0:0:8A2E:0370:7334\"\nOutput: \"IPv6\"\nExplanation: This is a valid IPv6 address, return \"IPv6\".", "input": "Input: queryIP = \"2001:0db8:85a3:0:0:8A2E:0370:7334\"", "output": "Output: \"IPv6\"", "explanation": "Explanation: This is a valid IPv6 address, return \"IPv6\"."}, {"full_text": "Example 3:\nInput: queryIP = \"256.256.256.256\"\nOutput: \"Neither\"\nExplanation: This is neither a IPv4 address nor a IPv6 address.", "input": "Input: queryIP = \"256.256.256.256\"", "output": "Output: \"Neither\"", "explanation": "Explanation: This is neither a IPv4 address nor a IPv6 address."}], "constraints": "Constraints:\nqueryIP consists only of English letters, digits and the characters '.' and ':'.", "notes": ""}, "467": {"label": "Medium", "title": "Unique Substrings in Wraparound String", "tags": "algorithms,dynamic-programming", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3726, "total_accepted": 33900.0, "total_submissions": 91000.0, "testcase_example": "'\"a\"'", "body": "We define the string s to be the infinite wraparound string of \"abcdefghijklmnopqrstuvwxyz\", so s will look like this:\n\"...zabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcd....\".\nGiven a string p, return the number of unique non-empty substrings of p are present in s.", "examples": [{"full_text": "Example 1:\nInput: p = \"a\"\nOutput: 1\nExplanation: Only the substring \"a\" of p is in s.", "input": "Input: p = \"a\"", "output": "Output: 1", "explanation": "Explanation: Only the substring \"a\" of p is in s."}, {"full_text": "Example 2:\nInput: p = \"cac\"\nOutput: 2\nExplanation: There are two substrings (\"a\", \"c\") of p in s.", "input": "Input: p = \"cac\"", "output": "Output: 2", "explanation": "Explanation: There are two substrings (\"a\", \"c\") of p in s."}, {"full_text": "Example 3:\nInput: p = \"zab\"\nOutput: 6\nExplanation: There are six substrings (\"z\", \"a\", \"b\", \"za\", \"ab\", and \"zab\") of p in s.", "input": "Input: p = \"zab\"", "output": "Output: 6", "explanation": "Explanation: There are six substrings (\"z\", \"a\", \"b\", \"za\", \"ab\", and \"zab\") of p in s."}], "constraints": "Constraints:\n1 <= p.length <= 10^5\np consists of lowercase English letters.", "notes": ""}, "464": {"label": "Medium", "title": "Can I Win", "tags": "algorithms,linkedin,dynamic-programming", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.2982, "total_accepted": 72600.0, "total_submissions": 243400.0, "testcase_example": "'10\\n11'", "body": "In the \"100 game\" two players take turns adding, to a running total, any integer from 1 to 10. The player who first causes the running total to reach or exceed 100 wins.\nWhat if we change the game so that players cannot re-use integers?\nFor example, two players might take turns drawing from a common pool of numbers from 1 to 15 without replacement until they reach a total >= 100.\nGiven two integers maxChoosableInteger and desiredTotal, return true if the first player to move can force a win, otherwise, return false. Assume both players play optimally.", "examples": [{"full_text": "Example 1:\nInput: maxChoosableInteger = 10, desiredTotal = 11\nOutput: false\nExplanation:\nNo matter which integer the first player choose, the first player will lose.\nThe first player can choose an integer from 1 up to 10.\nIf the first player choose 1, the second player can only choose integers from 2 up to 10.\nThe second player will win by choosing 10 and get a total = 11, which is >= desiredTotal.\nSame with other integers chosen by the first player, the second player will always win.", "input": "Input: maxChoosableInteger = 10, desiredTotal = 11", "output": "Output: false", "explanation": "Explanation:\nNo matter which integer the first player choose, the first player will lose.\nThe first player can choose an integer from 1 up to 10.\nIf the first player choose 1, the second player can only choose integers from 2 up to 10.\nThe second player will win by choosing 10 and get a total = 11, which is >= desiredTotal.\nSame with other integers chosen by the first player, the second player will always win."}, {"full_text": "Example 2:\nInput: maxChoosableInteger = 10, desiredTotal = 0\nOutput: true", "input": "Input: maxChoosableInteger = 10, desiredTotal = 0", "output": "Output: true", "explanation": ""}, {"full_text": "Example 3:\nInput: maxChoosableInteger = 10, desiredTotal = 1\nOutput: true", "input": "Input: maxChoosableInteger = 10, desiredTotal = 1", "output": "Output: true", "explanation": ""}], "constraints": "Constraints:\n1 <= maxChoosableInteger <= 20\n0 <= desiredTotal <= 300", "notes": ""}, "462": {"label": "Medium", "title": "Minimum Moves to Equal Array Elements II", "tags": "algorithms,math", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5663, "total_accepted": 84300.0, "total_submissions": 148800.0, "testcase_example": "'[1,2,3]'", "body": "Given an integer array nums of size n, return the minimum number of moves required to make all array elements equal.\nIn one move, you can increment or decrement an element of the array by 1.\nTest cases are designed so that the answer will fit in a 32-bit integer.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,2,3]\nOutput: 2\nExplanation:\nOnly two moves are needed (remember each move increments or decrements one element):\n[1,2,3] => [2,2,3] => [2,2,2]", "input": "Input: nums = [1,2,3]", "output": "Output: 2", "explanation": "Explanation:\nOnly two moves are needed (remember each move increments or decrements one element):\n[1,2,3] => [2,2,3] => [2,2,2]"}, {"full_text": "Example 2:\nInput: nums = [1,10,2,9]\nOutput: 16", "input": "Input: nums = [1,10,2,9]", "output": "Output: 16", "explanation": ""}], "constraints": "Constraints:\nn == nums.length\n1 <= nums.length <= 10^5\n-10^9 <= nums[i] <= 10^9", "notes": ""}, "457": {"label": "Medium", "title": "Circular Array Loop", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3145, "total_accepted": 56200.0, "total_submissions": 178700.0, "testcase_example": "'[2,-1,1,2,2]'", "body": "You are playing a game involving a circular array of non-zero integers nums. Each nums[i] denotes the number of indices forward/backward you must move if you are located at index i:\nIf nums[i] is positive, move nums[i] steps forward, and\nIf nums[i] is negative, move nums[i] steps backward.\nSince the array is circular, you may assume that moving forward from the last element puts you on the first element, and moving backwards from the first element puts you on the last element.\nA cycle in the array consists of a sequence of indices seq of length k where:\nFollowing the movement rules above results in the repeating index sequence seq[0] -> seq[1] -> ... -> seq[k - 1] -> seq[0] -> ...\nEvery nums[seq[j]] is either all positive or all negative.\nk > 1\nReturn true if there is a cycle in nums, or false otherwise.", "examples": [{"full_text": "Example 1:\nInput: nums = [2,-1,1,2,2]\nOutput: true\nExplanation:\nThere is a cycle from index 0 -> 2 -> 3 -> 0 -> ...\nThe cycle's length is 3.", "input": "Input: nums = [2,-1,1,2,2]", "output": "Output: true", "explanation": "Explanation:\nThere is a cycle from index 0 -> 2 -> 3 -> 0 -> ...\nThe cycle's length is 3."}, {"full_text": "Example 2:\nInput: nums = [-1,2]\nOutput: false\nExplanation:\nThe sequence from index 1 -> 1 -> 1 -> ... is not a cycle because the sequence's length is 1.\nBy definition the sequence's length must be strictly greater than 1 to be a cycle.", "input": "Input: nums = [-1,2]", "output": "Output: false", "explanation": "Explanation:\nThe sequence from index 1 -> 1 -> 1 -> ... is not a cycle because the sequence's length is 1.\nBy definition the sequence's length must be strictly greater than 1 to be a cycle."}, {"full_text": "Example 3:\nInput: nums = [-2,1,-1,-2,-2]\nOutput: false\nExplanation:\nThe sequence from index 1 -> 2 -> 1 -> ... is not a cycle because nums[1] is positive, but nums[2] is negative.\nEvery nums[seq[j]] must be either all positive or all negative.", "input": "Input: nums = [-2,1,-1,-2,-2]", "output": "Output: false", "explanation": "Explanation:\nThe sequence from index 1 -> 2 -> 1 -> ... is not a cycle because nums[1] is positive, but nums[2] is negative.\nEvery nums[seq[j]] must be either all positive or all negative."}], "constraints": "Constraints:\n1 <= nums.length <= 5000\n-1000 <= nums[i] <= 1000\nnums[i] != 0\nFollow up: Could you solve it in O(n) time complexity and O(1) extra space complexity?", "notes": ""}, "456": {"label": "Medium", "title": "132 Pattern", "tags": "algorithms,stack", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.30879999999999996, "total_accepted": 103300.0, "total_submissions": 334400.0, "testcase_example": "'[1,2,3,4]'", "body": "Given an array\nof n integers nums, a 132 pattern is a subsequence of three integers nums[i], nums[j] and nums[k] such that i < j < k and nums[i] < nums[k] < nums[j].\nReturn true if there is a 132 pattern in nums, otherwise, return false.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,2,3,4]\nOutput: false\nExplanation: There is no 132 pattern in the sequence.", "input": "Input: nums = [1,2,3,4]", "output": "Output: false", "explanation": "Explanation: There is no 132 pattern in the sequence."}, {"full_text": "Example 2:\nInput: nums = [3,1,4,2]\nOutput: true\nExplanation: There is a 132 pattern in the sequence: [1, 4, 2].", "input": "Input: nums = [3,1,4,2]", "output": "Output: true", "explanation": "Explanation: There is a 132 pattern in the sequence: [1, 4, 2]."}, {"full_text": "Example 3:\nInput: nums = [-1,3,2,0]\nOutput: true\nExplanation: There are three 132 patterns in the sequence: [-1, 3, 2], [-1, 3, 0] and [-1, 2, 0].", "input": "Input: nums = [-1,3,2,0]", "output": "Output: true", "explanation": "Explanation: There are three 132 patterns in the sequence: [-1, 3, 2], [-1, 3, 0] and [-1, 2, 0]."}], "constraints": "Constraints:\nn == nums.length\n1 <= n <= 2 * 10^5\n-10^9 <= nums[i] <= 10^9", "notes": ""}, "454": {"label": "Medium", "title": "4Sum II", "tags": "algorithms,binary-search,hash-table", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5689, "total_accepted": 242100.0, "total_submissions": 425600.0, "testcase_example": "'[1,2]\\n[-2,-1]\\n[-1,2]\\n[0,2]'", "body": "Given four integer arrays nums1, nums2, nums3, and nums4 all of length n, return the number of tuples (i, j, k, l) such that:\n0 <= i, j, k, l < n\nnums1[i] + nums2[j] + nums3[k] + nums4[l] == 0", "examples": [{"full_text": "Example 1:\nInput: nums1 = [1,2], nums2 = [-2,-1], nums3 = [-1,2], nums4 = [0,2]\nOutput: 2\nExplanation:\nThe two tuples are:\n1. (0, 0, 0, 1) -> nums1[0] + nums2[0] + nums3[0] + nums4[1] = 1 + (-2) + (-1) + 2 = 0\n2. (1, 1, 0, 0) -> nums1[1] + nums2[1] + nums3[0] + nums4[0] = 2 + (-1) + (-1) + 0 = 0", "input": "Input: nums1 = [1,2], nums2 = [-2,-1], nums3 = [-1,2], nums4 = [0,2]", "output": "Output: 2", "explanation": "Explanation:\nThe two tuples are:\n1. (0, 0, 0, 1) -> nums1[0] + nums2[0] + nums3[0] + nums4[1] = 1 + (-2) + (-1) + 2 = 0\n2. (1, 1, 0, 0) -> nums1[1] + nums2[1] + nums3[0] + nums4[0] = 2 + (-1) + (-1) + 0 = 0"}, {"full_text": "Example 2:\nInput: nums1 = [0], nums2 = [0], nums3 = [0], nums4 = [0]\nOutput: 1", "input": "Input: nums1 = [0], nums2 = [0], nums3 = [0], nums4 = [0]", "output": "Output: 1", "explanation": ""}], "constraints": "Constraints:\nn == nums1.length\nn == nums2.length\nn == nums3.length\nn == nums4.length\n1 <= n <= 200\n-2^28 <= nums1[i], nums2[i], nums3[i], nums4[i] <= 2^28", "notes": ""}, "453": {"label": "Medium", "title": "Minimum Moves to Equal Array Elements", "tags": "algorithms,indeed,math", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5355, "total_accepted": 116400.0, "total_submissions": 217300.0, "testcase_example": "'[1,2,3]'", "body": "Given an integer array nums of size n, return the minimum number of moves required to make all array elements equal.\nIn one move, you can increment n - 1 elements of the array by 1.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,2,3]\nOutput: 3\nExplanation: Only three moves are needed (remember each move increments two elements):\n[1,2,3] => [2,3,3] => [3,4,3] => [4,4,4]", "input": "Input: nums = [1,2,3]", "output": "Output: 3", "explanation": "Explanation: Only three moves are needed (remember each move increments two elements):\n[1,2,3] => [2,3,3] => [3,4,3] => [4,4,4]"}, {"full_text": "Example 2:\nInput: nums = [1,1,1]\nOutput: 0", "input": "Input: nums = [1,1,1]", "output": "Output: 0", "explanation": ""}], "constraints": "Constraints:\nn == nums.length\n1 <= nums.length <= 10^5\n-10^9 <= nums[i] <= 10^9\nThe answer is guaranteed to fit in a 32-bit integer.", "notes": ""}, "452": {"label": "Medium", "title": "Minimum Number of Arrows to Burst Balloons", "tags": "algorithms,microsoft,greedy", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5272, "total_accepted": 178500.0, "total_submissions": 338500.0, "testcase_example": "'[[10,16],[2,8],[1,6],[7,12]]'", "body": "There are some spherical balloons taped onto a flat wall that represents the XY-plane. The balloons are represented as a 2D integer array points where points[i] = [xstart, xend] denotes a balloon whose horizontal diameter stretches between xstart and xend. You do not know the exact y-coordinates of the balloons.\nArrows can be shot up directly vertically (in the positive y-direction) from different points along the x-axis. A balloon with xstart and xend is burst by an arrow shot at x if xstart <= x <= xend. There is no limit to the number of arrows that can be shot. A shot arrow keeps traveling up infinitely, bursting any balloons in its path.\nGiven the array points, return the minimum number of arrows that must be shot to burst all balloons.", "examples": [{"full_text": "Example 1:\nInput: points = [[10,16],[2,8],[1,6],[7,12]]\nOutput: 2\nExplanation: The balloons can be burst by 2 arrows:\n- Shoot an arrow at x = 6, bursting the balloons [2,8] and [1,6].\n- Shoot an arrow at x = 11, bursting the balloons [10,16] and [7,12].", "input": "Input: points = [[10,16],[2,8],[1,6],[7,12]]", "output": "Output: 2", "explanation": "Explanation: The balloons can be burst by 2 arrows:\n- Shoot an arrow at x = 6, bursting the balloons [2,8] and [1,6].\n- Shoot an arrow at x = 11, bursting the balloons [10,16] and [7,12]."}, {"full_text": "Example 2:\nInput: points = [[1,2],[3,4],[5,6],[7,8]]\nOutput: 4\nExplanation: One arrow needs to be shot for each balloon for a total of 4 arrows.", "input": "Input: points = [[1,2],[3,4],[5,6],[7,8]]", "output": "Output: 4", "explanation": "Explanation: One arrow needs to be shot for each balloon for a total of 4 arrows."}, {"full_text": "Example 3:\nInput: points = [[1,2],[2,3],[3,4],[4,5]]\nOutput: 2\nExplanation: The balloons can be burst by 2 arrows:\n- Shoot an arrow at x = 2, bursting the balloons [1,2] and [2,3].\n- Shoot an arrow at x = 4, bursting the balloons [3,4] and [4,5].", "input": "Input: points = [[1,2],[2,3],[3,4],[4,5]]", "output": "Output: 2", "explanation": "Explanation: The balloons can be burst by 2 arrows:\n- Shoot an arrow at x = 2, bursting the balloons [1,2] and [2,3].\n- Shoot an arrow at x = 4, bursting the balloons [3,4] and [4,5]."}], "constraints": "Constraints:\n1 <= points.length <= 10^5\npoints[i].length == 2\n-2^31 <= xstart < xend <= 2^31 - 1", "notes": ""}, "451": {"label": "Medium", "title": "Sort Characters By Frequency", "tags": "algorithms,amazon,google,hash-table,heap", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6734, "total_accepted": 339900.0, "total_submissions": 504800.0, "testcase_example": "'\"tree\"'", "body": "Given a string s, sort it in decreasing order based on the frequency of the characters. The frequency of a character is the number of times it appears in the string.\nReturn the sorted string. If there are multiple answers, return any of them.", "examples": [{"full_text": "Example 1:\nInput: s = \"tree\"\nOutput: \"eert\"\nExplanation: 'e' appears twice while 'r' and 't' both appear once.\nSo 'e' must appear before both 'r' and 't'. Therefore \"eetr\" is also a valid answer.", "input": "Input: s = \"tree\"", "output": "Output: \"eert\"", "explanation": "Explanation: 'e' appears twice while 'r' and 't' both appear once.\nSo 'e' must appear before both 'r' and 't'. Therefore \"eetr\" is also a valid answer."}, {"full_text": "Example 2:\nInput: s = \"cccaaa\"\nOutput: \"aaaccc\"\nExplanation: Both 'c' and 'a' appear three times, so both \"cccaaa\" and \"aaaccc\" are valid answers.\nNote that \"cacaca\" is incorrect, as the same characters must be together.", "input": "Input: s = \"cccaaa\"", "output": "Output: \"aaaccc\"", "explanation": "Explanation: Both 'c' and 'a' appear three times, so both \"cccaaa\" and \"aaaccc\" are valid answers.\nNote that \"cacaca\" is incorrect, as the same characters must be together."}, {"full_text": "Example 3:\nInput: s = \"Aabb\"\nOutput: \"bbAa\"\nExplanation: \"bbaA\" is also a valid answer, but \"Aabb\" is incorrect.\nNote that 'A' and 'a' are treated as two different characters.", "input": "Input: s = \"Aabb\"", "output": "Output: \"bbAa\"", "explanation": "Explanation: \"bbaA\" is also a valid answer, but \"Aabb\" is incorrect.\nNote that 'A' and 'a' are treated as two different characters."}], "constraints": "Constraints:\n1 <= s.length <= 5 * 10^5\ns consists of uppercase and lowercase English letters and digits.", "notes": ""}, "450": {"label": "Medium", "title": "Delete Node in a BST", "tags": "algorithms,uber,tree", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.48479999999999995, "total_accepted": 252400.0, "total_submissions": 520500.0, "testcase_example": "'[5,3,6,2,4,null,7]\\n3'", "body": "Given a root node reference of a BST and a key, delete the node with the given key in the BST. Return the root node reference (possibly updated) of the BST.\nBasically, the deletion can be divided into two stages:\nSearch for a node to remove.\nIf the node is found, delete the node.", "examples": [{"full_text": "Example 1:\nInput: root = [5,3,6,2,4,null,7], key = 3\nOutput: [5,4,6,2,null,null,7]\nExplanation: Given key to delete is 3. So we find the node with value 3 and delete it.\nOne valid answer is [5,4,6,2,null,null,7], shown in the above BST.\nPlease notice that another valid answer is [5,2,6,null,4,null,7] and it's also accepted.", "input": "Input: root = [5,3,6,2,4,null,7], key = 3", "output": "Output: [5,4,6,2,null,null,7]", "explanation": "Explanation: Given key to delete is 3. So we find the node with value 3 and delete it.\nOne valid answer is [5,4,6,2,null,null,7], shown in the above BST.\nPlease notice that another valid answer is [5,2,6,null,4,null,7] and it's also accepted."}, {"full_text": "Example 2:\nInput: root = [5,3,6,2,4,null,7], key = 0\nOutput: [5,3,6,2,4,null,7]\nExplanation: The tree does not contain a node with value = 0.", "input": "Input: root = [5,3,6,2,4,null,7], key = 0", "output": "Output: [5,3,6,2,4,null,7]", "explanation": "Explanation: The tree does not contain a node with value = 0."}, {"full_text": "Example 3:\nInput: root = [], key = 0\nOutput: []", "input": "Input: root = [], key = 0", "output": "Output: []", "explanation": ""}], "constraints": "Constraints:\nThe number of nodes in the tree is in the range [0, 10^4].\n-10^5 <= Node.val <= 10^5\nEach node has a unique value.\nroot is a valid binary search tree.\n-10^5 <= key <= 10^5\nFollow up: Could you solve it with time complexity O(height of tree)?", "notes": ""}, "449": {"label": "Medium", "title": "Serialize and Deserialize BST", "tags": "algorithms,amazon,tree", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5587, "total_accepted": 184200.0, "total_submissions": 329700.0, "testcase_example": "'[2,1,3]'", "body": "Serialization is converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.\nDesign an algorithm to serialize and deserialize a binary search tree. There is no restriction on how your serialization/deserialization algorithm should work. You need to ensure that a binary search tree can be serialized to a string, and this string can be deserialized to the original tree structure.\nThe encoded string should be as compact as possible.", "examples": [{"full_text": "Example 1:\nInput: root = [2,1,3]\nOutput: [2,1,3]", "input": "Input: root = [2,1,3]", "output": "Output: [2,1,3]", "explanation": ""}, {"full_text": "Example 2:\nInput: root = []\nOutput: []", "input": "Input: root = []", "output": "Output: []", "explanation": ""}], "constraints": "Constraints:\nThe number of nodes in the tree is in the range [0, 10^4].\n0 <= Node.val <= 10^4\nThe input tree is guaranteed to be a binary search tree.", "notes": ""}, "447": {"label": "Medium", "title": "Number of Boomerangs", "tags": "algorithms,google,hash-table", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5371, "total_accepted": 81600.0, "total_submissions": 151900.0, "testcase_example": "'[[0,0],[1,0],[2,0]]'", "body": "You are given n points in the plane that are all distinct, where points[i] = [xi, yi]. A boomerang is a tuple of points (i, j, k) such that the distance between i and j equals the distance between i and k (the order of the tuple matters).\nReturn the number of boomerangs.", "examples": [{"full_text": "Example 1:\nInput: points = [[0,0],[1,0],[2,0]]\nOutput: 2\nExplanation: The two boomerangs are [[1,0],[0,0],[2,0]] and [[1,0],[2,0],[0,0]].", "input": "Input: points = [[0,0],[1,0],[2,0]]", "output": "Output: 2", "explanation": "Explanation: The two boomerangs are [[1,0],[0,0],[2,0]] and [[1,0],[2,0],[0,0]]."}, {"full_text": "Example 2:\nInput: points = [[1,1],[2,2],[3,3]]\nOutput: 2", "input": "Input: points = [[1,1],[2,2],[3,3]]", "output": "Output: 2", "explanation": ""}, {"full_text": "Example 3:\nInput: points = [[1,1]]\nOutput: 0", "input": "Input: points = [[1,1]]", "output": "Output: 0", "explanation": ""}], "constraints": "Constraints:\nn == points.length\n1 <= n <= 500\npoints[i].length == 2\n-10^4 <= xi, yi <= 10^4\nAll the points are unique.", "notes": ""}, "445": {"label": "Medium", "title": "Add Two Numbers II", "tags": "algorithms,bloomberg,microsoft,linked-list", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5822999999999999, "total_accepted": 294300.0, "total_submissions": 505300.0, "testcase_example": "'[7,2,4,3]\\n[5,6,4]'", "body": "You are given two non-empty linked lists representing two non-negative integers. The most significant digit comes first and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.\nYou may assume the two numbers do not contain any leading zero, except the number 0 itself.", "examples": [{"full_text": "Example 1:\nInput: l1 = [7,2,4,3], l2 = [5,6,4]\nOutput: [7,8,0,7]", "input": "Input: l1 = [7,2,4,3], l2 = [5,6,4]", "output": "Output: [7,8,0,7]", "explanation": ""}, {"full_text": "Example 2:\nInput: l1 = [2,4,3], l2 = [5,6,4]\nOutput: [8,0,7]", "input": "Input: l1 = [2,4,3], l2 = [5,6,4]", "output": "Output: [8,0,7]", "explanation": ""}, {"full_text": "Example 3:\nInput: l1 = [0], l2 = [0]\nOutput: [0]", "input": "Input: l1 = [0], l2 = [0]", "output": "Output: [0]", "explanation": ""}], "constraints": "Constraints:\nThe number of nodes in each linked list is in the range [1, 100].\n0 <= Node.val <= 9\nIt is guaranteed that the list represents a number that does not have leading zeros.\nFollow up:\nCould you solve it without reversing the input lists?", "notes": ""}, "443": {"label": "Medium", "title": "String Compression", "tags": "algorithms,bloomberg,microsoft,snapchat,yelp,string", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.47090000000000004, "total_accepted": 231600.0, "total_submissions": 491800.0, "testcase_example": "'[\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]'", "body": "Given an array of characters chars, compress it using the following algorithm:\nBegin with an empty string s. For each group of consecutive repeating characters in chars:\nIf the group's length is 1, append the character to s.\nOtherwise, append the character followed by the group's length.\nThe compressed string s should not be returned separately, but instead, be stored in the input character array chars. Note that group lengths that are 10 or longer will be split into multiple characters in chars.\nAfter you are done modifying the input array, return the new length of the array.\nYou must write an algorithm that uses only constant extra space.", "examples": [{"full_text": "Example 1:\nInput: chars = [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]\nOutput: Return 6, and the first 6 characters of the input array should be: [\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]\nExplanation: The groups are \"aa\", \"bb\", and \"ccc\". This compresses to \"a2b2c3\".", "input": "Input: chars = [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]", "output": "Output: Return 6, and the first 6 characters of the input array should be: [\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]", "explanation": "Explanation: The groups are \"aa\", \"bb\", and \"ccc\". This compresses to \"a2b2c3\"."}, {"full_text": "Example 2:\nInput: chars = [\"a\"]\nOutput: Return 1, and the first character of the input array should be: [\"a\"]\nExplanation: The only group is \"a\", which remains uncompressed since it's a single character.", "input": "Input: chars = [\"a\"]", "output": "Output: Return 1, and the first character of the input array should be: [\"a\"]", "explanation": "Explanation: The only group is \"a\", which remains uncompressed since it's a single character."}, {"full_text": "Example 3:\nInput: chars = [\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]\nOutput: Return 4, and the first 4 characters of the input array should be: [\"a\",\"b\",\"1\",\"2\"].\nExplanation: The groups are \"a\" and \"bbbbbbbbbbbb\". This compresses to \"ab12\".", "input": "Input: chars = [\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]", "output": "Output: Return 4, and the first 4 characters of the input array should be: [\"a\",\"b\",\"1\",\"2\"].", "explanation": "Explanation: The groups are \"a\" and \"bbbbbbbbbbbb\". This compresses to \"ab12\"."}], "constraints": "Constraints:\n1 <= chars.length <= 2000\nchars[i] is a lowercase English letter, uppercase English letter, digit, or symbol.", "notes": ""}, "442": {"label": "Medium", "title": "Find All Duplicates in an Array", "tags": "algorithms,pocketgems,array", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7203, "total_accepted": 373500.0, "total_submissions": 518500.0, "testcase_example": "'[4,3,2,7,8,2,3,1]'", "body": "Given an integer array nums of length n where all the integers of nums are in the range [1, n] and each integer appears once or twice, return an array of all the integers that appears twice.\nYou must write an algorithm that runs in\nO(n)\ntime and uses only constant extra space.", "examples": [{"full_text": "Example 1:\nInput: nums = [4,3,2,7,8,2,3,1]\nOutput: [2,3]", "input": "Input: nums = [4,3,2,7,8,2,3,1]", "output": "Output: [2,3]", "explanation": ""}, {"full_text": "Example 2:\nInput: nums = [1,1,2]\nOutput: [1]", "input": "Input: nums = [1,1,2]", "output": "Output: [1]", "explanation": ""}, {"full_text": "Example 3:\nInput: nums = [1]\nOutput: []", "input": "Input: nums = [1]", "output": "Output: []", "explanation": ""}], "constraints": "Constraints:\nn == nums.length\n1 <= n <= 10^5\n1 <= nums[i] <= n\nEach element in nums appears once or twice.", "notes": ""}, "438": {"label": "Medium", "title": "Find All Anagrams in a String", "tags": "algorithms,amazon,hash-table", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.47869999999999996, "total_accepted": 493700.0, "total_submissions": 1000000.0, "testcase_example": "'\"cbaebabacd\"\\n\"abc\"'", "body": "Given two strings s and p, return an array of all the start indices of p's anagrams in s. You may return the answer in any order.\nAn Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.", "examples": [{"full_text": "Example 1:\nInput: s = \"cbaebabacd\", p = \"abc\"\nOutput: [0,6]\nExplanation:\nThe substring with start index = 0 is \"cba\", which is an anagram of \"abc\".\nThe substring with start index = 6 is \"bac\", which is an anagram of \"abc\".", "input": "Input: s = \"cbaebabacd\", p = \"abc\"", "output": "Output: [0,6]", "explanation": "Explanation:\nThe substring with start index = 0 is \"cba\", which is an anagram of \"abc\".\nThe substring with start index = 6 is \"bac\", which is an anagram of \"abc\"."}, {"full_text": "Example 2:\nInput: s = \"abab\", p = \"ab\"\nOutput: [0,1,2]\nExplanation:\nThe substring with start index = 0 is \"ab\", which is an anagram of \"ab\".\nThe substring with start index = 1 is \"ba\", which is an anagram of \"ab\".\nThe substring with start index = 2 is \"ab\", which is an anagram of \"ab\".", "input": "Input: s = \"abab\", p = \"ab\"", "output": "Output: [0,1,2]", "explanation": "Explanation:\nThe substring with start index = 0 is \"ab\", which is an anagram of \"ab\".\nThe substring with start index = 1 is \"ba\", which is an anagram of \"ab\".\nThe substring with start index = 2 is \"ab\", which is an anagram of \"ab\"."}], "constraints": "Constraints:\n1 <= s.length, p.length <= 3 * 10^4\ns and p consist of lowercase English letters.", "notes": ""}, "437": {"label": "Medium", "title": "Path Sum III", "tags": "algorithms,tree", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5003, "total_accepted": 344800.0, "total_submissions": 689300.0, "testcase_example": "'[10,5,-3,3,2,null,11,3,-2,null,1]\\n8'", "body": "Given the root of a binary tree and an integer targetSum, return the number of paths where the sum of the values\nalong the path equals\ntargetSum.\nThe path does not need to start or end at the root or a leaf, but it must go downwards (i.e., traveling only from parent nodes to child nodes).", "examples": [{"full_text": "Example 1:\nInput: root = [10,5,-3,3,2,null,11,3,-2,null,1], targetSum = 8\nOutput: 3\nExplanation: The paths that sum to 8 are shown.", "input": "Input: root = [10,5,-3,3,2,null,11,3,-2,null,1], targetSum = 8", "output": "Output: 3", "explanation": "Explanation: The paths that sum to 8 are shown."}, {"full_text": "Example 2:\nInput: root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22\nOutput: 3", "input": "Input: root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22", "output": "Output: 3", "explanation": ""}], "constraints": "Constraints:\nThe number of nodes in the tree is in the range [0, 1000].\n-10^9 <= Node.val <= 10^9\n-1000 <= targetSum <= 1000", "notes": ""}, "436": {"label": "Medium", "title": "Find Right Interval", "tags": "algorithms,binary-search", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4926, "total_accepted": 73800.0, "total_submissions": 149800.0, "testcase_example": "'[[1,2]]'", "body": "You are given an array of\nintervals, where intervals[i] = [starti, endi]\nand each starti\nis unique.\nThe right\ninterval\nfor an interval i is an interval\nj\nsuch that startj\n>= endi\nand\nstartj\nis\nminimized.\nReturn\nan array of\nright interval\nindices for each interval\ni. If no\nright interval\nexists for interval\ni, then put\n-1\nat index i.", "examples": [{"full_text": "Example 1:\nInput: intervals = [[1,2]]\nOutput: [-1]\nExplanation: There is only one interval in the collection, so it outputs -1.", "input": "Input: intervals = [[1,2]]", "output": "Output: [-1]", "explanation": "Explanation: There is only one interval in the collection, so it outputs -1."}, {"full_text": "Example 2:\nInput: intervals = [[3,4],[2,3],[1,2]]\nOutput: [-1,0,1]\nExplanation: There is no right interval for [3,4].\nThe right interval for [2,3] is [3,4] since start0\n= 3 is the smallest start that is >= end1\n= 3.\nThe right interval for [1,2] is [2,3] since start1\n= 2 is the smallest start that is >= end2\n= 2.", "input": "Input: intervals = [[3,4],[2,3],[1,2]]", "output": "Output: [-1,0,1]", "explanation": "Explanation: There is no right interval for [3,4].\nThe right interval for [2,3] is [3,4] since start0\n= 3 is the smallest start that is >= end1\n= 3.\nThe right interval for [1,2] is [2,3] since start1\n= 2 is the smallest start that is >= end2\n= 2."}, {"full_text": "Example 3:\nInput: intervals = [[1,4],[2,3],[3,4]]\nOutput: [-1,2,-1]\nExplanation: There is no right interval for [1,4] and [3,4].\nThe right interval for [2,3] is [3,4] since start2 = 3 is the smallest start that is >= end1\n= 3.", "input": "Input: intervals = [[1,4],[2,3],[3,4]]", "output": "Output: [-1,2,-1]", "explanation": "Explanation: There is no right interval for [1,4] and [3,4].\nThe right interval for [2,3] is [3,4] since start2 = 3 is the smallest start that is >= end1\n= 3."}], "constraints": "Constraints:\n1 <=\nintervals.length <= 2 * 10^4\nintervals[i].length == 2\n-10^6 <= starti <= endi <= 10^6\nThe start point\nof each interval is unique.", "notes": ""}, "435": {"label": "Medium", "title": "Non-overlapping Intervals", "tags": "algorithms,greedy", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.47600000000000003, "total_accepted": 218100.0, "total_submissions": 458000.0, "testcase_example": "'[[1,2],[2,3],[3,4],[1,3]]'", "body": "Given an array of intervals intervals where intervals[i] = [starti, endi], return the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping.", "examples": [{"full_text": "Example 1:\nInput: intervals = [[1,2],[2,3],[3,4],[1,3]]\nOutput: 1\nExplanation: [1,3] can be removed and the rest of the intervals are non-overlapping.", "input": "Input: intervals = [[1,2],[2,3],[3,4],[1,3]]", "output": "Output: 1", "explanation": "Explanation: [1,3] can be removed and the rest of the intervals are non-overlapping."}, {"full_text": "Example 2:\nInput: intervals = [[1,2],[1,2],[1,2]]\nOutput: 2\nExplanation: You need to remove two [1,2] to make the rest of the intervals non-overlapping.", "input": "Input: intervals = [[1,2],[1,2],[1,2]]", "output": "Output: 2", "explanation": "Explanation: You need to remove two [1,2] to make the rest of the intervals non-overlapping."}, {"full_text": "Example 3:\nInput: intervals = [[1,2],[2,3]]\nOutput: 0\nExplanation: You don't need to remove any of the intervals since they're already non-overlapping.", "input": "Input: intervals = [[1,2],[2,3]]", "output": "Output: 0", "explanation": "Explanation: You don't need to remove any of the intervals since they're already non-overlapping."}], "constraints": "Constraints:\n1 <= intervals.length <= 10^5\nintervals[i].length == 2\n-5 * 10^4 <= starti < endi <= 5 * 10^4", "notes": ""}, "433": {"label": "Medium", "title": "Minimum Genetic Mutation", "tags": "algorithms,twitter", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.45649999999999996, "total_accepted": 49000.0, "total_submissions": 107200.0, "testcase_example": "'\"AACCGGTT\"\\n\"AACCGGTA\"\\n[\"AACCGGTA\"]'", "body": "A gene string can be represented by an 8-character long string, with choices from 'A', 'C', 'G', and 'T'.\nSuppose we need to investigate a mutation from a gene string start to a gene string end where one mutation is defined as one single character changed in the gene string.\nFor example, \"AACCGGTT\" --> \"AACCGGTA\" is one mutation.\nThere is also a gene bank bank that records all the valid gene mutations. A gene must be in bank to make it a valid gene string.\nGiven the two gene strings start and end and the gene bank bank, return the minimum number of mutations needed to mutate from start to end. If there is no such a mutation, return -1.\nNote that the starting point is assumed to be valid, so it might not be included in the bank.", "examples": [{"full_text": "Example 1:\nInput: start = \"AACCGGTT\", end = \"AACCGGTA\", bank = [\"AACCGGTA\"]\nOutput: 1", "input": "Input: start = \"AACCGGTT\", end = \"AACCGGTA\", bank = [\"AACCGGTA\"]", "output": "Output: 1", "explanation": ""}, {"full_text": "Example 2:\nInput: start = \"AACCGGTT\", end = \"AAACGGTA\", bank = [\"AACCGGTA\",\"AACCGCTA\",\"AAACGGTA\"]\nOutput: 2", "input": "Input: start = \"AACCGGTT\", end = \"AAACGGTA\", bank = [\"AACCGGTA\",\"AACCGCTA\",\"AAACGGTA\"]", "output": "Output: 2", "explanation": ""}, {"full_text": "Example 3:\nInput: start = \"AAAAACCC\", end = \"AACCCCCC\", bank = [\"AAAACCCC\",\"AAACCCCC\",\"AACCCCCC\"]\nOutput: 3", "input": "Input: start = \"AAAAACCC\", end = \"AACCCCCC\", bank = [\"AAAACCCC\",\"AAACCCCC\",\"AACCCCCC\"]", "output": "Output: 3", "explanation": ""}], "constraints": "Constraints:\nstart.length == 8\nend.length == 8\n0 <= bank.length <= 10\nbank[i].length == 8\nstart, end, and bank[i] consist of only the characters ['A', 'C', 'G', 'T'].", "notes": ""}, "430": {"label": "Medium", "title": "Flatten a Multilevel Doubly Linked List", "tags": "algorithms", "langs": "cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5877, "total_accepted": 219100.0, "total_submissions": 372800.0, "testcase_example": "'[1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12]'", "body": "You are given a doubly linked list, which contains nodes that have a next pointer, a previous pointer, and an additional child pointer. This child pointer may or may not point to a separate doubly linked list, also containing these special nodes. These child lists may have one or more children of their own, and so on, to produce a multilevel data structure as shown in the example below.\nGiven the head of the first level of the list, flatten the list so that all the nodes appear in a single-level, doubly linked list. Let curr be a node with a child list. The nodes in the child list should appear after curr and before curr.next in the flattened list.\nReturn the head of the flattened list. The nodes in the list must have all of their child pointers set to null.", "examples": [{"full_text": "Example 1:\nInput: head = [1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12]\nOutput: [1,2,3,7,8,11,12,9,10,4,5,6]\nExplanation: The multilevel linked list in the input is shown.\nAfter flattening the multilevel linked list it becomes:", "input": "Input: head = [1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12]", "output": "Output: [1,2,3,7,8,11,12,9,10,4,5,6]", "explanation": "Explanation: The multilevel linked list in the input is shown.\nAfter flattening the multilevel linked list it becomes:"}, {"full_text": "Example 2:\nInput: head = [1,2,null,3]\nOutput: [1,3,2]\nExplanation: The multilevel linked list in the input is shown.\nAfter flattening the multilevel linked list it becomes:", "input": "Input: head = [1,2,null,3]", "output": "Output: [1,3,2]", "explanation": "Explanation: The multilevel linked list in the input is shown.\nAfter flattening the multilevel linked list it becomes:"}, {"full_text": "Example 3:\nInput: head = []\nOutput: []\nExplanation: There could be empty list in the input.", "input": "Input: head = []", "output": "Output: []", "explanation": "Explanation: There could be empty list in the input."}], "constraints": "Constraints:\nThe number of Nodes will not exceed 1000.\n1 <= Node.val <= 10^5\nHow the multilevel linked list is represented in test cases:\nWe use the multilevel linked list from Example 1 above:\n1---2---3---4---5---6--NULL\n|\n7---8---9---10--NULL\n|\n11--12--NULL\nThe serialization of each level is as follows:\n[1,2,3,4,5,6,null]\n[7,8,9,10,null]\n[11,12,null]\nTo serialize all levels together, we will add nulls in each level to signify no node connects to the upper node of the previous level. The serialization becomes:\n[1, 2, 3, 4, 5, 6, null]\n|\n[null, null, 7, 8, 9, 10, null]\n|\n[ null, 11, 12, null]\nMerging the serialization of each level and removing trailing nulls we obtain:\n[1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12]", "notes": ""}, "429": {"label": "Medium", "title": "N-ary Tree Level Order Traversal", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6858, "total_accepted": 163900.0, "total_submissions": 239000.0, "testcase_example": "'[1,null,3,2,4,null,5,6]'", "body": "Given an n-ary tree, return the level order traversal of its nodes' values.\nNary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See examples).", "examples": [{"full_text": "Example 1:\nInput: root = [1,null,3,2,4,null,5,6]\nOutput: [[1],[3,2,4],[5,6]]", "input": "Input: root = [1,null,3,2,4,null,5,6]", "output": "Output: [[1],[3,2,4],[5,6]]", "explanation": ""}, {"full_text": "Example 2:\nInput: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]\nOutput: [[1],[2,3,4,5],[6,7,8,9,10],[11,12,13],[14]]", "input": "Input: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]", "output": "Output: [[1],[2,3,4,5],[6,7,8,9,10],[11,12,13],[14]]", "explanation": ""}], "constraints": "Constraints:\nThe height of the n-ary tree is less than or equal to 1000\nThe total number of nodes is between [0, 10^4]", "notes": ""}, "427": {"label": "Medium", "title": "Construct Quad Tree", "tags": "algorithms", "langs": "cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6476000000000001, "total_accepted": 38200.0, "total_submissions": 59100.0, "testcase_example": "'[[0,1],[1,0]]'", "body": "Given a n * n matrix grid of 0's and 1's only. We want to represent the grid with a Quad-Tree.\nReturn the root of the Quad-Tree representing the grid.\nNotice that you can assign the value of a node to True or False when isLeaf is False, and both are accepted in the answer.\nA Quad-Tree is a tree data structure in which each internal node has exactly four children. Besides, each node has two attributes:\nval: True if the node represents a grid of 1's or False if the node represents a grid of 0's.\nisLeaf: True if the node is leaf node on the tree or False if the node has the four children.\nclass Node {\npublic boolean val;\npublic boolean isLeaf;\npublic Node topLeft;\npublic Node topRight;\npublic Node bottomLeft;\npublic Node bottomRight;\n}\nWe can construct a Quad-Tree from a two-dimensional area using the following steps:\nIf the current grid has the same value (i.e all 1's or all 0's) set isLeaf True and set val to the value of the grid and set the four children to Null and stop.\nIf the current grid has different values, set isLeaf to False and set val to any value and divide the current grid into four sub-grids as shown in the photo.\nRecurse for each of the children with the proper sub-grid.\nIf you want to know more about the Quad-Tree, you can refer to the wiki.\nQuad-Tree format:\nThe output represents the serialized format of a Quad-Tree using level order traversal, where null signifies a path terminator where no node exists below.\nIt is very similar to the serialization of the binary tree. The only difference is that the node is represented as a list [isLeaf, val].\nIf the value of isLeaf or val is True we represent it as 1 in the list [isLeaf, val] and if the value of isLeaf or val is False we represent it as 0.", "examples": [{"full_text": "Example 1:\nInput: grid = [[0,1],[1,0]]\nOutput: [[0,1],[1,0],[1,1],[1,1],[1,0]]\nExplanation: The explanation of this example is shown below:\nNotice that 0 represnts False and 1 represents True in the photo representing the Quad-Tree.", "input": "Input: grid = [[0,1],[1,0]]", "output": "Output: [[0,1],[1,0],[1,1],[1,1],[1,0]]", "explanation": "Explanation: The explanation of this example is shown below:\nNotice that 0 represnts False and 1 represents True in the photo representing the Quad-Tree."}, {"full_text": "Example 2:\nInput: grid = [[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0]]\nOutput: [[0,1],[1,1],[0,1],[1,1],[1,0],null,null,null,null,[1,0],[1,0],[1,1],[1,1]]\nExplanation: All values in the grid are not the same. We divide the grid into four sub-grids.\nThe topLeft, bottomLeft and bottomRight each has the same value.\nThe topRight have different values so we divide it into 4 sub-grids where each has the same value.\nExplanation is shown in the photo below:", "input": "Input: grid = [[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0]]", "output": "Output: [[0,1],[1,1],[0,1],[1,1],[1,0],null,null,null,null,[1,0],[1,0],[1,1],[1,1]]", "explanation": "Explanation: All values in the grid are not the same. We divide the grid into four sub-grids.\nThe topLeft, bottomLeft and bottomRight each has the same value.\nThe topRight have different values so we divide it into 4 sub-grids where each has the same value.\nExplanation is shown in the photo below:"}], "constraints": "Constraints:\nn == grid.length == grid[i].length\nn == 2^x where 0 <= x <= 6", "notes": ""}, "424": {"label": "Medium", "title": "Longest Repeating Character Replacement", "tags": "algorithms,pocketgems", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5044, "total_accepted": 182100.0, "total_submissions": 361000.0, "testcase_example": "'\"ABAB\"\\n2'", "body": "You are given a string s and an integer k. You can choose any character of the string and change it to any other uppercase English character. You can perform this operation at most k times.\nReturn the length of the longest substring containing the same letter you can get after performing the above operations.", "examples": [{"full_text": "Example 1:\nInput: s = \"ABAB\", k = 2\nOutput: 4\nExplanation: Replace the two 'A's with two 'B's or vice versa.", "input": "Input: s = \"ABAB\", k = 2", "output": "Output: 4", "explanation": "Explanation: Replace the two 'A's with two 'B's or vice versa."}, {"full_text": "Example 2:\nInput: s = \"AABABBA\", k = 1\nOutput: 4\nExplanation: Replace the one 'A' in the middle with 'B' and form \"AABBBBA\".\nThe substring \"BBBB\" has the longest repeating letters, which is 4.", "input": "Input: s = \"AABABBA\", k = 1", "output": "Output: 4", "explanation": "Explanation: Replace the one 'A' in the middle with 'B' and form \"AABBBBA\".\nThe substring \"BBBB\" has the longest repeating letters, which is 4."}], "constraints": "Constraints:\n1 <= s.length <= 10^5\ns consists of only uppercase English letters.\n0 <= k <= s.length", "notes": ""}, "423": {"label": "Medium", "title": "Reconstruct Original Digits from English", "tags": "algorithms,math", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5131, "total_accepted": 57600.0, "total_submissions": 112300.0, "testcase_example": "'\"owoztneoer\"'", "body": "Given a string s containing an out-of-order English representation of digits 0-9, return the digits in ascending order.", "examples": [{"full_text": "Example 1:\nInput: s = \"owoztneoer\"\nOutput: \"012\"", "input": "Input: s = \"owoztneoer\"", "output": "Output: \"012\"", "explanation": ""}, {"full_text": "Example 2:\nInput: s = \"fviefuro\"\nOutput: \"45\"", "input": "Input: s = \"fviefuro\"", "output": "Output: \"45\"", "explanation": ""}], "constraints": "Constraints:\n1 <= s.length <= 10^5\ns[i] is one of the characters [\"e\",\"g\",\"f\",\"i\",\"h\",\"o\",\"n\",\"s\",\"r\",\"u\",\"t\",\"w\",\"v\",\"x\",\"z\"].\ns is guaranteed to be valid.", "notes": ""}, "421": {"label": "Medium", "title": "Maximum XOR of Two Numbers in an Array", "tags": "algorithms,google,bit-manipulation,trie", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.542, "total_accepted": 118300.0, "total_submissions": 218200.0, "testcase_example": "'[3,10,5,25,2,8]'", "body": "Given an integer array nums, return the maximum result of nums[i] XOR nums[j], where 0 <= i <= j < n.", "examples": [{"full_text": "Example 1:\nInput: nums = [3,10,5,25,2,8]\nOutput: 28\nExplanation: The maximum result is 5 XOR 25 = 28.", "input": "Input: nums = [3,10,5,25,2,8]", "output": "Output: 28", "explanation": "Explanation: The maximum result is 5 XOR 25 = 28."}, {"full_text": "Example 2:\nInput: nums = [14,70,53,83,49,91,36,80,92,51,66,70]\nOutput: 127", "input": "Input: nums = [14,70,53,83,49,91,36,80,92,51,66,70]", "output": "Output: 127", "explanation": ""}], "constraints": "Constraints:\n1 <= nums.length <= 2 * 10^5\n0 <= nums[i] <= 2^31 - 1", "notes": ""}, "419": {"label": "Medium", "title": "Battleships in a Board", "tags": "algorithms,microsoft", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7304999999999999, "total_accepted": 138200.0, "total_submissions": 189200.0, "testcase_example": "'[[\"X\",\".\",\".\",\"X\"],[\".\",\".\",\".\",\"X\"],[\".\",\".\",\".\",\"X\"]]'", "body": "Given an m x n matrix board where each cell is a battleship 'X' or empty '.', return the number of the battleships on board.\nBattleships can only be placed horizontally or vertically on board. In other words, they can only be made of the shape 1 x k (1 row, k columns) or k x 1 (k rows, 1 column), where k can be of any size. At least one horizontal or vertical cell separates between two battleships (i.e., there are no adjacent battleships).", "examples": [{"full_text": "Example 1:\nInput: board = [[\"X\",\".\",\".\",\"X\"],[\".\",\".\",\".\",\"X\"],[\".\",\".\",\".\",\"X\"]]\nOutput: 2", "input": "Input: board = [[\"X\",\".\",\".\",\"X\"],[\".\",\".\",\".\",\"X\"],[\".\",\".\",\".\",\"X\"]]", "output": "Output: 2", "explanation": ""}, {"full_text": "Example 2:\nInput: board = [[\".\"]]\nOutput: 0", "input": "Input: board = [[\".\"]]", "output": "Output: 0", "explanation": ""}], "constraints": "Constraints:\nm == board.length\nn == board[i].length\n1 <= m, n <= 200\nboard[i][j] is either '.' or 'X'.\nFollow up: Could you do it in one-pass, using only O(1) extra memory and without modifying the values board?", "notes": ""}, "417": {"label": "Medium", "title": "Pacific Atlantic Water Flow", "tags": "algorithms,google,breadth-first-search,depth-first-search", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.47869999999999996, "total_accepted": 173400.0, "total_submissions": 362200.0, "testcase_example": "'[[1,2,2,3,5],[3,2,3,4,4],[2,4,5,3,1],[6,7,1,4,5],[5,1,1,2,4]]'", "body": "There is an m x n rectangular island that borders both the Pacific Ocean and Atlantic Ocean. The Pacific Ocean touches the island's left and top edges, and the Atlantic Ocean touches the island's right and bottom edges.\nThe island is partitioned into a grid of square cells. You are given an m x n integer matrix heights where heights[r][c] represents the height above sea level of the cell at coordinate (r, c).\nThe island receives a lot of rain, and the rain water can flow to neighboring cells directly north, south, east, and west if the neighboring cell's height is less than or equal to the current cell's height. Water can flow from any cell adjacent to an ocean into the ocean.\nReturn a 2D list of grid coordinates result where result[i] = [ri, ci] denotes that rain water can flow from cell (ri, ci) to both the Pacific and Atlantic oceans.", "examples": [{"full_text": "Example 1:\nInput: heights = [[1,2,2,3,5],[3,2,3,4,4],[2,4,5,3,1],[6,7,1,4,5],[5,1,1,2,4]]\nOutput: [[0,4],[1,3],[1,4],[2,2],[3,0],[3,1],[4,0]]", "input": "Input: heights = [[1,2,2,3,5],[3,2,3,4,4],[2,4,5,3,1],[6,7,1,4,5],[5,1,1,2,4]]", "output": "Output: [[0,4],[1,3],[1,4],[2,2],[3,0],[3,1],[4,0]]", "explanation": ""}, {"full_text": "Example 2:\nInput: heights = [[2,1],[1,2]]\nOutput: [[0,0],[0,1],[1,0],[1,1]]", "input": "Input: heights = [[2,1],[1,2]]", "output": "Output: [[0,0],[0,1],[1,0],[1,1]]", "explanation": ""}], "constraints": "Constraints:\nm == heights.length\nn == heights[r].length\n1 <= m, n <= 200\n0 <= heights[r][c] <= 10^5", "notes": ""}, "416": {"label": "Medium", "title": "Partition Equal Subset Sum", "tags": "algorithms,ebay,dynamic-programming", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4623, "total_accepted": 404500.0, "total_submissions": 875000.0, "testcase_example": "'[1,5,11,5]'", "body": "Given a non-empty array nums containing only positive integers, find if the array can be partitioned into two subsets such that the sum of elements in both subsets is equal.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,5,11,5]\nOutput: true\nExplanation: The array can be partitioned as [1, 5, 5] and [11].", "input": "Input: nums = [1,5,11,5]", "output": "Output: true", "explanation": "Explanation: The array can be partitioned as [1, 5, 5] and [11]."}, {"full_text": "Example 2:\nInput: nums = [1,2,3,5]\nOutput: false\nExplanation: The array cannot be partitioned into equal sum subsets.", "input": "Input: nums = [1,2,3,5]", "output": "Output: false", "explanation": "Explanation: The array cannot be partitioned into equal sum subsets."}], "constraints": "Constraints:\n1 <= nums.length <= 200\n1 <= nums[i] <= 100", "notes": ""}, "413": {"label": "Medium", "title": "Arithmetic Slices", "tags": "algorithms,baidu,dynamic-programming,math", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6225999999999999, "total_accepted": 172100.0, "total_submissions": 276400.0, "testcase_example": "'[1,2,3,4]'", "body": "An integer array is called arithmetic if it consists of at least three elements and if the difference between any two consecutive elements is the same.\nFor example, [1,3,5,7,9], [7,7,7,7], and [3,-1,-5,-9] are arithmetic sequences.\nGiven an integer array nums, return the number of arithmetic subarrays of nums.\nA subarray is a contiguous subsequence of the array.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,2,3,4]\nOutput: 3\nExplanation: We have 3 arithmetic slices in nums: [1, 2, 3], [2, 3, 4] and [1,2,3,4] itself.", "input": "Input: nums = [1,2,3,4]", "output": "Output: 3", "explanation": "Explanation: We have 3 arithmetic slices in nums: [1, 2, 3], [2, 3, 4] and [1,2,3,4] itself."}, {"full_text": "Example 2:\nInput: nums = [1]\nOutput: 0", "input": "Input: nums = [1]", "output": "Output: 0", "explanation": ""}], "constraints": "Constraints:\n1 <= nums.length <= 5000\n-1000 <= nums[i] <= 1000", "notes": ""}, "406": {"label": "Medium", "title": "Queue Reconstruction by Height", "tags": "algorithms,google,greedy", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6986, "total_accepted": 216500.0, "total_submissions": 310000.0, "testcase_example": "'[[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]'", "body": "You are given an array of people, people, which are the attributes of some people in a queue (not necessarily in order). Each people[i] = [hi, ki] represents the i^th person of height hi with exactly ki other people in front who have a height greater than or equal to hi.\nReconstruct and return the queue that is represented by the input array people. The returned queue should be formatted as an array queue, where queue[j] = [hj, kj] is the attributes of the j^th person in the queue (queue[0] is the person at the front of the queue).", "examples": [{"full_text": "Example 1:\nInput: people = [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]\nOutput: [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]]\nExplanation:\nPerson 0 has height 5 with no other people taller or the same height in front.\nPerson 1 has height 7 with no other people taller or the same height in front.\nPerson 2 has height 5 with two persons taller or the same height in front, which is person 0 and 1.\nPerson 3 has height 6 with one person taller or the same height in front, which is person 1.\nPerson 4 has height 4 with four people taller or the same height in front, which are people 0, 1, 2, and 3.\nPerson 5 has height 7 with one person taller or the same height in front, which is person 1.\nHence [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]] is the reconstructed queue.", "input": "Input: people = [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]", "output": "Output: [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]]", "explanation": "Explanation:\nPerson 0 has height 5 with no other people taller or the same height in front.\nPerson 1 has height 7 with no other people taller or the same height in front.\nPerson 2 has height 5 with two persons taller or the same height in front, which is person 0 and 1.\nPerson 3 has height 6 with one person taller or the same height in front, which is person 1.\nPerson 4 has height 4 with four people taller or the same height in front, which are people 0, 1, 2, and 3.\nPerson 5 has height 7 with one person taller or the same height in front, which is person 1.\nHence [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]] is the reconstructed queue."}, {"full_text": "Example 2:\nInput: people = [[6,0],[5,0],[4,0],[3,2],[2,2],[1,4]]\nOutput: [[4,0],[5,0],[2,2],[3,2],[1,4],[6,0]]", "input": "Input: people = [[6,0],[5,0],[4,0],[3,2],[2,2],[1,4]]", "output": "Output: [[4,0],[5,0],[2,2],[3,2],[1,4],[6,0]]", "explanation": ""}], "constraints": "Constraints:\n1 <= people.length <= 2000\n0 <= hi <= 10^6\n0 <= ki < people.length\nIt is guaranteed that the queue can be reconstructed.", "notes": ""}, "402": {"label": "Medium", "title": "Remove K Digits", "tags": "algorithms,google,snapchat,greedy,stack", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.2913, "total_accepted": 213700.0, "total_submissions": 733500.0, "testcase_example": "'\"1432219\"\\n3'", "body": "Given string num representing a non-negative integer num, and an integer k, return the smallest possible integer after removing k digits from num.", "examples": [{"full_text": "Example 1:\nInput: num = \"1432219\", k = 3\nOutput: \"1219\"\nExplanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.", "input": "Input: num = \"1432219\", k = 3", "output": "Output: \"1219\"", "explanation": "Explanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest."}, {"full_text": "Example 2:\nInput: num = \"10200\", k = 1\nOutput: \"200\"\nExplanation: Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes.", "input": "Input: num = \"10200\", k = 1", "output": "Output: \"200\"", "explanation": "Explanation: Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes."}, {"full_text": "Example 3:\nInput: num = \"10\", k = 2\nOutput: \"0\"\nExplanation: Remove all the digits from the number and it is left with nothing which is 0.", "input": "Input: num = \"10\", k = 2", "output": "Output: \"0\"", "explanation": "Explanation: Remove all the digits from the number and it is left with nothing which is 0."}], "constraints": "Constraints:\n1 <= k <= num.length <= 10^5\nnum consists of only digits.\nnum does not have any leading zeros except for the zero itself.", "notes": ""}, "400": {"label": "Medium", "title": "Nth Digit", "tags": "algorithms,google,math", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3336, "total_accepted": 73700.0, "total_submissions": 220800.0, "testcase_example": "'3'", "body": "Given an integer n, return the n^th digit of the infinite integer sequence [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ...].", "examples": [{"full_text": "Example 1:\nInput: n = 3\nOutput: 3", "input": "Input: n = 3", "output": "Output: 3", "explanation": ""}, {"full_text": "Example 2:\nInput: n = 11\nOutput: 0\nExplanation: The 11^th digit of the sequence 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ... is a 0, which is part of the number 10.", "input": "Input: n = 11", "output": "Output: 0", "explanation": "Explanation: The 11^th digit of the sequence 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ... is a 0, which is part of the number 10."}], "constraints": "Constraints:\n1 <= n <= 2^31 - 1", "notes": ""}, "399": {"label": "Medium", "title": "Evaluate Division", "tags": "algorithms,google,graph", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5667, "total_accepted": 234100.0, "total_submissions": 413000.0, "testcase_example": "'[[\"a\",\"b\"],[\"b\",\"c\"]]\\n' +\n  '[2.0,3.0]\\n' +\n  '[[\"a\",\"c\"],[\"b\",\"a\"],[\"a\",\"e\"],[\"a\",\"a\"],[\"x\",\"x\"]]'", "body": "You are given an array of variable pairs equations and an array of real numbers values, where equations[i] = [Ai, Bi] and values[i] represent the equation Ai / Bi = values[i]. Each Ai or Bi is a string that represents a single variable.\nYou are also given some queries, where queries[j] = [Cj, Dj] represents the j^th query where you must find the answer for Cj / Dj = ?.\nReturn the answers to all queries. If a single answer cannot be determined, return -1.0.\nNote: The input is always valid. You may assume that evaluating the queries will not result in division by zero and that there is no contradiction.", "examples": [{"full_text": "Example 1:\nInput: equations = [[\"a\",\"b\"],[\"b\",\"c\"]], values = [2.0,3.0], queries = [[\"a\",\"c\"],[\"b\",\"a\"],[\"a\",\"e\"],[\"a\",\"a\"],[\"x\",\"x\"]]\nOutput: [6.00000,0.50000,-1.00000,1.00000,-1.00000]\nExplanation:\nGiven: a / b = 2.0, b / c = 3.0\nqueries are: a / c = ?, b / a = ?, a / e = ?, a / a = ?, x / x = ?\nreturn: [6.0, 0.5, -1.0, 1.0, -1.0 ]", "input": "Input: equations = [[\"a\",\"b\"],[\"b\",\"c\"]], values = [2.0,3.0], queries = [[\"a\",\"c\"],[\"b\",\"a\"],[\"a\",\"e\"],[\"a\",\"a\"],[\"x\",\"x\"]]", "output": "Output: [6.00000,0.50000,-1.00000,1.00000,-1.00000]", "explanation": "Explanation:\nGiven: a / b = 2.0, b / c = 3.0\nqueries are: a / c = ?, b / a = ?, a / e = ?, a / a = ?, x / x = ?\nreturn: [6.0, 0.5, -1.0, 1.0, -1.0 ]"}, {"full_text": "Example 2:\nInput: equations = [[\"a\",\"b\"],[\"b\",\"c\"],[\"bc\",\"cd\"]], values = [1.5,2.5,5.0], queries = [[\"a\",\"c\"],[\"c\",\"b\"],[\"bc\",\"cd\"],[\"cd\",\"bc\"]]\nOutput: [3.75000,0.40000,5.00000,0.20000]", "input": "Input: equations = [[\"a\",\"b\"],[\"b\",\"c\"],[\"bc\",\"cd\"]], values = [1.5,2.5,5.0], queries = [[\"a\",\"c\"],[\"c\",\"b\"],[\"bc\",\"cd\"],[\"cd\",\"bc\"]]", "output": "Output: [3.75000,0.40000,5.00000,0.20000]", "explanation": ""}, {"full_text": "Example 3:\nInput: equations = [[\"a\",\"b\"]], values = [0.5], queries = [[\"a\",\"b\"],[\"b\",\"a\"],[\"a\",\"c\"],[\"x\",\"y\"]]\nOutput: [0.50000,2.00000,-1.00000,-1.00000]", "input": "Input: equations = [[\"a\",\"b\"]], values = [0.5], queries = [[\"a\",\"b\"],[\"b\",\"a\"],[\"a\",\"c\"],[\"x\",\"y\"]]", "output": "Output: [0.50000,2.00000,-1.00000,-1.00000]", "explanation": ""}], "constraints": "Constraints:\n1 <= equations.length <= 20\nequations[i].length == 2\n1 <= Ai.length, Bi.length <= 5\nvalues.length == equations.length\n0.0 < values[i] <= 20.0\n1 <= queries.length <= 20\nqueries[i].length == 2\n1 <= Cj.length, Dj.length <= 5\nAi, Bi, Cj, Dj consist of lower case English letters and digits.", "notes": ""}, "398": {"label": "Medium", "title": "Random Pick Index", "tags": "algorithms,facebook,reservoir-sampling", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6295000000000001, "total_accepted": 159600.0, "total_submissions": 253600.0, "testcase_example": "'[\"Solution\",\"pick\",\"pick\",\"pick\"]\\n[[[1,2,3,3,3]],[3],[1],[3]]'", "body": "Given an integer array nums with possible duplicates, randomly output the index of a given target number. You can assume that the given target number must exist in the array.\nImplement the Solution class:\nSolution(int[] nums) Initializes the object with the array nums.\nint pick(int target) Picks a random index i from nums where nums[i] == target. If there are multiple valid i's, then each index should have an equal probability of returning.", "examples": [{"full_text": "Example 1:\nInput\n[\"Solution\", \"pick\", \"pick\", \"pick\"]\n[[[1, 2, 3, 3, 3]], [3], [1], [3]]\nOutput\n[null, 4, 0, 2]\nExplanation\nSolution solution = new Solution([1, 2, 3, 3, 3]);\nsolution.pick(3); // It should return either index 2, 3, or 4 randomly. Each index should have equal probability of returning.\nsolution.pick(1); // It should return 0. Since in the array only nums[0] is equal to 1.\nsolution.pick(3); // It should return either index 2, 3, or 4 randomly. Each index should have equal probability of returning.", "input": "Input\n[\"Solution\", \"pick\", \"pick\", \"pick\"]\n[[[1, 2, 3, 3, 3]], [3], [1], [3]]", "output": "Output\n[null, 4, 0, 2]", "explanation": "Explanation\nSolution solution = new Solution([1, 2, 3, 3, 3]);\nsolution.pick(3); // It should return either index 2, 3, or 4 randomly. Each index should have equal probability of returning.\nsolution.pick(1); // It should return 0. Since in the array only nums[0] is equal to 1.\nsolution.pick(3); // It should return either index 2, 3, or 4 randomly. Each index should have equal probability of returning."}], "constraints": "Constraints:\n1 <= nums.length <= 2 * 10^4\n-2^31 <= nums[i] <= 2^31 - 1\ntarget is an integer from nums.\nAt most 10^4 calls will be made to pick.", "notes": ""}, "397": {"label": "Medium", "title": "Integer Replacement", "tags": "algorithms,baidu,google,bit-manipulation,math", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3454, "total_accepted": 78000.0, "total_submissions": 225800.0, "testcase_example": "'8'", "body": "Given a positive integer n,\nyou can apply one of the following\noperations:\nIf n is even, replace n with n / 2.\nIf n is odd, replace n with either n + 1 or n - 1.\nReturn the minimum number of operations needed for n to become 1.", "examples": [{"full_text": "Example 1:\nInput: n = 8\nOutput: 3\nExplanation: 8 -> 4 -> 2 -> 1", "input": "Input: n = 8", "output": "Output: 3", "explanation": "Explanation: 8 -> 4 -> 2 -> 1"}, {"full_text": "Example 2:\nInput: n = 7\nOutput: 4\nExplanation: 7 -> 8 -> 4 -> 2 -> 1\nor 7 -> 6 -> 3 -> 2 -> 1", "input": "Input: n = 7", "output": "Output: 4", "explanation": "Explanation: 7 -> 8 -> 4 -> 2 -> 1\nor 7 -> 6 -> 3 -> 2 -> 1"}, {"full_text": "Example 3:\nInput: n = 4\nOutput: 2", "input": "Input: n = 4", "output": "Output: 2", "explanation": ""}], "constraints": "Constraints:\n1 <= n <= 2^31 - 1", "notes": ""}, "396": {"label": "Medium", "title": "Rotate Function", "tags": "algorithms,amazon,math", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.38799999999999996, "total_accepted": 58700.0, "total_submissions": 151400.0, "testcase_example": "'[4,3,2,6]'", "body": "You are given an integer array nums of length n.\nAssume arrk to be an array obtained by rotating nums by k positions clock-wise. We define the rotation function F on nums as follow:\nF(k) = 0 * arrk[0] + 1 * arrk[1] + ... + (n - 1) * arrk[n - 1].\nReturn the maximum value of F(0), F(1), ..., F(n-1).\nThe test cases are generated so that the answer fits in a 32-bit integer.", "examples": [{"full_text": "Example 1:\nInput: nums = [4,3,2,6]\nOutput: 26\nExplanation:\nF(0) = (0 * 4) + (1 * 3) + (2 * 2) + (3 * 6) = 0 + 3 + 4 + 18 = 25\nF(1) = (0 * 6) + (1 * 4) + (2 * 3) + (3 * 2) = 0 + 4 + 6 + 6 = 16\nF(2) = (0 * 2) + (1 * 6) + (2 * 4) + (3 * 3) = 0 + 6 + 8 + 9 = 23\nF(3) = (0 * 3) + (1 * 2) + (2 * 6) + (3 * 4) = 0 + 2 + 12 + 12 = 26\nSo the maximum value of F(0), F(1), F(2), F(3) is F(3) = 26.", "input": "Input: nums = [4,3,2,6]", "output": "Output: 26", "explanation": "Explanation:\nF(0) = (0 * 4) + (1 * 3) + (2 * 2) + (3 * 6) = 0 + 3 + 4 + 18 = 25\nF(1) = (0 * 6) + (1 * 4) + (2 * 3) + (3 * 2) = 0 + 4 + 6 + 6 = 16\nF(2) = (0 * 2) + (1 * 6) + (2 * 4) + (3 * 3) = 0 + 6 + 8 + 9 = 23\nF(3) = (0 * 3) + (1 * 2) + (2 * 6) + (3 * 4) = 0 + 2 + 12 + 12 = 26\nSo the maximum value of F(0), F(1), F(2), F(3) is F(3) = 26."}, {"full_text": "Example 2:\nInput: nums = [100]\nOutput: 0", "input": "Input: nums = [100]", "output": "Output: 0", "explanation": ""}], "constraints": "Constraints:\nn == nums.length\n1 <= n <= 10^5\n-100 <= nums[i] <= 100", "notes": ""}, "395": {"label": "Medium", "title": "Longest Substring with At Least K Repeating Characters", "tags": "algorithms,baidu", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4445, "total_accepted": 148500.0, "total_submissions": 334100.0, "testcase_example": "'\"aaabb\"\\n3'", "body": "Given a string s and an integer k, return the length of the longest substring of s such that the frequency of each character in this substring is greater than or equal to k.", "examples": [{"full_text": "Example 1:\nInput: s = \"aaabb\", k = 3\nOutput: 3\nExplanation: The longest substring is \"aaa\", as 'a' is repeated 3 times.", "input": "Input: s = \"aaabb\", k = 3", "output": "Output: 3", "explanation": "Explanation: The longest substring is \"aaa\", as 'a' is repeated 3 times."}, {"full_text": "Example 2:\nInput: s = \"ababbc\", k = 2\nOutput: 5\nExplanation: The longest substring is \"ababb\", as 'a' is repeated 2 times and 'b' is repeated 3 times.", "input": "Input: s = \"ababbc\", k = 2", "output": "Output: 5", "explanation": "Explanation: The longest substring is \"ababb\", as 'a' is repeated 2 times and 'b' is repeated 3 times."}], "constraints": "Constraints:\n1 <= s.length <= 10^4\ns consists of only lowercase English letters.\n1 <= k <= 10^5", "notes": ""}, "394": {"label": "Medium", "title": "Decode String", "tags": "algorithms,google,yelp,depth-first-search,stack", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5589999999999999, "total_accepted": 452900.0, "total_submissions": 810100.0, "testcase_example": "'\"3[a]2[bc]\"'", "body": "Given an encoded string, return its decoded string.\nThe encoding rule is: k[encoded_string], where the encoded_string inside the square brackets is being repeated exactly k times. Note that k is guaranteed to be a positive integer.\nYou may assume that the input string is always valid; there are no extra white spaces, square brackets are well-formed, etc.\nFurthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, k. For example, there will not be input like 3a or 2[4].", "examples": [{"full_text": "Example 1:\nInput: s = \"3[a]2[bc]\"\nOutput: \"aaabcbc\"", "input": "Input: s = \"3[a]2[bc]\"", "output": "Output: \"aaabcbc\"", "explanation": ""}, {"full_text": "Example 2:\nInput: s = \"3[a2[c]]\"\nOutput: \"accaccacc\"", "input": "Input: s = \"3[a2[c]]\"", "output": "Output: \"accaccacc\"", "explanation": ""}, {"full_text": "Example 3:\nInput: s = \"2[abc]3[cd]ef\"\nOutput: \"abcabccdcdcdef\"", "input": "Input: s = \"2[abc]3[cd]ef\"", "output": "Output: \"abcabccdcdcdef\"", "explanation": ""}], "constraints": "Constraints:\n1 <= s.length <= 30\ns consists of lowercase English letters, digits, and square brackets '[]'.\ns is guaranteed to be a valid input.\nAll the integers in s are in the range [1, 300].", "notes": ""}, "393": {"label": "Medium", "title": "UTF-8 Validation", "tags": "algorithms,google,bit-manipulation", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.391, "total_accepted": 65900.0, "total_submissions": 168600.0, "testcase_example": "'[197,130,1]'", "body": "Given an integer array data representing the data, return whether it is a valid UTF-8 encoding.\nA character in UTF8 can be from 1 to 4 bytes long, subjected to the following rules:\nFor a 1-byte character, the first bit is a 0, followed by its Unicode code.\nFor an n-bytes character, the first n bits are all one's, the n + 1 bit is 0, followed by n - 1 bytes with the most significant 2 bits being 10.\nThis is how the UTF-8 encoding would work:\nChar. number range | UTF-8 octet sequence\n(hexadecimal) | (binary)\n--------------------+---------------------------------------------\n0000 0000-0000 007F | 0xxxxxxx\n0000 0080-0000 07FF | 110xxxxx 10xxxxxx\n0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx\n0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\nNote: The input is an array of integers. Only the least significant 8 bits of each integer is used to store the data. This means each integer represents only 1 byte of data.", "examples": [{"full_text": "Example 1:\nInput: data = [197,130,1]\nOutput: true\nExplanation: data represents the octet sequence: 11000101 10000010 00000001.\nIt is a valid utf-8 encoding for a 2-bytes character followed by a 1-byte character.", "input": "Input: data = [197,130,1]", "output": "Output: true", "explanation": "Explanation: data represents the octet sequence: 11000101 10000010 00000001.\nIt is a valid utf-8 encoding for a 2-bytes character followed by a 1-byte character."}, {"full_text": "Example 2:\nInput: data = [235,140,4]\nOutput: false\nExplanation: data represented the octet sequence: 11101011 10001100 00000100.\nThe first 3 bits are all one's and the 4th bit is 0 means it is a 3-bytes character.\nThe next byte is a continuation byte which starts with 10 and that's correct.\nBut the second continuation byte does not start with 10, so it is invalid.", "input": "Input: data = [235,140,4]", "output": "Output: false", "explanation": "Explanation: data represented the octet sequence: 11101011 10001100 00000100.\nThe first 3 bits are all one's and the 4th bit is 0 means it is a 3-bytes character.\nThe next byte is a continuation byte which starts with 10 and that's correct.\nBut the second continuation byte does not start with 10, so it is invalid."}], "constraints": "Constraints:\n1 <= data.length <= 2 * 10^4\n0 <= data[i] <= 255", "notes": ""}, "390": {"label": "Medium", "title": "Elimination Game", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.46240000000000003, "total_accepted": 43900.0, "total_submissions": 94800.0, "testcase_example": "'9'", "body": "You have a list arr of all integers in the range [1, n] sorted in a strictly increasing order. Apply the following algorithm on arr:\nStarting from left to right, remove the first number and every other number afterward until you reach the end of the list.\nRepeat the previous step again, but this time from right to left, remove the rightmost number and every other number from the remaining numbers.\nKeep repeating the steps again, alternating left to right and right to left, until a single number remains.\nGiven the integer n, return the last number that remains in arr.", "examples": [{"full_text": "Example 1:\nInput: n = 9\nOutput: 6\nExplanation:\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\narr = [2, 4, 6, 8]\narr = [2, 6]\narr = [6]", "input": "Input: n = 9", "output": "Output: 6", "explanation": "Explanation:\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\narr = [2, 4, 6, 8]\narr = [2, 6]\narr = [6]"}, {"full_text": "Example 2:\nInput: n = 1\nOutput: 1", "input": "Input: n = 1", "output": "Output: 1", "explanation": ""}], "constraints": "Constraints:\n1 <= n <= 10^9", "notes": ""}, "388": {"label": "Medium", "title": "Longest Absolute File Path", "tags": "algorithms,google", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4559, "total_accepted": 124000.0, "total_submissions": 272000.0, "testcase_example": "'\"dir\\\\n\\\\tsubdir1\\\\n\\\\tsubdir2\\\\n\\\\t\\\\tfile.ext\"'", "body": "Suppose we have a file system that stores both files and directories. An example of one system is represented in the following picture:\nHere, we have dir as the only directory in the root. dir contains two subdirectories, subdir1 and subdir2. subdir1 contains a file file1.ext and subdirectory subsubdir1. subdir2 contains a subdirectory subsubdir2, which contains a file file2.ext.\nIn text form, it looks like this (with \u27f6 representing the tab character):\ndir\n\u27f6 subdir1\n\u27f6 \u27f6 file1.ext\n\u27f6 \u27f6 subsubdir1\n\u27f6 subdir2\n\u27f6 \u27f6 subsubdir2\n\u27f6 \u27f6 \u27f6 file2.ext\nIf we were to write this representation in code, it will look like this: \"dir\\n\\tsubdir1\\n\\t\\tfile1.ext\\n\\t\\tsubsubdir1\\n\\tsubdir2\\n\\t\\tsubsubdir2\\n\\t\\t\\tfile2.ext\". Note that the '\\n' and '\\t' are the new-line and tab characters.\nEvery file and directory has a unique absolute path in the file system, which is the order of directories that must be opened to reach the file/directory itself, all concatenated by '/'s. Using the above example, the absolute path to file2.ext is \"dir/subdir2/subsubdir2/file2.ext\". Each directory name consists of letters, digits, and/or spaces. Each file name is of the form name.extension, where name and extension consist of letters, digits, and/or spaces.\nGiven a string input representing the file system in the explained format, return the length of the longest absolute path to a file in the abstracted file system. If there is no file in the system, return 0.", "examples": [{"full_text": "Example 1:\nInput: input = \"dir\\n\\tsubdir1\\n\\tsubdir2\\n\\t\\tfile.ext\"\nOutput: 20\nExplanation: We have only one file, and the absolute path is \"dir/subdir2/file.ext\" of length 20.", "input": "Input: input = \"dir\\n\\tsubdir1\\n\\tsubdir2\\n\\t\\tfile.ext\"", "output": "Output: 20", "explanation": "Explanation: We have only one file, and the absolute path is \"dir/subdir2/file.ext\" of length 20."}, {"full_text": "Example 2:\nInput: input = \"dir\\n\\tsubdir1\\n\\t\\tfile1.ext\\n\\t\\tsubsubdir1\\n\\tsubdir2\\n\\t\\tsubsubdir2\\n\\t\\t\\tfile2.ext\"\nOutput: 32\nExplanation: We have two files:\n\"dir/subdir1/file1.ext\" of length 21\n\"dir/subdir2/subsubdir2/file2.ext\" of length 32.\nWe return 32 since it is the longest absolute path to a file.", "input": "Input: input = \"dir\\n\\tsubdir1\\n\\t\\tfile1.ext\\n\\t\\tsubsubdir1\\n\\tsubdir2\\n\\t\\tsubsubdir2\\n\\t\\t\\tfile2.ext\"", "output": "Output: 32", "explanation": "Explanation: We have two files:\n\"dir/subdir1/file1.ext\" of length 21\n\"dir/subdir2/subsubdir2/file2.ext\" of length 32.\nWe return 32 since it is the longest absolute path to a file."}, {"full_text": "Example 3:\nInput: input = \"a\"\nOutput: 0\nExplanation: We do not have any files, just a single directory named \"a\".", "input": "Input: input = \"a\"", "output": "Output: 0", "explanation": "Explanation: We do not have any files, just a single directory named \"a\"."}], "constraints": "Constraints:\n1 <= input.length <= 10^4\ninput may contain lowercase or uppercase English letters, a new line character '\\n', a tab character '\\t', a dot '.', a space ' ', and digits.", "notes": ""}, "386": {"label": "Medium", "title": "Lexicographical Numbers", "tags": "algorithms,bloomberg", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5819, "total_accepted": 79500.0, "total_submissions": 136600.0, "testcase_example": "'13'", "body": "Given an integer n, return all the numbers in the range [1, n] sorted in lexicographical order.\nYou must write an algorithm that runs in\nO(n)\ntime and uses O(1) extra space.", "examples": [{"full_text": "Example 1:\nInput: n = 13\nOutput: [1,10,11,12,13,2,3,4,5,6,7,8,9]", "input": "Input: n = 13", "output": "Output: [1,10,11,12,13,2,3,4,5,6,7,8,9]", "explanation": ""}, {"full_text": "Example 2:\nInput: n = 2\nOutput: [1,2]", "input": "Input: n = 2", "output": "Output: [1,2]", "explanation": ""}], "constraints": "Constraints:\n1 <= n <= 5 * 10^4", "notes": ""}, "385": {"label": "Medium", "title": "Mini Parser", "tags": "algorithms,airbnb,stack,string", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3566, "total_accepted": 46900.0, "total_submissions": 131500.0, "testcase_example": "'\"324\"'", "body": "Given a string s represents the serialization of a nested list, implement a parser to deserialize it and return the deserialized NestedInteger.\nEach element is either an integer or a list whose elements may also be integers or other lists.", "examples": [{"full_text": "Example 1:\nInput: s = \"324\"\nOutput: 324\nExplanation: You should return a NestedInteger object which contains a single integer 324.", "input": "Input: s = \"324\"", "output": "Output: 324", "explanation": "Explanation: You should return a NestedInteger object which contains a single integer 324."}, {"full_text": "Example 2:\nInput: s = \"[123,[456,[789]]]\"\nOutput: [123,[456,[789]]]\nExplanation: Return a NestedInteger object containing a nested list with 2 elements:\n1. An integer containing value 123.\n2. A nested list containing two elements:\ni. An integer containing value 456.\nii. A nested list with one element:\na. An integer containing value 789", "input": "Input: s = \"[123,[456,[789]]]\"", "output": "Output: [123,[456,[789]]]", "explanation": "Explanation: Return a NestedInteger object containing a nested list with 2 elements:\n1. An integer containing value 123.\n2. A nested list containing two elements:\ni. An integer containing value 456.\nii. A nested list with one element:\na. An integer containing value 789"}], "constraints": "Constraints:\n1 <= s.length <= 5 * 10^4\ns consists of digits, square brackets \"[]\", negative sign '-', and commas ','.\ns is the serialization of valid NestedInteger.\nAll the values in the input are in the range [-10^6, 10^6].", "notes": ""}, "384": {"label": "Medium", "title": "Shuffle an Array", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5672999999999999, "total_accepted": 247100.0, "total_submissions": 435500.0, "testcase_example": "'[\"Solution\",\"shuffle\",\"reset\",\"shuffle\"]\\n[[[1,2,3]],[],[],[]]'", "body": "Given an integer array nums, design an algorithm to randomly shuffle the array. All permutations of the array should be equally likely as a result of the shuffling.\nImplement the Solution class:\nSolution(int[] nums) Initializes the object with the integer array nums.\nint[] reset() Resets the array to its original configuration and returns it.\nint[] shuffle() Returns a random shuffling of the array.", "examples": [{"full_text": "Example 1:\nInput\n[\"Solution\", \"shuffle\", \"reset\", \"shuffle\"]\n[[[1, 2, 3]], [], [], []]\nOutput\n[null, [3, 1, 2], [1, 2, 3], [1, 3, 2]]\nExplanation\nSolution solution = new Solution([1, 2, 3]);\nsolution.shuffle(); // Shuffle the array [1,2,3] and return its result.\n// Any permutation of [1,2,3] must be equally likely to be returned.\n// Example: return [3, 1, 2]\nsolution.reset(); // Resets the array back to its original configuration [1,2,3]. Return [1, 2, 3]\nsolution.shuffle(); // Returns the random shuffling of array [1,2,3]. Example: return [1, 3, 2]", "input": "Input\n[\"Solution\", \"shuffle\", \"reset\", \"shuffle\"]\n[[[1, 2, 3]], [], [], []]", "output": "Output\n[null, [3, 1, 2], [1, 2, 3], [1, 3, 2]]", "explanation": "Explanation\nSolution solution = new Solution([1, 2, 3]);\nsolution.shuffle(); // Shuffle the array [1,2,3] and return its result.\n// Any permutation of [1,2,3] must be equally likely to be returned.\n// Example: return [3, 1, 2]\nsolution.reset(); // Resets the array back to its original configuration [1,2,3]. Return [1, 2, 3]\nsolution.shuffle(); // Returns the random shuffling of array [1,2,3]. Example: return [1, 3, 2]"}], "constraints": "Constraints:\n1 <= nums.length <= 200\n-10^6 <= nums[i] <= 10^6\nAll the elements of nums are unique.\nAt most 5 * 10^4 calls in total will be made to reset and shuffle.", "notes": ""}, "382": {"label": "Medium", "title": "Linked List Random Node", "tags": "algorithms,google,reservoir-sampling", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5876, "total_accepted": 147600.0, "total_submissions": 251200.0, "testcase_example": "'[\"Solution\",\"getRandom\",\"getRandom\",\"getRandom\",\"getRandom\",\"getRandom\"]\\n' +\n  '[[[1,2,3]],[],[],[],[],[]]'", "body": "Given a singly linked list, return a random node's value from the linked list. Each node must have the same probability of being chosen.\nImplement the Solution class:\nSolution(ListNode head) Initializes the object with the head of the singly-linked list head.\nint getRandom() Chooses a node randomly from the list and returns its value. All the nodes of the list should be equally likely to be chosen.", "examples": [{"full_text": "Example 1:\nInput\n[\"Solution\", \"getRandom\", \"getRandom\", \"getRandom\", \"getRandom\", \"getRandom\"]\n[[[1, 2, 3]], [], [], [], [], []]\nOutput\n[null, 1, 3, 2, 2, 3]\nExplanation\nSolution solution = new Solution([1, 2, 3]);\nsolution.getRandom(); // return 1\nsolution.getRandom(); // return 3\nsolution.getRandom(); // return 2\nsolution.getRandom(); // return 2\nsolution.getRandom(); // return 3\n// getRandom() should return either 1, 2, or 3 randomly. Each element should have equal probability of returning.", "input": "Input\n[\"Solution\", \"getRandom\", \"getRandom\", \"getRandom\", \"getRandom\", \"getRandom\"]\n[[[1, 2, 3]], [], [], [], [], []]", "output": "Output\n[null, 1, 3, 2, 2, 3]", "explanation": "Explanation\nSolution solution = new Solution([1, 2, 3]);\nsolution.getRandom(); // return 1\nsolution.getRandom(); // return 3\nsolution.getRandom(); // return 2\nsolution.getRandom(); // return 2\nsolution.getRandom(); // return 3\n// getRandom() should return either 1, 2, or 3 randomly. Each element should have equal probability of returning."}], "constraints": "Constraints:\nThe number of nodes in the linked list will be in the range [1, 10^4].\n-10^4 <= Node.val <= 10^4\nAt most 10^4 calls will be made to getRandom.\nFollow up:\nWhat if the linked list is extremely large and its length is unknown to you?\nCould you solve this efficiently without using extra space?", "notes": ""}, "380": {"label": "Medium", "title": "Insert Delete GetRandom O(1)", "tags": "algorithms,amazon,facebook,google,pocketgems,twitter,uber,yelp,array,design,hash-table", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5106, "total_accepted": 446800.0, "total_submissions": 875000.0, "testcase_example": "'[\"RandomizedSet\",\"insert\",\"remove\",\"insert\",\"getRandom\",\"remove\",\"insert\",\"getRandom\"]\\n' +\n  '[[],[1],[2],[2],[],[1],[2],[]]'", "body": "Implement the RandomizedSet class:\nRandomizedSet() Initializes the RandomizedSet object.\nbool insert(int val) Inserts an item val into the set if not present. Returns true if the item was not present, false otherwise.\nbool remove(int val) Removes an item val from the set if present. Returns true if the item was present, false otherwise.\nint getRandom() Returns a random element from the current set of elements (it's guaranteed that at least one element exists when this method is called). Each element must have the same probability of being returned.\nYou must implement the functions of the class such that each function works in\naverage\nO(1)\ntime complexity.", "examples": [{"full_text": "Example 1:\nInput\n[\"RandomizedSet\", \"insert\", \"remove\", \"insert\", \"getRandom\", \"remove\", \"insert\", \"getRandom\"]\n[[], [1], [2], [2], [], [1], [2], []]\nOutput\n[null, true, false, true, 2, true, false, 2]\nExplanation\nRandomizedSet randomizedSet = new RandomizedSet();\nrandomizedSet.insert(1); // Inserts 1 to the set. Returns true as 1 was inserted successfully.\nrandomizedSet.remove(2); // Returns false as 2 does not exist in the set.\nrandomizedSet.insert(2); // Inserts 2 to the set, returns true. Set now contains [1,2].\nrandomizedSet.getRandom(); // getRandom() should return either 1 or 2 randomly.\nrandomizedSet.remove(1); // Removes 1 from the set, returns true. Set now contains [2].\nrandomizedSet.insert(2); // 2 was already in the set, so return false.\nrandomizedSet.getRandom(); // Since 2 is the only number in the set, getRandom() will always return 2.", "input": "Input\n[\"RandomizedSet\", \"insert\", \"remove\", \"insert\", \"getRandom\", \"remove\", \"insert\", \"getRandom\"]\n[[], [1], [2], [2], [], [1], [2], []]", "output": "Output\n[null, true, false, true, 2, true, false, 2]", "explanation": "Explanation\nRandomizedSet randomizedSet = new RandomizedSet();\nrandomizedSet.insert(1); // Inserts 1 to the set. Returns true as 1 was inserted successfully.\nrandomizedSet.remove(2); // Returns false as 2 does not exist in the set.\nrandomizedSet.insert(2); // Inserts 2 to the set, returns true. Set now contains [1,2].\nrandomizedSet.getRandom(); // getRandom() should return either 1 or 2 randomly.\nrandomizedSet.remove(1); // Removes 1 from the set, returns true. Set now contains [2].\nrandomizedSet.insert(2); // 2 was already in the set, so return false.\nrandomizedSet.getRandom(); // Since 2 is the only number in the set, getRandom() will always return 2."}], "constraints": "Constraints:\n-2^31 <= val <= 2^31 - 1\nAt most 2 *\n10^5 calls will be made to insert, remove, and getRandom.\nThere will be at least one element in the data structure when getRandom is called.", "notes": ""}, "378": {"label": "Medium", "title": "Kth Smallest Element in a Sorted Matrix", "tags": "algorithms,google,twitter,binary-search,heap", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5920000000000001, "total_accepted": 358600.0, "total_submissions": 605700.0, "testcase_example": "'[[1,5,9],[10,11,13],[12,13,15]]\\n8'", "body": "Given an n x n matrix where each of the rows and columns is sorted in ascending order, return the k^th smallest element in the matrix.\nNote that it is the k^th smallest element in the sorted order, not the k^th distinct element.\nYou must find a solution with a memory complexity better than O(n^2).", "examples": [{"full_text": "Example 1:\nInput: matrix = [[1,5,9],[10,11,13],[12,13,15]], k = 8\nOutput: 13\nExplanation: The elements in the matrix are [1,5,9,10,11,12,13,13,15], and the 8^th smallest number is 13", "input": "Input: matrix = [[1,5,9],[10,11,13],[12,13,15]], k = 8", "output": "Output: 13", "explanation": "Explanation: The elements in the matrix are [1,5,9,10,11,12,13,13,15], and the 8^th smallest number is 13"}, {"full_text": "Example 2:\nInput: matrix = [[-5]], k = 1\nOutput: -5", "input": "Input: matrix = [[-5]], k = 1", "output": "Output: -5", "explanation": ""}], "constraints": "Constraints:\nn == matrix.length == matrix[i].length\n1 <= n <= 300\n-10^9 <= matrix[i][j] <= 10^9\nAll the rows and columns of matrix are guaranteed to be sorted in non-decreasing order.\n1 <= k <= n^2\nFollow up:\nCould you solve the problem with a constant memory (i.e., O(1) memory complexity)?\nCould you solve the problem in O(n) time complexity? The solution may be too advanced for an interview but you may find reading this paper fun.", "notes": ""}, "377": {"label": "Medium", "title": "Combination Sum IV", "tags": "algorithms,facebook,google,snapchat,dynamic-programming", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.48869999999999997, "total_accepted": 224800.0, "total_submissions": 460000.0, "testcase_example": "'[1,2,3]\\n4'", "body": "Given an array of distinct integers nums and a target integer target, return the number of possible combinations that add up to\ntarget.\nThe test cases are generated so that the answer can fit in a 32-bit integer.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,2,3], target = 4\nOutput: 7\nExplanation:\nThe possible combination ways are:\n(1, 1, 1, 1)\n(1, 1, 2)\n(1, 2, 1)\n(1, 3)\n(2, 1, 1)\n(2, 2)\n(3, 1)\nNote that different sequences are counted as different combinations.", "input": "Input: nums = [1,2,3], target = 4", "output": "Output: 7", "explanation": "Explanation:\nThe possible combination ways are:\n(1, 1, 1, 1)\n(1, 1, 2)\n(1, 2, 1)\n(1, 3)\n(2, 1, 1)\n(2, 2)\n(3, 1)\nNote that different sequences are counted as different combinations."}, {"full_text": "Example 2:\nInput: nums = [9], target = 3\nOutput: 0", "input": "Input: nums = [9], target = 3", "output": "Output: 0", "explanation": ""}], "constraints": "Constraints:\n1 <= nums.length <= 200\n1 <= nums[i] <= 1000\nAll the elements of nums are unique.\n1 <= target <= 1000\nFollow up: What if negative numbers are allowed in the given array? How does it change the problem? What limitation we need to add to the question to allow negative numbers?", "notes": ""}, "376": {"label": "Medium", "title": "Wiggle Subsequence", "tags": "algorithms,dynamic-programming,greedy", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4446, "total_accepted": 129900.0, "total_submissions": 292200.0, "testcase_example": "'[1,7,4,9,2,5]'", "body": "A wiggle sequence is a sequence where the differences between successive numbers strictly alternate between positive and negative. The first difference (if one exists) may be either positive or negative. A sequence with one element and a sequence with two non-equal elements are trivially wiggle sequences.\nFor example, [1, 7, 4, 9, 2, 5] is a wiggle sequence because the differences (6, -3, 5, -7, 3) alternate between positive and negative.\nIn contrast, [1, 4, 7, 2, 5] and [1, 7, 4, 5, 5] are not wiggle sequences. The first is not because its first two differences are positive, and the second is not because its last difference is zero.\nA subsequence is obtained by deleting some elements (possibly zero) from the original sequence, leaving the remaining elements in their original order.\nGiven an integer array nums, return the length of the longest wiggle subsequence of nums.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,7,4,9,2,5]\nOutput: 6\nExplanation: The entire sequence is a wiggle sequence with differences (6, -3, 5, -7, 3).", "input": "Input: nums = [1,7,4,9,2,5]", "output": "Output: 6", "explanation": "Explanation: The entire sequence is a wiggle sequence with differences (6, -3, 5, -7, 3)."}, {"full_text": "Example 2:\nInput: nums = [1,17,5,10,13,15,10,5,16,8]\nOutput: 7\nExplanation: There are several subsequences that achieve this length.\nOne is [1, 17, 10, 13, 10, 16, 8] with differences (16, -7, 3, -3, 6, -8).", "input": "Input: nums = [1,17,5,10,13,15,10,5,16,8]", "output": "Output: 7", "explanation": "Explanation: There are several subsequences that achieve this length.\nOne is [1, 17, 10, 13, 10, 16, 8] with differences (16, -7, 3, -3, 6, -8)."}, {"full_text": "Example 3:\nInput: nums = [1,2,3,4,5,6,7,8,9]\nOutput: 2", "input": "Input: nums = [1,2,3,4,5,6,7,8,9]", "output": "Output: 2", "explanation": ""}], "constraints": "Constraints:\n1 <= nums.length <= 1000\n0 <= nums[i] <= 1000\nFollow up: Could you solve this in O(n) time?", "notes": ""}, "375": {"label": "Medium", "title": "Guess Number Higher or Lower II", "tags": "algorithms,google,dynamic-programming", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4509, "total_accepted": 90200.0, "total_submissions": 200100.0, "testcase_example": "'10'", "body": "We are playing the Guessing Game. The game will work as follows:\nI pick a number between\n1\nand\nn.\nYou guess a number.\nIf you guess the right number, you win the game.\nIf you guess the wrong number, then I will tell you whether the number I picked is higher or lower, and you will continue guessing.\nEvery time you guess a wrong number\nx, you will pay\nx\ndollars. If you run out of money, you lose the game.\nGiven a particular\nn, return\nthe minimum amount of money you need to\nguarantee a win regardless of what number I pick.", "examples": [{"full_text": "Example 1:\nInput: n = 10\nOutput: 16\nExplanation: The winning strategy is as follows:\n- The range is [1,10]. Guess 7.\n- If this is my number, your total is $0. Otherwise, you pay $7.\n- If my number is higher, the range is [8,10]. Guess 9.\n- If this is my number, your total is $7. Otherwise, you pay $9.\n- If my number is higher, it must be 10. Guess 10. Your total is $7 + $9 = $16.\n- If my number is lower, it must be 8. Guess 8. Your total is $7 + $9 = $16.\n- If my number is lower, the range is [1,6]. Guess 3.\n- If this is my number, your total is $7. Otherwise, you pay $3.\n- If my number is higher, the range is [4,6]. Guess 5.\n- If this is my number, your total is $7 + $3 = $10. Otherwise, you pay $5.\n- If my number is higher, it must be 6. Guess 6. Your total is $7 + $3 + $5 = $15.\n- If my number is lower, it must be 4. Guess 4. Your total is $7 + $3 + $5 = $15.\n- If my number is lower, the range is [1,2]. Guess 1.\n- If this is my number, your total is $7 + $3 = $10. Otherwise, you pay $1.\n- If my number is higher, it must be 2. Guess 2. Your total is $7 + $3 + $1 = $11.\nThe worst case in all these scenarios is that you pay $16. Hence, you only need $16 to guarantee a win.", "input": "Input: n = 10", "output": "Output: 16", "explanation": "Explanation: The winning strategy is as follows:\n- The range is [1,10]. Guess 7.\n- If this is my number, your total is $0. Otherwise, you pay $7.\n- If my number is higher, the range is [8,10]. Guess 9.\n- If this is my number, your total is $7. Otherwise, you pay $9.\n- If my number is higher, it must be 10. Guess 10. Your total is $7 + $9 = $16.\n- If my number is lower, it must be 8. Guess 8. Your total is $7 + $9 = $16.\n- If my number is lower, the range is [1,6]. Guess 3.\n- If this is my number, your total is $7. Otherwise, you pay $3.\n- If my number is higher, the range is [4,6]. Guess 5.\n- If this is my number, your total is $7 + $3 = $10. Otherwise, you pay $5.\n- If my number is higher, it must be 6. Guess 6. Your total is $7 + $3 + $5 = $15.\n- If my number is lower, it must be 4. Guess 4. Your total is $7 + $3 + $5 = $15.\n- If my number is lower, the range is [1,2]. Guess 1.\n- If this is my number, your total is $7 + $3 = $10. Otherwise, you pay $1.\n- If my number is higher, it must be 2. Guess 2. Your total is $7 + $3 + $1 = $11.\nThe worst case in all these scenarios is that you pay $16. Hence, you only need $16 to guarantee a win."}, {"full_text": "Example 2:\nInput: n = 1\nOutput: 0\nExplanation:\nThere is only one possible number, so you can guess 1 and not have to pay anything.", "input": "Input: n = 1", "output": "Output: 0", "explanation": "Explanation:\nThere is only one possible number, so you can guess 1 and not have to pay anything."}, {"full_text": "Example 3:\nInput: n = 2\nOutput: 1\nExplanation:\nThere are two possible numbers, 1 and 2.\n- Guess 1.\n- If this is my number, your total is $0. Otherwise, you pay $1.\n- If my number is higher, it must be 2. Guess 2. Your total is $1.\nThe worst case is that you pay $1.", "input": "Input: n = 2", "output": "Output: 1", "explanation": "Explanation:\nThere are two possible numbers, 1 and 2.\n- Guess 1.\n- If this is my number, your total is $0. Otherwise, you pay $1.\n- If my number is higher, it must be 2. Guess 2. Your total is $1.\nThe worst case is that you pay $1."}], "constraints": "Constraints:\n1 <= n <= 200", "notes": ""}, "373": {"label": "Medium", "title": "Find K Pairs with Smallest Sums", "tags": "algorithms,google,uber,heap", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.38909999999999995, "total_accepted": 160500.0, "total_submissions": 412500.0, "testcase_example": "'[1,7,11]\\n[2,4,6]\\n3'", "body": "You are given two integer arrays nums1 and nums2 sorted in ascending order and an integer k.\nDefine a pair (u, v) which consists of one element from the first array and one element from the second array.\nReturn the k pairs (u1, v1), (u2, v2), ..., (uk, vk) with the smallest sums.", "examples": [{"full_text": "Example 1:\nInput: nums1 = [1,7,11], nums2 = [2,4,6], k = 3\nOutput: [[1,2],[1,4],[1,6]]\nExplanation: The first 3 pairs are returned from the sequence: [1,2],[1,4],[1,6],[7,2],[7,4],[11,2],[7,6],[11,4],[11,6]", "input": "Input: nums1 = [1,7,11], nums2 = [2,4,6], k = 3", "output": "Output: [[1,2],[1,4],[1,6]]", "explanation": "Explanation: The first 3 pairs are returned from the sequence: [1,2],[1,4],[1,6],[7,2],[7,4],[11,2],[7,6],[11,4],[11,6]"}, {"full_text": "Example 2:\nInput: nums1 = [1,1,2], nums2 = [1,2,3], k = 2\nOutput: [[1,1],[1,1]]\nExplanation: The first 2 pairs are returned from the sequence: [1,1],[1,1],[1,2],[2,1],[1,2],[2,2],[1,3],[1,3],[2,3]", "input": "Input: nums1 = [1,1,2], nums2 = [1,2,3], k = 2", "output": "Output: [[1,1],[1,1]]", "explanation": "Explanation: The first 2 pairs are returned from the sequence: [1,1],[1,1],[1,2],[2,1],[1,2],[2,2],[1,3],[1,3],[2,3]"}, {"full_text": "Example 3:\nInput: nums1 = [1,2], nums2 = [3], k = 3\nOutput: [[1,3],[2,3]]\nExplanation: All possible pairs are returned from the sequence: [1,3],[2,3]", "input": "Input: nums1 = [1,2], nums2 = [3], k = 3", "output": "Output: [[1,3],[2,3]]", "explanation": "Explanation: All possible pairs are returned from the sequence: [1,3],[2,3]"}], "constraints": "Constraints:\n1 <= nums1.length, nums2.length <= 10^5\n-10^9 <= nums1[i], nums2[i] <= 10^9\nnums1 and nums2 both are sorted in ascending order.\n1 <= k <= 10^4", "notes": ""}, "372": {"label": "Medium", "title": "Super Pow", "tags": "algorithms,math", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3764, "total_accepted": 47000.0, "total_submissions": 125000.0, "testcase_example": "'2\\n[3]'", "body": "Your task is to calculate a^b mod 1337 where a is a positive integer and b is an extremely large positive integer given in the form of an array.", "examples": [{"full_text": "Example 1:\nInput: a = 2, b = [3]\nOutput: 8", "input": "Input: a = 2, b = [3]", "output": "Output: 8", "explanation": ""}, {"full_text": "Example 2:\nInput: a = 2, b = [1,0]\nOutput: 1024", "input": "Input: a = 2, b = [1,0]", "output": "Output: 1024", "explanation": ""}, {"full_text": "Example 3:\nInput: a = 1, b = [4,3,3,8,5,2]\nOutput: 1", "input": "Input: a = 1, b = [4,3,3,8,5,2]", "output": "Output: 1", "explanation": ""}], "constraints": "Constraints:\n1 <= a <= 2^31 - 1\n1 <= b.length <= 2000\n0 <= b[i] <= 9\nb does not contain leading zeros.", "notes": ""}, "371": {"label": "Medium", "title": "Sum of Two Integers", "tags": "algorithms,bit-manipulation", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5065, "total_accepted": 277600.0, "total_submissions": 548100.0, "testcase_example": "'1\\n2'", "body": "Given two integers a and b, return the sum of the two integers without using the operators + and -.", "examples": [{"full_text": "Example 1:\nInput: a = 1, b = 2\nOutput: 3", "input": "Input: a = 1, b = 2", "output": "Output: 3", "explanation": ""}, {"full_text": "Example 2:\nInput: a = 2, b = 3\nOutput: 5", "input": "Input: a = 2, b = 3", "output": "Output: 5", "explanation": ""}], "constraints": "Constraints:\n-1000 <= a, b <= 1000", "notes": ""}, "368": {"label": "Medium", "title": "Largest Divisible Subset", "tags": "algorithms,google,dynamic-programming,math", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4039, "total_accepted": 145600.0, "total_submissions": 360600.0, "testcase_example": "'[1,2,3]'", "body": "Given a set of distinct positive integers nums, return the largest subset answer such that every pair (answer[i], answer[j]) of elements in this subset satisfies:\nanswer[i] % answer[j] == 0, or\nanswer[j] % answer[i] == 0\nIf there are multiple solutions, return any of them.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,2,3]\nOutput: [1,2]\nExplanation: [1,3] is also accepted.", "input": "Input: nums = [1,2,3]", "output": "Output: [1,2]", "explanation": "Explanation: [1,3] is also accepted."}, {"full_text": "Example 2:\nInput: nums = [1,2,4,8]\nOutput: [1,2,4,8]", "input": "Input: nums = [1,2,4,8]", "output": "Output: [1,2,4,8]", "explanation": ""}], "constraints": "Constraints:\n1 <= nums.length <= 1000\n1 <= nums[i] <= 2 * 10^9\nAll the integers in nums are unique.", "notes": ""}, "365": {"label": "Medium", "title": "Water and Jug Problem", "tags": "algorithms,microsoft,math", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.33630000000000004, "total_accepted": 58000.0, "total_submissions": 172400.0, "testcase_example": "'3\\n5\\n4'", "body": "You are given two jugs with capacities jug1Capacity and jug2Capacity liters. There is an infinite amount of water supply available. Determine whether it is possible to measure exactly targetCapacity liters using these two jugs.\nIf targetCapacity liters of water are measurable, you must have targetCapacity liters of water contained within one or both buckets by the end.\nOperations allowed:\nFill any of the jugs with water.\nEmpty any of the jugs.\nPour water from one jug into another till the other jug is completely full, or the first jug itself is empty.", "examples": [{"full_text": "Example 1:\nInput: jug1Capacity = 3, jug2Capacity = 5, targetCapacity = 4\nOutput: true\nExplanation: The famous Die Hard example", "input": "Input: jug1Capacity = 3, jug2Capacity = 5, targetCapacity = 4", "output": "Output: true", "explanation": "Explanation: The famous Die Hard example"}, {"full_text": "Example 2:\nInput: jug1Capacity = 2, jug2Capacity = 6, targetCapacity = 5\nOutput: false", "input": "Input: jug1Capacity = 2, jug2Capacity = 6, targetCapacity = 5", "output": "Output: false", "explanation": ""}, {"full_text": "Example 3:\nInput: jug1Capacity = 1, jug2Capacity = 2, targetCapacity = 3\nOutput: true", "input": "Input: jug1Capacity = 1, jug2Capacity = 2, targetCapacity = 3", "output": "Output: true", "explanation": ""}], "constraints": "Constraints:\n1 <= jug1Capacity, jug2Capacity, targetCapacity <= 10^6", "notes": ""}, "357": {"label": "Medium", "title": "Count Numbers with Unique Digits", "tags": "algorithms,google,backtracking,dynamic-programming,math", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5032, "total_accepted": 99200.0, "total_submissions": 197100.0, "testcase_example": "'2'", "body": "Given an integer n, return the count of all numbers with unique digits, x, where 0 <= x < 10^n.", "examples": [{"full_text": "Example 1:\nInput: n = 2\nOutput: 91\nExplanation: The answer should be the total numbers in the range of 0 \u2264 x < 100, excluding 11,22,33,44,55,66,77,88,99", "input": "Input: n = 2", "output": "Output: 91", "explanation": "Explanation: The answer should be the total numbers in the range of 0 \u2264 x < 100, excluding 11,22,33,44,55,66,77,88,99"}, {"full_text": "Example 2:\nInput: n = 0\nOutput: 1", "input": "Input: n = 0", "output": "Output: 1", "explanation": ""}], "constraints": "Constraints:\n0 <= n <= 8", "notes": ""}, "355": {"label": "Medium", "title": "Design Twitter", "tags": "algorithms,amazon,twitter,design,hash-table,heap", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3403, "total_accepted": 81000.0, "total_submissions": 237900.0, "testcase_example": "'[\"Twitter\",\"postTweet\",\"getNewsFeed\",\"follow\",\"postTweet\",\"getNewsFeed\",\"unfollow\",\"getNewsFeed\"]\\n' +\n  '[[],[1,5],[1],[1,2],[2,6],[1],[1,2],[1]]'", "body": "Design a simplified version of Twitter where users can post tweets, follow/unfollow another user, and is able to see the 10 most recent tweets in the user's news feed.\nImplement the Twitter class:\nTwitter() Initializes your twitter object.\nvoid postTweet(int userId, int tweetId) Composes a new tweet with ID tweetId by the user userId. Each call to this function will be made with a unique tweetId.\nList<Integer> getNewsFeed(int userId) Retrieves the 10 most recent tweet IDs in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user themself. Tweets must be ordered from most recent to least recent.\nvoid follow(int followerId, int followeeId) The user with ID followerId started following the user with ID followeeId.\nvoid unfollow(int followerId, int followeeId) The user with ID followerId started unfollowing the user with ID followeeId.", "examples": [{"full_text": "Example 1:\nInput\n[\"Twitter\", \"postTweet\", \"getNewsFeed\", \"follow\", \"postTweet\", \"getNewsFeed\", \"unfollow\", \"getNewsFeed\"]\n[[], [1, 5], [1], [1, 2], [2, 6], [1], [1, 2], [1]]\nOutput\n[null, null, [5], null, null, [6, 5], null, [5]]\nExplanation\nTwitter twitter = new Twitter();\ntwitter.postTweet(1, 5); // User 1 posts a new tweet (id = 5).\ntwitter.getNewsFeed(1); // User 1's news feed should return a list with 1 tweet id -> [5]. return [5]\ntwitter.follow(1, 2); // User 1 follows user 2.\ntwitter.postTweet(2, 6); // User 2 posts a new tweet (id = 6).\ntwitter.getNewsFeed(1); // User 1's news feed should return a list with 2 tweet ids -> [6, 5]. Tweet id 6 should precede tweet id 5 because it is posted after tweet id 5.\ntwitter.unfollow(1, 2); // User 1 unfollows user 2.\ntwitter.getNewsFeed(1); // User 1's news feed should return a list with 1 tweet id -> [5], since user 1 is no longer following user 2.", "input": "Input\n[\"Twitter\", \"postTweet\", \"getNewsFeed\", \"follow\", \"postTweet\", \"getNewsFeed\", \"unfollow\", \"getNewsFeed\"]\n[[], [1, 5], [1], [1, 2], [2, 6], [1], [1, 2], [1]]", "output": "Output\n[null, null, [5], null, null, [6, 5], null, [5]]", "explanation": "Explanation\nTwitter twitter = new Twitter();\ntwitter.postTweet(1, 5); // User 1 posts a new tweet (id = 5).\ntwitter.getNewsFeed(1); // User 1's news feed should return a list with 1 tweet id -> [5]. return [5]\ntwitter.follow(1, 2); // User 1 follows user 2.\ntwitter.postTweet(2, 6); // User 2 posts a new tweet (id = 6).\ntwitter.getNewsFeed(1); // User 1's news feed should return a list with 2 tweet ids -> [6, 5]. Tweet id 6 should precede tweet id 5 because it is posted after tweet id 5.\ntwitter.unfollow(1, 2); // User 1 unfollows user 2.\ntwitter.getNewsFeed(1); // User 1's news feed should return a list with 1 tweet id -> [5], since user 1 is no longer following user 2."}], "constraints": "Constraints:\n1 <= userId, followerId, followeeId <= 500\n0 <= tweetId <= 10^4\nAll the tweets have unique IDs.\nAt most 3 * 10^4 calls will be made to postTweet, getNewsFeed, follow, and unfollow.", "notes": ""}, "347": {"label": "Medium", "title": "Top K Frequent Elements", "tags": "algorithms,pocketgems,yelp,hash-table,heap", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.644, "total_accepted": 811900.0, "total_submissions": 1300000.0, "testcase_example": "'[1,1,1,2,2,3]\\n2'", "body": "Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,1,1,2,2,3], k = 2\nOutput: [1,2]", "input": "Input: nums = [1,1,1,2,2,3], k = 2", "output": "Output: [1,2]", "explanation": ""}, {"full_text": "Example 2:\nInput: nums = [1], k = 1\nOutput: [1]", "input": "Input: nums = [1], k = 1", "output": "Output: [1]", "explanation": ""}], "constraints": "Constraints:\n1 <= nums.length <= 10^5\nk is in the range [1, the number of unique elements in the array].\nIt is guaranteed that the answer is unique.\nFollow up: Your algorithm's time complexity must be better than O(n log n), where n is the array's size.", "notes": ""}, "343": {"label": "Medium", "title": "Integer Break", "tags": "algorithms,dynamic-programming,math", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5356000000000001, "total_accepted": 174100.0, "total_submissions": 325000.0, "testcase_example": "'2'", "body": "Given an integer n, break it into the sum of k positive integers, where k >= 2, and maximize the product of those integers.\nReturn the maximum product you can get.", "examples": [{"full_text": "Example 1:\nInput: n = 2\nOutput: 1\nExplanation: 2 = 1 + 1, 1 \u00d7 1 = 1.", "input": "Input: n = 2", "output": "Output: 1", "explanation": "Explanation: 2 = 1 + 1, 1 \u00d7 1 = 1."}, {"full_text": "Example 2:\nInput: n = 10\nOutput: 36\nExplanation: 10 = 3 + 3 + 4, 3 \u00d7 3 \u00d7 4 = 36.", "input": "Input: n = 10", "output": "Output: 36", "explanation": "Explanation: 10 = 3 + 3 + 4, 3 \u00d7 3 \u00d7 4 = 36."}], "constraints": "Constraints:\n2 <= n <= 58", "notes": ""}, "341": {"label": "Medium", "title": "Flatten Nested List Iterator", "tags": "algorithms,facebook,google,twitter,design,stack", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5821000000000001, "total_accepted": 274200.0, "total_submissions": 471000.0, "testcase_example": "'[[1,1],2,[1,1]]'", "body": "You are given a nested list of integers nestedList. Each element is either an integer or a list whose elements may also be integers or other lists. Implement an iterator to flatten it.\nImplement the NestedIterator class:\nNestedIterator(List<NestedInteger> nestedList) Initializes the iterator with the nested list nestedList.\nint next() Returns the next integer in the nested list.\nboolean hasNext() Returns true if there are still some integers in the nested list and false otherwise.\nYour code will be tested with the following pseudocode:\ninitialize iterator with nestedList\nres = []\nwhile iterator.hasNext()\nappend iterator.next() to the end of res\nreturn res\nIf res matches the expected flattened list, then your code will be judged as correct.", "examples": [{"full_text": "Example 1:\nInput: nestedList = [[1,1],2,[1,1]]\nOutput: [1,1,2,1,1]\nExplanation: By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,1,2,1,1].", "input": "Input: nestedList = [[1,1],2,[1,1]]", "output": "Output: [1,1,2,1,1]", "explanation": "Explanation: By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,1,2,1,1]."}, {"full_text": "Example 2:\nInput: nestedList = [1,[4,[6]]]\nOutput: [1,4,6]\nExplanation: By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,4,6].", "input": "Input: nestedList = [1,[4,[6]]]", "output": "Output: [1,4,6]", "explanation": "Explanation: By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,4,6]."}], "constraints": "Constraints:\n1 <= nestedList.length <= 500\nThe values of the integers in the nested list is in the range [-10^6, 10^6].", "notes": ""}, "337": {"label": "Medium", "title": "House Robber III", "tags": "algorithms,uber,depth-first-search,tree", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5335, "total_accepted": 274000.0, "total_submissions": 513600.0, "testcase_example": "'[3,2,3,null,3,null,1]'", "body": "The thief has found himself a new place for his thievery again. There is only one entrance to this area, called root.\nBesides the root, each house has one and only one parent house. After a tour, the smart thief realized that all houses in this place form a binary tree. It will automatically contact the police if two directly-linked houses were broken into on the same night.\nGiven the root of the binary tree, return the maximum amount of money the thief can rob without alerting the police.", "examples": [{"full_text": "Example 1:\nInput: root = [3,2,3,null,3,null,1]\nOutput: 7\nExplanation: Maximum amount of money the thief can rob = 3 + 3 + 1 = 7.", "input": "Input: root = [3,2,3,null,3,null,1]", "output": "Output: 7", "explanation": "Explanation: Maximum amount of money the thief can rob = 3 + 3 + 1 = 7."}, {"full_text": "Example 2:\nInput: root = [3,4,5,1,3,null,1]\nOutput: 9\nExplanation: Maximum amount of money the thief can rob = 4 + 5 = 9.", "input": "Input: root = [3,4,5,1,3,null,1]", "output": "Output: 9", "explanation": "Explanation: Maximum amount of money the thief can rob = 4 + 5 = 9."}], "constraints": "Constraints:\nThe number of nodes in the tree is in the range [1, 10^4].\n0 <= Node.val <= 10^4", "notes": ""}, "334": {"label": "Medium", "title": "Increasing Triplet Subsequence", "tags": "algorithms,facebook", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.41350000000000003, "total_accepted": 255700.0, "total_submissions": 618400.0, "testcase_example": "'[1,2,3,4,5]'", "body": "Given an integer array nums, return true if there exists a triple of indices (i, j, k) such that i < j < k and nums[i] < nums[j] < nums[k]. If no such indices exists, return false.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,2,3,4,5]\nOutput: true\nExplanation: Any triplet where i < j < k is valid.", "input": "Input: nums = [1,2,3,4,5]", "output": "Output: true", "explanation": "Explanation: Any triplet where i < j < k is valid."}, {"full_text": "Example 2:\nInput: nums = [5,4,3,2,1]\nOutput: false\nExplanation: No triplet exists.", "input": "Input: nums = [5,4,3,2,1]", "output": "Output: false", "explanation": "Explanation: No triplet exists."}, {"full_text": "Example 3:\nInput: nums = [2,1,5,0,4,6]\nOutput: true\nExplanation: The triplet (3, 4, 5) is valid because nums[3] == 0 < nums[4] == 4 < nums[5] == 6.", "input": "Input: nums = [2,1,5,0,4,6]", "output": "Output: true", "explanation": "Explanation: The triplet (3, 4, 5) is valid because nums[3] == 0 < nums[4] == 4 < nums[5] == 6."}], "constraints": "Constraints:\n1 <= nums.length <= 5 * 10^5\n-2^31 <= nums[i] <= 2^31 - 1\nFollow up: Could you implement a solution that runs in O(n) time complexity and O(1) space complexity?", "notes": ""}, "331": {"label": "Medium", "title": "Verify Preorder Serialization of a Binary Tree", "tags": "algorithms,google,stack", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.43560000000000004, "total_accepted": 110700.0, "total_submissions": 254200.0, "testcase_example": "'\"9,3,4,#,#,1,#,#,2,#,6,#,#\"'", "body": "One way to serialize a binary tree is to use preorder traversal. When we encounter a non-null node, we record the node's value. If it is a null node, we record using a sentinel value such as '#'.\nFor example, the above binary tree can be serialized to the string \"9,3,4,#,#,1,#,#,2,#,6,#,#\", where '#' represents a null node.\nGiven a string of comma-separated values preorder, return true if it is a correct preorder traversal serialization of a binary tree.\nIt is guaranteed that each comma-separated value in the string must be either an integer or a character '#' representing null pointer.\nYou may assume that the input format is always valid.\nFor example, it could never contain two consecutive commas, such as \"1,,3\".\nNote:\nYou are not allowed to reconstruct the tree.", "examples": [{"full_text": "Example 1:\nInput: preorder = \"9,3,4,#,#,1,#,#,2,#,6,#,#\"\nOutput: true", "input": "Input: preorder = \"9,3,4,#,#,1,#,#,2,#,6,#,#\"", "output": "Output: true", "explanation": ""}, {"full_text": "Example 2:\nInput: preorder = \"1,#\"\nOutput: false", "input": "Input: preorder = \"1,#\"", "output": "Output: false", "explanation": ""}, {"full_text": "Example 3:\nInput: preorder = \"9,#,#,1\"\nOutput: false", "input": "Input: preorder = \"9,#,#,1\"", "output": "Output: false", "explanation": ""}], "constraints": "Constraints:\n1 <= preorder.length <= 10^4\npreorder consist of integers in the range [0, 100] and '#' separated by commas ','.", "notes": ""}, "328": {"label": "Medium", "title": "Odd Even Linked List", "tags": "algorithms,linked-list", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5929, "total_accepted": 499300.0, "total_submissions": 842000.0, "testcase_example": "'[1,2,3,4,5]'", "body": "Given the head of a singly linked list, group all the nodes with odd indices together followed by the nodes with even indices, and return the reordered list.\nThe first node is considered odd, and the second node is even, and so on.\nNote that the relative order inside both the even and odd groups should remain as it was in the input.\nYou must solve the problem\nin O(1)\nextra space complexity and O(n) time complexity.", "examples": [{"full_text": "Example 1:\nInput: head = [1,2,3,4,5]\nOutput: [1,3,5,2,4]", "input": "Input: head = [1,2,3,4,5]", "output": "Output: [1,3,5,2,4]", "explanation": ""}, {"full_text": "Example 2:\nInput: head = [2,1,3,5,6,4,7]\nOutput: [2,3,6,7,1,5,4]", "input": "Input: head = [2,1,3,5,6,4,7]", "output": "Output: [2,3,6,7,1,5,4]", "explanation": ""}], "constraints": "Constraints:\nn ==\nnumber of nodes in the linked list\n0 <= n <= 10^4\n-10^6 <= Node.val <= 10^6", "notes": ""}, "324": {"label": "Medium", "title": "Wiggle Sort II", "tags": "algorithms,google,sort", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.31980000000000003, "total_accepted": 116200.0, "total_submissions": 363500.0, "testcase_example": "'[1,5,1,1,6,4]'", "body": "Given an integer array nums, reorder it such that nums[0] < nums[1] > nums[2] < nums[3]....\nYou may assume the input array always has a valid answer.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,5,1,1,6,4]\nOutput: [1,6,1,5,1,4]\nExplanation: [1,4,1,5,1,6] is also accepted.", "input": "Input: nums = [1,5,1,1,6,4]", "output": "Output: [1,6,1,5,1,4]", "explanation": "Explanation: [1,4,1,5,1,6] is also accepted."}, {"full_text": "Example 2:\nInput: nums = [1,3,2,2,3,1]\nOutput: [2,3,1,3,1,2]", "input": "Input: nums = [1,3,2,2,3,1]", "output": "Output: [2,3,1,3,1,2]", "explanation": ""}], "constraints": "Constraints:\n1 <= nums.length <= 5 * 10^4\n0 <= nums[i] <= 5000\nIt is guaranteed that there will be an answer for the given input nums.\nFollow Up: Can you do it in O(n) time and/or in-place with O(1) extra space?", "notes": ""}, "322": {"label": "Medium", "title": "Coin Change", "tags": "algorithms,dynamic-programming", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.397, "total_accepted": 890500.0, "total_submissions": 2200000.0, "testcase_example": "'[1,2,5]\\n11'", "body": "You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money.\nReturn the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.\nYou may assume that you have an infinite number of each kind of coin.", "examples": [{"full_text": "Example 1:\nInput: coins = [1,2,5], amount = 11\nOutput: 3\nExplanation: 11 = 5 + 5 + 1", "input": "Input: coins = [1,2,5], amount = 11", "output": "Output: 3", "explanation": "Explanation: 11 = 5 + 5 + 1"}, {"full_text": "Example 2:\nInput: coins = [2], amount = 3\nOutput: -1", "input": "Input: coins = [2], amount = 3", "output": "Output: -1", "explanation": ""}, {"full_text": "Example 3:\nInput: coins = [1], amount = 0\nOutput: 0", "input": "Input: coins = [1], amount = 0", "output": "Output: 0", "explanation": ""}], "constraints": "Constraints:\n1 <= coins.length <= 12\n1 <= coins[i] <= 2^31 - 1\n0 <= amount <= 10^4", "notes": ""}, "319": {"label": "Medium", "title": "Bulb Switcher", "tags": "algorithms,math", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4698, "total_accepted": 110000.0, "total_submissions": 234100.0, "testcase_example": "'3'", "body": "There are n bulbs that are initially off. You first turn on all the bulbs, then\nyou turn off every second bulb.\nOn the third round, you toggle every third bulb (turning on if it's off or turning off if it's on). For the i^th round, you toggle every i bulb. For the n^th round, you only toggle the last bulb.\nReturn the number of bulbs that are on after n rounds.", "examples": [{"full_text": "Example 1:\nInput: n = 3\nOutput: 1\nExplanation: At first, the three bulbs are [off, off, off].\nAfter the first round, the three bulbs are [on, on, on].\nAfter the second round, the three bulbs are [on, off, on].\nAfter the third round, the three bulbs are [on, off, off].\nSo you should return 1 because there is only one bulb is on.", "input": "Input: n = 3", "output": "Output: 1", "explanation": "Explanation: At first, the three bulbs are [off, off, off].\nAfter the first round, the three bulbs are [on, on, on].\nAfter the second round, the three bulbs are [on, off, on].\nAfter the third round, the three bulbs are [on, off, off].\nSo you should return 1 because there is only one bulb is on."}, {"full_text": "Example 2:\nInput: n = 0\nOutput: 0", "input": "Input: n = 0", "output": "Output: 0", "explanation": ""}, {"full_text": "Example 3:\nInput: n = 1\nOutput: 1", "input": "Input: n = 1", "output": "Output: 1", "explanation": ""}], "constraints": "Constraints:\n0 <= n <= 10^9", "notes": ""}, "318": {"label": "Medium", "title": "Maximum Product of Word Lengths", "tags": "algorithms,google,bit-manipulation", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.564, "total_accepted": 139900.0, "total_submissions": 248100.0, "testcase_example": "'[\"abcw\",\"baz\",\"foo\",\"bar\",\"xtfn\",\"abcdef\"]'", "body": "Given a string array words, return the maximum value of length(word[i]) * length(word[j]) where the two words do not share common letters. If no such two words exist, return 0.", "examples": [{"full_text": "Example 1:\nInput: words = [\"abcw\",\"baz\",\"foo\",\"bar\",\"xtfn\",\"abcdef\"]\nOutput: 16\nExplanation: The two words can be \"abcw\", \"xtfn\".", "input": "Input: words = [\"abcw\",\"baz\",\"foo\",\"bar\",\"xtfn\",\"abcdef\"]", "output": "Output: 16", "explanation": "Explanation: The two words can be \"abcw\", \"xtfn\"."}, {"full_text": "Example 2:\nInput: words = [\"a\",\"ab\",\"abc\",\"d\",\"cd\",\"bcd\",\"abcd\"]\nOutput: 4\nExplanation: The two words can be \"ab\", \"cd\".", "input": "Input: words = [\"a\",\"ab\",\"abc\",\"d\",\"cd\",\"bcd\",\"abcd\"]", "output": "Output: 4", "explanation": "Explanation: The two words can be \"ab\", \"cd\"."}, {"full_text": "Example 3:\nInput: words = [\"a\",\"aa\",\"aaa\",\"aaaa\"]\nOutput: 0\nExplanation: No such pair of words.", "input": "Input: words = [\"a\",\"aa\",\"aaa\",\"aaaa\"]", "output": "Output: 0", "explanation": "Explanation: No such pair of words."}], "constraints": "Constraints:\n2 <= words.length <= 1000\n1 <= words[i].length <= 1000\nwords[i] consists only of lowercase English letters.", "notes": ""}, "316": {"label": "Medium", "title": "Remove Duplicate Letters", "tags": "algorithms,google,greedy,stack", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4129, "total_accepted": 152400.0, "total_submissions": 369000.0, "testcase_example": "'\"bcabc\"'", "body": "Given a string s, remove duplicate letters so that every letter appears once and only once. You must make sure your result is the smallest in lexicographical order among all possible results.", "examples": [{"full_text": "Example 1:\nInput: s = \"bcabc\"\nOutput: \"abc\"", "input": "Input: s = \"bcabc\"", "output": "Output: \"abc\"", "explanation": ""}, {"full_text": "Example 2:\nInput: s = \"cbacdcbc\"\nOutput: \"acdb\"", "input": "Input: s = \"cbacdcbc\"", "output": "Output: \"acdb\"", "explanation": ""}], "constraints": "Constraints:\n1 <= s.length <= 10^4\ns consists of lowercase English letters.", "notes": "Note: This question is the same as 1081: https://leetcode.com/problems/smallest-subsequence-of-distinct-characters/"}, "313": {"label": "Medium", "title": "Super Ugly Number", "tags": "algorithms,google,heap,math", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4608, "total_accepted": 101600.0, "total_submissions": 220500.0, "testcase_example": "'12\\n[2,7,13,19]'", "body": "A super ugly number is a positive integer whose prime factors are in the array primes.\nGiven an integer n and an array of integers primes, return the n^th super ugly number.\nThe n^th super ugly number is guaranteed to fit in a 32-bit signed integer.", "examples": [{"full_text": "Example 1:\nInput: n = 12, primes = [2,7,13,19]\nOutput: 32\nExplanation: [1,2,4,7,8,13,14,16,19,26,28,32] is the sequence of the first 12 super ugly numbers given primes = [2,7,13,19].", "input": "Input: n = 12, primes = [2,7,13,19]", "output": "Output: 32", "explanation": "Explanation: [1,2,4,7,8,13,14,16,19,26,28,32] is the sequence of the first 12 super ugly numbers given primes = [2,7,13,19]."}, {"full_text": "Example 2:\nInput: n = 1, primes = [2,3,5]\nOutput: 1\nExplanation: 1 has no prime factors, therefore all of its prime factors are in the array primes = [2,3,5].", "input": "Input: n = 1, primes = [2,3,5]", "output": "Output: 1", "explanation": "Explanation: 1 has no prime factors, therefore all of its prime factors are in the array primes = [2,3,5]."}], "constraints": "Constraints:\n1 <= n <= 10^6\n1 <= primes.length <= 100\n2 <= primes[i] <= 1000\nprimes[i] is guaranteed to be a prime number.\nAll the values of primes are unique and sorted in ascending order.", "notes": ""}, "310": {"label": "Medium", "title": "Minimum Height Trees", "tags": "algorithms,google,breadth-first-search,graph", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3796, "total_accepted": 185300.0, "total_submissions": 488100.0, "testcase_example": "'4\\n[[1,0],[1,2],[1,3]]'", "body": "A tree is an undirected graph in which any two vertices are connected by\nexactly\none path. In other words, any connected graph without simple cycles is a tree.\nGiven a tree of n nodes\nlabelled from 0 to n - 1, and an array of\nn - 1\nedges where edges[i] = [ai, bi] indicates that there is an undirected edge between the two nodes\nai and\nbi in the tree,\nyou can choose any node of the tree as the root. When you select a node x as the root, the result tree has height h. Among all possible rooted trees, those with minimum height (i.e. min(h))\nare called minimum height trees (MHTs).\nReturn a list of all MHTs' root labels.\nYou can return the answer in any order.\nThe height of a rooted tree is the number of edges on the longest downward path between the root and a leaf.", "examples": [{"full_text": "Example 1:\nInput: n = 4, edges = [[1,0],[1,2],[1,3]]\nOutput: [1]\nExplanation: As shown, the height of the tree is 1 when the root is the node with label 1 which is the only MHT.", "input": "Input: n = 4, edges = [[1,0],[1,2],[1,3]]", "output": "Output: [1]", "explanation": "Explanation: As shown, the height of the tree is 1 when the root is the node with label 1 which is the only MHT."}, {"full_text": "Example 2:\nInput: n = 6, edges = [[3,0],[3,1],[3,2],[3,4],[5,4]]\nOutput: [3,4]", "input": "Input: n = 6, edges = [[3,0],[3,1],[3,2],[3,4],[5,4]]", "output": "Output: [3,4]", "explanation": ""}], "constraints": "Constraints:\n1 <= n <= 2 * 10^4\nedges.length == n - 1\n0 <= ai, bi < n\nai != bi\nAll the pairs (ai, bi) are distinct.\nThe given input is guaranteed to be a tree and there will be no repeated edges.", "notes": ""}, "309": {"label": "Medium", "title": "Best Time to Buy and Sell Stock with Cooldown", "tags": "algorithms,google,dynamic-programming", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.518, "total_accepted": 259100.00000000003, "total_submissions": 500100.0, "testcase_example": "'[1,2,3,0,2]'", "body": "You are given an array prices where prices[i] is the price of a given stock on the i^th day.\nFind the maximum profit you can achieve. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times) with the following restrictions:\nAfter you sell your stock, you cannot buy stock on the next day (i.e., cooldown one day).\nNote: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).", "examples": [{"full_text": "Example 1:\nInput: prices = [1,2,3,0,2]\nOutput: 3\nExplanation: transactions = [buy, sell, cooldown, buy, sell]", "input": "Input: prices = [1,2,3,0,2]", "output": "Output: 3", "explanation": "Explanation: transactions = [buy, sell, cooldown, buy, sell]"}, {"full_text": "Example 2:\nInput: prices = [1]\nOutput: 0", "input": "Input: prices = [1]", "output": "Output: 0", "explanation": ""}], "constraints": "Constraints:\n1 <= prices.length <= 5000\n0 <= prices[i] <= 1000", "notes": ""}, "307": {"label": "Medium", "title": "Range Sum Query - Mutable", "tags": "algorithms,binary-indexed-tree,segment-tree", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3848, "total_accepted": 174700.0, "total_submissions": 454100.0, "testcase_example": "'[\"NumArray\",\"sumRange\",\"update\",\"sumRange\"]\\n[[[1,3,5]],[0,2],[1,2],[0,2]]'", "body": "Given an integer array nums, handle multiple queries of the following types:\nUpdate the value of an element in nums.\nCalculate the sum of the elements of nums between indices left and right inclusive where left <= right.\nImplement the NumArray class:\nNumArray(int[] nums) Initializes the object with the integer array nums.\nvoid update(int index, int val) Updates the value of nums[index] to be val.\nint sumRange(int left, int right) Returns the sum of the elements of nums between indices left and right inclusive (i.e. nums[left] + nums[left + 1] + ... + nums[right]).", "examples": [{"full_text": "Example 1:\nInput\n[\"NumArray\", \"sumRange\", \"update\", \"sumRange\"]\n[[[1, 3, 5]], [0, 2], [1, 2], [0, 2]]\nOutput\n[null, 9, null, 8]\nExplanation\nNumArray numArray = new NumArray([1, 3, 5]);\nnumArray.sumRange(0, 2); // return 1 + 3 + 5 = 9\nnumArray.update(1, 2); // nums = [1, 2, 5]\nnumArray.sumRange(0, 2); // return 1 + 2 + 5 = 8", "input": "Input\n[\"NumArray\", \"sumRange\", \"update\", \"sumRange\"]\n[[[1, 3, 5]], [0, 2], [1, 2], [0, 2]]", "output": "Output\n[null, 9, null, 8]", "explanation": "Explanation\nNumArray numArray = new NumArray([1, 3, 5]);\nnumArray.sumRange(0, 2); // return 1 + 3 + 5 = 9\nnumArray.update(1, 2); // nums = [1, 2, 5]\nnumArray.sumRange(0, 2); // return 1 + 2 + 5 = 8"}], "constraints": "Constraints:\n1 <= nums.length <= 3 * 10^4\n-100 <= nums[i] <= 100\n0 <= index < nums.length\n-100 <= val <= 100\n0 <= left <= right < nums.length\nAt most 3 * 10^4 calls will be made to update and sumRange.", "notes": ""}, "306": {"label": "Medium", "title": "Additive Number", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.30329999999999996, "total_accepted": 67000.0, "total_submissions": 220900.0, "testcase_example": "'\"112358\"'", "body": "An additive number is a string whose digits can form an additive sequence.\nA valid additive sequence should contain at least three numbers. Except for the first two numbers, each subsequent number in the sequence must be the sum of the preceding two.\nGiven a string containing only digits, return true if it is an additive number or false otherwise.\nNote: Numbers in the additive sequence cannot have leading zeros, so sequence 1, 2, 03 or 1, 02, 3 is invalid.", "examples": [{"full_text": "Example 1:\nInput: \"112358\"\nOutput: true\nExplanation:\nThe digits can form an additive sequence: 1, 1, 2, 3, 5, 8.\n1 + 1 = 2, 1 + 2 = 3, 2 + 3 = 5, 3 + 5 = 8", "input": "Input: \"112358\"", "output": "Output: true", "explanation": "Explanation:\nThe digits can form an additive sequence: 1, 1, 2, 3, 5, 8.\n1 + 1 = 2, 1 + 2 = 3, 2 + 3 = 5, 3 + 5 = 8"}, {"full_text": "Example 2:\nInput: \"199100199\"\nOutput: true\nExplanation:\nThe additive sequence is: 1, 99, 100, 199.\n1 + 99 = 100, 99 + 100 = 199", "input": "Input: \"199100199\"", "output": "Output: true", "explanation": "Explanation:\nThe additive sequence is: 1, 99, 100, 199.\n1 + 99 = 100, 99 + 100 = 199"}], "constraints": "Constraints:\n1 <= num.length <= 35\nnum consists only of digits.\nFollow up: How would you handle overflow for very large input integers?", "notes": ""}, "304": {"label": "Medium", "title": "Range Sum Query 2D - Immutable", "tags": "algorithms,dynamic-programming", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4681, "total_accepted": 211400.0, "total_submissions": 451700.0, "testcase_example": "'[\"NumMatrix\",\"sumRegion\",\"sumRegion\",\"sumRegion\"]\\n' +\n  '[[[[3,0,1,4,2],[5,6,3,2,1],[1,2,0,1,5],[4,1,0,1,7],[1,0,3,0,5]]],[2,1,4,3],[1,1,2,2],[1,2,2,4]]'", "body": "Given a 2D matrix matrix, handle multiple queries of the following type:\nCalculate the sum of the elements of matrix inside the rectangle defined by its upper left corner (row1, col1) and lower right corner (row2, col2).\nImplement the NumMatrix class:\nNumMatrix(int[][] matrix) Initializes the object with the integer matrix matrix.\nint sumRegion(int row1, int col1, int row2, int col2) Returns the sum of the elements of matrix inside the rectangle defined by its upper left corner (row1, col1) and lower right corner (row2, col2).", "examples": [{"full_text": "Example 1:\nInput\n[\"NumMatrix\", \"sumRegion\", \"sumRegion\", \"sumRegion\"]\n[[[[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]]], [2, 1, 4, 3], [1, 1, 2, 2], [1, 2, 2, 4]]\nOutput\n[null, 8, 11, 12]\nExplanation\nNumMatrix numMatrix = new NumMatrix([[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]]);\nnumMatrix.sumRegion(2, 1, 4, 3); // return 8 (i.e sum of the red rectangle)\nnumMatrix.sumRegion(1, 1, 2, 2); // return 11 (i.e sum of the green rectangle)\nnumMatrix.sumRegion(1, 2, 2, 4); // return 12 (i.e sum of the blue rectangle)", "input": "Input\n[\"NumMatrix\", \"sumRegion\", \"sumRegion\", \"sumRegion\"]\n[[[[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]]], [2, 1, 4, 3], [1, 1, 2, 2], [1, 2, 2, 4]]", "output": "Output\n[null, 8, 11, 12]", "explanation": "Explanation\nNumMatrix numMatrix = new NumMatrix([[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]]);\nnumMatrix.sumRegion(2, 1, 4, 3); // return 8 (i.e sum of the red rectangle)\nnumMatrix.sumRegion(1, 1, 2, 2); // return 11 (i.e sum of the green rectangle)\nnumMatrix.sumRegion(1, 2, 2, 4); // return 12 (i.e sum of the blue rectangle)"}], "constraints": "Constraints:\nm == matrix.length\nn == matrix[i].length\n1 <= m, n <= 200\n-10^5 <= matrix[i][j] <= 10^5\n0 <= row1 <= row2 < m\n0 <= col1 <= col2 < n\nAt most 10^4 calls will be made to sumRegion.", "notes": ""}, "300": {"label": "Medium", "title": "Longest Increasing Subsequence", "tags": "algorithms,microsoft,binary-search,dynamic-programming", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4857, "total_accepted": 777100.0, "total_submissions": 1600000.0, "testcase_example": "'[10,9,2,5,3,7,101,18]'", "body": "Given an integer array nums, return the length of the longest strictly increasing subsequence.\nA subsequence is a sequence that can be derived from an array by deleting some or no elements without changing the order of the remaining elements. For example, [3,6,2,7] is a subsequence of the array [0,3,1,6,2,2,7].", "examples": [{"full_text": "Example 1:\nInput: nums = [10,9,2,5,3,7,101,18]\nOutput: 4\nExplanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4.", "input": "Input: nums = [10,9,2,5,3,7,101,18]", "output": "Output: 4", "explanation": "Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4."}, {"full_text": "Example 2:\nInput: nums = [0,1,0,3,2,3]\nOutput: 4", "input": "Input: nums = [0,1,0,3,2,3]", "output": "Output: 4", "explanation": ""}, {"full_text": "Example 3:\nInput: nums = [7,7,7,7,7,7,7]\nOutput: 1", "input": "Input: nums = [7,7,7,7,7,7,7]", "output": "Output: 1", "explanation": ""}], "constraints": "Constraints:\n1 <= nums.length <= 2500\n-10^4 <= nums[i] <= 10^4\nFollow up:\nCan you come up with an algorithm that runs in\nO(n log(n)) time complexity?", "notes": ""}, "299": {"label": "Medium", "title": "Bulls and Cows", "tags": "algorithms,hash-table", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4681, "total_accepted": 256000.0, "total_submissions": 547000.0, "testcase_example": "'\"1807\"\\n\"7810\"'", "body": "You are playing the Bulls and Cows game with your friend.\nYou write down a secret number and ask your friend to guess what the number is. When your friend makes a guess, you provide a hint with the following info:\nThe number of \"bulls\", which are digits in the guess that are in the correct position.\nThe number of \"cows\", which are digits in the guess that are in your secret number but are located in the wrong position. Specifically, the non-bull digits in the guess that could be rearranged such that they become bulls.\nGiven the secret number secret and your friend's guess guess, return the hint for your friend's guess.\nThe hint should be formatted as \"xAyB\", where x is the number of bulls and y is the number of cows. Note that both secret and guess may contain duplicate digits.", "examples": [{"full_text": "Example 1:\nInput: secret = \"1807\", guess = \"7810\"\nOutput: \"1A3B\"\nExplanation: Bulls are connected with a '|' and cows are underlined:\n\"1807\"\n|\n\"7810\"", "input": "Input: secret = \"1807\", guess = \"7810\"", "output": "Output: \"1A3B\"", "explanation": "Explanation: Bulls are connected with a '|' and cows are underlined:\n\"1807\"\n|\n\"7810\""}, {"full_text": "Example 2:\nInput: secret = \"1123\", guess = \"0111\"\nOutput: \"1A1B\"\nExplanation: Bulls are connected with a '|' and cows are underlined:\n\"1123\" \"1123\"\n| or |\n\"0111\" \"0111\"\nNote that only one of the two unmatched 1s is counted as a cow since the non-bull digits can only be rearranged to allow one 1 to be a bull.", "input": "Input: secret = \"1123\", guess = \"0111\"", "output": "Output: \"1A1B\"", "explanation": "Explanation: Bulls are connected with a '|' and cows are underlined:\n\"1123\" \"1123\"\n| or |\n\"0111\" \"0111\"\nNote that only one of the two unmatched 1s is counted as a cow since the non-bull digits can only be rearranged to allow one 1 to be a bull."}], "constraints": "Constraints:\n1 <= secret.length, guess.length <= 1000\nsecret.length == guess.length\nsecret and guess consist of digits only.", "notes": ""}, "289": {"label": "Medium", "title": "Game of Life", "tags": "algorithms,dropbox,google,snapchat,twosigma,array", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6217, "total_accepted": 284500.0, "total_submissions": 457600.0, "testcase_example": "'[[0,1,0],[0,0,1],[1,1,1],[0,0,0]]'", "body": "According to\nWikipedia's article: \"The Game of Life, also known simply as Life, is a cellular automaton devised by the British mathematician John Horton Conway in 1970.\"\nThe board is made up of an m x n grid of cells, where each cell has an initial state: live (represented by a 1) or dead (represented by a 0). Each cell interacts with its eight neighbors (horizontal, vertical, diagonal) using the following four rules (taken from the above Wikipedia article):\nAny live cell with fewer than two live neighbors dies as if caused by under-population.\nAny live cell with two or three live neighbors lives on to the next generation.\nAny live cell with more than three live neighbors dies, as if by over-population.\nAny dead cell with exactly three live neighbors becomes a live cell, as if by reproduction.\nThe next state is created by applying the above rules simultaneously to every cell in the current state, where births and deaths occur simultaneously. Given the current state of the m x n grid board, return the next state.", "examples": [{"full_text": "Example 1:\nInput: board = [[0,1,0],[0,0,1],[1,1,1],[0,0,0]]\nOutput: [[0,0,0],[1,0,1],[0,1,1],[0,1,0]]", "input": "Input: board = [[0,1,0],[0,0,1],[1,1,1],[0,0,0]]", "output": "Output: [[0,0,0],[1,0,1],[0,1,1],[0,1,0]]", "explanation": ""}, {"full_text": "Example 2:\nInput: board = [[1,1],[1,0]]\nOutput: [[1,1],[1,1]]", "input": "Input: board = [[1,1],[1,0]]", "output": "Output: [[1,1],[1,1]]", "explanation": ""}], "constraints": "Constraints:\nm == board.length\nn == board[i].length\n1 <= m, n <= 25\nboard[i][j] is 0 or 1.\nFollow up:\nCould you solve it in-place? Remember that the board needs to be updated simultaneously: You cannot update some cells first and then use their updated values to update other cells.\nIn this question, we represent the board using a 2D array. In principle, the board is infinite, which would cause problems when the active area encroaches upon the border of the array (i.e., live cells reach the border). How would you address these problems?", "notes": ""}, "287": {"label": "Medium", "title": "Find the Duplicate Number", "tags": "algorithms,bloomberg,array,binary-search,two-pointers", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5838, "total_accepted": 719900.0, "total_submissions": 1200000.0, "testcase_example": "'[1,3,4,2,2]'", "body": "Given an array of integers nums containing\nn + 1 integers where each integer is in the range [1, n] inclusive.\nThere is only one repeated number in nums, return this\nrepeated\nnumber.\nYou must solve the problem without modifying the array nums\nand uses only constant extra space.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,3,4,2,2]\nOutput: 2", "input": "Input: nums = [1,3,4,2,2]", "output": "Output: 2", "explanation": ""}, {"full_text": "Example 2:\nInput: nums = [3,1,3,4,2]\nOutput: 3", "input": "Input: nums = [3,1,3,4,2]", "output": "Output: 3", "explanation": ""}], "constraints": "Constraints:\n1 <= n <= 10^5\nnums.length == n + 1\n1 <= nums[i] <= n\nAll the integers in nums appear only once except for precisely one integer which appears two or more times.\nFollow up:\nHow can we prove that at least one duplicate number must exist in nums?\nCan you solve the problem in linear runtime complexity?", "notes": ""}, "284": {"label": "Medium", "title": "Peeking Iterator", "tags": "algorithms,apple,google,yahoo,design", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5327000000000001, "total_accepted": 153200.0, "total_submissions": 287600.0, "testcase_example": "'[\"PeekingIterator\",\"next\",\"peek\",\"next\",\"next\",\"hasNext\"]\\n' +\n  '[[[1,2,3]],[],[],[],[],[]]'", "body": "Design an iterator that supports the peek operation on an existing iterator in addition to the hasNext and the next operations.\nImplement the PeekingIterator class:\nPeekingIterator(Iterator<int> nums) Initializes the object with the given integer iterator iterator.\nint next() Returns the next element in the array and moves the pointer to the next element.\nboolean hasNext() Returns true if there are still elements in the array.\nint peek() Returns the next element in the array without moving the pointer.\nNote: Each language may have a different implementation of the constructor and Iterator, but they all support the int next() and boolean hasNext() functions.", "examples": [{"full_text": "Example 1:\nInput\n[\"PeekingIterator\", \"next\", \"peek\", \"next\", \"next\", \"hasNext\"]\n[[[1, 2, 3]], [], [], [], [], []]\nOutput\n[null, 1, 2, 2, 3, false]\nExplanation\nPeekingIterator peekingIterator = new PeekingIterator([1, 2, 3]); // [1,2,3]\npeekingIterator.next(); // return 1, the pointer moves to the next element [1,2,3].\npeekingIterator.peek(); // return 2, the pointer does not move [1,2,3].\npeekingIterator.next(); // return 2, the pointer moves to the next element [1,2,3]\npeekingIterator.next(); // return 3, the pointer moves to the next element [1,2,3]\npeekingIterator.hasNext(); // return False", "input": "Input\n[\"PeekingIterator\", \"next\", \"peek\", \"next\", \"next\", \"hasNext\"]\n[[[1, 2, 3]], [], [], [], [], []]", "output": "Output\n[null, 1, 2, 2, 3, false]", "explanation": "Explanation\nPeekingIterator peekingIterator = new PeekingIterator([1, 2, 3]); // [1,2,3]\npeekingIterator.next(); // return 1, the pointer moves to the next element [1,2,3].\npeekingIterator.peek(); // return 2, the pointer does not move [1,2,3].\npeekingIterator.next(); // return 2, the pointer moves to the next element [1,2,3]\npeekingIterator.next(); // return 3, the pointer moves to the next element [1,2,3]\npeekingIterator.hasNext(); // return False"}], "constraints": "Constraints:\n1 <= nums.length <= 1000\n1 <= nums[i] <= 1000\nAll the calls to next and peek are valid.\nAt most 1000 calls will be made to next, hasNext, and peek.\nFollow up: How would you extend your design to be generic and work with all types, not just integer?", "notes": ""}, "279": {"label": "Medium", "title": "Perfect Squares", "tags": "algorithms,google,breadth-first-search,dynamic-programming,math", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5157, "total_accepted": 501600.0, "total_submissions": 972600.0, "testcase_example": "'12'", "body": "Given an integer n, return the least number of perfect square numbers that sum to n.\nA perfect square is an integer that is the square of an integer; in other words, it is the product of some integer with itself. For example, 1, 4, 9, and 16 are perfect squares while 3 and 11 are not.", "examples": [{"full_text": "Example 1:\nInput: n = 12\nOutput: 3\nExplanation: 12 = 4 + 4 + 4.", "input": "Input: n = 12", "output": "Output: 3", "explanation": "Explanation: 12 = 4 + 4 + 4."}, {"full_text": "Example 2:\nInput: n = 13\nOutput: 2\nExplanation: 13 = 4 + 9.", "input": "Input: n = 13", "output": "Output: 2", "explanation": "Explanation: 13 = 4 + 9."}], "constraints": "Constraints:\n1 <= n <= 10^4", "notes": ""}, "275": {"label": "Medium", "title": "H-Index II", "tags": "algorithms,facebook,binary-search", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3685, "total_accepted": 154200.0, "total_submissions": 418400.0, "testcase_example": "'[0,1,3,5,6]'", "body": "Given an array of integers citations where citations[i] is the number of citations a researcher received for their i^th paper and citations\nis sorted in an ascending order, return compute the researcher's h-index.\nAccording to the definition of h-index on Wikipedia: A scientist has an index h if h of their n papers have at least h citations each, and the other n \u2212 h papers have no more than h citations each.\nIf there are several possible values for h, the maximum one is taken as the h-index.\nYou must write an algorithm that runs in logarithmic time.", "examples": [{"full_text": "Example 1:\nInput: citations = [0,1,3,5,6]\nOutput: 3\nExplanation: [0,1,3,5,6] means the researcher has 5 papers in total and each of them had received 0, 1, 3, 5, 6 citations respectively.\nSince the researcher has 3 papers with at least 3 citations each and the remaining two with no more than 3 citations each, their h-index is 3.", "input": "Input: citations = [0,1,3,5,6]", "output": "Output: 3", "explanation": "Explanation: [0,1,3,5,6] means the researcher has 5 papers in total and each of them had received 0, 1, 3, 5, 6 citations respectively.\nSince the researcher has 3 papers with at least 3 citations each and the remaining two with no more than 3 citations each, their h-index is 3."}, {"full_text": "Example 2:\nInput: citations = [1,2,100]\nOutput: 2", "input": "Input: citations = [1,2,100]", "output": "Output: 2", "explanation": ""}], "constraints": "Constraints:\nn == citations.length\n1 <= n <= 10^5\n0 <= citations[i] <= 1000\ncitations is sorted in ascending order.", "notes": ""}, "274": {"label": "Medium", "title": "H-Index", "tags": "algorithms,bloomberg,facebook,google,hash-table,sort", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3734, "total_accepted": 225000.0, "total_submissions": 602500.0, "testcase_example": "'[3,0,6,1,5]'", "body": "Given an array of integers citations where citations[i] is the number of citations a researcher received for their i^th paper, return compute the researcher's h-index.\nAccording to the definition of h-index on Wikipedia: A scientist has an index h if h of their n papers have at least h citations each, and the other n \u2212 h papers have no more than h citations each.\nIf there are several possible values for h, the maximum one is taken as the h-index.", "examples": [{"full_text": "Example 1:\nInput: citations = [3,0,6,1,5]\nOutput: 3\nExplanation: [3,0,6,1,5] means the researcher has 5 papers in total and each of them had received 3, 0, 6, 1, 5 citations respectively.\nSince the researcher has 3 papers with at least 3 citations each and the remaining two with no more than 3 citations each, their h-index is 3.", "input": "Input: citations = [3,0,6,1,5]", "output": "Output: 3", "explanation": "Explanation: [3,0,6,1,5] means the researcher has 5 papers in total and each of them had received 3, 0, 6, 1, 5 citations respectively.\nSince the researcher has 3 papers with at least 3 citations each and the remaining two with no more than 3 citations each, their h-index is 3."}, {"full_text": "Example 2:\nInput: citations = [1,3,1]\nOutput: 1", "input": "Input: citations = [1,3,1]", "output": "Output: 1", "explanation": ""}], "constraints": "Constraints:\nn == citations.length\n1 <= n <= 5000\n0 <= citations[i] <= 1000", "notes": ""}, "264": {"label": "Medium", "title": "Ugly Number II", "tags": "algorithms,dynamic-programming,heap,math", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.44909999999999994, "total_accepted": 246600.0, "total_submissions": 549200.0, "testcase_example": "'10'", "body": "An ugly number is a positive integer whose prime factors are limited to 2, 3, and 5.\nGiven an integer n, return the n^th ugly number.", "examples": [{"full_text": "Example 1:\nInput: n = 10\nOutput: 12\nExplanation: [1, 2, 3, 4, 5, 6, 8, 9, 10, 12] is the sequence of the first 10 ugly numbers.", "input": "Input: n = 10", "output": "Output: 12", "explanation": "Explanation: [1, 2, 3, 4, 5, 6, 8, 9, 10, 12] is the sequence of the first 10 ugly numbers."}, {"full_text": "Example 2:\nInput: n = 1\nOutput: 1\nExplanation: 1 has no prime factors, therefore all of its prime factors are limited to 2, 3, and 5.", "input": "Input: n = 1", "output": "Output: 1", "explanation": "Explanation: 1 has no prime factors, therefore all of its prime factors are limited to 2, 3, and 5."}], "constraints": "Constraints:\n1 <= n <= 1690", "notes": ""}, "260": {"label": "Medium", "title": "Single Number III", "tags": "algorithms,bit-manipulation", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6701, "total_accepted": 243800.0, "total_submissions": 363800.0, "testcase_example": "'[1,2,1,3,2,5]'", "body": "Given an integer array nums, in which exactly two elements appear only once and all the other elements appear exactly twice. Find the two elements that appear only once. You can return the answer in any order.\nYou must write an\nalgorithm that runs in linear runtime complexity and uses\nonly constant extra space.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,2,1,3,2,5]\nOutput: [3,5]\nExplanation: [5, 3] is also a valid answer.", "input": "Input: nums = [1,2,1,3,2,5]", "output": "Output: [3,5]", "explanation": "Explanation: [5, 3] is also a valid answer."}, {"full_text": "Example 2:\nInput: nums = [-1,0]\nOutput: [-1,0]", "input": "Input: nums = [-1,0]", "output": "Output: [-1,0]", "explanation": ""}, {"full_text": "Example 3:\nInput: nums = [0,1]\nOutput: [1,0]", "input": "Input: nums = [0,1]", "output": "Output: [1,0]", "explanation": ""}], "constraints": "Constraints:\n2 <= nums.length <= 3 * 10^4\n-2^31 <= nums[i] <= 2^31 - 1\nEach integer in nums will appear twice, only two integers will appear once.", "notes": ""}, "241": {"label": "Medium", "title": "Different Ways to Add Parentheses", "tags": "algorithms,divide-and-conquer", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6095, "total_accepted": 153500.0, "total_submissions": 251800.0, "testcase_example": "'\"2-1-1\"'", "body": "Given a string expression of numbers and operators, return all possible results from computing all the different possible ways to group numbers and operators. You may return the answer in any order.", "examples": [{"full_text": "Example 1:\nInput: expression = \"2-1-1\"\nOutput: [0,2]\nExplanation:\n((2-1)-1) = 0\n(2-(1-1)) = 2", "input": "Input: expression = \"2-1-1\"", "output": "Output: [0,2]", "explanation": "Explanation:\n((2-1)-1) = 0\n(2-(1-1)) = 2"}, {"full_text": "Example 2:\nInput: expression = \"2*3-4*5\"\nOutput: [-34,-14,-10,-10,10]\nExplanation:\n(2*(3-(4*5))) = -34\n((2*3)-(4*5)) = -14\n((2*(3-4))*5) = -10\n(2*((3-4)*5)) = -10\n(((2*3)-4)*5) = 10", "input": "Input: expression = \"2*3-4*5\"", "output": "Output: [-34,-14,-10,-10,10]", "explanation": "Explanation:\n(2*(3-(4*5))) = -34\n((2*3)-(4*5)) = -14\n((2*(3-4))*5) = -10\n(2*((3-4)*5)) = -10\n(((2*3)-4)*5) = 10"}], "constraints": "Constraints:\n1 <= expression.length <= 20\nexpression consists of digits and the operator '+', '-', and '*'.\nAll the integer values in the input expression are in the range [0, 99].", "notes": ""}, "240": {"label": "Medium", "title": "Search a 2D Matrix II", "tags": "algorithms,amazon,apple,google,binary-search,divide-and-conquer", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.478, "total_accepted": 559700.0, "total_submissions": 1200000.0, "testcase_example": "'[[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]]\\n' +\n  '5'", "body": "Write an efficient algorithm that searches for a value target in an m x n integer matrix matrix. This matrix has the following properties:\nIntegers in each row are sorted in ascending from left to right.\nIntegers in each column are sorted in ascending from top to bottom.", "examples": [{"full_text": "Example 1:\nInput: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 5\nOutput: true", "input": "Input: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 5", "output": "Output: true", "explanation": ""}, {"full_text": "Example 2:\nInput: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 20\nOutput: false", "input": "Input: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 20", "output": "Output: false", "explanation": ""}], "constraints": "Constraints:\nm == matrix.length\nn == matrix[i].length\n1 <= n, m <= 300\n-10^9 <= matrix[i][j] <= 10^9\nAll the integers in each row are sorted in ascending order.\nAll the integers in each column are sorted in ascending order.\n-10^9 <= target <= 10^9", "notes": ""}, "238": {"label": "Medium", "title": "Product of Array Except Self", "tags": "algorithms,amazon,apple,facebook,linkedin,microsoft,array", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6356, "total_accepted": 1100000.0, "total_submissions": 1700000.0, "testcase_example": "'[1,2,3,4]'", "body": "Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].\nThe product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.\nYou must write an algorithm that runs in\nO(n)\ntime and without using the division operation.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,2,3,4]\nOutput: [24,12,8,6]", "input": "Input: nums = [1,2,3,4]", "output": "Output: [24,12,8,6]", "explanation": ""}, {"full_text": "Example 2:\nInput: nums = [-1,1,0,-3,3]\nOutput: [0,0,9,0,0]", "input": "Input: nums = [-1,1,0,-3,3]", "output": "Output: [0,0,9,0,0]", "explanation": ""}], "constraints": "Constraints:\n2 <= nums.length <= 10^5\n-30 <= nums[i] <= 30\nThe product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.\nFollow up:\nCan you solve the problem in O(1)\nextra\nspace complexity? (The output array does not count as extra space for space complexity analysis.)", "notes": ""}, "236": {"label": "Medium", "title": "Lowest Common Ancestor of a Binary Tree", "tags": "algorithms,amazon,apple,facebook,linkedin,microsoft,tree", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5434, "total_accepted": 908400.0, "total_submissions": 1700000.0, "testcase_example": "'[3,5,1,6,2,0,8,null,null,7,4]\\n5\\n1'", "body": "Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.\nAccording to the definition of LCA on Wikipedia: \u201cThe lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).\u201d", "examples": [{"full_text": "Example 1:\nInput: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1\nOutput: 3\nExplanation: The LCA of nodes 5 and 1 is 3.", "input": "Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1", "output": "Output: 3", "explanation": "Explanation: The LCA of nodes 5 and 1 is 3."}, {"full_text": "Example 2:\nInput: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4\nOutput: 5\nExplanation: The LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition.", "input": "Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4", "output": "Output: 5", "explanation": "Explanation: The LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition."}, {"full_text": "Example 3:\nInput: root = [1,2], p = 1, q = 2\nOutput: 1", "input": "Input: root = [1,2], p = 1, q = 2", "output": "Output: 1", "explanation": ""}], "constraints": "Constraints:\nThe number of nodes in the tree is in the range [2, 10^5].\n-10^9 <= Node.val <= 10^9\nAll Node.val are unique.\np != q\np and q will exist in the tree.", "notes": ""}, "230": {"label": "Medium", "title": "Kth Smallest Element in a BST", "tags": "algorithms,bloomberg,google,uber,binary-search,tree", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6609999999999999, "total_accepted": 694800.0, "total_submissions": 1100000.0, "testcase_example": "'[3,1,4,null,2]\\n1'", "body": "Given the root of a binary search tree, and an integer k, return the k^th smallest value (1-indexed) of all the values of the nodes in the tree.", "examples": [{"full_text": "Example 1:\nInput: root = [3,1,4,null,2], k = 1\nOutput: 1", "input": "Input: root = [3,1,4,null,2], k = 1", "output": "Output: 1", "explanation": ""}, {"full_text": "Example 2:\nInput: root = [5,3,6,2,4,null,null,1], k = 3\nOutput: 3", "input": "Input: root = [5,3,6,2,4,null,null,1], k = 3", "output": "Output: 3", "explanation": ""}], "constraints": "Constraints:\nThe number of nodes in the tree is n.\n1 <= k <= n <= 10^4\n0 <= Node.val <= 10^4\nFollow up: If the BST is modified often (i.e., we can do insert and delete operations) and you need to find the kth smallest frequently, how would you optimize?", "notes": ""}, "229": {"label": "Medium", "title": "Majority Element II", "tags": "algorithms,zenefits,array", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.41659999999999997, "total_accepted": 265600.0, "total_submissions": 637400.0, "testcase_example": "'[3,2,3]'", "body": "Given an integer array of size n, find all elements that appear more than \u230a n/3 \u230b times.", "examples": [{"full_text": "Example 1:\nInput: nums = [3,2,3]\nOutput: [3]", "input": "Input: nums = [3,2,3]", "output": "Output: [3]", "explanation": ""}, {"full_text": "Example 2:\nInput: nums = [1]\nOutput: [1]", "input": "Input: nums = [1]", "output": "Output: [1]", "explanation": ""}, {"full_text": "Example 3:\nInput: nums = [1,2]\nOutput: [1,2]", "input": "Input: nums = [1,2]", "output": "Output: [1,2]", "explanation": ""}], "constraints": "Constraints:\n1 <= nums.length <= 5 * 10^4\n-10^9 <= nums[i] <= 10^9\nFollow up: Could you solve the problem in linear time and in O(1) space?", "notes": ""}, "227": {"label": "Medium", "title": "Basic Calculator II", "tags": "algorithms,airbnb,string", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4117, "total_accepted": 389600.0, "total_submissions": 946200.0, "testcase_example": "'\"3+2*2\"'", "body": "Given a string s which represents an expression, evaluate this expression and return its value.\nThe integer division should truncate toward zero.\nYou may assume that the given expression is always valid. All intermediate results will be in the range of [-2^31, 2^31 - 1].\nNote: You are not allowed to use any built-in function which evaluates strings as mathematical expressions, such as eval().", "examples": [{"full_text": "Example 1:\nInput: s = \"3+2*2\"\nOutput: 7", "input": "Input: s = \"3+2*2\"", "output": "Output: 7", "explanation": ""}, {"full_text": "Example 2:\nInput: s = \" 3/2 \"\nOutput: 1", "input": "Input: s = \" 3/2 \"", "output": "Output: 1", "explanation": ""}, {"full_text": "Example 3:\nInput: s = \" 3+5 / 2 \"\nOutput: 5", "input": "Input: s = \" 3+5 / 2 \"", "output": "Output: 5", "explanation": ""}], "constraints": "Constraints:\n1 <= s.length <= 3 * 10^5\ns consists of integers and operators ('+', '-', '*', '/') separated by some number of spaces.\ns represents a valid expression.\nAll the integers in the expression are non-negative integers in the range [0, 2^31 - 1].\nThe answer is guaranteed to fit in a 32-bit integer.", "notes": ""}, "223": {"label": "Medium", "title": "Rectangle Area", "tags": "algorithms,math", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3983, "total_accepted": 132900.0, "total_submissions": 333700.0, "testcase_example": "'-3\\n0\\n3\\n4\\n0\\n-1\\n9\\n2'", "body": "Given the coordinates of two rectilinear rectangles in a 2D plane, return the total area covered by the two rectangles.\nThe first rectangle is defined by its bottom-left corner (ax1, ay1) and its top-right corner (ax2, ay2).\nThe second rectangle is defined by its bottom-left corner (bx1, by1) and its top-right corner (bx2, by2).", "examples": [{"full_text": "Example 1:\nInput: ax1 = -3, ay1 = 0, ax2 = 3, ay2 = 4, bx1 = 0, by1 = -1, bx2 = 9, by2 = 2\nOutput: 45", "input": "Input: ax1 = -3, ay1 = 0, ax2 = 3, ay2 = 4, bx1 = 0, by1 = -1, bx2 = 9, by2 = 2", "output": "Output: 45", "explanation": ""}, {"full_text": "Example 2:\nInput: ax1 = -2, ay1 = -2, ax2 = 2, ay2 = 2, bx1 = -2, by1 = -2, bx2 = 2, by2 = 2\nOutput: 16", "input": "Input: ax1 = -2, ay1 = -2, ax2 = 2, ay2 = 2, bx1 = -2, by1 = -2, bx2 = 2, by2 = 2", "output": "Output: 16", "explanation": ""}], "constraints": "Constraints:\n-10^4 <= ax1, ay1, ax2, ay2, bx1, by1, bx2, by2 <= 10^4", "notes": ""}, "222": {"label": "Medium", "title": "Count Complete Tree Nodes", "tags": "algorithms,binary-search,tree", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5446, "total_accepted": 381400.0, "total_submissions": 700400.0, "testcase_example": "'[1,2,3,4,5,6]'", "body": "Given the root of a complete binary tree, return the number of the nodes in the tree.\nAccording to Wikipedia, every level, except possibly the last, is completely filled in a complete binary tree, and all nodes in the last level are as far left as possible. It can have between 1 and 2^h nodes inclusive at the last level h.\nDesign an algorithm that runs in less than\nO(n)\ntime complexity.", "examples": [{"full_text": "Example 1:\nInput: root = [1,2,3,4,5,6]\nOutput: 6", "input": "Input: root = [1,2,3,4,5,6]", "output": "Output: 6", "explanation": ""}, {"full_text": "Example 2:\nInput: root = []\nOutput: 0", "input": "Input: root = []", "output": "Output: 0", "explanation": ""}, {"full_text": "Example 3:\nInput: root = [1]\nOutput: 1", "input": "Input: root = [1]", "output": "Output: 1", "explanation": ""}], "constraints": "Constraints:\nThe number of nodes in the tree is in the range [0, 5 * 10^4].\n0 <= Node.val <= 5 * 10^4\nThe tree is guaranteed to be complete.", "notes": ""}, "221": {"label": "Medium", "title": "Maximal Square", "tags": "algorithms,airbnb,apple,facebook,dynamic-programming", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.43, "total_accepted": 466000.0, "total_submissions": 1100000.0, "testcase_example": "'[[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]]'", "body": "Given an m x n binary matrix filled with 0's and 1's, find the largest square containing only 1's and return its area.", "examples": [{"full_text": "Example 1:\nInput: matrix = [[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]]\nOutput: 4", "input": "Input: matrix = [[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]]", "output": "Output: 4", "explanation": ""}, {"full_text": "Example 2:\nInput: matrix = [[\"0\",\"1\"],[\"1\",\"0\"]]\nOutput: 1", "input": "Input: matrix = [[\"0\",\"1\"],[\"1\",\"0\"]]", "output": "Output: 1", "explanation": ""}, {"full_text": "Example 3:\nInput: matrix = [[\"0\"]]\nOutput: 0", "input": "Input: matrix = [[\"0\"]]", "output": "Output: 0", "explanation": ""}], "constraints": "Constraints:\nm == matrix.length\nn == matrix[i].length\n1 <= m, n <= 300\nmatrix[i][j] is '0' or '1'.", "notes": ""}, "220": {"label": "Medium", "title": "Contains Duplicate III", "tags": "algorithms,airbnb,palantir,binary-search-tree", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.2167, "total_accepted": 194700.0, "total_submissions": 898900.0, "testcase_example": "'[1,2,3,1]\\n3\\n0'", "body": "Given an integer array nums and two integers k and t, return true if there are two distinct indices i and j in the array such that abs(nums[i] - nums[j]) <= t and abs(i - j) <= k.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,2,3,1], k = 3, t = 0\nOutput: true", "input": "Input: nums = [1,2,3,1], k = 3, t = 0", "output": "Output: true", "explanation": ""}, {"full_text": "Example 2:\nInput: nums = [1,0,1,1], k = 1, t = 2\nOutput: true", "input": "Input: nums = [1,0,1,1], k = 1, t = 2", "output": "Output: true", "explanation": ""}, {"full_text": "Example 3:\nInput: nums = [1,5,9,1,5,9], k = 2, t = 3\nOutput: false", "input": "Input: nums = [1,5,9,1,5,9], k = 2, t = 3", "output": "Output: false", "explanation": ""}], "constraints": "Constraints:\n1 <= nums.length <= 2 * 10^4\n-2^31 <= nums[i] <= 2^31 - 1\n0 <= k <= 10^4\n0 <= t <= 2^31 - 1", "notes": ""}, "216": {"label": "Medium", "title": "Combination Sum III", "tags": "algorithms,array,backtracking", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6343, "total_accepted": 274000.0, "total_submissions": 432000.0, "testcase_example": "'3\\n7'", "body": "Find all valid combinations of k numbers that sum up to n such that the following conditions are true:\nOnly numbers 1 through 9 are used.\nEach number is used at most once.\nReturn a list of all possible valid combinations. The list must not contain the same combination twice, and the combinations may be returned in any order.", "examples": [{"full_text": "Example 1:\nInput: k = 3, n = 7\nOutput: [[1,2,4]]\nExplanation:\n1 + 2 + 4 = 7\nThere are no other valid combinations.", "input": "Input: k = 3, n = 7", "output": "Output: [[1,2,4]]", "explanation": "Explanation:\n1 + 2 + 4 = 7\nThere are no other valid combinations."}, {"full_text": "Example 2:\nInput: k = 3, n = 9\nOutput: [[1,2,6],[1,3,5],[2,3,4]]\nExplanation:\n1 + 2 + 6 = 9\n1 + 3 + 5 = 9\n2 + 3 + 4 = 9\nThere are no other valid combinations.", "input": "Input: k = 3, n = 9", "output": "Output: [[1,2,6],[1,3,5],[2,3,4]]", "explanation": "Explanation:\n1 + 2 + 6 = 9\n1 + 3 + 5 = 9\n2 + 3 + 4 = 9\nThere are no other valid combinations."}, {"full_text": "Example 3:\nInput: k = 4, n = 1\nOutput: []\nExplanation: There are no valid combinations.\nUsing 4 different numbers in the range [1,9], the smallest sum we can get is 1+2+3+4 = 10 and since 10 > 1, there are no valid combination.", "input": "Input: k = 4, n = 1", "output": "Output: []", "explanation": "Explanation: There are no valid combinations.\nUsing 4 different numbers in the range [1,9], the smallest sum we can get is 1+2+3+4 = 10 and since 10 > 1, there are no valid combination."}], "constraints": "Constraints:\n2 <= k <= 9\n1 <= n <= 60", "notes": ""}, "215": {"label": "Medium", "title": "Kth Largest Element in an Array", "tags": "algorithms,amazon,apple,bloomberg,facebook,microsoft,pocketgems,divide-and-conquer,heap", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6265, "total_accepted": 1200000.0, "total_submissions": 1900000.0, "testcase_example": "'[3,2,1,5,6,4]\\n2'", "body": "Given an integer array nums and an integer k, return the k^th largest element in the array.\nNote that it is the k^th largest element in the sorted order, not the k^th distinct element.", "examples": [{"full_text": "Example 1:\nInput: nums = [3,2,1,5,6,4], k = 2\nOutput: 5", "input": "Input: nums = [3,2,1,5,6,4], k = 2", "output": "Output: 5", "explanation": ""}, {"full_text": "Example 2:\nInput: nums = [3,2,3,1,2,4,5,5,6], k = 4\nOutput: 4", "input": "Input: nums = [3,2,3,1,2,4,5,5,6], k = 4", "output": "Output: 4", "explanation": ""}], "constraints": "Constraints:\n1 <= k <= nums.length <= 10^4\n-10^4 <= nums[i] <= 10^4", "notes": ""}, "213": {"label": "Medium", "title": "House Robber II", "tags": "algorithms,microsoft,dynamic-programming", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3948, "total_accepted": 353100.0, "total_submissions": 894400.0, "testcase_example": "'[2,3,2]'", "body": "You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are arranged in a circle. That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have a security system connected, and\nit will automatically contact the police if two adjacent houses were broken into on the same night.\nGiven an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.", "examples": [{"full_text": "Example 1:\nInput: nums = [2,3,2]\nOutput: 3\nExplanation: You cannot rob house 1 (money = 2) and then rob house 3 (money = 2), because they are adjacent houses.", "input": "Input: nums = [2,3,2]", "output": "Output: 3", "explanation": "Explanation: You cannot rob house 1 (money = 2) and then rob house 3 (money = 2), because they are adjacent houses."}, {"full_text": "Example 2:\nInput: nums = [1,2,3,1]\nOutput: 4\nExplanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).\nTotal amount you can rob = 1 + 3 = 4.", "input": "Input: nums = [1,2,3,1]", "output": "Output: 4", "explanation": "Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).\nTotal amount you can rob = 1 + 3 = 4."}, {"full_text": "Example 3:\nInput: nums = [1,2,3]\nOutput: 3", "input": "Input: nums = [1,2,3]", "output": "Output: 3", "explanation": ""}], "constraints": "Constraints:\n1 <= nums.length <= 100\n0 <= nums[i] <= 1000", "notes": ""}, "211": {"label": "Medium", "title": "Design Add and Search Words Data Structure", "tags": "algorithms,facebook,backtracking,design,trie", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4401, "total_accepted": 378300.0, "total_submissions": 859700.0, "testcase_example": "'[\"WordDictionary\",\"addWord\",\"addWord\",\"addWord\",\"search\",\"search\",\"search\",\"search\"]\\n' +\n  '[[],[\"bad\"],[\"dad\"],[\"mad\"],[\"pad\"],[\"bad\"],[\".ad\"],[\"b..\"]]'", "body": "Design a data structure that supports adding new words and finding if a string matches any previously added string.\nImplement the WordDictionary class:\nWordDictionary()\nInitializes the object.\nvoid addWord(word) Adds word to the data structure, it can be matched later.\nbool search(word)\nReturns true if there is any string in the data structure that matches word\nor false otherwise. word may contain dots '.' where dots can be matched with any letter.", "examples": [{"full_text": "Example:\nInput\n[\"WordDictionary\",\"addWord\",\"addWord\",\"addWord\",\"search\",\"search\",\"search\",\"search\"]\n[[],[\"bad\"],[\"dad\"],[\"mad\"],[\"pad\"],[\"bad\"],[\".ad\"],[\"b..\"]]\nOutput\n[null,null,null,null,false,true,true,true]\nExplanation\nWordDictionary wordDictionary = new WordDictionary();\nwordDictionary.addWord(\"bad\");\nwordDictionary.addWord(\"dad\");\nwordDictionary.addWord(\"mad\");\nwordDictionary.search(\"pad\"); // return False\nwordDictionary.search(\"bad\"); // return True\nwordDictionary.search(\".ad\"); // return True\nwordDictionary.search(\"b..\"); // return True", "input": "Input\n[\"WordDictionary\",\"addWord\",\"addWord\",\"addWord\",\"search\",\"search\",\"search\",\"search\"]\n[[],[\"bad\"],[\"dad\"],[\"mad\"],[\"pad\"],[\"bad\"],[\".ad\"],[\"b..\"]]", "output": "Output\n[null,null,null,null,false,true,true,true]", "explanation": "Explanation\nWordDictionary wordDictionary = new WordDictionary();\nwordDictionary.addWord(\"bad\");\nwordDictionary.addWord(\"dad\");\nwordDictionary.addWord(\"mad\");\nwordDictionary.search(\"pad\"); // return False\nwordDictionary.search(\"bad\"); // return True\nwordDictionary.search(\".ad\"); // return True\nwordDictionary.search(\"b..\"); // return True"}], "constraints": "Constraints:\n1 <= word.length <= 25\nword in addWord consists of lowercase English letters.\nword in search consist of '.' or lowercase English letters.\nThere will be at most 3 dots in word for search queries.\nAt most 10^4 calls will be made to addWord and search.", "notes": ""}, "210": {"label": "Medium", "title": "Course Schedule II", "tags": "algorithms,facebook,zenefits,breadth-first-search,depth-first-search,graph,topological-sort", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.46009999999999995, "total_accepted": 571200.0, "total_submissions": 1200000.0, "testcase_example": "'2\\n[[1,0]]'", "body": "There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.\nFor example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.\nReturn the ordering of courses you should take to finish all courses. If there are many valid answers, return any of them. If it is impossible to finish all courses, return an empty array.", "examples": [{"full_text": "Example 1:\nInput: numCourses = 2, prerequisites = [[1,0]]\nOutput: [0,1]\nExplanation: There are a total of 2 courses to take. To take course 1 you should have finished course 0. So the correct course order is [0,1].", "input": "Input: numCourses = 2, prerequisites = [[1,0]]", "output": "Output: [0,1]", "explanation": "Explanation: There are a total of 2 courses to take. To take course 1 you should have finished course 0. So the correct course order is [0,1]."}, {"full_text": "Example 2:\nInput: numCourses = 4, prerequisites = [[1,0],[2,0],[3,1],[3,2]]\nOutput: [0,2,1,3]\nExplanation: There are a total of 4 courses to take. To take course 3 you should have finished both courses 1 and 2. Both courses 1 and 2 should be taken after you finished course 0.\nSo one correct course order is [0,1,2,3]. Another correct ordering is [0,2,1,3].", "input": "Input: numCourses = 4, prerequisites = [[1,0],[2,0],[3,1],[3,2]]", "output": "Output: [0,2,1,3]", "explanation": "Explanation: There are a total of 4 courses to take. To take course 3 you should have finished both courses 1 and 2. Both courses 1 and 2 should be taken after you finished course 0.\nSo one correct course order is [0,1,2,3]. Another correct ordering is [0,2,1,3]."}, {"full_text": "Example 3:\nInput: numCourses = 1, prerequisites = []\nOutput: [0]", "input": "Input: numCourses = 1, prerequisites = []", "output": "Output: [0]", "explanation": ""}], "constraints": "Constraints:\n1 <= numCourses <= 2000\n0 <= prerequisites.length <= numCourses * (numCourses - 1)\nprerequisites[i].length == 2\n0 <= ai, bi < numCourses\nai != bi\nAll the pairs [ai, bi] are distinct.", "notes": ""}, "209": {"label": "Medium", "title": "Minimum Size Subarray Sum", "tags": "algorithms,facebook,array,binary-search,two-pointers", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.42619999999999997, "total_accepted": 475900.0, "total_submissions": 1100000.0, "testcase_example": "'7\\n[2,3,1,2,4,3]'", "body": "Given an array of positive integers nums and a positive integer target, return the minimal length of a contiguous subarray [numsl, numsl+1, ..., numsr-1, numsr] of which the sum is greater than or equal to target. If there is no such subarray, return 0 instead.", "examples": [{"full_text": "Example 1:\nInput: target = 7, nums = [2,3,1,2,4,3]\nOutput: 2\nExplanation: The subarray [4,3] has the minimal length under the problem constraint.", "input": "Input: target = 7, nums = [2,3,1,2,4,3]", "output": "Output: 2", "explanation": "Explanation: The subarray [4,3] has the minimal length under the problem constraint."}, {"full_text": "Example 2:\nInput: target = 4, nums = [1,4,4]\nOutput: 1", "input": "Input: target = 4, nums = [1,4,4]", "output": "Output: 1", "explanation": ""}, {"full_text": "Example 3:\nInput: target = 11, nums = [1,1,1,1,1,1,1,1]\nOutput: 0", "input": "Input: target = 11, nums = [1,1,1,1,1,1,1,1]", "output": "Output: 0", "explanation": ""}], "constraints": "Constraints:\n1 <= target <= 10^9\n1 <= nums.length <= 10^5\n1 <= nums[i] <= 10^5\nFollow up: If you have figured out the O(n) solution, try coding another solution of which the time complexity is O(n log(n)).", "notes": ""}, "208": {"label": "Medium", "title": "Implement Trie (Prefix Tree)", "tags": "algorithms,bloomberg,facebook,google,microsoft,twitter,uber,design,trie", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5720000000000001, "total_accepted": 539300.0, "total_submissions": 942800.0, "testcase_example": "'[\"Trie\",\"insert\",\"search\",\"search\",\"startsWith\",\"insert\",\"search\"]\\n' +\n  '[[],[\"apple\"],[\"apple\"],[\"app\"],[\"app\"],[\"app\"],[\"app\"]]'", "body": "A trie (pronounced as \"try\") or prefix tree is a tree data structure used to efficiently store and retrieve keys in a dataset of strings. There are various applications of this data structure, such as autocomplete and spellchecker.\nImplement the Trie class:\nTrie() Initializes the trie object.\nvoid insert(String word) Inserts the string word into the trie.\nboolean search(String word) Returns true if the string word is in the trie (i.e., was inserted before), and false otherwise.\nboolean startsWith(String prefix) Returns true if there is a previously inserted string word that has the prefix prefix, and false otherwise.", "examples": [{"full_text": "Example 1:\nInput\n[\"Trie\", \"insert\", \"search\", \"search\", \"startsWith\", \"insert\", \"search\"]\n[[], [\"apple\"], [\"apple\"], [\"app\"], [\"app\"], [\"app\"], [\"app\"]]\nOutput\n[null, null, true, false, true, null, true]\nExplanation\nTrie trie = new Trie();\ntrie.insert(\"apple\");\ntrie.search(\"apple\"); // return True\ntrie.search(\"app\"); // return False\ntrie.startsWith(\"app\"); // return True\ntrie.insert(\"app\");\ntrie.search(\"app\"); // return True", "input": "Input\n[\"Trie\", \"insert\", \"search\", \"search\", \"startsWith\", \"insert\", \"search\"]\n[[], [\"apple\"], [\"apple\"], [\"app\"], [\"app\"], [\"app\"], [\"app\"]]", "output": "Output\n[null, null, true, false, true, null, true]", "explanation": "Explanation\nTrie trie = new Trie();\ntrie.insert(\"apple\");\ntrie.search(\"apple\"); // return True\ntrie.search(\"app\"); // return False\ntrie.startsWith(\"app\"); // return True\ntrie.insert(\"app\");\ntrie.search(\"app\"); // return True"}], "constraints": "Constraints:\n1 <= word.length, prefix.length <= 2000\nword and prefix consist only of lowercase English letters.\nAt most 3 * 10^4 calls in total will be made to insert, search, and startsWith.", "notes": ""}, "207": {"label": "Medium", "title": "Course Schedule", "tags": "algorithms,apple,uber,yelp,zenefits,breadth-first-search,depth-first-search,graph,topological-sort", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.44880000000000003, "total_accepted": 794300.0, "total_submissions": 1800000.0, "testcase_example": "'2\\n[[1,0]]'", "body": "There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.\nFor example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.\nReturn true if you can finish all courses. Otherwise, return false.", "examples": [{"full_text": "Example 1:\nInput: numCourses = 2, prerequisites = [[1,0]]\nOutput: true\nExplanation: There are a total of 2 courses to take.\nTo take course 1 you should have finished course 0. So it is possible.", "input": "Input: numCourses = 2, prerequisites = [[1,0]]", "output": "Output: true", "explanation": "Explanation: There are a total of 2 courses to take.\nTo take course 1 you should have finished course 0. So it is possible."}, {"full_text": "Example 2:\nInput: numCourses = 2, prerequisites = [[1,0],[0,1]]\nOutput: false\nExplanation: There are a total of 2 courses to take.\nTo take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible.", "input": "Input: numCourses = 2, prerequisites = [[1,0],[0,1]]", "output": "Output: false", "explanation": "Explanation: There are a total of 2 courses to take.\nTo take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible."}], "constraints": "Constraints:\n1 <= numCourses <= 10^5\n0 <= prerequisites.length <= 5000\nprerequisites[i].length == 2\n0 <= ai, bi < numCourses\nAll the pairs prerequisites[i] are unique.", "notes": ""}, "204": {"label": "Medium", "title": "Count Primes", "tags": "algorithms,amazon,microsoft,hash-table,math", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3293, "total_accepted": 581900.0, "total_submissions": 1800000.0, "testcase_example": "'10'", "body": "Given an integer n, return the number of prime numbers that are strictly less than n.", "examples": [{"full_text": "Example 1:\nInput: n = 10\nOutput: 4\nExplanation: There are 4 prime numbers less than 10, they are 2, 3, 5, 7.", "input": "Input: n = 10", "output": "Output: 4", "explanation": "Explanation: There are 4 prime numbers less than 10, they are 2, 3, 5, 7."}, {"full_text": "Example 2:\nInput: n = 0\nOutput: 0", "input": "Input: n = 0", "output": "Output: 0", "explanation": ""}, {"full_text": "Example 3:\nInput: n = 1\nOutput: 0", "input": "Input: n = 1", "output": "Output: 0", "explanation": ""}], "constraints": "Constraints:\n0 <= n <= 5 * 10^6", "notes": ""}, "201": {"label": "Medium", "title": "Bitwise AND of Numbers Range", "tags": "algorithms,bit-manipulation", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4157, "total_accepted": 208800.0, "total_submissions": 502200.0, "testcase_example": "'5\\n7'", "body": "Given two integers left and right that represent the range [left, right], return the bitwise AND of all numbers in this range, inclusive.", "examples": [{"full_text": "Example 1:\nInput: left = 5, right = 7\nOutput: 4", "input": "Input: left = 5, right = 7", "output": "Output: 4", "explanation": ""}, {"full_text": "Example 2:\nInput: left = 0, right = 0\nOutput: 0", "input": "Input: left = 0, right = 0", "output": "Output: 0", "explanation": ""}, {"full_text": "Example 3:\nInput: left = 1, right = 2147483647\nOutput: 0", "input": "Input: left = 1, right = 2147483647", "output": "Output: 0", "explanation": ""}], "constraints": "Constraints:\n0 <= left <= right <= 2^31 - 1", "notes": ""}, "200": {"label": "Medium", "title": "Number of Islands", "tags": "algorithms,amazon,facebook,google,microsoft,zenefits,breadth-first-search,depth-first-search,union-find", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5311, "total_accepted": 1400000.0, "total_submissions": 2700000.0, "testcase_example": "'[[\"1\",\"1\",\"1\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"0\",\"0\"]]'", "body": "Given an m x n 2D binary grid grid which represents a map of '1's (land) and '0's (water), return the number of islands.\nAn island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.", "examples": [{"full_text": "Example 1:\nInput: grid = [\n[\"1\",\"1\",\"1\",\"1\",\"0\"],\n[\"1\",\"1\",\"0\",\"1\",\"0\"],\n[\"1\",\"1\",\"0\",\"0\",\"0\"],\n[\"0\",\"0\",\"0\",\"0\",\"0\"]\n]\nOutput: 1", "input": "Input: grid = [\n[\"1\",\"1\",\"1\",\"1\",\"0\"],\n[\"1\",\"1\",\"0\",\"1\",\"0\"],\n[\"1\",\"1\",\"0\",\"0\",\"0\"],\n[\"0\",\"0\",\"0\",\"0\",\"0\"]\n]", "output": "Output: 1", "explanation": ""}, {"full_text": "Example 2:\nInput: grid = [\n[\"1\",\"1\",\"0\",\"0\",\"0\"],\n[\"1\",\"1\",\"0\",\"0\",\"0\"],\n[\"0\",\"0\",\"1\",\"0\",\"0\"],\n[\"0\",\"0\",\"0\",\"1\",\"1\"]\n]\nOutput: 3", "input": "Input: grid = [\n[\"1\",\"1\",\"0\",\"0\",\"0\"],\n[\"1\",\"1\",\"0\",\"0\",\"0\"],\n[\"0\",\"0\",\"1\",\"0\",\"0\"],\n[\"0\",\"0\",\"0\",\"1\",\"1\"]\n]", "output": "Output: 3", "explanation": ""}], "constraints": "Constraints:\nm == grid.length\nn == grid[i].length\n1 <= m, n <= 300\ngrid[i][j] is '0' or '1'.", "notes": ""}, "199": {"label": "Medium", "title": "Binary Tree Right Side View", "tags": "algorithms,amazon,breadth-first-search,depth-first-search,tree", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5908, "total_accepted": 615500.0, "total_submissions": 1000000.0, "testcase_example": "'[1,2,3,null,5,null,4]'", "body": "Given the root of a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.", "examples": [{"full_text": "Example 1:\nInput: root = [1,2,3,null,5,null,4]\nOutput: [1,3,4]", "input": "Input: root = [1,2,3,null,5,null,4]", "output": "Output: [1,3,4]", "explanation": ""}, {"full_text": "Example 2:\nInput: root = [1,null,3]\nOutput: [1,3]", "input": "Input: root = [1,null,3]", "output": "Output: [1,3]", "explanation": ""}, {"full_text": "Example 3:\nInput: root = []\nOutput: []", "input": "Input: root = []", "output": "Output: []", "explanation": ""}], "constraints": "Constraints:\nThe number of nodes in the tree is in the range [0, 100].\n-100 <= Node.val <= 100", "notes": ""}, "198": {"label": "Medium", "title": "House Robber", "tags": "algorithms,airbnb,linkedin,dynamic-programming", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.46490000000000004, "total_accepted": 1000000.0, "total_submissions": 2200000.0, "testcase_example": "'[1,2,3,1]'", "body": "You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and it will automatically contact the police if two adjacent houses were broken into on the same night.\nGiven an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,2,3,1]\nOutput: 4\nExplanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).\nTotal amount you can rob = 1 + 3 = 4.", "input": "Input: nums = [1,2,3,1]", "output": "Output: 4", "explanation": "Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).\nTotal amount you can rob = 1 + 3 = 4."}, {"full_text": "Example 2:\nInput: nums = [2,7,9,3,1]\nOutput: 12\nExplanation: Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1).\nTotal amount you can rob = 2 + 9 + 1 = 12.", "input": "Input: nums = [2,7,9,3,1]", "output": "Output: 12", "explanation": "Explanation: Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1).\nTotal amount you can rob = 2 + 9 + 1 = 12."}], "constraints": "Constraints:\n1 <= nums.length <= 100\n0 <= nums[i] <= 400", "notes": ""}, "194": {"label": "Medium", "title": "Transpose File", "tags": "shell", "langs": "bash", "related_topics": "shell", "acceptance_ratio": 0.2498, "total_accepted": 17800.0, "total_submissions": 71300.0, "testcase_example": "", "body": "Given a text file file.txt, transpose its content.\nYou may assume that each row has the same number of columns, and each field is separated by the ' ' character.", "examples": [{"full_text": "Example:\nIf file.txt has the following content:\nname age\nalice 21\nryan 30\nOutput the following:\nname alice ryan\nage 21 30", "input": "", "output": "Output the following:\nname alice ryan\nage 21 30", "explanation": ""}], "constraints": "", "notes": ""}, "192": {"label": "Medium", "title": "Word Frequency", "tags": "shell", "langs": "bash", "related_topics": "shell", "acceptance_ratio": 0.2556, "total_accepted": 35700.0, "total_submissions": 139700.0, "testcase_example": "", "body": "Write a bash script to calculate the frequency of each word in a text file words.txt.\nFor simplicity sake, you may assume:\nwords.txt contains only lowercase characters and space ' ' characters.\nEach word must consist of lowercase characters only.\nWords are separated by one or more whitespace characters.", "examples": [{"full_text": "Example:\nAssume that words.txt has the following content:\nthe day is sunny the the\nthe sunny is is\nYour script should output the following, sorted by descending frequency:\nthe 4\nis 3\nsunny 2\nday 1", "input": "", "output": "", "explanation": ""}], "constraints": "", "notes": "Note:\nDon't worry about handling ties, it is guaranteed that each word's frequency count is unique.\nCould you write it in one-line using Unix pipes?"}, "189": {"label": "Medium", "title": "Rotate Array", "tags": "algorithms,amazon,bloomberg,microsoft,array", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3829, "total_accepted": 1000000.0, "total_submissions": 2600000.0, "testcase_example": "'[1,2,3,4,5,6,7]\\n3'", "body": "Given an array, rotate the array to the right by k steps, where k is non-negative.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,2,3,4,5,6,7], k = 3\nOutput: [5,6,7,1,2,3,4]\nExplanation:\nrotate 1 steps to the right: [7,1,2,3,4,5,6]\nrotate 2 steps to the right: [6,7,1,2,3,4,5]\nrotate 3 steps to the right: [5,6,7,1,2,3,4]", "input": "Input: nums = [1,2,3,4,5,6,7], k = 3", "output": "Output: [5,6,7,1,2,3,4]", "explanation": "Explanation:\nrotate 1 steps to the right: [7,1,2,3,4,5,6]\nrotate 2 steps to the right: [6,7,1,2,3,4,5]\nrotate 3 steps to the right: [5,6,7,1,2,3,4]"}, {"full_text": "Example 2:\nInput: nums = [-1,-100,3,99], k = 2\nOutput: [3,99,-1,-100]\nExplanation:\nrotate 1 steps to the right: [99,-1,-100,3]\nrotate 2 steps to the right: [3,99,-1,-100]", "input": "Input: nums = [-1,-100,3,99], k = 2", "output": "Output: [3,99,-1,-100]", "explanation": "Explanation:\nrotate 1 steps to the right: [99,-1,-100,3]\nrotate 2 steps to the right: [3,99,-1,-100]"}], "constraints": "Constraints:\n1 <= nums.length <= 10^5\n-2^31 <= nums[i] <= 2^31 - 1\n0 <= k <= 10^5\nFollow up:\nTry to come up with as many solutions as you can. There are at least three different ways to solve this problem.\nCould you do it in-place with O(1) extra space?", "notes": ""}, "187": {"label": "Medium", "title": "Repeated DNA Sequences", "tags": "algorithms,linkedin,bit-manipulation,hash-table", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.44049999999999995, "total_accepted": 250400.0, "total_submissions": 568400.0, "testcase_example": "'\"AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT\"'", "body": "The DNA sequence is composed of a series of nucleotides abbreviated as 'A', 'C', 'G', and 'T'.\nFor example, \"ACGAATTCCG\" is a DNA sequence.\nWhen studying DNA, it is useful to identify repeated sequences within the DNA.\nGiven a string s that represents a DNA sequence, return all the 10-letter-long sequences (substrings) that occur more than once in a DNA molecule. You may return the answer in any order.", "examples": [{"full_text": "Example 1:\nInput: s = \"AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT\"\nOutput: [\"AAAAACCCCC\",\"CCCCCAAAAA\"]", "input": "Input: s = \"AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT\"", "output": "Output: [\"AAAAACCCCC\",\"CCCCCAAAAA\"]", "explanation": ""}, {"full_text": "Example 2:\nInput: s = \"AAAAAAAAAAAAA\"\nOutput: [\"AAAAAAAAAA\"]", "input": "Input: s = \"AAAAAAAAAAAAA\"", "output": "Output: [\"AAAAAAAAAA\"]", "explanation": ""}], "constraints": "Constraints:\n1 <= s.length <= 10^5\ns[i] is either 'A', 'C', 'G', or 'T'.", "notes": ""}, "184": {"label": "Medium", "title": "Department Highest Salary", "tags": "database", "langs": "mssql,mysql,oraclesql", "related_topics": "database", "acceptance_ratio": 0.4568, "total_accepted": 203700.0, "total_submissions": 445800.0, "testcase_example": "'{\"headers\": {\"Employee\": [\"id\", \"name\", \"salary\", \"departmentId\"], \"Department\": [\"id\", \"name\"]}, \"rows\": {\"Employee\": [[1, \"Joe\", 70000, 1], [2, \"Jim\", 90000, 1], [3, \"Henry\", 80000, 2], [4, \"Sam\", 60000, 2], [5, \"Max\", 90000, 1]], \"Department\": [[1, \"IT\"], [2, \"Sales\"]]}}'", "body": "Table: Employee\n+--------------+---------+\n| Column Name | Type |\n+--------------+---------+\n| id | int |\n| name | varchar |\n| salary | int |\n| departmentId | int |\n+--------------+---------+\nid is the primary key column for this table.\ndepartmentId is a foreign key of the ID from the Department table.\nEach row of this table indicates the ID, name, and salary of an employee. It also contains the ID of their department.\nTable: Department\n+-------------+---------+\n| Column Name | Type |\n+-------------+---------+\n| id | int |\n| name | varchar |\n+-------------+---------+\nid is the primary key column for this table.\nEach row of this table indicates the ID of a department and its name.\nWrite an SQL query to find employees who have the highest salary in each of the departments.\nReturn the result table in any order.\nThe query result format is in the following example.", "examples": [{"full_text": "Example 1:\nInput:\nEmployee table:\n+----+-------+--------+--------------+\n| id | name | salary | departmentId |\n+----+-------+--------+--------------+\n| 1 | Joe | 70000 | 1 |\n| 2 | Jim | 90000 | 1 |\n| 3 | Henry | 80000 | 2 |\n| 4 | Sam | 60000 | 2 |\n| 5 | Max | 90000 | 1 |\n+----+-------+--------+--------------+\nDepartment table:\n+----+-------+\n| id | name |\n+----+-------+\n| 1 | IT |\n| 2 | Sales |\n+----+-------+\nOutput:\n+------------+----------+--------+\n| Department | Employee | Salary |\n+------------+----------+--------+\n| IT | Jim | 90000 |\n| Sales | Henry | 80000 |\n| IT | Max | 90000 |\n+------------+----------+--------+\nExplanation: Max and Jim both have the highest salary in the IT department and Henry has the highest salary in the Sales department.", "input": "Input:\nEmployee table:\n+----+-------+--------+--------------+\n| id | name | salary | departmentId |\n+----+-------+--------+--------------+\n| 1 | Joe | 70000 | 1 |\n| 2 | Jim | 90000 | 1 |\n| 3 | Henry | 80000 | 2 |\n| 4 | Sam | 60000 | 2 |\n| 5 | Max | 90000 | 1 |\n+----+-------+--------+--------------+\nDepartment table:\n+----+-------+\n| id | name |\n+----+-------+\n| 1 | IT |\n| 2 | Sales |\n+----+-------+", "output": "Output:\n+------------+----------+--------+\n| Department | Employee | Salary |\n+------------+----------+--------+\n| IT | Jim | 90000 |\n| Sales | Henry | 80000 |\n| IT | Max | 90000 |\n+------------+----------+--------+", "explanation": "Explanation: Max and Jim both have the highest salary in the IT department and Henry has the highest salary in the Sales department."}], "constraints": "", "notes": ""}, "180": {"label": "Medium", "title": "Consecutive Numbers", "tags": "database", "langs": "mssql,mysql,oraclesql", "related_topics": "database", "acceptance_ratio": 0.452, "total_accepted": 173900.0, "total_submissions": 384700.0, "testcase_example": "'{\"headers\": {\"Logs\": [\"id\", \"num\"]}, \"rows\": {\"Logs\": [[1, 1], [2, 1], [3, 1], [4, 2], [5, 1], [6, 2], [7, 2]]}}'", "body": "Table: Logs\n+-------------+---------+\n| Column Name | Type |\n+-------------+---------+\n| id | int |\n| num | varchar |\n+-------------+---------+\nid is the primary key for this table.\nWrite an SQL query to find all numbers that appear at least three times consecutively.\nReturn the result table in any order.\nThe query result format is in the following example.", "examples": [{"full_text": "Example 1:\nInput:\nLogs table:\n+----+-----+\n| id | num |\n+----+-----+\n| 1 | 1 |\n| 2 | 1 |\n| 3 | 1 |\n| 4 | 2 |\n| 5 | 1 |\n| 6 | 2 |\n| 7 | 2 |\n+----+-----+\nOutput:\n+-----------------+\n| ConsecutiveNums |\n+-----------------+\n| 1 |\n+-----------------+\nExplanation: 1 is the only number that appears consecutively for at least three times.", "input": "Input:\nLogs table:\n+----+-----+\n| id | num |\n+----+-----+\n| 1 | 1 |\n| 2 | 1 |\n| 3 | 1 |\n| 4 | 2 |\n| 5 | 1 |\n| 6 | 2 |\n| 7 | 2 |\n+----+-----+", "output": "Output:\n+-----------------+\n| ConsecutiveNums |\n+-----------------+\n| 1 |\n+-----------------+", "explanation": "Explanation: 1 is the only number that appears consecutively for at least three times."}], "constraints": "", "notes": ""}, "179": {"label": "Medium", "title": "Largest Number", "tags": "algorithms,sort", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3248, "total_accepted": 298800.0, "total_submissions": 920000.0, "testcase_example": "'[10,2]'", "body": "Given a list of non-negative integers nums, arrange them such that they form the largest number and return it.\nSince the result may be very large, so you need to return a string instead of an integer.", "examples": [{"full_text": "Example 1:\nInput: nums = [10,2]\nOutput: \"210\"", "input": "Input: nums = [10,2]", "output": "Output: \"210\"", "explanation": ""}, {"full_text": "Example 2:\nInput: nums = [3,30,34,5,9]\nOutput: \"9534330\"", "input": "Input: nums = [3,30,34,5,9]", "output": "Output: \"9534330\"", "explanation": ""}], "constraints": "Constraints:\n1 <= nums.length <= 100\n0 <= nums[i] <= 10^9", "notes": ""}, "178": {"label": "Medium", "title": "Rank Scores", "tags": "database", "langs": "mssql,mysql,oraclesql", "related_topics": "database", "acceptance_ratio": 0.5639, "total_accepted": 207700.0, "total_submissions": 368300.0, "testcase_example": "'{\"headers\": {\"Scores\": [\"id\", \"score\"]}, \"rows\": {\"Scores\": [[1, 3.50], [2, 3.65], [3, 4.00], [4, 3.85], [5, 4.00], [6, 3.65]]}}'", "body": "Table: Scores\n+-------------+---------+\n| Column Name | Type |\n+-------------+---------+\n| id | int |\n| score | decimal |\n+-------------+---------+\nid is the primary key for this table.\nEach row of this table contains the score of a game. Score is a floating point value with two decimal places.\nWrite an SQL query to rank the scores. The ranking should be calculated according to the following rules:\nThe scores should be ranked from the highest to the lowest.\nIf there is a tie between two scores, both should have the same ranking.\nAfter a tie, the next ranking number should be the next consecutive integer value. In other words, there should be no holes between ranks.\nReturn the result table ordered by score in descending order.\nThe query result format is in the following example.", "examples": [{"full_text": "Example 1:\nInput:\nScores table:\n+----+-------+\n| id | score |\n+----+-------+\n| 1 | 3.50 |\n| 2 | 3.65 |\n| 3 | 4.00 |\n| 4 | 3.85 |\n| 5 | 4.00 |\n| 6 | 3.65 |\n+----+-------+\nOutput:\n+-------+------+\n| score | rank |\n+-------+------+\n| 4.00 | 1 |\n| 4.00 | 1 |\n| 3.85 | 2 |\n| 3.65 | 3 |\n| 3.65 | 3 |\n| 3.50 | 4 |\n+-------+------+", "input": "Input:\nScores table:\n+----+-------+\n| id | score |\n+----+-------+\n| 1 | 3.50 |\n| 2 | 3.65 |\n| 3 | 4.00 |\n| 4 | 3.85 |\n| 5 | 4.00 |\n| 6 | 3.65 |\n+----+-------+", "output": "Output:\n+-------+------+\n| score | rank |\n+-------+------+\n| 4.00 | 1 |\n| 4.00 | 1 |\n| 3.85 | 2 |\n| 3.65 | 3 |\n| 3.65 | 3 |\n| 3.50 | 4 |\n+-------+------+", "explanation": ""}], "constraints": "", "notes": ""}, "177": {"label": "Medium", "title": "Nth Highest Salary", "tags": "database", "langs": "mssql,mysql,oraclesql", "related_topics": "database", "acceptance_ratio": 0.35700000000000004, "total_accepted": 220400.0, "total_submissions": 617500.0, "testcase_example": "'{\"headers\": {\"Employee\": [\"id\", \"salary\"]}, \"argument\": 2, \"rows\": {\"Employee\": [[1, 100], [2, 200], [3, 300]]}}'", "body": "Table: Employee\n+-------------+------+\n| Column Name | Type |\n+-------------+------+\n| id | int |\n| salary | int |\n+-------------+------+\nid is the primary key column for this table.\nEach row of this table contains information about the salary of an employee.\nWrite an SQL query to report the n^th highest salary from the Employee table. If there is no n^th highest salary, the query should report null.\nThe query result format is in the following example.", "examples": [{"full_text": "Example 1:\nInput:\nEmployee table:\n+----+--------+\n| id | salary |\n+----+--------+\n| 1 | 100 |\n| 2 | 200 |\n| 3 | 300 |\n+----+--------+\nn = 2\nOutput:\n+------------------------+\n| getNthHighestSalary(2) |\n+------------------------+\n| 200 |\n+------------------------+", "input": "Input:\nEmployee table:\n+----+--------+\n| id | salary |\n+----+--------+\n| 1 | 100 |\n| 2 | 200 |\n| 3 | 300 |\n+----+--------+\nn = 2", "output": "Output:\n+------------------------+\n| getNthHighestSalary(2) |\n+------------------------+\n| 200 |\n+------------------------+", "explanation": ""}, {"full_text": "Example 2:\nInput:\nEmployee table:\n+----+--------+\n| id | salary |\n+----+--------+\n| 1 | 100 |\n+----+--------+\nn = 2\nOutput:\n+------------------------+\n| getNthHighestSalary(2) |\n+------------------------+\n| null |\n+------------------------+", "input": "Input:\nEmployee table:\n+----+--------+\n| id | salary |\n+----+--------+\n| 1 | 100 |\n+----+--------+\nn = 2", "output": "Output:\n+------------------------+\n| getNthHighestSalary(2) |\n+------------------------+\n| null |\n+------------------------+", "explanation": ""}], "constraints": "", "notes": ""}, "176": {"label": "Medium", "title": "Second Highest Salary", "tags": "database", "langs": "mssql,mysql,oraclesql", "related_topics": "database", "acceptance_ratio": 0.3502, "total_accepted": 438000.0, "total_submissions": 1300000.0, "testcase_example": "'{\"headers\":{\"Employee\":[\"id\",\"salary\"]},\"rows\":{\"Employee\":[[1,100],[2,200],[3,300]]}}'", "body": "Table: Employee\n+-------------+------+\n| Column Name | Type |\n+-------------+------+\n| id | int |\n| salary | int |\n+-------------+------+\nid is the primary key column for this table.\nEach row of this table contains information about the salary of an employee.\nWrite an SQL query to report the second highest salary from the Employee table. If there is no second highest salary, the query should report null.\nThe query result format is in the following example.", "examples": [{"full_text": "Example 1:\nInput:\nEmployee table:\n+----+--------+\n| id | salary |\n+----+--------+\n| 1 | 100 |\n| 2 | 200 |\n| 3 | 300 |\n+----+--------+\nOutput:\n+---------------------+\n| SecondHighestSalary |\n+---------------------+\n| 200 |\n+---------------------+", "input": "Input:\nEmployee table:\n+----+--------+\n| id | salary |\n+----+--------+\n| 1 | 100 |\n| 2 | 200 |\n| 3 | 300 |\n+----+--------+", "output": "Output:\n+---------------------+\n| SecondHighestSalary |\n+---------------------+\n| 200 |\n+---------------------+", "explanation": ""}, {"full_text": "Example 2:\nInput:\nEmployee table:\n+----+--------+\n| id | salary |\n+----+--------+\n| 1 | 100 |\n+----+--------+\nOutput:\n+---------------------+\n| SecondHighestSalary |\n+---------------------+\n| null |\n+---------------------+", "input": "Input:\nEmployee table:\n+----+--------+\n| id | salary |\n+----+--------+\n| 1 | 100 |\n+----+--------+", "output": "Output:\n+---------------------+\n| SecondHighestSalary |\n+---------------------+\n| null |\n+---------------------+", "explanation": ""}], "constraints": "", "notes": ""}, "173": {"label": "Medium", "title": "Binary Search Tree Iterator", "tags": "algorithms,facebook,google,linkedin,microsoft,design,stack,tree", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6486, "total_accepted": 501900.0, "total_submissions": 773800.0, "testcase_example": "'[\"BSTIterator\",\"next\",\"next\",\"hasNext\",\"next\",\"hasNext\",\"next\",\"hasNext\",\"next\",\"hasNext\"]\\n' +\n  '[[[7,3,15,null,null,9,20]],[],[],[],[],[],[],[],[],[]]'", "body": "Implement the BSTIterator class that represents an iterator over the in-order traversal of a binary search tree (BST):\nBSTIterator(TreeNode root) Initializes an object of the BSTIterator class. The root of the BST is given as part of the constructor. The pointer should be initialized to a non-existent number smaller than any element in the BST.\nboolean hasNext() Returns true if there exists a number in the traversal to the right of the pointer, otherwise returns false.\nint next() Moves the pointer to the right, then returns the number at the pointer.\nNotice that by initializing the pointer to a non-existent smallest number, the first call to next() will return the smallest element in the BST.\nYou may assume that next() calls will always be valid. That is, there will be at least a next number in the in-order traversal when next() is called.", "examples": [{"full_text": "Example 1:\nInput\n[\"BSTIterator\", \"next\", \"next\", \"hasNext\", \"next\", \"hasNext\", \"next\", \"hasNext\", \"next\", \"hasNext\"]\n[[[7, 3, 15, null, null, 9, 20]], [], [], [], [], [], [], [], [], []]\nOutput\n[null, 3, 7, true, 9, true, 15, true, 20, false]\nExplanation\nBSTIterator bSTIterator = new BSTIterator([7, 3, 15, null, null, 9, 20]);\nbSTIterator.next(); // return 3\nbSTIterator.next(); // return 7\nbSTIterator.hasNext(); // return True\nbSTIterator.next(); // return 9\nbSTIterator.hasNext(); // return True\nbSTIterator.next(); // return 15\nbSTIterator.hasNext(); // return True\nbSTIterator.next(); // return 20\nbSTIterator.hasNext(); // return False", "input": "Input\n[\"BSTIterator\", \"next\", \"next\", \"hasNext\", \"next\", \"hasNext\", \"next\", \"hasNext\", \"next\", \"hasNext\"]\n[[[7, 3, 15, null, null, 9, 20]], [], [], [], [], [], [], [], [], []]", "output": "Output\n[null, 3, 7, true, 9, true, 15, true, 20, false]", "explanation": "Explanation\nBSTIterator bSTIterator = new BSTIterator([7, 3, 15, null, null, 9, 20]);\nbSTIterator.next(); // return 3\nbSTIterator.next(); // return 7\nbSTIterator.hasNext(); // return True\nbSTIterator.next(); // return 9\nbSTIterator.hasNext(); // return True\nbSTIterator.next(); // return 15\nbSTIterator.hasNext(); // return True\nbSTIterator.next(); // return 20\nbSTIterator.hasNext(); // return False"}], "constraints": "Constraints:\nThe number of nodes in the tree is in the range [1, 10^5].\n0 <= Node.val <= 10^6\nAt most 10^5 calls will be made to hasNext, and next.\nFollow up:\nCould you implement next() and hasNext() to run in average O(1) time and use\nO(h) memory, where h is the height of the tree?", "notes": ""}, "172": {"label": "Medium", "title": "Factorial Trailing Zeroes", "tags": "algorithms,bloomberg,math", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4044, "total_accepted": 305800.0, "total_submissions": 756300.0, "testcase_example": "'3'", "body": "Given an integer n, return the number of trailing zeroes in n!.\nNote that n! = n * (n - 1) * (n - 2) * ... * 3 * 2 * 1.", "examples": [{"full_text": "Example 1:\nInput: n = 3\nOutput: 0\nExplanation: 3! = 6, no trailing zero.", "input": "Input: n = 3", "output": "Output: 0", "explanation": "Explanation: 3! = 6, no trailing zero."}, {"full_text": "Example 2:\nInput: n = 5\nOutput: 1\nExplanation: 5! = 120, one trailing zero.", "input": "Input: n = 5", "output": "Output: 1", "explanation": "Explanation: 5! = 120, one trailing zero."}, {"full_text": "Example 3:\nInput: n = 0\nOutput: 0", "input": "Input: n = 0", "output": "Output: 0", "explanation": ""}], "constraints": "Constraints:\n0 <= n <= 10^4\nFollow up: Could you write a solution that works in logarithmic time complexity?", "notes": ""}, "167": {"label": "Medium", "title": "Two Sum II - Input Array Is Sorted", "tags": "algorithms,amazon,array,binary-search,two-pointers", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5820000000000001, "total_accepted": 855800.0, "total_submissions": 1500000.0, "testcase_example": "'[2,7,11,15]\\n9'", "body": "Given a 1-indexed array of integers numbers that is already sorted in non-decreasing order, find two numbers such that they add up to a specific target number. Let these two numbers be numbers[index1] and numbers[index2] where 1 <= index1 < index2 <= numbers.length.\nReturn the indices of the two numbers, index1 and index2, added by one as an integer array [index1, index2] of length 2.\nThe tests are generated such that there is exactly one solution. You may not use the same element twice.\nYour solution must use only constant extra space.", "examples": [{"full_text": "Example 1:\nInput: numbers = [2,7,11,15], target = 9\nOutput: [1,2]\nExplanation: The sum of 2 and 7 is 9. Therefore, index1 = 1, index2 = 2. We return [1, 2].", "input": "Input: numbers = [2,7,11,15], target = 9", "output": "Output: [1,2]", "explanation": "Explanation: The sum of 2 and 7 is 9. Therefore, index1 = 1, index2 = 2. We return [1, 2]."}, {"full_text": "Example 2:\nInput: numbers = [2,3,4], target = 6\nOutput: [1,3]\nExplanation: The sum of 2 and 4 is 6. Therefore index1 = 1, index2 = 3. We return [1, 3].", "input": "Input: numbers = [2,3,4], target = 6", "output": "Output: [1,3]", "explanation": "Explanation: The sum of 2 and 4 is 6. Therefore index1 = 1, index2 = 3. We return [1, 3]."}, {"full_text": "Example 3:\nInput: numbers = [-1,0], target = -1\nOutput: [1,2]\nExplanation: The sum of -1 and 0 is -1. Therefore index1 = 1, index2 = 2. We return [1, 2].", "input": "Input: numbers = [-1,0], target = -1", "output": "Output: [1,2]", "explanation": "Explanation: The sum of -1 and 0 is -1. Therefore index1 = 1, index2 = 2. We return [1, 2]."}], "constraints": "Constraints:\n2 <= numbers.length <= 3 * 10^4\n-1000 <= numbers[i] <= 1000\nnumbers is sorted in non-decreasing order.\n-1000 <= target <= 1000\nThe tests are generated such that there is exactly one solution.", "notes": ""}, "166": {"label": "Medium", "title": "Fraction to Recurring Decimal", "tags": "algorithms,google,hash-table,math", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.23379999999999998, "total_accepted": 176200.0, "total_submissions": 753600.0, "testcase_example": "'1\\n2'", "body": "Given two integers representing the numerator and denominator of a fraction, return the fraction in string format.\nIf the fractional part is repeating, enclose the repeating part in parentheses.\nIf multiple answers are possible, return any of them.\nIt is guaranteed that the length of the answer string is less than 10^4 for all the given inputs.", "examples": [{"full_text": "Example 1:\nInput: numerator = 1, denominator = 2\nOutput: \"0.5\"", "input": "Input: numerator = 1, denominator = 2", "output": "Output: \"0.5\"", "explanation": ""}, {"full_text": "Example 2:\nInput: numerator = 2, denominator = 1\nOutput: \"2\"", "input": "Input: numerator = 2, denominator = 1", "output": "Output: \"2\"", "explanation": ""}, {"full_text": "Example 3:\nInput: numerator = 4, denominator = 333\nOutput: \"0.(012)\"", "input": "Input: numerator = 4, denominator = 333", "output": "Output: \"0.(012)\"", "explanation": ""}], "constraints": "Constraints:\n-2^31 <=\nnumerator, denominator <= 2^31 - 1\ndenominator != 0", "notes": ""}, "165": {"label": "Medium", "title": "Compare Version Numbers", "tags": "algorithms,apple,microsoft,string", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3251, "total_accepted": 274400.0, "total_submissions": 844100.0, "testcase_example": "'\"1.01\"\\n\"1.001\"'", "body": "Given two version numbers,\nversion1 and version2, compare them.\nVersion numbers consist of one or more revisions joined by a dot\n'.'. Each revision\nconsists of digits\nand may contain leading zeros. Every revision contains at least one character. Revisions are 0-indexed from left to right, with the leftmost revision being revision 0, the next revision being revision 1, and so on. For example\n2.5.33\nand\n0.1\nare valid version numbers.\nTo compare version numbers, compare their revisions in left-to-right order. Revisions are compared using their\ninteger value ignoring any leading zeros. This means that revisions\n1\nand\n001\nare considered\nequal. If a version number does not specify a revision at an index, then\ntreat the revision as\n0. For example, version\n1.0 is less than version\n1.1\nbecause their revision 0s are the same, but their revision 1s are\n0\nand\n1\nrespectively, and\n0 < 1.\nReturn the following:\nIf version1 < version2, return -1.\nIf version1 > version2, return 1.\nOtherwise, return 0.", "examples": [{"full_text": "Example 1:\nInput: version1 = \"1.01\", version2 = \"1.001\"\nOutput: 0\nExplanation: Ignoring leading zeroes, both \"01\" and \"001\" represent the same integer \"1\".", "input": "Input: version1 = \"1.01\", version2 = \"1.001\"", "output": "Output: 0", "explanation": "Explanation: Ignoring leading zeroes, both \"01\" and \"001\" represent the same integer \"1\"."}, {"full_text": "Example 2:\nInput: version1 = \"1.0\", version2 = \"1.0.0\"\nOutput: 0\nExplanation: version1 does not specify revision 2, which means it is treated as \"0\".", "input": "Input: version1 = \"1.0\", version2 = \"1.0.0\"", "output": "Output: 0", "explanation": "Explanation: version1 does not specify revision 2, which means it is treated as \"0\"."}, {"full_text": "Example 3:\nInput: version1 = \"0.1\", version2 = \"1.1\"\nOutput: -1\nExplanation: version1's revision 0 is \"0\", while version2's revision 0 is \"1\". 0 < 1, so version1 < version2.", "input": "Input: version1 = \"0.1\", version2 = \"1.1\"", "output": "Output: -1", "explanation": "Explanation: version1's revision 0 is \"0\", while version2's revision 0 is \"1\". 0 < 1, so version1 < version2."}], "constraints": "Constraints:\n1 <= version1.length, version2.length <= 500\nversion1 and version2\nonly contain digits and '.'.\nversion1 and version2\nare valid version numbers.\nAll the given revisions in\nversion1 and version2\ncan be stored in\na\n32-bit integer.", "notes": ""}, "162": {"label": "Medium", "title": "Find Peak Element", "tags": "algorithms,google,microsoft,array,binary-search", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.45630000000000004, "total_accepted": 713900.0, "total_submissions": 1600000.0, "testcase_example": "'[1,2,3,1]'", "body": "A peak element is an element that is strictly greater than its neighbors.\nGiven an integer array nums, find a peak element, and return its index. If\nthe array contains multiple peaks, return the index to any of the peaks.\nYou may imagine that nums[-1] = nums[n] = -\u221e.\nYou must write an algorithm that runs in\nO(log n) time.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,2,3,1]\nOutput: 2\nExplanation: 3 is a peak element and your function should return the index number 2.", "input": "Input: nums = [1,2,3,1]", "output": "Output: 2", "explanation": "Explanation: 3 is a peak element and your function should return the index number 2."}, {"full_text": "Example 2:\nInput: nums = [1,2,1,3,5,6,4]\nOutput: 5\nExplanation: Your function can return either index number 1 where the peak element is 2, or index number 5 where the peak element is 6.", "input": "Input: nums = [1,2,1,3,5,6,4]", "output": "Output: 5", "explanation": "Explanation: Your function can return either index number 1 where the peak element is 2, or index number 5 where the peak element is 6."}], "constraints": "Constraints:\n1 <= nums.length <= 1000\n-2^31 <= nums[i] <= 2^31 - 1\nnums[i] != nums[i + 1] for all valid i.", "notes": ""}, "153": {"label": "Medium", "title": "Find Minimum in Rotated Sorted Array", "tags": "algorithms,microsoft,array,binary-search", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.47700000000000004, "total_accepted": 835300.0, "total_submissions": 1800000.0, "testcase_example": "'[3,4,5,1,2]'", "body": "Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,2,4,5,6,7] might become:\n[4,5,6,7,0,1,2] if it was rotated 4 times.\n[0,1,2,4,5,6,7] if it was rotated 7 times.\nNotice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].\nGiven the sorted rotated array nums of unique elements, return the minimum element of this array.\nYou must write an algorithm that runs in\nO(log n) time.", "examples": [{"full_text": "Example 1:\nInput: nums = [3,4,5,1,2]\nOutput: 1\nExplanation: The original array was [1,2,3,4,5] rotated 3 times.", "input": "Input: nums = [3,4,5,1,2]", "output": "Output: 1", "explanation": "Explanation: The original array was [1,2,3,4,5] rotated 3 times."}, {"full_text": "Example 2:\nInput: nums = [4,5,6,7,0,1,2]\nOutput: 0\nExplanation: The original array was [0,1,2,4,5,6,7] and it was rotated 4 times.", "input": "Input: nums = [4,5,6,7,0,1,2]", "output": "Output: 0", "explanation": "Explanation: The original array was [0,1,2,4,5,6,7] and it was rotated 4 times."}, {"full_text": "Example 3:\nInput: nums = [11,13,15,17]\nOutput: 11\nExplanation: The original array was [11,13,15,17] and it was rotated 4 times.", "input": "Input: nums = [11,13,15,17]", "output": "Output: 11", "explanation": "Explanation: The original array was [11,13,15,17] and it was rotated 4 times."}], "constraints": "Constraints:\nn == nums.length\n1 <= n <= 5000\n-5000 <= nums[i] <= 5000\nAll the integers of nums are unique.\nnums is sorted and rotated between 1 and n times.", "notes": ""}, "152": {"label": "Medium", "title": "Maximum Product Subarray", "tags": "algorithms,linkedin,array,dynamic-programming", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.34380000000000005, "total_accepted": 675900.0, "total_submissions": 2000000.0, "testcase_example": "'[2,3,-2,4]'", "body": "Given an integer array nums, find a contiguous non-empty subarray within the array that has the largest product, and return the product.\nThe test cases are generated so that the answer will fit in a 32-bit integer.\nA subarray is a contiguous subsequence of the array.", "examples": [{"full_text": "Example 1:\nInput: nums = [2,3,-2,4]\nOutput: 6\nExplanation: [2,3] has the largest product 6.", "input": "Input: nums = [2,3,-2,4]", "output": "Output: 6", "explanation": "Explanation: [2,3] has the largest product 6."}, {"full_text": "Example 2:\nInput: nums = [-2,0,-1]\nOutput: 0\nExplanation: The result cannot be 2, because [-2,-1] is not a subarray.", "input": "Input: nums = [-2,0,-1]", "output": "Output: 0", "explanation": "Explanation: The result cannot be 2, because [-2,-1] is not a subarray."}], "constraints": "Constraints:\n1 <= nums.length <= 2 * 10^4\n-10 <= nums[i] <= 10\nThe product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.", "notes": ""}, "151": {"label": "Medium", "title": "Reverse Words in a String", "tags": "algorithms,apple,bloomberg,microsoft,snapchat,yelp,string", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.278, "total_accepted": 664200.0, "total_submissions": 2400000.0, "testcase_example": "'\"the sky is blue\"'", "body": "Given an input string s, reverse the order of the words.\nA word is defined as a sequence of non-space characters. The words in s will be separated by at least one space.\nReturn a string of the words in reverse order concatenated by a single space.\nNote that s may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words. Do not include any extra spaces.", "examples": [{"full_text": "Example 1:\nInput: s = \"the sky is blue\"\nOutput: \"blue is sky the\"", "input": "Input: s = \"the sky is blue\"", "output": "Output: \"blue is sky the\"", "explanation": ""}, {"full_text": "Example 2:\nInput: s = \" hello world \"\nOutput: \"world hello\"\nExplanation: Your reversed string should not contain leading or trailing spaces.", "input": "Input: s = \" hello world \"", "output": "Output: \"world hello\"", "explanation": "Explanation: Your reversed string should not contain leading or trailing spaces."}, {"full_text": "Example 3:\nInput: s = \"a good example\"\nOutput: \"example good a\"\nExplanation: You need to reduce multiple spaces between two words to a single space in the reversed string.", "input": "Input: s = \"a good example\"", "output": "Output: \"example good a\"", "explanation": "Explanation: You need to reduce multiple spaces between two words to a single space in the reversed string."}], "constraints": "Constraints:\n1 <= s.length <= 10^4\ns contains English letters (upper-case and lower-case), digits, and spaces ' '.\nThere is at least one word in s.", "notes": "Follow-up:\nIf the string data type is mutable in your language, can\nyou solve it\nin-place\nwith\nO(1)\nextra space?"}, "150": {"label": "Medium", "title": "Evaluate Reverse Polish Notation", "tags": "algorithms,linkedin,stack", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.41619999999999996, "total_accepted": 369900.0, "total_submissions": 888700.0, "testcase_example": "'[\"2\",\"1\",\"+\",\"3\",\"*\"]'", "body": "Evaluate the value of an arithmetic expression in Reverse Polish Notation.\nValid operators are +, -, *, and /. Each operand may be an integer or another expression.\nNote that division between two integers should truncate toward zero.\nIt is guaranteed that the given RPN expression is always valid. That means the expression would always evaluate to a result, and there will not be any division by zero operation.", "examples": [{"full_text": "Example 1:\nInput: tokens = [\"2\",\"1\",\"+\",\"3\",\"*\"]\nOutput: 9\nExplanation: ((2 + 1) * 3) = 9", "input": "Input: tokens = [\"2\",\"1\",\"+\",\"3\",\"*\"]", "output": "Output: 9", "explanation": "Explanation: ((2 + 1) * 3) = 9"}, {"full_text": "Example 2:\nInput: tokens = [\"4\",\"13\",\"5\",\"/\",\"+\"]\nOutput: 6\nExplanation: (4 + (13 / 5)) = 6", "input": "Input: tokens = [\"4\",\"13\",\"5\",\"/\",\"+\"]", "output": "Output: 6", "explanation": "Explanation: (4 + (13 / 5)) = 6"}, {"full_text": "Example 3:\nInput: tokens = [\"10\",\"6\",\"9\",\"3\",\"+\",\"-11\",\"*\",\"/\",\"*\",\"17\",\"+\",\"5\",\"+\"]\nOutput: 22\nExplanation: ((10 * (6 / ((9 + 3) * -11))) + 17) + 5\n= ((10 * (6 / (12 * -11))) + 17) + 5\n= ((10 * (6 / -132)) + 17) + 5\n= ((10 * 0) + 17) + 5\n= (0 + 17) + 5\n= 17 + 5\n= 22", "input": "Input: tokens = [\"10\",\"6\",\"9\",\"3\",\"+\",\"-11\",\"*\",\"/\",\"*\",\"17\",\"+\",\"5\",\"+\"]", "output": "Output: 22", "explanation": "Explanation: ((10 * (6 / ((9 + 3) * -11))) + 17) + 5\n= ((10 * (6 / (12 * -11))) + 17) + 5\n= ((10 * (6 / -132)) + 17) + 5\n= ((10 * 0) + 17) + 5\n= (0 + 17) + 5\n= 17 + 5\n= 22"}], "constraints": "Constraints:\n1 <= tokens.length <= 10^4\ntokens[i] is either an operator: \"+\", \"-\", \"*\", or \"/\", or an integer in the range [-200, 200].", "notes": ""}, "148": {"label": "Medium", "title": "Sort List", "tags": "algorithms,linked-list,sort", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5004, "total_accepted": 432700.0, "total_submissions": 864600.0, "testcase_example": "'[4,2,1,3]'", "body": "Given the head of a linked list, return the list after sorting it in ascending order.", "examples": [{"full_text": "Example 1:\nInput: head = [4,2,1,3]\nOutput: [1,2,3,4]", "input": "Input: head = [4,2,1,3]", "output": "Output: [1,2,3,4]", "explanation": ""}, {"full_text": "Example 2:\nInput: head = [-1,5,3,4,0]\nOutput: [-1,0,3,4,5]", "input": "Input: head = [-1,5,3,4,0]", "output": "Output: [-1,0,3,4,5]", "explanation": ""}, {"full_text": "Example 3:\nInput: head = []\nOutput: []", "input": "Input: head = []", "output": "Output: []", "explanation": ""}], "constraints": "Constraints:\nThe number of nodes in the list is in the range [0, 5 * 10^4].\n-10^5 <= Node.val <= 10^5\nFollow up: Can you sort the linked list in O(n logn) time and O(1) memory (i.e. constant space)?", "notes": ""}, "147": {"label": "Medium", "title": "Insertion Sort List", "tags": "algorithms,linked-list,sort", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.48369999999999996, "total_accepted": 276000.0, "total_submissions": 570600.0, "testcase_example": "'[4,2,1,3]'", "body": "Given the head of a singly linked list, sort the list using insertion sort, and return the sorted list's head.\nThe steps of the insertion sort algorithm:\nInsertion sort iterates, consuming one input element each repetition and growing a sorted output list.\nAt each iteration, insertion sort removes one element from the input data, finds the location it belongs within the sorted list and inserts it there.\nIt repeats until no input elements remain.\nThe following is a graphical example of the insertion sort algorithm. The partially sorted list (black) initially contains only the first element in the list. One element (red) is removed from the input data and inserted in-place into the sorted list with each iteration.", "examples": [{"full_text": "Example 1:\nInput: head = [4,2,1,3]\nOutput: [1,2,3,4]", "input": "Input: head = [4,2,1,3]", "output": "Output: [1,2,3,4]", "explanation": ""}, {"full_text": "Example 2:\nInput: head = [-1,5,3,4,0]\nOutput: [-1,0,3,4,5]", "input": "Input: head = [-1,5,3,4,0]", "output": "Output: [-1,0,3,4,5]", "explanation": ""}], "constraints": "Constraints:\nThe number of nodes in the list is in the range [1, 5000].\n-5000 <= Node.val <= 5000", "notes": ""}, "146": {"label": "Medium", "title": "LRU Cache", "tags": "algorithms,amazon,bloomberg,facebook,google,microsoft,palantir,snapchat,twitter,uber,yahoo,zenefits,design", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.39270000000000005, "total_accepted": 990000.0, "total_submissions": 2500000.0, "testcase_example": "'[\"LRUCache\",\"put\",\"put\",\"get\",\"put\",\"get\",\"put\",\"get\",\"get\",\"get\"]\\n' +\n  '[[2],[1,1],[2,2],[1],[3,3],[2],[4,4],[1],[3],[4]]'", "body": "Design a data structure that follows the constraints of a Least Recently Used (LRU) cache.\nImplement the LRUCache class:\nLRUCache(int capacity) Initialize the LRU cache with positive size capacity.\nint get(int key) Return the value of the key if the key exists, otherwise return -1.\nvoid put(int key, int value)\nUpdate the value of the key if the key exists. Otherwise, add the key-value pair to the cache. If the number of keys exceeds the capacity from this operation, evict the least recently used key.\nThe functions\nget\nand\nput\nmust each run in O(1) average time complexity.", "examples": [{"full_text": "Example 1:\nInput\n[\"LRUCache\", \"put\", \"put\", \"get\", \"put\", \"get\", \"put\", \"get\", \"get\", \"get\"]\n[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]\nOutput\n[null, null, null, 1, null, -1, null, -1, 3, 4]\nExplanation\nLRUCache lRUCache = new LRUCache(2);\nlRUCache.put(1, 1); // cache is {1=1}\nlRUCache.put(2, 2); // cache is {1=1, 2=2}\nlRUCache.get(1); // return 1\nlRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is {1=1, 3=3}\nlRUCache.get(2); // returns -1 (not found)\nlRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is {4=4, 3=3}\nlRUCache.get(1); // return -1 (not found)\nlRUCache.get(3); // return 3\nlRUCache.get(4); // return 4", "input": "Input\n[\"LRUCache\", \"put\", \"put\", \"get\", \"put\", \"get\", \"put\", \"get\", \"get\", \"get\"]\n[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]", "output": "Output\n[null, null, null, 1, null, -1, null, -1, 3, 4]", "explanation": "Explanation\nLRUCache lRUCache = new LRUCache(2);\nlRUCache.put(1, 1); // cache is {1=1}\nlRUCache.put(2, 2); // cache is {1=1, 2=2}\nlRUCache.get(1); // return 1\nlRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is {1=1, 3=3}\nlRUCache.get(2); // returns -1 (not found)\nlRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is {4=4, 3=3}\nlRUCache.get(1); // return -1 (not found)\nlRUCache.get(3); // return 3\nlRUCache.get(4); // return 4"}], "constraints": "Constraints:\n1 <= capacity <= 3000\n0 <= key <= 10^4\n0 <= value <= 10^5\nAt most 2\n* 10^5\ncalls will be made to get and put.", "notes": ""}, "143": {"label": "Medium", "title": "Reorder List", "tags": "algorithms,linked-list", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4671, "total_accepted": 441900.0, "total_submissions": 945800.0, "testcase_example": "'[1,2,3,4]'", "body": "You are given the head of a singly linked-list. The list can be represented as:\nL0 \u2192 L1 \u2192 \u2026 \u2192 Ln - 1 \u2192 Ln\nReorder the list to be on the following form:\nL0 \u2192 Ln \u2192 L1 \u2192 Ln - 1 \u2192 L2 \u2192 Ln - 2 \u2192 \u2026\nYou may not modify the values in the list's nodes. Only nodes themselves may be changed.", "examples": [{"full_text": "Example 1:\nInput: head = [1,2,3,4]\nOutput: [1,4,2,3]", "input": "Input: head = [1,2,3,4]", "output": "Output: [1,4,2,3]", "explanation": ""}, {"full_text": "Example 2:\nInput: head = [1,2,3,4,5]\nOutput: [1,5,2,4,3]", "input": "Input: head = [1,2,3,4,5]", "output": "Output: [1,5,2,4,3]", "explanation": ""}], "constraints": "Constraints:\nThe number of nodes in the list is in the range [1, 5 * 10^4].\n1 <= Node.val <= 1000", "notes": ""}, "142": {"label": "Medium", "title": "Linked List Cycle II", "tags": "algorithms,linked-list,two-pointers", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.43670000000000003, "total_accepted": 621500.0, "total_submissions": 1400000.0, "testcase_example": "'[3,2,0,-4]\\n1'", "body": "Given the head of a linked list, return the node where the cycle begins. If there is no cycle, return null.\nThere is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail's next pointer is connected to (0-indexed). It is -1 if there is no cycle. Note that pos is not passed as a parameter.\nDo not modify the linked list.", "examples": [{"full_text": "Example 1:\nInput: head = [3,2,0,-4], pos = 1\nOutput: tail connects to node index 1\nExplanation: There is a cycle in the linked list, where tail connects to the second node.", "input": "Input: head = [3,2,0,-4], pos = 1", "output": "Output: tail connects to node index 1", "explanation": "Explanation: There is a cycle in the linked list, where tail connects to the second node."}, {"full_text": "Example 2:\nInput: head = [1,2], pos = 0\nOutput: tail connects to node index 0\nExplanation: There is a cycle in the linked list, where tail connects to the first node.", "input": "Input: head = [1,2], pos = 0", "output": "Output: tail connects to node index 0", "explanation": "Explanation: There is a cycle in the linked list, where tail connects to the first node."}, {"full_text": "Example 3:\nInput: head = [1], pos = -1\nOutput: no cycle\nExplanation: There is no cycle in the linked list.", "input": "Input: head = [1], pos = -1", "output": "Output: no cycle", "explanation": "Explanation: There is no cycle in the linked list."}], "constraints": "Constraints:\nThe number of the nodes in the list is in the range [0, 10^4].\n-10^5 <= Node.val <= 10^5\npos is -1 or a valid index in the linked-list.\nFollow up: Can you solve it using O(1) (i.e. constant) memory?", "notes": ""}, "139": {"label": "Medium", "title": "Word Break", "tags": "algorithms,amazon,bloomberg,facebook,google,pocketgems,uber,yahoo,dynamic-programming", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4412, "total_accepted": 998800.0, "total_submissions": 2300000.0, "testcase_example": "'\"leetcode\"\\n[\"leet\",\"code\"]'", "body": "Given a string s and a dictionary of strings wordDict, return true if s can be segmented into a space-separated sequence of one or more dictionary words.\nNote that the same word in the dictionary may be reused multiple times in the segmentation.", "examples": [{"full_text": "Example 1:\nInput: s = \"leetcode\", wordDict = [\"leet\",\"code\"]\nOutput: true\nExplanation: Return true because \"leetcode\" can be segmented as \"leet code\".", "input": "Input: s = \"leetcode\", wordDict = [\"leet\",\"code\"]", "output": "Output: true", "explanation": "Explanation: Return true because \"leetcode\" can be segmented as \"leet code\"."}, {"full_text": "Example 2:\nInput: s = \"applepenapple\", wordDict = [\"apple\",\"pen\"]\nOutput: true\nExplanation: Return true because \"applepenapple\" can be segmented as \"apple pen apple\".\nNote that you are allowed to reuse a dictionary word.", "input": "Input: s = \"applepenapple\", wordDict = [\"apple\",\"pen\"]", "output": "Output: true", "explanation": "Explanation: Return true because \"applepenapple\" can be segmented as \"apple pen apple\".\nNote that you are allowed to reuse a dictionary word."}, {"full_text": "Example 3:\nInput: s = \"catsandog\", wordDict = [\"cats\",\"dog\",\"sand\",\"and\",\"cat\"]\nOutput: false", "input": "Input: s = \"catsandog\", wordDict = [\"cats\",\"dog\",\"sand\",\"and\",\"cat\"]", "output": "Output: false", "explanation": ""}], "constraints": "Constraints:\n1 <= s.length <= 300\n1 <= wordDict.length <= 1000\n1 <= wordDict[i].length <= 20\ns and wordDict[i] consist of only lowercase English letters.\nAll the strings of wordDict are unique.", "notes": ""}, "138": {"label": "Medium", "title": "Copy List with Random Pointer", "tags": "algorithms,amazon,bloomberg,microsoft,uber,hash-table,linked-list", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4622, "total_accepted": 708600.0, "total_submissions": 1500000.0, "testcase_example": "'[[7,null],[13,0],[11,4],[10,2],[1,0]]'", "body": "A linked list of length n is given such that each node contains an additional random pointer, which could point to any node in the list, or null.\nConstruct a deep copy of the list. The deep copy should consist of exactly n brand new nodes, where each new node has its value set to the value of its corresponding original node. Both the next and random pointer of the new nodes should point to new nodes in the copied list such that the pointers in the original list and copied list represent the same list state. None of the pointers in the new list should point to nodes in the original list.\nFor example, if there are two nodes X and Y in the original list, where X.random --> Y, then for the corresponding two nodes x and y in the copied list, x.random --> y.\nReturn the head of the copied linked list.\nThe linked list is represented in the input/output as a list of n nodes. Each node is represented as a pair of [val, random_index] where:\nval: an integer representing Node.val\nrandom_index: the index of the node (range from 0 to n-1) that the random pointer points to, or null if it does not point to any node.\nYour code will only be given the head of the original linked list.", "examples": [{"full_text": "Example 1:\nInput: head = [[7,null],[13,0],[11,4],[10,2],[1,0]]\nOutput: [[7,null],[13,0],[11,4],[10,2],[1,0]]", "input": "Input: head = [[7,null],[13,0],[11,4],[10,2],[1,0]]", "output": "Output: [[7,null],[13,0],[11,4],[10,2],[1,0]]", "explanation": ""}, {"full_text": "Example 2:\nInput: head = [[1,1],[2,1]]\nOutput: [[1,1],[2,1]]", "input": "Input: head = [[1,1],[2,1]]", "output": "Output: [[1,1],[2,1]]", "explanation": ""}, {"full_text": "Example 3:\nInput: head = [[3,null],[3,0],[3,null]]\nOutput: [[3,null],[3,0],[3,null]]", "input": "Input: head = [[3,null],[3,0],[3,null]]", "output": "Output: [[3,null],[3,0],[3,null]]", "explanation": ""}], "constraints": "Constraints:\n0 <= n <= 1000\n-10^4 <= Node.val <= 10^4\nNode.random is null or is pointing to some node in the linked list.", "notes": ""}, "137": {"label": "Medium", "title": "Single Number II", "tags": "algorithms,bit-manipulation", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5622, "total_accepted": 333600.0, "total_submissions": 593400.0, "testcase_example": "'[2,2,3,2]'", "body": "Given an integer array nums where\nevery element appears three times except for one, which appears exactly once. Find the single element and return it.\nYou must\nimplement a solution with a linear runtime complexity and use\nonly constant\nextra space.", "examples": [{"full_text": "Example 1:\nInput: nums = [2,2,3,2]\nOutput: 3", "input": "Input: nums = [2,2,3,2]", "output": "Output: 3", "explanation": ""}, {"full_text": "Example 2:\nInput: nums = [0,1,0,1,0,1,99]\nOutput: 99", "input": "Input: nums = [0,1,0,1,0,1,99]", "output": "Output: 99", "explanation": ""}], "constraints": "Constraints:\n1 <= nums.length <= 3 * 10^4\n-2^31 <= nums[i] <= 2^31 - 1\nEach element in nums appears exactly three times except for one element which appears once.", "notes": ""}, "134": {"label": "Medium", "title": "Gas Station", "tags": "algorithms,greedy", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4428, "total_accepted": 382400.0, "total_submissions": 863700.0, "testcase_example": "'[1,2,3,4,5]\\n[3,4,5,1,2]'", "body": "There are n gas stations along a circular route, where the amount of gas at the i^th station is gas[i].\nYou have a car with an unlimited gas tank and it costs cost[i] of gas to travel from the i^th station to its next (i + 1)^th station. You begin the journey with an empty tank at one of the gas stations.\nGiven two integer arrays gas and cost, return the starting gas station's index if you can travel around the circuit once in the clockwise direction, otherwise return -1. If there exists a solution, it is guaranteed to be unique", "examples": [{"full_text": "Example 1:\nInput: gas = [1,2,3,4,5], cost = [3,4,5,1,2]\nOutput: 3\nExplanation:\nStart at station 3 (index 3) and fill up with 4 unit of gas. Your tank = 0 + 4 = 4\nTravel to station 4. Your tank = 4 - 1 + 5 = 8\nTravel to station 0. Your tank = 8 - 2 + 1 = 7\nTravel to station 1. Your tank = 7 - 3 + 2 = 6\nTravel to station 2. Your tank = 6 - 4 + 3 = 5\nTravel to station 3. The cost is 5. Your gas is just enough to travel back to station 3.\nTherefore, return 3 as the starting index.", "input": "Input: gas = [1,2,3,4,5], cost = [3,4,5,1,2]", "output": "Output: 3", "explanation": "Explanation:\nStart at station 3 (index 3) and fill up with 4 unit of gas. Your tank = 0 + 4 = 4\nTravel to station 4. Your tank = 4 - 1 + 5 = 8\nTravel to station 0. Your tank = 8 - 2 + 1 = 7\nTravel to station 1. Your tank = 7 - 3 + 2 = 6\nTravel to station 2. Your tank = 6 - 4 + 3 = 5\nTravel to station 3. The cost is 5. Your gas is just enough to travel back to station 3.\nTherefore, return 3 as the starting index."}, {"full_text": "Example 2:\nInput: gas = [2,3,4], cost = [3,4,3]\nOutput: -1\nExplanation:\nYou can't start at station 0 or 1, as there is not enough gas to travel to the next station.\nLet's start at station 2 and fill up with 4 unit of gas. Your tank = 0 + 4 = 4\nTravel to station 0. Your tank = 4 - 3 + 2 = 3\nTravel to station 1. Your tank = 3 - 3 + 3 = 3\nYou cannot travel back to station 2, as it requires 4 unit of gas but you only have 3.\nTherefore, you can't travel around the circuit once no matter where you start.", "input": "Input: gas = [2,3,4], cost = [3,4,3]", "output": "Output: -1", "explanation": "Explanation:\nYou can't start at station 0 or 1, as there is not enough gas to travel to the next station.\nLet's start at station 2 and fill up with 4 unit of gas. Your tank = 0 + 4 = 4\nTravel to station 0. Your tank = 4 - 3 + 2 = 3\nTravel to station 1. Your tank = 3 - 3 + 3 = 3\nYou cannot travel back to station 2, as it requires 4 unit of gas but you only have 3.\nTherefore, you can't travel around the circuit once no matter where you start."}], "constraints": "Constraints:\ngas.length == n\ncost.length == n\n1 <= n <= 10^5\n0 <= gas[i], cost[i] <= 10^4", "notes": ""}, "133": {"label": "Medium", "title": "Clone Graph", "tags": "algorithms,facebook,google,pocketgems,uber,breadth-first-search,depth-first-search,graph", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4545, "total_accepted": 628800.0, "total_submissions": 1400000.0, "testcase_example": "'[[2,4],[1,3],[2,4],[1,3]]'", "body": "Given a reference of a node in a connected undirected graph.\nReturn a deep copy (clone) of the graph.\nEach node in the graph contains a value (int) and a list (List[Node]) of its neighbors.\nclass Node {\npublic int val;\npublic List<Node> neighbors;\n}\nTest case format:\nFor simplicity, each node's value is the same as the node's index (1-indexed). For example, the first node with val == 1, the second node with val == 2, and so on. The graph is represented in the test case using an adjacency list.\nAn adjacency list is a collection of unordered lists used to represent a finite graph. Each list describes the set of neighbors of a node in the graph.\nThe given node will always be the first node with val = 1. You must return the copy of the given node as a reference to the cloned graph.", "examples": [{"full_text": "Example 1:\nInput: adjList = [[2,4],[1,3],[2,4],[1,3]]\nOutput: [[2,4],[1,3],[2,4],[1,3]]\nExplanation: There are 4 nodes in the graph.\n1st node (val = 1)'s neighbors are 2nd node (val = 2) and 4th node (val = 4).\n2nd node (val = 2)'s neighbors are 1st node (val = 1) and 3rd node (val = 3).\n3rd node (val = 3)'s neighbors are 2nd node (val = 2) and 4th node (val = 4).\n4th node (val = 4)'s neighbors are 1st node (val = 1) and 3rd node (val = 3).", "input": "Input: adjList = [[2,4],[1,3],[2,4],[1,3]]", "output": "Output: [[2,4],[1,3],[2,4],[1,3]]", "explanation": "Explanation: There are 4 nodes in the graph.\n1st node (val = 1)'s neighbors are 2nd node (val = 2) and 4th node (val = 4).\n2nd node (val = 2)'s neighbors are 1st node (val = 1) and 3rd node (val = 3).\n3rd node (val = 3)'s neighbors are 2nd node (val = 2) and 4th node (val = 4).\n4th node (val = 4)'s neighbors are 1st node (val = 1) and 3rd node (val = 3)."}, {"full_text": "Example 2:\nInput: adjList = [[]]\nOutput: [[]]\nExplanation: Note that the input contains one empty list. The graph consists of only one node with val = 1 and it does not have any neighbors.", "input": "Input: adjList = [[]]", "output": "Output: [[]]", "explanation": "Explanation: Note that the input contains one empty list. The graph consists of only one node with val = 1 and it does not have any neighbors."}, {"full_text": "Example 3:\nInput: adjList = []\nOutput: []\nExplanation: This an empty graph, it does not have any nodes.", "input": "Input: adjList = []", "output": "Output: []", "explanation": "Explanation: This an empty graph, it does not have any nodes."}], "constraints": "Constraints:\nThe number of nodes in the graph is in the range [0, 100].\n1 <= Node.val <= 100\nNode.val is unique for each node.\nThere are no repeated edges and no self-loops in the graph.\nThe Graph is connected and all nodes can be visited starting from the given node.", "notes": ""}, "131": {"label": "Medium", "title": "Palindrome Partitioning", "tags": "algorithms,bloomberg,backtracking", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5854, "total_accepted": 423900.0, "total_submissions": 724000.0, "testcase_example": "'\"aab\"'", "body": "Given a string s, partition s such that every substring of the partition is a palindrome. Return all possible palindrome partitioning of s.\nA palindrome string is a string that reads the same backward as forward.", "examples": [{"full_text": "Example 1:\nInput: s = \"aab\"\nOutput: [[\"a\",\"a\",\"b\"],[\"aa\",\"b\"]]", "input": "Input: s = \"aab\"", "output": "Output: [[\"a\",\"a\",\"b\"],[\"aa\",\"b\"]]", "explanation": ""}, {"full_text": "Example 2:\nInput: s = \"a\"\nOutput: [[\"a\"]]", "input": "Input: s = \"a\"", "output": "Output: [[\"a\"]]", "explanation": ""}], "constraints": "Constraints:\n1 <= s.length <= 16\ns contains only lowercase English letters.", "notes": ""}, "130": {"label": "Medium", "title": "Surrounded Regions", "tags": "algorithms,breadth-first-search,depth-first-search,union-find", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.33399999999999996, "total_accepted": 389500.0, "total_submissions": 1200000.0, "testcase_example": "'[[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"O\",\"O\",\"X\"],[\"X\",\"X\",\"O\",\"X\"],[\"X\",\"O\",\"X\",\"X\"]]'", "body": "Given an m x n matrix board containing 'X' and 'O', capture all regions that are 4-directionally\nsurrounded by 'X'.\nA region is captured by flipping all 'O's into 'X's in that surrounded region.", "examples": [{"full_text": "Example 1:\nInput: board = [[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"O\",\"O\",\"X\"],[\"X\",\"X\",\"O\",\"X\"],[\"X\",\"O\",\"X\",\"X\"]]\nOutput: [[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"O\",\"X\",\"X\"]]\nExplanation: Surrounded regions should not be on the border, which means that any 'O' on the border of the board are not flipped to 'X'. Any 'O' that is not on the border and it is not connected to an 'O' on the border will be flipped to 'X'. Two cells are connected if they are adjacent cells connected horizontally or vertically.", "input": "Input: board = [[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"O\",\"O\",\"X\"],[\"X\",\"X\",\"O\",\"X\"],[\"X\",\"O\",\"X\",\"X\"]]", "output": "Output: [[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"O\",\"X\",\"X\"]]", "explanation": "Explanation: Surrounded regions should not be on the border, which means that any 'O' on the border of the board are not flipped to 'X'. Any 'O' that is not on the border and it is not connected to an 'O' on the border will be flipped to 'X'. Two cells are connected if they are adjacent cells connected horizontally or vertically."}, {"full_text": "Example 2:\nInput: board = [[\"X\"]]\nOutput: [[\"X\"]]", "input": "Input: board = [[\"X\"]]", "output": "Output: [[\"X\"]]", "explanation": ""}], "constraints": "Constraints:\nm == board.length\nn == board[i].length\n1 <= m, n <= 200\nboard[i][j] is 'X' or 'O'.", "notes": ""}, "129": {"label": "Medium", "title": "Sum Root to Leaf Numbers", "tags": "algorithms,depth-first-search,tree", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.561, "total_accepted": 431600.0, "total_submissions": 769300.0, "testcase_example": "'[1,2,3]'", "body": "You are given the root of a binary tree containing digits from 0 to 9 only.\nEach root-to-leaf path in the tree represents a number.\nFor example, the root-to-leaf path 1 -> 2 -> 3 represents the number 123.\nReturn the total sum of all root-to-leaf numbers. Test cases are generated so that the answer will fit in a 32-bit integer.\nA leaf node is a node with no children.", "examples": [{"full_text": "Example 1:\nInput: root = [1,2,3]\nOutput: 25\nExplanation:\nThe root-to-leaf path 1->2 represents the number 12.\nThe root-to-leaf path 1->3 represents the number 13.\nTherefore, sum = 12 + 13 = 25.", "input": "Input: root = [1,2,3]", "output": "Output: 25", "explanation": "Explanation:\nThe root-to-leaf path 1->2 represents the number 12.\nThe root-to-leaf path 1->3 represents the number 13.\nTherefore, sum = 12 + 13 = 25."}, {"full_text": "Example 2:\nInput: root = [4,9,0,5,1]\nOutput: 1026\nExplanation:\nThe root-to-leaf path 4->9->5 represents the number 495.\nThe root-to-leaf path 4->9->1 represents the number 491.\nThe root-to-leaf path 4->0 represents the number 40.\nTherefore, sum = 495 + 491 + 40 = 1026.", "input": "Input: root = [4,9,0,5,1]", "output": "Output: 1026", "explanation": "Explanation:\nThe root-to-leaf path 4->9->5 represents the number 495.\nThe root-to-leaf path 4->9->1 represents the number 491.\nThe root-to-leaf path 4->0 represents the number 40.\nTherefore, sum = 495 + 491 + 40 = 1026."}], "constraints": "Constraints:\nThe number of nodes in the tree is in the range [1, 1000].\n0 <= Node.val <= 9\nThe depth of the tree will not exceed 10.", "notes": ""}, "128": {"label": "Medium", "title": "Longest Consecutive Sequence", "tags": "algorithms,facebook,google,array,union-find", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4843, "total_accepted": 598400.0, "total_submissions": 1200000.0, "testcase_example": "'[100,4,200,1,3,2]'", "body": "Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence.\nYou must write an algorithm that runs in\nO(n)\ntime.", "examples": [{"full_text": "Example 1:\nInput: nums = [100,4,200,1,3,2]\nOutput: 4\nExplanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.", "input": "Input: nums = [100,4,200,1,3,2]", "output": "Output: 4", "explanation": "Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4."}, {"full_text": "Example 2:\nInput: nums = [0,3,7,2,5,8,4,6,0,1]\nOutput: 9", "input": "Input: nums = [0,3,7,2,5,8,4,6,0,1]", "output": "Output: 9", "explanation": ""}], "constraints": "Constraints:\n0 <= nums.length <= 10^5\n-10^9 <= nums[i] <= 10^9", "notes": ""}, "122": {"label": "Medium", "title": "Best Time to Buy and Sell Stock II", "tags": "algorithms,bloomberg,array,greedy", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.615, "total_accepted": 1100000.0, "total_submissions": 1800000.0, "testcase_example": "'[7,1,5,3,6,4]'", "body": "You are given an integer array prices where prices[i] is the price of a given stock on the i^th day.\nOn each day, you may decide to buy and/or sell the stock. You can only hold at most one share of the stock at any time. However, you can buy it then immediately sell it on the same day.\nFind and return the maximum profit you can achieve.", "examples": [{"full_text": "Example 1:\nInput: prices = [7,1,5,3,6,4]\nOutput: 7\nExplanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.\nThen buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.\nTotal profit is 4 + 3 = 7.", "input": "Input: prices = [7,1,5,3,6,4]", "output": "Output: 7", "explanation": "Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.\nThen buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.\nTotal profit is 4 + 3 = 7."}, {"full_text": "Example 2:\nInput: prices = [1,2,3,4,5]\nOutput: 4\nExplanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.\nTotal profit is 4.", "input": "Input: prices = [1,2,3,4,5]", "output": "Output: 4", "explanation": "Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.\nTotal profit is 4."}, {"full_text": "Example 3:\nInput: prices = [7,6,4,3,1]\nOutput: 0\nExplanation: There is no way to make a positive profit, so we never buy the stock to achieve the maximum profit of 0.", "input": "Input: prices = [7,6,4,3,1]", "output": "Output: 0", "explanation": "Explanation: There is no way to make a positive profit, so we never buy the stock to achieve the maximum profit of 0."}], "constraints": "Constraints:\n1 <= prices.length <= 3 * 10^4\n0 <= prices[i] <= 10^4", "notes": ""}, "120": {"label": "Medium", "title": "Triangle", "tags": "algorithms,array,dynamic-programming", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.49979999999999997, "total_accepted": 389600.0, "total_submissions": 779400.0, "testcase_example": "'[[2],[3,4],[6,5,7],[4,1,8,3]]'", "body": "Given a triangle array, return the minimum path sum from top to bottom.\nFor each step, you may move to an adjacent number of the row below. More formally, if you are on index i on the current row, you may move to either index i or index i + 1 on the next row.", "examples": [{"full_text": "Example 1:\nInput: triangle = [[2],[3,4],[6,5,7],[4,1,8,3]]\nOutput: 11\nExplanation: The triangle looks like:\n2\n3 4\n6 5 7\n4 1 8 3\nThe minimum path sum from top to bottom is 2 + 3 + 5 + 1 = 11 (underlined above).", "input": "Input: triangle = [[2],[3,4],[6,5,7],[4,1,8,3]]", "output": "Output: 11", "explanation": "Explanation: The triangle looks like:\n2\n3 4\n6 5 7\n4 1 8 3\nThe minimum path sum from top to bottom is 2 + 3 + 5 + 1 = 11 (underlined above)."}, {"full_text": "Example 2:\nInput: triangle = [[-10]]\nOutput: -10", "input": "Input: triangle = [[-10]]", "output": "Output: -10", "explanation": ""}], "constraints": "Constraints:\n1 <= triangle.length <= 200\ntriangle[0].length == 1\ntriangle[i].length == triangle[i - 1].length + 1\n-10^4 <= triangle[i][j] <= 10^4\nFollow up: Could you\ndo this using only O(n) extra space, where n is the total number of rows in the triangle?", "notes": ""}, "117": {"label": "Medium", "title": "Populating Next Right Pointers in Each Node II", "tags": "algorithms,bloomberg,facebook,microsoft,depth-first-search,tree", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4581, "total_accepted": 411500.0, "total_submissions": 898100.0, "testcase_example": "'[1,2,3,4,5,null,7]'", "body": "Given a binary tree\nstruct Node {\nint val;\nNode *left;\nNode *right;\nNode *next;\n}\nPopulate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.\nInitially, all next pointers are set to NULL.", "examples": [{"full_text": "Example 1:\nInput: root = [1,2,3,4,5,null,7]\nOutput: [1,#,2,3,#,4,5,7,#]\nExplanation: Given the above binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level.", "input": "Input: root = [1,2,3,4,5,null,7]", "output": "Output: [1,#,2,3,#,4,5,7,#]", "explanation": "Explanation: Given the above binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level."}, {"full_text": "Example 2:\nInput: root = []\nOutput: []", "input": "Input: root = []", "output": "Output: []", "explanation": ""}], "constraints": "Constraints:\nThe number of nodes in the tree is in the range [0, 6000].\n-100 <= Node.val <= 100", "notes": "Follow-up:\nYou may only use constant extra space.\nThe recursive approach is fine. You may assume implicit stack space does not count as extra space for this problem."}, "116": {"label": "Medium", "title": "Populating Next Right Pointers in Each Node", "tags": "algorithms,microsoft,depth-first-search,tree", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5584, "total_accepted": 684800.0, "total_submissions": 1200000.0, "testcase_example": "'[1,2,3,4,5,6,7]'", "body": "You are given a perfect binary tree where all leaves are on the same level, and every parent has two children. The binary tree has the following definition:\nstruct Node {\nint val;\nNode *left;\nNode *right;\nNode *next;\n}\nPopulate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.\nInitially, all next pointers are set to NULL.", "examples": [{"full_text": "Example 1:\nInput: root = [1,2,3,4,5,6,7]\nOutput: [1,#,2,3,#,4,5,6,7,#]\nExplanation: Given the above perfect binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level.", "input": "Input: root = [1,2,3,4,5,6,7]", "output": "Output: [1,#,2,3,#,4,5,6,7,#]", "explanation": "Explanation: Given the above perfect binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level."}, {"full_text": "Example 2:\nInput: root = []\nOutput: []", "input": "Input: root = []", "output": "Output: []", "explanation": ""}], "constraints": "Constraints:\nThe number of nodes in the tree is in the range [0, 2^12 - 1].\n-1000 <= Node.val <= 1000", "notes": "Follow-up:\nYou may only use constant extra space.\nThe recursive approach is fine. You may assume implicit stack space does not count as extra space for this problem."}, "114": {"label": "Medium", "title": "Flatten Binary Tree to Linked List", "tags": "algorithms,microsoft,depth-first-search,tree", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5699000000000001, "total_accepted": 567300.0, "total_submissions": 995400.0, "testcase_example": "'[1,2,5,3,4,null,6]'", "body": "Given the root of a binary tree, flatten the tree into a \"linked list\":\nThe \"linked list\" should use the same TreeNode class where the right child pointer points to the next node in the list and the left child pointer is always null.\nThe \"linked list\" should be in the same order as a pre-order traversal of the binary tree.", "examples": [{"full_text": "Example 1:\nInput: root = [1,2,5,3,4,null,6]\nOutput: [1,null,2,null,3,null,4,null,5,null,6]", "input": "Input: root = [1,2,5,3,4,null,6]", "output": "Output: [1,null,2,null,3,null,4,null,5,null,6]", "explanation": ""}, {"full_text": "Example 2:\nInput: root = []\nOutput: []", "input": "Input: root = []", "output": "Output: []", "explanation": ""}, {"full_text": "Example 3:\nInput: root = [0]\nOutput: [0]", "input": "Input: root = [0]", "output": "Output: [0]", "explanation": ""}], "constraints": "Constraints:\nThe number of nodes in the tree is in the range [0, 2000].\n-100 <= Node.val <= 100\nFollow up: Can you flatten the tree in-place (with O(1) extra space)?", "notes": ""}, "113": {"label": "Medium", "title": "Path Sum II", "tags": "algorithms,bloomberg,depth-first-search,tree", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5334, "total_accepted": 544200.0, "total_submissions": 1000000.0, "testcase_example": "'[5,4,8,11,null,13,4,7,2,null,null,5,1]\\n22'", "body": "Given the root of a binary tree and an integer targetSum, return all root-to-leaf paths where the sum of the node values in the path equals targetSum. Each path should be returned as a list of the node values, not node references.\nA root-to-leaf path is a path starting from the root and ending at any leaf node. A leaf is a node with no children.", "examples": [{"full_text": "Example 1:\nInput: root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22\nOutput: [[5,4,11,2],[5,8,4,5]]\nExplanation: There are two paths whose sum equals targetSum:\n5 + 4 + 11 + 2 = 22\n5 + 8 + 4 + 5 = 22", "input": "Input: root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22", "output": "Output: [[5,4,11,2],[5,8,4,5]]", "explanation": "Explanation: There are two paths whose sum equals targetSum:\n5 + 4 + 11 + 2 = 22\n5 + 8 + 4 + 5 = 22"}, {"full_text": "Example 2:\nInput: root = [1,2,3], targetSum = 5\nOutput: []", "input": "Input: root = [1,2,3], targetSum = 5", "output": "Output: []", "explanation": ""}, {"full_text": "Example 3:\nInput: root = [1,2], targetSum = 0\nOutput: []", "input": "Input: root = [1,2], targetSum = 0", "output": "Output: []", "explanation": ""}], "constraints": "Constraints:\nThe number of nodes in the tree is in the range [0, 5000].\n-1000 <= Node.val <= 1000\n-1000 <= targetSum <= 1000", "notes": ""}, "109": {"label": "Medium", "title": "Convert Sorted List to Binary Search Tree", "tags": "algorithms,zenefits,depth-first-search,linked-list", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5483, "total_accepted": 357100.0, "total_submissions": 651300.0, "testcase_example": "'[-10,-3,0,5,9]'", "body": "Given the head of a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.\nFor this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.", "examples": [{"full_text": "Example 1:\nInput: head = [-10,-3,0,5,9]\nOutput: [0,-3,9,-10,null,5]\nExplanation: One possible answer is [0,-3,9,-10,null,5], which represents the shown height balanced BST.", "input": "Input: head = [-10,-3,0,5,9]", "output": "Output: [0,-3,9,-10,null,5]", "explanation": "Explanation: One possible answer is [0,-3,9,-10,null,5], which represents the shown height balanced BST."}, {"full_text": "Example 2:\nInput: head = []\nOutput: []", "input": "Input: head = []", "output": "Output: []", "explanation": ""}], "constraints": "Constraints:\nThe number of nodes in head is in the range [0, 2 * 10^4].\n-10^5 <= Node.val <= 10^5", "notes": ""}, "107": {"label": "Medium", "title": "Binary Tree Level Order Traversal II", "tags": "algorithms,breadth-first-search,tree", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5805, "total_accepted": 479000.0, "total_submissions": 825100.0, "testcase_example": "'[3,9,20,null,null,15,7]'", "body": "Given the root of a binary tree, return the bottom-up level order traversal of its nodes' values. (i.e., from left to right, level by level from leaf to root).", "examples": [{"full_text": "Example 1:\nInput: root = [3,9,20,null,null,15,7]\nOutput: [[15,7],[9,20],[3]]", "input": "Input: root = [3,9,20,null,null,15,7]", "output": "Output: [[15,7],[9,20],[3]]", "explanation": ""}, {"full_text": "Example 2:\nInput: root = [1]\nOutput: [[1]]", "input": "Input: root = [1]", "output": "Output: [[1]]", "explanation": ""}, {"full_text": "Example 3:\nInput: root = []\nOutput: []", "input": "Input: root = []", "output": "Output: []", "explanation": ""}], "constraints": "Constraints:\nThe number of nodes in the tree is in the range [0, 2000].\n-1000 <= Node.val <= 1000", "notes": ""}, "106": {"label": "Medium", "title": "Construct Binary Tree from Inorder and Postorder Traversal", "tags": "algorithms,microsoft,array,depth-first-search,tree", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5463, "total_accepted": 376900.0, "total_submissions": 690000.0, "testcase_example": "'[9,3,15,20,7]\\n[9,15,7,20,3]'", "body": "Given two integer arrays inorder and postorder where inorder is the inorder traversal of a binary tree and postorder is the postorder traversal of the same tree, construct and return the binary tree.", "examples": [{"full_text": "Example 1:\nInput: inorder = [9,3,15,20,7], postorder = [9,15,7,20,3]\nOutput: [3,9,20,null,null,15,7]", "input": "Input: inorder = [9,3,15,20,7], postorder = [9,15,7,20,3]", "output": "Output: [3,9,20,null,null,15,7]", "explanation": ""}, {"full_text": "Example 2:\nInput: inorder = [-1], postorder = [-1]\nOutput: [-1]", "input": "Input: inorder = [-1], postorder = [-1]", "output": "Output: [-1]", "explanation": ""}], "constraints": "Constraints:\n1 <= inorder.length <= 3000\npostorder.length == inorder.length\n-3000 <= inorder[i], postorder[i] <= 3000\ninorder and postorder consist of unique values.\nEach value of postorder also appears in inorder.\ninorder is guaranteed to be the inorder traversal of the tree.\npostorder is guaranteed to be the postorder traversal of the tree.", "notes": ""}, "105": {"label": "Medium", "title": "Construct Binary Tree from Preorder and Inorder Traversal", "tags": "algorithms,bloomberg,array,depth-first-search,tree", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5675, "total_accepted": 654900.0, "total_submissions": 1200000.0, "testcase_example": "'[3,9,20,15,7]\\n[9,3,15,20,7]'", "body": "Given two integer arrays preorder and inorder where preorder is the preorder traversal of a binary tree and inorder is the inorder traversal of the same tree, construct and return the binary tree.", "examples": [{"full_text": "Example 1:\nInput: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]\nOutput: [3,9,20,null,null,15,7]", "input": "Input: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]", "output": "Output: [3,9,20,null,null,15,7]", "explanation": ""}, {"full_text": "Example 2:\nInput: preorder = [-1], inorder = [-1]\nOutput: [-1]", "input": "Input: preorder = [-1], inorder = [-1]", "output": "Output: [-1]", "explanation": ""}], "constraints": "Constraints:\n1 <= preorder.length <= 3000\ninorder.length == preorder.length\n-3000 <= preorder[i], inorder[i] <= 3000\npreorder and inorder consist of unique values.\nEach value of inorder also appears in preorder.\npreorder is guaranteed to be the preorder traversal of the tree.\ninorder is guaranteed to be the inorder traversal of the tree.", "notes": ""}, "103": {"label": "Medium", "title": "Binary Tree Zigzag Level Order Traversal", "tags": "algorithms,bloomberg,linkedin,microsoft,breadth-first-search,stack,tree", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5297999999999999, "total_accepted": 657300.0, "total_submissions": 1200000.0, "testcase_example": "'[3,9,20,null,null,15,7]'", "body": "Given the root of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from left to right, then right to left for the next level and alternate between).", "examples": [{"full_text": "Example 1:\nInput: root = [3,9,20,null,null,15,7]\nOutput: [[3],[20,9],[15,7]]", "input": "Input: root = [3,9,20,null,null,15,7]", "output": "Output: [[3],[20,9],[15,7]]", "explanation": ""}, {"full_text": "Example 2:\nInput: root = [1]\nOutput: [[1]]", "input": "Input: root = [1]", "output": "Output: [[1]]", "explanation": ""}, {"full_text": "Example 3:\nInput: root = []\nOutput: []", "input": "Input: root = []", "output": "Output: []", "explanation": ""}], "constraints": "Constraints:\nThe number of nodes in the tree is in the range [0, 2000].\n-100 <= Node.val <= 100", "notes": ""}, "102": {"label": "Medium", "title": "Binary Tree Level Order Traversal", "tags": "algorithms,amazon,apple,bloomberg,facebook,linkedin,microsoft,breadth-first-search,tree", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6025, "total_accepted": 1100000.0, "total_submissions": 1900000.0, "testcase_example": "'[3,9,20,null,null,15,7]'", "body": "Given the root of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).", "examples": [{"full_text": "Example 1:\nInput: root = [3,9,20,null,null,15,7]\nOutput: [[3],[9,20],[15,7]]", "input": "Input: root = [3,9,20,null,null,15,7]", "output": "Output: [[3],[9,20],[15,7]]", "explanation": ""}, {"full_text": "Example 2:\nInput: root = [1]\nOutput: [[1]]", "input": "Input: root = [1]", "output": "Output: [[1]]", "explanation": ""}, {"full_text": "Example 3:\nInput: root = []\nOutput: []", "input": "Input: root = []", "output": "Output: []", "explanation": ""}], "constraints": "Constraints:\nThe number of nodes in the tree is in the range [0, 2000].\n-1000 <= Node.val <= 1000", "notes": ""}, "99": {"label": "Medium", "title": "Recover Binary Search Tree", "tags": "algorithms,depth-first-search,tree", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4579, "total_accepted": 267600.0, "total_submissions": 584400.0, "testcase_example": "'[1,3,null,null,2]'", "body": "You are given the root of a binary search tree (BST), where the values of exactly two nodes of the tree were swapped by mistake. Recover the tree without changing its structure.", "examples": [{"full_text": "Example 1:\nInput: root = [1,3,null,null,2]\nOutput: [3,1,null,null,2]\nExplanation: 3 cannot be a left child of 1 because 3 > 1. Swapping 1 and 3 makes the BST valid.", "input": "Input: root = [1,3,null,null,2]", "output": "Output: [3,1,null,null,2]", "explanation": "Explanation: 3 cannot be a left child of 1 because 3 > 1. Swapping 1 and 3 makes the BST valid."}, {"full_text": "Example 2:\nInput: root = [3,1,4,null,null,2]\nOutput: [2,1,4,null,null,3]\nExplanation: 2 cannot be in the right subtree of 3 because 2 < 3. Swapping 2 and 3 makes the BST valid.", "input": "Input: root = [3,1,4,null,null,2]", "output": "Output: [2,1,4,null,null,3]", "explanation": "Explanation: 2 cannot be in the right subtree of 3 because 2 < 3. Swapping 2 and 3 makes the BST valid."}], "constraints": "Constraints:\nThe number of nodes in the tree is in the range [2, 1000].\n-2^31 <= Node.val <= 2^31 - 1\nFollow up: A solution using O(n) space is pretty straight-forward. Could you devise a constant O(1) space solution?", "notes": ""}, "98": {"label": "Medium", "title": "Validate Binary Search Tree", "tags": "algorithms,amazon,bloomberg,facebook,microsoft,depth-first-search,tree", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.30219999999999997, "total_accepted": 1300000.0, "total_submissions": 4300000.0, "testcase_example": "'[2,1,3]'", "body": "Given the root of a binary tree, determine if it is a valid binary search tree (BST).\nA valid BST is defined as follows:\nThe left subtree of a node contains only nodes with keys less than the node's key.\nThe right subtree of a node contains only nodes with keys greater than the node's key.\nBoth the left and right subtrees must also be binary search trees.", "examples": [{"full_text": "Example 1:\nInput: root = [2,1,3]\nOutput: true", "input": "Input: root = [2,1,3]", "output": "Output: true", "explanation": ""}, {"full_text": "Example 2:\nInput: root = [5,1,4,null,null,3,6]\nOutput: false\nExplanation: The root node's value is 5 but its right child's value is 4.", "input": "Input: root = [5,1,4,null,null,3,6]", "output": "Output: false", "explanation": "Explanation: The root node's value is 5 but its right child's value is 4."}], "constraints": "Constraints:\nThe number of nodes in the tree is in the range [1, 10^4].\n-2^31 <= Node.val <= 2^31 - 1", "notes": ""}, "97": {"label": "Medium", "title": "Interleaving String", "tags": "algorithms,dynamic-programming,string", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.34490000000000004, "total_accepted": 250200.0, "total_submissions": 725400.0, "testcase_example": "'\"aabcc\"\\n\"dbbca\"\\n\"aadbbcbcac\"'", "body": "Given strings s1, s2, and s3, find whether s3 is formed by an interleaving of s1 and s2.\nAn interleaving of two strings s and t is a configuration where they are divided into non-empty substrings such that:\ns = s1 + s2 + ... + sn\nt = t1 + t2 + ... + tm\n|n - m| <= 1\nThe interleaving is s1 + t1 + s2 + t2 + s3 + t3 + ... or t1 + s1 + t2 + s2 + t3 + s3 + ...\nNote: a + b is the concatenation of strings a and b.", "examples": [{"full_text": "Example 1:\nInput: s1 = \"aabcc\", s2 = \"dbbca\", s3 = \"aadbbcbcac\"\nOutput: true", "input": "Input: s1 = \"aabcc\", s2 = \"dbbca\", s3 = \"aadbbcbcac\"", "output": "Output: true", "explanation": ""}, {"full_text": "Example 2:\nInput: s1 = \"aabcc\", s2 = \"dbbca\", s3 = \"aadbbbaccc\"\nOutput: false", "input": "Input: s1 = \"aabcc\", s2 = \"dbbca\", s3 = \"aadbbbaccc\"", "output": "Output: false", "explanation": ""}, {"full_text": "Example 3:\nInput: s1 = \"\", s2 = \"\", s3 = \"\"\nOutput: true", "input": "Input: s1 = \"\", s2 = \"\", s3 = \"\"", "output": "Output: true", "explanation": ""}], "constraints": "Constraints:\n0 <= s1.length, s2.length <= 100\n0 <= s3.length <= 200\ns1, s2, and s3 consist of lowercase English letters.\nFollow up: Could you solve it using only O(s2.length) additional memory space?", "notes": ""}, "96": {"label": "Medium", "title": "Unique Binary Search Trees", "tags": "algorithms,snapchat,dynamic-programming,tree", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5786, "total_accepted": 458500.0, "total_submissions": 792400.0, "testcase_example": "'3'", "body": "Given an integer n, return the number of structurally unique BST's (binary search trees) which has exactly n nodes of unique values from 1 to n.", "examples": [{"full_text": "Example 1:\nInput: n = 3\nOutput: 5", "input": "Input: n = 3", "output": "Output: 5", "explanation": ""}, {"full_text": "Example 2:\nInput: n = 1\nOutput: 1", "input": "Input: n = 1", "output": "Output: 1", "explanation": ""}], "constraints": "Constraints:\n1 <= n <= 19", "notes": ""}, "95": {"label": "Medium", "title": "Unique Binary Search Trees II", "tags": "algorithms,dynamic-programming,tree", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4865, "total_accepted": 292900.0, "total_submissions": 601900.0, "testcase_example": "'3'", "body": "Given an integer n, return all the structurally unique BST's (binary search trees), which has exactly n nodes of unique values from 1 to n. Return the answer in any order.", "examples": [{"full_text": "Example 1:\nInput: n = 3\nOutput: [[1,null,2,null,3],[1,null,3,2],[2,1,3],[3,1,null,null,2],[3,2,null,1]]", "input": "Input: n = 3", "output": "Output: [[1,null,2,null,3],[1,null,3,2],[2,1,3],[3,1,null,null,2],[3,2,null,1]]", "explanation": ""}, {"full_text": "Example 2:\nInput: n = 1\nOutput: [[1]]", "input": "Input: n = 1", "output": "Output: [[1]]", "explanation": ""}], "constraints": "Constraints:\n1 <= n <= 8", "notes": ""}, "93": {"label": "Medium", "title": "Restore IP Addresses", "tags": "algorithms,backtracking,string", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.41119999999999995, "total_accepted": 284000.0, "total_submissions": 690600.0, "testcase_example": "'\"25525511135\"'", "body": "A valid IP address consists of exactly four integers separated by single dots. Each integer is between 0 and 255 (inclusive) and cannot have leading zeros.\nFor example, \"0.1.2.201\" and \"192.168.1.1\" are valid IP addresses, but \"0.011.255.245\", \"192.168.1.312\" and \"192.168@1.1\" are invalid IP addresses.\nGiven a string s containing only digits, return all possible valid IP addresses that can be formed by inserting dots into s. You are not allowed to reorder or remove any digits in s. You may return the valid IP addresses in any order.", "examples": [{"full_text": "Example 1:\nInput: s = \"25525511135\"\nOutput: [\"255.255.11.135\",\"255.255.111.35\"]", "input": "Input: s = \"25525511135\"", "output": "Output: [\"255.255.11.135\",\"255.255.111.35\"]", "explanation": ""}, {"full_text": "Example 2:\nInput: s = \"0000\"\nOutput: [\"0.0.0.0\"]", "input": "Input: s = \"0000\"", "output": "Output: [\"0.0.0.0\"]", "explanation": ""}, {"full_text": "Example 3:\nInput: s = \"101023\"\nOutput: [\"1.0.10.23\",\"1.0.102.3\",\"10.1.0.23\",\"10.10.2.3\",\"101.0.2.3\"]", "input": "Input: s = \"101023\"", "output": "Output: [\"1.0.10.23\",\"1.0.102.3\",\"10.1.0.23\",\"10.10.2.3\",\"101.0.2.3\"]", "explanation": ""}], "constraints": "Constraints:\n1 <= s.length <= 20\ns consists of digits only.", "notes": ""}, "92": {"label": "Medium", "title": "Reverse Linked List II", "tags": "algorithms,linked-list", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4304, "total_accepted": 451600.0, "total_submissions": 1000000.0, "testcase_example": "'[1,2,3,4,5]\\n2\\n4'", "body": "Given the head of a singly linked list and two integers left and right where left <= right, reverse the nodes of the list from position left to position right, and return the reversed list.", "examples": [{"full_text": "Example 1:\nInput: head = [1,2,3,4,5], left = 2, right = 4\nOutput: [1,4,3,2,5]", "input": "Input: head = [1,2,3,4,5], left = 2, right = 4", "output": "Output: [1,4,3,2,5]", "explanation": ""}, {"full_text": "Example 2:\nInput: head = [5], left = 1, right = 1\nOutput: [5]", "input": "Input: head = [5], left = 1, right = 1", "output": "Output: [5]", "explanation": ""}], "constraints": "Constraints:\nThe number of nodes in the list is n.\n1 <= n <= 500\n-500 <= Node.val <= 500\n1 <= left <= right <= n\nFollow up: Could you do it in one pass?", "notes": ""}, "91": {"label": "Medium", "title": "Decode Ways", "tags": "algorithms,facebook,microsoft,uber,dynamic-programming,string", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.29719999999999996, "total_accepted": 730800.0, "total_submissions": 2500000.0, "testcase_example": "'\"12\"'", "body": "A message containing letters from A-Z can be encoded into numbers using the following mapping:\n'A' -> \"1\"\n'B' -> \"2\"\n...\n'Z' -> \"26\"\nTo decode an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). For example, \"11106\" can be mapped into:\n\"AAJF\" with the grouping (1 1 10 6)\n\"KJF\" with the grouping (11 10 6)\nNote that the grouping (1 11 06) is invalid because \"06\" cannot be mapped into 'F' since \"6\" is different from \"06\".\nGiven a string s containing only digits, return the number of ways to decode it.\nThe test cases are generated so that the answer fits in a 32-bit integer.", "examples": [{"full_text": "Example 1:\nInput: s = \"12\"\nOutput: 2\nExplanation: \"12\" could be decoded as \"AB\" (1 2) or \"L\" (12).", "input": "Input: s = \"12\"", "output": "Output: 2", "explanation": "Explanation: \"12\" could be decoded as \"AB\" (1 2) or \"L\" (12)."}, {"full_text": "Example 2:\nInput: s = \"226\"\nOutput: 3\nExplanation: \"226\" could be decoded as \"BZ\" (2 26), \"VF\" (22 6), or \"BBF\" (2 2 6).", "input": "Input: s = \"226\"", "output": "Output: 3", "explanation": "Explanation: \"226\" could be decoded as \"BZ\" (2 26), \"VF\" (22 6), or \"BBF\" (2 2 6)."}, {"full_text": "Example 3:\nInput: s = \"06\"\nOutput: 0\nExplanation: \"06\" cannot be mapped to \"F\" because of the leading zero (\"6\" is different from \"06\").", "input": "Input: s = \"06\"", "output": "Output: 0", "explanation": "Explanation: \"06\" cannot be mapped to \"F\" because of the leading zero (\"6\" is different from \"06\")."}], "constraints": "Constraints:\n1 <= s.length <= 100\ns contains only digits and may contain leading zero(s).", "notes": ""}, "90": {"label": "Medium", "title": "Subsets II", "tags": "algorithms,facebook,array,backtracking", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5255, "total_accepted": 466000.0, "total_submissions": 886600.0, "testcase_example": "'[1,2,2]'", "body": "Given an integer array nums that may contain duplicates, return all possible subsets (the power set).\nThe solution set must not contain duplicate subsets. Return the solution in any order.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,2,2]\nOutput: [[],[1],[1,2],[1,2,2],[2],[2,2]]", "input": "Input: nums = [1,2,2]", "output": "Output: [[],[1],[1,2],[1,2,2],[2],[2,2]]", "explanation": ""}, {"full_text": "Example 2:\nInput: nums = [0]\nOutput: [[],[0]]", "input": "Input: nums = [0]", "output": "Output: [[],[0]]", "explanation": ""}], "constraints": "Constraints:\n1 <= nums.length <= 10\n-10 <= nums[i] <= 10", "notes": ""}, "89": {"label": "Medium", "title": "Gray Code", "tags": "algorithms,amazon,backtracking", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5485, "total_accepted": 226800.0, "total_submissions": 413500.0, "testcase_example": "'2'", "body": "An n-bit gray code sequence is a sequence of 2^n integers where:\nEvery integer is in the inclusive range [0, 2^n - 1],\nThe first integer is 0,\nAn integer appears no more than once in the sequence,\nThe binary representation of every pair of adjacent integers differs by exactly one bit, and\nThe binary representation of the first and last integers differs by exactly one bit.\nGiven an integer n, return any valid n-bit gray code sequence.", "examples": [{"full_text": "Example 1:\nInput: n = 2\nOutput: [0,1,3,2]\nExplanation:\nThe binary representation of [0,1,3,2] is [00,01,11,10].\n- 00 and 01 differ by one bit\n- 01 and 11 differ by one bit\n- 11 and 10 differ by one bit\n- 10 and 00 differ by one bit\n[0,2,3,1] is also a valid gray code sequence, whose binary representation is [00,10,11,01].\n- 00 and 10 differ by one bit\n- 10 and 11 differ by one bit\n- 11 and 01 differ by one bit\n- 01 and 00 differ by one bit", "input": "Input: n = 2", "output": "Output: [0,1,3,2]", "explanation": "Explanation:\nThe binary representation of [0,1,3,2] is [00,01,11,10].\n- 00 and 01 differ by one bit\n- 01 and 11 differ by one bit\n- 11 and 10 differ by one bit\n- 10 and 00 differ by one bit\n[0,2,3,1] is also a valid gray code sequence, whose binary representation is [00,10,11,01].\n- 00 and 10 differ by one bit\n- 10 and 11 differ by one bit\n- 11 and 01 differ by one bit\n- 01 and 00 differ by one bit"}, {"full_text": "Example 2:\nInput: n = 1\nOutput: [0,1]", "input": "Input: n = 1", "output": "Output: [0,1]", "explanation": ""}], "constraints": "Constraints:\n1 <= n <= 16", "notes": ""}, "86": {"label": "Medium", "title": "Partition List", "tags": "algorithms,linked-list,two-pointers", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.47340000000000004, "total_accepted": 326000.0, "total_submissions": 688600.0, "testcase_example": "'[1,4,3,2,5,2]\\n3'", "body": "Given the head of a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.\nYou should preserve the original relative order of the nodes in each of the two partitions.", "examples": [{"full_text": "Example 1:\nInput: head = [1,4,3,2,5,2], x = 3\nOutput: [1,2,2,4,3,5]", "input": "Input: head = [1,4,3,2,5,2], x = 3", "output": "Output: [1,2,2,4,3,5]", "explanation": ""}, {"full_text": "Example 2:\nInput: head = [2,1], x = 2\nOutput: [1,2]", "input": "Input: head = [2,1], x = 2", "output": "Output: [1,2]", "explanation": ""}], "constraints": "Constraints:\nThe number of nodes in the list is in the range [0, 200].\n-100 <= Node.val <= 100\n-200 <= x <= 200", "notes": ""}, "82": {"label": "Medium", "title": "Remove Duplicates from Sorted List II", "tags": "algorithms,linked-list", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4235, "total_accepted": 419200.0, "total_submissions": 989900.0, "testcase_example": "'[1,2,3,3,4,4,5]'", "body": "Given the head of a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list. Return the linked list sorted as well.", "examples": [{"full_text": "Example 1:\nInput: head = [1,2,3,3,4,4,5]\nOutput: [1,2,5]", "input": "Input: head = [1,2,3,3,4,4,5]", "output": "Output: [1,2,5]", "explanation": ""}, {"full_text": "Example 2:\nInput: head = [1,1,1,2,3]\nOutput: [2,3]", "input": "Input: head = [1,1,1,2,3]", "output": "Output: [2,3]", "explanation": ""}], "constraints": "Constraints:\nThe number of nodes in the list is in the range [0, 300].\n-100 <= Node.val <= 100\nThe list is guaranteed to be sorted in ascending order.", "notes": ""}, "81": {"label": "Medium", "title": "Search in Rotated Sorted Array II", "tags": "algorithms,array,binary-search", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.344, "total_accepted": 367400.0, "total_submissions": 1100000.0, "testcase_example": "'[2,5,6,0,0,1,2]\\n0'", "body": "There is an integer array nums sorted in non-decreasing order (not necessarily with distinct values).\nBefore being passed to your function, nums is rotated at an unknown pivot index k (0 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,4,4,5,6,6,7] might be rotated at pivot index 5 and become [4,5,6,6,7,0,1,2,4,4].\nGiven the array nums after the rotation and an integer target, return true if target is in nums, or false if it is not in nums.\nYou must decrease the overall operation steps as much as possible.", "examples": [{"full_text": "Example 1:\nInput: nums = [2,5,6,0,0,1,2], target = 0\nOutput: true", "input": "Input: nums = [2,5,6,0,0,1,2], target = 0", "output": "Output: true", "explanation": ""}, {"full_text": "Example 2:\nInput: nums = [2,5,6,0,0,1,2], target = 3\nOutput: false", "input": "Input: nums = [2,5,6,0,0,1,2], target = 3", "output": "Output: false", "explanation": ""}], "constraints": "Constraints:\n1 <= nums.length <= 5000\n-10^4 <= nums[i] <= 10^4\nnums is guaranteed to be rotated at some pivot.\n-10^4 <= target <= 10^4\nFollow up: This problem is similar to\nSearch in Rotated Sorted Array, but\nnums may contain duplicates. Would this affect the runtime complexity? How and why?", "notes": ""}, "80": {"label": "Medium", "title": "Remove Duplicates from Sorted Array II", "tags": "algorithms,facebook,array,two-pointers", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5015, "total_accepted": 416100.0, "total_submissions": 829600.0, "testcase_example": "'[1,1,1,2,2,3]'", "body": "Given an integer array nums sorted in non-decreasing order, remove some duplicates in-place such that each unique element appears at most twice. The relative order of the elements should be kept the same.\nSince it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. More formally, if there are k elements after removing the duplicates, then the first k elements of nums\nshould hold the final result. It does not matter what you leave beyond the first\nk\nelements.\nReturn k after placing the final result in the first k slots of nums.\nDo not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory.\nCustom Judge:\nThe judge will test your solution with the following code:\nint[] nums = [...]; // Input array\nint[] expectedNums = [...]; // The expected answer with correct length\nint k = removeDuplicates(nums); // Calls your implementation\nassert k == expectedNums.length;\nfor (int i = 0; i < k; i++) {\nassert nums[i] == expectedNums[i];\n}\nIf all assertions pass, then your solution will be accepted.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,1,1,2,2,3]\nOutput: 5, nums = [1,1,2,2,3,_]\nExplanation: Your function should return k = 5, with the first five elements of nums being 1, 1, 2, 2 and 3 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores).", "input": "Input: nums = [1,1,1,2,2,3]", "output": "Output: 5, nums = [1,1,2,2,3,_]", "explanation": "Explanation: Your function should return k = 5, with the first five elements of nums being 1, 1, 2, 2 and 3 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores)."}, {"full_text": "Example 2:\nInput: nums = [0,0,1,1,1,1,2,3,3]\nOutput: 7, nums = [0,0,1,1,2,3,3,_,_]\nExplanation: Your function should return k = 7, with the first seven elements of nums being 0, 0, 1, 1, 2, 3 and 3 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores).", "input": "Input: nums = [0,0,1,1,1,1,2,3,3]", "output": "Output: 7, nums = [0,0,1,1,2,3,3,_,_]", "explanation": "Explanation: Your function should return k = 7, with the first seven elements of nums being 0, 0, 1, 1, 2, 3 and 3 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores)."}], "constraints": "Constraints:\n1 <= nums.length <= 3 * 10^4\n-10^4 <= nums[i] <= 10^4\nnums is sorted in non-decreasing order.", "notes": ""}, "79": {"label": "Medium", "title": "Word Search", "tags": "algorithms,bloomberg,facebook,microsoft,array,backtracking", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.39380000000000004, "total_accepted": 891100.0, "total_submissions": 2300000.0, "testcase_example": "'[[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]]\\n\"ABCCED\"'", "body": "Given an m x n grid of characters board and a string word, return true if word exists in the grid.\nThe word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.", "examples": [{"full_text": "Example 1:\nInput: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCCED\"\nOutput: true", "input": "Input: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCCED\"", "output": "Output: true", "explanation": ""}, {"full_text": "Example 2:\nInput: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"SEE\"\nOutput: true", "input": "Input: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"SEE\"", "output": "Output: true", "explanation": ""}, {"full_text": "Example 3:\nInput: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCB\"\nOutput: false", "input": "Input: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCB\"", "output": "Output: false", "explanation": ""}], "constraints": "Constraints:\nm == board.length\nn = board[i].length\n1 <= m, n <= 6\n1 <= word.length <= 15\nboard and word consists of only lowercase and uppercase English letters.\nFollow up: Could you use search pruning to make your solution faster with a larger board?", "notes": ""}, "78": {"label": "Medium", "title": "Subsets", "tags": "algorithms,amazon,bloomberg,facebook,uber,array,backtracking,bit-manipulation", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7051999999999999, "total_accepted": 1000000.0, "total_submissions": 1400000.0, "testcase_example": "'[1,2,3]'", "body": "Given an integer array nums of unique elements, return all possible subsets (the power set).\nThe solution set must not contain duplicate subsets. Return the solution in any order.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,2,3]\nOutput: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]", "input": "Input: nums = [1,2,3]", "output": "Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]", "explanation": ""}, {"full_text": "Example 2:\nInput: nums = [0]\nOutput: [[],[0]]", "input": "Input: nums = [0]", "output": "Output: [[],[0]]", "explanation": ""}], "constraints": "Constraints:\n1 <= nums.length <= 10\n-10 <= nums[i] <= 10\nAll the numbers of\nnums are unique.", "notes": ""}, "77": {"label": "Medium", "title": "Combinations", "tags": "algorithms,backtracking", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6284000000000001, "total_accepted": 481400.0, "total_submissions": 766100.0, "testcase_example": "'4\\n2'", "body": "Given two integers n and k, return all possible combinations of k numbers out of the range [1, n].\nYou may return the answer in any order.", "examples": [{"full_text": "Example 1:\nInput: n = 4, k = 2\nOutput:\n[\n[2,4],\n[3,4],\n[2,3],\n[1,2],\n[1,3],\n[1,4],\n]", "input": "Input: n = 4, k = 2", "output": "Output:\n[\n[2,4],\n[3,4],\n[2,3],\n[1,2],\n[1,3],\n[1,4],\n]", "explanation": ""}, {"full_text": "Example 2:\nInput: n = 1, k = 1\nOutput: [[1]]", "input": "Input: n = 1, k = 1", "output": "Output: [[1]]", "explanation": ""}], "constraints": "Constraints:\n1 <= n <= 20\n1 <= k <= n", "notes": ""}, "75": {"label": "Medium", "title": "Sort Colors", "tags": "algorithms,facebook,microsoft,pocketgems,array,sort,two-pointers", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5399, "total_accepted": 924200.0, "total_submissions": 1700000.0, "testcase_example": "'[2,0,2,1,1,0]'", "body": "Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.\nWe will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.\nYou must solve this problem without using the library's sort function.", "examples": [{"full_text": "Example 1:\nInput: nums = [2,0,2,1,1,0]\nOutput: [0,0,1,1,2,2]", "input": "Input: nums = [2,0,2,1,1,0]", "output": "Output: [0,0,1,1,2,2]", "explanation": ""}, {"full_text": "Example 2:\nInput: nums = [2,0,1]\nOutput: [0,1,2]", "input": "Input: nums = [2,0,1]", "output": "Output: [0,1,2]", "explanation": ""}], "constraints": "Constraints:\nn == nums.length\n1 <= n <= 300\nnums[i] is either 0, 1, or 2.\nFollow up:\nCould you come up with a one-pass algorithm using only\nconstant extra space?", "notes": ""}, "74": {"label": "Medium", "title": "Search a 2D Matrix", "tags": "algorithms,array,binary-search", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4241, "total_accepted": 653900.0, "total_submissions": 1500000.0, "testcase_example": "'[[1,3,5,7],[10,11,16,20],[23,30,34,60]]\\n3'", "body": "Write an efficient algorithm that searches for a value target in an m x n integer matrix matrix. This matrix has the following properties:\nIntegers in each row are sorted from left to right.\nThe first integer of each row is greater than the last integer of the previous row.", "examples": [{"full_text": "Example 1:\nInput: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3\nOutput: true", "input": "Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3", "output": "Output: true", "explanation": ""}, {"full_text": "Example 2:\nInput: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13\nOutput: false", "input": "Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13", "output": "Output: false", "explanation": ""}], "constraints": "Constraints:\nm == matrix.length\nn == matrix[i].length\n1 <= m, n <= 100\n-10^4 <= matrix[i][j], target <= 10^4", "notes": ""}, "73": {"label": "Medium", "title": "Set Matrix Zeroes", "tags": "algorithms,amazon,microsoft,array", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4769, "total_accepted": 619800.0, "total_submissions": 1300000.0, "testcase_example": "'[[1,1,1],[1,0,1],[1,1,1]]'", "body": "Given an m x n integer matrix matrix, if an element is 0, set its entire row and column to 0's.\nYou must do it in place.", "examples": [{"full_text": "Example 1:\nInput: matrix = [[1,1,1],[1,0,1],[1,1,1]]\nOutput: [[1,0,1],[0,0,0],[1,0,1]]", "input": "Input: matrix = [[1,1,1],[1,0,1],[1,1,1]]", "output": "Output: [[1,0,1],[0,0,0],[1,0,1]]", "explanation": ""}, {"full_text": "Example 2:\nInput: matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]\nOutput: [[0,0,0,0],[0,4,5,0],[0,3,1,0]]", "input": "Input: matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]", "output": "Output: [[0,0,0,0],[0,4,5,0],[0,3,1,0]]", "explanation": ""}], "constraints": "Constraints:\nm == matrix.length\nn == matrix[0].length\n1 <= m, n <= 200\n-2^31 <= matrix[i][j] <= 2^31 - 1\nFollow up:\nA straightforward solution using O(mn) space is probably a bad idea.\nA simple improvement uses O(m + n) space, but still not the best solution.\nCould you devise a constant space solution?", "notes": ""}, "71": {"label": "Medium", "title": "Simplify Path", "tags": "algorithms,facebook,microsoft,stack,string", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3738, "total_accepted": 361900.0, "total_submissions": 968000.0, "testcase_example": "'\"/home/\"'", "body": "Given a string path, which is an absolute path (starting with a slash '/') to a file or directory in a Unix-style file system, convert it to the simplified canonical path.\nIn a Unix-style file system, a period '.' refers to the current directory, a double period '..' refers to the directory up a level, and any multiple consecutive slashes (i.e. '//') are treated as a single slash '/'. For this problem, any other format of periods such as '...' are treated as file/directory names.\nThe canonical path should have the following format:\nThe path starts with a single slash '/'.\nAny two directories are separated by a single slash '/'.\nThe path does not end with a trailing '/'.\nThe path only contains the directories on the path from the root directory to the target file or directory (i.e., no period '.' or double period '..')\nReturn the simplified canonical path.", "examples": [{"full_text": "Example 1:\nInput: path = \"/home/\"\nOutput: \"/home\"\nExplanation: Note that there is no trailing slash after the last directory name.", "input": "Input: path = \"/home/\"", "output": "Output: \"/home\"", "explanation": "Explanation: Note that there is no trailing slash after the last directory name."}, {"full_text": "Example 2:\nInput: path = \"/../\"\nOutput: \"/\"\nExplanation: Going one level up from the root directory is a no-op, as the root level is the highest level you can go.", "input": "Input: path = \"/../\"", "output": "Output: \"/\"", "explanation": "Explanation: Going one level up from the root directory is a no-op, as the root level is the highest level you can go."}, {"full_text": "Example 3:\nInput: path = \"/home//foo/\"\nOutput: \"/home/foo\"\nExplanation: In the canonical path, multiple consecutive slashes are replaced by a single one.", "input": "Input: path = \"/home//foo/\"", "output": "Output: \"/home/foo\"", "explanation": "Explanation: In the canonical path, multiple consecutive slashes are replaced by a single one."}], "constraints": "Constraints:\n1 <= path.length <= 3000\npath consists of English letters, digits, period '.', slash '/' or '_'.\npath is a valid absolute Unix path.", "notes": ""}, "64": {"label": "Medium", "title": "Minimum Path Sum", "tags": "algorithms,array,dynamic-programming", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5888, "total_accepted": 665100.0, "total_submissions": 1100000.0, "testcase_example": "'[[1,3,1],[1,5,1],[4,2,1]]'", "body": "Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.\nNote: You can only move either down or right at any point in time.", "examples": [{"full_text": "Example 1:\nInput: grid = [[1,3,1],[1,5,1],[4,2,1]]\nOutput: 7\nExplanation: Because the path 1 \u2192 3 \u2192 1 \u2192 1 \u2192 1 minimizes the sum.", "input": "Input: grid = [[1,3,1],[1,5,1],[4,2,1]]", "output": "Output: 7", "explanation": "Explanation: Because the path 1 \u2192 3 \u2192 1 \u2192 1 \u2192 1 minimizes the sum."}, {"full_text": "Example 2:\nInput: grid = [[1,2,3],[4,5,6]]\nOutput: 12", "input": "Input: grid = [[1,2,3],[4,5,6]]", "output": "Output: 12", "explanation": ""}], "constraints": "Constraints:\nm == grid.length\nn == grid[i].length\n1 <= m, n <= 200\n0 <= grid[i][j] <= 100", "notes": ""}, "63": {"label": "Medium", "title": "Unique Paths II", "tags": "algorithms,bloomberg,array,dynamic-programming", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.37200000000000005, "total_accepted": 478000.0, "total_submissions": 1300000.0, "testcase_example": "'[[0,0,0],[0,1,0],[0,0,0]]'", "body": "A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).\nThe robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).\nNow consider if some obstacles are added to the grids. How many unique paths would there be?\nAn obstacle and space is marked as 1 and 0 respectively in the grid.", "examples": [{"full_text": "Example 1:\nInput: obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]]\nOutput: 2\nExplanation: There is one obstacle in the middle of the 3x3 grid above.\nThere are two ways to reach the bottom-right corner:\n1. Right -> Right -> Down -> Down\n2. Down -> Down -> Right -> Right", "input": "Input: obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]]", "output": "Output: 2", "explanation": "Explanation: There is one obstacle in the middle of the 3x3 grid above.\nThere are two ways to reach the bottom-right corner:\n1. Right -> Right -> Down -> Down\n2. Down -> Down -> Right -> Right"}, {"full_text": "Example 2:\nInput: obstacleGrid = [[0,1],[0,0]]\nOutput: 1", "input": "Input: obstacleGrid = [[0,1],[0,0]]", "output": "Output: 1", "explanation": ""}], "constraints": "Constraints:\nm ==\nobstacleGrid.length\nn ==\nobstacleGrid[i].length\n1 <= m, n <= 100\nobstacleGrid[i][j] is 0 or 1.", "notes": ""}, "62": {"label": "Medium", "title": "Unique Paths", "tags": "algorithms,bloomberg,array,dynamic-programming", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5942000000000001, "total_accepted": 862700.0, "total_submissions": 1500000.0, "testcase_example": "'3\\n7'", "body": "There is a robot on an m x n grid. The robot is initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.\nGiven the two integers m and n, return the number of possible unique paths that the robot can take to reach the bottom-right corner.\nThe test cases are generated so that the answer will be less than or equal to 2 * 10^9.", "examples": [{"full_text": "Example 1:\nInput: m = 3, n = 7\nOutput: 28", "input": "Input: m = 3, n = 7", "output": "Output: 28", "explanation": ""}, {"full_text": "Example 2:\nInput: m = 3, n = 2\nOutput: 3\nExplanation: From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:\n1. Right -> Down -> Down\n2. Down -> Down -> Right\n3. Down -> Right -> Down", "input": "Input: m = 3, n = 2", "output": "Output: 3", "explanation": "Explanation: From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:\n1. Right -> Down -> Down\n2. Down -> Down -> Right\n3. Down -> Right -> Down"}], "constraints": "Constraints:\n1 <= m, n <= 100", "notes": ""}, "61": {"label": "Medium", "title": "Rotate List", "tags": "algorithms,linked-list,two-pointers", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3361, "total_accepted": 482100.0, "total_submissions": 1400000.0, "testcase_example": "'[1,2,3,4,5]\\n2'", "body": "Given the head of a linked\nlist, rotate the list to the right by k places.", "examples": [{"full_text": "Example 1:\nInput: head = [1,2,3,4,5], k = 2\nOutput: [4,5,1,2,3]", "input": "Input: head = [1,2,3,4,5], k = 2", "output": "Output: [4,5,1,2,3]", "explanation": ""}, {"full_text": "Example 2:\nInput: head = [0,1,2], k = 4\nOutput: [2,0,1]", "input": "Input: head = [0,1,2], k = 4", "output": "Output: [2,0,1]", "explanation": ""}], "constraints": "Constraints:\nThe number of nodes in the list is in the range [0, 500].\n-100 <= Node.val <= 100\n0 <= k <= 2 * 10^9", "notes": ""}, "59": {"label": "Medium", "title": "Spiral Matrix II", "tags": "algorithms,array", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6171, "total_accepted": 302900.0, "total_submissions": 490800.0, "testcase_example": "'3'", "body": "Given a positive integer n, generate an n x n matrix filled with elements from 1 to n^2 in spiral order.", "examples": [{"full_text": "Example 1:\nInput: n = 3\nOutput: [[1,2,3],[8,9,4],[7,6,5]]", "input": "Input: n = 3", "output": "Output: [[1,2,3],[8,9,4],[7,6,5]]", "explanation": ""}, {"full_text": "Example 2:\nInput: n = 1\nOutput: [[1]]", "input": "Input: n = 1", "output": "Output: [[1]]", "explanation": ""}], "constraints": "Constraints:\n1 <= n <= 20", "notes": ""}, "57": {"label": "Medium", "title": "Insert Interval", "tags": "algorithms,facebook,google,linkedin,array,sort", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.371, "total_accepted": 462700.0, "total_submissions": 1200000.0, "testcase_example": "'[[1,3],[6,9]]\\n[2,5]'", "body": "You are given an array of non-overlapping intervals intervals where intervals[i] = [starti, endi] represent the start and the end of the i^th interval and intervals is sorted in ascending order by starti. You are also given an interval newInterval = [start, end] that represents the start and end of another interval.\nInsert newInterval into intervals such that intervals is still sorted in ascending order by starti and intervals still does not have any overlapping intervals (merge overlapping intervals if necessary).\nReturn intervals after the insertion.", "examples": [{"full_text": "Example 1:\nInput: intervals = [[1,3],[6,9]], newInterval = [2,5]\nOutput: [[1,5],[6,9]]", "input": "Input: intervals = [[1,3],[6,9]], newInterval = [2,5]", "output": "Output: [[1,5],[6,9]]", "explanation": ""}, {"full_text": "Example 2:\nInput: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]\nOutput: [[1,2],[3,10],[12,16]]\nExplanation: Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10].", "input": "Input: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]", "output": "Output: [[1,2],[3,10],[12,16]]", "explanation": "Explanation: Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10]."}], "constraints": "Constraints:\n0 <= intervals.length <= 10^4\nintervals[i].length == 2\n0 <= starti <= endi <= 10^5\nintervals is sorted by starti in ascending order.\nnewInterval.length == 2\n0 <= start <= end <= 10^5", "notes": ""}, "56": {"label": "Medium", "title": "Merge Intervals", "tags": "algorithms,bloomberg,facebook,google,linkedin,microsoft,twitter,yelp,array,sort", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.444, "total_accepted": 1300000.0, "total_submissions": 2900000.0, "testcase_example": "'[[1,3],[2,6],[8,10],[15,18]]'", "body": "Given an array\nof intervals\nwhere intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.", "examples": [{"full_text": "Example 1:\nInput: intervals = [[1,3],[2,6],[8,10],[15,18]]\nOutput: [[1,6],[8,10],[15,18]]\nExplanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].", "input": "Input: intervals = [[1,3],[2,6],[8,10],[15,18]]", "output": "Output: [[1,6],[8,10],[15,18]]", "explanation": "Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6]."}, {"full_text": "Example 2:\nInput: intervals = [[1,4],[4,5]]\nOutput: [[1,5]]\nExplanation: Intervals [1,4] and [4,5] are considered overlapping.", "input": "Input: intervals = [[1,4],[4,5]]", "output": "Output: [[1,5]]", "explanation": "Explanation: Intervals [1,4] and [4,5] are considered overlapping."}], "constraints": "Constraints:\n1 <= intervals.length <= 10^4\nintervals[i].length == 2\n0 <= starti <= endi <= 10^4", "notes": ""}, "55": {"label": "Medium", "title": "Jump Game", "tags": "algorithms,microsoft,array,greedy", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.37439999999999996, "total_accepted": 910300.0, "total_submissions": 2400000.0, "testcase_example": "'[2,3,1,1,4]'", "body": "You are given an integer array nums. You are initially positioned at the array's first index, and each element in the array represents your maximum jump length at that position.\nReturn true if you can reach the last index, or false otherwise.", "examples": [{"full_text": "Example 1:\nInput: nums = [2,3,1,1,4]\nOutput: true\nExplanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.", "input": "Input: nums = [2,3,1,1,4]", "output": "Output: true", "explanation": "Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index."}, {"full_text": "Example 2:\nInput: nums = [3,2,1,0,4]\nOutput: false\nExplanation: You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index.", "input": "Input: nums = [3,2,1,0,4]", "output": "Output: false", "explanation": "Explanation: You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index."}], "constraints": "Constraints:\n1 <= nums.length <= 10^4\n0 <= nums[i] <= 10^5", "notes": ""}, "54": {"label": "Medium", "title": "Spiral Matrix", "tags": "algorithms,google,microsoft,uber,array", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4053, "total_accepted": 671100.0, "total_submissions": 1700000.0, "testcase_example": "'[[1,2,3],[4,5,6],[7,8,9]]'", "body": "Given an m x n matrix, return all elements of the matrix in spiral order.", "examples": [{"full_text": "Example 1:\nInput: matrix = [[1,2,3],[4,5,6],[7,8,9]]\nOutput: [1,2,3,6,9,8,7,4,5]", "input": "Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]", "output": "Output: [1,2,3,6,9,8,7,4,5]", "explanation": ""}, {"full_text": "Example 2:\nInput: matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]\nOutput: [1,2,3,4,8,12,11,10,9,5,6,7]", "input": "Input: matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]", "output": "Output: [1,2,3,4,8,12,11,10,9,5,6,7]", "explanation": ""}], "constraints": "Constraints:\nm == matrix.length\nn == matrix[i].length\n1 <= m, n <= 10\n-100 <= matrix[i][j] <= 100", "notes": ""}, "50": {"label": "Medium", "title": "Pow(x, n)", "tags": "algorithms,bloomberg,facebook,google,linkedin,binary-search,math", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3207, "total_accepted": 831000.0, "total_submissions": 2600000.0, "testcase_example": "'2.00000\\n10'", "body": "Implement pow(x, n), which calculates x raised to the power n (i.e., x^n).", "examples": [{"full_text": "Example 1:\nInput: x = 2.00000, n = 10\nOutput: 1024.00000", "input": "Input: x = 2.00000, n = 10", "output": "Output: 1024.00000", "explanation": ""}, {"full_text": "Example 2:\nInput: x = 2.10000, n = 3\nOutput: 9.26100", "input": "Input: x = 2.10000, n = 3", "output": "Output: 9.26100", "explanation": ""}, {"full_text": "Example 3:\nInput: x = 2.00000, n = -2\nOutput: 0.25000\nExplanation: 2^-2 = 1/2^2 = 1/4 = 0.25", "input": "Input: x = 2.00000, n = -2", "output": "Output: 0.25000", "explanation": "Explanation: 2^-2 = 1/2^2 = 1/4 = 0.25"}], "constraints": "Constraints:\n-100.0 < x < 100.0\n-2^31 <= n <= 2^31-1\n-10^4 <= x^n <= 10^4", "notes": ""}, "49": {"label": "Medium", "title": "Group Anagrams", "tags": "algorithms,amazon,bloomberg,facebook,uber,yelp,hash-table,string", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6341, "total_accepted": 1200000.0, "total_submissions": 1900000.0, "testcase_example": "'[\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]'", "body": "Given an array of strings strs, group the anagrams together. You can return the answer in any order.\nAn Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.", "examples": [{"full_text": "Example 1:\nInput: strs = [\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]\nOutput: [[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]", "input": "Input: strs = [\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]", "output": "Output: [[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]", "explanation": ""}, {"full_text": "Example 2:\nInput: strs = [\"\"]\nOutput: [[\"\"]]", "input": "Input: strs = [\"\"]", "output": "Output: [[\"\"]]", "explanation": ""}, {"full_text": "Example 3:\nInput: strs = [\"a\"]\nOutput: [[\"a\"]]", "input": "Input: strs = [\"a\"]", "output": "Output: [[\"a\"]]", "explanation": ""}], "constraints": "Constraints:\n1 <= strs.length <= 10^4\n0 <= strs[i].length <= 100\nstrs[i] consists of lowercase English letters.", "notes": ""}, "48": {"label": "Medium", "title": "Rotate Image", "tags": "algorithms,amazon,apple,microsoft,array", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6562, "total_accepted": 806800.0, "total_submissions": 1200000.0, "testcase_example": "'[[1,2,3],[4,5,6],[7,8,9]]'", "body": "You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).\nYou have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.", "examples": [{"full_text": "Example 1:\nInput: matrix = [[1,2,3],[4,5,6],[7,8,9]]\nOutput: [[7,4,1],[8,5,2],[9,6,3]]", "input": "Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]", "output": "Output: [[7,4,1],[8,5,2],[9,6,3]]", "explanation": ""}, {"full_text": "Example 2:\nInput: matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]\nOutput: [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]", "input": "Input: matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]", "output": "Output: [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]", "explanation": ""}], "constraints": "Constraints:\nn == matrix.length == matrix[i].length\n1 <= n <= 20\n-1000 <= matrix[i][j] <= 1000", "notes": ""}, "47": {"label": "Medium", "title": "Permutations II", "tags": "algorithms,linkedin,microsoft,backtracking", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5335, "total_accepted": 570100.0, "total_submissions": 1100000.0, "testcase_example": "'[1,1,2]'", "body": "Given a collection of numbers, nums,\nthat might contain duplicates, return all possible unique permutations in any order.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,1,2]\nOutput:\n[[1,1,2],\n[1,2,1],\n[2,1,1]]", "input": "Input: nums = [1,1,2]", "output": "Output:\n[[1,1,2],\n[1,2,1],\n[2,1,1]]", "explanation": ""}, {"full_text": "Example 2:\nInput: nums = [1,2,3]\nOutput: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]", "input": "Input: nums = [1,2,3]", "output": "Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]", "explanation": ""}], "constraints": "Constraints:\n1 <= nums.length <= 8\n-10 <= nums[i] <= 10", "notes": ""}, "46": {"label": "Medium", "title": "Permutations", "tags": "algorithms,linkedin,microsoft,backtracking", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7132999999999999, "total_accepted": 1100000.0, "total_submissions": 1500000.0, "testcase_example": "'[1,2,3]'", "body": "Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,2,3]\nOutput: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]", "input": "Input: nums = [1,2,3]", "output": "Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]", "explanation": ""}, {"full_text": "Example 2:\nInput: nums = [0,1]\nOutput: [[0,1],[1,0]]", "input": "Input: nums = [0,1]", "output": "Output: [[0,1],[1,0]]", "explanation": ""}, {"full_text": "Example 3:\nInput: nums = [1]\nOutput: [[1]]", "input": "Input: nums = [1]", "output": "Output: [[1]]", "explanation": ""}], "constraints": "Constraints:\n1 <= nums.length <= 6\n-10 <= nums[i] <= 10\nAll the integers of nums are unique.", "notes": ""}, "45": {"label": "Medium", "title": "Jump Game II", "tags": "algorithms,array,greedy", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3641, "total_accepted": 543400.0, "total_submissions": 1500000.0, "testcase_example": "'[2,3,1,1,4]'", "body": "Given an array of non-negative integers nums, you are initially positioned at the first index of the array.\nEach element in the array represents your maximum jump length at that position.\nYour goal is to reach the last index in the minimum number of jumps.\nYou can assume that you can always reach the last index.", "examples": [{"full_text": "Example 1:\nInput: nums = [2,3,1,1,4]\nOutput: 2\nExplanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index.", "input": "Input: nums = [2,3,1,1,4]", "output": "Output: 2", "explanation": "Explanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index."}, {"full_text": "Example 2:\nInput: nums = [2,3,0,1,4]\nOutput: 2", "input": "Input: nums = [2,3,0,1,4]", "output": "Output: 2", "explanation": ""}], "constraints": "Constraints:\n1 <= nums.length <= 10^4\n0 <= nums[i] <= 1000", "notes": ""}, "43": {"label": "Medium", "title": "Multiply Strings", "tags": "algorithms,facebook,twitter,math,string", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.37329999999999997, "total_accepted": 480300.0, "total_submissions": 1300000.0, "testcase_example": "'\"2\"\\n\"3\"'", "body": "Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2, also represented as a string.\nNote:\nYou must not use any built-in BigInteger library or convert the inputs to integer directly.", "examples": [{"full_text": "Example 1:\nInput: num1 = \"2\", num2 = \"3\"\nOutput: \"6\"", "input": "Input: num1 = \"2\", num2 = \"3\"", "output": "Output: \"6\"", "explanation": ""}, {"full_text": "Example 2:\nInput: num1 = \"123\", num2 = \"456\"\nOutput: \"56088\"", "input": "Input: num1 = \"123\", num2 = \"456\"", "output": "Output: \"56088\"", "explanation": ""}], "constraints": "Constraints:\n1 <= num1.length, num2.length <= 200\nnum1 and num2 consist of digits only.\nBoth num1 and num2\ndo not contain any leading zero, except the number 0 itself.", "notes": ""}, "40": {"label": "Medium", "title": "Combination Sum II", "tags": "algorithms,snapchat,array,backtracking", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5204, "total_accepted": 515200.00000000006, "total_submissions": 990100.0, "testcase_example": "'[10,1,2,7,6,1,5]\\n8'", "body": "Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates\nwhere the candidate numbers sum to target.\nEach number in candidates\nmay only be used once in the combination.\nNote:\nThe solution set must not contain duplicate combinations.", "examples": [{"full_text": "Example 1:\nInput: candidates = [10,1,2,7,6,1,5], target = 8\nOutput:\n[\n[1,1,6],\n[1,2,5],\n[1,7],\n[2,6]\n]", "input": "Input: candidates = [10,1,2,7,6,1,5], target = 8", "output": "Output:\n[\n[1,1,6],\n[1,2,5],\n[1,7],\n[2,6]\n]", "explanation": ""}, {"full_text": "Example 2:\nInput: candidates = [2,5,2,1,2], target = 5\nOutput:\n[\n[1,2,2],\n[5]\n]", "input": "Input: candidates = [2,5,2,1,2], target = 5", "output": "Output:\n[\n[1,2,2],\n[5]\n]", "explanation": ""}], "constraints": "Constraints:\n1 <=\ncandidates.length <= 100\n1 <=\ncandidates[i] <= 50\n1 <= target <= 30", "notes": ""}, "39": {"label": "Medium", "title": "Combination Sum", "tags": "algorithms,snapchat,uber,array,backtracking", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6437, "total_accepted": 992400.0, "total_submissions": 1500000.0, "testcase_example": "'[2,3,6,7]\\n7'", "body": "Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target. You may return the combinations in any order.\nThe same number may be chosen from candidates an unlimited number of times. Two combinations are unique if the frequency of at least one of the chosen numbers is different.\nIt is guaranteed that the number of unique combinations that sum up to target is less than 150 combinations for the given input.", "examples": [{"full_text": "Example 1:\nInput: candidates = [2,3,6,7], target = 7\nOutput: [[2,2,3],[7]]\nExplanation:\n2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.\n7 is a candidate, and 7 = 7.\nThese are the only two combinations.", "input": "Input: candidates = [2,3,6,7], target = 7", "output": "Output: [[2,2,3],[7]]", "explanation": "Explanation:\n2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.\n7 is a candidate, and 7 = 7.\nThese are the only two combinations."}, {"full_text": "Example 2:\nInput: candidates = [2,3,5], target = 8\nOutput: [[2,2,2,2],[2,3,3],[3,5]]", "input": "Input: candidates = [2,3,5], target = 8", "output": "Output: [[2,2,2,2],[2,3,3],[3,5]]", "explanation": ""}, {"full_text": "Example 3:\nInput: candidates = [2], target = 1\nOutput: []", "input": "Input: candidates = [2], target = 1", "output": "Output: []", "explanation": ""}], "constraints": "Constraints:\n1 <= candidates.length <= 30\n1 <= candidates[i] <= 200\nAll elements of candidates are distinct.\n1 <= target <= 500", "notes": ""}, "38": {"label": "Medium", "title": "Count and Say", "tags": "algorithms,facebook,string", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.48200000000000004, "total_accepted": 596900.0, "total_submissions": 1200000.0, "testcase_example": "'1'", "body": "The count-and-say sequence is a sequence of digit strings defined by the recursive formula:\ncountAndSay(1) = \"1\"\ncountAndSay(n) is the way you would \"say\" the digit string from countAndSay(n-1), which is then converted into a different digit string.\nTo determine how you \"say\" a digit string, split it into the minimal number of groups so that each group is a contiguous section all of the same character. Then for each group, say the number of characters, then say the character. To convert the saying into a digit string, replace the counts with a number and concatenate every saying.\nFor example, the saying and conversion for digit string \"3322251\":\nGiven a positive integer n, return the n^th term of the count-and-say sequence.", "examples": [{"full_text": "Example 1:\nInput: n = 1\nOutput: \"1\"\nExplanation: This is the base case.", "input": "Input: n = 1", "output": "Output: \"1\"", "explanation": "Explanation: This is the base case."}, {"full_text": "Example 2:\nInput: n = 4\nOutput: \"1211\"\nExplanation:\ncountAndSay(1) = \"1\"\ncountAndSay(2) = say \"1\" = one 1 = \"11\"\ncountAndSay(3) = say \"11\" = two 1's = \"21\"\ncountAndSay(4) = say \"21\" = one 2 + one 1 = \"12\" + \"11\" = \"1211\"", "input": "Input: n = 4", "output": "Output: \"1211\"", "explanation": "Explanation:\ncountAndSay(1) = \"1\"\ncountAndSay(2) = say \"1\" = one 1 = \"11\"\ncountAndSay(3) = say \"11\" = two 1's = \"21\"\ncountAndSay(4) = say \"21\" = one 2 + one 1 = \"12\" + \"11\" = \"1211\""}], "constraints": "Constraints:\n1 <= n <= 30", "notes": ""}, "36": {"label": "Medium", "title": "Valid Sudoku", "tags": "algorithms,apple,snapchat,uber,hash-table", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5442, "total_accepted": 669100.0, "total_submissions": 1200000.0, "testcase_example": "'[[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]'", "body": "Determine if a\n9 x 9 Sudoku board\nis valid.\nOnly the filled cells need to be validated\naccording to the following rules:\nEach row\nmust contain the\ndigits\n1-9 without repetition.\nEach column must contain the digits\n1-9\nwithout repetition.\nEach of the nine\n3 x 3 sub-boxes of the grid must contain the digits\n1-9\nwithout repetition.\nNote:\nA Sudoku board (partially filled) could be valid but is not necessarily solvable.\nOnly the filled cells need to be validated according to the mentioned\nrules.", "examples": [{"full_text": "Example 1:\nInput: board =\n[[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]\n,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"]\n,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"]\n,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"]\n,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"]\n,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"]\n,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"]\n,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"]\n,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\nOutput: true", "input": "Input: board =\n[[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]\n,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"]\n,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"]\n,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"]\n,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"]\n,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"]\n,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"]\n,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"]\n,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]", "output": "Output: true", "explanation": ""}, {"full_text": "Example 2:\nInput: board =\n[[\"8\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]\n,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"]\n,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"]\n,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"]\n,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"]\n,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"]\n,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"]\n,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"]\n,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\nOutput: false\nExplanation: Same as Example 1, except with the 5 in the top left corner being modified to 8. Since there are two 8's in the top left 3x3 sub-box, it is invalid.", "input": "Input: board =\n[[\"8\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]\n,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"]\n,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"]\n,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"]\n,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"]\n,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"]\n,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"]\n,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"]\n,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]", "output": "Output: false", "explanation": "Explanation: Same as Example 1, except with the 5 in the top left corner being modified to 8. Since there are two 8's in the top left 3x3 sub-box, it is invalid."}], "constraints": "Constraints:\nboard.length == 9\nboard[i].length == 9\nboard[i][j] is a digit 1-9 or '.'.", "notes": ""}, "34": {"label": "Medium", "title": "Find First and Last Position of Element in Sorted Array", "tags": "algorithms,linkedin,array,binary-search", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.39630000000000004, "total_accepted": 990600.0, "total_submissions": 2500000.0, "testcase_example": "'[5,7,7,8,8,10]\\n8'", "body": "Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.\nIf target is not found in the array, return [-1, -1].\nYou must\nwrite an algorithm with\nO(log n) runtime complexity.", "examples": [{"full_text": "Example 1:\nInput: nums = [5,7,7,8,8,10], target = 8\nOutput: [3,4]", "input": "Input: nums = [5,7,7,8,8,10], target = 8", "output": "Output: [3,4]", "explanation": ""}, {"full_text": "Example 2:\nInput: nums = [5,7,7,8,8,10], target = 6\nOutput: [-1,-1]", "input": "Input: nums = [5,7,7,8,8,10], target = 6", "output": "Output: [-1,-1]", "explanation": ""}, {"full_text": "Example 3:\nInput: nums = [], target = 0\nOutput: [-1,-1]", "input": "Input: nums = [], target = 0", "output": "Output: [-1,-1]", "explanation": ""}], "constraints": "Constraints:\n0 <= nums.length <= 10^5\n-10^9\n<= nums[i]\n<= 10^9\nnums is a non-decreasing array.\n-10^9\n<= target\n<= 10^9", "notes": ""}, "33": {"label": "Medium", "title": "Search in Rotated Sorted Array", "tags": "algorithms,bloomberg,facebook,linkedin,microsoft,uber,array,binary-search", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.37439999999999996, "total_accepted": 1300000.0, "total_submissions": 3600000.0, "testcase_example": "'[4,5,6,7,0,1,2]\\n0'", "body": "There is an integer array nums sorted in ascending order (with distinct values).\nPrior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].\nGiven the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.\nYou must write an algorithm with O(log n) runtime complexity.", "examples": [{"full_text": "Example 1:\nInput: nums = [4,5,6,7,0,1,2], target = 0\nOutput: 4", "input": "Input: nums = [4,5,6,7,0,1,2], target = 0", "output": "Output: 4", "explanation": ""}, {"full_text": "Example 2:\nInput: nums = [4,5,6,7,0,1,2], target = 3\nOutput: -1", "input": "Input: nums = [4,5,6,7,0,1,2], target = 3", "output": "Output: -1", "explanation": ""}, {"full_text": "Example 3:\nInput: nums = [1], target = 0\nOutput: -1", "input": "Input: nums = [1], target = 0", "output": "Output: -1", "explanation": ""}], "constraints": "Constraints:\n1 <= nums.length <= 5000\n-10^4 <= nums[i] <= 10^4\nAll values of nums are unique.\nnums is an ascending array that is possibly rotated.\n-10^4 <= target <= 10^4", "notes": ""}, "31": {"label": "Medium", "title": "Next Permutation", "tags": "algorithms,google,array", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3529, "total_accepted": 703600.0, "total_submissions": 2000000.0, "testcase_example": "'[1,2,3]'", "body": "A permutation of an array of integers is an arrangement of its members into a sequence or linear order.\nFor example, for arr = [1,2,3], the following are considered permutations of arr: [1,2,3], [1,3,2], [3,1,2], [2,3,1].\nThe next permutation of an array of integers is the next lexicographically greater permutation of its integer. More formally, if all the permutations of the array are sorted in one container according to their lexicographical order, then the next permutation of that array is the permutation that follows it in the sorted container. If such arrangement is not possible, the array must be rearranged as the lowest possible order (i.e., sorted in ascending order).\nFor example, the next permutation of arr = [1,2,3] is [1,3,2].\nSimilarly, the next permutation of arr = [2,3,1] is [3,1,2].\nWhile the next permutation of arr = [3,2,1] is [1,2,3] because [3,2,1] does not have a lexicographical larger rearrangement.\nGiven an array of integers nums, find the next permutation of nums.\nThe replacement must be in place and use only constant extra memory.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,2,3]\nOutput: [1,3,2]", "input": "Input: nums = [1,2,3]", "output": "Output: [1,3,2]", "explanation": ""}, {"full_text": "Example 2:\nInput: nums = [3,2,1]\nOutput: [1,2,3]", "input": "Input: nums = [3,2,1]", "output": "Output: [1,2,3]", "explanation": ""}, {"full_text": "Example 3:\nInput: nums = [1,1,5]\nOutput: [1,5,1]", "input": "Input: nums = [1,1,5]", "output": "Output: [1,5,1]", "explanation": ""}], "constraints": "Constraints:\n1 <= nums.length <= 100\n0 <= nums[i] <= 100", "notes": ""}, "29": {"label": "Medium", "title": "Divide Two Integers", "tags": "algorithms,binary-search,math", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.1705, "total_accepted": 446600.0, "total_submissions": 2600000.0, "testcase_example": "'10\\n3'", "body": "Given two integers dividend and divisor, divide two integers without using multiplication, division, and mod operator.\nThe integer division should truncate toward zero, which means losing its fractional part. For example, 8.345 would be truncated to 8, and -2.7335 would be truncated to -2.\nReturn the quotient after dividing dividend by divisor.\nNote: Assume we are dealing with an environment that could only store integers within the 32-bit signed integer range: [\u22122^31, 2^31 \u2212 1]. For this problem, if the quotient is strictly greater than 2^31 - 1, then return 2^31 - 1, and if the quotient is strictly less than -2^31, then return -2^31.", "examples": [{"full_text": "Example 1:\nInput: dividend = 10, divisor = 3\nOutput: 3\nExplanation: 10/3 = 3.33333.. which is truncated to 3.", "input": "Input: dividend = 10, divisor = 3", "output": "Output: 3", "explanation": "Explanation: 10/3 = 3.33333.. which is truncated to 3."}, {"full_text": "Example 2:\nInput: dividend = 7, divisor = -3\nOutput: -2\nExplanation: 7/-3 = -2.33333.. which is truncated to -2.", "input": "Input: dividend = 7, divisor = -3", "output": "Output: -2", "explanation": "Explanation: 7/-3 = -2.33333.. which is truncated to -2."}], "constraints": "Constraints:\n-2^31 <= dividend, divisor <= 2^31 - 1\ndivisor != 0", "notes": ""}, "24": {"label": "Medium", "title": "Swap Nodes in Pairs", "tags": "algorithms,bloomberg,microsoft,uber,linked-list", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.58, "total_accepted": 811400.0, "total_submissions": 1400000.0, "testcase_example": "'[1,2,3,4]'", "body": "Given a\nlinked list, swap every two adjacent nodes and return its head. You must solve the problem without\nmodifying the values in the list's nodes (i.e., only nodes themselves may be changed.)", "examples": [{"full_text": "Example 1:\nInput: head = [1,2,3,4]\nOutput: [2,1,4,3]", "input": "Input: head = [1,2,3,4]", "output": "Output: [2,1,4,3]", "explanation": ""}, {"full_text": "Example 2:\nInput: head = []\nOutput: []", "input": "Input: head = []", "output": "Output: []", "explanation": ""}, {"full_text": "Example 3:\nInput: head = [1]\nOutput: [1]", "input": "Input: head = [1]", "output": "Output: [1]", "explanation": ""}], "constraints": "Constraints:\nThe number of nodes in the\nlist\nis in the range [0, 100].\n0 <= Node.val <= 100", "notes": ""}, "22": {"label": "Medium", "title": "Generate Parentheses", "tags": "algorithms,google,uber,zenefits,backtracking,string", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6938, "total_accepted": 980300.0, "total_submissions": 1400000.0, "testcase_example": "'3'", "body": "Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.", "examples": [{"full_text": "Example 1:\nInput: n = 3\nOutput: [\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]", "input": "Input: n = 3", "output": "Output: [\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]", "explanation": ""}, {"full_text": "Example 2:\nInput: n = 1\nOutput: [\"()\"]", "input": "Input: n = 1", "output": "Output: [\"()\"]", "explanation": ""}], "constraints": "Constraints:\n1 <= n <= 8", "notes": ""}, "19": {"label": "Medium", "title": "Remove Nth Node From End of List", "tags": "algorithms,linked-list,two-pointers", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3786, "total_accepted": 1200000.0, "total_submissions": 3300000.0, "testcase_example": "'[1,2,3,4,5]\\n2'", "body": "Given the head of a linked list, remove the n^th node from the end of the list and return its head.", "examples": [{"full_text": "Example 1:\nInput: head = [1,2,3,4,5], n = 2\nOutput: [1,2,3,5]", "input": "Input: head = [1,2,3,4,5], n = 2", "output": "Output: [1,2,3,5]", "explanation": ""}, {"full_text": "Example 2:\nInput: head = [1], n = 1\nOutput: []", "input": "Input: head = [1], n = 1", "output": "Output: []", "explanation": ""}, {"full_text": "Example 3:\nInput: head = [1,2], n = 1\nOutput: [1]", "input": "Input: head = [1,2], n = 1", "output": "Output: [1]", "explanation": ""}], "constraints": "Constraints:\nThe number of nodes in the list is sz.\n1 <= sz <= 30\n0 <= Node.val <= 100\n1 <= n <= sz\nFollow up: Could you do this in one pass?", "notes": ""}, "18": {"label": "Medium", "title": "4Sum", "tags": "algorithms,linkedin,array,hash-table,two-pointers", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.37020000000000003, "total_accepted": 543100.0, "total_submissions": 1500000.0, "testcase_example": "'[1,0,-1,0,-2,2]\\n0'", "body": "Given an array nums of n integers, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that:\n0 <= a, b, c, d\n< n\na, b, c, and d are distinct.\nnums[a] + nums[b] + nums[c] + nums[d] == target\nYou may return the answer in any order.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,0,-1,0,-2,2], target = 0\nOutput: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]", "input": "Input: nums = [1,0,-1,0,-2,2], target = 0", "output": "Output: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]", "explanation": ""}, {"full_text": "Example 2:\nInput: nums = [2,2,2,2,2], target = 8\nOutput: [[2,2,2,2]]", "input": "Input: nums = [2,2,2,2,2], target = 8", "output": "Output: [[2,2,2,2]]", "explanation": ""}], "constraints": "Constraints:\n1 <= nums.length <= 200\n-10^9 <= nums[i] <= 10^9\n-10^9 <= target <= 10^9", "notes": ""}, "17": {"label": "Medium", "title": "Letter Combinations of a Phone Number", "tags": "algorithms,amazon,dropbox,facebook,google,uber,backtracking,string", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5299, "total_accepted": 1100000.0, "total_submissions": 2100000.0, "testcase_example": "'\"23\"'", "body": "Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.\nA mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.", "examples": [{"full_text": "Example 1:\nInput: digits = \"23\"\nOutput: [\"ad\",\"ae\",\"af\",\"bd\",\"be\",\"bf\",\"cd\",\"ce\",\"cf\"]", "input": "Input: digits = \"23\"", "output": "Output: [\"ad\",\"ae\",\"af\",\"bd\",\"be\",\"bf\",\"cd\",\"ce\",\"cf\"]", "explanation": ""}, {"full_text": "Example 2:\nInput: digits = \"\"\nOutput: []", "input": "Input: digits = \"\"", "output": "Output: []", "explanation": ""}, {"full_text": "Example 3:\nInput: digits = \"2\"\nOutput: [\"a\",\"b\",\"c\"]", "input": "Input: digits = \"2\"", "output": "Output: [\"a\",\"b\",\"c\"]", "explanation": ""}], "constraints": "Constraints:\n0 <= digits.length <= 4\ndigits[i] is a digit in the range ['2', '9'].", "notes": ""}, "16": {"label": "Medium", "title": "3Sum Closest", "tags": "algorithms,bloomberg,array,two-pointers", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4702, "total_accepted": 749000.0, "total_submissions": 1600000.0, "testcase_example": "'[-1,2,1,-4]\\n1'", "body": "Given an integer array nums of length n and an integer target, find three integers in nums such that the sum is closest to target.\nReturn the sum of the three integers.\nYou may assume that each input would have exactly one solution.", "examples": [{"full_text": "Example 1:\nInput: nums = [-1,2,1,-4], target = 1\nOutput: 2\nExplanation: The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).", "input": "Input: nums = [-1,2,1,-4], target = 1", "output": "Output: 2", "explanation": "Explanation: The sum that is closest to the target is 2. (-1 + 2 + 1 = 2)."}, {"full_text": "Example 2:\nInput: nums = [0,0,0], target = 1\nOutput: 0", "input": "Input: nums = [0,0,0], target = 1", "output": "Output: 0", "explanation": ""}], "constraints": "Constraints:\n3 <= nums.length <= 1000\n-1000 <= nums[i] <= 1000\n-10^4 <= target <= 10^4", "notes": ""}, "15": {"label": "Medium", "title": "3Sum", "tags": "algorithms,adobe,amazon,bloomberg,facebook,microsoft,array,two-pointers", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.306, "total_accepted": 1800000.0, "total_submissions": 5800000.0, "testcase_example": "'[-1,0,1,2,-1,-4]'", "body": "Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.\nNotice that the solution set must not contain duplicate triplets.", "examples": [{"full_text": "Example 1:\nInput: nums = [-1,0,1,2,-1,-4]\nOutput: [[-1,-1,2],[-1,0,1]]", "input": "Input: nums = [-1,0,1,2,-1,-4]", "output": "Output: [[-1,-1,2],[-1,0,1]]", "explanation": ""}, {"full_text": "Example 2:\nInput: nums = []\nOutput: []", "input": "Input: nums = []", "output": "Output: []", "explanation": ""}, {"full_text": "Example 3:\nInput: nums = [0]\nOutput: []", "input": "Input: nums = [0]", "output": "Output: []", "explanation": ""}], "constraints": "Constraints:\n0 <= nums.length <= 3000\n-10^5 <= nums[i] <= 10^5", "notes": ""}, "12": {"label": "Medium", "title": "Integer to Roman", "tags": "algorithms,twitter,math,string", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5902000000000001, "total_accepted": 635600.0, "total_submissions": 1100000.0, "testcase_example": "'3'", "body": "Roman numerals are represented by seven different symbols:\nI, V, X, L, C, D and M.\nSymbol Value\nI 1\nV 5\nX 10\nL 50\nC 100\nD 500\nM 1000\nFor example,\n2 is written as II\nin Roman numeral, just two one's added together. 12 is written as\nXII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.\nRoman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:\nI can be placed before V (5) and X (10) to make 4 and 9.\nX can be placed before L (50) and C (100) to make 40 and 90.\nC can be placed before D (500) and M (1000) to make 400 and 900.\nGiven an integer, convert it to a roman numeral.", "examples": [{"full_text": "Example 1:\nInput: num = 3\nOutput: \"III\"\nExplanation: 3 is represented as 3 ones.", "input": "Input: num = 3", "output": "Output: \"III\"", "explanation": "Explanation: 3 is represented as 3 ones."}, {"full_text": "Example 2:\nInput: num = 58\nOutput: \"LVIII\"\nExplanation: L = 50, V = 5, III = 3.", "input": "Input: num = 58", "output": "Output: \"LVIII\"", "explanation": "Explanation: L = 50, V = 5, III = 3."}, {"full_text": "Example 3:\nInput: num = 1994\nOutput: \"MCMXCIV\"\nExplanation: M = 1000, CM = 900, XC = 90 and IV = 4.", "input": "Input: num = 1994", "output": "Output: \"MCMXCIV\"", "explanation": "Explanation: M = 1000, CM = 900, XC = 90 and IV = 4."}], "constraints": "Constraints:\n1 <= num <= 3999", "notes": ""}, "11": {"label": "Medium", "title": "Container With Most Water", "tags": "algorithms,bloomberg,array,two-pointers", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5338, "total_accepted": 1300000.0, "total_submissions": 2400000.0, "testcase_example": "'[1,8,6,2,5,4,8,3,7]'", "body": "You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the i^th line are (i, 0) and (i, height[i]).\nFind two lines that together with the x-axis form a container, such that the container contains the most water.\nReturn the maximum amount of water a container can store.\nNotice that you may not slant the container.", "examples": [{"full_text": "Example 1:\nInput: height = [1,8,6,2,5,4,8,3,7]\nOutput: 49\nExplanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.", "input": "Input: height = [1,8,6,2,5,4,8,3,7]", "output": "Output: 49", "explanation": "Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49."}, {"full_text": "Example 2:\nInput: height = [1,1]\nOutput: 1", "input": "Input: height = [1,1]", "output": "Output: 1", "explanation": ""}], "constraints": "Constraints:\nn == height.length\n2 <= n <= 10^5\n0 <= height[i] <= 10^4", "notes": ""}, "8": {"label": "Medium", "title": "String to Integer (atoi)", "tags": "algorithms,amazon,bloomberg,microsoft,uber,math,string", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.1646, "total_accepted": 942100.0, "total_submissions": 5700000.0, "testcase_example": "'\"42\"'", "body": "Implement the myAtoi(string s) function, which converts a string to a 32-bit signed integer (similar to C/C++'s atoi function).\nThe algorithm for myAtoi(string s) is as follows:\nRead in and ignore any leading whitespace.\nCheck if the next character (if not already at the end of the string) is '-' or '+'. Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present.\nRead in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\nConvert these digits into an integer (i.e. \"123\" -> 123, \"0032\" -> 32). If no digits were read, then the integer is 0. Change the sign as necessary (from step 2).\nIf the integer is out of the 32-bit signed integer range [-2^31, 2^31 - 1], then clamp the integer so that it remains in the range. Specifically, integers less than -2^31 should be clamped to -2^31, and integers greater than 2^31 - 1 should be clamped to 2^31 - 1.\nReturn the integer as the final result.\nNote:\nOnly the space character ' ' is considered a whitespace character.\nDo not ignore any characters other than the leading whitespace or the rest of the string after the digits.", "examples": [{"full_text": "Example 1:\nInput: s = \"42\"\nOutput: 42\nExplanation: The underlined characters are what is read in, the caret is the current reader position.\nStep 1: \"42\" (no characters read because there is no leading whitespace)\n^\nStep 2: \"42\" (no characters read because there is neither a '-' nor '+')\n^\nStep 3: \"42\" (\"42\" is read in)\n^\nThe parsed integer is 42.\nSince 42 is in the range [-2^31, 2^31 - 1], the final result is 42.", "input": "Input: s = \"42\"", "output": "Output: 42", "explanation": "Explanation: The underlined characters are what is read in, the caret is the current reader position.\nStep 1: \"42\" (no characters read because there is no leading whitespace)\n^\nStep 2: \"42\" (no characters read because there is neither a '-' nor '+')\n^\nStep 3: \"42\" (\"42\" is read in)\n^\nThe parsed integer is 42.\nSince 42 is in the range [-2^31, 2^31 - 1], the final result is 42."}, {"full_text": "Example 2:\nInput: s = \" -42\"\nOutput: -42\nExplanation:\nStep 1: \" -42\" (leading whitespace is read and ignored)\n^\nStep 2: \" -42\" ('-' is read, so the result should be negative)\n^\nStep 3: \" -42\" (\"42\" is read in)\n^\nThe parsed integer is -42.\nSince -42 is in the range [-2^31, 2^31 - 1], the final result is -42.", "input": "Input: s = \" -42\"", "output": "Output: -42", "explanation": "Explanation:\nStep 1: \" -42\" (leading whitespace is read and ignored)\n^\nStep 2: \" -42\" ('-' is read, so the result should be negative)\n^\nStep 3: \" -42\" (\"42\" is read in)\n^\nThe parsed integer is -42.\nSince -42 is in the range [-2^31, 2^31 - 1], the final result is -42."}, {"full_text": "Example 3:\nInput: s = \"4193 with words\"\nOutput: 4193\nExplanation:\nStep 1: \"4193 with words\" (no characters read because there is no leading whitespace)\n^\nStep 2: \"4193 with words\" (no characters read because there is neither a '-' nor '+')\n^\nStep 3: \"4193 with words\" (\"4193\" is read in; reading stops because the next character is a non-digit)\n^\nThe parsed integer is 4193.\nSince 4193 is in the range [-2^31, 2^31 - 1], the final result is 4193.", "input": "Input: s = \"4193 with words\"", "output": "Output: 4193", "explanation": "Explanation:\nStep 1: \"4193 with words\" (no characters read because there is no leading whitespace)\n^\nStep 2: \"4193 with words\" (no characters read because there is neither a '-' nor '+')\n^\nStep 3: \"4193 with words\" (\"4193\" is read in; reading stops because the next character is a non-digit)\n^\nThe parsed integer is 4193.\nSince 4193 is in the range [-2^31, 2^31 - 1], the final result is 4193."}], "constraints": "Constraints:\n0 <= s.length <= 200\ns consists of English letters (lower-case and upper-case), digits (0-9), ' ', '+', '-', and '.'.", "notes": ""}, "7": {"label": "Medium", "title": "Reverse Integer", "tags": "algorithms,apple,bloomberg,math", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.2651, "total_accepted": 2000000.0, "total_submissions": 7400000.0, "testcase_example": "'123'", "body": "Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-2^31, 2^31 - 1], then return 0.\nAssume the environment does not allow you to store 64-bit integers (signed or unsigned).", "examples": [{"full_text": "Example 1:\nInput: x = 123\nOutput: 321", "input": "Input: x = 123", "output": "Output: 321", "explanation": ""}, {"full_text": "Example 2:\nInput: x = -123\nOutput: -321", "input": "Input: x = -123", "output": "Output: -321", "explanation": ""}, {"full_text": "Example 3:\nInput: x = 120\nOutput: 21", "input": "Input: x = 120", "output": "Output: 21", "explanation": ""}], "constraints": "Constraints:\n-2^31 <= x <= 2^31 - 1", "notes": ""}, "6": {"label": "Medium", "title": "Zigzag Conversion", "tags": "algorithms,string", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4094, "total_accepted": 714700.0, "total_submissions": 1700000.0, "testcase_example": "'\"PAYPALISHIRING\"\\n3'", "body": "The string \"PAYPALISHIRING\" is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)\nP A H N\nA P L S I I G\nY I R\nAnd then read line by line: \"PAHNAPLSIIGYIR\"\nWrite the code that will take a string and make this conversion given a number of rows:\nstring convert(string s, int numRows);", "examples": [{"full_text": "Example 1:\nInput: s = \"PAYPALISHIRING\", numRows = 3\nOutput: \"PAHNAPLSIIGYIR\"", "input": "Input: s = \"PAYPALISHIRING\", numRows = 3", "output": "Output: \"PAHNAPLSIIGYIR\"", "explanation": ""}, {"full_text": "Example 2:\nInput: s = \"PAYPALISHIRING\", numRows = 4\nOutput: \"PINALSIGYAHRPI\"\nExplanation:\nP I N\nA L S I G\nY A H R\nP I", "input": "Input: s = \"PAYPALISHIRING\", numRows = 4", "output": "Output: \"PINALSIGYAHRPI\"", "explanation": "Explanation:\nP I N\nA L S I G\nY A H R\nP I"}, {"full_text": "Example 3:\nInput: s = \"A\", numRows = 1\nOutput: \"A\"", "input": "Input: s = \"A\", numRows = 1", "output": "Output: \"A\"", "explanation": ""}], "constraints": "Constraints:\n1 <= s.length <= 1000\ns consists of English letters (lower-case and upper-case), ',' and '.'.\n1 <= numRows <= 1000", "notes": ""}, "5": {"label": "Medium", "title": "Longest Palindromic Substring", "tags": "algorithms,amazon,bloomberg,microsoft,string", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.31679999999999997, "total_accepted": 1700000.0, "total_submissions": 5300000.0, "testcase_example": "'\"babad\"'", "body": "Given a string s, return the longest palindromic substring in s.", "examples": [{"full_text": "Example 1:\nInput: s = \"babad\"\nOutput: \"bab\"\nExplanation: \"aba\" is also a valid answer.", "input": "Input: s = \"babad\"", "output": "Output: \"bab\"", "explanation": "Explanation: \"aba\" is also a valid answer."}, {"full_text": "Example 2:\nInput: s = \"cbbd\"\nOutput: \"bb\"", "input": "Input: s = \"cbbd\"", "output": "Output: \"bb\"", "explanation": ""}], "constraints": "Constraints:\n1 <= s.length <= 1000\ns consist of only digits and English letters.", "notes": ""}, "3": {"label": "Medium", "title": "Longest Substring Without Repeating Characters", "tags": "algorithms,adobe,amazon,bloomberg,yelp,hash-table,string,two-pointers", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3283, "total_accepted": 3000000.0, "total_submissions": 9100000.0, "testcase_example": "'\"abcabcbb\"'", "body": "Given a string s, find the length of the longest substring without repeating characters.", "examples": [{"full_text": "Example 1:\nInput: s = \"abcabcbb\"\nOutput: 3\nExplanation: The answer is \"abc\", with the length of 3.", "input": "Input: s = \"abcabcbb\"", "output": "Output: 3", "explanation": "Explanation: The answer is \"abc\", with the length of 3."}, {"full_text": "Example 2:\nInput: s = \"bbbbb\"\nOutput: 1\nExplanation: The answer is \"b\", with the length of 1.", "input": "Input: s = \"bbbbb\"", "output": "Output: 1", "explanation": "Explanation: The answer is \"b\", with the length of 1."}, {"full_text": "Example 3:\nInput: s = \"pwwkew\"\nOutput: 3\nExplanation: The answer is \"wke\", with the length of 3.\nNotice that the answer must be a substring, \"pwke\" is a subsequence and not a substring.", "input": "Input: s = \"pwwkew\"", "output": "Output: 3", "explanation": "Explanation: The answer is \"wke\", with the length of 3.\nNotice that the answer must be a substring, \"pwke\" is a subsequence and not a substring."}], "constraints": "Constraints:\n0 <= s.length <= 5 * 10^4\ns consists of English letters, digits, symbols and spaces.", "notes": ""}, "2": {"label": "Medium", "title": "Add Two Numbers", "tags": "algorithms,adobe,airbnb,amazon,bloomberg,microsoft,linked-list,math", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3788, "total_accepted": 2500000.0, "total_submissions": 6600000.0, "testcase_example": "'[2,4,3]\\n[5,6,4]'", "body": "You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum\nas a linked list.\nYou may assume the two numbers do not contain any leading zero, except the number 0 itself.", "examples": [{"full_text": "Example 1:\nInput: l1 = [2,4,3], l2 = [5,6,4]\nOutput: [7,0,8]\nExplanation: 342 + 465 = 807.", "input": "Input: l1 = [2,4,3], l2 = [5,6,4]", "output": "Output: [7,0,8]", "explanation": "Explanation: 342 + 465 = 807."}, {"full_text": "Example 2:\nInput: l1 = [0], l2 = [0]\nOutput: [0]", "input": "Input: l1 = [0], l2 = [0]", "output": "Output: [0]", "explanation": ""}, {"full_text": "Example 3:\nInput: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]\nOutput: [8,9,9,9,0,0,0,1]", "input": "Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]", "output": "Output: [8,9,9,9,0,0,0,1]", "explanation": ""}], "constraints": "Constraints:\nThe number of nodes in each linked list is in the range [1, 100].\n0 <= Node.val <= 9\nIt is guaranteed that the list represents a number that does not have leading zeros.", "notes": ""}, "2172": {"label": "Hard", "title": "Maximum AND Sum of Array", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4079, "total_accepted": 3900.0, "total_submissions": 9600.0, "testcase_example": "'[1,2,3,4,5,6]\\n3'", "body": "You are given an integer array nums of length n and an integer numSlots such that 2 * numSlots >= n. There are numSlots slots numbered from 1 to numSlots.\nYou have to place all n integers into the slots such that each slot contains at most two numbers. The AND sum of a given placement is the sum of the bitwise AND of every number with its respective slot number.\nFor example, the AND sum of placing the numbers [1, 3] into slot 1 and [4, 6] into slot 2 is equal to (1 AND 1) + (3 AND 1) + (4 AND 2) + (6 AND 2) = 1 + 1 + 0 + 2 = 4.\nReturn the maximum possible AND sum of nums given numSlots slots.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,2,3,4,5,6], numSlots = 3\nOutput: 9\nExplanation: One possible placement is [1, 4] into slot 1, [2, 6] into slot 2, and [3, 5] into slot 3.\nThis gives the maximum AND sum of (1 AND 1) + (4 AND 1) + (2 AND 2) + (6 AND 2) + (3 AND 3) + (5 AND 3) = 1 + 0 + 2 + 2 + 3 + 1 = 9.", "input": "Input: nums = [1,2,3,4,5,6], numSlots = 3", "output": "Output: 9", "explanation": "Explanation: One possible placement is [1, 4] into slot 1, [2, 6] into slot 2, and [3, 5] into slot 3.\nThis gives the maximum AND sum of (1 AND 1) + (4 AND 1) + (2 AND 2) + (6 AND 2) + (3 AND 3) + (5 AND 3) = 1 + 0 + 2 + 2 + 3 + 1 = 9."}, {"full_text": "Example 2:\nInput: nums = [1,3,10,4,7,1], numSlots = 9\nOutput: 24\nExplanation: One possible placement is [1, 1] into slot 1, [3] into slot 3, [4] into slot 4, [7] into slot 7, and [10] into slot 9.\nThis gives the maximum AND sum of (1 AND 1) + (1 AND 1) + (3 AND 3) + (4 AND 4) + (7 AND 7) + (10 AND 9) = 1 + 1 + 3 + 4 + 7 + 8 = 24.\nNote that slots 2, 5, 6, and 8 are empty which is permitted.", "input": "Input: nums = [1,3,10,4,7,1], numSlots = 9", "output": "Output: 24", "explanation": "Explanation: One possible placement is [1, 1] into slot 1, [3] into slot 3, [4] into slot 4, [7] into slot 7, and [10] into slot 9.\nThis gives the maximum AND sum of (1 AND 1) + (1 AND 1) + (3 AND 3) + (4 AND 4) + (7 AND 7) + (10 AND 9) = 1 + 1 + 3 + 4 + 7 + 8 = 24.\nNote that slots 2, 5, 6, and 8 are empty which is permitted."}], "constraints": "Constraints:\nn == nums.length\n1 <= numSlots <= 9\n1 <= n <= 2 * numSlots\n1 <= nums[i] <= 15", "notes": ""}, "2167": {"label": "Hard", "title": "Minimum Time to Remove All Cars Containing Illegal Goods", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3738, "total_accepted": 6500.0, "total_submissions": 17300.0, "testcase_example": "'\"1100101\"'", "body": "You are given a 0-indexed binary string s which represents a sequence of train cars. s[i] = '0' denotes that the i^th car does not contain illegal goods and s[i] = '1' denotes that the i^th car does contain illegal goods.\nAs the train conductor, you would like to get rid of all the cars containing illegal goods. You can do any of the following three operations any number of times:\nRemove a train car from the left end (i.e., remove s[0]) which takes 1 unit of time.\nRemove a train car from the right end (i.e., remove s[s.length - 1]) which takes 1 unit of time.\nRemove a train car from anywhere in the sequence which takes 2 units of time.\nReturn the minimum time to remove all the cars containing illegal goods.\nNote that an empty sequence of cars is considered to have no cars containing illegal goods.", "examples": [{"full_text": "Example 1:\nInput: s = \"1100101\"\nOutput: 5\nExplanation:\nOne way to remove all the cars containing illegal goods from the sequence is to\n- remove a car from the left end 2 times. Time taken is 2 * 1 = 2.\n- remove a car from the right end. Time taken is 1.\n- remove the car containing illegal goods found in the middle. Time taken is 2.\nThis obtains a total time of 2 + 1 + 2 = 5.\nAn alternative way is to\n- remove a car from the left end 2 times. Time taken is 2 * 1 = 2.\n- remove a car from the right end 3 times. Time taken is 3 * 1 = 3.\nThis also obtains a total time of 2 + 3 = 5.\n5 is the minimum time taken to remove all the cars containing illegal goods.\nThere are no other ways to remove them with less time.", "input": "Input: s = \"1100101\"", "output": "Output: 5", "explanation": "Explanation:\nOne way to remove all the cars containing illegal goods from the sequence is to\n- remove a car from the left end 2 times. Time taken is 2 * 1 = 2.\n- remove a car from the right end. Time taken is 1.\n- remove the car containing illegal goods found in the middle. Time taken is 2.\nThis obtains a total time of 2 + 1 + 2 = 5.\nAn alternative way is to\n- remove a car from the left end 2 times. Time taken is 2 * 1 = 2.\n- remove a car from the right end 3 times. Time taken is 3 * 1 = 3.\nThis also obtains a total time of 2 + 3 = 5.\n5 is the minimum time taken to remove all the cars containing illegal goods.\nThere are no other ways to remove them with less time."}, {"full_text": "Example 2:\nInput: s = \"0010\"\nOutput: 2\nExplanation:\nOne way to remove all the cars containing illegal goods from the sequence is to\n- remove a car from the left end 3 times. Time taken is 3 * 1 = 3.\nThis obtains a total time of 3.\nAnother way to remove all the cars containing illegal goods from the sequence is to\n- remove the car containing illegal goods found in the middle. Time taken is 2.\nThis obtains a total time of 2.\nAnother way to remove all the cars containing illegal goods from the sequence is to\n- remove a car from the right end 2 times. Time taken is 2 * 1 = 2.\nThis obtains a total time of 2.\n2 is the minimum time taken to remove all the cars containing illegal goods.\nThere are no other ways to remove them with less time.", "input": "Input: s = \"0010\"", "output": "Output: 2", "explanation": "Explanation:\nOne way to remove all the cars containing illegal goods from the sequence is to\n- remove a car from the left end 3 times. Time taken is 3 * 1 = 3.\nThis obtains a total time of 3.\nAnother way to remove all the cars containing illegal goods from the sequence is to\n- remove the car containing illegal goods found in the middle. Time taken is 2.\nThis obtains a total time of 2.\nAnother way to remove all the cars containing illegal goods from the sequence is to\n- remove a car from the right end 2 times. Time taken is 2 * 1 = 2.\nThis obtains a total time of 2.\n2 is the minimum time taken to remove all the cars containing illegal goods.\nThere are no other ways to remove them with less time."}], "constraints": "Constraints:\n1 <= s.length <= 2 * 10^5\ns[i] is either '0' or '1'.", "notes": ""}, "2163": {"label": "Hard", "title": "Minimum Difference in Sums After Removal of Elements", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.44020000000000004, "total_accepted": 3600.0, "total_submissions": 8300.0, "testcase_example": "'[3,1,2]'", "body": "You are given a 0-indexed integer array nums consisting of 3 * n elements.\nYou are allowed to remove any subsequence of elements of size exactly n from nums. The remaining 2 * n elements will be divided into two equal parts:\nThe first n elements belonging to the first part and their sum is sumfirst.\nThe next n elements belonging to the second part and their sum is sumsecond.\nThe difference in sums of the two parts is denoted as sumfirst - sumsecond.\nFor example, if sumfirst = 3 and sumsecond = 2, their difference is 1.\nSimilarly, if sumfirst = 2 and sumsecond = 3, their difference is -1.\nReturn the minimum difference possible between the sums of the two parts after the removal of n elements.", "examples": [{"full_text": "Example 1:\nInput: nums = [3,1,2]\nOutput: -1\nExplanation: Here, nums has 3 elements, so n = 1.\nThus we have to remove 1 element from nums and divide the array into two equal parts.\n- If we remove nums[0] = 3, the array will be [1,2]. The difference in sums of the two parts will be 1 - 2 = -1.\n- If we remove nums[1] = 1, the array will be [3,2]. The difference in sums of the two parts will be 3 - 2 = 1.\n- If we remove nums[2] = 2, the array will be [3,1]. The difference in sums of the two parts will be 3 - 1 = 2.\nThe minimum difference between sums of the two parts is min(-1,1,2) = -1.", "input": "Input: nums = [3,1,2]", "output": "Output: -1", "explanation": "Explanation: Here, nums has 3 elements, so n = 1.\nThus we have to remove 1 element from nums and divide the array into two equal parts.\n- If we remove nums[0] = 3, the array will be [1,2]. The difference in sums of the two parts will be 1 - 2 = -1.\n- If we remove nums[1] = 1, the array will be [3,2]. The difference in sums of the two parts will be 3 - 2 = 1.\n- If we remove nums[2] = 2, the array will be [3,1]. The difference in sums of the two parts will be 3 - 1 = 2.\nThe minimum difference between sums of the two parts is min(-1,1,2) = -1."}, {"full_text": "Example 2:\nInput: nums = [7,9,5,8,1,3]\nOutput: 1\nExplanation: Here n = 2. So we must remove 2 elements and divide the remaining array into two parts containing two elements each.\nIf we remove nums[2] = 5 and nums[3] = 8, the resultant array will be [7,9,1,3]. The difference in sums will be (7+9) - (1+3) = 12.\nTo obtain the minimum difference, we should remove nums[1] = 9 and nums[4] = 1. The resultant array becomes [7,5,8,3]. The difference in sums of the two parts is (7+5) - (8+3) = 1.\nIt can be shown that it is not possible to obtain a difference smaller than 1.", "input": "Input: nums = [7,9,5,8,1,3]", "output": "Output: 1", "explanation": "Explanation: Here n = 2. So we must remove 2 elements and divide the remaining array into two parts containing two elements each.\nIf we remove nums[2] = 5 and nums[3] = 8, the resultant array will be [7,9,1,3]. The difference in sums will be (7+9) - (1+3) = 12.\nTo obtain the minimum difference, we should remove nums[1] = 9 and nums[4] = 1. The resultant array becomes [7,5,8,3]. The difference in sums of the two parts is (7+5) - (8+3) = 1.\nIt can be shown that it is not possible to obtain a difference smaller than 1."}], "constraints": "Constraints:\nnums.length == 3 * n\n1 <= n <= 10^5\n1 <= nums[i] <= 10^5", "notes": ""}, "2157": {"label": "Hard", "title": "Groups of Strings", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.2348, "total_accepted": 4500.0, "total_submissions": 19400.0, "testcase_example": "'[\"a\",\"b\",\"ab\",\"cde\"]'", "body": "You are given a 0-indexed array of strings words. Each string consists of lowercase English letters only. No letter occurs more than once in any string of words.\nTwo strings s1 and s2 are said to be connected if the set of letters of s2 can be obtained from the set of letters of s1 by any one of the following operations:\nAdding exactly one letter to the set of the letters of s1.\nDeleting exactly one letter from the set of the letters of s1.\nReplacing exactly one letter from the set of the letters of s1 with any letter, including itself.\nThe array words can be divided into one or more non-intersecting groups. A string belongs to a group if any one of the following is true:\nIt is connected to at least one other string of the group.\nIt is the only string present in the group.\nNote that the strings in words should be grouped in such a manner that a string belonging to a group cannot be connected to a string present in any other group. It can be proved that such an arrangement is always unique.\nReturn an array ans of size 2 where:\nans[0] is the maximum number of groups words can be divided into, and\nans[1] is the size of the largest group.", "examples": [{"full_text": "Example 1:\nInput: words = [\"a\",\"b\",\"ab\",\"cde\"]\nOutput: [2,3]\nExplanation:\n- words[0] can be used to obtain words[1] (by replacing 'a' with 'b'), and words[2] (by adding 'b'). So words[0] is connected to words[1] and words[2].\n- words[1] can be used to obtain words[0] (by replacing 'b' with 'a'), and words[2] (by adding 'a'). So words[1] is connected to words[0] and words[2].\n- words[2] can be used to obtain words[0] (by deleting 'b'), and words[1] (by deleting 'a'). So words[2] is connected to words[0] and words[1].\n- words[3] is not connected to any string in words.\nThus, words can be divided into 2 groups [\"a\",\"b\",\"ab\"] and [\"cde\"]. The size of the largest group is 3.", "input": "Input: words = [\"a\",\"b\",\"ab\",\"cde\"]", "output": "Output: [2,3]", "explanation": "Explanation:\n- words[0] can be used to obtain words[1] (by replacing 'a' with 'b'), and words[2] (by adding 'b'). So words[0] is connected to words[1] and words[2].\n- words[1] can be used to obtain words[0] (by replacing 'b' with 'a'), and words[2] (by adding 'a'). So words[1] is connected to words[0] and words[2].\n- words[2] can be used to obtain words[0] (by deleting 'b'), and words[1] (by deleting 'a'). So words[2] is connected to words[0] and words[1].\n- words[3] is not connected to any string in words.\nThus, words can be divided into 2 groups [\"a\",\"b\",\"ab\"] and [\"cde\"]. The size of the largest group is 3."}, {"full_text": "Example 2:\nInput: words = [\"a\",\"ab\",\"abc\"]\nOutput: [1,3]\nExplanation:\n- words[0] is connected to words[1].\n- words[1] is connected to words[0] and words[2].\n- words[2] is connected to words[1].\nSince all strings are connected to each other, they should be grouped together.\nThus, the size of the largest group is 3.", "input": "Input: words = [\"a\",\"ab\",\"abc\"]", "output": "Output: [1,3]", "explanation": "Explanation:\n- words[0] is connected to words[1].\n- words[1] is connected to words[0] and words[2].\n- words[2] is connected to words[1].\nSince all strings are connected to each other, they should be grouped together.\nThus, the size of the largest group is 3."}], "constraints": "Constraints:\n1 <= words.length <= 2 * 10^4\n1 <= words[i].length <= 26\nwords[i] consists of lowercase English letters only.\nNo letter occurs more than once in words[i].", "notes": ""}, "2156": {"label": "Hard", "title": "Find Substring With Given Hash Value", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.1986, "total_accepted": 7900.0, "total_submissions": 39800.0, "testcase_example": "'\"leetcode\"\\n7\\n20\\n2\\n0'", "body": "The hash of a 0-indexed string s of length k, given integers p and m, is computed using the following function:\nhash(s, p, m) = (val(s[0]) * p^0 + val(s[1]) * p^1 + ... + val(s[k-1]) * p^k-1) mod m.\nWhere val(s[i]) represents the index of s[i] in the alphabet from val('a') = 1 to val('z') = 26.\nYou are given a string s and the integers power, modulo, k, and hashValue. Return sub, the first substring of s of length k such that hash(sub, power, modulo) == hashValue.\nThe test cases will be generated such that an answer always exists.\nA substring is a contiguous non-empty sequence of characters within a string.", "examples": [{"full_text": "Example 1:\nInput: s = \"leetcode\", power = 7, modulo = 20, k = 2, hashValue = 0\nOutput: \"ee\"\nExplanation: The hash of \"ee\" can be computed to be hash(\"ee\", 7, 20) = (5 * 1 + 5 * 7) mod 20 = 40 mod 20 = 0.\n\"ee\" is the first substring of length 2 with hashValue 0. Hence, we return \"ee\".", "input": "Input: s = \"leetcode\", power = 7, modulo = 20, k = 2, hashValue = 0", "output": "Output: \"ee\"", "explanation": "Explanation: The hash of \"ee\" can be computed to be hash(\"ee\", 7, 20) = (5 * 1 + 5 * 7) mod 20 = 40 mod 20 = 0.\n\"ee\" is the first substring of length 2 with hashValue 0. Hence, we return \"ee\"."}, {"full_text": "Example 2:\nInput: s = \"fbxzaad\", power = 31, modulo = 100, k = 3, hashValue = 32\nOutput: \"fbx\"\nExplanation: The hash of \"fbx\" can be computed to be hash(\"fbx\", 31, 100) = (6 * 1 + 2 * 31 + 24 * 31^2) mod 100 = 23132 mod 100 = 32.\nThe hash of \"bxz\" can be computed to be hash(\"bxz\", 31, 100) = (2 * 1 + 24 * 31 + 26 * 31^2) mod 100 = 25732 mod 100 = 32.\n\"fbx\" is the first substring of length 3 with hashValue 32. Hence, we return \"fbx\".\nNote that \"bxz\" also has a hash of 32 but it appears later than \"fbx\".", "input": "Input: s = \"fbxzaad\", power = 31, modulo = 100, k = 3, hashValue = 32", "output": "Output: \"fbx\"", "explanation": "Explanation: The hash of \"fbx\" can be computed to be hash(\"fbx\", 31, 100) = (6 * 1 + 2 * 31 + 24 * 31^2) mod 100 = 23132 mod 100 = 32.\nThe hash of \"bxz\" can be computed to be hash(\"bxz\", 31, 100) = (2 * 1 + 24 * 31 + 26 * 31^2) mod 100 = 25732 mod 100 = 32.\n\"fbx\" is the first substring of length 3 with hashValue 32. Hence, we return \"fbx\".\nNote that \"bxz\" also has a hash of 32 but it appears later than \"fbx\"."}], "constraints": "Constraints:\n1 <= k <= s.length <= 2 * 10^4\n1 <= power, modulo <= 10^9\n0 <= hashValue < modulo\ns consists of lowercase English letters only.\nThe test cases are generated such that an answer always exists.", "notes": ""}, "2151": {"label": "Hard", "title": "Maximum Good People Based on Statements", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4556, "total_accepted": 7600.0, "total_submissions": 16600.0, "testcase_example": "'[[2,1,2],[1,2,2],[2,0,2]]'", "body": "There are two types of persons:\nThe good person: The person who always tells the truth.\nThe bad person: The person who might tell the truth and might lie.\nYou are given a 0-indexed 2D integer array statements of size n x n that represents the statements made by n people about each other. More specifically, statements[i][j] could be one of the following:\n0 which represents a statement made by person i that person j is a bad person.\n1 which represents a statement made by person i that person j is a good person.\n2 represents that no statement is made by person i about person j.\nAdditionally, no person ever makes a statement about themselves. Formally, we have that statements[i][i] = 2 for all 0 <= i < n.\nReturn the maximum number of people who can be good based on the statements made by the n people.", "examples": [{"full_text": "Example 1:\nInput: statements = [[2,1,2],[1,2,2],[2,0,2]]\nOutput: 2\nExplanation: Each person makes a single statement.\n- Person 0 states that person 1 is good.\n- Person 1 states that person 0 is good.\n- Person 2 states that person 1 is bad.\nLet's take person 2 as the key.\n- Assuming that person 2 is a good person:\n- Based on the statement made by person 2, person 1 is a bad person.\n- Now we know for sure that person 1 is bad and person 2 is good.\n- Based on the statement made by person 1, and since person 1 is bad, they could be:\n- telling the truth. There will be a contradiction in this case and this assumption is invalid.\n- lying. In this case, person 0 is also a bad person and lied in their statement.\n- Following that person 2 is a good person, there will be only one good person in the group.\n- Assuming that person 2 is a bad person:\n- Based on the statement made by person 2, and since person 2 is bad, they could be:\n- telling the truth. Following this scenario, person 0 and 1 are both bad as explained before.\n- Following that person 2 is bad but told the truth, there will be no good persons in the group.\n- lying. In this case person 1 is a good person.\n- Since person 1 is a good person, person 0 is also a good person.\n- Following that person 2 is bad and lied, there will be two good persons in the group.\nWe can see that at most 2 persons are good in the best case, so we return 2.\nNote that there is more than one way to arrive at this conclusion.", "input": "Input: statements = [[2,1,2],[1,2,2],[2,0,2]]", "output": "Output: 2", "explanation": "Explanation: Each person makes a single statement.\n- Person 0 states that person 1 is good.\n- Person 1 states that person 0 is good.\n- Person 2 states that person 1 is bad.\nLet's take person 2 as the key.\n- Assuming that person 2 is a good person:\n- Based on the statement made by person 2, person 1 is a bad person.\n- Now we know for sure that person 1 is bad and person 2 is good.\n- Based on the statement made by person 1, and since person 1 is bad, they could be:\n- telling the truth. There will be a contradiction in this case and this assumption is invalid.\n- lying. In this case, person 0 is also a bad person and lied in their statement.\n- Following that person 2 is a good person, there will be only one good person in the group.\n- Assuming that person 2 is a bad person:\n- Based on the statement made by person 2, and since person 2 is bad, they could be:\n- telling the truth. Following this scenario, person 0 and 1 are both bad as explained before.\n- Following that person 2 is bad but told the truth, there will be no good persons in the group.\n- lying. In this case person 1 is a good person.\n- Since person 1 is a good person, person 0 is also a good person.\n- Following that person 2 is bad and lied, there will be two good persons in the group.\nWe can see that at most 2 persons are good in the best case, so we return 2.\nNote that there is more than one way to arrive at this conclusion."}, {"full_text": "Example 2:\nInput: statements = [[2,0],[0,2]]\nOutput: 1\nExplanation: Each person makes a single statement.\n- Person 0 states that person 1 is bad.\n- Person 1 states that person 0 is bad.\nLet's take person 0 as the key.\n- Assuming that person 0 is a good person:\n- Based on the statement made by person 0, person 1 is a bad person and was lying.\n- Following that person 0 is a good person, there will be only one good person in the group.\n- Assuming that person 0 is a bad person:\n- Based on the statement made by person 0, and since person 0 is bad, they could be:\n- telling the truth. Following this scenario, person 0 and 1 are both bad.\n- Following that person 0 is bad but told the truth, there will be no good persons in the group.\n- lying. In this case person 1 is a good person.\n- Following that person 0 is bad and lied, there will be only one good person in the group.\nWe can see that at most, one person is good in the best case, so we return 1.\nNote that there is more than one way to arrive at this conclusion.", "input": "Input: statements = [[2,0],[0,2]]", "output": "Output: 1", "explanation": "Explanation: Each person makes a single statement.\n- Person 0 states that person 1 is bad.\n- Person 1 states that person 0 is bad.\nLet's take person 0 as the key.\n- Assuming that person 0 is a good person:\n- Based on the statement made by person 0, person 1 is a bad person and was lying.\n- Following that person 0 is a good person, there will be only one good person in the group.\n- Assuming that person 0 is a bad person:\n- Based on the statement made by person 0, and since person 0 is bad, they could be:\n- telling the truth. Following this scenario, person 0 and 1 are both bad.\n- Following that person 0 is bad but told the truth, there will be no good persons in the group.\n- lying. In this case person 1 is a good person.\n- Following that person 0 is bad and lied, there will be only one good person in the group.\nWe can see that at most, one person is good in the best case, so we return 1.\nNote that there is more than one way to arrive at this conclusion."}], "constraints": "Constraints:\nn == statements.length == statements[i].length\n2 <= n <= 15\nstatements[i][j] is either 0, 1, or 2.\nstatements[i][i] == 2", "notes": ""}, "2147": {"label": "Hard", "title": "Number of Ways to Divide a Long Corridor", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3937, "total_accepted": 5600.0, "total_submissions": 14100.0, "testcase_example": "'\"SSPPSPS\"'", "body": "Along a long library corridor, there is a line of seats and decorative plants. You are given a 0-indexed string corridor of length n consisting of letters 'S' and 'P' where each 'S' represents a seat and each 'P' represents a plant.\nOne room divider has already been installed to the left of index 0, and another to the right of index n - 1. Additional room dividers can be installed. For each position between indices i - 1 and i (1 <= i <= n - 1), at most one divider can be installed.\nDivide the corridor into non-overlapping sections, where each section has exactly two seats with any number of plants. There may be multiple ways to perform the division. Two ways are different if there is a position with a room divider installed in the first way but not in the second way.\nReturn the number of ways to divide the corridor. Since the answer may be very large, return it modulo 10^9 + 7. If there is no way, return 0.", "examples": [{"full_text": "Example 1:\nInput: corridor = \"SSPPSPS\"\nOutput: 3\nExplanation: There are 3 different ways to divide the corridor.\nThe black bars in the above image indicate the two room dividers already installed.\nNote that in each of the ways, each section has exactly two seats.", "input": "Input: corridor = \"SSPPSPS\"", "output": "Output: 3", "explanation": "Explanation: There are 3 different ways to divide the corridor.\nThe black bars in the above image indicate the two room dividers already installed.\nNote that in each of the ways, each section has exactly two seats."}, {"full_text": "Example 2:\nInput: corridor = \"PPSPSP\"\nOutput: 1\nExplanation: There is only 1 way to divide the corridor, by not installing any additional dividers.\nInstalling any would create some section that does not have exactly two seats.", "input": "Input: corridor = \"PPSPSP\"", "output": "Output: 1", "explanation": "Explanation: There is only 1 way to divide the corridor, by not installing any additional dividers.\nInstalling any would create some section that does not have exactly two seats."}, {"full_text": "Example 3:\nInput: corridor = \"S\"\nOutput: 0\nExplanation: There is no way to divide the corridor because there will always be a section that does not have exactly two seats.", "input": "Input: corridor = \"S\"", "output": "Output: 0", "explanation": "Explanation: There is no way to divide the corridor because there will always be a section that does not have exactly two seats."}], "constraints": "Constraints:\nn == corridor.length\n1 <= n <= 10^5\ncorridor[i] is either 'S' or 'P'.", "notes": ""}, "2141": {"label": "Hard", "title": "Maximum Running Time of N Computers", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.369, "total_accepted": 7100.0, "total_submissions": 19200.0, "testcase_example": "'2\\n[3,3,3]'", "body": "You have n computers. You are given the integer n and a 0-indexed integer array batteries where the i^th battery can run a computer for batteries[i] minutes. You are interested in running all n computers simultaneously using the given batteries.\nInitially, you can insert at most one battery into each computer. After that and at any integer time moment, you can remove a battery from a computer and insert another battery any number of times. The inserted battery can be a totally new battery or a battery from another computer. You may assume that the removing and inserting processes take no time.\nNote that the batteries cannot be recharged.\nReturn the maximum number of minutes you can run all the n computers simultaneously.", "examples": [{"full_text": "Example 1:\nInput: n = 2, batteries = [3,3,3]\nOutput: 4\nExplanation:\nInitially, insert battery 0 into the first computer and battery 1 into the second computer.\nAfter two minutes, remove battery 1 from the second computer and insert battery 2 instead. Note that battery 1 can still run for one minute.\nAt the end of the third minute, battery 0 is drained, and you need to remove it from the first computer and insert battery 1 instead.\nBy the end of the fourth minute, battery 1 is also drained, and the first computer is no longer running.\nWe can run the two computers simultaneously for at most 4 minutes, so we return 4.", "input": "Input: n = 2, batteries = [3,3,3]", "output": "Output: 4", "explanation": "Explanation:\nInitially, insert battery 0 into the first computer and battery 1 into the second computer.\nAfter two minutes, remove battery 1 from the second computer and insert battery 2 instead. Note that battery 1 can still run for one minute.\nAt the end of the third minute, battery 0 is drained, and you need to remove it from the first computer and insert battery 1 instead.\nBy the end of the fourth minute, battery 1 is also drained, and the first computer is no longer running.\nWe can run the two computers simultaneously for at most 4 minutes, so we return 4."}, {"full_text": "Example 2:\nInput: n = 2, batteries = [1,1,1,1]\nOutput: 2\nExplanation:\nInitially, insert battery 0 into the first computer and battery 2 into the second computer.\nAfter one minute, battery 0 and battery 2 are drained so you need to remove them and insert battery 1 into the first computer and battery 3 into the second computer.\nAfter another minute, battery 1 and battery 3 are also drained so the first and second computers are no longer running.\nWe can run the two computers simultaneously for at most 2 minutes, so we return 2.", "input": "Input: n = 2, batteries = [1,1,1,1]", "output": "Output: 2", "explanation": "Explanation:\nInitially, insert battery 0 into the first computer and battery 2 into the second computer.\nAfter one minute, battery 0 and battery 2 are drained so you need to remove them and insert battery 1 into the first computer and battery 3 into the second computer.\nAfter another minute, battery 1 and battery 3 are also drained so the first and second computers are no longer running.\nWe can run the two computers simultaneously for at most 2 minutes, so we return 2."}], "constraints": "Constraints:\n1 <= n <= batteries.length <= 10^5\n1 <= batteries[i] <= 10^9", "notes": ""}, "2136": {"label": "Hard", "title": "Earliest Possible Day of Full Bloom", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6743000000000001, "total_accepted": 6100.0, "total_submissions": 9000.0, "testcase_example": "'[1,4,3]\\n[2,3,1]'", "body": "You have n flower seeds. Every seed must be planted first before it can begin to grow, then bloom. Planting a seed takes time and so does the growth of a seed. You are given two 0-indexed integer arrays plantTime and growTime, of length n each:\nplantTime[i] is the number of full days it takes you to plant the i^th seed. Every day, you can work on planting exactly one seed. You do not have to work on planting the same seed on consecutive days, but the planting of a seed is not complete until you have worked plantTime[i] days on planting it in total.\ngrowTime[i] is the number of full days it takes the i^th seed to grow after being completely planted. After the last day of its growth, the flower blooms and stays bloomed forever.\nFrom the beginning of day 0, you can plant the seeds in any order.\nReturn the earliest possible day where all seeds are blooming.", "examples": [{"full_text": "Example 1:\nInput: plantTime = [1,4,3], growTime = [2,3,1]\nOutput: 9\nExplanation: The grayed out pots represent planting days, colored pots represent growing days, and the flower represents the day it blooms.\nOne optimal way is:\nOn day 0, plant the 0^th seed. The seed grows for 2 full days and blooms on day 3.\nOn days 1, 2, 3, and 4, plant the 1^st seed. The seed grows for 3 full days and blooms on day 8.\nOn days 5, 6, and 7, plant the 2^nd seed. The seed grows for 1 full day and blooms on day 9.\nThus, on day 9, all the seeds are blooming.", "input": "Input: plantTime = [1,4,3], growTime = [2,3,1]", "output": "Output: 9", "explanation": "Explanation: The grayed out pots represent planting days, colored pots represent growing days, and the flower represents the day it blooms.\nOne optimal way is:\nOn day 0, plant the 0^th seed. The seed grows for 2 full days and blooms on day 3.\nOn days 1, 2, 3, and 4, plant the 1^st seed. The seed grows for 3 full days and blooms on day 8.\nOn days 5, 6, and 7, plant the 2^nd seed. The seed grows for 1 full day and blooms on day 9.\nThus, on day 9, all the seeds are blooming."}, {"full_text": "Example 2:\nInput: plantTime = [1,2,3,2], growTime = [2,1,2,1]\nOutput: 9\nExplanation: The grayed out pots represent planting days, colored pots represent growing days, and the flower represents the day it blooms.\nOne optimal way is:\nOn day 1, plant the 0^th seed. The seed grows for 2 full days and blooms on day 4.\nOn days 0 and 3, plant the 1^st seed. The seed grows for 1 full day and blooms on day 5.\nOn days 2, 4, and 5, plant the 2^nd seed. The seed grows for 2 full days and blooms on day 8.\nOn days 6 and 7, plant the 3^rd seed. The seed grows for 1 full day and blooms on day 9.\nThus, on day 9, all the seeds are blooming.", "input": "Input: plantTime = [1,2,3,2], growTime = [2,1,2,1]", "output": "Output: 9", "explanation": "Explanation: The grayed out pots represent planting days, colored pots represent growing days, and the flower represents the day it blooms.\nOne optimal way is:\nOn day 1, plant the 0^th seed. The seed grows for 2 full days and blooms on day 4.\nOn days 0 and 3, plant the 1^st seed. The seed grows for 1 full day and blooms on day 5.\nOn days 2, 4, and 5, plant the 2^nd seed. The seed grows for 2 full days and blooms on day 8.\nOn days 6 and 7, plant the 3^rd seed. The seed grows for 1 full day and blooms on day 9.\nThus, on day 9, all the seeds are blooming."}, {"full_text": "Example 3:\nInput: plantTime = [1], growTime = [1]\nOutput: 2\nExplanation: On day 0, plant the 0^th seed. The seed grows for 1 full day and blooms on day 2.\nThus, on day 2, all the seeds are blooming.", "input": "Input: plantTime = [1], growTime = [1]", "output": "Output: 2", "explanation": "Explanation: On day 0, plant the 0^th seed. The seed grows for 1 full day and blooms on day 2.\nThus, on day 2, all the seeds are blooming."}], "constraints": "Constraints:\nn == plantTime.length == growTime.length\n1 <= n <= 10^5\n1 <= plantTime[i], growTime[i] <= 10^4", "notes": ""}, "2132": {"label": "Hard", "title": "Stamping the Grid", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.2727, "total_accepted": 2900.0, "total_submissions": 10800.0, "testcase_example": "'[[1,0,0,0],[1,0,0,0],[1,0,0,0],[1,0,0,0],[1,0,0,0]]\\n4\\n3'", "body": "You are given an m x n binary matrix grid where each cell is either 0 (empty) or 1 (occupied).\nYou are then given stamps of size stampHeight x stampWidth. We want to fit the stamps such that they follow the given restrictions and requirements:\nCover all the empty cells.\nDo not cover any of the occupied cells.\nWe can put as many stamps as we want.\nStamps can overlap with each other.\nStamps are not allowed to be rotated.\nStamps must stay completely inside the grid.\nReturn true if it is possible to fit the stamps while following the given restrictions and requirements. Otherwise, return false.", "examples": [{"full_text": "Example 1:\nInput: grid = [[1,0,0,0],[1,0,0,0],[1,0,0,0],[1,0,0,0],[1,0,0,0]], stampHeight = 4, stampWidth = 3\nOutput: true\nExplanation: We have two overlapping stamps (labeled 1 and 2 in the image) that are able to cover all the empty cells.", "input": "Input: grid = [[1,0,0,0],[1,0,0,0],[1,0,0,0],[1,0,0,0],[1,0,0,0]], stampHeight = 4, stampWidth = 3", "output": "Output: true", "explanation": "Explanation: We have two overlapping stamps (labeled 1 and 2 in the image) that are able to cover all the empty cells."}, {"full_text": "Example 2:\nInput: grid = [[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]], stampHeight = 2, stampWidth = 2\nOutput: false\nExplanation: There is no way to fit the stamps onto all the empty cells without the stamps going outside the grid.", "input": "Input: grid = [[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]], stampHeight = 2, stampWidth = 2", "output": "Output: false", "explanation": "Explanation: There is no way to fit the stamps onto all the empty cells without the stamps going outside the grid."}], "constraints": "Constraints:\nm == grid.length\nn == grid[r].length\n1 <= m, n <= 10^5\n1 <= m * n <= 2 * 10^5\ngrid[r][c] is either 0 or 1.\n1 <= stampHeight, stampWidth <= 10^5", "notes": ""}, "2127": {"label": "Hard", "title": "Maximum Employees to Be Invited to a Meeting", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.2916, "total_accepted": 4100.0, "total_submissions": 13900.0, "testcase_example": "'[2,2,1,2]'", "body": "A company is organizing a meeting and has a list of n employees, waiting to be invited. They have arranged for a large circular table, capable of seating any number of employees.\nThe employees are numbered from 0 to n - 1. Each employee has a favorite person and they will attend the meeting only if they can sit next to their favorite person at the table. The favorite person of an employee is not themself.\nGiven a 0-indexed integer array favorite, where favorite[i] denotes the favorite person of the i^th employee, return the maximum number of employees that can be invited to the meeting.", "examples": [{"full_text": "Example 1:\nInput: favorite = [2,2,1,2]\nOutput: 3\nExplanation:\nThe above figure shows how the company can invite employees 0, 1, and 2, and seat them at the round table.\nAll employees cannot be invited because employee 2 cannot sit beside employees 0, 1, and 3, simultaneously.\nNote that the company can also invite employees 1, 2, and 3, and give them their desired seats.\nThe maximum number of employees that can be invited to the meeting is 3.", "input": "Input: favorite = [2,2,1,2]", "output": "Output: 3", "explanation": "Explanation:\nThe above figure shows how the company can invite employees 0, 1, and 2, and seat them at the round table.\nAll employees cannot be invited because employee 2 cannot sit beside employees 0, 1, and 3, simultaneously.\nNote that the company can also invite employees 1, 2, and 3, and give them their desired seats.\nThe maximum number of employees that can be invited to the meeting is 3."}, {"full_text": "Example 2:\nInput: favorite = [1,2,0]\nOutput: 3\nExplanation:\nEach employee is the favorite person of at least one other employee, and the only way the company can invite them is if they invite every employee.\nThe seating arrangement will be the same as that in the figure given in example 1:\n- Employee 0 will sit between employees 2 and 1.\n- Employee 1 will sit between employees 0 and 2.\n- Employee 2 will sit between employees 1 and 0.\nThe maximum number of employees that can be invited to the meeting is 3.", "input": "Input: favorite = [1,2,0]", "output": "Output: 3", "explanation": "Explanation:\nEach employee is the favorite person of at least one other employee, and the only way the company can invite them is if they invite every employee.\nThe seating arrangement will be the same as that in the figure given in example 1:\n- Employee 0 will sit between employees 2 and 1.\n- Employee 1 will sit between employees 0 and 2.\n- Employee 2 will sit between employees 1 and 0.\nThe maximum number of employees that can be invited to the meeting is 3."}, {"full_text": "Example 3:\nInput: favorite = [3,0,1,4,1]\nOutput: 4\nExplanation:\nThe above figure shows how the company will invite employees 0, 1, 3, and 4, and seat them at the round table.\nEmployee 2 cannot be invited because the two spots next to their favorite employee 1 are taken.\nSo the company leaves them out of the meeting.\nThe maximum number of employees that can be invited to the meeting is 4.", "input": "Input: favorite = [3,0,1,4,1]", "output": "Output: 4", "explanation": "Explanation:\nThe above figure shows how the company will invite employees 0, 1, 3, and 4, and seat them at the round table.\nEmployee 2 cannot be invited because the two spots next to their favorite employee 1 are taken.\nSo the company leaves them out of the meeting.\nThe maximum number of employees that can be invited to the meeting is 4."}], "constraints": "Constraints:\nn == favorite.length\n2 <= n <= 10^5\n0 <= favorite[i] <=\nn - 1\nfavorite[i] != i", "notes": ""}, "2122": {"label": "Hard", "title": "Recover the Original Array", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3751, "total_accepted": 5900.0, "total_submissions": 15700.0, "testcase_example": "'[2,10,6,4,8,12]'", "body": "Alice had a 0-indexed array arr consisting of n positive integers. She chose an arbitrary positive integer k and created two new 0-indexed integer arrays lower and higher in the following manner:\nlower[i] = arr[i] - k, for every index i where 0 <= i < n\nhigher[i] = arr[i] + k, for every index i where 0 <= i < n\nUnfortunately, Alice lost all three arrays. However, she remembers the integers that were present in the arrays lower and higher, but not the array each integer belonged to. Help Alice and recover the original array.\nGiven an array nums consisting of 2n integers, where exactly n of the integers were present in lower and the remaining in higher, return the original array arr. In case the answer is not unique, return any valid array.\nNote: The test cases are generated such that there exists at least one valid array arr.", "examples": [{"full_text": "Example 1:\nInput: nums = [2,10,6,4,8,12]\nOutput: [3,7,11]\nExplanation:\nIf arr = [3,7,11] and k = 1, we get lower = [2,6,10] and higher = [4,8,12].\nCombining lower and higher gives us [2,6,10,4,8,12], which is a permutation of nums.\nAnother valid possibility is that arr = [5,7,9] and k = 3. In that case, lower = [2,4,6] and higher = [8,10,12].", "input": "Input: nums = [2,10,6,4,8,12]", "output": "Output: [3,7,11]", "explanation": "Explanation:\nIf arr = [3,7,11] and k = 1, we get lower = [2,6,10] and higher = [4,8,12].\nCombining lower and higher gives us [2,6,10,4,8,12], which is a permutation of nums.\nAnother valid possibility is that arr = [5,7,9] and k = 3. In that case, lower = [2,4,6] and higher = [8,10,12]."}, {"full_text": "Example 2:\nInput: nums = [1,1,3,3]\nOutput: [2,2]\nExplanation:\nIf arr = [2,2] and k = 1, we get lower = [1,1] and higher = [3,3].\nCombining lower and higher gives us [1,1,3,3], which is equal to nums.\nNote that arr cannot be [1,3] because in that case, the only possible way to obtain [1,1,3,3] is with k = 0.\nThis is invalid since k must be positive.", "input": "Input: nums = [1,1,3,3]", "output": "Output: [2,2]", "explanation": "Explanation:\nIf arr = [2,2] and k = 1, we get lower = [1,1] and higher = [3,3].\nCombining lower and higher gives us [1,1,3,3], which is equal to nums.\nNote that arr cannot be [1,3] because in that case, the only possible way to obtain [1,1,3,3] is with k = 0.\nThis is invalid since k must be positive."}, {"full_text": "Example 3:\nInput: nums = [5,435]\nOutput: [220]\nExplanation:\nThe only possible combination is arr = [220] and k = 215. Using them, we get lower = [5] and higher = [435].", "input": "Input: nums = [5,435]", "output": "Output: [220]", "explanation": "Explanation:\nThe only possible combination is arr = [220] and k = 215. Using them, we get lower = [5] and higher = [435]."}], "constraints": "Constraints:\n2 * n == nums.length\n1 <= n <= 1000\n1 <= nums[i] <= 10^9\nThe test cases are generated such that there exists at least one valid array arr.", "notes": ""}, "2117": {"label": "Hard", "title": "Abbreviating the Product of a Range", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.2822, "total_accepted": 1700.0, "total_submissions": 6100.0, "testcase_example": "'1\\n4'", "body": "You are given two positive integers left and right with left <= right. Calculate the product of all integers in the inclusive range [left, right].\nSince the product may be very large, you will abbreviate it following these steps:\nCount all trailing zeros in the product and remove them. Let us denote this count as C.\n\nFor example, there are 3 trailing zeros in 1000, and there are 0 trailing zeros in 546.\n\n\nDenote the remaining number of digits in the product as d. If d > 10, then express the product as <pre>...<suf> where <pre> denotes the first 5 digits of the product, and <suf> denotes the last 5 digits of the product after removing all trailing zeros. If d <= 10, we keep it unchanged.\n\nFor example, we express 1234567654321 as 12345...54321, but 1234567 is represented as 1234567.\n\n\nFinally, represent the product as a string \"<pre>...<suf>eC\".\n\nFor example, 12345678987600000 will be represented as \"12345...89876e5\".\n\n\nReturn a string denoting the abbreviated product of all integers in the inclusive range [left, right].", "examples": [{"full_text": "Example 1:\nInput: left = 1, right = 4\nOutput: \"24e0\"\nExplanation: The product is 1 \u00d7 2 \u00d7 3 \u00d7 4 = 24.\nThere are no trailing zeros, so 24 remains the same. The abbreviation will end with \"e0\".\nSince the number of digits is 2, which is less than 10, we do not have to abbreviate it further.\nThus, the final representation is \"24e0\".", "input": "Input: left = 1, right = 4", "output": "Output: \"24e0\"", "explanation": "Explanation: The product is 1 \u00d7 2 \u00d7 3 \u00d7 4 = 24.\nThere are no trailing zeros, so 24 remains the same. The abbreviation will end with \"e0\".\nSince the number of digits is 2, which is less than 10, we do not have to abbreviate it further.\nThus, the final representation is \"24e0\"."}, {"full_text": "Example 2:\nInput: left = 2, right = 11\nOutput: \"399168e2\"\nExplanation: The product is 39916800.\nThere are 2 trailing zeros, which we remove to get 399168. The abbreviation will end with \"e2\".\nThe number of digits after removing the trailing zeros is 6, so we do not abbreviate it further.\nHence, the abbreviated product is \"399168e2\".", "input": "Input: left = 2, right = 11", "output": "Output: \"399168e2\"", "explanation": "Explanation: The product is 39916800.\nThere are 2 trailing zeros, which we remove to get 399168. The abbreviation will end with \"e2\".\nThe number of digits after removing the trailing zeros is 6, so we do not abbreviate it further.\nHence, the abbreviated product is \"399168e2\"."}, {"full_text": "Example 3:\nInput: left = 371, right = 375\nOutput: \"7219856259e3\"\nExplanation: The product is 7219856259000.", "input": "Input: left = 371, right = 375", "output": "Output: \"7219856259e3\"", "explanation": "Explanation: The product is 7219856259000."}], "constraints": "Constraints:\n1 <= left <= right <= 10^4", "notes": ""}, "2111": {"label": "Hard", "title": "Minimum Operations to Make the Array K-Increasing", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.358, "total_accepted": 7800.0, "total_submissions": 21700.0, "testcase_example": "'[5,4,3,2,1]\\n1'", "body": "You are given a 0-indexed array arr consisting of n positive integers, and a positive integer k.\nThe array arr is called K-increasing if arr[i-k] <= arr[i] holds for every index i, where k <= i <= n-1.\nFor example, arr = [4, 1, 5, 2, 6, 2] is K-increasing for k = 2 because:\n\narr[0] <= arr[2] (4 <= 5)\narr[1] <= arr[3] (1 <= 2)\narr[2] <= arr[4] (5 <= 6)\narr[3] <= arr[5] (2 <= 2)\n\n\nHowever, the same arr is not K-increasing for k = 1 (because arr[0] > arr[1]) or k = 3 (because arr[0] > arr[3]).\nIn one operation, you can choose an index i and change arr[i] into any positive integer.\nReturn the minimum number of operations required to make the array K-increasing for the given k.", "examples": [{"full_text": "Example 1:\nInput: arr = [5,4,3,2,1], k = 1\nOutput: 4\nExplanation:\nFor k = 1, the resultant array has to be non-decreasing.\nSome of the K-increasing arrays that can be formed are [5,6,7,8,9], [1,1,1,1,1], [2,2,3,4,4]. All of them require 4 operations.\nIt is suboptimal to change the array to, for example, [6,7,8,9,10] because it would take 5 operations.\nIt can be shown that we cannot make the array K-increasing in less than 4 operations.", "input": "Input: arr = [5,4,3,2,1], k = 1", "output": "Output: 4", "explanation": "Explanation:\nFor k = 1, the resultant array has to be non-decreasing.\nSome of the K-increasing arrays that can be formed are [5,6,7,8,9], [1,1,1,1,1], [2,2,3,4,4]. All of them require 4 operations.\nIt is suboptimal to change the array to, for example, [6,7,8,9,10] because it would take 5 operations.\nIt can be shown that we cannot make the array K-increasing in less than 4 operations."}, {"full_text": "Example 2:\nInput: arr = [4,1,5,2,6,2], k = 2\nOutput: 0\nExplanation:\nThis is the same example as the one in the problem description.\nHere, for every index i where 2 <= i <= 5, arr[i-2] <= arr[i].\nSince the given array is already K-increasing, we do not need to perform any operations.", "input": "Input: arr = [4,1,5,2,6,2], k = 2", "output": "Output: 0", "explanation": "Explanation:\nThis is the same example as the one in the problem description.\nHere, for every index i where 2 <= i <= 5, arr[i-2] <= arr[i].\nSince the given array is already K-increasing, we do not need to perform any operations."}, {"full_text": "Example 3:\nInput: arr = [4,1,5,2,6,2], k = 3\nOutput: 2\nExplanation:\nIndices 3 and 5 are the only ones not satisfying arr[i-3] <= arr[i] for 3 <= i <= 5.\nOne of the ways we can make the array K-increasing is by changing arr[3] to 4 and arr[5] to 5.\nThe array will now be [4,1,5,4,6,5].\nNote that there can be other ways to make the array K-increasing, but none of them require less than 2 operations.", "input": "Input: arr = [4,1,5,2,6,2], k = 3", "output": "Output: 2", "explanation": "Explanation:\nIndices 3 and 5 are the only ones not satisfying arr[i-3] <= arr[i] for 3 <= i <= 5.\nOne of the ways we can make the array K-increasing is by changing arr[3] to 4 and arr[5] to 5.\nThe array will now be [4,1,5,4,6,5].\nNote that there can be other ways to make the array K-increasing, but none of them require less than 2 operations."}], "constraints": "Constraints:\n1 <= arr.length <= 10^5\n1 <= arr[i], k <= arr.length", "notes": ""}, "2106": {"label": "Hard", "title": "Maximum Fruits Harvested After at Most K Steps", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3492, "total_accepted": 5700.0, "total_submissions": 16200.0, "testcase_example": "'[[2,8],[6,3],[8,6]]\\n5\\n4'", "body": "Fruits are available at some positions on an infinite x-axis. You are given a 2D integer array fruits where fruits[i] = [positioni, amounti] depicts amounti fruits at the position positioni. fruits is already sorted by positioni in ascending order, and each positioni is unique.\nYou are also given an integer startPos and an integer k. Initially, you are at the position startPos. From any position, you can either walk to the left or right. It takes one step to move one unit on the x-axis, and you can walk at most k steps in total. For every position you reach, you harvest all the fruits at that position, and the fruits will disappear from that position.\nReturn the maximum total number of fruits you can harvest.", "examples": [{"full_text": "Example 1:\nInput: fruits = [[2,8],[6,3],[8,6]], startPos = 5, k = 4\nOutput: 9\nExplanation:\nThe optimal way is to:\n- Move right to position 6 and harvest 3 fruits\n- Move right to position 8 and harvest 6 fruits\nYou moved 3 steps and harvested 3 + 6 = 9 fruits in total.", "input": "Input: fruits = [[2,8],[6,3],[8,6]], startPos = 5, k = 4", "output": "Output: 9", "explanation": "Explanation:\nThe optimal way is to:\n- Move right to position 6 and harvest 3 fruits\n- Move right to position 8 and harvest 6 fruits\nYou moved 3 steps and harvested 3 + 6 = 9 fruits in total."}, {"full_text": "Example 2:\nInput: fruits = [[0,9],[4,1],[5,7],[6,2],[7,4],[10,9]], startPos = 5, k = 4\nOutput: 14\nExplanation:\nYou can move at most k = 4 steps, so you cannot reach position 0 nor 10.\nThe optimal way is to:\n- Harvest the 7 fruits at the starting position 5\n- Move left to position 4 and harvest 1 fruit\n- Move right to position 6 and harvest 2 fruits\n- Move right to position 7 and harvest 4 fruits\nYou moved 1 + 3 = 4 steps and harvested 7 + 1 + 2 + 4 = 14 fruits in total.", "input": "Input: fruits = [[0,9],[4,1],[5,7],[6,2],[7,4],[10,9]], startPos = 5, k = 4", "output": "Output: 14", "explanation": "Explanation:\nYou can move at most k = 4 steps, so you cannot reach position 0 nor 10.\nThe optimal way is to:\n- Harvest the 7 fruits at the starting position 5\n- Move left to position 4 and harvest 1 fruit\n- Move right to position 6 and harvest 2 fruits\n- Move right to position 7 and harvest 4 fruits\nYou moved 1 + 3 = 4 steps and harvested 7 + 1 + 2 + 4 = 14 fruits in total."}, {"full_text": "Example 3:\nInput: fruits = [[0,3],[6,4],[8,5]], startPos = 3, k = 2\nOutput: 0\nExplanation:\nYou can move at most k = 2 steps and cannot reach any position with fruits.", "input": "Input: fruits = [[0,3],[6,4],[8,5]], startPos = 3, k = 2", "output": "Output: 0", "explanation": "Explanation:\nYou can move at most k = 2 steps and cannot reach any position with fruits."}], "constraints": "Constraints:\n1 <= fruits.length <= 10^5\nfruits[i].length == 2\n0 <= startPos, positioni <= 2 * 10^5\npositioni-1 < positioni for any i > 0\n(0-indexed)\n1 <= amounti <= 10^4\n0 <= k <= 2 * 10^5", "notes": ""}, "2102": {"label": "Hard", "title": "Sequentially Ordinal Rank Tracker", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6046, "total_accepted": 3300.0, "total_submissions": 5400.0, "testcase_example": "'[\"SORTracker\",\"add\",\"add\",\"get\",\"add\",\"get\",\"add\",\"get\",\"add\",\"get\",\"add\",\"get\",\"get\"]\\n' +\n  '[[],[\"bradford\",2],[\"branford\",3],[],[\"alps\",2],[],[\"orland\",2],[],[\"orlando\",3],[],[\"alpine\",2],[],[]]'", "body": "A scenic location is represented by its name and attractiveness score, where name is a unique string among all locations and score is an integer. Locations can be ranked from the best to the worst. The higher the score, the better the location. If the scores of two locations are equal, then the location with the lexicographically smaller name is better.\nYou are building a system that tracks the ranking of locations with the system initially starting with no locations. It supports:\nAdding scenic locations, one at a time.\nQuerying the i^th best location of all locations already added, where i is the number of times the system has been queried (including the current query).\n\nFor example, when the system is queried for the 4^th time, it returns the 4^th best location of all locations already added.\n\n\nNote that the test data are generated so that at any time, the number of queries does not exceed the number of locations added to the system.\nImplement the SORTracker class:\nSORTracker() Initializes the tracker system.\nvoid add(string name, int score) Adds a scenic location with name and score to the system.\nstring get() Queries and returns the i^th best location, where i is the number of times this method has been invoked (including this invocation).", "examples": [{"full_text": "Example 1:\nInput\n[\"SORTracker\", \"add\", \"add\", \"get\", \"add\", \"get\", \"add\", \"get\", \"add\", \"get\", \"add\", \"get\", \"get\"]\n[[], [\"bradford\", 2], [\"branford\", 3], [], [\"alps\", 2], [], [\"orland\", 2], [], [\"orlando\", 3], [], [\"alpine\", 2], [], []]\nOutput\n[null, null, null, \"branford\", null, \"alps\", null, \"bradford\", null, \"bradford\", null, \"bradford\", \"orland\"]\nExplanation\nSORTracker tracker = new SORTracker(); // Initialize the tracker system.\ntracker.add(\"bradford\", 2); // Add location with name=\"bradford\" and score=2 to the system.\ntracker.add(\"branford\", 3); // Add location with name=\"branford\" and score=3 to the system.\ntracker.get(); // The sorted locations, from best to worst, are: branford, bradford.\n// Note that branford precedes bradford due to its higher score (3 > 2).\n// This is the 1^st time get() is called, so return the best location: \"branford\".\ntracker.add(\"alps\", 2); // Add location with name=\"alps\" and score=2 to the system.\ntracker.get(); // Sorted locations: branford, alps, bradford.\n// Note that alps precedes bradford even though they have the same score (2).\n// This is because \"alps\" is lexicographically smaller than \"bradford\".\n// Return the 2^nd best location \"alps\", as it is the 2^nd time get() is called.\ntracker.add(\"orland\", 2); // Add location with name=\"orland\" and score=2 to the system.\ntracker.get(); // Sorted locations: branford, alps, bradford, orland.\n// Return \"bradford\", as it is the 3^rd time get() is called.\ntracker.add(\"orlando\", 3); // Add location with name=\"orlando\" and score=3 to the system.\ntracker.get(); // Sorted locations: branford, orlando, alps, bradford, orland.\n// Return \"bradford\".\ntracker.add(\"alpine\", 2); // Add location with name=\"alpine\" and score=2 to the system.\ntracker.get(); // Sorted locations: branford, orlando, alpine, alps, bradford, orland.\n// Return \"bradford\".\ntracker.get(); // Sorted locations: branford, orlando, alpine, alps, bradford, orland.\n// Return \"orland\".", "input": "Input\n[\"SORTracker\", \"add\", \"add\", \"get\", \"add\", \"get\", \"add\", \"get\", \"add\", \"get\", \"add\", \"get\", \"get\"]\n[[], [\"bradford\", 2], [\"branford\", 3], [], [\"alps\", 2], [], [\"orland\", 2], [], [\"orlando\", 3], [], [\"alpine\", 2], [], []]", "output": "Output\n[null, null, null, \"branford\", null, \"alps\", null, \"bradford\", null, \"bradford\", null, \"bradford\", \"orland\"]", "explanation": "Explanation\nSORTracker tracker = new SORTracker(); // Initialize the tracker system.\ntracker.add(\"bradford\", 2); // Add location with name=\"bradford\" and score=2 to the system.\ntracker.add(\"branford\", 3); // Add location with name=\"branford\" and score=3 to the system.\ntracker.get(); // The sorted locations, from best to worst, are: branford, bradford.\n// Note that branford precedes bradford due to its higher score (3 > 2).\n// This is the 1^st time get() is called, so return the best location: \"branford\".\ntracker.add(\"alps\", 2); // Add location with name=\"alps\" and score=2 to the system.\ntracker.get(); // Sorted locations: branford, alps, bradford.\n// Note that alps precedes bradford even though they have the same score (2).\n// This is because \"alps\" is lexicographically smaller than \"bradford\".\n// Return the 2^nd best location \"alps\", as it is the 2^nd time get() is called.\ntracker.add(\"orland\", 2); // Add location with name=\"orland\" and score=2 to the system.\ntracker.get(); // Sorted locations: branford, alps, bradford, orland.\n// Return \"bradford\", as it is the 3^rd time get() is called.\ntracker.add(\"orlando\", 3); // Add location with name=\"orlando\" and score=3 to the system.\ntracker.get(); // Sorted locations: branford, orlando, alps, bradford, orland.\n// Return \"bradford\".\ntracker.add(\"alpine\", 2); // Add location with name=\"alpine\" and score=2 to the system.\ntracker.get(); // Sorted locations: branford, orlando, alpine, alps, bradford, orland.\n// Return \"bradford\".\ntracker.get(); // Sorted locations: branford, orlando, alpine, alps, bradford, orland.\n// Return \"orland\"."}], "constraints": "Constraints:\nname consists of lowercase English letters, and is unique among all locations.\n1 <= name.length <= 10\n1 <= score <= 10^5\nAt any time, the number of calls to get does not exceed the number of calls to add.\nAt most 4 * 10^4 calls in total will be made to add and get.", "notes": ""}, "2097": {"label": "Hard", "title": "Valid Arrangement of Pairs", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.39890000000000003, "total_accepted": 4000.0, "total_submissions": 10100.0, "testcase_example": "'[[5,1],[4,5],[11,9],[9,4]]'", "body": "You are given a 0-indexed 2D integer array pairs where pairs[i] = [starti, endi]. An arrangement of pairs is valid if for every index i where 1 <= i < pairs.length, we have endi-1 == starti.\nReturn any valid arrangement of pairs.\nNote: The inputs will be generated such that there exists a valid arrangement of pairs.", "examples": [{"full_text": "Example 1:\nInput: pairs = [[5,1],[4,5],[11,9],[9,4]]\nOutput: [[11,9],[9,4],[4,5],[5,1]]\nExplanation:\nThis is a valid arrangement since endi-1 always equals starti.\nend0 = 9 == 9 = start1\nend1 = 4 == 4 = start2\nend2 = 5 == 5 = start3", "input": "Input: pairs = [[5,1],[4,5],[11,9],[9,4]]", "output": "Output: [[11,9],[9,4],[4,5],[5,1]]", "explanation": "Explanation:\nThis is a valid arrangement since endi-1 always equals starti.\nend0 = 9 == 9 = start1\nend1 = 4 == 4 = start2\nend2 = 5 == 5 = start3"}, {"full_text": "Example 2:\nInput: pairs = [[1,3],[3,2],[2,1]]\nOutput: [[1,3],[3,2],[2,1]]\nExplanation:\nThis is a valid arrangement since endi-1 always equals starti.\nend0 = 3 == 3 = start1\nend1 = 2 == 2 = start2\nThe arrangements [[2,1],[1,3],[3,2]] and [[3,2],[2,1],[1,3]] are also valid.", "input": "Input: pairs = [[1,3],[3,2],[2,1]]", "output": "Output: [[1,3],[3,2],[2,1]]", "explanation": "Explanation:\nThis is a valid arrangement since endi-1 always equals starti.\nend0 = 3 == 3 = start1\nend1 = 2 == 2 = start2\nThe arrangements [[2,1],[1,3],[3,2]] and [[3,2],[2,1],[1,3]] are also valid."}, {"full_text": "Example 3:\nInput: pairs = [[1,2],[1,3],[2,1]]\nOutput: [[1,2],[2,1],[1,3]]\nExplanation:\nThis is a valid arrangement since endi-1 always equals starti.\nend0 = 2 == 2 = start1\nend1 = 1 == 1 = start2", "input": "Input: pairs = [[1,2],[1,3],[2,1]]", "output": "Output: [[1,2],[2,1],[1,3]]", "explanation": "Explanation:\nThis is a valid arrangement since endi-1 always equals starti.\nend0 = 2 == 2 = start1\nend1 = 1 == 1 = start2"}], "constraints": "Constraints:\n1 <= pairs.length <= 10^5\npairs[i].length == 2\n0 <= starti, endi <= 10^9\nstarti != endi\nNo two pairs are exactly the same.\nThere exists a valid arrangement of pairs.", "notes": ""}, "2092": {"label": "Hard", "title": "Find All People With Secret", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3195, "total_accepted": 10000.0, "total_submissions": 31400.0, "testcase_example": "'6\\n[[1,2,5],[2,3,8],[1,5,10]]\\n1'", "body": "You are given an integer n indicating there are n people numbered from 0 to n - 1. You are also given a 0-indexed 2D integer array meetings where meetings[i] = [xi, yi, timei] indicates that person xi and person yi have a meeting at timei. A person may attend multiple meetings at the same time. Finally, you are given an integer firstPerson.\nPerson 0 has a secret and initially shares the secret with a person firstPerson at time 0. This secret is then shared every time a meeting takes place with a person that has the secret. More formally, for every meeting, if a person xi has the secret at timei, then they will share the secret with person yi, and vice versa.\nThe secrets are shared instantaneously. That is, a person may receive the secret and share it with people in other meetings within the same time frame.\nReturn a list of all the people that have the secret after all the meetings have taken place. You may return the answer in any order.", "examples": [{"full_text": "Example 1:\nInput: n = 6, meetings = [[1,2,5],[2,3,8],[1,5,10]], firstPerson = 1\nOutput: [0,1,2,3,5]\nExplanation:\nAt time 0, person 0 shares the secret with person 1.\nAt time 5, person 1 shares the secret with person 2.\nAt time 8, person 2 shares the secret with person 3.\nAt time 10, person 1 shares the secret with person 5.\u200b\u200b\u200b\u200b\nThus, people 0, 1, 2, 3, and 5 know the secret after all the meetings.", "input": "Input: n = 6, meetings = [[1,2,5],[2,3,8],[1,5,10]], firstPerson = 1", "output": "Output: [0,1,2,3,5]", "explanation": "Explanation:\nAt time 0, person 0 shares the secret with person 1.\nAt time 5, person 1 shares the secret with person 2.\nAt time 8, person 2 shares the secret with person 3.\nAt time 10, person 1 shares the secret with person 5.\u200b\u200b\u200b\u200b\nThus, people 0, 1, 2, 3, and 5 know the secret after all the meetings."}, {"full_text": "Example 2:\nInput: n = 4, meetings = [[3,1,3],[1,2,2],[0,3,3]], firstPerson = 3\nOutput: [0,1,3]\nExplanation:\nAt time 0, person 0 shares the secret with person 3.\nAt time 2, neither person 1 nor person 2 know the secret.\nAt time 3, person 3 shares the secret with person 0 and person 1.\nThus, people 0, 1, and 3 know the secret after all the meetings.", "input": "Input: n = 4, meetings = [[3,1,3],[1,2,2],[0,3,3]], firstPerson = 3", "output": "Output: [0,1,3]", "explanation": "Explanation:\nAt time 0, person 0 shares the secret with person 3.\nAt time 2, neither person 1 nor person 2 know the secret.\nAt time 3, person 3 shares the secret with person 0 and person 1.\nThus, people 0, 1, and 3 know the secret after all the meetings."}, {"full_text": "Example 3:\nInput: n = 5, meetings = [[3,4,2],[1,2,1],[2,3,1]], firstPerson = 1\nOutput: [0,1,2,3,4]\nExplanation:\nAt time 0, person 0 shares the secret with person 1.\nAt time 1, person 1 shares the secret with person 2, and person 2 shares the secret with person 3.\nNote that person 2 can share the secret at the same time as receiving it.\nAt time 2, person 3 shares the secret with person 4.\nThus, people 0, 1, 2, 3, and 4 know the secret after all the meetings.", "input": "Input: n = 5, meetings = [[3,4,2],[1,2,1],[2,3,1]], firstPerson = 1", "output": "Output: [0,1,2,3,4]", "explanation": "Explanation:\nAt time 0, person 0 shares the secret with person 1.\nAt time 1, person 1 shares the secret with person 2, and person 2 shares the secret with person 3.\nNote that person 2 can share the secret at the same time as receiving it.\nAt time 2, person 3 shares the secret with person 4.\nThus, people 0, 1, 2, 3, and 4 know the secret after all the meetings."}], "constraints": "Constraints:\n2 <= n <= 10^5\n1 <= meetings.length <= 10^5\nmeetings[i].length == 3\n0 <= xi, yi <= n - 1\nxi != yi\n1 <= timei <= 10^5\n1 <= firstPerson <= n - 1", "notes": ""}, "2088": {"label": "Hard", "title": "Count Fertile Pyramids in a Land", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6233, "total_accepted": 3400.0, "total_submissions": 5400.0, "testcase_example": "'[[0,1,1,0],[1,1,1,1]]'", "body": "A farmer has a rectangular grid of land with m rows and n columns that can be divided into unit cells. Each cell is either fertile (represented by a 1) or barren (represented by a 0). All cells outside the grid are considered barren.\nA pyramidal plot of land can be defined as a set of cells with the following criteria:\nThe number of cells in the set has to be greater than 1 and all cells must be fertile.\nThe apex of a pyramid is the topmost cell of the pyramid. The height of a pyramid is the number of rows it covers. Let (r, c) be the apex of the pyramid, and its height be h. Then, the plot comprises of cells (i, j) where r <= i <= r + h - 1 and c - (i - r) <= j <= c + (i - r).\nAn inverse pyramidal plot of land can be defined as a set of cells with similar criteria:\nThe number of cells in the set has to be greater than 1 and all cells must be fertile.\nThe apex of an inverse pyramid is the bottommost cell of the inverse pyramid. The height of an inverse pyramid is the number of rows it covers. Let (r, c) be the apex of the pyramid, and its height be h. Then, the plot comprises of cells (i, j) where r - h + 1 <= i <= r and c - (r - i) <= j <= c + (r - i).\nSome examples of valid and invalid pyramidal (and inverse pyramidal) plots are shown below. Black cells indicate fertile cells.\nGiven a 0-indexed m x n binary matrix grid representing the farmland, return the total number of pyramidal and inverse pyramidal plots that can be found in grid.", "examples": [{"full_text": "Example 1:\nInput: grid = [[0,1,1,0],[1,1,1,1]]\nOutput: 2\nExplanation: The 2 possible pyramidal plots are shown in blue and red respectively.\nThere are no inverse pyramidal plots in this grid.\nHence total number of pyramidal and inverse pyramidal plots is 2 + 0 = 2.", "input": "Input: grid = [[0,1,1,0],[1,1,1,1]]", "output": "Output: 2", "explanation": "Explanation: The 2 possible pyramidal plots are shown in blue and red respectively.\nThere are no inverse pyramidal plots in this grid.\nHence total number of pyramidal and inverse pyramidal plots is 2 + 0 = 2."}, {"full_text": "Example 2:\nInput: grid = [[1,1,1],[1,1,1]]\nOutput: 2\nExplanation: The pyramidal plot is shown in blue, and the inverse pyramidal plot is shown in red.\nHence the total number of plots is 1 + 1 = 2.", "input": "Input: grid = [[1,1,1],[1,1,1]]", "output": "Output: 2", "explanation": "Explanation: The pyramidal plot is shown in blue, and the inverse pyramidal plot is shown in red.\nHence the total number of plots is 1 + 1 = 2."}, {"full_text": "Example 3:\nInput: grid = [[1,1,1,1,0],[1,1,1,1,1],[1,1,1,1,1],[0,1,0,0,1]]\nOutput: 13\nExplanation: There are 7 pyramidal plots, 3 of which are shown in the 2nd and 3rd figures.\nThere are 6 inverse pyramidal plots, 2 of which are shown in the last figure.\nThe total number of plots is 7 + 6 = 13.", "input": "Input: grid = [[1,1,1,1,0],[1,1,1,1,1],[1,1,1,1,1],[0,1,0,0,1]]", "output": "Output: 13", "explanation": "Explanation: There are 7 pyramidal plots, 3 of which are shown in the 2nd and 3rd figures.\nThere are 6 inverse pyramidal plots, 2 of which are shown in the last figure.\nThe total number of plots is 7 + 6 = 13."}], "constraints": "Constraints:\nm == grid.length\nn == grid[i].length\n1 <= m, n <= 1000\n1 <= m * n <= 10^5\ngrid[i][j] is either 0 or 1.", "notes": ""}, "2081": {"label": "Hard", "title": "Sum of k-Mirror Numbers", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.39130000000000004, "total_accepted": 4200.0, "total_submissions": 10800.0, "testcase_example": "'2\\n5'", "body": "A k-mirror number is a positive integer without leading zeros that reads the same both forward and backward in base-10 as well as in base-k.\nFor example, 9 is a 2-mirror number. The representation of 9 in base-10 and base-2 are 9 and 1001 respectively, which read the same both forward and backward.\nOn the contrary, 4 is not a 2-mirror number. The representation of 4 in base-2 is 100, which does not read the same both forward and backward.\nGiven the base k and the number n, return the sum of the n smallest k-mirror numbers.", "examples": [{"full_text": "Example 1:\nInput: k = 2, n = 5\nOutput: 25\nExplanation:\nThe 5 smallest 2-mirror numbers and their representations in base-2 are listed as follows:\nbase-10 base-2\n1 1\n3 11\n5 101\n7 111\n9 1001\nTheir sum = 1 + 3 + 5 + 7 + 9 = 25.", "input": "Input: k = 2, n = 5", "output": "Output: 25", "explanation": "Explanation:\nThe 5 smallest 2-mirror numbers and their representations in base-2 are listed as follows:\nbase-10 base-2\n1 1\n3 11\n5 101\n7 111\n9 1001\nTheir sum = 1 + 3 + 5 + 7 + 9 = 25."}, {"full_text": "Example 2:\nInput: k = 3, n = 7\nOutput: 499\nExplanation:\nThe 7 smallest 3-mirror numbers are and their representations in base-3 are listed as follows:\nbase-10 base-3\n1 1\n2 2\n4 11\n8 22\n121 11111\n151 12121\n212 21212\nTheir sum = 1 + 2 + 4 + 8 + 121 + 151 + 212 = 499.", "input": "Input: k = 3, n = 7", "output": "Output: 499", "explanation": "Explanation:\nThe 7 smallest 3-mirror numbers are and their representations in base-3 are listed as follows:\nbase-10 base-3\n1 1\n2 2\n4 11\n8 22\n121 11111\n151 12121\n212 21212\nTheir sum = 1 + 2 + 4 + 8 + 121 + 151 + 212 = 499."}, {"full_text": "Example 3:\nInput: k = 7, n = 17\nOutput: 20379000\nExplanation: The 17 smallest 7-mirror numbers are:\n1, 2, 3, 4, 5, 6, 8, 121, 171, 242, 292, 16561, 65656, 2137312, 4602064, 6597956, 6958596", "input": "Input: k = 7, n = 17", "output": "Output: 20379000", "explanation": "Explanation: The 17 smallest 7-mirror numbers are:\n1, 2, 3, 4, 5, 6, 8, 121, 171, 242, 292, 16561, 65656, 2137312, 4602064, 6597956, 6958596"}], "constraints": "Constraints:\n2 <= k <= 9\n1 <= n <= 30", "notes": ""}, "2076": {"label": "Hard", "title": "Process Restricted Friend Requests", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5228, "total_accepted": 7500.0, "total_submissions": 14300.0, "testcase_example": "'3\\n[[0,1]]\\n[[0,2],[2,1]]'", "body": "You are given an integer n indicating the number of people in a network. Each person is labeled from 0 to n - 1.\nYou are also given a 0-indexed 2D integer array restrictions, where restrictions[i] = [xi, yi] means that person xi and person yi cannot become friends, either directly or indirectly through other people.\nInitially, no one is friends with each other. You are given a list of friend requests as a 0-indexed 2D integer array requests, where requests[j] = [uj, vj] is a friend request between person uj and person vj.\nA friend request is successful if uj and vj can be friends. Each friend request is processed in the given order (i.e., requests[j] occurs before requests[j + 1]), and upon a successful request, uj and vj become direct friends for all future friend requests.\nReturn a boolean array result, where each result[j] is true if the j^th friend request is successful or false if it is not.\nNote: If uj and vj are already direct friends, the request is still successful.", "examples": [{"full_text": "Example 1:\nInput: n = 3, restrictions = [[0,1]], requests = [[0,2],[2,1]]\nOutput: [true,false]\nExplanation:\nRequest 0: Person 0 and person 2 can be friends, so they become direct friends.\nRequest 1: Person 2 and person 1 cannot be friends since person 0 and person 1 would be indirect friends (1--2--0).", "input": "Input: n = 3, restrictions = [[0,1]], requests = [[0,2],[2,1]]", "output": "Output: [true,false]", "explanation": "Explanation:\nRequest 0: Person 0 and person 2 can be friends, so they become direct friends.\nRequest 1: Person 2 and person 1 cannot be friends since person 0 and person 1 would be indirect friends (1--2--0)."}, {"full_text": "Example 2:\nInput: n = 3, restrictions = [[0,1]], requests = [[1,2],[0,2]]\nOutput: [true,false]\nExplanation:\nRequest 0: Person 1 and person 2 can be friends, so they become direct friends.\nRequest 1: Person 0 and person 2 cannot be friends since person 0 and person 1 would be indirect friends (0--2--1).", "input": "Input: n = 3, restrictions = [[0,1]], requests = [[1,2],[0,2]]", "output": "Output: [true,false]", "explanation": "Explanation:\nRequest 0: Person 1 and person 2 can be friends, so they become direct friends.\nRequest 1: Person 0 and person 2 cannot be friends since person 0 and person 1 would be indirect friends (0--2--1)."}, {"full_text": "Example 3:\nInput: n = 5, restrictions = [[0,1],[1,2],[2,3]], requests = [[0,4],[1,2],[3,1],[3,4]]\nOutput: [true,false,true,false]\nExplanation:\nRequest 0: Person 0 and person 4 can be friends, so they become direct friends.\nRequest 1: Person 1 and person 2 cannot be friends since they are directly restricted.\nRequest 2: Person 3 and person 1 can be friends, so they become direct friends.\nRequest 3: Person 3 and person 4 cannot be friends since person 0 and person 1 would be indirect friends (0--4--3--1).", "input": "Input: n = 5, restrictions = [[0,1],[1,2],[2,3]], requests = [[0,4],[1,2],[3,1],[3,4]]", "output": "Output: [true,false,true,false]", "explanation": "Explanation:\nRequest 0: Person 0 and person 4 can be friends, so they become direct friends.\nRequest 1: Person 1 and person 2 cannot be friends since they are directly restricted.\nRequest 2: Person 3 and person 1 can be friends, so they become direct friends.\nRequest 3: Person 3 and person 4 cannot be friends since person 0 and person 1 would be indirect friends (0--4--3--1)."}], "constraints": "Constraints:\n2 <= n <= 1000\n0 <= restrictions.length <= 1000\nrestrictions[i].length == 2\n0 <= xi, yi <= n - 1\nxi != yi\n1 <= requests.length <= 1000\nrequests[j].length == 2\n0 <= uj, vj <= n - 1\nuj != vj", "notes": ""}, "2071": {"label": "Hard", "title": "Maximum Number of Tasks You Can Assign", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3709, "total_accepted": 3600.0, "total_submissions": 9700.0, "testcase_example": "'[3,2,1]\\n[0,3,3]\\n1\\n1'", "body": "You have n tasks and m workers. Each task has a strength requirement stored in a 0-indexed integer array tasks, with the i^th task requiring tasks[i] strength to complete. The strength of each worker is stored in a 0-indexed integer array workers, with the j^th worker having workers[j] strength. Each worker can only be assigned to a single task and must have a strength greater than or equal to the task's strength requirement (i.e., workers[j] >= tasks[i]).\nAdditionally, you have pills magical pills that will increase a worker's strength by strength. You can decide which workers receive the magical pills, however, you may only give each worker at most one magical pill.\nGiven the 0-indexed integer arrays tasks and workers and the integers pills and strength, return the maximum number of tasks that can be completed.", "examples": [{"full_text": "Example 1:\nInput: tasks = [3,2,1], workers = [0,3,3], pills = 1, strength = 1\nOutput: 3\nExplanation:\nWe can assign the magical pill and tasks as follows:\n- Give the magical pill to worker 0.\n- Assign worker 0 to task 2 (0 + 1 >= 1)\n- Assign worker 1 to task 1 (3 >= 2)\n- Assign worker 2 to task 0 (3 >= 3)", "input": "Input: tasks = [3,2,1], workers = [0,3,3], pills = 1, strength = 1", "output": "Output: 3", "explanation": "Explanation:\nWe can assign the magical pill and tasks as follows:\n- Give the magical pill to worker 0.\n- Assign worker 0 to task 2 (0 + 1 >= 1)\n- Assign worker 1 to task 1 (3 >= 2)\n- Assign worker 2 to task 0 (3 >= 3)"}, {"full_text": "Example 2:\nInput: tasks = [5,4], workers = [0,0,0], pills = 1, strength = 5\nOutput: 1\nExplanation:\nWe can assign the magical pill and tasks as follows:\n- Give the magical pill to worker 0.\n- Assign worker 0 to task 0 (0 + 5 >= 5)", "input": "Input: tasks = [5,4], workers = [0,0,0], pills = 1, strength = 5", "output": "Output: 1", "explanation": "Explanation:\nWe can assign the magical pill and tasks as follows:\n- Give the magical pill to worker 0.\n- Assign worker 0 to task 0 (0 + 5 >= 5)"}, {"full_text": "Example 3:\nInput: tasks = [10,15,30], workers = [0,10,10,10,10], pills = 3, strength = 10\nOutput: 2\nExplanation:\nWe can assign the magical pills and tasks as follows:\n- Give the magical pill to worker 0 and worker 1.\n- Assign worker 0 to task 0 (0 + 10 >= 10)\n- Assign worker 1 to task 1 (10 + 10 >= 15)\nThe last pill is not given because it will not make any worker strong enough for the last task.", "input": "Input: tasks = [10,15,30], workers = [0,10,10,10,10], pills = 3, strength = 10", "output": "Output: 2", "explanation": "Explanation:\nWe can assign the magical pills and tasks as follows:\n- Give the magical pill to worker 0 and worker 1.\n- Assign worker 0 to task 0 (0 + 10 >= 10)\n- Assign worker 1 to task 1 (10 + 10 >= 15)\nThe last pill is not given because it will not make any worker strong enough for the last task."}], "constraints": "Constraints:\nn == tasks.length\nm == workers.length\n1 <= n, m <= 5 * 10^4\n0 <= pills <= m\n0 <= tasks[i], workers[j], strength <= 10^9", "notes": ""}, "2065": {"label": "Hard", "title": "Maximum Path Quality of a Graph", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5758, "total_accepted": 6600.0, "total_submissions": 11500.0, "testcase_example": "'[0,32,10,43]\\n[[0,1,10],[1,2,15],[0,3,10]]\\n49'", "body": "There is an undirected graph with n nodes numbered from 0 to n - 1 (inclusive). You are given a 0-indexed integer array values where values[i] is the value of the i^th node. You are also given a 0-indexed 2D integer array edges, where each edges[j] = [uj, vj, timej] indicates that there is an undirected edge between the nodes uj and vj, and it takes timej seconds to travel between the two nodes. Finally, you are given an integer maxTime.\nA valid path in the graph is any path that starts at node 0, ends at node 0, and takes at most maxTime seconds to complete. You may visit the same node multiple times. The quality of a valid path is the sum of the values of the unique nodes visited in the path (each node's value is added at most once to the sum).\nReturn the maximum quality of a valid path.\nNote: There are at most four edges connected to each node.", "examples": [{"full_text": "Example 1:\nInput: values = [0,32,10,43], edges = [[0,1,10],[1,2,15],[0,3,10]], maxTime = 49\nOutput: 75\nExplanation:\nOne possible path is 0 -> 1 -> 0 -> 3 -> 0. The total time taken is 10 + 10 + 10 + 10 = 40 <= 49.\nThe nodes visited are 0, 1, and 3, giving a maximal path quality of 0 + 32 + 43 = 75.", "input": "Input: values = [0,32,10,43], edges = [[0,1,10],[1,2,15],[0,3,10]], maxTime = 49", "output": "Output: 75", "explanation": "Explanation:\nOne possible path is 0 -> 1 -> 0 -> 3 -> 0. The total time taken is 10 + 10 + 10 + 10 = 40 <= 49.\nThe nodes visited are 0, 1, and 3, giving a maximal path quality of 0 + 32 + 43 = 75."}, {"full_text": "Example 2:\nInput: values = [5,10,15,20], edges = [[0,1,10],[1,2,10],[0,3,10]], maxTime = 30\nOutput: 25\nExplanation:\nOne possible path is 0 -> 3 -> 0. The total time taken is 10 + 10 = 20 <= 30.\nThe nodes visited are 0 and 3, giving a maximal path quality of 5 + 20 = 25.", "input": "Input: values = [5,10,15,20], edges = [[0,1,10],[1,2,10],[0,3,10]], maxTime = 30", "output": "Output: 25", "explanation": "Explanation:\nOne possible path is 0 -> 3 -> 0. The total time taken is 10 + 10 = 20 <= 30.\nThe nodes visited are 0 and 3, giving a maximal path quality of 5 + 20 = 25."}, {"full_text": "Example 3:\nInput: values = [1,2,3,4], edges = [[0,1,10],[1,2,11],[2,3,12],[1,3,13]], maxTime = 50\nOutput: 7\nExplanation:\nOne possible path is 0 -> 1 -> 3 -> 1 -> 0. The total time taken is 10 + 13 + 13 + 10 = 46 <= 50.\nThe nodes visited are 0, 1, and 3, giving a maximal path quality of 1 + 2 + 4 = 7.", "input": "Input: values = [1,2,3,4], edges = [[0,1,10],[1,2,11],[2,3,12],[1,3,13]], maxTime = 50", "output": "Output: 7", "explanation": "Explanation:\nOne possible path is 0 -> 1 -> 3 -> 1 -> 0. The total time taken is 10 + 13 + 13 + 10 = 46 <= 50.\nThe nodes visited are 0, 1, and 3, giving a maximal path quality of 1 + 2 + 4 = 7."}], "constraints": "Constraints:\nn == values.length\n1 <= n <= 1000\n0 <= values[i] <= 10^8\n0 <= edges.length <= 2000\nedges[j].length == 3\n0 <= uj < vj <= n - 1\n10 <= timej, maxTime <= 100\nAll the pairs [uj, vj] are unique.\nThere are at most four edges connected to each node.\nThe graph may not be connected.", "notes": ""}, "2060": {"label": "Hard", "title": "Check if an Original String Exists Given Two Encoded Strings", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.387, "total_accepted": 3600.0, "total_submissions": 9200.0, "testcase_example": "'\"internationalization\"\\n\"i18n\"'", "body": "An original string, consisting of lowercase English letters, can be encoded by the following steps:\nArbitrarily split it into a sequence of some number of non-empty substrings.\nArbitrarily choose some elements (possibly none) of the sequence, and replace each with its length (as a numeric string).\nConcatenate the sequence as the encoded string.\nFor example, one way to encode an original string \"abcdefghijklmnop\" might be:\nSplit it as a sequence: [\"ab\", \"cdefghijklmn\", \"o\", \"p\"].\nChoose the second and third elements to be replaced by their lengths, respectively. The sequence becomes [\"ab\", \"12\", \"1\", \"p\"].\nConcatenate the elements of the sequence to get the encoded string: \"ab121p\".\nGiven two encoded strings s1 and s2, consisting of lowercase English letters and digits 1-9 (inclusive), return true if there exists an original string that could be encoded as both s1 and s2. Otherwise, return false.\nNote: The test cases are generated such that the number of consecutive digits in s1 and s2 does not exceed 3.", "examples": [{"full_text": "Example 1:\nInput: s1 = \"internationalization\", s2 = \"i18n\"\nOutput: true\nExplanation: It is possible that \"internationalization\" was the original string.\n- \"internationalization\"\n-> Split: [\"internationalization\"]\n-> Do not replace any element\n-> Concatenate: \"internationalization\", which is s1.\n- \"internationalization\"\n-> Split: [\"i\", \"nternationalizatio\", \"n\"]\n-> Replace: [\"i\", \"18\", \"n\"]\n-> Concatenate: \"i18n\", which is s2", "input": "Input: s1 = \"internationalization\", s2 = \"i18n\"", "output": "Output: true", "explanation": "Explanation: It is possible that \"internationalization\" was the original string.\n- \"internationalization\"\n-> Split: [\"internationalization\"]\n-> Do not replace any element\n-> Concatenate: \"internationalization\", which is s1.\n- \"internationalization\"\n-> Split: [\"i\", \"nternationalizatio\", \"n\"]\n-> Replace: [\"i\", \"18\", \"n\"]\n-> Concatenate: \"i18n\", which is s2"}, {"full_text": "Example 2:\nInput: s1 = \"l123e\", s2 = \"44\"\nOutput: true\nExplanation: It is possible that \"leetcode\" was the original string.\n- \"leetcode\"\n-> Split: [\"l\", \"e\", \"et\", \"cod\", \"e\"]\n-> Replace: [\"l\", \"1\", \"2\", \"3\", \"e\"]\n-> Concatenate: \"l123e\", which is s1.\n- \"leetcode\"\n-> Split: [\"leet\", \"code\"]\n-> Replace: [\"4\", \"4\"]\n-> Concatenate: \"44\", which is s2.", "input": "Input: s1 = \"l123e\", s2 = \"44\"", "output": "Output: true", "explanation": "Explanation: It is possible that \"leetcode\" was the original string.\n- \"leetcode\"\n-> Split: [\"l\", \"e\", \"et\", \"cod\", \"e\"]\n-> Replace: [\"l\", \"1\", \"2\", \"3\", \"e\"]\n-> Concatenate: \"l123e\", which is s1.\n- \"leetcode\"\n-> Split: [\"leet\", \"code\"]\n-> Replace: [\"4\", \"4\"]\n-> Concatenate: \"44\", which is s2."}, {"full_text": "Example 3:\nInput: s1 = \"a5b\", s2 = \"c5b\"\nOutput: false\nExplanation: It is impossible.\n- The original string encoded as s1 must start with the letter 'a'.\n- The original string encoded as s2 must start with the letter 'c'.", "input": "Input: s1 = \"a5b\", s2 = \"c5b\"", "output": "Output: false", "explanation": "Explanation: It is impossible.\n- The original string encoded as s1 must start with the letter 'a'.\n- The original string encoded as s2 must start with the letter 'c'."}], "constraints": "Constraints:\n1 <= s1.length, s2.length <= 40\ns1 and s2 consist of digits 1-9 (inclusive), and lowercase English letters only.\nThe number of consecutive digits in s1 and s2 does not exceed 3.", "notes": ""}, "2056": {"label": "Hard", "title": "Number of Valid Move Combinations On Chessboard", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5827, "total_accepted": 1800.0, "total_submissions": 3200.0, "testcase_example": "'[\"rook\"]\\n[[1,1]]'", "body": "There is an 8 x 8 chessboard containing n pieces (rooks, queens, or bishops). You are given a string array pieces of length n, where pieces[i] describes the type (rook, queen, or bishop) of the i^th piece. In addition, you are given a 2D integer array positions also of length n, where positions[i] = [ri, ci] indicates that the i^th piece is currently at the 1-based coordinate (ri, ci) on the chessboard.\nWhen making a move for a piece, you choose a destination square that the piece will travel toward and stop on.\nA rook can only travel horizontally or vertically from (r, c) to the direction of (r+1, c), (r-1, c), (r, c+1), or (r, c-1).\nA queen can only travel horizontally, vertically, or diagonally from (r, c) to the direction of (r+1, c), (r-1, c), (r, c+1), (r, c-1), (r+1, c+1), (r+1, c-1), (r-1, c+1), (r-1, c-1).\nA bishop can only travel diagonally from (r, c) to the direction of (r+1, c+1), (r+1, c-1), (r-1, c+1), (r-1, c-1).\nYou must make a move for every piece on the board simultaneously. A move combination consists of all the moves performed on all the given pieces. Every second, each piece will instantaneously travel one square towards their destination if they are not already at it. All pieces start traveling at the 0^th second. A move combination is invalid if, at a given time, two or more pieces occupy the same square.\nReturn the number of valid move combinations\u200b\u200b\u200b\u200b\u200b.\nNotes:\nNo two pieces will start in the same square.\nYou may choose the square a piece is already on as its destination.\nIf two pieces are directly adjacent to each other, it is valid for them to move past each other and swap positions in one second.", "examples": [{"full_text": "Example 1:\nInput: pieces = [\"rook\"], positions = [[1,1]]\nOutput: 15\nExplanation: The image above shows the possible squares the piece can move to.", "input": "Input: pieces = [\"rook\"], positions = [[1,1]]", "output": "Output: 15", "explanation": "Explanation: The image above shows the possible squares the piece can move to."}, {"full_text": "Example 2:\nInput: pieces = [\"queen\"], positions = [[1,1]]\nOutput: 22\nExplanation: The image above shows the possible squares the piece can move to.", "input": "Input: pieces = [\"queen\"], positions = [[1,1]]", "output": "Output: 22", "explanation": "Explanation: The image above shows the possible squares the piece can move to."}, {"full_text": "Example 3:\nInput: pieces = [\"bishop\"], positions = [[4,3]]\nOutput: 12\nExplanation: The image above shows the possible squares the piece can move to.", "input": "Input: pieces = [\"bishop\"], positions = [[4,3]]", "output": "Output: 12", "explanation": "Explanation: The image above shows the possible squares the piece can move to."}], "constraints": "Constraints:\nn == pieces.length\nn == positions.length\n1 <= n <= 4\npieces only contains the strings \"rook\", \"queen\", and \"bishop\".\nThere will be at most one queen on the chessboard.\n1 <= xi, yi <= 8\nEach positions[i] is distinct.", "notes": ""}, "2050": {"label": "Hard", "title": "Parallel Courses III", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6038, "total_accepted": 7300.0, "total_submissions": 12100.0, "testcase_example": "'3\\n[[1,3],[2,3]]\\n[3,2,5]'", "body": "You are given an integer n, which indicates that there are n courses labeled from 1 to n. You are also given a 2D integer array relations where relations[j] = [prevCoursej, nextCoursej] denotes that course prevCoursej has to be completed before course nextCoursej (prerequisite relationship). Furthermore, you are given a 0-indexed integer array time where time[i] denotes how many months it takes to complete the (i+1)^th course.\nYou must find the minimum number of months needed to complete all the courses following these rules:\nYou may start taking a course at any time if the prerequisites are met.\nAny number of courses can be taken at the same time.\nReturn the minimum number of months needed to complete all the courses.\nNote: The test cases are generated such that it is possible to complete every course (i.e., the graph is a directed acyclic graph).", "examples": [{"full_text": "Example 1:\nInput: n = 3, relations = [[1,3],[2,3]], time = [3,2,5]\nOutput: 8\nExplanation: The figure above represents the given graph and the time required to complete each course.\nWe start course 1 and course 2 simultaneously at month 0.\nCourse 1 takes 3 months and course 2 takes 2 months to complete respectively.\nThus, the earliest time we can start course 3 is at month 3, and the total time required is 3 + 5 = 8 months.", "input": "Input: n = 3, relations = [[1,3],[2,3]], time = [3,2,5]", "output": "Output: 8", "explanation": "Explanation: The figure above represents the given graph and the time required to complete each course.\nWe start course 1 and course 2 simultaneously at month 0.\nCourse 1 takes 3 months and course 2 takes 2 months to complete respectively.\nThus, the earliest time we can start course 3 is at month 3, and the total time required is 3 + 5 = 8 months."}, {"full_text": "Example 2:\nInput: n = 5, relations = [[1,5],[2,5],[3,5],[3,4],[4,5]], time = [1,2,3,4,5]\nOutput: 12\nExplanation: The figure above represents the given graph and the time required to complete each course.\nYou can start courses 1, 2, and 3 at month 0.\nYou can complete them after 1, 2, and 3 months respectively.\nCourse 4 can be taken only after course 3 is completed, i.e., after 3 months. It is completed after 3 + 4 = 7 months.\nCourse 5 can be taken only after courses 1, 2, 3, and 4 have been completed, i.e., after max(1,2,3,7) = 7 months.\nThus, the minimum time needed to complete all the courses is 7 + 5 = 12 months.", "input": "Input: n = 5, relations = [[1,5],[2,5],[3,5],[3,4],[4,5]], time = [1,2,3,4,5]", "output": "Output: 12", "explanation": "Explanation: The figure above represents the given graph and the time required to complete each course.\nYou can start courses 1, 2, and 3 at month 0.\nYou can complete them after 1, 2, and 3 months respectively.\nCourse 4 can be taken only after course 3 is completed, i.e., after 3 months. It is completed after 3 + 4 = 7 months.\nCourse 5 can be taken only after courses 1, 2, 3, and 4 have been completed, i.e., after max(1,2,3,7) = 7 months.\nThus, the minimum time needed to complete all the courses is 7 + 5 = 12 months."}], "constraints": "Constraints:\n1 <= n <= 5 * 10^4\n0 <= relations.length <= min(n * (n - 1) / 2, 5 * 10^4)\nrelations[j].length == 2\n1 <= prevCoursej, nextCoursej <= n\nprevCoursej != nextCoursej\nAll the pairs [prevCoursej, nextCoursej] are unique.\ntime.length == n\n1 <= time[i] <= 10^4\nThe given graph is a directed acyclic graph.", "notes": ""}, "2045": {"label": "Hard", "title": "Second Minimum Time to Reach Destination", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.36060000000000003, "total_accepted": 5400.0, "total_submissions": 14900.0, "testcase_example": "'5\\n[[1,2],[1,3],[1,4],[3,4],[4,5]]\\n3\\n5'", "body": "A city is represented as a bi-directional connected graph with n vertices where each vertex is labeled from 1 to n (inclusive). The edges in the graph are represented as a 2D integer array edges, where each edges[i] = [ui, vi] denotes a bi-directional edge between vertex ui and vertex vi. Every vertex pair is connected by at most one edge, and no vertex has an edge to itself. The time taken to traverse any edge is time minutes.\nEach vertex has a traffic signal which changes its color from green to red and vice versa every\nchange minutes. All signals change at the same time. You can enter a vertex at any time, but can leave a vertex only when the signal is green. You cannot wait at a vertex if the signal is green.\nThe second minimum value is defined as the smallest value strictly larger than the minimum value.\nFor example the second minimum value of [2, 3, 4] is 3, and the second minimum value of [2, 2, 4] is 4.\nGiven n, edges, time, and change, return the second minimum time it will take to go from vertex 1 to vertex n.\nNotes:\nYou can go through any vertex any number of times, including 1 and n.\nYou can assume that when the journey starts, all signals have just turned green.", "examples": [{"full_text": "Example 1:\n\nInput: n = 5, edges = [[1,2],[1,3],[1,4],[3,4],[4,5]], time = 3, change = 5\nOutput: 13\nExplanation:\nThe figure on the left shows the given graph.\nThe blue path in the figure on the right is the minimum time path.\nThe time taken is:\n- Start at 1, time elapsed=0\n- 1 -> 4: 3 minutes, time elapsed=3\n- 4 -> 5: 3 minutes, time elapsed=6\nHence the minimum time needed is 6 minutes.\nThe red path shows the path to get the second minimum time.\n- Start at 1, time elapsed=0\n- 1 -> 3: 3 minutes, time elapsed=3\n- 3 -> 4: 3 minutes, time elapsed=6\n- Wait at 4 for 4 minutes, time elapsed=10\n- 4 -> 5: 3 minutes, time elapsed=13\nHence the second minimum time is 13 minutes.", "input": "Input: n = 5, edges = [[1,2],[1,3],[1,4],[3,4],[4,5]], time = 3, change = 5", "output": "Output: 13", "explanation": "Explanation:\nThe figure on the left shows the given graph.\nThe blue path in the figure on the right is the minimum time path.\nThe time taken is:\n- Start at 1, time elapsed=0\n- 1 -> 4: 3 minutes, time elapsed=3\n- 4 -> 5: 3 minutes, time elapsed=6\nHence the minimum time needed is 6 minutes.\nThe red path shows the path to get the second minimum time.\n- Start at 1, time elapsed=0\n- 1 -> 3: 3 minutes, time elapsed=3\n- 3 -> 4: 3 minutes, time elapsed=6\n- Wait at 4 for 4 minutes, time elapsed=10\n- 4 -> 5: 3 minutes, time elapsed=13\nHence the second minimum time is 13 minutes."}, {"full_text": "Example 2:\nInput: n = 2, edges = [[1,2]], time = 3, change = 2\nOutput: 11\nExplanation:\nThe minimum time path is 1 -> 2 with time = 3 minutes.\nThe second minimum time path is 1 -> 2 -> 1 -> 2 with time = 11 minutes.", "input": "Input: n = 2, edges = [[1,2]], time = 3, change = 2", "output": "Output: 11", "explanation": "Explanation:\nThe minimum time path is 1 -> 2 with time = 3 minutes.\nThe second minimum time path is 1 -> 2 -> 1 -> 2 with time = 11 minutes."}], "constraints": "Constraints:\n2 <= n <= 10^4\nn - 1 <= edges.length <= min(2 * 10^4, n * (n - 1) / 2)\nedges[i].length == 2\n1 <= ui, vi <= n\nui != vi\nThere are no duplicate edges.\nEach vertex can be reached directly or indirectly from every other vertex.\n1 <= time, change <= 10^3", "notes": ""}, "2040": {"label": "Hard", "title": "Kth Smallest Product of Two Sorted Arrays", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.2564, "total_accepted": 3800.0, "total_submissions": 14600.0, "testcase_example": "'[2,5]\\n[3,4]\\n2'", "body": "Given two sorted 0-indexed integer arrays nums1 and nums2 as well as an integer k, return the k^th (1-based) smallest product of nums1[i] * nums2[j] where 0 <= i < nums1.length and 0 <= j < nums2.length.", "examples": [{"full_text": "Example 1:\nInput: nums1 = [2,5], nums2 = [3,4], k = 2\nOutput: 8\nExplanation: The 2 smallest products are:\n- nums1[0] * nums2[0] = 2 * 3 = 6\n- nums1[0] * nums2[1] = 2 * 4 = 8\nThe 2^nd smallest product is 8.", "input": "Input: nums1 = [2,5], nums2 = [3,4], k = 2", "output": "Output: 8", "explanation": "Explanation: The 2 smallest products are:\n- nums1[0] * nums2[0] = 2 * 3 = 6\n- nums1[0] * nums2[1] = 2 * 4 = 8\nThe 2^nd smallest product is 8."}, {"full_text": "Example 2:\nInput: nums1 = [-4,-2,0,3], nums2 = [2,4], k = 6\nOutput: 0\nExplanation: The 6 smallest products are:\n- nums1[0] * nums2[1] = (-4) * 4 = -16\n- nums1[0] * nums2[0] = (-4) * 2 = -8\n- nums1[1] * nums2[1] = (-2) * 4 = -8\n- nums1[1] * nums2[0] = (-2) * 2 = -4\n- nums1[2] * nums2[0] = 0 * 2 = 0\n- nums1[2] * nums2[1] = 0 * 4 = 0\nThe 6^th smallest product is 0.", "input": "Input: nums1 = [-4,-2,0,3], nums2 = [2,4], k = 6", "output": "Output: 0", "explanation": "Explanation: The 6 smallest products are:\n- nums1[0] * nums2[1] = (-4) * 4 = -16\n- nums1[0] * nums2[0] = (-4) * 2 = -8\n- nums1[1] * nums2[1] = (-2) * 4 = -8\n- nums1[1] * nums2[0] = (-2) * 2 = -4\n- nums1[2] * nums2[0] = 0 * 2 = 0\n- nums1[2] * nums2[1] = 0 * 4 = 0\nThe 6^th smallest product is 0."}, {"full_text": "Example 3:\nInput: nums1 = [-2,-1,0,1,2], nums2 = [-3,-1,2,4,5], k = 3\nOutput: -6\nExplanation: The 3 smallest products are:\n- nums1[0] * nums2[4] = (-2) * 5 = -10\n- nums1[0] * nums2[3] = (-2) * 4 = -8\n- nums1[4] * nums2[0] = 2 * (-3) = -6\nThe 3^rd smallest product is -6.", "input": "Input: nums1 = [-2,-1,0,1,2], nums2 = [-3,-1,2,4,5], k = 3", "output": "Output: -6", "explanation": "Explanation: The 3 smallest products are:\n- nums1[0] * nums2[4] = (-2) * 5 = -10\n- nums1[0] * nums2[3] = (-2) * 4 = -8\n- nums1[4] * nums2[0] = 2 * (-3) = -6\nThe 3^rd smallest product is -6."}], "constraints": "Constraints:\n1 <= nums1.length, nums2.length <= 5 * 10^4\n-10^5 <= nums1[i], nums2[j] <= 10^5\n1 <= k <= nums1.length * nums2.length\nnums1 and nums2 are sorted.", "notes": ""}, "2035": {"label": "Hard", "title": "Partition Array Into Two Arrays to Minimize Sum Difference", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.2354, "total_accepted": 4500.0, "total_submissions": 19100.0, "testcase_example": "'[3,9,7,3]'", "body": "You are given an integer array nums of 2 * n integers. You need to partition nums into two arrays of length n to minimize the absolute difference of the sums of the arrays. To partition nums, put each element of nums into one of the two arrays.\nReturn the minimum possible absolute difference.", "examples": [{"full_text": "Example 1:\nInput: nums = [3,9,7,3]\nOutput: 2\nExplanation: One optimal partition is: [3,9] and [7,3].\nThe absolute difference between the sums of the arrays is abs((3 + 9) - (7 + 3)) = 2.", "input": "Input: nums = [3,9,7,3]", "output": "Output: 2", "explanation": "Explanation: One optimal partition is: [3,9] and [7,3].\nThe absolute difference between the sums of the arrays is abs((3 + 9) - (7 + 3)) = 2."}, {"full_text": "Example 2:\nInput: nums = [-36,36]\nOutput: 72\nExplanation: One optimal partition is: [-36] and [36].\nThe absolute difference between the sums of the arrays is abs((-36) - (36)) = 72.", "input": "Input: nums = [-36,36]", "output": "Output: 72", "explanation": "Explanation: One optimal partition is: [-36] and [36].\nThe absolute difference between the sums of the arrays is abs((-36) - (36)) = 72."}, {"full_text": "Example 3:\nInput: nums = [2,-1,0,4,-2,-9]\nOutput: 0\nExplanation: One optimal partition is: [2,4,-9] and [-1,0,-2].\nThe absolute difference between the sums of the arrays is abs((2 + 4 + -9) - (-1 + 0 + -2)) = 0.", "input": "Input: nums = [2,-1,0,4,-2,-9]", "output": "Output: 0", "explanation": "Explanation: One optimal partition is: [2,4,-9] and [-1,0,-2].\nThe absolute difference between the sums of the arrays is abs((2 + 4 + -9) - (-1 + 0 + -2)) = 0."}], "constraints": "Constraints:\n1 <= n <= 15\nnums.length == 2 * n\n-10^7 <= nums[i] <= 10^7", "notes": ""}, "2030": {"label": "Hard", "title": "Smallest K-Length Subsequence With Occurrences of a Letter", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.38789999999999997, "total_accepted": 3600.0, "total_submissions": 9300.0, "testcase_example": "'\"leet\"\\n3\\n\"e\"\\n1'", "body": "You are given a string s, an integer k, a letter letter, and an integer repetition.\nReturn the lexicographically smallest subsequence of s of length k that has the letter letter appear at least repetition times. The test cases are generated so that the letter appears in s at least repetition times.\nA subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.\nA string a is lexicographically smaller than a string b if in the first position where a and b differ, string a has a letter that appears earlier in the alphabet than the corresponding letter in b.", "examples": [{"full_text": "Example 1:\nInput: s = \"leet\", k = 3, letter = \"e\", repetition = 1\nOutput: \"eet\"\nExplanation: There are four subsequences of length 3 that have the letter 'e' appear at least 1 time:\n- \"lee\" (from \"leet\")\n- \"let\" (from \"leet\")\n- \"let\" (from \"leet\")\n- \"eet\" (from \"leet\")\nThe lexicographically smallest subsequence among them is \"eet\".", "input": "Input: s = \"leet\", k = 3, letter = \"e\", repetition = 1", "output": "Output: \"eet\"", "explanation": "Explanation: There are four subsequences of length 3 that have the letter 'e' appear at least 1 time:\n- \"lee\" (from \"leet\")\n- \"let\" (from \"leet\")\n- \"let\" (from \"leet\")\n- \"eet\" (from \"leet\")\nThe lexicographically smallest subsequence among them is \"eet\"."}, {"full_text": "Example 2:\nInput: s = \"leetcode\", k = 4, letter = \"e\", repetition = 2\nOutput: \"ecde\"\nExplanation: \"ecde\" is the lexicographically smallest subsequence of length 4 that has the letter \"e\" appear at least 2 times.", "input": "Input: s = \"leetcode\", k = 4, letter = \"e\", repetition = 2", "output": "Output: \"ecde\"", "explanation": "Explanation: \"ecde\" is the lexicographically smallest subsequence of length 4 that has the letter \"e\" appear at least 2 times."}, {"full_text": "Example 3:\nInput: s = \"bb\", k = 2, letter = \"b\", repetition = 2\nOutput: \"bb\"\nExplanation: \"bb\" is the only subsequence of length 2 that has the letter \"b\" appear at least 2 times.", "input": "Input: s = \"bb\", k = 2, letter = \"b\", repetition = 2", "output": "Output: \"bb\"", "explanation": "Explanation: \"bb\" is the only subsequence of length 2 that has the letter \"b\" appear at least 2 times."}], "constraints": "Constraints:\n1 <= repetition <= k <= s.length <= 5 * 10^4\ns consists of lowercase English letters.\nletter is a lowercase English letter, and appears in s at least repetition times.", "notes": ""}, "2025": {"label": "Hard", "title": "Maximum Number of Ways to Partition an Array", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.301, "total_accepted": 4200.0, "total_submissions": 13900.0, "testcase_example": "'[2,-1,2]\\n3'", "body": "You are given a 0-indexed integer array nums of length n. The number of ways to partition nums is the number of pivot indices that satisfy both conditions:\n1 <= pivot < n\nnums[0] + nums[1] + ... + nums[pivot - 1] == nums[pivot] + nums[pivot + 1] + ... + nums[n - 1]\nYou are also given an integer k. You can choose to change the value of one element of nums to k, or to leave the array unchanged.\nReturn the maximum possible number of ways to partition nums to satisfy both conditions after changing at most one element.", "examples": [{"full_text": "Example 1:\nInput: nums = [2,-1,2], k = 3\nOutput: 1\nExplanation: One optimal approach is to change nums[0] to k. The array becomes [3,-1,2].\nThere is one way to partition the array:\n- For pivot = 2, we have the partition [3,-1 | 2]: 3 + -1 == 2.", "input": "Input: nums = [2,-1,2], k = 3", "output": "Output: 1", "explanation": "Explanation: One optimal approach is to change nums[0] to k. The array becomes [3,-1,2].\nThere is one way to partition the array:\n- For pivot = 2, we have the partition [3,-1 | 2]: 3 + -1 == 2."}, {"full_text": "Example 2:\nInput: nums = [0,0,0], k = 1\nOutput: 2\nExplanation: The optimal approach is to leave the array unchanged.\nThere are two ways to partition the array:\n- For pivot = 1, we have the partition [0 | 0,0]: 0 == 0 + 0.\n- For pivot = 2, we have the partition [0,0 | 0]: 0 + 0 == 0.", "input": "Input: nums = [0,0,0], k = 1", "output": "Output: 2", "explanation": "Explanation: The optimal approach is to leave the array unchanged.\nThere are two ways to partition the array:\n- For pivot = 1, we have the partition [0 | 0,0]: 0 == 0 + 0.\n- For pivot = 2, we have the partition [0,0 | 0]: 0 + 0 == 0."}, {"full_text": "Example 3:\nInput: nums = [22,4,-25,-20,-15,15,-16,7,19,-10,0,-13,-14], k = -33\nOutput: 4\nExplanation: One optimal approach is to change nums[2] to k. The array becomes [22,4,-33,-20,-15,15,-16,7,19,-10,0,-13,-14].\nThere are four ways to partition the array.", "input": "Input: nums = [22,4,-25,-20,-15,15,-16,7,19,-10,0,-13,-14], k = -33", "output": "Output: 4", "explanation": "Explanation: One optimal approach is to change nums[2] to k. The array becomes [22,4,-33,-20,-15,15,-16,7,19,-10,0,-13,-14].\nThere are four ways to partition the array."}], "constraints": "Constraints:\nn == nums.length\n2 <= n <= 10^5\n-10^5 <= k, nums[i] <= 10^5", "notes": ""}, "2019": {"label": "Hard", "title": "The Score of Students Solving Math Expression", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3317, "total_accepted": 3700.0, "total_submissions": 11100.0, "testcase_example": "'\"7+3*1*2\"\\n[20,13,42]'", "body": "You are given a string s that contains digits 0-9, addition symbols '+', and multiplication symbols '*' only, representing a valid math expression of single digit numbers (e.g., 3+5*2). This expression was given to n elementary school students. The students were instructed to get the answer of the expression by following this order of operations:\nCompute multiplication, reading from left to right; Then,\nCompute addition, reading from left to right.\nYou are given an integer array answers of length n, which are the submitted answers of the students in no particular order. You are asked to grade the answers, by following these rules:\nIf an answer equals the correct answer of the expression, this student will be rewarded 5 points;\nOtherwise, if the answer could be interpreted as if the student applied the operators in the wrong order but had correct arithmetic, this student will be rewarded 2 points;\nOtherwise, this student will be rewarded 0 points.\nReturn the sum of the points of the students.", "examples": [{"full_text": "Example 1:\nInput: s = \"7+3*1*2\", answers = [20,13,42]\nOutput: 7\nExplanation: As illustrated above, the correct answer of the expression is 13, therefore one student is rewarded 5 points: [20,13,42]\nA student might have applied the operators in this wrong order: ((7+3)*1)*2 = 20. Therefore one student is rewarded 2 points: [20,13,42]\nThe points for the students are: [2,5,0]. The sum of the points is 2+5+0=7.", "input": "Input: s = \"7+3*1*2\", answers = [20,13,42]", "output": "Output: 7", "explanation": "Explanation: As illustrated above, the correct answer of the expression is 13, therefore one student is rewarded 5 points: [20,13,42]\nA student might have applied the operators in this wrong order: ((7+3)*1)*2 = 20. Therefore one student is rewarded 2 points: [20,13,42]\nThe points for the students are: [2,5,0]. The sum of the points is 2+5+0=7."}, {"full_text": "Example 2:\nInput: s = \"3+5*2\", answers = [13,0,10,13,13,16,16]\nOutput: 19\nExplanation: The correct answer of the expression is 13, therefore three students are rewarded 5 points each: [13,0,10,13,13,16,16]\nA student might have applied the operators in this wrong order: ((3+5)*2 = 16. Therefore two students are rewarded 2 points: [13,0,10,13,13,16,16]\nThe points for the students are: [5,0,0,5,5,2,2]. The sum of the points is 5+0+0+5+5+2+2=19.", "input": "Input: s = \"3+5*2\", answers = [13,0,10,13,13,16,16]", "output": "Output: 19", "explanation": "Explanation: The correct answer of the expression is 13, therefore three students are rewarded 5 points each: [13,0,10,13,13,16,16]\nA student might have applied the operators in this wrong order: ((3+5)*2 = 16. Therefore two students are rewarded 2 points: [13,0,10,13,13,16,16]\nThe points for the students are: [5,0,0,5,5,2,2]. The sum of the points is 5+0+0+5+5+2+2=19."}, {"full_text": "Example 3:\nInput: s = \"6+0*1\", answers = [12,9,6,4,8,6]\nOutput: 10\nExplanation: The correct answer of the expression is 6.\nIf a student had incorrectly done (6+0)*1, the answer would also be 6.\nBy the rules of grading, the students will still be rewarded 5 points (as they got the correct answer), not 2 points.\nThe points for the students are: [0,0,5,0,0,5]. The sum of the points is 10.", "input": "Input: s = \"6+0*1\", answers = [12,9,6,4,8,6]", "output": "Output: 10", "explanation": "Explanation: The correct answer of the expression is 6.\nIf a student had incorrectly done (6+0)*1, the answer would also be 6.\nBy the rules of grading, the students will still be rewarded 5 points (as they got the correct answer), not 2 points.\nThe points for the students are: [0,0,5,0,0,5]. The sum of the points is 10."}], "constraints": "Constraints:\n3 <= s.length <= 31\ns represents a valid expression that contains only digits 0-9, '+', and '*' only.\nAll the integer operands in the expression are in the inclusive range [0, 9].\n1 <= The count of all operators ('+' and '*') in the math expression <= 15\nTest data are generated such that the correct answer of the expression is in the range of [0, 1000].\nn == answers.length\n1 <= n <= 10^4\n0 <= answers[i] <= 1000", "notes": ""}, "2014": {"label": "Hard", "title": "Longest Subsequence Repeated k Times", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.545, "total_accepted": 3700.0, "total_submissions": 6800.0, "testcase_example": "'\"letsleetcode\"\\n2'", "body": "You are given a string s of length n, and an integer k. You are tasked to find the longest subsequence repeated k times in string s.\nA subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.\nA subsequence seq is repeated k times in the string s if seq * k is a subsequence of s, where seq * k represents a string constructed by concatenating seq k times.\nFor example, \"bba\" is repeated 2 times in the string \"bababcba\", because the string \"bbabba\", constructed by concatenating \"bba\" 2 times, is a subsequence of the string \"bababcba\".\nReturn the longest subsequence repeated k times in string s. If multiple such subsequences are found, return the lexicographically largest one. If there is no such subsequence, return an empty string.", "examples": [{"full_text": "Example 1:\nInput: s = \"letsleetcode\", k = 2\nOutput: \"let\"\nExplanation: There are two longest subsequences repeated 2 times: \"let\" and \"ete\".\n\"let\" is the lexicographically largest one.", "input": "Input: s = \"letsleetcode\", k = 2", "output": "Output: \"let\"", "explanation": "Explanation: There are two longest subsequences repeated 2 times: \"let\" and \"ete\".\n\"let\" is the lexicographically largest one."}, {"full_text": "Example 2:\nInput: s = \"bb\", k = 2\nOutput: \"b\"\nExplanation: The longest subsequence repeated 2 times is \"b\".", "input": "Input: s = \"bb\", k = 2", "output": "Output: \"b\"", "explanation": "Explanation: The longest subsequence repeated 2 times is \"b\"."}, {"full_text": "Example 3:\nInput: s = \"ab\", k = 2\nOutput: \"\"\nExplanation: There is no subsequence repeated 2 times. Empty string is returned.", "input": "Input: s = \"ab\", k = 2", "output": "Output: \"\"", "explanation": "Explanation: There is no subsequence repeated 2 times. Empty string is returned."}], "constraints": "Constraints:\nn == s.length\n2 <= n, k <= 2000\n2 <= n < k * 8\ns consists of lowercase English letters.", "notes": ""}, "2009": {"label": "Hard", "title": "Minimum Number of Operations to Make Array Continuous", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4542, "total_accepted": 5300.0, "total_submissions": 11700.0, "testcase_example": "'[4,2,5,3]'", "body": "You are given an integer array nums. In one operation, you can replace any element in nums with any integer.\nnums is considered continuous if both of the following conditions are fulfilled:\nAll elements in nums are unique.\nThe difference between the maximum element and the minimum element in nums equals nums.length - 1.\nFor example, nums = [4, 2, 5, 3] is continuous, but nums = [1, 2, 3, 5, 6] is not continuous.\nReturn the minimum number of operations to make nums continuous.", "examples": [{"full_text": "Example 1:\nInput: nums = [4,2,5,3]\nOutput: 0\nExplanation:\nnums is already continuous.", "input": "Input: nums = [4,2,5,3]", "output": "Output: 0", "explanation": "Explanation:\nnums is already continuous."}, {"full_text": "Example 2:\nInput: nums = [1,2,3,5,6]\nOutput: 1\nExplanation:\nOne possible solution is to change the last element to 4.\nThe resulting array is [1,2,3,5,4], which is continuous.", "input": "Input: nums = [1,2,3,5,6]", "output": "Output: 1", "explanation": "Explanation:\nOne possible solution is to change the last element to 4.\nThe resulting array is [1,2,3,5,4], which is continuous."}, {"full_text": "Example 3:\nInput: nums = [1,10,100,1000]\nOutput: 3\nExplanation:\nOne possible solution is to:\n- Change the second element to 2.\n- Change the third element to 3.\n- Change the fourth element to 4.\nThe resulting array is [1,2,3,4], which is continuous.", "input": "Input: nums = [1,10,100,1000]", "output": "Output: 3", "explanation": "Explanation:\nOne possible solution is to:\n- Change the second element to 2.\n- Change the third element to 3.\n- Change the fourth element to 4.\nThe resulting array is [1,2,3,4], which is continuous."}], "constraints": "Constraints:\n1 <= nums.length <= 10^5\n1 <= nums[i] <= 10^9", "notes": ""}, "2003": {"label": "Hard", "title": "Smallest Missing Genetic Value in Each Subtree", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.41859999999999997, "total_accepted": 4400.0, "total_submissions": 10500.0, "testcase_example": "'[-1,0,0,2]\\n[1,2,3,4]'", "body": "There is a family tree rooted at 0 consisting of n nodes numbered 0 to n - 1. You are given a 0-indexed integer array parents, where parents[i] is the parent for node i. Since node 0 is the root, parents[0] == -1.\nThere are 10^5 genetic values, each represented by an integer in the inclusive range [1, 10^5]. You are given a 0-indexed integer array nums, where nums[i] is a distinct genetic value for node i.\nReturn an array ans of length n where ans[i] is the smallest genetic value that is missing from the subtree rooted at node i.\nThe subtree rooted at a node x contains node x and all of its descendant nodes.", "examples": [{"full_text": "Example 1:\nInput: parents = [-1,0,0,2], nums = [1,2,3,4]\nOutput: [5,1,1,1]\nExplanation: The answer for each subtree is calculated as follows:\n- 0: The subtree contains nodes [0,1,2,3] with values [1,2,3,4]. 5 is the smallest missing value.\n- 1: The subtree contains only node 1 with value 2. 1 is the smallest missing value.\n- 2: The subtree contains nodes [2,3] with values [3,4]. 1 is the smallest missing value.\n- 3: The subtree contains only node 3 with value 4. 1 is the smallest missing value.", "input": "Input: parents = [-1,0,0,2], nums = [1,2,3,4]", "output": "Output: [5,1,1,1]", "explanation": "Explanation: The answer for each subtree is calculated as follows:\n- 0: The subtree contains nodes [0,1,2,3] with values [1,2,3,4]. 5 is the smallest missing value.\n- 1: The subtree contains only node 1 with value 2. 1 is the smallest missing value.\n- 2: The subtree contains nodes [2,3] with values [3,4]. 1 is the smallest missing value.\n- 3: The subtree contains only node 3 with value 4. 1 is the smallest missing value."}, {"full_text": "Example 2:\nInput: parents = [-1,0,1,0,3,3], nums = [5,4,6,2,1,3]\nOutput: [7,1,1,4,2,1]\nExplanation: The answer for each subtree is calculated as follows:\n- 0: The subtree contains nodes [0,1,2,3,4,5] with values [5,4,6,2,1,3]. 7 is the smallest missing value.\n- 1: The subtree contains nodes [1,2] with values [4,6]. 1 is the smallest missing value.\n- 2: The subtree contains only node 2 with value 6. 1 is the smallest missing value.\n- 3: The subtree contains nodes [3,4,5] with values [2,1,3]. 4 is the smallest missing value.\n- 4: The subtree contains only node 4 with value 1. 2 is the smallest missing value.\n- 5: The subtree contains only node 5 with value 3. 1 is the smallest missing value.", "input": "Input: parents = [-1,0,1,0,3,3], nums = [5,4,6,2,1,3]", "output": "Output: [7,1,1,4,2,1]", "explanation": "Explanation: The answer for each subtree is calculated as follows:\n- 0: The subtree contains nodes [0,1,2,3,4,5] with values [5,4,6,2,1,3]. 7 is the smallest missing value.\n- 1: The subtree contains nodes [1,2] with values [4,6]. 1 is the smallest missing value.\n- 2: The subtree contains only node 2 with value 6. 1 is the smallest missing value.\n- 3: The subtree contains nodes [3,4,5] with values [2,1,3]. 4 is the smallest missing value.\n- 4: The subtree contains only node 4 with value 1. 2 is the smallest missing value.\n- 5: The subtree contains only node 5 with value 3. 1 is the smallest missing value."}, {"full_text": "Example 3:\nInput: parents = [-1,2,3,0,2,4,1], nums = [2,3,4,5,6,7,8]\nOutput: [1,1,1,1,1,1,1]\nExplanation: The value 1 is missing from all the subtrees.", "input": "Input: parents = [-1,2,3,0,2,4,1], nums = [2,3,4,5,6,7,8]", "output": "Output: [1,1,1,1,1,1,1]", "explanation": "Explanation: The value 1 is missing from all the subtrees."}], "constraints": "Constraints:\nn == parents.length == nums.length\n2 <= n <= 10^5\n0 <= parents[i] <= n - 1 for i != 0\nparents[0] == -1\nparents represents a valid tree.\n1 <= nums[i] <= 10^5\nEach nums[i] is distinct.", "notes": ""}, "1998": {"label": "Hard", "title": "GCD Sort of an Array", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4586, "total_accepted": 4300.0, "total_submissions": 9400.0, "testcase_example": "'[7,21,3]'", "body": "You are given an integer array nums, and you can perform the following operation any number of times on nums:\nSwap the positions of two elements nums[i] and nums[j] if gcd(nums[i], nums[j]) > 1 where gcd(nums[i], nums[j]) is the greatest common divisor of nums[i] and nums[j].\nReturn true if it is possible to sort nums in non-decreasing order using the above swap method, or false otherwise.", "examples": [{"full_text": "Example 1:\nInput: nums = [7,21,3]\nOutput: true\nExplanation: We can sort [7,21,3] by performing the following operations:\n- Swap 7 and 21 because gcd(7,21) = 7. nums = [21,7,3]\n- Swap 21 and 3 because gcd(21,3) = 3. nums = [3,7,21]", "input": "Input: nums = [7,21,3]", "output": "Output: true", "explanation": "Explanation: We can sort [7,21,3] by performing the following operations:\n- Swap 7 and 21 because gcd(7,21) = 7. nums = [21,7,3]\n- Swap 21 and 3 because gcd(21,3) = 3. nums = [3,7,21]"}, {"full_text": "Example 2:\nInput: nums = [5,2,6,2]\nOutput: false\nExplanation: It is impossible to sort the array because 5 cannot be swapped with any other element.", "input": "Input: nums = [5,2,6,2]", "output": "Output: false", "explanation": "Explanation: It is impossible to sort the array because 5 cannot be swapped with any other element."}, {"full_text": "Example 3:\nInput: nums = [10,5,9,3,15]\nOutput: true\nWe can sort [10,5,9,3,15] by performing the following operations:\n- Swap 10 and 15 because gcd(10,15) = 5. nums = [15,5,9,3,10]\n- Swap 15 and 3 because gcd(15,3) = 3. nums = [3,5,9,15,10]\n- Swap 10 and 15 because gcd(10,15) = 5. nums = [3,5,9,10,15]", "input": "Input: nums = [10,5,9,3,15]", "output": "Output: true\nWe can sort [10,5,9,3,15] by performing the following operations:\n- Swap 10 and 15 because gcd(10,15) = 5. nums = [15,5,9,3,10]\n- Swap 15 and 3 because gcd(15,3) = 3. nums = [3,5,9,15,10]\n- Swap 10 and 15 because gcd(10,15) = 5. nums = [3,5,9,10,15]", "explanation": ""}], "constraints": "Constraints:\n1 <= nums.length <= 3 * 10^4\n2 <= nums[i] <= 10^5", "notes": ""}, "1994": {"label": "Hard", "title": "The Number of Good Subsets", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3322, "total_accepted": 3200.0, "total_submissions": 9700.0, "testcase_example": "'[1,2,3,4]'", "body": "You are given an integer array nums. We call a subset of nums good if its product can be represented as a product of one or more distinct prime numbers.\nFor example, if nums = [1, 2, 3, 4]:\n\n[2, 3], [1, 2, 3], and [1, 3] are good subsets with products 6 = 2*3, 6 = 2*3, and 3 = 3 respectively.\n[1, 4] and [4] are not good subsets with products 4 = 2*2 and 4 = 2*2 respectively.\n\n\nReturn the number of different good subsets in nums modulo 10^9 + 7.\nA subset of nums is any array that can be obtained by deleting some (possibly none or all) elements from nums. Two subsets are different if and only if the chosen indices to delete are different.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,2,3,4]\nOutput: 6\nExplanation: The good subsets are:\n- [1,2]: product is 2, which is the product of distinct prime 2.\n- [1,2,3]: product is 6, which is the product of distinct primes 2 and 3.\n- [1,3]: product is 3, which is the product of distinct prime 3.\n- [2]: product is 2, which is the product of distinct prime 2.\n- [2,3]: product is 6, which is the product of distinct primes 2 and 3.\n- [3]: product is 3, which is the product of distinct prime 3.", "input": "Input: nums = [1,2,3,4]", "output": "Output: 6", "explanation": "Explanation: The good subsets are:\n- [1,2]: product is 2, which is the product of distinct prime 2.\n- [1,2,3]: product is 6, which is the product of distinct primes 2 and 3.\n- [1,3]: product is 3, which is the product of distinct prime 3.\n- [2]: product is 2, which is the product of distinct prime 2.\n- [2,3]: product is 6, which is the product of distinct primes 2 and 3.\n- [3]: product is 3, which is the product of distinct prime 3."}, {"full_text": "Example 2:\nInput: nums = [4,2,3,15]\nOutput: 5\nExplanation: The good subsets are:\n- [2]: product is 2, which is the product of distinct prime 2.\n- [2,3]: product is 6, which is the product of distinct primes 2 and 3.\n- [2,15]: product is 30, which is the product of distinct primes 2, 3, and 5.\n- [3]: product is 3, which is the product of distinct prime 3.\n- [15]: product is 15, which is the product of distinct primes 3 and 5.", "input": "Input: nums = [4,2,3,15]", "output": "Output: 5", "explanation": "Explanation: The good subsets are:\n- [2]: product is 2, which is the product of distinct prime 2.\n- [2,3]: product is 6, which is the product of distinct primes 2 and 3.\n- [2,15]: product is 30, which is the product of distinct primes 2, 3, and 5.\n- [3]: product is 3, which is the product of distinct prime 3.\n- [15]: product is 15, which is the product of distinct primes 3 and 5."}], "constraints": "Constraints:\n1 <= nums.length <= 10^5\n1 <= nums[i] <= 30", "notes": ""}, "1987": {"label": "Hard", "title": "Number of Unique Good Subsequences", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5197999999999999, "total_accepted": 6300.0, "total_submissions": 12200.0, "testcase_example": "'\"001\"'", "body": "You are given a binary string binary. A subsequence of binary is considered good if it is not empty and has no leading zeros (with the exception of \"0\").\nFind the number of unique good subsequences of binary.\nFor example, if binary = \"001\", then all the good subsequences are [\"0\", \"0\", \"1\"], so the unique good subsequences are \"0\" and \"1\". Note that subsequences \"00\", \"01\", and \"001\" are not good because they have leading zeros.\nReturn the number of unique good subsequences of binary. Since the answer may be very large, return it modulo 10^9 + 7.\nA subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.", "examples": [{"full_text": "Example 1:\nInput: binary = \"001\"\nOutput: 2\nExplanation: The good subsequences of binary are [\"0\", \"0\", \"1\"].\nThe unique good subsequences are \"0\" and \"1\".", "input": "Input: binary = \"001\"", "output": "Output: 2", "explanation": "Explanation: The good subsequences of binary are [\"0\", \"0\", \"1\"].\nThe unique good subsequences are \"0\" and \"1\"."}, {"full_text": "Example 2:\nInput: binary = \"11\"\nOutput: 2\nExplanation: The good subsequences of binary are [\"1\", \"1\", \"11\"].\nThe unique good subsequences are \"1\" and \"11\".", "input": "Input: binary = \"11\"", "output": "Output: 2", "explanation": "Explanation: The good subsequences of binary are [\"1\", \"1\", \"11\"].\nThe unique good subsequences are \"1\" and \"11\"."}, {"full_text": "Example 3:\nInput: binary = \"101\"\nOutput: 5\nExplanation: The good subsequences of binary are [\"1\", \"0\", \"1\", \"10\", \"11\", \"101\"].\nThe unique good subsequences are \"0\", \"1\", \"10\", \"11\", and \"101\".", "input": "Input: binary = \"101\"", "output": "Output: 5", "explanation": "Explanation: The good subsequences of binary are [\"1\", \"0\", \"1\", \"10\", \"11\", \"101\"].\nThe unique good subsequences are \"0\", \"1\", \"10\", \"11\", and \"101\"."}], "constraints": "Constraints:\n1 <= binary.length <= 10^5\nbinary consists of only '0's and '1's.", "notes": ""}, "1982": {"label": "Hard", "title": "Find Array Given Subset Sums", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.483, "total_accepted": 2800.0, "total_submissions": 5800.0, "testcase_example": "'3\\n[-3,-2,-1,0,0,1,2,3]'", "body": "You are given an integer n representing the length of an unknown array that you are trying to recover. You are also given an array sums containing the values of all 2^n subset sums of the unknown array (in no particular order).\nReturn the array ans of length n representing the unknown array. If multiple answers exist, return any of them.\nAn array sub is a subset of an array arr if sub can be obtained from arr by deleting some (possibly zero or all) elements of arr. The sum of the elements in sub is one possible subset sum of arr. The sum of an empty array is considered to be 0.\nNote: Test cases are generated such that there will always be at least one correct answer.", "examples": [{"full_text": "Example 1:\nInput: n = 3, sums = [-3,-2,-1,0,0,1,2,3]\nOutput: [1,2,-3]\nExplanation: [1,2,-3] is able to achieve the given subset sums:\n- []: sum is 0\n- [1]: sum is 1\n- [2]: sum is 2\n- [1,2]: sum is 3\n- [-3]: sum is -3\n- [1,-3]: sum is -2\n- [2,-3]: sum is -1\n- [1,2,-3]: sum is 0\nNote that any permutation of [1,2,-3] and also any permutation of [-1,-2,3] will also be accepted.", "input": "Input: n = 3, sums = [-3,-2,-1,0,0,1,2,3]", "output": "Output: [1,2,-3]", "explanation": "Explanation: [1,2,-3] is able to achieve the given subset sums:\n- []: sum is 0\n- [1]: sum is 1\n- [2]: sum is 2\n- [1,2]: sum is 3\n- [-3]: sum is -3\n- [1,-3]: sum is -2\n- [2,-3]: sum is -1\n- [1,2,-3]: sum is 0\nNote that any permutation of [1,2,-3] and also any permutation of [-1,-2,3] will also be accepted."}, {"full_text": "Example 2:\nInput: n = 2, sums = [0,0,0,0]\nOutput: [0,0]\nExplanation: The only correct answer is [0,0].", "input": "Input: n = 2, sums = [0,0,0,0]", "output": "Output: [0,0]", "explanation": "Explanation: The only correct answer is [0,0]."}, {"full_text": "Example 3:\nInput: n = 4, sums = [0,0,5,5,4,-1,4,9,9,-1,4,3,4,8,3,8]\nOutput: [0,-1,4,5]\nExplanation: [0,-1,4,5] is able to achieve the given subset sums.", "input": "Input: n = 4, sums = [0,0,5,5,4,-1,4,9,9,-1,4,3,4,8,3,8]", "output": "Output: [0,-1,4,5]", "explanation": "Explanation: [0,-1,4,5] is able to achieve the given subset sums."}], "constraints": "Constraints:\n1 <= n <= 15\nsums.length == 2^n\n-10^4 <= sums[i] <= 10^4", "notes": ""}, "1977": {"label": "Hard", "title": "Number of Ways to Separate Numbers", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.2279, "total_accepted": 2500.0, "total_submissions": 11000.0, "testcase_example": "'\"327\"'", "body": "You wrote down many positive integers in a string called num. However, you realized that you forgot to add commas to seperate the different numbers. You remember that the list of integers was non-decreasing and that no integer had leading zeros.\nReturn the number of possible lists of integers that you could have written down to get the string num. Since the answer may be large, return it modulo 10^9 + 7.", "examples": [{"full_text": "Example 1:\nInput: num = \"327\"\nOutput: 2\nExplanation: You could have written down the numbers:\n3, 27\n327", "input": "Input: num = \"327\"", "output": "Output: 2", "explanation": "Explanation: You could have written down the numbers:\n3, 27\n327"}, {"full_text": "Example 2:\nInput: num = \"094\"\nOutput: 0\nExplanation: No numbers can have leading zeros and all numbers must be positive.", "input": "Input: num = \"094\"", "output": "Output: 0", "explanation": "Explanation: No numbers can have leading zeros and all numbers must be positive."}, {"full_text": "Example 3:\nInput: num = \"0\"\nOutput: 0\nExplanation: No numbers can have leading zeros and all numbers must be positive.", "input": "Input: num = \"0\"", "output": "Output: 0", "explanation": "Explanation: No numbers can have leading zeros and all numbers must be positive."}], "constraints": "Constraints:\n1 <= num.length <= 3500\nnum consists of digits '0' through '9'.", "notes": ""}, "1970": {"label": "Hard", "title": "Last Day Where You Can Still Cross", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4836, "total_accepted": 7800.0, "total_submissions": 16000.0, "testcase_example": "'2\\n2\\n[[1,1],[2,1],[1,2],[2,2]]'", "body": "There is a 1-based binary matrix where 0 represents land and 1 represents water. You are given integers row and col representing the number of rows and columns in the matrix, respectively.\nInitially on day 0, the entire matrix is land. However, each day a new cell becomes flooded with water. You are given a 1-based 2D array cells, where cells[i] = [ri, ci] represents that on the i^th day, the cell on the ri^th row and ci^th column (1-based coordinates) will be covered with water (i.e., changed to 1).\nYou want to find the last day that it is possible to walk from the top to the bottom by only walking on land cells. You can start from any cell in the top row and end at any cell in the bottom row. You can only travel in the four cardinal directions (left, right, up, and down).\nReturn the last day where it is possible to walk from the top to the bottom by only walking on land cells.", "examples": [{"full_text": "Example 1:\nInput: row = 2, col = 2, cells = [[1,1],[2,1],[1,2],[2,2]]\nOutput: 2\nExplanation: The above image depicts how the matrix changes each day starting from day 0.\nThe last day where it is possible to cross from top to bottom is on day 2.", "input": "Input: row = 2, col = 2, cells = [[1,1],[2,1],[1,2],[2,2]]", "output": "Output: 2", "explanation": "Explanation: The above image depicts how the matrix changes each day starting from day 0.\nThe last day where it is possible to cross from top to bottom is on day 2."}, {"full_text": "Example 2:\nInput: row = 2, col = 2, cells = [[1,1],[1,2],[2,1],[2,2]]\nOutput: 1\nExplanation: The above image depicts how the matrix changes each day starting from day 0.\nThe last day where it is possible to cross from top to bottom is on day 1.", "input": "Input: row = 2, col = 2, cells = [[1,1],[1,2],[2,1],[2,2]]", "output": "Output: 1", "explanation": "Explanation: The above image depicts how the matrix changes each day starting from day 0.\nThe last day where it is possible to cross from top to bottom is on day 1."}, {"full_text": "Example 3:\nInput: row = 3, col = 3, cells = [[1,2],[2,1],[3,3],[2,2],[1,1],[1,3],[2,3],[3,2],[3,1]]\nOutput: 3\nExplanation: The above image depicts how the matrix changes each day starting from day 0.\nThe last day where it is possible to cross from top to bottom is on day 3.", "input": "Input: row = 3, col = 3, cells = [[1,2],[2,1],[3,3],[2,2],[1,1],[1,3],[2,3],[3,2],[3,1]]", "output": "Output: 3", "explanation": "Explanation: The above image depicts how the matrix changes each day starting from day 0.\nThe last day where it is possible to cross from top to bottom is on day 3."}], "constraints": "Constraints:\n2 <= row, col <= 2 * 10^4\n4 <= row * col <= 2 * 10^4\ncells.length == row * col\n1 <= ri <= row\n1 <= ci <= col\nAll the values of cells are unique.", "notes": ""}, "1964": {"label": "Hard", "title": "Find the Longest Valid Obstacle Course at Each Position", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4499, "total_accepted": 7800.0, "total_submissions": 17400.0, "testcase_example": "'[1,2,3,2]'", "body": "You want to build some obstacle courses. You are given a 0-indexed integer array obstacles of length n, where obstacles[i] describes the height of the i^th obstacle.\nFor every index i between 0 and n - 1 (inclusive), find the length of the longest obstacle course in obstacles such that:\nYou choose any number of obstacles between 0 and i inclusive.\nYou must include the i^th obstacle in the course.\nYou must put the chosen obstacles in the same order as they appear in obstacles.\nEvery obstacle (except the first) is taller than or the same height as the obstacle immediately before it.\nReturn an array ans of length n, where ans[i] is the length of the longest obstacle course for index i as described above.", "examples": [{"full_text": "Example 1:\nInput: obstacles = [1,2,3,2]\nOutput: [1,2,3,3]\nExplanation: The longest valid obstacle course at each position is:\n- i = 0: [1], [1] has length 1.\n- i = 1: [1,2], [1,2] has length 2.\n- i = 2: [1,2,3], [1,2,3] has length 3.\n- i = 3: [1,2,3,2], [1,2,2] has length 3.", "input": "Input: obstacles = [1,2,3,2]", "output": "Output: [1,2,3,3]", "explanation": "Explanation: The longest valid obstacle course at each position is:\n- i = 0: [1], [1] has length 1.\n- i = 1: [1,2], [1,2] has length 2.\n- i = 2: [1,2,3], [1,2,3] has length 3.\n- i = 3: [1,2,3,2], [1,2,2] has length 3."}, {"full_text": "Example 2:\nInput: obstacles = [2,2,1]\nOutput: [1,2,1]\nExplanation: The longest valid obstacle course at each position is:\n- i = 0: [2], [2] has length 1.\n- i = 1: [2,2], [2,2] has length 2.\n- i = 2: [2,2,1], [1] has length 1.", "input": "Input: obstacles = [2,2,1]", "output": "Output: [1,2,1]", "explanation": "Explanation: The longest valid obstacle course at each position is:\n- i = 0: [2], [2] has length 1.\n- i = 1: [2,2], [2,2] has length 2.\n- i = 2: [2,2,1], [1] has length 1."}, {"full_text": "Example 3:\nInput: obstacles = [3,1,5,6,4,2]\nOutput: [1,1,2,3,2,2]\nExplanation: The longest valid obstacle course at each position is:\n- i = 0: [3], [3] has length 1.\n- i = 1: [3,1], [1] has length 1.\n- i = 2: [3,1,5], [3,5] has length 2. [1,5] is also valid.\n- i = 3: [3,1,5,6], [3,5,6] has length 3. [1,5,6] is also valid.\n- i = 4: [3,1,5,6,4], [3,4] has length 2. [1,4] is also valid.\n- i = 5: [3,1,5,6,4,2], [1,2] has length 2.", "input": "Input: obstacles = [3,1,5,6,4,2]", "output": "Output: [1,1,2,3,2,2]", "explanation": "Explanation: The longest valid obstacle course at each position is:\n- i = 0: [3], [3] has length 1.\n- i = 1: [3,1], [1] has length 1.\n- i = 2: [3,1,5], [3,5] has length 2. [1,5] is also valid.\n- i = 3: [3,1,5,6], [3,5,6] has length 3. [1,5,6] is also valid.\n- i = 4: [3,1,5,6,4], [3,4] has length 2. [1,4] is also valid.\n- i = 5: [3,1,5,6,4,2], [1,2] has length 2."}], "constraints": "Constraints:\nn == obstacles.length\n1 <= n <= 10^5\n1 <= obstacles[i] <= 10^7", "notes": ""}, "1960": {"label": "Hard", "title": "Maximum Product of the Length of Two Palindromic Substrings", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.28550000000000003, "total_accepted": 1900.0, "total_submissions": 6500.0, "testcase_example": "'\"ababbb\"'", "body": "You are given a 0-indexed string s and are tasked with finding two non-intersecting palindromic substrings of odd length such that the product of their lengths is maximized.\nMore formally, you want to choose four integers i, j, k, l such that 0 <= i <= j < k <= l < s.length and both the substrings s[i...j] and s[k...l] are palindromes and have odd lengths. s[i...j] denotes a substring from index i to index j inclusive.\nReturn the maximum possible product of the lengths of the two non-intersecting palindromic substrings.\nA palindrome is a string that is the same forward and backward. A substring is a contiguous sequence of characters in a string.", "examples": [{"full_text": "Example 1:\nInput: s = \"ababbb\"\nOutput: 9\nExplanation: Substrings \"aba\" and \"bbb\" are palindromes with odd length. product = 3 * 3 = 9.", "input": "Input: s = \"ababbb\"", "output": "Output: 9", "explanation": "Explanation: Substrings \"aba\" and \"bbb\" are palindromes with odd length. product = 3 * 3 = 9."}, {"full_text": "Example 2:\nInput: s = \"zaaaxbbby\"\nOutput: 9\nExplanation: Substrings \"aaa\" and \"bbb\" are palindromes with odd length. product = 3 * 3 = 9.", "input": "Input: s = \"zaaaxbbby\"", "output": "Output: 9", "explanation": "Explanation: Substrings \"aaa\" and \"bbb\" are palindromes with odd length. product = 3 * 3 = 9."}], "constraints": "Constraints:\n2 <= s.length <= 10^5\ns consists of lowercase English letters.", "notes": ""}, "1955": {"label": "Hard", "title": "Count Number of Special Subsequences", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5077, "total_accepted": 7000.0, "total_submissions": 13800.0, "testcase_example": "'[0,1,2,2]'", "body": "A sequence is special if it consists of a positive number of 0s, followed by a positive number of 1s, then a positive number of 2s.\nFor example, [0,1,2] and [0,0,1,1,1,2] are special.\nIn contrast, [2,1,0], [1], and [0,1,2,0] are not special.\nGiven an array nums (consisting of only integers 0, 1, and 2), return the number of different subsequences that are special. Since the answer may be very large, return it modulo 10^9 + 7.\nA subsequence of an array is a sequence that can be derived from the array by deleting some or no elements without changing the order of the remaining elements. Two subsequences are different if the set of indices chosen are different.", "examples": [{"full_text": "Example 1:\nInput: nums = [0,1,2,2]\nOutput: 3\nExplanation: The special subsequences are bolded [0,1,2,2], [0,1,2,2], and [0,1,2,2].", "input": "Input: nums = [0,1,2,2]", "output": "Output: 3", "explanation": "Explanation: The special subsequences are bolded [0,1,2,2], [0,1,2,2], and [0,1,2,2]."}, {"full_text": "Example 2:\nInput: nums = [2,2,0,0]\nOutput: 0\nExplanation: There are no special subsequences in [2,2,0,0].", "input": "Input: nums = [2,2,0,0]", "output": "Output: 0", "explanation": "Explanation: There are no special subsequences in [2,2,0,0]."}, {"full_text": "Example 3:\nInput: nums = [0,1,2,0,1,2]\nOutput: 7\nExplanation: The special subsequences are bolded:\n- [0,1,2,0,1,2]\n- [0,1,2,0,1,2]\n- [0,1,2,0,1,2]\n- [0,1,2,0,1,2]\n- [0,1,2,0,1,2]\n- [0,1,2,0,1,2]\n- [0,1,2,0,1,2]", "input": "Input: nums = [0,1,2,0,1,2]", "output": "Output: 7", "explanation": "Explanation: The special subsequences are bolded:\n- [0,1,2,0,1,2]\n- [0,1,2,0,1,2]\n- [0,1,2,0,1,2]\n- [0,1,2,0,1,2]\n- [0,1,2,0,1,2]\n- [0,1,2,0,1,2]\n- [0,1,2,0,1,2]"}], "constraints": "Constraints:\n1 <= nums.length <= 10^5\n0 <= nums[i] <= 2", "notes": ""}, "1948": {"label": "Hard", "title": "Delete Duplicate Folders in System", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5929, "total_accepted": 4000.0, "total_submissions": 6700.0, "testcase_example": "'[[\"a\"],[\"c\"],[\"d\"],[\"a\",\"b\"],[\"c\",\"b\"],[\"d\",\"a\"]]'", "body": "Due to a bug, there are many duplicate folders in a file system. You are given a 2D array paths, where paths[i] is an array representing an absolute path to the i^th folder in the file system.\nFor example, [\"one\", \"two\", \"three\"] represents the path \"/one/two/three\".\nTwo folders (not necessarily on the same level) are identical if they contain the same non-empty set of identical subfolders and underlying subfolder structure. The folders do not need to be at the root level to be identical. If two or more folders are identical, then mark the folders as well as all their subfolders.\nFor example, folders \"/a\" and \"/b\" in the file structure below are identical. They (as well as their subfolders) should all be marked:\n\n/a\n/a/x\n/a/x/y\n/a/z\n/b\n/b/x\n/b/x/y\n/b/z\n\n\nHowever, if the file structure also included the path \"/b/w\", then the folders \"/a\" and \"/b\" would not be identical. Note that \"/a/x\" and \"/b/x\" would still be considered identical even with the added folder.\nOnce all the identical folders and their subfolders have been marked, the file system will delete all of them. The file system only runs the deletion once, so any folders that become identical after the initial deletion are not deleted.\nReturn the 2D array ans containing the paths of the remaining folders after deleting all the marked folders. The paths may be returned in any order.", "examples": [{"full_text": "Example 1:\nInput: paths = [[\"a\"],[\"c\"],[\"d\"],[\"a\",\"b\"],[\"c\",\"b\"],[\"d\",\"a\"]]\nOutput: [[\"d\"],[\"d\",\"a\"]]\nExplanation: The file structure is as shown.\nFolders \"/a\" and \"/c\" (and their subfolders) are marked for deletion because they both contain an empty\nfolder named \"b\".", "input": "Input: paths = [[\"a\"],[\"c\"],[\"d\"],[\"a\",\"b\"],[\"c\",\"b\"],[\"d\",\"a\"]]", "output": "Output: [[\"d\"],[\"d\",\"a\"]]", "explanation": "Explanation: The file structure is as shown.\nFolders \"/a\" and \"/c\" (and their subfolders) are marked for deletion because they both contain an empty\nfolder named \"b\"."}, {"full_text": "Example 2:\nInput: paths = [[\"a\"],[\"c\"],[\"a\",\"b\"],[\"c\",\"b\"],[\"a\",\"b\",\"x\"],[\"a\",\"b\",\"x\",\"y\"],[\"w\"],[\"w\",\"y\"]]\nOutput: [[\"c\"],[\"c\",\"b\"],[\"a\"],[\"a\",\"b\"]]\nExplanation: The file structure is as shown.\nFolders \"/a/b/x\" and \"/w\" (and their subfolders) are marked for deletion because they both contain an empty folder named \"y\".\nNote that folders \"/a\" and \"/c\" are identical after the deletion, but they are not deleted because they were not marked beforehand.", "input": "Input: paths = [[\"a\"],[\"c\"],[\"a\",\"b\"],[\"c\",\"b\"],[\"a\",\"b\",\"x\"],[\"a\",\"b\",\"x\",\"y\"],[\"w\"],[\"w\",\"y\"]]", "output": "Output: [[\"c\"],[\"c\",\"b\"],[\"a\"],[\"a\",\"b\"]]", "explanation": "Explanation: The file structure is as shown.\nFolders \"/a/b/x\" and \"/w\" (and their subfolders) are marked for deletion because they both contain an empty folder named \"y\".\nNote that folders \"/a\" and \"/c\" are identical after the deletion, but they are not deleted because they were not marked beforehand."}, {"full_text": "Example 3:\nInput: paths = [[\"a\",\"b\"],[\"c\",\"d\"],[\"c\"],[\"a\"]]\nOutput: [[\"c\"],[\"c\",\"d\"],[\"a\"],[\"a\",\"b\"]]\nExplanation: All folders are unique in the file system.\nNote that the returned array can be in a different order as the order does not matter.", "input": "Input: paths = [[\"a\",\"b\"],[\"c\",\"d\"],[\"c\"],[\"a\"]]", "output": "Output: [[\"c\"],[\"c\",\"d\"],[\"a\"],[\"a\",\"b\"]]", "explanation": "Explanation: All folders are unique in the file system.\nNote that the returned array can be in a different order as the order does not matter."}], "constraints": "Constraints:\n1 <= paths.length <= 2 * 10^4\n1 <= paths[i].length <= 500\n1 <= paths[i][j].length <= 10\n1 <= sum(paths[i][j].length) <= 2 * 10^5\npath[i][j] consists of lowercase English letters.\nNo two paths lead to the same folder.\nFor any folder not at the root level, its parent folder will also be in the input.", "notes": ""}, "1944": {"label": "Hard", "title": "Number of Visible People in a Queue", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6917, "total_accepted": 14000.0, "total_submissions": 20200.0, "testcase_example": "'[10,6,8,5,11,9]'", "body": "There are n people standing in a queue, and they numbered from 0 to n - 1 in left to right order. You are given an array heights of distinct integers where heights[i] represents the height of the i^th person.\nA person can see another person to their right in the queue if everybody in between is shorter than both of them. More formally, the i^th person can see the j^th person if i < j and min(heights[i], heights[j]) > max(heights[i+1], heights[i+2], ..., heights[j-1]).\nReturn an array answer of length n where answer[i] is the number of people the i^th person can see to their right in the queue.", "examples": [{"full_text": "Example 1:\nInput: heights = [10,6,8,5,11,9]\nOutput: [3,1,2,1,1,0]\nExplanation:\nPerson 0 can see person 1, 2, and 4.\nPerson 1 can see person 2.\nPerson 2 can see person 3 and 4.\nPerson 3 can see person 4.\nPerson 4 can see person 5.\nPerson 5 can see no one since nobody is to the right of them.", "input": "Input: heights = [10,6,8,5,11,9]", "output": "Output: [3,1,2,1,1,0]", "explanation": "Explanation:\nPerson 0 can see person 1, 2, and 4.\nPerson 1 can see person 2.\nPerson 2 can see person 3 and 4.\nPerson 3 can see person 4.\nPerson 4 can see person 5.\nPerson 5 can see no one since nobody is to the right of them."}, {"full_text": "Example 2:\nInput: heights = [5,1,2,3,10]\nOutput: [4,1,1,1,0]", "input": "Input: heights = [5,1,2,3,10]", "output": "Output: [4,1,1,1,0]", "explanation": ""}], "constraints": "Constraints:\nn == heights.length\n1 <= n <= 10^5\n1 <= heights[i] <= 10^5\nAll the values of heights are unique.", "notes": ""}, "1938": {"label": "Hard", "title": "Maximum Genetic Difference Query", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.39409999999999995, "total_accepted": 3100.0, "total_submissions": 7900.0, "testcase_example": "'[-1,0,1,1]\\n[[0,2],[3,2],[2,5]]'", "body": "There is a rooted tree consisting of n nodes numbered 0 to n - 1. Each node's number denotes its unique genetic value (i.e. the genetic value of node x is x). The genetic difference between two genetic values is defined as the bitwise-XOR of their values. You are given the integer array parents, where parents[i] is the parent for node i. If node x is the root of the tree, then parents[x] == -1.\nYou are also given the array queries where queries[i] = [nodei, vali]. For each query i, find the maximum genetic difference between vali and pi, where pi is the genetic value of any node that is on the path between nodei and the root (including nodei and the root). More formally, you want to maximize vali XOR pi.\nReturn an array ans where ans[i] is the answer to the i^th query.", "examples": [{"full_text": "Example 1:\nInput: parents = [-1,0,1,1], queries = [[0,2],[3,2],[2,5]]\nOutput: [2,3,7]\nExplanation: The queries are processed as follows:\n- [0,2]: The node with the maximum genetic difference is 0, with a difference of 2 XOR 0 = 2.\n- [3,2]: The node with the maximum genetic difference is 1, with a difference of 2 XOR 1 = 3.\n- [2,5]: The node with the maximum genetic difference is 2, with a difference of 5 XOR 2 = 7.", "input": "Input: parents = [-1,0,1,1], queries = [[0,2],[3,2],[2,5]]", "output": "Output: [2,3,7]", "explanation": "Explanation: The queries are processed as follows:\n- [0,2]: The node with the maximum genetic difference is 0, with a difference of 2 XOR 0 = 2.\n- [3,2]: The node with the maximum genetic difference is 1, with a difference of 2 XOR 1 = 3.\n- [2,5]: The node with the maximum genetic difference is 2, with a difference of 5 XOR 2 = 7."}, {"full_text": "Example 2:\nInput: parents = [3,7,-1,2,0,7,0,2], queries = [[4,6],[1,15],[0,5]]\nOutput: [6,14,7]\nExplanation: The queries are processed as follows:\n- [4,6]: The node with the maximum genetic difference is 0, with a difference of 6 XOR 0 = 6.\n- [1,15]: The node with the maximum genetic difference is 1, with a difference of 15 XOR 1 = 14.\n- [0,5]: The node with the maximum genetic difference is 2, with a difference of 5 XOR 2 = 7.", "input": "Input: parents = [3,7,-1,2,0,7,0,2], queries = [[4,6],[1,15],[0,5]]", "output": "Output: [6,14,7]", "explanation": "Explanation: The queries are processed as follows:\n- [4,6]: The node with the maximum genetic difference is 0, with a difference of 6 XOR 0 = 6.\n- [1,15]: The node with the maximum genetic difference is 1, with a difference of 15 XOR 1 = 14.\n- [0,5]: The node with the maximum genetic difference is 2, with a difference of 5 XOR 2 = 7."}], "constraints": "Constraints:\n2 <= parents.length <= 10^5\n0 <= parents[i] <= parents.length - 1 for every node i that is not the root.\nparents[root] == -1\n1 <= queries.length <= 3 * 10^4\n0 <= nodei <= parents.length - 1\n0 <= vali <= 2 * 10^5", "notes": ""}, "1932": {"label": "Hard", "title": "Merge BSTs to Create Single BST", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.34840000000000004, "total_accepted": 3800.0, "total_submissions": 11000.0, "testcase_example": "'[[2,1],[3,2,5],[5,4]]'", "body": "You are given n BST (binary search tree) root nodes for n separate BSTs stored in an array trees (0-indexed). Each BST in trees has at most 3 nodes, and no two roots have the same value. In one operation, you can:\nSelect two distinct indices i and j such that the value stored at one of the leaves of trees[i] is equal to the root value of trees[j].\nReplace the leaf node in trees[i] with trees[j].\nRemove trees[j] from trees.\nReturn the root of the resulting BST if it is possible to form a valid BST after performing n - 1 operations, or null if it is impossible to create a valid BST.\nA BST (binary search tree) is a binary tree where each node satisfies the following property:\nEvery node in the node's left subtree has a value\nstrictly less\nthan the node's value.\nEvery node in the node's right subtree has a value\nstrictly greater\nthan the node's value.\nA leaf is a node that has no children.", "examples": [{"full_text": "Example 1:\nInput: trees = [[2,1],[3,2,5],[5,4]]\nOutput: [3,2,5,1,null,4]\nExplanation:\nIn the first operation, pick i=1 and j=0, and merge trees[0] into trees[1].\nDelete trees[0], so trees = [[3,2,5,1],[5,4]].\nIn the second operation, pick i=0 and j=1, and merge trees[1] into trees[0].\nDelete trees[1], so trees = [[3,2,5,1,null,4]].\nThe resulting tree, shown above, is a valid BST, so return its root.", "input": "Input: trees = [[2,1],[3,2,5],[5,4]]", "output": "Output: [3,2,5,1,null,4]", "explanation": "Explanation:\nIn the first operation, pick i=1 and j=0, and merge trees[0] into trees[1].\nDelete trees[0], so trees = [[3,2,5,1],[5,4]].\nIn the second operation, pick i=0 and j=1, and merge trees[1] into trees[0].\nDelete trees[1], so trees = [[3,2,5,1,null,4]].\nThe resulting tree, shown above, is a valid BST, so return its root."}, {"full_text": "Example 2:\nInput: trees = [[5,3,8],[3,2,6]]\nOutput: []\nExplanation:\nPick i=0 and j=1 and merge trees[1] into trees[0].\nDelete trees[1], so trees = [[5,3,8,2,6]].\nThe resulting tree is shown above. This is the only valid operation that can be performed, but the resulting tree is not a valid BST, so return null.", "input": "Input: trees = [[5,3,8],[3,2,6]]", "output": "Output: []", "explanation": "Explanation:\nPick i=0 and j=1 and merge trees[1] into trees[0].\nDelete trees[1], so trees = [[5,3,8,2,6]].\nThe resulting tree is shown above. This is the only valid operation that can be performed, but the resulting tree is not a valid BST, so return null."}, {"full_text": "Example 3:\nInput: trees = [[5,4],[3]]\nOutput: []\nExplanation: It is impossible to perform any operations.", "input": "Input: trees = [[5,4],[3]]", "output": "Output: []", "explanation": "Explanation: It is impossible to perform any operations."}], "constraints": "Constraints:\nn == trees.length\n1 <= n <= 5 * 10^4\nThe number of nodes in each tree is in the range [1, 3].\nEach node in the input may have children but no grandchildren.\nNo two roots of trees have the same value.\nAll the trees in the input are valid BSTs.\n1 <= TreeNode.val <= 5 * 10^4.", "notes": ""}, "1931": {"label": "Hard", "title": "Painting a Grid With Three Different Colors", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5664, "total_accepted": 5500.0, "total_submissions": 9600.0, "testcase_example": "'1\\n1'", "body": "You are given two integers m and n. Consider an m x n grid where each cell is initially white. You can paint each cell red, green, or blue. All cells must be painted.\nReturn the number of ways to color the grid with no two adjacent cells having the same color. Since the answer can be very large, return it modulo 10^9 + 7.", "examples": [{"full_text": "Example 1:\nInput: m = 1, n = 1\nOutput: 3\nExplanation: The three possible colorings are shown in the image above.", "input": "Input: m = 1, n = 1", "output": "Output: 3", "explanation": "Explanation: The three possible colorings are shown in the image above."}, {"full_text": "Example 2:\nInput: m = 1, n = 2\nOutput: 6\nExplanation: The six possible colorings are shown in the image above.", "input": "Input: m = 1, n = 2", "output": "Output: 6", "explanation": "Explanation: The six possible colorings are shown in the image above."}, {"full_text": "Example 3:\nInput: m = 5, n = 5\nOutput: 580986", "input": "Input: m = 5, n = 5", "output": "Output: 580986", "explanation": ""}], "constraints": "Constraints:\n1 <= m <= 5\n1 <= n <= 1000", "notes": ""}, "1928": {"label": "Hard", "title": "Minimum Cost to Reach Destination in Time", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.37020000000000003, "total_accepted": 9000.0, "total_submissions": 24200.0, "testcase_example": "'30\\n[[0,1,10],[1,2,10],[2,5,10],[0,3,1],[3,4,10],[4,5,15]]\\n[5,1,2,20,20,3]'", "body": "There is a country of n cities numbered from 0 to n - 1 where all the cities are connected by bi-directional roads. The roads are represented as a 2D integer array edges where edges[i] = [xi, yi, timei] denotes a road between cities xi and yi that takes timei minutes to travel. There may be multiple roads of differing travel times connecting the same two cities, but no road connects a city to itself.\nEach time you pass through a city, you must pay a passing fee. This is represented as a 0-indexed integer array passingFees of length n where passingFees[j] is the amount of dollars you must pay when you pass through city j.\nIn the beginning, you are at city 0 and want to reach city n - 1 in maxTime minutes or less. The cost of your journey is the summation of passing fees for each city that you passed through at some moment of your journey (including the source and destination cities).\nGiven maxTime, edges, and passingFees, return the minimum cost to complete your journey, or -1 if you cannot complete it within maxTime minutes.", "examples": [{"full_text": "Example 1:\nInput: maxTime = 30, edges = [[0,1,10],[1,2,10],[2,5,10],[0,3,1],[3,4,10],[4,5,15]], passingFees = [5,1,2,20,20,3]\nOutput: 11\nExplanation: The path to take is 0 -> 1 -> 2 -> 5, which takes 30 minutes and has $11 worth of passing fees.", "input": "Input: maxTime = 30, edges = [[0,1,10],[1,2,10],[2,5,10],[0,3,1],[3,4,10],[4,5,15]], passingFees = [5,1,2,20,20,3]", "output": "Output: 11", "explanation": "Explanation: The path to take is 0 -> 1 -> 2 -> 5, which takes 30 minutes and has $11 worth of passing fees."}, {"full_text": "Example 2:\nInput: maxTime = 29, edges = [[0,1,10],[1,2,10],[2,5,10],[0,3,1],[3,4,10],[4,5,15]], passingFees = [5,1,2,20,20,3]\nOutput: 48\nExplanation: The path to take is 0 -> 3 -> 4 -> 5, which takes 26 minutes and has $48 worth of passing fees.\nYou cannot take path 0 -> 1 -> 2 -> 5 since it would take too long.", "input": "Input: maxTime = 29, edges = [[0,1,10],[1,2,10],[2,5,10],[0,3,1],[3,4,10],[4,5,15]], passingFees = [5,1,2,20,20,3]", "output": "Output: 48", "explanation": "Explanation: The path to take is 0 -> 3 -> 4 -> 5, which takes 26 minutes and has $48 worth of passing fees.\nYou cannot take path 0 -> 1 -> 2 -> 5 since it would take too long."}, {"full_text": "Example 3:\nInput: maxTime = 25, edges = [[0,1,10],[1,2,10],[2,5,10],[0,3,1],[3,4,10],[4,5,15]], passingFees = [5,1,2,20,20,3]\nOutput: -1\nExplanation: There is no way to reach city 5 from city 0 within 25 minutes.", "input": "Input: maxTime = 25, edges = [[0,1,10],[1,2,10],[2,5,10],[0,3,1],[3,4,10],[4,5,15]], passingFees = [5,1,2,20,20,3]", "output": "Output: -1", "explanation": "Explanation: There is no way to reach city 5 from city 0 within 25 minutes."}], "constraints": "Constraints:\n1 <= maxTime <= 1000\nn == passingFees.length\n2 <= n <= 1000\nn - 1 <= edges.length <= 1000\n0 <= xi, yi <= n - 1\n1 <= timei <= 1000\n1 <= passingFees[j] <= 1000\nThe graph may contain multiple edges between two nodes.\nThe graph does not contain self loops.", "notes": ""}, "1923": {"label": "Hard", "title": "Longest Common Subpath", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.2796, "total_accepted": 4300.0, "total_submissions": 15300.0, "testcase_example": "'5\\n[[0,1,2,3,4],[2,3,4],[4,0,1,2,3]]'", "body": "There is a country of n cities numbered from 0 to n - 1. In this country, there is a road connecting every pair of cities.\nThere are m friends numbered from 0 to m - 1 who are traveling through the country. Each one of them will take a path consisting of some cities. Each path is represented by an integer array that contains the visited cities in order. The path may contain a city more than once, but the same city will not be listed consecutively.\nGiven an integer n and a 2D integer array paths where paths[i] is an integer array representing the path of the i^th friend, return the length of the longest common subpath that is shared by every friend's path, or 0 if there is no common subpath at all.\nA subpath of a path is a contiguous sequence of cities within that path.", "examples": [{"full_text": "Example 1:\nInput: n = 5, paths = [[0,1,2,3,4],\n[2,3,4],\n[4,0,1,2,3]]\nOutput: 2\nExplanation: The longest common subpath is [2,3].", "input": "Input: n = 5, paths = [[0,1,2,3,4],\n[2,3,4],\n[4,0,1,2,3]]", "output": "Output: 2", "explanation": "Explanation: The longest common subpath is [2,3]."}, {"full_text": "Example 2:\nInput: n = 3, paths = [[0],[1],[2]]\nOutput: 0\nExplanation: There is no common subpath shared by the three paths.", "input": "Input: n = 3, paths = [[0],[1],[2]]", "output": "Output: 0", "explanation": "Explanation: There is no common subpath shared by the three paths."}, {"full_text": "Example 3:\nInput: n = 5, paths = [[0,1,2,3,4],\n[4,3,2,1,0]]\nOutput: 1\nExplanation: The possible longest common subpaths are [0], [1], [2], [3], and [4]. All have a length of 1.", "input": "Input: n = 5, paths = [[0,1,2,3,4],\n[4,3,2,1,0]]", "output": "Output: 1", "explanation": "Explanation: The possible longest common subpaths are [0], [1], [2], [3], and [4]. All have a length of 1."}], "constraints": "Constraints:\n1 <= n <= 10^5\nm == paths.length\n2 <= m <= 10^5\nsum(paths[i].length) <= 10^5\n0 <= paths[i][j] < n\nThe same city is not listed multiple times consecutively in paths[i].", "notes": ""}, "1916": {"label": "Hard", "title": "Count Ways to Build Rooms in an Ant Colony", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.483, "total_accepted": 3400.0, "total_submissions": 7100.0, "testcase_example": "'[-1,0,1]'", "body": "You are an ant tasked with adding n new rooms numbered 0 to n-1 to your colony. You are given the expansion plan as a 0-indexed integer array of length n, prevRoom, where prevRoom[i] indicates that you must build room prevRoom[i] before building room i, and these two rooms must be connected directly. Room 0 is already built, so prevRoom[0] = -1. The expansion\nplan is given such that once all the rooms are built, every room will be reachable from room 0.\nYou can only build one room at a time, and you can travel freely between rooms you have already built only if they are connected.\nYou can choose to build any room as long as its previous room\nis already built.\nReturn the number of different orders you can build all the rooms in. Since the answer may be large, return it modulo 10^9 + 7.", "examples": [{"full_text": "Example 1:\nInput: prevRoom = [-1,0,1]\nOutput: 1\nExplanation:\nThere is only one way to build the additional rooms: 0 \u2192 1 \u2192 2", "input": "Input: prevRoom = [-1,0,1]", "output": "Output: 1", "explanation": "Explanation:\nThere is only one way to build the additional rooms: 0 \u2192 1 \u2192 2"}, {"full_text": "Example 2:\nInput: prevRoom = [-1,0,0,1,2]\nOutput: 6\nExplanation:\nThe 6 ways are:\n0 \u2192 1 \u2192 3 \u2192 2 \u2192 4\n0 \u2192 2 \u2192 4 \u2192 1 \u2192 3\n0 \u2192 1 \u2192 2 \u2192 3 \u2192 4\n0 \u2192 1 \u2192 2 \u2192 4 \u2192 3\n0 \u2192 2 \u2192 1 \u2192 3 \u2192 4\n0 \u2192 2 \u2192 1 \u2192 4 \u2192 3", "input": "Input: prevRoom = [-1,0,0,1,2]", "output": "Output: 6", "explanation": "Explanation:\nThe 6 ways are:\n0 \u2192 1 \u2192 3 \u2192 2 \u2192 4\n0 \u2192 2 \u2192 4 \u2192 1 \u2192 3\n0 \u2192 1 \u2192 2 \u2192 3 \u2192 4\n0 \u2192 1 \u2192 2 \u2192 4 \u2192 3\n0 \u2192 2 \u2192 1 \u2192 3 \u2192 4\n0 \u2192 2 \u2192 1 \u2192 4 \u2192 3"}], "constraints": "Constraints:\nn == prevRoom.length\n2 <= n <= 10^5\nprevRoom[0] == -1\n0 <= prevRoom[i] < n for all 1 <= i < n\nEvery room is reachable from room 0 once all the rooms are built.", "notes": ""}, "1912": {"label": "Hard", "title": "Design Movie Rental System", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4279, "total_accepted": 3600.0, "total_submissions": 8500.0, "testcase_example": "'[\"MovieRentingSystem\",\"search\",\"rent\",\"rent\",\"report\",\"drop\",\"search\"]\\n' +\n  '[[3,[[0,1,5],[0,2,6],[0,3,7],[1,1,4],[1,2,7],[2,1,5]]],[1],[0,1],[1,2],[],[1,2],[2]]'", "body": "You have a movie renting company consisting of n shops. You want to implement a renting system that supports searching for, booking, and returning movies. The system should also support generating a report of the currently rented movies.\nEach movie is given as a 2D integer array entries where entries[i] = [shopi, moviei, pricei] indicates that there is a copy of movie moviei at shop shopi with a rental price of pricei. Each shop carries at most one copy of a movie moviei.\nThe system should support the following functions:\nSearch: Finds the cheapest 5 shops that have an unrented copy of a given movie. The shops should be sorted by price in ascending order, and in case of a tie, the one with the smaller shopi should appear first. If there are less than 5 matching shops, then all of them should be returned. If no shop has an unrented copy, then an empty list should be returned.\nRent: Rents an unrented copy of a given movie from a given shop.\nDrop: Drops off a previously rented copy of a given movie at a given shop.\nReport: Returns the cheapest 5 rented movies (possibly of the same movie ID) as a 2D list res where res[j] = [shopj, moviej] describes that the j^th cheapest rented movie moviej was rented from the shop shopj. The movies in res should be sorted by price in ascending order, and in case of a tie, the one with the smaller shopj should appear first, and if there is still tie, the one with the smaller moviej should appear first. If there are fewer than 5 rented movies, then all of them should be returned. If no movies are currently being rented, then an empty list should be returned.\nImplement the MovieRentingSystem class:\nMovieRentingSystem(int n, int[][] entries) Initializes the MovieRentingSystem object with n shops and the movies in entries.\nList<Integer> search(int movie) Returns a list of shops that have an unrented copy of the given movie as described above.\nvoid rent(int shop, int movie) Rents the given movie from the given shop.\nvoid drop(int shop, int movie) Drops off a previously rented movie at the given shop.\nList<List<Integer>> report() Returns a list of cheapest rented movies as described above.\nNote: The test cases will be generated such that rent will only be called if the shop has an unrented copy of the movie, and drop will only be called if the shop had previously rented out the movie.", "examples": [{"full_text": "Example 1:\nInput\n[\"MovieRentingSystem\", \"search\", \"rent\", \"rent\", \"report\", \"drop\", \"search\"]\n[[3, [[0, 1, 5], [0, 2, 6], [0, 3, 7], [1, 1, 4], [1, 2, 7], [2, 1, 5]]], [1], [0, 1], [1, 2], [], [1, 2], [2]]\nOutput\n[null, [1, 0, 2], null, null, [[0, 1], [1, 2]], null, [0, 1]]\nExplanation\nMovieRentingSystem movieRentingSystem = new MovieRentingSystem(3, [[0, 1, 5], [0, 2, 6], [0, 3, 7], [1, 1, 4], [1, 2, 7], [2, 1, 5]]);\nmovieRentingSystem.search(1); // return [1, 0, 2], Movies of ID 1 are unrented at shops 1, 0, and 2. Shop 1 is cheapest; shop 0 and 2 are the same price, so order by shop number.\nmovieRentingSystem.rent(0, 1); // Rent movie 1 from shop 0. Unrented movies at shop 0 are now [2,3].\nmovieRentingSystem.rent(1, 2); // Rent movie 2 from shop 1. Unrented movies at shop 1 are now [1].\nmovieRentingSystem.report(); // return [[0, 1], [1, 2]]. Movie 1 from shop 0 is cheapest, followed by movie 2 from shop 1.\nmovieRentingSystem.drop(1, 2); // Drop off movie 2 at shop 1. Unrented movies at shop 1 are now [1,2].\nmovieRentingSystem.search(2); // return [0, 1]. Movies of ID 2 are unrented at shops 0 and 1. Shop 0 is cheapest, followed by shop 1.", "input": "Input\n[\"MovieRentingSystem\", \"search\", \"rent\", \"rent\", \"report\", \"drop\", \"search\"]\n[[3, [[0, 1, 5], [0, 2, 6], [0, 3, 7], [1, 1, 4], [1, 2, 7], [2, 1, 5]]], [1], [0, 1], [1, 2], [], [1, 2], [2]]", "output": "Output\n[null, [1, 0, 2], null, null, [[0, 1], [1, 2]], null, [0, 1]]", "explanation": "Explanation\nMovieRentingSystem movieRentingSystem = new MovieRentingSystem(3, [[0, 1, 5], [0, 2, 6], [0, 3, 7], [1, 1, 4], [1, 2, 7], [2, 1, 5]]);\nmovieRentingSystem.search(1); // return [1, 0, 2], Movies of ID 1 are unrented at shops 1, 0, and 2. Shop 1 is cheapest; shop 0 and 2 are the same price, so order by shop number.\nmovieRentingSystem.rent(0, 1); // Rent movie 1 from shop 0. Unrented movies at shop 0 are now [2,3].\nmovieRentingSystem.rent(1, 2); // Rent movie 2 from shop 1. Unrented movies at shop 1 are now [1].\nmovieRentingSystem.report(); // return [[0, 1], [1, 2]]. Movie 1 from shop 0 is cheapest, followed by movie 2 from shop 1.\nmovieRentingSystem.drop(1, 2); // Drop off movie 2 at shop 1. Unrented movies at shop 1 are now [1,2].\nmovieRentingSystem.search(2); // return [0, 1]. Movies of ID 2 are unrented at shops 0 and 1. Shop 0 is cheapest, followed by shop 1."}], "constraints": "Constraints:\n1 <= n <= 3 * 10^5\n1 <= entries.length <= 10^5\n0 <= shopi < n\n1 <= moviei, pricei <= 10^4\nEach shop carries at most one copy of a movie moviei.\nAt most 10^5 calls in total will be made to search, rent, drop and report.", "notes": ""}, "1900": {"label": "Hard", "title": "The Earliest and Latest Rounds Where Players Compete", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5143, "total_accepted": 3700.0, "total_submissions": 7200.0, "testcase_example": "'11\\n2\\n4'", "body": "There is a tournament where n players are participating. The players are standing in a single row and are numbered from 1 to n based on their initial standing position (player 1 is the first player in the row, player 2 is the second player in the row, etc.).\nThe tournament consists of multiple rounds (starting from round number 1). In each round, the i^th player from the front of the row competes against the i^th player from the end of the row, and the winner advances to the next round. When the number of players is odd for the current round, the player in the middle automatically advances to the next round.\nFor example, if the row consists of players 1, 2, 4, 6, 7\n\nPlayer 1 competes against player 7.\nPlayer 2 competes against player 6.\nPlayer 4 automatically advances to the next round.\n\n\nAfter each round is over, the winners are lined back up in the row based on the original ordering assigned to them initially (ascending order).\nThe players numbered firstPlayer and secondPlayer are the best in the tournament. They can win against any other player before they compete against each other. If any two other players compete against each other, either of them might win, and thus you may choose the outcome of this round.\nGiven the integers n, firstPlayer, and secondPlayer, return an integer array containing two values, the earliest possible round number and the\nlatest possible round number in which these two players will compete against each other, respectively.", "examples": [{"full_text": "Example 1:\nInput: n = 11, firstPlayer = 2, secondPlayer = 4\nOutput: [3,4]\nExplanation:\nOne possible scenario which leads to the earliest round number:\nFirst round: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11\nSecond round: 2, 3, 4, 5, 6, 11\nThird round: 2, 3, 4\nOne possible scenario which leads to the latest round number:\nFirst round: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11\nSecond round: 1, 2, 3, 4, 5, 6\nThird round: 1, 2, 4\nFourth round: 2, 4", "input": "Input: n = 11, firstPlayer = 2, secondPlayer = 4", "output": "Output: [3,4]", "explanation": "Explanation:\nOne possible scenario which leads to the earliest round number:\nFirst round: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11\nSecond round: 2, 3, 4, 5, 6, 11\nThird round: 2, 3, 4\nOne possible scenario which leads to the latest round number:\nFirst round: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11\nSecond round: 1, 2, 3, 4, 5, 6\nThird round: 1, 2, 4\nFourth round: 2, 4"}, {"full_text": "Example 2:\nInput: n = 5, firstPlayer = 1, secondPlayer = 5\nOutput: [1,1]\nExplanation: The players numbered 1 and 5 compete in the first round.\nThere is no way to make them compete in any other round.", "input": "Input: n = 5, firstPlayer = 1, secondPlayer = 5", "output": "Output: [1,1]", "explanation": "Explanation: The players numbered 1 and 5 compete in the first round.\nThere is no way to make them compete in any other round."}], "constraints": "Constraints:\n2 <= n <= 28\n1 <= firstPlayer < secondPlayer <= n", "notes": ""}, "1896": {"label": "Hard", "title": "Minimum Cost to Change the Final Value of Expression", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5285, "total_accepted": 2300.0, "total_submissions": 4400.0, "testcase_example": "'\"1&(0|1)\"'", "body": "You are given a valid boolean expression as a string expression consisting of the characters '1','0','&' (bitwise AND operator),'|' (bitwise OR operator),'(', and ')'.\nFor example, \"()1|1\" and \"(1)&()\" are not valid while \"1\", \"(((1))|(0))\", and \"1|(0&(1))\" are valid expressions.\nReturn the minimum cost to change the final value of the expression.\nFor example, if expression = \"1|1|(0&0)&1\", its value is 1|1|(0&0)&1 = 1|1|0&1 = 1|0&1 = 1&1 = 1. We want to apply operations so that the new expression evaluates to 0.\nThe cost of changing the final value of an expression is the number of operations performed on the expression. The types of operations are described as follows:\nTurn a '1' into a '0'.\nTurn a '0' into a '1'.\nTurn a '&' into a '|'.\nTurn a '|' into a '&'.\nNote: '&' does not take precedence over '|' in the order of calculation. Evaluate parentheses first, then in left-to-right order.", "examples": [{"full_text": "Example 1:\nInput: expression = \"1&(0|1)\"\nOutput: 1\nExplanation: We can turn \"1&(0|1)\" into \"1&(0&1)\" by changing the '|' to a '&' using 1 operation.\nThe new expression evaluates to 0.", "input": "Input: expression = \"1&(0|1)\"", "output": "Output: 1", "explanation": "Explanation: We can turn \"1&(0|1)\" into \"1&(0&1)\" by changing the '|' to a '&' using 1 operation.\nThe new expression evaluates to 0."}, {"full_text": "Example 2:\nInput: expression = \"(0&0)&(0&0&0)\"\nOutput: 3\nExplanation: We can turn \"(0&0)&(0&0&0)\" into \"(0|1)|(0&0&0)\" using 3 operations.\nThe new expression evaluates to 1.", "input": "Input: expression = \"(0&0)&(0&0&0)\"", "output": "Output: 3", "explanation": "Explanation: We can turn \"(0&0)&(0&0&0)\" into \"(0|1)|(0&0&0)\" using 3 operations.\nThe new expression evaluates to 1."}, {"full_text": "Example 3:\nInput: expression = \"(0|(1|0&1))\"\nOutput: 1\nExplanation: We can turn \"(0|(1|0&1))\" into \"(0|(0|0&1))\" using 1 operation.\nThe new expression evaluates to 0.", "input": "Input: expression = \"(0|(1|0&1))\"", "output": "Output: 1", "explanation": "Explanation: We can turn \"(0|(1|0&1))\" into \"(0|(0|0&1))\" using 1 operation.\nThe new expression evaluates to 0."}], "constraints": "Constraints:\n1 <= expression.length <= 10^5\nexpression\nonly contains\n'1','0','&','|','(', and\n')'\nAll parentheses\nare properly matched.\nThere will be no empty parentheses (i.e:\n\"()\"\nis not a substring of\nexpression).", "notes": ""}, "1889": {"label": "Hard", "title": "Minimum Space Wasted From Packaging", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.2986, "total_accepted": 7200.0, "total_submissions": 24200.0, "testcase_example": "'[2,3,5]\\n[[4,8],[2,8]]'", "body": "You have n packages that you are trying to place in boxes, one package in each box. There are m suppliers that each produce boxes of different sizes (with infinite supply). A package can be placed in a box if the size of the package is less than or equal to the size of the box.\nThe package sizes are given as an integer array packages, where packages[i] is the size of the i^th package. The suppliers are given as a 2D integer array boxes, where boxes[j] is an array of box sizes that the j^th supplier produces.\nYou want to choose a single supplier and use boxes from them such that the total wasted space is minimized. For each package in a box, we define the space wasted to be size of the box - size of the package. The total wasted space is the sum of the space wasted in all the boxes.\nFor example, if you have to fit packages with sizes [2,3,5] and the supplier offers boxes of sizes [4,8], you can fit the packages of size-2 and size-3 into two boxes of size-4 and the package with size-5 into a box of size-8. This would result in a waste of (4-2) + (4-3) + (8-5) = 6.\nReturn the minimum total wasted space by choosing the box supplier optimally, or -1 if it is impossible to fit all the packages inside boxes. Since the answer may be large, return it modulo 10^9 + 7.", "examples": [{"full_text": "Example 1:\nInput: packages = [2,3,5], boxes = [[4,8],[2,8]]\nOutput: 6\nExplanation: It is optimal to choose the first supplier, using two size-4 boxes and one size-8 box.\nThe total waste is (4-2) + (4-3) + (8-5) = 6.", "input": "Input: packages = [2,3,5], boxes = [[4,8],[2,8]]", "output": "Output: 6", "explanation": "Explanation: It is optimal to choose the first supplier, using two size-4 boxes and one size-8 box.\nThe total waste is (4-2) + (4-3) + (8-5) = 6."}, {"full_text": "Example 2:\nInput: packages = [2,3,5], boxes = [[1,4],[2,3],[3,4]]\nOutput: -1\nExplanation: There is no box that the package of size 5 can fit in.", "input": "Input: packages = [2,3,5], boxes = [[1,4],[2,3],[3,4]]", "output": "Output: -1", "explanation": "Explanation: There is no box that the package of size 5 can fit in."}, {"full_text": "Example 3:\nInput: packages = [3,5,8,10,11,12], boxes = [[12],[11,9],[10,5,14]]\nOutput: 9\nExplanation: It is optimal to choose the third supplier, using two size-5 boxes, two size-10 boxes, and two size-14 boxes.\nThe total waste is (5-3) + (5-5) + (10-8) + (10-10) + (14-11) + (14-12) = 9.", "input": "Input: packages = [3,5,8,10,11,12], boxes = [[12],[11,9],[10,5,14]]", "output": "Output: 9", "explanation": "Explanation: It is optimal to choose the third supplier, using two size-5 boxes, two size-10 boxes, and two size-14 boxes.\nThe total waste is (5-3) + (5-5) + (10-8) + (10-10) + (14-11) + (14-12) = 9."}], "constraints": "Constraints:\nn == packages.length\nm == boxes.length\n1 <= n <= 10^5\n1 <= m <= 10^5\n1 <= packages[i] <= 10^5\n1 <= boxes[j].length <= 10^5\n1 <= boxes[j][k] <= 10^5\nsum(boxes[j].length) <= 10^5\nThe elements in boxes[j] are distinct.", "notes": ""}, "1883": {"label": "Hard", "title": "Minimum Skips to Arrive at Meeting On Time", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3862, "total_accepted": 4300.0, "total_submissions": 11100.0, "testcase_example": "'[1,3,2]\\n4\\n2'", "body": "You are given an integer hoursBefore, the number of hours you have to travel to your meeting. To arrive at your meeting, you have to travel through n roads. The road lengths are given as an integer array dist of length n, where dist[i] describes the length of the i^th road in kilometers. In addition, you are given an integer speed, which is the speed (in km/h) you will travel at.\nAfter you travel road i, you must rest and wait for the next integer hour before you can begin traveling on the next road. Note that you do not have to rest after traveling the last road because you are already at the meeting.\nFor example, if traveling a road takes 1.4 hours, you must wait until the 2 hour mark before traveling the next road. If traveling a road takes exactly\n2\nhours, you do not need to wait.\nHowever, you are allowed to skip some rests to be able to arrive on time, meaning you do not need to wait for the next integer hour. Note that this means you may finish traveling future roads at different hour marks.\nFor example, suppose traveling the first road takes 1.4 hours and traveling the second road takes 0.6 hours. Skipping the rest after the first road will mean you finish traveling the second road right at the 2 hour mark, letting you start traveling the third road immediately.\nReturn the minimum number of skips required to arrive at the meeting on time, or -1 if it is impossible.", "examples": [{"full_text": "Example 1:\nInput: dist = [1,3,2], speed = 4, hoursBefore = 2\nOutput: 1\nExplanation:\nWithout skipping any rests, you will arrive in (1/4 + 3/4) + (3/4 + 1/4) + (2/4) = 2.5 hours.\nYou can skip the first rest to arrive in ((1/4 + 0) + (3/4 + 0)) + (2/4) = 1.5 hours.\nNote that the second rest is shortened because you finish traveling the second road at an integer hour due to skipping the first rest.", "input": "Input: dist = [1,3,2], speed = 4, hoursBefore = 2", "output": "Output: 1", "explanation": "Explanation:\nWithout skipping any rests, you will arrive in (1/4 + 3/4) + (3/4 + 1/4) + (2/4) = 2.5 hours.\nYou can skip the first rest to arrive in ((1/4 + 0) + (3/4 + 0)) + (2/4) = 1.5 hours.\nNote that the second rest is shortened because you finish traveling the second road at an integer hour due to skipping the first rest."}, {"full_text": "Example 2:\nInput: dist = [7,3,5,5], speed = 2, hoursBefore = 10\nOutput: 2\nExplanation:\nWithout skipping any rests, you will arrive in (7/2 + 1/2) + (3/2 + 1/2) + (5/2 + 1/2) + (5/2) = 11.5 hours.\nYou can skip the first and third rest to arrive in ((7/2 + 0) + (3/2 + 0)) + ((5/2 + 0) + (5/2)) = 10 hours.", "input": "Input: dist = [7,3,5,5], speed = 2, hoursBefore = 10", "output": "Output: 2", "explanation": "Explanation:\nWithout skipping any rests, you will arrive in (7/2 + 1/2) + (3/2 + 1/2) + (5/2 + 1/2) + (5/2) = 11.5 hours.\nYou can skip the first and third rest to arrive in ((7/2 + 0) + (3/2 + 0)) + ((5/2 + 0) + (5/2)) = 10 hours."}, {"full_text": "Example 3:\nInput: dist = [7,3,5,5], speed = 1, hoursBefore = 10\nOutput: -1\nExplanation: It is impossible to arrive at the meeting on time even if you skip all the rests.", "input": "Input: dist = [7,3,5,5], speed = 1, hoursBefore = 10", "output": "Output: -1", "explanation": "Explanation: It is impossible to arrive at the meeting on time even if you skip all the rests."}], "constraints": "Constraints:\nn == dist.length\n1 <= n <= 1000\n1 <= dist[i] <= 10^5\n1 <= speed <= 10^6\n1 <= hoursBefore <= 10^7", "notes": ""}, "1879": {"label": "Hard", "title": "Minimum XOR Sum of Two Arrays", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.41490000000000005, "total_accepted": 7200.0, "total_submissions": 17400.0, "testcase_example": "'[1,2]\\n[2,3]'", "body": "You are given two integer arrays nums1 and nums2 of length n.\nThe XOR sum of the two integer arrays is (nums1[0] XOR nums2[0]) + (nums1[1] XOR nums2[1]) + ... + (nums1[n - 1] XOR nums2[n - 1]) (0-indexed).\nFor example, the XOR sum of [1,2,3] and [3,2,1] is equal to (1 XOR 3) + (2 XOR 2) + (3 XOR 1) = 2 + 0 + 2 = 4.\nRearrange the elements of nums2 such that the resulting XOR sum is minimized.\nReturn the XOR sum after the rearrangement.", "examples": [{"full_text": "Example 1:\nInput: nums1 = [1,2], nums2 = [2,3]\nOutput: 2\nExplanation: Rearrange nums2 so that it becomes [3,2].\nThe XOR sum is (1 XOR 3) + (2 XOR 2) = 2 + 0 = 2.", "input": "Input: nums1 = [1,2], nums2 = [2,3]", "output": "Output: 2", "explanation": "Explanation: Rearrange nums2 so that it becomes [3,2].\nThe XOR sum is (1 XOR 3) + (2 XOR 2) = 2 + 0 = 2."}, {"full_text": "Example 2:\nInput: nums1 = [1,0,3], nums2 = [5,3,4]\nOutput: 8\nExplanation: Rearrange nums2 so that it becomes [5,4,3].\nThe XOR sum is (1 XOR 5) + (0 XOR 4) + (3 XOR 3) = 4 + 4 + 0 = 8.", "input": "Input: nums1 = [1,0,3], nums2 = [5,3,4]", "output": "Output: 8", "explanation": "Explanation: Rearrange nums2 so that it becomes [5,4,3].\nThe XOR sum is (1 XOR 5) + (0 XOR 4) + (3 XOR 3) = 4 + 4 + 0 = 8."}], "constraints": "Constraints:\nn == nums1.length\nn == nums2.length\n1 <= n <= 14\n0 <= nums1[i], nums2[i] <= 10^7", "notes": ""}, "1872": {"label": "Hard", "title": "Stone Game VIII", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5246999999999999, "total_accepted": 5200.0, "total_submissions": 9900.0, "testcase_example": "'[-1,2,-3,4,-5]'", "body": "Alice and Bob take turns playing a game, with Alice starting first.\nThere are n stones arranged in a row. On each player's turn, while the number of stones is more than one, they will do the following:\nChoose an integer x > 1, and remove the leftmost x stones from the row.\nAdd the sum of the removed stones' values to the player's score.\nPlace a new stone, whose value is equal to that sum, on the left side of the row.\nThe game stops when only one stone is left in the row.\nThe score difference between Alice and Bob is (Alice's score - Bob's score). Alice's goal is to maximize the score difference, and Bob's goal is the minimize the score difference.\nGiven an integer array stones of length n where stones[i] represents the value of the i^th stone from the left, return the score difference between Alice and Bob if they both play optimally.", "examples": [{"full_text": "Example 1:\nInput: stones = [-1,2,-3,4,-5]\nOutput: 5\nExplanation:\n- Alice removes the first 4 stones, adds (-1) + 2 + (-3) + 4 = 2 to her score, and places a stone of\nvalue 2 on the left. stones = [2,-5].\n- Bob removes the first 2 stones, adds 2 + (-5) = -3 to his score, and places a stone of value -3 on\nthe left. stones = [-3].\nThe difference between their scores is 2 - (-3) = 5.", "input": "Input: stones = [-1,2,-3,4,-5]", "output": "Output: 5", "explanation": "Explanation:\n- Alice removes the first 4 stones, adds (-1) + 2 + (-3) + 4 = 2 to her score, and places a stone of\nvalue 2 on the left. stones = [2,-5].\n- Bob removes the first 2 stones, adds 2 + (-5) = -3 to his score, and places a stone of value -3 on\nthe left. stones = [-3].\nThe difference between their scores is 2 - (-3) = 5."}, {"full_text": "Example 2:\nInput: stones = [7,-6,5,10,5,-2,-6]\nOutput: 13\nExplanation:\n- Alice removes all stones, adds 7 + (-6) + 5 + 10 + 5 + (-2) + (-6) = 13 to her score, and places a\nstone of value 13 on the left. stones = [13].\nThe difference between their scores is 13 - 0 = 13.", "input": "Input: stones = [7,-6,5,10,5,-2,-6]", "output": "Output: 13", "explanation": "Explanation:\n- Alice removes all stones, adds 7 + (-6) + 5 + 10 + 5 + (-2) + (-6) = 13 to her score, and places a\nstone of value 13 on the left. stones = [13].\nThe difference between their scores is 13 - 0 = 13."}, {"full_text": "Example 3:\nInput: stones = [-10,-12]\nOutput: -22\nExplanation:\n- Alice can only make one move, which is to remove both stones. She adds (-10) + (-12) = -22 to her\nscore and places a stone of value -22 on the left. stones = [-22].\nThe difference between their scores is (-22) - 0 = -22.", "input": "Input: stones = [-10,-12]", "output": "Output: -22", "explanation": "Explanation:\n- Alice can only make one move, which is to remove both stones. She adds (-10) + (-12) = -22 to her\nscore and places a stone of value -22 on the left. stones = [-22].\nThe difference between their scores is (-22) - 0 = -22."}], "constraints": "Constraints:\nn == stones.length\n2 <= n <= 10^5\n-10^4 <= stones[i] <= 10^4", "notes": ""}, "1866": {"label": "Hard", "title": "Number of Ways to Rearrange Sticks With K Sticks Visible", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5522, "total_accepted": 7500.0, "total_submissions": 13600.0, "testcase_example": "'3\\n2'", "body": "There are n uniquely-sized sticks whose lengths are integers from 1 to n. You want to arrange the sticks such that exactly k\nsticks are visible from the left. A stick\nis visible from the left if there are no longer\nsticks to the left of it.\nFor example, if the sticks are arranged [1,3,2,5,4], then the sticks with lengths 1, 3, and 5 are visible from the left.\nGiven n and k, return the number of such arrangements. Since the answer may be large, return it modulo 10^9 + 7.", "examples": [{"full_text": "Example 1:\nInput: n = 3, k = 2\nOutput: 3\nExplanation: [1,3,2], [2,3,1], and [2,1,3] are the only arrangements such that exactly 2 sticks are visible.\nThe visible sticks are underlined.", "input": "Input: n = 3, k = 2", "output": "Output: 3", "explanation": "Explanation: [1,3,2], [2,3,1], and [2,1,3] are the only arrangements such that exactly 2 sticks are visible.\nThe visible sticks are underlined."}, {"full_text": "Example 2:\nInput: n = 5, k = 5\nOutput: 1\nExplanation: [1,2,3,4,5] is the only arrangement such that all 5 sticks are visible.\nThe visible sticks are underlined.", "input": "Input: n = 5, k = 5", "output": "Output: 1", "explanation": "Explanation: [1,2,3,4,5] is the only arrangement such that all 5 sticks are visible.\nThe visible sticks are underlined."}, {"full_text": "Example 3:\nInput: n = 20, k = 11\nOutput: 647427950\nExplanation: There are 647427950 (mod 10^9 + 7) ways to rearrange the sticks such that exactly 11 sticks are visible.", "input": "Input: n = 20, k = 11", "output": "Output: 647427950", "explanation": "Explanation: There are 647427950 (mod 10^9 + 7) ways to rearrange the sticks such that exactly 11 sticks are visible."}], "constraints": "Constraints:\n1 <= n <= 1000\n1 <= k <= n", "notes": ""}, "1862": {"label": "Hard", "title": "Sum of Floored Pairs", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.2774, "total_accepted": 5600.0, "total_submissions": 20100.0, "testcase_example": "'[2,5,9]'", "body": "Given an integer array nums, return the sum of floor(nums[i] / nums[j]) for all pairs of indices 0 <= i, j < nums.length in the array. Since the answer may be too large, return it modulo 10^9 + 7.\nThe floor() function returns the integer part of the division.", "examples": [{"full_text": "Example 1:\nInput: nums = [2,5,9]\nOutput: 10\nExplanation:\nfloor(2 / 5) = floor(2 / 9) = floor(5 / 9) = 0\nfloor(2 / 2) = floor(5 / 5) = floor(9 / 9) = 1\nfloor(5 / 2) = 2\nfloor(9 / 2) = 4\nfloor(9 / 5) = 1\nWe calculate the floor of the division for every pair of indices in the array then sum them up.", "input": "Input: nums = [2,5,9]", "output": "Output: 10", "explanation": "Explanation:\nfloor(2 / 5) = floor(2 / 9) = floor(5 / 9) = 0\nfloor(2 / 2) = floor(5 / 5) = floor(9 / 9) = 1\nfloor(5 / 2) = 2\nfloor(9 / 2) = 4\nfloor(9 / 5) = 1\nWe calculate the floor of the division for every pair of indices in the array then sum them up."}, {"full_text": "Example 2:\nInput: nums = [7,7,7,7,7,7,7]\nOutput: 49", "input": "Input: nums = [7,7,7,7,7,7,7]", "output": "Output: 49", "explanation": ""}], "constraints": "Constraints:\n1 <= nums.length <= 10^5\n1 <= nums[i] <= 10^5", "notes": ""}, "1857": {"label": "Hard", "title": "Largest Color Value in a Directed Graph", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3931, "total_accepted": 9900.0, "total_submissions": 25100.0, "testcase_example": "'\"abaca\"\\n[[0,1],[0,2],[2,3],[3,4]]'", "body": "There is a directed graph of n colored nodes and m edges. The nodes are numbered from 0 to n - 1.\nYou are given a string colors where colors[i] is a lowercase English letter representing the color of the i^th node in this graph (0-indexed). You are also given a 2D array edges where edges[j] = [aj, bj] indicates that there is a directed edge from node aj to node bj.\nA valid path in the graph is a sequence of nodes x1 -> x2 -> x3 -> ... -> xk such that there is a directed edge from xi to xi+1 for every 1 <= i < k. The color value of the path is the number of nodes that are colored the most frequently occurring color along that path.\nReturn the largest color value of any valid path in the given graph, or -1 if the graph contains a cycle.", "examples": [{"full_text": "Example 1:\nInput: colors = \"abaca\", edges = [[0,1],[0,2],[2,3],[3,4]]\nOutput: 3\nExplanation: The path 0 -> 2 -> 3 -> 4 contains 3 nodes that are colored \"a\" (red in the above image).", "input": "Input: colors = \"abaca\", edges = [[0,1],[0,2],[2,3],[3,4]]", "output": "Output: 3", "explanation": "Explanation: The path 0 -> 2 -> 3 -> 4 contains 3 nodes that are colored \"a\" (red in the above image)."}, {"full_text": "Example 2:\nInput: colors = \"a\", edges = [[0,0]]\nOutput: -1\nExplanation: There is a cycle from 0 to 0.", "input": "Input: colors = \"a\", edges = [[0,0]]", "output": "Output: -1", "explanation": "Explanation: There is a cycle from 0 to 0."}], "constraints": "Constraints:\nn == colors.length\nm == edges.length\n1 <= n <= 10^5\n0 <= m <= 10^5\ncolors consists of lowercase English letters.\n0 <= aj, bj\n< n", "notes": ""}, "1851": {"label": "Hard", "title": "Minimum Interval to Include Each Query", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4536, "total_accepted": 6100.0, "total_submissions": 13400.0, "testcase_example": "'[[1,4],[2,4],[3,6],[4,4]]\\n[2,3,4,5]'", "body": "You are given a 2D integer array intervals, where intervals[i] = [lefti, righti] describes the i^th interval starting at lefti and ending at righti (inclusive). The size of an interval is defined as the number of integers it contains, or more formally righti - lefti + 1.\nYou are also given an integer array queries. The answer to the j^th query is the size of the smallest interval i such that lefti <= queries[j] <= righti. If no such interval exists, the answer is -1.\nReturn an array containing the answers to the queries.", "examples": [{"full_text": "Example 1:\nInput: intervals = [[1,4],[2,4],[3,6],[4,4]], queries = [2,3,4,5]\nOutput: [3,3,1,4]\nExplanation: The queries are processed as follows:\n- Query = 2: The interval [2,4] is the smallest interval containing 2. The answer is 4 - 2 + 1 = 3.\n- Query = 3: The interval [2,4] is the smallest interval containing 3. The answer is 4 - 2 + 1 = 3.\n- Query = 4: The interval [4,4] is the smallest interval containing 4. The answer is 4 - 4 + 1 = 1.\n- Query = 5: The interval [3,6] is the smallest interval containing 5. The answer is 6 - 3 + 1 = 4.", "input": "Input: intervals = [[1,4],[2,4],[3,6],[4,4]], queries = [2,3,4,5]", "output": "Output: [3,3,1,4]", "explanation": "Explanation: The queries are processed as follows:\n- Query = 2: The interval [2,4] is the smallest interval containing 2. The answer is 4 - 2 + 1 = 3.\n- Query = 3: The interval [2,4] is the smallest interval containing 3. The answer is 4 - 2 + 1 = 3.\n- Query = 4: The interval [4,4] is the smallest interval containing 4. The answer is 4 - 4 + 1 = 1.\n- Query = 5: The interval [3,6] is the smallest interval containing 5. The answer is 6 - 3 + 1 = 4."}, {"full_text": "Example 2:\nInput: intervals = [[2,3],[2,5],[1,8],[20,25]], queries = [2,19,5,22]\nOutput: [2,-1,4,6]\nExplanation: The queries are processed as follows:\n- Query = 2: The interval [2,3] is the smallest interval containing 2. The answer is 3 - 2 + 1 = 2.\n- Query = 19: None of the intervals contain 19. The answer is -1.\n- Query = 5: The interval [2,5] is the smallest interval containing 5. The answer is 5 - 2 + 1 = 4.\n- Query = 22: The interval [20,25] is the smallest interval containing 22. The answer is 25 - 20 + 1 = 6.", "input": "Input: intervals = [[2,3],[2,5],[1,8],[20,25]], queries = [2,19,5,22]", "output": "Output: [2,-1,4,6]", "explanation": "Explanation: The queries are processed as follows:\n- Query = 2: The interval [2,3] is the smallest interval containing 2. The answer is 3 - 2 + 1 = 2.\n- Query = 19: None of the intervals contain 19. The answer is -1.\n- Query = 5: The interval [2,5] is the smallest interval containing 5. The answer is 5 - 2 + 1 = 4.\n- Query = 22: The interval [20,25] is the smallest interval containing 22. The answer is 25 - 20 + 1 = 6."}], "constraints": "Constraints:\n1 <= intervals.length <= 10^5\n1 <= queries.length <= 10^5\nintervals[i].length == 2\n1 <= lefti <= righti <= 10^7\n1 <= queries[j] <= 10^7", "notes": ""}, "1847": {"label": "Hard", "title": "Closest Room", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3292, "total_accepted": 5100.0, "total_submissions": 15500.0, "testcase_example": "'[[2,2],[1,2],[3,2]]\\n[[3,1],[3,3],[5,2]]'", "body": "There is a hotel with n rooms. The rooms are represented by a 2D integer array rooms where rooms[i] = [roomIdi, sizei] denotes that there is a room with room number roomIdi and size equal to sizei. Each roomIdi is guaranteed to be unique.\nYou are also given k queries in a 2D array queries where queries[j] = [preferredj, minSizej]. The answer to the j^th query is the room number id of a room such that:\nThe room has a size of at least minSizej, and\nabs(id - preferredj) is minimized, where abs(x) is the absolute value of x.\nIf there is a tie in the absolute difference, then use the room with the smallest such id. If there is no such room, the answer is -1.\nReturn an array answer of length k where answer[j] contains the answer to the j^th query.", "examples": [{"full_text": "Example 1:\nInput: rooms = [[2,2],[1,2],[3,2]], queries = [[3,1],[3,3],[5,2]]\nOutput: [3,-1,3]\nExplanation: The answers to the queries are as follows:\nQuery = [3,1]: Room number 3 is the closest as abs(3 - 3) = 0, and its size of 2 is at least 1. The answer is 3.\nQuery = [3,3]: There are no rooms with a size of at least 3, so the answer is -1.\nQuery = [5,2]: Room number 3 is the closest as abs(3 - 5) = 2, and its size of 2 is at least 2. The answer is 3.", "input": "Input: rooms = [[2,2],[1,2],[3,2]], queries = [[3,1],[3,3],[5,2]]", "output": "Output: [3,-1,3]", "explanation": "Explanation: The answers to the queries are as follows:\nQuery = [3,1]: Room number 3 is the closest as abs(3 - 3) = 0, and its size of 2 is at least 1. The answer is 3.\nQuery = [3,3]: There are no rooms with a size of at least 3, so the answer is -1.\nQuery = [5,2]: Room number 3 is the closest as abs(3 - 5) = 2, and its size of 2 is at least 2. The answer is 3."}, {"full_text": "Example 2:\nInput: rooms = [[1,4],[2,3],[3,5],[4,1],[5,2]], queries = [[2,3],[2,4],[2,5]]\nOutput: [2,1,3]\nExplanation: The answers to the queries are as follows:\nQuery = [2,3]: Room number 2 is the closest as abs(2 - 2) = 0, and its size of 3 is at least 3. The answer is 2.\nQuery = [2,4]: Room numbers 1 and 3 both have sizes of at least 4. The answer is 1 since it is smaller.\nQuery = [2,5]: Room number 3 is the only room with a size of at least 5. The answer is 3.", "input": "Input: rooms = [[1,4],[2,3],[3,5],[4,1],[5,2]], queries = [[2,3],[2,4],[2,5]]", "output": "Output: [2,1,3]", "explanation": "Explanation: The answers to the queries are as follows:\nQuery = [2,3]: Room number 2 is the closest as abs(2 - 2) = 0, and its size of 3 is at least 3. The answer is 2.\nQuery = [2,4]: Room numbers 1 and 3 both have sizes of at least 4. The answer is 1 since it is smaller.\nQuery = [2,5]: Room number 3 is the only room with a size of at least 5. The answer is 3."}], "constraints": "Constraints:\nn == rooms.length\n1 <= n <= 10^5\nk == queries.length\n1 <= k <= 10^4\n1 <= roomIdi, preferredj <= 10^7\n1 <= sizei, minSizej <= 10^7", "notes": ""}, "1840": {"label": "Hard", "title": "Maximum Building Height", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3488, "total_accepted": 4600.0, "total_submissions": 13300.0, "testcase_example": "'5\\n[[2,1],[4,1]]'", "body": "You want to build n new buildings in a city. The new buildings will be built in a line and are labeled from 1 to n.\nHowever, there are city restrictions on the heights of the new buildings:\nThe height of each building must be a non-negative integer.\nThe height of the first building must be 0.\nThe height difference between any two adjacent buildings cannot exceed 1.\nAdditionally, there are city restrictions on the maximum height of specific buildings. These restrictions are given as a 2D integer array restrictions where restrictions[i] = [idi, maxHeighti] indicates that building idi must have a height less than or equal to maxHeighti.\nIt is guaranteed that each building will appear at most once in restrictions, and building 1 will not be in restrictions.\nReturn the maximum possible height of the tallest building.", "examples": [{"full_text": "Example 1:\nInput: n = 5, restrictions = [[2,1],[4,1]]\nOutput: 2\nExplanation: The green area in the image indicates the maximum allowed height for each building.\nWe can build the buildings with heights [0,1,2,1,2], and the tallest building has a height of 2.", "input": "Input: n = 5, restrictions = [[2,1],[4,1]]", "output": "Output: 2", "explanation": "Explanation: The green area in the image indicates the maximum allowed height for each building.\nWe can build the buildings with heights [0,1,2,1,2], and the tallest building has a height of 2."}, {"full_text": "Example 2:\nInput: n = 6, restrictions = []\nOutput: 5\nExplanation: The green area in the image indicates the maximum allowed height for each building.\nWe can build the buildings with heights [0,1,2,3,4,5], and the tallest building has a height of 5.", "input": "Input: n = 6, restrictions = []", "output": "Output: 5", "explanation": "Explanation: The green area in the image indicates the maximum allowed height for each building.\nWe can build the buildings with heights [0,1,2,3,4,5], and the tallest building has a height of 5."}, {"full_text": "Example 3:\nInput: n = 10, restrictions = [[5,3],[2,5],[7,4],[10,3]]\nOutput: 5\nExplanation: The green area in the image indicates the maximum allowed height for each building.\nWe can build the buildings with heights [0,1,2,3,3,4,4,5,4,3], and the tallest building has a height of 5.", "input": "Input: n = 10, restrictions = [[5,3],[2,5],[7,4],[10,3]]", "output": "Output: 5", "explanation": "Explanation: The green area in the image indicates the maximum allowed height for each building.\nWe can build the buildings with heights [0,1,2,3,3,4,4,5,4,3], and the tallest building has a height of 5."}], "constraints": "Constraints:\n2 <= n <= 10^9\n0 <= restrictions.length <= min(n - 1, 10^5)\n2 <= idi <= n\nidi\nis unique.\n0 <= maxHeighti <= 10^9", "notes": ""}, "1835": {"label": "Hard", "title": "Find XOR Sum of All Pairs Bitwise AND", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5857, "total_accepted": 9800.0, "total_submissions": 16800.0, "testcase_example": "'[1,2,3]\\n[6,5]'", "body": "The XOR sum of a list is the bitwise XOR of all its elements. If the list only contains one element, then its XOR sum will be equal to this element.\nFor example, the XOR sum of [1,2,3,4] is equal to 1 XOR 2 XOR 3 XOR 4 = 4, and the XOR sum of [3] is equal to 3.\nYou are given two 0-indexed arrays arr1 and arr2 that consist only of non-negative integers.\nConsider the list containing the result of arr1[i] AND arr2[j] (bitwise AND) for every (i, j) pair where 0 <= i < arr1.length and 0 <= j < arr2.length.\nReturn the XOR sum of the aforementioned list.", "examples": [{"full_text": "Example 1:\nInput: arr1 = [1,2,3], arr2 = [6,5]\nOutput: 0\nExplanation: The list = [1 AND 6, 1 AND 5, 2 AND 6, 2 AND 5, 3 AND 6, 3 AND 5] = [0,1,2,0,2,1].\nThe XOR sum = 0 XOR 1 XOR 2 XOR 0 XOR 2 XOR 1 = 0.", "input": "Input: arr1 = [1,2,3], arr2 = [6,5]", "output": "Output: 0", "explanation": "Explanation: The list = [1 AND 6, 1 AND 5, 2 AND 6, 2 AND 5, 3 AND 6, 3 AND 5] = [0,1,2,0,2,1].\nThe XOR sum = 0 XOR 1 XOR 2 XOR 0 XOR 2 XOR 1 = 0."}, {"full_text": "Example 2:\nInput: arr1 = [12], arr2 = [4]\nOutput: 4\nExplanation: The list = [12 AND 4] = [4]. The XOR sum = 4.", "input": "Input: arr1 = [12], arr2 = [4]", "output": "Output: 4", "explanation": "Explanation: The list = [12 AND 4] = [4]. The XOR sum = 4."}], "constraints": "Constraints:\n1 <= arr1.length, arr2.length <= 10^5\n0 <= arr1[i], arr2[j] <= 10^9", "notes": ""}, "1830": {"label": "Hard", "title": "Minimum Number of Operations to Make String Sorted", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4772, "total_accepted": 2100.0, "total_submissions": 4400.0, "testcase_example": "'\"cba\"'", "body": "You are given a string s (0-indexed)\u200b\u200b\u200b\u200b\u200b\u200b. You are asked to perform the following operation on s\u200b\u200b\u200b\u200b\u200b\u200b until you get a sorted string:\nFind the largest index i such that 1 <= i < s.length and s[i] < s[i - 1].\nFind the largest index j such that i <= j < s.length and s[k] < s[i - 1] for all the possible values of k in the range [i, j] inclusive.\nSwap the two characters at indices i - 1\u200b\u200b\u200b\u200b and j\u200b\u200b\u200b\u200b\u200b.\nReverse the suffix starting at index i\u200b\u200b\u200b\u200b\u200b\u200b.\nReturn the number of operations needed to make the string sorted. Since the answer can be too large, return it modulo 10^9 + 7.", "examples": [{"full_text": "Example 1:\nInput: s = \"cba\"\nOutput: 5\nExplanation: The simulation goes as follows:\nOperation 1: i=2, j=2. Swap s[1] and s[2] to get s=\"cab\", then reverse the suffix starting at 2. Now, s=\"cab\".\nOperation 2: i=1, j=2. Swap s[0] and s[2] to get s=\"bac\", then reverse the suffix starting at 1. Now, s=\"bca\".\nOperation 3: i=2, j=2. Swap s[1] and s[2] to get s=\"bac\", then reverse the suffix starting at 2. Now, s=\"bac\".\nOperation 4: i=1, j=1. Swap s[0] and s[1] to get s=\"abc\", then reverse the suffix starting at 1. Now, s=\"acb\".\nOperation 5: i=2, j=2. Swap s[1] and s[2] to get s=\"abc\", then reverse the suffix starting at 2. Now, s=\"abc\".", "input": "Input: s = \"cba\"", "output": "Output: 5", "explanation": "Explanation: The simulation goes as follows:\nOperation 1: i=2, j=2. Swap s[1] and s[2] to get s=\"cab\", then reverse the suffix starting at 2. Now, s=\"cab\".\nOperation 2: i=1, j=2. Swap s[0] and s[2] to get s=\"bac\", then reverse the suffix starting at 1. Now, s=\"bca\".\nOperation 3: i=2, j=2. Swap s[1] and s[2] to get s=\"bac\", then reverse the suffix starting at 2. Now, s=\"bac\".\nOperation 4: i=1, j=1. Swap s[0] and s[1] to get s=\"abc\", then reverse the suffix starting at 1. Now, s=\"acb\".\nOperation 5: i=2, j=2. Swap s[1] and s[2] to get s=\"abc\", then reverse the suffix starting at 2. Now, s=\"abc\"."}, {"full_text": "Example 2:\nInput: s = \"aabaa\"\nOutput: 2\nExplanation: The simulation goes as follows:\nOperation 1: i=3, j=4. Swap s[2] and s[4] to get s=\"aaaab\", then reverse the substring starting at 3. Now, s=\"aaaba\".\nOperation 2: i=4, j=4. Swap s[3] and s[4] to get s=\"aaaab\", then reverse the substring starting at 4. Now, s=\"aaaab\".", "input": "Input: s = \"aabaa\"", "output": "Output: 2", "explanation": "Explanation: The simulation goes as follows:\nOperation 1: i=3, j=4. Swap s[2] and s[4] to get s=\"aaaab\", then reverse the substring starting at 3. Now, s=\"aaaba\".\nOperation 2: i=4, j=4. Swap s[3] and s[4] to get s=\"aaaab\", then reverse the substring starting at 4. Now, s=\"aaaab\"."}], "constraints": "Constraints:\n1 <= s.length <= 3000\ns\u200b\u200b\u200b\u200b\u200b\u200b consists only of lowercase English letters.", "notes": ""}, "1825": {"label": "Hard", "title": "Finding MK Average", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.32880000000000004, "total_accepted": 6400.0, "total_submissions": 19400.0, "testcase_example": "'[\"MKAverage\",\"addElement\",\"addElement\",\"calculateMKAverage\",\"addElement\",\"calculateMKAverage\",\"addElement\",\"addElement\",\"addElement\",\"calculateMKAverage\"]\\n' +\n  '[[3,1],[3],[1],[],[10],[],[5],[5],[5],[]]'", "body": "You are given two integers, m and k, and a stream of integers. You are tasked to implement a data structure that calculates the MKAverage for the stream.\nThe MKAverage can be calculated using these steps:\nIf the number of the elements in the stream is less than m you should consider the MKAverage to be -1. Otherwise, copy the last m elements of the stream to a separate container.\nRemove the smallest k elements and the largest k elements from the container.\nCalculate the average value for the rest of the elements rounded down to the nearest integer.\nImplement the MKAverage class:\nMKAverage(int m, int k) Initializes the MKAverage object with an empty stream and the two integers m and k.\nvoid addElement(int num) Inserts a new element num into the stream.\nint calculateMKAverage() Calculates and returns the MKAverage for the current stream rounded down to the nearest integer.", "examples": [{"full_text": "Example 1:\nInput\n[\"MKAverage\", \"addElement\", \"addElement\", \"calculateMKAverage\", \"addElement\", \"calculateMKAverage\", \"addElement\", \"addElement\", \"addElement\", \"calculateMKAverage\"]\n[[3, 1], [3], [1], [], [10], [], [5], [5], [5], []]\nOutput\n[null, null, null, -1, null, 3, null, null, null, 5]\nExplanation\nMKAverage obj = new MKAverage(3, 1);\nobj.addElement(3); // current elements are [3]\nobj.addElement(1); // current elements are [3,1]\nobj.calculateMKAverage(); // return -1, because m = 3 and only 2 elements exist.\nobj.addElement(10); // current elements are [3,1,10]\nobj.calculateMKAverage(); // The last 3 elements are [3,1,10].\n// After removing smallest and largest 1 element the container will be [3].\n// The average of [3] equals 3/1 = 3, return 3\nobj.addElement(5); // current elements are [3,1,10,5]\nobj.addElement(5); // current elements are [3,1,10,5,5]\nobj.addElement(5); // current elements are [3,1,10,5,5,5]\nobj.calculateMKAverage(); // The last 3 elements are [5,5,5].\n// After removing smallest and largest 1 element the container will be [5].\n// The average of [5] equals 5/1 = 5, return 5", "input": "Input\n[\"MKAverage\", \"addElement\", \"addElement\", \"calculateMKAverage\", \"addElement\", \"calculateMKAverage\", \"addElement\", \"addElement\", \"addElement\", \"calculateMKAverage\"]\n[[3, 1], [3], [1], [], [10], [], [5], [5], [5], []]", "output": "Output\n[null, null, null, -1, null, 3, null, null, null, 5]", "explanation": "Explanation\nMKAverage obj = new MKAverage(3, 1);\nobj.addElement(3); // current elements are [3]\nobj.addElement(1); // current elements are [3,1]\nobj.calculateMKAverage(); // return -1, because m = 3 and only 2 elements exist.\nobj.addElement(10); // current elements are [3,1,10]\nobj.calculateMKAverage(); // The last 3 elements are [3,1,10].\n// After removing smallest and largest 1 element the container will be [3].\n// The average of [3] equals 3/1 = 3, return 3\nobj.addElement(5); // current elements are [3,1,10,5]\nobj.addElement(5); // current elements are [3,1,10,5,5]\nobj.addElement(5); // current elements are [3,1,10,5,5,5]\nobj.calculateMKAverage(); // The last 3 elements are [5,5,5].\n// After removing smallest and largest 1 element the container will be [5].\n// The average of [5] equals 5/1 = 5, return 5"}], "constraints": "Constraints:\n3 <= m <= 10^5\n1 <= k*2 < m\n1 <= num <= 10^5\nAt most 10^5 calls will be made to addElement and calculateMKAverage.", "notes": ""}, "1819": {"label": "Hard", "title": "Number of Different Subsequences GCDs", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.36840000000000006, "total_accepted": 5400.0, "total_submissions": 14600.0, "testcase_example": "'[6,10,3]'", "body": "You are given an array nums that consists of positive integers.\nThe GCD of a sequence of numbers is defined as the greatest integer that divides all the numbers in the sequence evenly.\nFor example, the GCD of the sequence [4,6,16] is 2.\nA subsequence of an array is a sequence that can be formed by removing some elements (possibly none) of the array.\nFor example, [2,5,10] is a subsequence of [1,2,1,2,4,1,5,10].\nReturn the number of different GCDs among all non-empty subsequences of nums.", "examples": [{"full_text": "Example 1:\nInput: nums = [6,10,3]\nOutput: 5\nExplanation: The figure shows all the non-empty subsequences and their GCDs.\nThe different GCDs are 6, 10, 3, 2, and 1.", "input": "Input: nums = [6,10,3]", "output": "Output: 5", "explanation": "Explanation: The figure shows all the non-empty subsequences and their GCDs.\nThe different GCDs are 6, 10, 3, 2, and 1."}, {"full_text": "Example 2:\nInput: nums = [5,15,40,5,6]\nOutput: 7", "input": "Input: nums = [5,15,40,5,6]", "output": "Output: 7", "explanation": ""}], "constraints": "Constraints:\n1 <= nums.length <= 10^5\n1 <= nums[i] <= 2 * 10^5", "notes": ""}, "1815": {"label": "Hard", "title": "Maximum Number of Groups Getting Fresh Donuts", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.39990000000000003, "total_accepted": 4000.0, "total_submissions": 9900.0, "testcase_example": "'3\\n[1,2,3,4,5,6]'", "body": "There is a donuts shop that bakes donuts in batches of batchSize. They have a rule where they must serve all of the donuts of a batch before serving any donuts of the next batch. You are given an integer batchSize and an integer array groups, where groups[i] denotes that there is a group of groups[i] customers that will visit the shop. Each customer will get exactly one donut.\nWhen a group visits the shop, all customers of the group must be served before serving any of the following groups. A group will be happy if they all get fresh donuts. That is, the first customer of the group does not receive a donut that was left over from the previous group.\nYou can freely rearrange the ordering of the groups. Return the maximum possible number of happy groups after rearranging the groups.", "examples": [{"full_text": "Example 1:\nInput: batchSize = 3, groups = [1,2,3,4,5,6]\nOutput: 4\nExplanation: You can arrange the groups as [6,2,4,5,1,3]. Then the 1^st, 2^nd, 4^th, and 6^th groups will be happy.", "input": "Input: batchSize = 3, groups = [1,2,3,4,5,6]", "output": "Output: 4", "explanation": "Explanation: You can arrange the groups as [6,2,4,5,1,3]. Then the 1^st, 2^nd, 4^th, and 6^th groups will be happy."}, {"full_text": "Example 2:\nInput: batchSize = 4, groups = [1,3,2,5,2,2,1,6]\nOutput: 4", "input": "Input: batchSize = 4, groups = [1,3,2,5,2,2,1,6]", "output": "Output: 4", "explanation": ""}], "constraints": "Constraints:\n1 <= batchSize <= 9\n1 <= groups.length <= 30\n1 <= groups[i] <= 10^9", "notes": ""}, "1808": {"label": "Hard", "title": "Maximize Number of Nice Divisors", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.2985, "total_accepted": 4400.0, "total_submissions": 14800.0, "testcase_example": "'5'", "body": "You are given a positive integer primeFactors. You are asked to construct a positive integer n that satisfies the following conditions:\nThe number of prime factors of n (not necessarily distinct) is at most primeFactors.\nThe number of nice divisors of n is maximized. Note that a divisor of n is nice if it is divisible by every prime factor of n. For example, if n = 12, then its prime factors are [2,2,3], then 6 and 12 are nice divisors, while 3 and 4 are not.\nReturn the number of nice divisors of n. Since that number can be too large, return it modulo 10^9 + 7.\nNote that a prime number is a natural number greater than 1 that is not a product of two smaller natural numbers. The prime factors of a number n is a list of prime numbers such that their product equals n.", "examples": [{"full_text": "Example 1:\nInput: primeFactors = 5\nOutput: 6\nExplanation: 200 is a valid value of n.\nIt has 5 prime factors: [2,2,2,5,5], and it has 6 nice divisors: [10,20,40,50,100,200].\nThere is not other value of n that has at most 5 prime factors and more nice divisors.", "input": "Input: primeFactors = 5", "output": "Output: 6", "explanation": "Explanation: 200 is a valid value of n.\nIt has 5 prime factors: [2,2,2,5,5], and it has 6 nice divisors: [10,20,40,50,100,200].\nThere is not other value of n that has at most 5 prime factors and more nice divisors."}, {"full_text": "Example 2:\nInput: primeFactors = 8\nOutput: 18", "input": "Input: primeFactors = 8", "output": "Output: 18", "explanation": ""}], "constraints": "Constraints:\n1 <= primeFactors <= 10^9", "notes": ""}, "1803": {"label": "Hard", "title": "Count Pairs With XOR in a Range", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4619, "total_accepted": 4400.0, "total_submissions": 9500.0, "testcase_example": "'[1,4,2,7]\\n2\\n6'", "body": "Given a (0-indexed) integer array nums and two integers low and high, return the number of nice pairs.\nA nice pair is a pair (i, j) where 0 <= i < j < nums.length and low <= (nums[i] XOR nums[j]) <= high.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,4,2,7], low = 2, high = 6\nOutput: 6\nExplanation: All nice pairs (i, j) are as follows:\n- (0, 1): nums[0] XOR nums[1] = 5\n- (0, 2): nums[0] XOR nums[2] = 3\n- (0, 3): nums[0] XOR nums[3] = 6\n- (1, 2): nums[1] XOR nums[2] = 6\n- (1, 3): nums[1] XOR nums[3] = 3\n- (2, 3): nums[2] XOR nums[3] = 5", "input": "Input: nums = [1,4,2,7], low = 2, high = 6", "output": "Output: 6", "explanation": "Explanation: All nice pairs (i, j) are as follows:\n- (0, 1): nums[0] XOR nums[1] = 5\n- (0, 2): nums[0] XOR nums[2] = 3\n- (0, 3): nums[0] XOR nums[3] = 6\n- (1, 2): nums[1] XOR nums[2] = 6\n- (1, 3): nums[1] XOR nums[3] = 3\n- (2, 3): nums[2] XOR nums[3] = 5"}, {"full_text": "Example 2:\nInput: nums = [9,8,4,2,1], low = 5, high = 14\nOutput: 8\nExplanation: All nice pairs (i, j) are as follows:\n\u200b\u200b\u200b\u200b\u200b - (0, 2): nums[0] XOR nums[2] = 13\n- (0, 3): nums[0] XOR nums[3] = 11\n- (0, 4): nums[0] XOR nums[4] = 8\n- (1, 2): nums[1] XOR nums[2] = 12\n- (1, 3): nums[1] XOR nums[3] = 10\n- (1, 4): nums[1] XOR nums[4] = 9\n- (2, 3): nums[2] XOR nums[3] = 6\n- (2, 4): nums[2] XOR nums[4] = 5", "input": "Input: nums = [9,8,4,2,1], low = 5, high = 14", "output": "Output: 8", "explanation": "Explanation: All nice pairs (i, j) are as follows:\n\u200b\u200b\u200b\u200b\u200b - (0, 2): nums[0] XOR nums[2] = 13\n- (0, 3): nums[0] XOR nums[3] = 11\n- (0, 4): nums[0] XOR nums[4] = 8\n- (1, 2): nums[1] XOR nums[2] = 12\n- (1, 3): nums[1] XOR nums[3] = 10\n- (1, 4): nums[1] XOR nums[4] = 9\n- (2, 3): nums[2] XOR nums[3] = 6\n- (2, 4): nums[2] XOR nums[4] = 5"}], "constraints": "Constraints:\n1 <= nums.length <= 2 * 10^4\n1 <= nums[i] <= 2 * 10^4\n1 <= low <= high <= 2 * 10^4", "notes": ""}, "1799": {"label": "Hard", "title": "Maximize Score After N Operations", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4631, "total_accepted": 10900.0, "total_submissions": 23600.0, "testcase_example": "'[1,2]'", "body": "You are given nums, an array of positive integers of size 2 * n. You must perform n operations on this array.\nIn the i^th operation (1-indexed), you will:\nChoose two elements, x and y.\nReceive a score of i * gcd(x, y).\nRemove x and y from nums.\nReturn the maximum score you can receive after performing n operations.\nThe function gcd(x, y) is the greatest common divisor of x and y.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,2]\nOutput: 1\nExplanation:\nThe optimal choice of operations is:\n(1 * gcd(1, 2)) = 1", "input": "Input: nums = [1,2]", "output": "Output: 1", "explanation": "Explanation:\nThe optimal choice of operations is:\n(1 * gcd(1, 2)) = 1"}, {"full_text": "Example 2:\nInput: nums = [3,4,6,8]\nOutput: 11\nExplanation:\nThe optimal choice of operations is:\n(1 * gcd(3, 6)) + (2 * gcd(4, 8)) = 3 + 8 = 11", "input": "Input: nums = [3,4,6,8]", "output": "Output: 11", "explanation": "Explanation:\nThe optimal choice of operations is:\n(1 * gcd(3, 6)) + (2 * gcd(4, 8)) = 3 + 8 = 11"}, {"full_text": "Example 3:\nInput: nums = [1,2,3,4,5,6]\nOutput: 14\nExplanation:\nThe optimal choice of operations is:\n(1 * gcd(1, 5)) + (2 * gcd(2, 4)) + (3 * gcd(3, 6)) = 1 + 4 + 9 = 14", "input": "Input: nums = [1,2,3,4,5,6]", "output": "Output: 14", "explanation": "Explanation:\nThe optimal choice of operations is:\n(1 * gcd(1, 5)) + (2 * gcd(2, 4)) + (3 * gcd(3, 6)) = 1 + 4 + 9 = 14"}], "constraints": "Constraints:\n1 <= n <= 7\nnums.length == 2 * n\n1 <= nums[i] <= 10^6", "notes": ""}, "1793": {"label": "Hard", "title": "Maximum Score of a Good Subarray", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5113, "total_accepted": 12300.0, "total_submissions": 24100.0, "testcase_example": "'[1,4,3,7,4,5]\\n3'", "body": "You are given an array of integers nums (0-indexed) and an integer k.\nThe score of a subarray (i, j) is defined as min(nums[i], nums[i+1], ..., nums[j]) * (j - i + 1). A good subarray is a subarray where i <= k <= j.\nReturn the maximum possible score of a good subarray.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,4,3,7,4,5], k = 3\nOutput: 15\nExplanation: The optimal subarray is (1, 5) with a score of min(4,3,7,4,5) * (5-1+1) = 3 * 5 = 15.", "input": "Input: nums = [1,4,3,7,4,5], k = 3", "output": "Output: 15", "explanation": "Explanation: The optimal subarray is (1, 5) with a score of min(4,3,7,4,5) * (5-1+1) = 3 * 5 = 15."}, {"full_text": "Example 2:\nInput: nums = [5,5,4,5,4,1,1,1], k = 0\nOutput: 20\nExplanation: The optimal subarray is (0, 4) with a score of min(5,5,4,5,4) * (4-0+1) = 4 * 5 = 20.", "input": "Input: nums = [5,5,4,5,4,1,1,1], k = 0", "output": "Output: 20", "explanation": "Explanation: The optimal subarray is (0, 4) with a score of min(5,5,4,5,4) * (4-0+1) = 4 * 5 = 20."}], "constraints": "Constraints:\n1 <= nums.length <= 10^5\n1 <= nums[i] <= 2 * 10^4\n0 <= k < nums.length", "notes": ""}, "1787": {"label": "Hard", "title": "Make the XOR of All Segments Equal to Zero", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.39149999999999996, "total_accepted": 3400.0, "total_submissions": 8700.0, "testcase_example": "'[1,2,0,3,0]\\n1'", "body": "You are given an array nums\u200b\u200b\u200b and an integer k\u200b\u200b\u200b\u200b\u200b. The XOR of a segment [left, right] where left <= right is the XOR of all the elements with indices between left and right, inclusive: nums[left] XOR nums[left+1] XOR ... XOR nums[right].\nReturn the minimum number of elements to change in the array such that the XOR of all segments of size k\u200b\u200b\u200b\u200b\u200b\u200b is equal to zero.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,2,0,3,0], k = 1\nOutput: 3\nExplanation: Modify the array from [1,2,0,3,0] to from [0,0,0,0,0].", "input": "Input: nums = [1,2,0,3,0], k = 1", "output": "Output: 3", "explanation": "Explanation: Modify the array from [1,2,0,3,0] to from [0,0,0,0,0]."}, {"full_text": "Example 2:\nInput: nums = [3,4,5,2,1,7,3,4,7], k = 3\nOutput: 3\nExplanation: Modify the array from [3,4,5,2,1,7,3,4,7] to [3,4,7,3,4,7,3,4,7].", "input": "Input: nums = [3,4,5,2,1,7,3,4,7], k = 3", "output": "Output: 3", "explanation": "Explanation: Modify the array from [3,4,5,2,1,7,3,4,7] to [3,4,7,3,4,7,3,4,7]."}, {"full_text": "Example 3:\nInput: nums = [1,2,4,1,2,5,1,2,6], k = 3\nOutput: 3\nExplanation: Modify the array from [1,2,4,1,2,5,1,2,6] to [1,2,3,1,2,3,1,2,3].", "input": "Input: nums = [1,2,4,1,2,5,1,2,6], k = 3", "output": "Output: 3", "explanation": "Explanation: Modify the array from [1,2,4,1,2,5,1,2,6] to [1,2,3,1,2,3,1,2,3]."}], "constraints": "Constraints:\n1 <= k <= nums.length <= 2000\n\u200b\u200b\u200b\u200b\u200b\u200b0 <= nums[i] < 2^10", "notes": ""}, "1782": {"label": "Hard", "title": "Count Pairs Of Nodes", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3709, "total_accepted": 4100.0, "total_submissions": 11200.0, "testcase_example": "'4\\n[[1,2],[2,4],[1,3],[2,3],[2,1]]\\n[2,3]'", "body": "You are given an undirected graph defined by an integer n, the number of nodes, and a 2D integer array edges, the edges in the graph, where edges[i] = [ui, vi] indicates that there is an undirected edge between ui and vi. You are also given an integer array queries.\nLet incident(a, b) be defined as the number of edges that are connected to either node a or b.\nThe answer to the j^th query is the number of pairs of nodes (a, b) that satisfy both of the following conditions:\na < b\nincident(a, b) > queries[j]\nReturn an array answers such that answers.length == queries.length and answers[j] is the answer of the j^th query.\nNote that there can be multiple edges between the same two nodes.", "examples": [{"full_text": "Example 1:\nInput: n = 4, edges = [[1,2],[2,4],[1,3],[2,3],[2,1]], queries = [2,3]\nOutput: [6,5]\nExplanation: The calculations for incident(a, b) are shown in the table above.\nThe answers for each of the queries are as follows:\n- answers[0] = 6. All the pairs have an incident(a, b) value greater than 2.\n- answers[1] = 5. All the pairs except (3, 4) have an incident(a, b) value greater than 3.", "input": "Input: n = 4, edges = [[1,2],[2,4],[1,3],[2,3],[2,1]], queries = [2,3]", "output": "Output: [6,5]", "explanation": "Explanation: The calculations for incident(a, b) are shown in the table above.\nThe answers for each of the queries are as follows:\n- answers[0] = 6. All the pairs have an incident(a, b) value greater than 2.\n- answers[1] = 5. All the pairs except (3, 4) have an incident(a, b) value greater than 3."}, {"full_text": "Example 2:\nInput: n = 5, edges = [[1,5],[1,5],[3,4],[2,5],[1,3],[5,1],[2,3],[2,5]], queries = [1,2,3,4,5]\nOutput: [10,10,9,8,6]", "input": "Input: n = 5, edges = [[1,5],[1,5],[3,4],[2,5],[1,3],[5,1],[2,3],[2,5]], queries = [1,2,3,4,5]", "output": "Output: [10,10,9,8,6]", "explanation": ""}], "constraints": "Constraints:\n2 <= n <= 2 * 10^4\n1 <= edges.length <= 10^5\n1 <= ui, vi <= n\nui != vi\n1 <= queries.length <= 20\n0 <= queries[j] < edges.length", "notes": ""}, "1776": {"label": "Hard", "title": "Car Fleet II", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5257000000000001, "total_accepted": 17300.0, "total_submissions": 33000.0, "testcase_example": "'[[1,2],[2,1],[4,3],[7,2]]'", "body": "There are n cars traveling at different speeds in the same direction along a one-lane road. You are given an array cars of length n, where cars[i] = [positioni, speedi] represents:\npositioni is the distance between the i^th car and the beginning of the road in meters. It is guaranteed that positioni < positioni+1.\nspeedi is the initial speed of the i^th car in meters per second.\nFor simplicity, cars can be considered as points moving along the number line. Two cars collide when they occupy the same position. Once a car collides with another car, they unite and form a single car fleet. The cars in the formed fleet will have the same position and the same speed, which is the initial speed of the slowest car in the fleet.\nReturn an array answer, where answer[i] is the time, in seconds, at which the i^th car collides with the next car, or -1 if the car does not collide with the next car. Answers within 10^-5 of the actual answers are accepted.", "examples": [{"full_text": "Example 1:\nInput: cars = [[1,2],[2,1],[4,3],[7,2]]\nOutput: [1.00000,-1.00000,3.00000,-1.00000]\nExplanation: After exactly one second, the first car will collide with the second car, and form a car fleet with speed 1 m/s. After exactly 3 seconds, the third car will collide with the fourth car, and form a car fleet with speed 2 m/s.", "input": "Input: cars = [[1,2],[2,1],[4,3],[7,2]]", "output": "Output: [1.00000,-1.00000,3.00000,-1.00000]", "explanation": "Explanation: After exactly one second, the first car will collide with the second car, and form a car fleet with speed 1 m/s. After exactly 3 seconds, the third car will collide with the fourth car, and form a car fleet with speed 2 m/s."}, {"full_text": "Example 2:\nInput: cars = [[3,4],[5,4],[6,3],[9,1]]\nOutput: [2.00000,1.00000,1.50000,-1.00000]", "input": "Input: cars = [[3,4],[5,4],[6,3],[9,1]]", "output": "Output: [2.00000,1.00000,1.50000,-1.00000]", "explanation": ""}], "constraints": "Constraints:\n1 <= cars.length <= 10^5\n1 <= positioni, speedi <= 10^6\npositioni < positioni+1", "notes": ""}, "1771": {"label": "Hard", "title": "Maximize Palindrome Length From Subsequences", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3472, "total_accepted": 7000.0, "total_submissions": 20100.0, "testcase_example": "'\"cacb\"\\n\"cbba\"'", "body": "You are given two strings, word1 and word2. You want to construct a string in the following manner:\nChoose some non-empty subsequence subsequence1 from word1.\nChoose some non-empty subsequence subsequence2 from word2.\nConcatenate the subsequences: subsequence1 + subsequence2, to make the string.\nReturn the length of the longest palindrome that can be constructed in the described manner. If no palindromes can be constructed, return 0.\nA subsequence of a string s is a string that can be made by deleting some (possibly none) characters from s without changing the order of the remaining characters.\nA palindrome is a string that reads the same forward\nas well as backward.", "examples": [{"full_text": "Example 1:\nInput: word1 = \"cacb\", word2 = \"cbba\"\nOutput: 5\nExplanation: Choose \"ab\" from word1 and \"cba\" from word2 to make \"abcba\", which is a palindrome.", "input": "Input: word1 = \"cacb\", word2 = \"cbba\"", "output": "Output: 5", "explanation": "Explanation: Choose \"ab\" from word1 and \"cba\" from word2 to make \"abcba\", which is a palindrome."}, {"full_text": "Example 2:\nInput: word1 = \"ab\", word2 = \"ab\"\nOutput: 3\nExplanation: Choose \"ab\" from word1 and \"a\" from word2 to make \"aba\", which is a palindrome.", "input": "Input: word1 = \"ab\", word2 = \"ab\"", "output": "Output: 3", "explanation": "Explanation: Choose \"ab\" from word1 and \"a\" from word2 to make \"aba\", which is a palindrome."}, {"full_text": "Example 3:\nInput: word1 = \"aa\", word2 = \"bb\"\nOutput: 0\nExplanation: You cannot construct a palindrome from the described method, so return 0.", "input": "Input: word1 = \"aa\", word2 = \"bb\"", "output": "Output: 0", "explanation": "Explanation: You cannot construct a palindrome from the described method, so return 0."}], "constraints": "Constraints:\n1 <= word1.length, word2.length <= 1000\nword1 and word2 consist of lowercase English letters.", "notes": ""}, "1766": {"label": "Hard", "title": "Tree of Coprimes", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3791, "total_accepted": 5100.0, "total_submissions": 13500.0, "testcase_example": "'[2,3,3,2]\\n[[0,1],[1,2],[1,3]]'", "body": "There is a tree (i.e.,\na connected, undirected graph that has no cycles) consisting of n nodes numbered from 0 to n - 1 and exactly n - 1 edges. Each node has a value associated with it, and the root of the tree is node 0.\nTo represent this tree, you are given an integer array nums and a 2D array edges. Each nums[i] represents the i^th node's value, and each edges[j] = [uj, vj] represents an edge between nodes uj and vj in the tree.\nTwo values x and y are coprime if gcd(x, y) == 1 where gcd(x, y) is the greatest common divisor of x and y.\nAn ancestor of a node i is any other node on the shortest path from node i to the root. A node is not considered an ancestor of itself.\nReturn an array ans of size n, where ans[i] is the closest ancestor to node i such that nums[i] and nums[ans[i]] are coprime, or -1 if there is no such ancestor.", "examples": [{"full_text": "Example 1:\nInput: nums = [2,3,3,2], edges = [[0,1],[1,2],[1,3]]\nOutput: [-1,0,0,1]\nExplanation: In the above figure, each node's value is in parentheses.\n- Node 0 has no coprime ancestors.\n- Node 1 has only one ancestor, node 0. Their values are coprime (gcd(2,3) == 1).\n- Node 2 has two ancestors, nodes 1 and 0. Node 1's value is not coprime (gcd(3,3) == 3), but node 0's\nvalue is (gcd(2,3) == 1), so node 0 is the closest valid ancestor.\n- Node 3 has two ancestors, nodes 1 and 0. It is coprime with node 1 (gcd(3,2) == 1), so node 1 is its\nclosest valid ancestor.", "input": "Input: nums = [2,3,3,2], edges = [[0,1],[1,2],[1,3]]", "output": "Output: [-1,0,0,1]", "explanation": "Explanation: In the above figure, each node's value is in parentheses.\n- Node 0 has no coprime ancestors.\n- Node 1 has only one ancestor, node 0. Their values are coprime (gcd(2,3) == 1).\n- Node 2 has two ancestors, nodes 1 and 0. Node 1's value is not coprime (gcd(3,3) == 3), but node 0's\nvalue is (gcd(2,3) == 1), so node 0 is the closest valid ancestor.\n- Node 3 has two ancestors, nodes 1 and 0. It is coprime with node 1 (gcd(3,2) == 1), so node 1 is its\nclosest valid ancestor."}, {"full_text": "Example 2:\nInput: nums = [5,6,10,2,3,6,15], edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6]]\nOutput: [-1,0,-1,0,0,0,-1]", "input": "Input: nums = [5,6,10,2,3,6,15], edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6]]", "output": "Output: [-1,0,-1,0,0,0,-1]", "explanation": ""}], "constraints": "Constraints:\nnums.length == n\n1 <= nums[i] <= 50\n1 <= n <= 10^5\nedges.length == n - 1\nedges[j].length == 2\n0 <= uj, vj < n\nuj != vj", "notes": ""}, "1761": {"label": "Hard", "title": "Minimum Degree of a Connected Trio in a Graph", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.41369999999999996, "total_accepted": 13600.0, "total_submissions": 32900.0, "testcase_example": "'6\\n[[1,2],[1,3],[3,2],[4,1],[5,2],[3,6]]'", "body": "You are given an undirected graph. You are given an integer n which is the number of nodes in the graph and an array edges, where each edges[i] = [ui, vi] indicates that there is an undirected edge between ui and vi.\nA connected trio is a set of three nodes where there is an edge between every pair of them.\nThe degree of a connected trio is the number of edges where one endpoint is in the trio, and the other is not.\nReturn the minimum degree of a connected trio in the graph, or -1 if the graph has no connected trios.", "examples": [{"full_text": "Example 1:\nInput: n = 6, edges = [[1,2],[1,3],[3,2],[4,1],[5,2],[3,6]]\nOutput: 3\nExplanation: There is exactly one trio, which is [1,2,3]. The edges that form its degree are bolded in the figure above.", "input": "Input: n = 6, edges = [[1,2],[1,3],[3,2],[4,1],[5,2],[3,6]]", "output": "Output: 3", "explanation": "Explanation: There is exactly one trio, which is [1,2,3]. The edges that form its degree are bolded in the figure above."}, {"full_text": "Example 2:\nInput: n = 7, edges = [[1,3],[4,1],[4,3],[2,5],[5,6],[6,7],[7,5],[2,6]]\nOutput: 0\nExplanation: There are exactly three trios:\n1) [1,4,3] with degree 0.\n2) [2,5,6] with degree 2.\n3) [5,6,7] with degree 2.", "input": "Input: n = 7, edges = [[1,3],[4,1],[4,3],[2,5],[5,6],[6,7],[7,5],[2,6]]", "output": "Output: 0", "explanation": "Explanation: There are exactly three trios:\n1) [1,4,3] with degree 0.\n2) [2,5,6] with degree 2.\n3) [5,6,7] with degree 2."}], "constraints": "Constraints:\n2 <= n <= 400\nedges[i].length == 2\n1 <= edges.length <= n * (n-1) / 2\n1 <= ui, vi <= n\nui != vi\nThere are no repeated edges.", "notes": ""}, "1755": {"label": "Hard", "title": "Closest Subsequence Sum", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3651, "total_accepted": 8100.0, "total_submissions": 22100.0, "testcase_example": "'[5,-7,3,5]\\n6'", "body": "You are given an integer array nums and an integer goal.\nYou want to choose a subsequence of nums such that the sum of its elements is the closest possible to goal. That is, if the sum of the subsequence's elements is sum, then you want to minimize the absolute difference abs(sum - goal).\nReturn the minimum possible value of abs(sum - goal).\nNote that a subsequence of an array is an array formed by removing some elements (possibly all or none) of the original array.", "examples": [{"full_text": "Example 1:\nInput: nums = [5,-7,3,5], goal = 6\nOutput: 0\nExplanation: Choose the whole array as a subsequence, with a sum of 6.\nThis is equal to the goal, so the absolute difference is 0.", "input": "Input: nums = [5,-7,3,5], goal = 6", "output": "Output: 0", "explanation": "Explanation: Choose the whole array as a subsequence, with a sum of 6.\nThis is equal to the goal, so the absolute difference is 0."}, {"full_text": "Example 2:\nInput: nums = [7,-9,15,-2], goal = -5\nOutput: 1\nExplanation: Choose the subsequence [7,-9,-2], with a sum of -4.\nThe absolute difference is abs(-4 - (-5)) = abs(1) = 1, which is the minimum.", "input": "Input: nums = [7,-9,15,-2], goal = -5", "output": "Output: 1", "explanation": "Explanation: Choose the subsequence [7,-9,-2], with a sum of -4.\nThe absolute difference is abs(-4 - (-5)) = abs(1) = 1, which is the minimum."}, {"full_text": "Example 3:\nInput: nums = [1,2,3], goal = -7\nOutput: 7", "input": "Input: nums = [1,2,3], goal = -7", "output": "Output: 7", "explanation": ""}], "constraints": "Constraints:\n1 <= nums.length <= 40\n-10^7 <= nums[i] <= 10^7\n-10^9 <= goal <= 10^9", "notes": ""}, "1751": {"label": "Hard", "title": "Maximum Number of Events That Can Be Attended II", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5478999999999999, "total_accepted": 12900.0, "total_submissions": 23500.0, "testcase_example": "'[[1,2,4],[3,4,3],[2,3,1]]\\n2'", "body": "You are given an array of events where events[i] = [startDayi, endDayi, valuei]. The i^th event starts at startDayi and ends at endDayi, and if you attend this event, you will receive a value of valuei. You are also given an integer k which represents the maximum number of events you can attend.\nYou can only attend one event at a time. If you choose to attend an event, you must attend the entire event. Note that the end day is inclusive: that is, you cannot attend two events where one of them starts and the other ends on the same day.\nReturn the maximum sum of values that you can receive by attending events.", "examples": [{"full_text": "Example 1:\nInput: events = [[1,2,4],[3,4,3],[2,3,1]], k = 2\nOutput: 7\nExplanation: Choose the green events, 0 and 1 (0-indexed) for a total value of 4 + 3 = 7.", "input": "Input: events = [[1,2,4],[3,4,3],[2,3,1]], k = 2", "output": "Output: 7", "explanation": "Explanation: Choose the green events, 0 and 1 (0-indexed) for a total value of 4 + 3 = 7."}, {"full_text": "Example 2:\nInput: events = [[1,2,4],[3,4,3],[2,3,10]], k = 2\nOutput: 10\nExplanation: Choose event 2 for a total value of 10.\nNotice that you cannot attend any other event as they overlap, and that you do not have to attend k events.", "input": "Input: events = [[1,2,4],[3,4,3],[2,3,10]], k = 2", "output": "Output: 10", "explanation": "Explanation: Choose event 2 for a total value of 10.\nNotice that you cannot attend any other event as they overlap, and that you do not have to attend k events."}, {"full_text": "Example 3:\nInput: events = [[1,1,1],[2,2,2],[3,3,3],[4,4,4]], k = 3\nOutput: 9\nExplanation: Although the events do not overlap, you can only attend 3 events. Pick the highest valued three.", "input": "Input: events = [[1,1,1],[2,2,2],[3,3,3],[4,4,4]], k = 3", "output": "Output: 9", "explanation": "Explanation: Although the events do not overlap, you can only attend 3 events. Pick the highest valued three."}], "constraints": "Constraints:\n1 <= k <= events.length\n1 <= k * events.length <= 10^6\n1 <= startDayi <= endDayi <= 10^9\n1 <= valuei <= 10^6", "notes": ""}, "1745": {"label": "Hard", "title": "Palindrome Partitioning IV", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4936, "total_accepted": 13800.0, "total_submissions": 27900.0, "testcase_example": "'\"abcbdd\"'", "body": "Given a string s, return true if it is possible to split the string s into three non-empty palindromic substrings. Otherwise, return false.\u200b\u200b\u200b\u200b\u200b\nA string is said to be palindrome if it the same string when reversed.", "examples": [{"full_text": "Example 1:\nInput: s = \"abcbdd\"\nOutput: true\nExplanation: \"abcbdd\" = \"a\" + \"bcb\" + \"dd\", and all three substrings are palindromes.", "input": "Input: s = \"abcbdd\"", "output": "Output: true", "explanation": "Explanation: \"abcbdd\" = \"a\" + \"bcb\" + \"dd\", and all three substrings are palindromes."}, {"full_text": "Example 2:\nInput: s = \"bcbddxy\"\nOutput: false\nExplanation: s cannot be split into 3 palindromes.", "input": "Input: s = \"bcbddxy\"", "output": "Output: false", "explanation": "Explanation: s cannot be split into 3 palindromes."}], "constraints": "Constraints:\n3 <= s.length <= 2000\ns\u200b\u200b\u200b\u200b\u200b\u200b consists only of lowercase English letters.", "notes": ""}, "1739": {"label": "Hard", "title": "Building Boxes", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5064, "total_accepted": 4700.0, "total_submissions": 9200.0, "testcase_example": "'3'", "body": "You have a cubic storeroom where the width, length, and height of the room are all equal to n units. You are asked to place n boxes in this room where each box is a cube of unit side length. There are however some rules to placing the boxes:\nYou can place the boxes anywhere on the floor.\nIf box x is placed on top of the box y, then each side of the four vertical sides of the box y must either be adjacent to another box or to a wall.\nGiven an integer n, return the minimum possible number of boxes touching the floor.", "examples": [{"full_text": "Example 1:\nInput: n = 3\nOutput: 3\nExplanation: The figure above is for the placement of the three boxes.\nThese boxes are placed in the corner of the room, where the corner is on the left side.", "input": "Input: n = 3", "output": "Output: 3", "explanation": "Explanation: The figure above is for the placement of the three boxes.\nThese boxes are placed in the corner of the room, where the corner is on the left side."}, {"full_text": "Example 2:\nInput: n = 4\nOutput: 3\nExplanation: The figure above is for the placement of the four boxes.\nThese boxes are placed in the corner of the room, where the corner is on the left side.", "input": "Input: n = 4", "output": "Output: 3", "explanation": "Explanation: The figure above is for the placement of the four boxes.\nThese boxes are placed in the corner of the room, where the corner is on the left side."}, {"full_text": "Example 3:\nInput: n = 10\nOutput: 6\nExplanation: The figure above is for the placement of the ten boxes.\nThese boxes are placed in the corner of the room, where the corner is on the back side.", "input": "Input: n = 10", "output": "Output: 6", "explanation": "Explanation: The figure above is for the placement of the ten boxes.\nThese boxes are placed in the corner of the room, where the corner is on the back side."}], "constraints": "Constraints:\n1 <= n <= 10^9", "notes": ""}, "1735": {"label": "Hard", "title": "Count Ways to Make Array With Product", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.494, "total_accepted": 3100.0, "total_submissions": 6200.0, "testcase_example": "'[[2,6],[5,1],[73,660]]'", "body": "You are given a 2D integer array, queries. For each queries[i], where queries[i] = [ni, ki], find the number of different ways you can place positive integers into an array of size ni such that the product of the integers is ki. As the number of ways may be too large, the answer to the i^th query is the number of ways modulo 10^9 + 7.\nReturn an integer array answer where answer.length == queries.length, and answer[i] is the answer to the i^th query.", "examples": [{"full_text": "Example 1:\nInput: queries = [[2,6],[5,1],[73,660]]\nOutput: [4,1,50734910]\nExplanation:\nEach query is independent.\n[2,6]: There are 4 ways to fill an array of size 2 that multiply to 6: [1,6], [2,3], [3,2], [6,1].\n[5,1]: There is 1 way to fill an array of size 5 that multiply to 1: [1,1,1,1,1].\n[73,660]: There are 1050734917 ways to fill an array of size 73 that multiply to 660. 1050734917 modulo 10^9 + 7 = 50734910.", "input": "Input: queries = [[2,6],[5,1],[73,660]]", "output": "Output: [4,1,50734910]", "explanation": "Explanation:\nEach query is independent.\n[2,6]: There are 4 ways to fill an array of size 2 that multiply to 6: [1,6], [2,3], [3,2], [6,1].\n[5,1]: There is 1 way to fill an array of size 5 that multiply to 1: [1,1,1,1,1].\n[73,660]: There are 1050734917 ways to fill an array of size 73 that multiply to 660. 1050734917 modulo 10^9 + 7 = 50734910."}, {"full_text": "Example 2:\nInput: queries = [[1,1],[2,2],[3,3],[4,4],[5,5]]\nOutput: [1,2,3,10,5]", "input": "Input: queries = [[1,1],[2,2],[3,3],[4,4],[5,5]]", "output": "Output: [1,2,3,10,5]", "explanation": ""}], "constraints": "Constraints:\n1 <= queries.length <= 10^4\n1 <= ni, ki <= 10^4", "notes": ""}, "1728": {"label": "Hard", "title": "Cat and Mouse II", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4023, "total_accepted": 4200.0, "total_submissions": 10400.0, "testcase_example": "'[\"####F\",\"#C...\",\"M....\"]\\n1\\n2'", "body": "A game is played by a cat and a mouse named Cat and Mouse.\nThe environment is represented by a grid of size rows x cols, where each element is a wall, floor, player (Cat, Mouse), or food.\nPlayers are represented by the characters 'C'(Cat),'M'(Mouse).\nFloors are represented by the character '.' and can be walked on.\nWalls are represented by the character '#' and cannot be walked on.\nFood is represented by the character 'F' and can be walked on.\nThere is only one of each character 'C', 'M', and 'F' in grid.\nMouse and Cat play according to the following rules:\nMouse moves first, then they take turns to move.\nDuring each turn, Cat and Mouse can jump in one of the four directions (left, right, up, down). They cannot jump over the wall nor outside of the grid.\ncatJump, mouseJump are the maximum lengths Cat and Mouse can jump at a time, respectively. Cat and Mouse can jump less than the maximum length.\nStaying in the same position is allowed.\nMouse can jump over Cat.\nThe game can end in 4 ways:\nIf Cat occupies the same position as Mouse, Cat wins.\nIf Cat reaches the food first, Cat wins.\nIf Mouse reaches the food first, Mouse wins.\nIf Mouse cannot get to the food within 1000 turns, Cat wins.\nGiven a rows x cols matrix grid and two integers catJump and mouseJump, return true if Mouse can win the game if both Cat and Mouse play optimally, otherwise return false.", "examples": [{"full_text": "Example 1:\nInput: grid = [\"####F\",\"#C...\",\"M....\"], catJump = 1, mouseJump = 2\nOutput: true\nExplanation: Cat cannot catch Mouse on its turn nor can it get the food before Mouse.", "input": "Input: grid = [\"####F\",\"#C...\",\"M....\"], catJump = 1, mouseJump = 2", "output": "Output: true", "explanation": "Explanation: Cat cannot catch Mouse on its turn nor can it get the food before Mouse."}, {"full_text": "Example 2:\nInput: grid = [\"M.C...F\"], catJump = 1, mouseJump = 4\nOutput: true", "input": "Input: grid = [\"M.C...F\"], catJump = 1, mouseJump = 4", "output": "Output: true", "explanation": ""}, {"full_text": "Example 3:\nInput: grid = [\"M.C...F\"], catJump = 1, mouseJump = 3\nOutput: false", "input": "Input: grid = [\"M.C...F\"], catJump = 1, mouseJump = 3", "output": "Output: false", "explanation": ""}], "constraints": "Constraints:\nrows == grid.length\ncols = grid[i].length\n1 <= rows, cols <= 8\ngrid[i][j] consist only of characters 'C', 'M', 'F', '.', and '#'.\nThere is only one of each character 'C', 'M', and 'F' in grid.\n1 <= catJump, mouseJump <= 8", "notes": ""}, "1723": {"label": "Hard", "title": "Find Minimum Time to Finish All Jobs", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.42700000000000005, "total_accepted": 12500.0, "total_submissions": 29300.0, "testcase_example": "'[3,2,3]\\n3'", "body": "You are given an integer array jobs, where jobs[i] is the amount of time it takes to complete the i^th job.\nThere are k workers that you can assign jobs to. Each job should be assigned to exactly one worker. The working time of a worker is the sum of the time it takes to complete all jobs assigned to them. Your goal is to devise an optimal assignment such that the maximum working time of any worker is minimized.\nReturn the minimum possible maximum working time of any assignment.", "examples": [{"full_text": "Example 1:\nInput: jobs = [3,2,3], k = 3\nOutput: 3\nExplanation: By assigning each person one job, the maximum time is 3.", "input": "Input: jobs = [3,2,3], k = 3", "output": "Output: 3", "explanation": "Explanation: By assigning each person one job, the maximum time is 3."}, {"full_text": "Example 2:\nInput: jobs = [1,2,4,7,8], k = 2\nOutput: 11\nExplanation: Assign the jobs the following way:\nWorker 1: 1, 2, 8 (working time = 1 + 2 + 8 = 11)\nWorker 2: 4, 7 (working time = 4 + 7 = 11)\nThe maximum working time is 11.", "input": "Input: jobs = [1,2,4,7,8], k = 2", "output": "Output: 11", "explanation": "Explanation: Assign the jobs the following way:\nWorker 1: 1, 2, 8 (working time = 1 + 2 + 8 = 11)\nWorker 2: 4, 7 (working time = 4 + 7 = 11)\nThe maximum working time is 11."}], "constraints": "Constraints:\n1 <= k <= jobs.length <= 12\n1 <= jobs[i] <= 10^7", "notes": ""}, "1719": {"label": "Hard", "title": "Number Of Ways To Reconstruct A Tree", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.415, "total_accepted": 2300.0, "total_submissions": 5500.0, "testcase_example": "'[[1,2],[2,3]]'", "body": "You are given an array pairs, where pairs[i] = [xi, yi], and:\nThere are no duplicates.\nxi < yi\nLet ways be the number of rooted trees that satisfy the following conditions:\nThe tree consists of nodes whose values appeared in pairs.\nA pair [xi, yi] exists in pairs if and only if xi is an ancestor of yi or yi is an ancestor of xi.\nNote: the tree does not have to be a binary tree.\nTwo ways are considered to be different if there is at least one node that has different parents in both ways.\nReturn:\n0 if ways == 0\n1 if ways == 1\n2 if ways > 1\nA rooted tree is a tree that has a single root node, and all edges are oriented to be outgoing from the root.\nAn ancestor of a node is any node on the path from the root to that node (excluding the node itself). The root has no ancestors.", "examples": [{"full_text": "Example 1:\nInput: pairs = [[1,2],[2,3]]\nOutput: 1\nExplanation: There is exactly one valid rooted tree, which is shown in the above figure.", "input": "Input: pairs = [[1,2],[2,3]]", "output": "Output: 1", "explanation": "Explanation: There is exactly one valid rooted tree, which is shown in the above figure."}, {"full_text": "Example 2:\nInput: pairs = [[1,2],[2,3],[1,3]]\nOutput: 2\nExplanation: There are multiple valid rooted trees. Three of them are shown in the above figures.", "input": "Input: pairs = [[1,2],[2,3],[1,3]]", "output": "Output: 2", "explanation": "Explanation: There are multiple valid rooted trees. Three of them are shown in the above figures."}, {"full_text": "Example 3:\nInput: pairs = [[1,2],[2,3],[2,4],[1,5]]\nOutput: 0\nExplanation: There are no valid rooted trees.", "input": "Input: pairs = [[1,2],[2,3],[2,4],[1,5]]", "output": "Output: 0", "explanation": "Explanation: There are no valid rooted trees."}], "constraints": "Constraints:\n1 <= pairs.length <= 10^5\n1 <= xi < yi <= 500\nThe elements in pairs are unique.", "notes": ""}, "1713": {"label": "Hard", "title": "Minimum Operations to Make a Subsequence", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.48219999999999996, "total_accepted": 6500.0, "total_submissions": 13500.0, "testcase_example": "'[5,1,3]\\n[9,4,2,3,4]'", "body": "You are given an array target that consists of distinct integers and another integer array arr that can have duplicates.\nIn one operation, you can insert any integer at any position in arr. For example, if arr = [1,4,1,2], you can add 3 in the middle and make it [1,4,3,1,2]. Note that you can insert the integer at the very beginning or end of the array.\nReturn the minimum number of operations needed to make target a subsequence of arr.\nA subsequence of an array is a new array generated from the original array by deleting some elements (possibly none) without changing the remaining elements' relative order. For example, [2,7,4] is a subsequence of [4,2,3,7,2,1,4] (the underlined elements), while [2,4,2] is not.", "examples": [{"full_text": "Example 1:\nInput: target = [5,1,3], arr = [9,4,2,3,4]\nOutput: 2\nExplanation: You can add 5 and 1 in such a way that makes arr = [5,9,4,1,2,3,4], then target will be a subsequence of arr.", "input": "Input: target = [5,1,3], arr = [9,4,2,3,4]", "output": "Output: 2", "explanation": "Explanation: You can add 5 and 1 in such a way that makes arr = [5,9,4,1,2,3,4], then target will be a subsequence of arr."}, {"full_text": "Example 2:\nInput: target = [6,4,8,1,3,2], arr = [4,7,6,2,3,8,6,1]\nOutput: 3", "input": "Input: target = [6,4,8,1,3,2], arr = [4,7,6,2,3,8,6,1]", "output": "Output: 3", "explanation": ""}], "constraints": "Constraints:\n1 <= target.length, arr.length <= 10^5\n1 <= target[i], arr[i] <= 10^9\ntarget contains no duplicates.", "notes": ""}, "1707": {"label": "Hard", "title": "Maximum XOR With an Element From Array", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4311, "total_accepted": 7900.0, "total_submissions": 18400.0, "testcase_example": "'[0,1,2,3,4]\\n[[3,1],[1,3],[5,6]]'", "body": "You are given an array nums consisting of non-negative integers. You are also given a queries array, where queries[i] = [xi, mi].\nThe answer to the i^th query is the maximum bitwise XOR value of xi and any element of nums that does not exceed mi. In other words, the answer is max(nums[j] XOR xi) for all j such that nums[j] <= mi. If all elements in nums are larger than mi, then the answer is -1.\nReturn an integer array answer where answer.length == queries.length and answer[i] is the answer to the i^th query.", "examples": [{"full_text": "Example 1:\nInput: nums = [0,1,2,3,4], queries = [[3,1],[1,3],[5,6]]\nOutput: [3,3,7]\nExplanation:\n1) 0 and 1 are the only two integers not greater than 1. 0 XOR 3 = 3 and 1 XOR 3 = 2. The larger of the two is 3.\n2) 1 XOR 2 = 3.\n3) 5 XOR 2 = 7.", "input": "Input: nums = [0,1,2,3,4], queries = [[3,1],[1,3],[5,6]]", "output": "Output: [3,3,7]", "explanation": "Explanation:\n1) 0 and 1 are the only two integers not greater than 1. 0 XOR 3 = 3 and 1 XOR 3 = 2. The larger of the two is 3.\n2) 1 XOR 2 = 3.\n3) 5 XOR 2 = 7."}, {"full_text": "Example 2:\nInput: nums = [5,2,4,6,6,3], queries = [[12,4],[8,1],[6,3]]\nOutput: [15,-1,5]", "input": "Input: nums = [5,2,4,6,6,3], queries = [[12,4],[8,1],[6,3]]", "output": "Output: [15,-1,5]", "explanation": ""}], "constraints": "Constraints:\n1 <= nums.length, queries.length <= 10^5\nqueries[i].length == 2\n0 <= nums[j], xi, mi <= 10^9", "notes": ""}, "1703": {"label": "Hard", "title": "Minimum Adjacent Swaps for K Consecutive Ones", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3993, "total_accepted": 5300.0, "total_submissions": 13400.0, "testcase_example": "'[1,0,0,1,0,1]\\n2'", "body": "You are given an integer array, nums, and an integer k. nums comprises of only 0's and 1's. In one move, you can choose two adjacent indices and swap their values.\nReturn the minimum number of moves required so that nums has k consecutive 1's.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,0,0,1,0,1], k = 2\nOutput: 1\nExplanation: In 1 move, nums could be [1,0,0,0,1,1] and have 2 consecutive 1's.", "input": "Input: nums = [1,0,0,1,0,1], k = 2", "output": "Output: 1", "explanation": "Explanation: In 1 move, nums could be [1,0,0,0,1,1] and have 2 consecutive 1's."}, {"full_text": "Example 2:\nInput: nums = [1,0,0,0,0,0,1,1], k = 3\nOutput: 5\nExplanation: In 5 moves, the leftmost 1 can be shifted right until nums = [0,0,0,0,0,1,1,1].", "input": "Input: nums = [1,0,0,0,0,0,1,1], k = 3", "output": "Output: 5", "explanation": "Explanation: In 5 moves, the leftmost 1 can be shifted right until nums = [0,0,0,0,0,1,1,1]."}, {"full_text": "Example 3:\nInput: nums = [1,1,0,1], k = 2\nOutput: 0\nExplanation: nums already has 2 consecutive 1's.", "input": "Input: nums = [1,1,0,1], k = 2", "output": "Output: 0", "explanation": "Explanation: nums already has 2 consecutive 1's."}], "constraints": "Constraints:\n1 <= nums.length <= 10^5\nnums[i] is 0 or 1.\n1 <= k <= sum(nums)", "notes": ""}, "1697": {"label": "Hard", "title": "Checking Existence of Edge Length Limited Paths", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4842, "total_accepted": 7400.0, "total_submissions": 15300.0, "testcase_example": "'3\\n[[0,1,2],[1,2,4],[2,0,8],[1,0,16]]\\n[[0,1,2],[0,2,5]]'", "body": "An undirected graph of n nodes is defined by edgeList, where edgeList[i] = [ui, vi, disi] denotes an edge between nodes ui and vi with distance disi. Note that there may be multiple edges between two nodes.\nGiven an array queries, where queries[j] = [pj, qj, limitj], your task is to determine for each queries[j] whether there is a path between pj and qj such that each edge on the path has a distance strictly less than limitj .\nReturn a boolean array answer, where answer.length == queries.length and the j^th value of answer is true if there is a path for queries[j] is true, and false otherwise.", "examples": [{"full_text": "Example 1:\nInput: n = 3, edgeList = [[0,1,2],[1,2,4],[2,0,8],[1,0,16]], queries = [[0,1,2],[0,2,5]]\nOutput: [false,true]\nExplanation: The above figure shows the given graph. Note that there are two overlapping edges between 0 and 1 with distances 2 and 16.\nFor the first query, between 0 and 1 there is no path where each distance is less than 2, thus we return false for this query.\nFor the second query, there is a path (0 -> 1 -> 2) of two edges with distances less than 5, thus we return true for this query.", "input": "Input: n = 3, edgeList = [[0,1,2],[1,2,4],[2,0,8],[1,0,16]], queries = [[0,1,2],[0,2,5]]", "output": "Output: [false,true]", "explanation": "Explanation: The above figure shows the given graph. Note that there are two overlapping edges between 0 and 1 with distances 2 and 16.\nFor the first query, between 0 and 1 there is no path where each distance is less than 2, thus we return false for this query.\nFor the second query, there is a path (0 -> 1 -> 2) of two edges with distances less than 5, thus we return true for this query."}, {"full_text": "Example 2:\nInput: n = 5, edgeList = [[0,1,10],[1,2,5],[2,3,9],[3,4,13]], queries = [[0,4,14],[1,4,13]]\nOutput: [true,false]\nExaplanation: The above figure shows the given graph.", "input": "Input: n = 5, edgeList = [[0,1,10],[1,2,5],[2,3,9],[3,4,13]], queries = [[0,4,14],[1,4,13]]", "output": "Output: [true,false]\nExaplanation: The above figure shows the given graph.", "explanation": ""}], "constraints": "Constraints:\n2 <= n <= 10^5\n1 <= edgeList.length, queries.length <= 10^5\nedgeList[i].length == 3\nqueries[j].length == 3\n0 <= ui, vi, pj, qj <= n - 1\nui != vi\npj != qj\n1 <= disi, limitj <= 10^9\nThere may be multiple edges between two nodes.", "notes": ""}, "1691": {"label": "Hard", "title": "Maximum Height by Stacking Cuboids", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5341, "total_accepted": 9800.0, "total_submissions": 18300.0, "testcase_example": "'[[50,45,20],[95,37,53],[45,23,12]]'", "body": "Given n cuboids where the dimensions of the i^th cuboid is cuboids[i] = [widthi, lengthi, heighti] (0-indexed). Choose a subset of cuboids and place them on each other.\nYou can place cuboid i on cuboid j if widthi <= widthj and lengthi <= lengthj and heighti <= heightj. You can rearrange any cuboid's dimensions by rotating it to put it on another cuboid.\nReturn the maximum height of the stacked cuboids.", "examples": [{"full_text": "Example 1:\nInput: cuboids = [[50,45,20],[95,37,53],[45,23,12]]\nOutput: 190\nExplanation:\nCuboid 1 is placed on the bottom with the 53x37 side facing down with height 95.\nCuboid 0 is placed next with the 45x20 side facing down with height 50.\nCuboid 2 is placed next with the 23x12 side facing down with height 45.\nThe total height is 95 + 50 + 45 = 190.", "input": "Input: cuboids = [[50,45,20],[95,37,53],[45,23,12]]", "output": "Output: 190", "explanation": "Explanation:\nCuboid 1 is placed on the bottom with the 53x37 side facing down with height 95.\nCuboid 0 is placed next with the 45x20 side facing down with height 50.\nCuboid 2 is placed next with the 23x12 side facing down with height 45.\nThe total height is 95 + 50 + 45 = 190."}, {"full_text": "Example 2:\nInput: cuboids = [[38,25,45],[76,35,3]]\nOutput: 76\nExplanation:\nYou can't place any of the cuboids on the other.\nWe choose cuboid 1 and rotate it so that the 35x3 side is facing down and its height is 76.", "input": "Input: cuboids = [[38,25,45],[76,35,3]]", "output": "Output: 76", "explanation": "Explanation:\nYou can't place any of the cuboids on the other.\nWe choose cuboid 1 and rotate it so that the 35x3 side is facing down and its height is 76."}, {"full_text": "Example 3:\nInput: cuboids = [[7,11,17],[7,17,11],[11,7,17],[11,17,7],[17,7,11],[17,11,7]]\nOutput: 102\nExplanation:\nAfter rearranging the cuboids, you can see that all cuboids have the same dimension.\nYou can place the 11x7 side down on all cuboids so their heights are 17.\nThe maximum height of stacked cuboids is 6 * 17 = 102.", "input": "Input: cuboids = [[7,11,17],[7,17,11],[11,7,17],[11,17,7],[17,7,11],[17,11,7]]", "output": "Output: 102", "explanation": "Explanation:\nAfter rearranging the cuboids, you can see that all cuboids have the same dimension.\nYou can place the 11x7 side down on all cuboids so their heights are 17.\nThe maximum height of stacked cuboids is 6 * 17 = 102."}], "constraints": "Constraints:\nn == cuboids.length\n1 <= n <= 100\n1 <= widthi, lengthi, heighti <= 100", "notes": ""}, "1687": {"label": "Hard", "title": "Delivering Boxes from Storage to Ports", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3689, "total_accepted": 3300.0, "total_submissions": 9000.0, "testcase_example": "'[[1,1],[2,1],[1,1]]\\n2\\n3\\n3'", "body": "You have the task of delivering some boxes from storage to their ports using only one ship. However, this ship has a limit on the number of boxes and the total weight that it can carry.\nYou are given an array boxes, where boxes[i] = [ports\u200b\u200bi\u200b, weighti], and three integers portsCount, maxBoxes, and maxWeight.\nports\u200b\u200bi is the port where you need to deliver the i^th box and weightsi is the weight of the i^th box.\nportsCount is the number of ports.\nmaxBoxes and maxWeight are the respective box and weight limits of the ship.\nThe boxes need to be delivered in the order they are given. The ship will follow these steps:\nThe ship will take some number of boxes from the boxes queue, not violating the maxBoxes and maxWeight constraints.\nFor each loaded box in order, the ship will make a trip to the port the box needs to be delivered to and deliver it. If the ship is already at the correct port, no trip is needed, and the box can immediately be delivered.\nThe ship then makes a return trip to storage to take more boxes from the queue.\nThe ship must end at storage after all the boxes have been delivered.\nReturn the minimum number of trips the ship needs to make to deliver all boxes to their respective ports.", "examples": [{"full_text": "Example 1:\nInput: boxes = [[1,1],[2,1],[1,1]], portsCount = 2, maxBoxes = 3, maxWeight = 3\nOutput: 4\nExplanation: The optimal strategy is as follows:\n- The ship takes all the boxes in the queue, goes to port 1, then port 2, then port 1 again, then returns to storage. 4 trips.\nSo the total number of trips is 4.\nNote that the first and third boxes cannot be delivered together because the boxes need to be delivered in order (i.e. the second box needs to be delivered at port 2 before the third box).", "input": "Input: boxes = [[1,1],[2,1],[1,1]], portsCount = 2, maxBoxes = 3, maxWeight = 3", "output": "Output: 4", "explanation": "Explanation: The optimal strategy is as follows:\n- The ship takes all the boxes in the queue, goes to port 1, then port 2, then port 1 again, then returns to storage. 4 trips.\nSo the total number of trips is 4.\nNote that the first and third boxes cannot be delivered together because the boxes need to be delivered in order (i.e. the second box needs to be delivered at port 2 before the third box)."}, {"full_text": "Example 2:\nInput: boxes = [[1,2],[3,3],[3,1],[3,1],[2,4]], portsCount = 3, maxBoxes = 3, maxWeight = 6\nOutput: 6\nExplanation: The optimal strategy is as follows:\n- The ship takes the first box, goes to port 1, then returns to storage. 2 trips.\n- The ship takes the second, third and fourth boxes, goes to port 3, then returns to storage. 2 trips.\n- The ship takes the fifth box, goes to port 3, then returns to storage. 2 trips.\nSo the total number of trips is 2 + 2 + 2 = 6.", "input": "Input: boxes = [[1,2],[3,3],[3,1],[3,1],[2,4]], portsCount = 3, maxBoxes = 3, maxWeight = 6", "output": "Output: 6", "explanation": "Explanation: The optimal strategy is as follows:\n- The ship takes the first box, goes to port 1, then returns to storage. 2 trips.\n- The ship takes the second, third and fourth boxes, goes to port 3, then returns to storage. 2 trips.\n- The ship takes the fifth box, goes to port 3, then returns to storage. 2 trips.\nSo the total number of trips is 2 + 2 + 2 = 6."}, {"full_text": "Example 3:\nInput: boxes = [[1,4],[1,2],[2,1],[2,1],[3,2],[3,4]], portsCount = 3, maxBoxes = 6, maxWeight = 7\nOutput: 6\nExplanation: The optimal strategy is as follows:\n- The ship takes the first and second boxes, goes to port 1, then returns to storage. 2 trips.\n- The ship takes the third and fourth boxes, goes to port 2, then returns to storage. 2 trips.\n- The ship takes the fifth and sixth boxes, goes to port 3, then returns to storage. 2 trips.\nSo the total number of trips is 2 + 2 + 2 = 6.", "input": "Input: boxes = [[1,4],[1,2],[2,1],[2,1],[3,2],[3,4]], portsCount = 3, maxBoxes = 6, maxWeight = 7", "output": "Output: 6", "explanation": "Explanation: The optimal strategy is as follows:\n- The ship takes the first and second boxes, goes to port 1, then returns to storage. 2 trips.\n- The ship takes the third and fourth boxes, goes to port 2, then returns to storage. 2 trips.\n- The ship takes the fifth and sixth boxes, goes to port 3, then returns to storage. 2 trips.\nSo the total number of trips is 2 + 2 + 2 = 6."}], "constraints": "Constraints:\n1 <= boxes.length <= 10^5\n1 <= portsCount, maxBoxes, maxWeight <= 10^5\n1 <= ports\u200b\u200bi <= portsCount\n1 <= weightsi <= maxWeight", "notes": ""}, "1681": {"label": "Hard", "title": "Minimum Incompatibility", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.36920000000000003, "total_accepted": 5600.0, "total_submissions": 15200.0, "testcase_example": "'[1,2,1,4]\\n2'", "body": "You are given an integer array nums\u200b\u200b\u200b and an integer k. You are asked to distribute this array into k subsets of equal size such that there are no two equal elements in the same subset.\nA subset's incompatibility is the difference between the maximum and minimum elements in that array.\nReturn the minimum possible sum of incompatibilities of the k subsets after distributing the array optimally, or return -1 if it is not possible.\nA subset is a group integers that appear in the array with no particular order.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,2,1,4], k = 2\nOutput: 4\nExplanation: The optimal distribution of subsets is [1,2] and [1,4].\nThe incompatibility is (2-1) + (4-1) = 4.\nNote that [1,1] and [2,4] would result in a smaller sum, but the first subset contains 2 equal elements.", "input": "Input: nums = [1,2,1,4], k = 2", "output": "Output: 4", "explanation": "Explanation: The optimal distribution of subsets is [1,2] and [1,4].\nThe incompatibility is (2-1) + (4-1) = 4.\nNote that [1,1] and [2,4] would result in a smaller sum, but the first subset contains 2 equal elements."}, {"full_text": "Example 2:\nInput: nums = [6,3,8,1,3,1,2,2], k = 4\nOutput: 6\nExplanation: The optimal distribution of subsets is [1,2], [2,3], [6,8], and [1,3].\nThe incompatibility is (2-1) + (3-2) + (8-6) + (3-1) = 6.", "input": "Input: nums = [6,3,8,1,3,1,2,2], k = 4", "output": "Output: 6", "explanation": "Explanation: The optimal distribution of subsets is [1,2], [2,3], [6,8], and [1,3].\nThe incompatibility is (2-1) + (3-2) + (8-6) + (3-1) = 6."}, {"full_text": "Example 3:\nInput: nums = [5,3,3,6,3,3], k = 3\nOutput: -1\nExplanation: It is impossible to distribute nums into 3 subsets where no two elements are equal in the same subset.", "input": "Input: nums = [5,3,3,6,3,3], k = 3", "output": "Output: -1", "explanation": "Explanation: It is impossible to distribute nums into 3 subsets where no two elements are equal in the same subset."}], "constraints": "Constraints:\n1 <= k <= nums.length <= 16\nnums.length is divisible by k\n1 <= nums[i] <= nums.length", "notes": ""}, "1675": {"label": "Hard", "title": "Minimize Deviation in Array", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4841, "total_accepted": 18000.0, "total_submissions": 37300.0, "testcase_example": "'[1,2,3,4]'", "body": "You are given an array nums of n positive integers.\nYou can perform two types of operations on any element of the array any number of times:\nIf the element is even, divide it by 2.\n\nFor example, if the array is [1,2,3,4], then you can do this operation on the last element, and the array will be [1,2,3,2].\n\n\nIf the element is odd, multiply it by 2.\n\nFor example, if the array is [1,2,3,4], then you can do this operation on the first element, and the array will be [2,2,3,4].\n\n\nThe deviation of the array is the maximum difference between any two elements in the array.\nReturn the minimum deviation the array can have after performing some number of operations.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,2,3,4]\nOutput: 1\nExplanation: You can transform the array to [1,2,3,2], then to [2,2,3,2], then the deviation will be 3 - 2 = 1.", "input": "Input: nums = [1,2,3,4]", "output": "Output: 1", "explanation": "Explanation: You can transform the array to [1,2,3,2], then to [2,2,3,2], then the deviation will be 3 - 2 = 1."}, {"full_text": "Example 2:\nInput: nums = [4,1,5,20,3]\nOutput: 3\nExplanation: You can transform the array after two operations to [4,2,5,5,3], then the deviation will be 5 - 2 = 3.", "input": "Input: nums = [4,1,5,20,3]", "output": "Output: 3", "explanation": "Explanation: You can transform the array after two operations to [4,2,5,5,3], then the deviation will be 5 - 2 = 3."}, {"full_text": "Example 3:\nInput: nums = [2,10,8]\nOutput: 3", "input": "Input: nums = [2,10,8]", "output": "Output: 3", "explanation": ""}], "constraints": "Constraints:\nn == nums.length\n2 <= n <= 10^5\n1 <= nums[i] <= 10^9", "notes": ""}, "1671": {"label": "Hard", "title": "Minimum Number of Removals to Make Mountain Array", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.42950000000000005, "total_accepted": 11300.0, "total_submissions": 26300.0, "testcase_example": "'[1,3,1]'", "body": "You may recall that an array arr is a mountain array if and only if:\narr.length >= 3\nThere exists some index i (0-indexed) with 0 < i < arr.length - 1 such that:\n\narr[0] < arr[1] < ... < arr[i - 1] < arr[i]\narr[i] > arr[i + 1] > ... > arr[arr.length - 1]\n\n\nGiven an integer array nums\u200b\u200b\u200b, return the minimum number of elements to remove to make nums\u200b\u200b\u200b a mountain array.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,3,1]\nOutput: 0\nExplanation: The array itself is a mountain array so we do not need to remove any elements.", "input": "Input: nums = [1,3,1]", "output": "Output: 0", "explanation": "Explanation: The array itself is a mountain array so we do not need to remove any elements."}, {"full_text": "Example 2:\nInput: nums = [2,1,1,5,6,2,3,1]\nOutput: 3\nExplanation: One solution is to remove the elements at indices 0, 1, and 5, making the array nums = [1,5,6,3,1].", "input": "Input: nums = [2,1,1,5,6,2,3,1]", "output": "Output: 3", "explanation": "Explanation: One solution is to remove the elements at indices 0, 1, and 5, making the array nums = [1,5,6,3,1]."}], "constraints": "Constraints:\n3 <= nums.length <= 1000\n1 <= nums[i] <= 10^9\nIt is guaranteed that you can make a mountain array out of nums.", "notes": ""}, "1665": {"label": "Hard", "title": "Minimum Initial Energy to Finish Tasks", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5568, "total_accepted": 10900.0, "total_submissions": 19500.0, "testcase_example": "'[[1,2],[2,4],[4,8]]'", "body": "You are given an array tasks where tasks[i] = [actuali, minimumi]:\nactuali is the actual amount of energy you spend to finish the i^th task.\nminimumi is the minimum amount of energy you require to begin the i^th task.\nFor example, if the task is [10, 12] and your current energy is 11, you cannot start this task. However, if your current energy is 13, you can complete this task, and your energy will be 3 after finishing it.\nYou can finish the tasks in any order you like.\nReturn the minimum initial amount of energy you will need to finish all the tasks.", "examples": [{"full_text": "Example 1:\nInput: tasks = [[1,2],[2,4],[4,8]]\nOutput: 8\nExplanation:\nStarting with 8 energy, we finish the tasks in the following order:\n- 3rd task. Now energy = 8 - 4 = 4.\n- 2nd task. Now energy = 4 - 2 = 2.\n- 1st task. Now energy = 2 - 1 = 1.\nNotice that even though we have leftover energy, starting with 7 energy does not work because we cannot do the 3rd task.", "input": "Input: tasks = [[1,2],[2,4],[4,8]]", "output": "Output: 8", "explanation": "Explanation:\nStarting with 8 energy, we finish the tasks in the following order:\n- 3rd task. Now energy = 8 - 4 = 4.\n- 2nd task. Now energy = 4 - 2 = 2.\n- 1st task. Now energy = 2 - 1 = 1.\nNotice that even though we have leftover energy, starting with 7 energy does not work because we cannot do the 3rd task."}, {"full_text": "Example 2:\nInput: tasks = [[1,3],[2,4],[10,11],[10,12],[8,9]]\nOutput: 32\nExplanation:\nStarting with 32 energy, we finish the tasks in the following order:\n- 1st task. Now energy = 32 - 1 = 31.\n- 2nd task. Now energy = 31 - 2 = 29.\n- 3rd task. Now energy = 29 - 10 = 19.\n- 4th task. Now energy = 19 - 10 = 9.\n- 5th task. Now energy = 9 - 8 = 1.", "input": "Input: tasks = [[1,3],[2,4],[10,11],[10,12],[8,9]]", "output": "Output: 32", "explanation": "Explanation:\nStarting with 32 energy, we finish the tasks in the following order:\n- 1st task. Now energy = 32 - 1 = 31.\n- 2nd task. Now energy = 31 - 2 = 29.\n- 3rd task. Now energy = 29 - 10 = 19.\n- 4th task. Now energy = 19 - 10 = 9.\n- 5th task. Now energy = 9 - 8 = 1."}, {"full_text": "Example 3:\nInput: tasks = [[1,7],[2,8],[3,9],[4,10],[5,11],[6,12]]\nOutput: 27\nExplanation:\nStarting with 27 energy, we finish the tasks in the following order:\n- 5th task. Now energy = 27 - 5 = 22.\n- 2nd task. Now energy = 22 - 2 = 20.\n- 3rd task. Now energy = 20 - 3 = 17.\n- 1st task. Now energy = 17 - 1 = 16.\n- 4th task. Now energy = 16 - 4 = 12.\n- 6th task. Now energy = 12 - 6 = 6.", "input": "Input: tasks = [[1,7],[2,8],[3,9],[4,10],[5,11],[6,12]]", "output": "Output: 27", "explanation": "Explanation:\nStarting with 27 energy, we finish the tasks in the following order:\n- 5th task. Now energy = 27 - 5 = 22.\n- 2nd task. Now energy = 22 - 2 = 20.\n- 3rd task. Now energy = 20 - 3 = 17.\n- 1st task. Now energy = 17 - 1 = 16.\n- 4th task. Now energy = 16 - 4 = 12.\n- 6th task. Now energy = 12 - 6 = 6."}], "constraints": "Constraints:\n1 <= tasks.length <= 10^5\n1 <= actual\u200bi\n<= minimumi\n<= 10^4", "notes": ""}, "1659": {"label": "Hard", "title": "Maximize Grid Happiness", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3741, "total_accepted": 3500.0, "total_submissions": 9400.0, "testcase_example": "'2\\n3\\n1\\n2'", "body": "You are given four integers, m, n, introvertsCount, and extrovertsCount. You have an m x n grid, and there are two types of people: introverts and extroverts. There are introvertsCount introverts and extrovertsCount extroverts.\nYou should decide how many people you want to live in the grid and assign each of them one grid cell. Note that you do not have to have all the people living in the grid.\nThe happiness of each person is calculated as follows:\nIntroverts start with 120 happiness and lose 30 happiness for each neighbor (introvert or extrovert).\nExtroverts start with 40 happiness and gain 20 happiness for each neighbor (introvert or extrovert).\nNeighbors live in the directly adjacent cells north, east, south, and west of a person's cell.\nThe grid happiness is the sum of each person's happiness. Return the maximum possible grid happiness.", "examples": [{"full_text": "Example 1:\nInput: m = 2, n = 3, introvertsCount = 1, extrovertsCount = 2\nOutput: 240\nExplanation: Assume the grid is 1-indexed with coordinates (row, column).\nWe can put the introvert in cell (1,1) and put the extroverts in cells (1,3) and (2,3).\n- Introvert at (1,1) happiness: 120 (starting happiness) - (0 * 30) (0 neighbors) = 120\n- Extrovert at (1,3) happiness: 40 (starting happiness) + (1 * 20) (1 neighbor) = 60\n- Extrovert at (2,3) happiness: 40 (starting happiness) + (1 * 20) (1 neighbor) = 60\nThe grid happiness is 120 + 60 + 60 = 240.\nThe above figure shows the grid in this example with each person's happiness. The introvert stays in the light green cell while the extroverts live on the light purple cells.", "input": "Input: m = 2, n = 3, introvertsCount = 1, extrovertsCount = 2", "output": "Output: 240", "explanation": "Explanation: Assume the grid is 1-indexed with coordinates (row, column).\nWe can put the introvert in cell (1,1) and put the extroverts in cells (1,3) and (2,3).\n- Introvert at (1,1) happiness: 120 (starting happiness) - (0 * 30) (0 neighbors) = 120\n- Extrovert at (1,3) happiness: 40 (starting happiness) + (1 * 20) (1 neighbor) = 60\n- Extrovert at (2,3) happiness: 40 (starting happiness) + (1 * 20) (1 neighbor) = 60\nThe grid happiness is 120 + 60 + 60 = 240.\nThe above figure shows the grid in this example with each person's happiness. The introvert stays in the light green cell while the extroverts live on the light purple cells."}, {"full_text": "Example 2:\nInput: m = 3, n = 1, introvertsCount = 2, extrovertsCount = 1\nOutput: 260\nExplanation: Place the two introverts in (1,1) and (3,1) and the extrovert at (2,1).\n- Introvert at (1,1) happiness: 120 (starting happiness) - (1 * 30) (1 neighbor) = 90\n- Extrovert at (2,1) happiness: 40 (starting happiness) + (2 * 20) (2 neighbors) = 80\n- Introvert at (3,1) happiness: 120 (starting happiness) - (1 * 30) (1 neighbor) = 90\nThe grid happiness is 90 + 80 + 90 = 260.", "input": "Input: m = 3, n = 1, introvertsCount = 2, extrovertsCount = 1", "output": "Output: 260", "explanation": "Explanation: Place the two introverts in (1,1) and (3,1) and the extrovert at (2,1).\n- Introvert at (1,1) happiness: 120 (starting happiness) - (1 * 30) (1 neighbor) = 90\n- Extrovert at (2,1) happiness: 40 (starting happiness) + (2 * 20) (2 neighbors) = 80\n- Introvert at (3,1) happiness: 120 (starting happiness) - (1 * 30) (1 neighbor) = 90\nThe grid happiness is 90 + 80 + 90 = 260."}, {"full_text": "Example 3:\nInput: m = 2, n = 2, introvertsCount = 4, extrovertsCount = 0\nOutput: 240", "input": "Input: m = 2, n = 2, introvertsCount = 4, extrovertsCount = 0", "output": "Output: 240", "explanation": ""}], "constraints": "Constraints:\n1 <= m, n <= 5\n0 <= introvertsCount, extrovertsCount <= min(m * n, 6)", "notes": ""}, "1655": {"label": "Hard", "title": "Distribute Repeating Integers", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3969, "total_accepted": 7100.0, "total_submissions": 17900.0, "testcase_example": "'[1,2,3,4]\\n[2]'", "body": "You are given an array of n integers, nums, where there are at most 50 unique values in the array. You are also given an array of m customer order quantities, quantity, where quantity[i] is the amount of integers the i^th customer ordered. Determine if it is possible to distribute nums such that:\nThe i^th customer gets exactly quantity[i] integers,\nThe integers the i^th customer gets are all equal, and\nEvery customer is satisfied.\nReturn true if it is possible to distribute nums according to the above conditions.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,2,3,4], quantity = [2]\nOutput: false\nExplanation: The 0^th customer cannot be given two different integers.", "input": "Input: nums = [1,2,3,4], quantity = [2]", "output": "Output: false", "explanation": "Explanation: The 0^th customer cannot be given two different integers."}, {"full_text": "Example 2:\nInput: nums = [1,2,3,3], quantity = [2]\nOutput: true\nExplanation: The 0^th customer is given [3,3]. The integers [1,2] are not used.", "input": "Input: nums = [1,2,3,3], quantity = [2]", "output": "Output: true", "explanation": "Explanation: The 0^th customer is given [3,3]. The integers [1,2] are not used."}, {"full_text": "Example 3:\nInput: nums = [1,1,2,2], quantity = [2,2]\nOutput: true\nExplanation: The 0^th customer is given [1,1], and the 1st customer is given [2,2].", "input": "Input: nums = [1,1,2,2], quantity = [2,2]", "output": "Output: true", "explanation": "Explanation: The 0^th customer is given [1,1], and the 1st customer is given [2,2]."}], "constraints": "Constraints:\nn == nums.length\n1 <= n <= 10^5\n1 <= nums[i] <= 1000\nm == quantity.length\n1 <= m <= 10\n1 <= quantity[i] <= 10^5\nThere are at most 50 unique values in nums.", "notes": ""}, "1649": {"label": "Hard", "title": "Create Sorted Array through Instructions", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.37189999999999995, "total_accepted": 19300.0, "total_submissions": 51800.0, "testcase_example": "'[1,5,6,2]'", "body": "Given an integer array instructions, you are asked to create a sorted array from the elements in instructions. You start with an empty container nums. For each element from left to right in instructions, insert it into nums. The cost of each insertion is the minimum of the following:\nThe number of elements currently in nums that are strictly less than instructions[i].\nThe number of elements currently in nums that are strictly greater than instructions[i].\nFor example, if inserting element 3 into nums = [1,2,3,5], the cost of insertion is min(2, 1) (elements 1 and 2 are less than 3, element 5 is greater than 3) and nums will become [1,2,3,3,5].\nReturn the total cost to insert all elements from instructions into nums. Since the answer may be large, return it modulo 10^9 + 7", "examples": [{"full_text": "Example 1:\nInput: instructions = [1,5,6,2]\nOutput: 1\nExplanation: Begin with nums = [].\nInsert 1 with cost min(0, 0) = 0, now nums = [1].\nInsert 5 with cost min(1, 0) = 0, now nums = [1,5].\nInsert 6 with cost min(2, 0) = 0, now nums = [1,5,6].\nInsert 2 with cost min(1, 2) = 1, now nums = [1,2,5,6].\nThe total cost is 0 + 0 + 0 + 1 = 1.", "input": "Input: instructions = [1,5,6,2]", "output": "Output: 1", "explanation": "Explanation: Begin with nums = [].\nInsert 1 with cost min(0, 0) = 0, now nums = [1].\nInsert 5 with cost min(1, 0) = 0, now nums = [1,5].\nInsert 6 with cost min(2, 0) = 0, now nums = [1,5,6].\nInsert 2 with cost min(1, 2) = 1, now nums = [1,2,5,6].\nThe total cost is 0 + 0 + 0 + 1 = 1."}, {"full_text": "Example 2:\nInput: instructions = [1,2,3,6,5,4]\nOutput: 3\nExplanation: Begin with nums = [].\nInsert 1 with cost min(0, 0) = 0, now nums = [1].\nInsert 2 with cost min(1, 0) = 0, now nums = [1,2].\nInsert 3 with cost min(2, 0) = 0, now nums = [1,2,3].\nInsert 6 with cost min(3, 0) = 0, now nums = [1,2,3,6].\nInsert 5 with cost min(3, 1) = 1, now nums = [1,2,3,5,6].\nInsert 4 with cost min(3, 2) = 2, now nums = [1,2,3,4,5,6].\nThe total cost is 0 + 0 + 0 + 0 + 1 + 2 = 3.", "input": "Input: instructions = [1,2,3,6,5,4]", "output": "Output: 3", "explanation": "Explanation: Begin with nums = [].\nInsert 1 with cost min(0, 0) = 0, now nums = [1].\nInsert 2 with cost min(1, 0) = 0, now nums = [1,2].\nInsert 3 with cost min(2, 0) = 0, now nums = [1,2,3].\nInsert 6 with cost min(3, 0) = 0, now nums = [1,2,3,6].\nInsert 5 with cost min(3, 1) = 1, now nums = [1,2,3,5,6].\nInsert 4 with cost min(3, 2) = 2, now nums = [1,2,3,4,5,6].\nThe total cost is 0 + 0 + 0 + 0 + 1 + 2 = 3."}, {"full_text": "Example 3:\nInput: instructions = [1,3,3,3,2,4,2,1,2]\nOutput: 4\nExplanation: Begin with nums = [].\nInsert 1 with cost min(0, 0) = 0, now nums = [1].\nInsert 3 with cost min(1, 0) = 0, now nums = [1,3].\nInsert 3 with cost min(1, 0) = 0, now nums = [1,3,3].\nInsert 3 with cost min(1, 0) = 0, now nums = [1,3,3,3].\nInsert 2 with cost min(1, 3) = 1, now nums = [1,2,3,3,3].\nInsert 4 with cost min(5, 0) = 0, now nums = [1,2,3,3,3,4].\n\u200b\u200b\u200b\u200b\u200b\u200b\u200bInsert 2 with cost min(1, 4) = 1, now nums = [1,2,2,3,3,3,4].\n\u200b\u200b\u200b\u200b\u200b\u200b\u200bInsert 1 with cost min(0, 6) = 0, now nums = [1,1,2,2,3,3,3,4].\n\u200b\u200b\u200b\u200b\u200b\u200b\u200bInsert 2 with cost min(2, 4) = 2, now nums = [1,1,2,2,2,3,3,3,4].\nThe total cost is 0 + 0 + 0 + 0 + 1 + 0 + 1 + 0 + 2 = 4.", "input": "Input: instructions = [1,3,3,3,2,4,2,1,2]", "output": "Output: 4", "explanation": "Explanation: Begin with nums = [].\nInsert 1 with cost min(0, 0) = 0, now nums = [1].\nInsert 3 with cost min(1, 0) = 0, now nums = [1,3].\nInsert 3 with cost min(1, 0) = 0, now nums = [1,3,3].\nInsert 3 with cost min(1, 0) = 0, now nums = [1,3,3,3].\nInsert 2 with cost min(1, 3) = 1, now nums = [1,2,3,3,3].\nInsert 4 with cost min(5, 0) = 0, now nums = [1,2,3,3,3,4].\n\u200b\u200b\u200b\u200b\u200b\u200b\u200bInsert 2 with cost min(1, 4) = 1, now nums = [1,2,2,3,3,3,4].\n\u200b\u200b\u200b\u200b\u200b\u200b\u200bInsert 1 with cost min(0, 6) = 0, now nums = [1,1,2,2,3,3,3,4].\n\u200b\u200b\u200b\u200b\u200b\u200b\u200bInsert 2 with cost min(2, 4) = 2, now nums = [1,1,2,2,2,3,3,3,4].\nThe total cost is 0 + 0 + 0 + 0 + 1 + 0 + 1 + 0 + 2 = 4."}], "constraints": "Constraints:\n1 <= instructions.length <= 10^5\n1 <= instructions[i] <= 10^5", "notes": ""}, "1643": {"label": "Hard", "title": "Kth Smallest Instructions", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4558, "total_accepted": 7100.0, "total_submissions": 15700.0, "testcase_example": "'[2,3]\\n1'", "body": "Bob is standing at cell (0, 0), and he wants to reach destination: (row, column). He can only travel right and down. You are going to help Bob by providing instructions for him to reach destination.\nThe instructions are represented as a string, where each character is either:\n'H', meaning move horizontally (go right), or\n'V', meaning move vertically (go down).\nMultiple instructions will lead Bob to destination. For example, if destination is (2, 3), both \"HHHVV\" and \"HVHVH\" are valid instructions.\nHowever, Bob is very picky. Bob has a lucky number k, and he wants the k^th lexicographically smallest instructions that will lead him to destination. k is 1-indexed.\nGiven an integer array destination and an integer k, return the k^th lexicographically smallest instructions that will take Bob to destination.", "examples": [{"full_text": "Example 1:\nInput: destination = [2,3], k = 1\nOutput: \"HHHVV\"\nExplanation: All the instructions that reach (2, 3) in lexicographic order are as follows:\n[\"HHHVV\", \"HHVHV\", \"HHVVH\", \"HVHHV\", \"HVHVH\", \"HVVHH\", \"VHHHV\", \"VHHVH\", \"VHVHH\", \"VVHHH\"].", "input": "Input: destination = [2,3], k = 1", "output": "Output: \"HHHVV\"", "explanation": "Explanation: All the instructions that reach (2, 3) in lexicographic order are as follows:\n[\"HHHVV\", \"HHVHV\", \"HHVVH\", \"HVHHV\", \"HVHVH\", \"HVVHH\", \"VHHHV\", \"VHHVH\", \"VHVHH\", \"VVHHH\"]."}, {"full_text": "Example 2:\nInput: destination = [2,3], k = 2\nOutput: \"HHVHV\"", "input": "Input: destination = [2,3], k = 2", "output": "Output: \"HHVHV\"", "explanation": ""}, {"full_text": "Example 3:\nInput: destination = [2,3], k = 3\nOutput: \"HHVVH\"", "input": "Input: destination = [2,3], k = 3", "output": "Output: \"HHVVH\"", "explanation": ""}], "constraints": "Constraints:\ndestination.length == 2\n1 <= row, column <= 15\n1 <= k <= nCr(row + column, row), where nCr(a, b) denotes a choose b\u200b\u200b\u200b\u200b\u200b.", "notes": ""}, "1639": {"label": "Hard", "title": "Number of Ways to Form a Target String Given a Dictionary", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4219, "total_accepted": 6000.0, "total_submissions": 14200.0, "testcase_example": "'[\"acca\",\"bbbb\",\"caca\"]\\n\"aba\"'", "body": "You are given a list of strings of the same length words and a string target.\nYour task is to form target using the given words under the following rules:\ntarget should be formed from left to right.\nTo form the i^th character (0-indexed) of target, you can choose the k^th character of the j^th string in words if target[i] = words[j][k].\nOnce you use the k^th character of the j^th string of words, you can no longer use the x^th character of any string in words where x <= k. In other words, all characters to the left of or at index k become unusuable for every string.\nRepeat the process until you form the string target.\nNotice that you can use multiple characters from the same string in words provided the conditions above are met.\nReturn the number of ways to form target from words. Since the answer may be too large, return it modulo 10^9 + 7.", "examples": [{"full_text": "Example 1:\nInput: words = [\"acca\",\"bbbb\",\"caca\"], target = \"aba\"\nOutput: 6\nExplanation: There are 6 ways to form target.\n\"aba\" -> index 0 (\"acca\"), index 1 (\"bbbb\"), index 3 (\"caca\")\n\"aba\" -> index 0 (\"acca\"), index 2 (\"bbbb\"), index 3 (\"caca\")\n\"aba\" -> index 0 (\"acca\"), index 1 (\"bbbb\"), index 3 (\"acca\")\n\"aba\" -> index 0 (\"acca\"), index 2 (\"bbbb\"), index 3 (\"acca\")\n\"aba\" -> index 1 (\"caca\"), index 2 (\"bbbb\"), index 3 (\"acca\")\n\"aba\" -> index 1 (\"caca\"), index 2 (\"bbbb\"), index 3 (\"caca\")", "input": "Input: words = [\"acca\",\"bbbb\",\"caca\"], target = \"aba\"", "output": "Output: 6", "explanation": "Explanation: There are 6 ways to form target.\n\"aba\" -> index 0 (\"acca\"), index 1 (\"bbbb\"), index 3 (\"caca\")\n\"aba\" -> index 0 (\"acca\"), index 2 (\"bbbb\"), index 3 (\"caca\")\n\"aba\" -> index 0 (\"acca\"), index 1 (\"bbbb\"), index 3 (\"acca\")\n\"aba\" -> index 0 (\"acca\"), index 2 (\"bbbb\"), index 3 (\"acca\")\n\"aba\" -> index 1 (\"caca\"), index 2 (\"bbbb\"), index 3 (\"acca\")\n\"aba\" -> index 1 (\"caca\"), index 2 (\"bbbb\"), index 3 (\"caca\")"}, {"full_text": "Example 2:\nInput: words = [\"abba\",\"baab\"], target = \"bab\"\nOutput: 4\nExplanation: There are 4 ways to form target.\n\"bab\" -> index 0 (\"baab\"), index 1 (\"baab\"), index 2 (\"abba\")\n\"bab\" -> index 0 (\"baab\"), index 1 (\"baab\"), index 3 (\"baab\")\n\"bab\" -> index 0 (\"baab\"), index 2 (\"baab\"), index 3 (\"baab\")\n\"bab\" -> index 1 (\"abba\"), index 2 (\"baab\"), index 3 (\"baab\")", "input": "Input: words = [\"abba\",\"baab\"], target = \"bab\"", "output": "Output: 4", "explanation": "Explanation: There are 4 ways to form target.\n\"bab\" -> index 0 (\"baab\"), index 1 (\"baab\"), index 2 (\"abba\")\n\"bab\" -> index 0 (\"baab\"), index 1 (\"baab\"), index 3 (\"baab\")\n\"bab\" -> index 0 (\"baab\"), index 2 (\"baab\"), index 3 (\"baab\")\n\"bab\" -> index 1 (\"abba\"), index 2 (\"baab\"), index 3 (\"baab\")"}], "constraints": "Constraints:\n1 <= words.length <= 1000\n1 <= words[i].length <= 1000\nAll strings in words have the same length.\n1 <= target.length <= 1000\nwords[i] and target contain only lowercase English letters.", "notes": ""}, "1632": {"label": "Hard", "title": "Rank Transform of a Matrix", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4058, "total_accepted": 16100.000000000002, "total_submissions": 39700.0, "testcase_example": "'[[1,2],[3,4]]'", "body": "Given an m x n matrix, return a new matrix answer where answer[row][col] is the rank of matrix[row][col].\nThe rank is an integer that represents how large an element is compared to other elements. It is calculated using the following rules:\nThe rank is an integer starting from 1.\nIf two elements p and q are in the same row or column, then:\n\nIf p < q then rank(p) < rank(q)\nIf p == q then rank(p) == rank(q)\nIf p > q then rank(p) > rank(q)\n\n\nThe rank should be as small as possible.\nThe test cases are generated so that answer is unique under the given rules.", "examples": [{"full_text": "Example 1:\nInput: matrix = [[1,2],[3,4]]\nOutput: [[1,2],[2,3]]\nExplanation:\nThe rank of matrix[0][0] is 1 because it is the smallest integer in its row and column.\nThe rank of matrix[0][1] is 2 because matrix[0][1] > matrix[0][0] and matrix[0][0] is rank 1.\nThe rank of matrix[1][0] is 2 because matrix[1][0] > matrix[0][0] and matrix[0][0] is rank 1.\nThe rank of matrix[1][1] is 3 because matrix[1][1] > matrix[0][1], matrix[1][1] > matrix[1][0], and both matrix[0][1] and matrix[1][0] are rank 2.", "input": "Input: matrix = [[1,2],[3,4]]", "output": "Output: [[1,2],[2,3]]", "explanation": "Explanation:\nThe rank of matrix[0][0] is 1 because it is the smallest integer in its row and column.\nThe rank of matrix[0][1] is 2 because matrix[0][1] > matrix[0][0] and matrix[0][0] is rank 1.\nThe rank of matrix[1][0] is 2 because matrix[1][0] > matrix[0][0] and matrix[0][0] is rank 1.\nThe rank of matrix[1][1] is 3 because matrix[1][1] > matrix[0][1], matrix[1][1] > matrix[1][0], and both matrix[0][1] and matrix[1][0] are rank 2."}, {"full_text": "Example 2:\nInput: matrix = [[7,7],[7,7]]\nOutput: [[1,1],[1,1]]", "input": "Input: matrix = [[7,7],[7,7]]", "output": "Output: [[1,1],[1,1]]", "explanation": ""}, {"full_text": "Example 3:\nInput: matrix = [[20,-21,14],[-19,4,19],[22,-47,24],[-19,4,19]]\nOutput: [[4,2,3],[1,3,4],[5,1,6],[1,3,4]]", "input": "Input: matrix = [[20,-21,14],[-19,4,19],[22,-47,24],[-19,4,19]]", "output": "Output: [[4,2,3],[1,3,4],[5,1,6],[1,3,4]]", "explanation": ""}], "constraints": "Constraints:\nm == matrix.length\nn == matrix[i].length\n1 <= m, n <= 500\n-10^9 <= matrix[row][col] <= 10^9", "notes": ""}, "1627": {"label": "Hard", "title": "Graph Connectivity With Threshold", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4395, "total_accepted": 9400.0, "total_submissions": 21500.0, "testcase_example": "'6\\n2\\n[[1,4],[2,5],[3,6]]'", "body": "We have n cities labeled from 1 to n. Two different cities with labels x and y are directly connected by a bidirectional road if and only if x and y share a common divisor strictly greater than some threshold. More formally, cities with labels x and y have a road between them if there exists an integer z such that all of the following are true:\nx % z == 0,\ny % z == 0, and\nz > threshold.\nGiven the two integers, n and threshold, and an array of queries, you must determine for each queries[i] = [ai, bi] if cities ai and bi are connected directly or indirectly.\n(i.e. there is some path between them).\nReturn an array answer, where answer.length == queries.length and answer[i] is true if for the i^th query, there is a path between ai and bi, or answer[i] is false if there is no path.", "examples": [{"full_text": "Example 1:\nInput: n = 6, threshold = 2, queries = [[1,4],[2,5],[3,6]]\nOutput: [false,false,true]\nExplanation: The divisors for each number:\n1: 1\n2: 1, 2\n3: 1, 3\n4: 1, 2, 4\n5: 1, 5\n6: 1, 2, 3, 6\nUsing the underlined divisors above the threshold, only cities 3 and 6 share a common divisor, so they are the\nonly ones directly connected. The result of each query:\n[1,4] 1 is not connected to 4\n[2,5] 2 is not connected to 5\n[3,6] 3 is connected to 6 through path 3--6", "input": "Input: n = 6, threshold = 2, queries = [[1,4],[2,5],[3,6]]", "output": "Output: [false,false,true]", "explanation": "Explanation: The divisors for each number:\n1: 1\n2: 1, 2\n3: 1, 3\n4: 1, 2, 4\n5: 1, 5\n6: 1, 2, 3, 6\nUsing the underlined divisors above the threshold, only cities 3 and 6 share a common divisor, so they are the\nonly ones directly connected. The result of each query:\n[1,4] 1 is not connected to 4\n[2,5] 2 is not connected to 5\n[3,6] 3 is connected to 6 through path 3--6"}, {"full_text": "Example 2:\nInput: n = 6, threshold = 0, queries = [[4,5],[3,4],[3,2],[2,6],[1,3]]\nOutput: [true,true,true,true,true]\nExplanation: The divisors for each number are the same as the previous example. However, since the threshold is 0,\nall divisors can be used. Since all numbers share 1 as a divisor, all cities are connected.", "input": "Input: n = 6, threshold = 0, queries = [[4,5],[3,4],[3,2],[2,6],[1,3]]", "output": "Output: [true,true,true,true,true]", "explanation": "Explanation: The divisors for each number are the same as the previous example. However, since the threshold is 0,\nall divisors can be used. Since all numbers share 1 as a divisor, all cities are connected."}, {"full_text": "Example 3:\nInput: n = 5, threshold = 1, queries = [[4,5],[4,5],[3,2],[2,3],[3,4]]\nOutput: [false,false,false,false,false]\nExplanation: Only cities 2 and 4 share a common divisor 2 which is strictly greater than the threshold 1, so they are the only ones directly connected.\nPlease notice that there can be multiple queries for the same pair of nodes [x, y], and that the query [x, y] is equivalent to the query [y, x].", "input": "Input: n = 5, threshold = 1, queries = [[4,5],[4,5],[3,2],[2,3],[3,4]]", "output": "Output: [false,false,false,false,false]", "explanation": "Explanation: Only cities 2 and 4 share a common divisor 2 which is strictly greater than the threshold 1, so they are the only ones directly connected.\nPlease notice that there can be multiple queries for the same pair of nodes [x, y], and that the query [x, y] is equivalent to the query [y, x]."}], "constraints": "Constraints:\n2 <= n <= 10^4\n0 <= threshold <= n\n1 <= queries.length <= 10^5\nqueries[i].length == 2\n1 <= ai, bi <= cities\nai != bi", "notes": ""}, "1622": {"label": "Hard", "title": "Fancy Sequence", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.1535, "total_accepted": 6600.0, "total_submissions": 42700.0, "testcase_example": "'[\"Fancy\",\"append\",\"addAll\",\"append\",\"multAll\",\"getIndex\",\"addAll\",\"append\",\"multAll\",\"getIndex\",\"getIndex\",\"getIndex\"]\\n' +\n  '[[],[2],[3],[7],[2],[0],[3],[10],[2],[0],[1],[2]]'", "body": "Write an API that generates fancy sequences using the append, addAll, and multAll operations.\nImplement the Fancy class:\nFancy() Initializes the object with an empty sequence.\nvoid append(val) Appends an integer val to the end of the sequence.\nvoid addAll(inc) Increments all existing values in the sequence by an integer inc.\nvoid multAll(m) Multiplies all existing values in the sequence by an integer m.\nint getIndex(idx) Gets the current value at index idx (0-indexed) of the sequence modulo 10^9 + 7. If the index is greater or equal than the length of the sequence, return -1.", "examples": [{"full_text": "Example 1:\nInput\n[\"Fancy\", \"append\", \"addAll\", \"append\", \"multAll\", \"getIndex\", \"addAll\", \"append\", \"multAll\", \"getIndex\", \"getIndex\", \"getIndex\"]\n[[], [2], [3], [7], [2], [0], [3], [10], [2], [0], [1], [2]]\nOutput\n[null, null, null, null, null, 10, null, null, null, 26, 34, 20]\nExplanation\nFancy fancy = new Fancy();\nfancy.append(2); // fancy sequence: [2]\nfancy.addAll(3); // fancy sequence: [2+3] -> [5]\nfancy.append(7); // fancy sequence: [5, 7]\nfancy.multAll(2); // fancy sequence: [5*2, 7*2] -> [10, 14]\nfancy.getIndex(0); // return 10\nfancy.addAll(3); // fancy sequence: [10+3, 14+3] -> [13, 17]\nfancy.append(10); // fancy sequence: [13, 17, 10]\nfancy.multAll(2); // fancy sequence: [13*2, 17*2, 10*2] -> [26, 34, 20]\nfancy.getIndex(0); // return 26\nfancy.getIndex(1); // return 34\nfancy.getIndex(2); // return 20", "input": "Input\n[\"Fancy\", \"append\", \"addAll\", \"append\", \"multAll\", \"getIndex\", \"addAll\", \"append\", \"multAll\", \"getIndex\", \"getIndex\", \"getIndex\"]\n[[], [2], [3], [7], [2], [0], [3], [10], [2], [0], [1], [2]]", "output": "Output\n[null, null, null, null, null, 10, null, null, null, 26, 34, 20]", "explanation": "Explanation\nFancy fancy = new Fancy();\nfancy.append(2); // fancy sequence: [2]\nfancy.addAll(3); // fancy sequence: [2+3] -> [5]\nfancy.append(7); // fancy sequence: [5, 7]\nfancy.multAll(2); // fancy sequence: [5*2, 7*2] -> [10, 14]\nfancy.getIndex(0); // return 10\nfancy.addAll(3); // fancy sequence: [10+3, 14+3] -> [13, 17]\nfancy.append(10); // fancy sequence: [13, 17, 10]\nfancy.multAll(2); // fancy sequence: [13*2, 17*2, 10*2] -> [26, 34, 20]\nfancy.getIndex(0); // return 26\nfancy.getIndex(1); // return 34\nfancy.getIndex(2); // return 20"}], "constraints": "Constraints:\n1 <= val, inc, m <= 100\n0 <= idx <= 10^5\nAt most 10^5 calls total will be made to append, addAll, multAll, and getIndex.", "notes": ""}, "1617": {"label": "Hard", "title": "Count Subtrees With Max Distance Between Cities", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6502, "total_accepted": 5700.0, "total_submissions": 8800.0, "testcase_example": "'4\\n[[1,2],[2,3],[2,4]]'", "body": "There are n cities numbered from 1 to n. You are given an array edges of size n-1, where edges[i] = [ui, vi] represents a bidirectional edge between cities ui and vi. There exists a unique path between each pair of cities. In other words, the cities form a tree.\nA subtree is a subset of cities where every city is reachable from every other city in the subset, where the path between each pair passes through only the cities from the subset. Two subtrees are different if there is a city in one subtree that is not present in the other.\nFor each d from 1 to n-1, find the number of subtrees in which the maximum distance between any two cities in the subtree is equal to d.\nReturn an array of size n-1 where the d^th element (1-indexed) is the number of subtrees in which the maximum distance between any two cities is equal to d.\nNotice\nthat\nthe distance between the two cities is the number of edges in the path between them.", "examples": [{"full_text": "Example 1:\nInput: n = 4, edges = [[1,2],[2,3],[2,4]]\nOutput: [3,4,0]\nExplanation:\nThe subtrees with subsets {1,2}, {2,3} and {2,4} have a max distance of 1.\nThe subtrees with subsets {1,2,3}, {1,2,4}, {2,3,4} and {1,2,3,4} have a max distance of 2.\nNo subtree has two nodes where the max distance between them is 3.", "input": "Input: n = 4, edges = [[1,2],[2,3],[2,4]]", "output": "Output: [3,4,0]", "explanation": "Explanation:\nThe subtrees with subsets {1,2}, {2,3} and {2,4} have a max distance of 1.\nThe subtrees with subsets {1,2,3}, {1,2,4}, {2,3,4} and {1,2,3,4} have a max distance of 2.\nNo subtree has two nodes where the max distance between them is 3."}, {"full_text": "Example 2:\nInput: n = 2, edges = [[1,2]]\nOutput: [1]", "input": "Input: n = 2, edges = [[1,2]]", "output": "Output: [1]", "explanation": ""}, {"full_text": "Example 3:\nInput: n = 3, edges = [[1,2],[2,3]]\nOutput: [2,1]", "input": "Input: n = 3, edges = [[1,2],[2,3]]", "output": "Output: [2,1]", "explanation": ""}], "constraints": "Constraints:\n2 <= n <= 15\nedges.length == n-1\nedges[i].length == 2\n1 <= ui, vi <= n\nAll pairs (ui, vi) are distinct.", "notes": ""}, "1611": {"label": "Hard", "title": "Minimum One Bit Operations to Make Integers Zero", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6199, "total_accepted": 9400.0, "total_submissions": 15200.0, "testcase_example": "'3'", "body": "Given an integer n, you must transform it into 0 using the following operations any number of times:\nChange the rightmost (0^th) bit in the binary representation of n.\nChange the i^th bit in the binary representation of n if the (i-1)^th bit is set to 1 and the (i-2)^th through 0^th bits are set to 0.\nReturn the minimum number of operations to transform n into 0.", "examples": [{"full_text": "Example 1:\nInput: n = 3\nOutput: 2\nExplanation: The binary representation of 3 is \"11\".\n\"11\" -> \"01\" with the 2^nd operation since the 0^th bit is 1.\n\"01\" -> \"00\" with the 1^st operation.", "input": "Input: n = 3", "output": "Output: 2", "explanation": "Explanation: The binary representation of 3 is \"11\".\n\"11\" -> \"01\" with the 2^nd operation since the 0^th bit is 1.\n\"01\" -> \"00\" with the 1^st operation."}, {"full_text": "Example 2:\nInput: n = 6\nOutput: 4\nExplanation: The binary representation of 6 is \"110\".\n\"110\" -> \"010\" with the 2^nd operation since the 1^st bit is 1 and 0^th through 0^th bits are 0.\n\"010\" -> \"011\" with the 1^st operation.\n\"011\" -> \"001\" with the 2^nd operation since the 0^th bit is 1.\n\"001\" -> \"000\" with the 1^st operation.", "input": "Input: n = 6", "output": "Output: 4", "explanation": "Explanation: The binary representation of 6 is \"110\".\n\"110\" -> \"010\" with the 2^nd operation since the 1^st bit is 1 and 0^th through 0^th bits are 0.\n\"010\" -> \"011\" with the 1^st operation.\n\"011\" -> \"001\" with the 2^nd operation since the 0^th bit is 1.\n\"001\" -> \"000\" with the 1^st operation."}], "constraints": "Constraints:\n0 <= n <= 10^9", "notes": ""}, "1610": {"label": "Hard", "title": "Maximum Number of Visible Points", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3582, "total_accepted": 22500.0, "total_submissions": 62700.0, "testcase_example": "'[[2,1],[2,2],[3,3]]\\n90\\n[1,1]'", "body": "You are given an array points, an integer angle, and your location, where location = [posx, posy] and points[i] = [xi, yi] both denote integral coordinates on the X-Y plane.\nInitially, you are facing directly east from your position. You cannot move from your position, but you can rotate. In other words, posx and posy cannot be changed. Your field of view in degrees is represented by angle, determining how wide you can see from any given view direction. Let d be the amount in degrees that you rotate counterclockwise. Then, your field of view is the inclusive range of angles [d - angle/2, d + angle/2].\nYour browser does not support the video tag or this video format.\nYou can see some set of points if, for each point, the angle formed by the point, your position, and the immediate east direction from your position is in your field of view.\nThere can be multiple points at one coordinate. There may be points at your location, and you can always see these points regardless of your rotation. Points do not obstruct your vision to other points.\nReturn the maximum number of points you can see.", "examples": [{"full_text": "Example 1:\nInput: points = [[2,1],[2,2],[3,3]], angle = 90, location = [1,1]\nOutput: 3\nExplanation: The shaded region represents your field of view. All points can be made visible in your field of view, including [3,3] even though [2,2] is in front and in the same line of sight.", "input": "Input: points = [[2,1],[2,2],[3,3]], angle = 90, location = [1,1]", "output": "Output: 3", "explanation": "Explanation: The shaded region represents your field of view. All points can be made visible in your field of view, including [3,3] even though [2,2] is in front and in the same line of sight."}, {"full_text": "Example 2:\nInput: points = [[2,1],[2,2],[3,4],[1,1]], angle = 90, location = [1,1]\nOutput: 4\nExplanation: All points can be made visible in your field of view, including the one at your location.", "input": "Input: points = [[2,1],[2,2],[3,4],[1,1]], angle = 90, location = [1,1]", "output": "Output: 4", "explanation": "Explanation: All points can be made visible in your field of view, including the one at your location."}, {"full_text": "Example 3:\nInput: points = [[1,0],[2,1]], angle = 13, location = [1,1]\nOutput: 1\nExplanation: You can only see one of the two points, as shown above.", "input": "Input: points = [[1,0],[2,1]], angle = 13, location = [1,1]", "output": "Output: 1", "explanation": "Explanation: You can only see one of the two points, as shown above."}], "constraints": "Constraints:\n1 <= points.length <= 10^5\npoints[i].length == 2\nlocation.length == 2\n0 <= angle < 360\n0 <= posx, posy, xi, yi <= 100", "notes": ""}, "1606": {"label": "Hard", "title": "Find Servers That Handled Most Number of Requests", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4035, "total_accepted": 6400.0, "total_submissions": 15900.0, "testcase_example": "'3\\n[1,2,3,4,5]\\n[5,2,3,3,3]'", "body": "You have k servers numbered from 0 to k-1 that are being used to handle multiple requests simultaneously. Each server has infinite computational capacity but cannot handle more than one request at a time. The requests are assigned to servers according to a specific algorithm:\nThe i^th (0-indexed) request arrives.\nIf all servers are busy, the request is dropped (not handled at all).\nIf the (i % k)^th server is available, assign the request to that server.\nOtherwise, assign the request to the next available server (wrapping around the list of servers and starting from 0 if necessary). For example, if the i^th server is busy, try to assign the request to the (i+1)^th server, then the (i+2)^th server, and so on.\nYou are given a strictly increasing array arrival of positive integers, where arrival[i] represents the arrival time of the i^th request, and another array load, where load[i] represents the load of the i^th request (the time it takes to complete). Your goal is to find the busiest server(s). A server is considered busiest if it handled the most number of requests successfully among all the servers.\nReturn a list containing the IDs (0-indexed) of the busiest server(s). You may return the IDs in any order.", "examples": [{"full_text": "Example 1:\nInput: k = 3, arrival = [1,2,3,4,5], load = [5,2,3,3,3]\nOutput: [1]\nExplanation:\nAll of the servers start out available.\nThe first 3 requests are handled by the first 3 servers in order.\nRequest 3 comes in. Server 0 is busy, so it's assigned to the next available server, which is 1.\nRequest 4 comes in. It cannot be handled since all servers are busy, so it is dropped.\nServers 0 and 2 handled one request each, while server 1 handled two requests. Hence server 1 is the busiest server.", "input": "Input: k = 3, arrival = [1,2,3,4,5], load = [5,2,3,3,3]", "output": "Output: [1]", "explanation": "Explanation:\nAll of the servers start out available.\nThe first 3 requests are handled by the first 3 servers in order.\nRequest 3 comes in. Server 0 is busy, so it's assigned to the next available server, which is 1.\nRequest 4 comes in. It cannot be handled since all servers are busy, so it is dropped.\nServers 0 and 2 handled one request each, while server 1 handled two requests. Hence server 1 is the busiest server."}, {"full_text": "Example 2:\nInput: k = 3, arrival = [1,2,3,4], load = [1,2,1,2]\nOutput: [0]\nExplanation:\nThe first 3 requests are handled by first 3 servers.\nRequest 3 comes in. It is handled by server 0 since the server is available.\nServer 0 handled two requests, while servers 1 and 2 handled one request each. Hence server 0 is the busiest server.", "input": "Input: k = 3, arrival = [1,2,3,4], load = [1,2,1,2]", "output": "Output: [0]", "explanation": "Explanation:\nThe first 3 requests are handled by first 3 servers.\nRequest 3 comes in. It is handled by server 0 since the server is available.\nServer 0 handled two requests, while servers 1 and 2 handled one request each. Hence server 0 is the busiest server."}, {"full_text": "Example 3:\nInput: k = 3, arrival = [1,2,3], load = [10,12,11]\nOutput: [0,1,2]\nExplanation: Each server handles a single request, so they are all considered the busiest.", "input": "Input: k = 3, arrival = [1,2,3], load = [10,12,11]", "output": "Output: [0,1,2]", "explanation": "Explanation: Each server handles a single request, so they are all considered the busiest."}], "constraints": "Constraints:\n1 <= k <= 10^5\n1 <= arrival.length, load.length <= 10^5\narrival.length == load.length\n1 <= arrival[i], load[i] <= 10^9\narrival is strictly increasing.", "notes": ""}, "1601": {"label": "Hard", "title": "Maximum Number of Achievable Transfer Requests", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5045000000000001, "total_accepted": 7500.0, "total_submissions": 14900.0, "testcase_example": "'5\\n[[0,1],[1,0],[0,1],[1,2],[2,0],[3,4]]'", "body": "We have n buildings numbered from 0 to n - 1. Each building has a number of employees. It's transfer season, and some employees want to change the building they reside in.\nYou are given an array requests where requests[i] = [fromi, toi] represents an employee's request to transfer from building fromi to building toi.\nAll buildings are full, so a list of requests is achievable only if for each building, the net change in employee transfers is zero. This means the number of employees leaving is equal to the number of employees moving in. For example if n = 3 and two employees are leaving building 0, one is leaving building 1, and one is leaving building 2, there should be two employees moving to building 0, one employee moving to building 1, and one employee moving to building 2.\nReturn the maximum number of achievable requests.", "examples": [{"full_text": "Example 1:\nInput: n = 5, requests = [[0,1],[1,0],[0,1],[1,2],[2,0],[3,4]]\nOutput: 5\nExplantion: Let's see the requests:\nFrom building 0 we have employees x and y and both want to move to building 1.\nFrom building 1 we have employees a and b and they want to move to buildings 2 and 0 respectively.\nFrom building 2 we have employee z and they want to move to building 0.\nFrom building 3 we have employee c and they want to move to building 4.\nFrom building 4 we don't have any requests.\nWe can achieve the requests of users x and b by swapping their places.\nWe can achieve the requests of users y, a and z by swapping the places in the 3 buildings.", "input": "Input: n = 5, requests = [[0,1],[1,0],[0,1],[1,2],[2,0],[3,4]]", "output": "Output: 5\nExplantion: Let's see the requests:\nFrom building 0 we have employees x and y and both want to move to building 1.\nFrom building 1 we have employees a and b and they want to move to buildings 2 and 0 respectively.\nFrom building 2 we have employee z and they want to move to building 0.\nFrom building 3 we have employee c and they want to move to building 4.\nFrom building 4 we don't have any requests.\nWe can achieve the requests of users x and b by swapping their places.\nWe can achieve the requests of users y, a and z by swapping the places in the 3 buildings.", "explanation": ""}, {"full_text": "Example 2:\nInput: n = 3, requests = [[0,0],[1,2],[2,1]]\nOutput: 3\nExplantion: Let's see the requests:\nFrom building 0 we have employee x and they want to stay in the same building 0.\nFrom building 1 we have employee y and they want to move to building 2.\nFrom building 2 we have employee z and they want to move to building 1.\nWe can achieve all the requests.", "input": "Input: n = 3, requests = [[0,0],[1,2],[2,1]]", "output": "Output: 3\nExplantion: Let's see the requests:\nFrom building 0 we have employee x and they want to stay in the same building 0.\nFrom building 1 we have employee y and they want to move to building 2.\nFrom building 2 we have employee z and they want to move to building 1.\nWe can achieve all the requests.", "explanation": ""}, {"full_text": "Example 3:\nInput: n = 4, requests = [[0,3],[3,1],[1,2],[2,0]]\nOutput: 4", "input": "Input: n = 4, requests = [[0,3],[3,1],[1,2],[2,0]]", "output": "Output: 4", "explanation": ""}], "constraints": "Constraints:\n1 <= n <= 20\n1 <= requests.length <= 16\nrequests[i].length == 2\n0 <= fromi, toi < n", "notes": ""}, "1595": {"label": "Hard", "title": "Minimum Cost to Connect Two Groups of Points", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.44909999999999994, "total_accepted": 5700.0, "total_submissions": 12700.0, "testcase_example": "'[[15,96],[36,2]]'", "body": "You are given two groups of points where the first group has size1 points, the second group has size2 points, and size1 >= size2.\nThe cost of the connection between any two points are given in an size1 x size2 matrix where cost[i][j] is the cost of connecting point i of the first group and point j of the second group. The groups are connected if each point in both groups is connected to one or more points in the opposite group. In other words, each point in the first group must be connected to at least one point in the second group, and each point in the second group must be connected to at least one point in the first group.\nReturn the minimum cost it takes to connect the two groups.", "examples": [{"full_text": "Example 1:\nInput: cost = [[15, 96], [36, 2]]\nOutput: 17\nExplanation: The optimal way of connecting the groups is:\n1--A\n2--B\nThis results in a total cost of 17.", "input": "Input: cost = [[15, 96], [36, 2]]", "output": "Output: 17", "explanation": "Explanation: The optimal way of connecting the groups is:\n1--A\n2--B\nThis results in a total cost of 17."}, {"full_text": "Example 2:\nInput: cost = [[1, 3, 5], [4, 1, 1], [1, 5, 3]]\nOutput: 4\nExplanation: The optimal way of connecting the groups is:\n1--A\n2--B\n2--C\n3--A\nThis results in a total cost of 4.\nNote that there are multiple points connected to point 2 in the first group and point A in the second group. This does not matter as there is no limit to the number of points that can be connected. We only care about the minimum total cost.", "input": "Input: cost = [[1, 3, 5], [4, 1, 1], [1, 5, 3]]", "output": "Output: 4", "explanation": "Explanation: The optimal way of connecting the groups is:\n1--A\n2--B\n2--C\n3--A\nThis results in a total cost of 4.\nNote that there are multiple points connected to point 2 in the first group and point A in the second group. This does not matter as there is no limit to the number of points that can be connected. We only care about the minimum total cost."}, {"full_text": "Example 3:\nInput: cost = [[2, 5, 1], [3, 4, 7], [8, 1, 2], [6, 2, 4], [3, 8, 8]]\nOutput: 10", "input": "Input: cost = [[2, 5, 1], [3, 4, 7], [8, 1, 2], [6, 2, 4], [3, 8, 8]]", "output": "Output: 10", "explanation": ""}], "constraints": "Constraints:\nsize1 == cost.length\nsize2 == cost[i].length\n1 <= size1, size2 <= 12\nsize1 >= size2\n0 <= cost[i][j] <= 100", "notes": ""}, "1591": {"label": "Hard", "title": "Strange Printer II", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5619, "total_accepted": 5500.0, "total_submissions": 9900.0, "testcase_example": "'[[1,1,1,1],[1,2,2,1],[1,2,2,1],[1,1,1,1]]'", "body": "There is a strange printer with the following two special requirements:\nOn each turn, the printer will print a solid rectangular pattern of a single color on the grid. This will cover up the existing colors in the rectangle.\nOnce the printer has used a color for the above operation, the same color cannot be used again.\nYou are given a m x n matrix targetGrid, where targetGrid[row][col] is the color in the position (row, col) of the grid.\nReturn true if it is possible to print the matrix targetGrid, otherwise, return false.", "examples": [{"full_text": "Example 1:\nInput: targetGrid = [[1,1,1,1],[1,2,2,1],[1,2,2,1],[1,1,1,1]]\nOutput: true", "input": "Input: targetGrid = [[1,1,1,1],[1,2,2,1],[1,2,2,1],[1,1,1,1]]", "output": "Output: true", "explanation": ""}, {"full_text": "Example 2:\nInput: targetGrid = [[1,1,1,1],[1,1,3,3],[1,1,3,4],[5,5,1,4]]\nOutput: true", "input": "Input: targetGrid = [[1,1,1,1],[1,1,3,3],[1,1,3,4],[5,5,1,4]]", "output": "Output: true", "explanation": ""}, {"full_text": "Example 3:\nInput: targetGrid = [[1,2,1],[2,1,2],[1,2,1]]\nOutput: false\nExplanation: It is impossible to form targetGrid because it is not allowed to print the same color in different turns.", "input": "Input: targetGrid = [[1,2,1],[2,1,2],[1,2,1]]", "output": "Output: false", "explanation": "Explanation: It is impossible to form targetGrid because it is not allowed to print the same color in different turns."}], "constraints": "Constraints:\nm == targetGrid.length\nn == targetGrid[i].length\n1 <= m, n <= 60\n1 <= targetGrid[row][col] <= 60", "notes": ""}, "1585": {"label": "Hard", "title": "Check If String Is Transformable With Substring Sort Operations", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4828, "total_accepted": 5800.0, "total_submissions": 11900.0, "testcase_example": "'\"84532\"\\n\"34852\"'", "body": "Given two strings s and t, transform string s into string t using the following operation any number of times:\nChoose a non-empty substring in s and sort it in place so the characters are in ascending order.\n\nFor example, applying the operation on the underlined substring in \"14234\" results in \"12344\".\n\n\nReturn true if it is possible to transform s into t. Otherwise, return false.\nA substring is a contiguous sequence of characters within a string.", "examples": [{"full_text": "Example 1:\nInput: s = \"84532\", t = \"34852\"\nOutput: true\nExplanation: You can transform s into t using the following sort operations:\n\"84532\" (from index 2 to 3) -> \"84352\"\n\"84352\" (from index 0 to 2) -> \"34852\"", "input": "Input: s = \"84532\", t = \"34852\"", "output": "Output: true", "explanation": "Explanation: You can transform s into t using the following sort operations:\n\"84532\" (from index 2 to 3) -> \"84352\"\n\"84352\" (from index 0 to 2) -> \"34852\""}, {"full_text": "Example 2:\nInput: s = \"34521\", t = \"23415\"\nOutput: true\nExplanation: You can transform s into t using the following sort operations:\n\"34521\" -> \"23451\"\n\"23451\" -> \"23415\"", "input": "Input: s = \"34521\", t = \"23415\"", "output": "Output: true", "explanation": "Explanation: You can transform s into t using the following sort operations:\n\"34521\" -> \"23451\"\n\"23451\" -> \"23415\""}, {"full_text": "Example 3:\nInput: s = \"12345\", t = \"12435\"\nOutput: false", "input": "Input: s = \"12345\", t = \"12435\"", "output": "Output: false", "explanation": ""}], "constraints": "Constraints:\ns.length == t.length\n1 <= s.length <= 10^5\ns and t consist of only digits.", "notes": ""}, "1579": {"label": "Hard", "title": "Remove Max Number of Edges to Keep Graph Fully Traversable", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.49979999999999997, "total_accepted": 10800.0, "total_submissions": 21600.0, "testcase_example": "'4\\n[[3,1,2],[3,2,3],[1,1,3],[1,2,4],[1,1,2],[2,3,4]]'", "body": "Alice and Bob have an undirected graph of\nn\nnodes\nand 3 types of edges:\nType 1: Can be traversed by Alice only.\nType 2: Can be traversed by Bob only.\nType 3: Can by traversed by both Alice and Bob.\nGiven an array\nedges\nwhere\nedges[i] = [typei, ui, vi]\nrepresents a bidirectional edge of type\ntypei\nbetween nodes\nui\nand\nvi, find the maximum number of edges you can remove so that after removing the edges, the graph can still be fully traversed by both Alice and Bob. The graph is fully traversed by Alice and Bob if starting from any node, they can reach all other nodes.\nReturn the maximum number of edges you can remove, or return -1 if it's impossible for the graph to be fully traversed by Alice and Bob.", "examples": [{"full_text": "Example 1:\nInput: n = 4, edges = [[3,1,2],[3,2,3],[1,1,3],[1,2,4],[1,1,2],[2,3,4]]\nOutput: 2\nExplanation: If we remove the 2 edges [1,1,2] and [1,1,3]. The graph will still be fully traversable by Alice and Bob. Removing any additional edge will not make it so. So the maximum number of edges we can remove is 2.", "input": "Input: n = 4, edges = [[3,1,2],[3,2,3],[1,1,3],[1,2,4],[1,1,2],[2,3,4]]", "output": "Output: 2", "explanation": "Explanation: If we remove the 2 edges [1,1,2] and [1,1,3]. The graph will still be fully traversable by Alice and Bob. Removing any additional edge will not make it so. So the maximum number of edges we can remove is 2."}, {"full_text": "Example 2:\nInput: n = 4, edges = [[3,1,2],[3,2,3],[1,1,4],[2,1,4]]\nOutput: 0\nExplanation: Notice that removing any edge will not make the graph fully traversable by Alice and Bob.", "input": "Input: n = 4, edges = [[3,1,2],[3,2,3],[1,1,4],[2,1,4]]", "output": "Output: 0", "explanation": "Explanation: Notice that removing any edge will not make the graph fully traversable by Alice and Bob."}, {"full_text": "Example 3:\nInput: n = 4, edges = [[3,2,3],[1,1,2],[2,3,4]]\nOutput: -1\nExplanation: In the current graph, Alice cannot reach node 4 from the other nodes. Likewise, Bob cannot reach 1. Therefore it's impossible to make the graph fully traversable.", "input": "Input: n = 4, edges = [[3,2,3],[1,1,2],[2,3,4]]", "output": "Output: -1", "explanation": "Explanation: In the current graph, Alice cannot reach node 4 from the other nodes. Likewise, Bob cannot reach 1. Therefore it's impossible to make the graph fully traversable."}], "constraints": "Constraints:\n1 <= n <= 10^5\n1 <= edges.length <= min(10^5, 3 * n * (n-1) / 2)\nedges[i].length == 3\n1 <= edges[i][0] <= 3\n1 <= edges[i][1] < edges[i][2] <= n\nAll tuples\n(typei, ui, vi)\nare distinct.", "notes": ""}, "1575": {"label": "Hard", "title": "Count All Possible Routes", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5763, "total_accepted": 9200.0, "total_submissions": 16000.0, "testcase_example": "'[2,3,6,8,4]\\n1\\n3\\n5'", "body": "You are given an array of distinct positive integers locations where locations[i] represents the position of city i. You are also given integers start, finish and fuel representing the starting city, ending city, and the initial amount of fuel you have, respectively.\nAt each step, if you are at city i, you can pick any city j such that j != i and 0 <= j < locations.length and move to city j. Moving from city i to city j reduces the amount of fuel you have by |locations[i] - locations[j]|. Please notice that |x| denotes the absolute value of x.\nNotice that fuel cannot become negative at any point in time, and that you are allowed to visit any city more than once (including start and finish).\nReturn the count of all possible routes from start to finish. Since the answer may be too large, return it modulo 10^9 + 7.", "examples": [{"full_text": "Example 1:\nInput: locations = [2,3,6,8,4], start = 1, finish = 3, fuel = 5\nOutput: 4\nExplanation: The following are all possible routes, each uses 5 units of fuel:\n1 -> 3\n1 -> 2 -> 3\n1 -> 4 -> 3\n1 -> 4 -> 2 -> 3", "input": "Input: locations = [2,3,6,8,4], start = 1, finish = 3, fuel = 5", "output": "Output: 4", "explanation": "Explanation: The following are all possible routes, each uses 5 units of fuel:\n1 -> 3\n1 -> 2 -> 3\n1 -> 4 -> 3\n1 -> 4 -> 2 -> 3"}, {"full_text": "Example 2:\nInput: locations = [4,3,1], start = 1, finish = 0, fuel = 6\nOutput: 5\nExplanation: The following are all possible routes:\n1 -> 0, used fuel = 1\n1 -> 2 -> 0, used fuel = 5\n1 -> 2 -> 1 -> 0, used fuel = 5\n1 -> 0 -> 1 -> 0, used fuel = 3\n1 -> 0 -> 1 -> 0 -> 1 -> 0, used fuel = 5", "input": "Input: locations = [4,3,1], start = 1, finish = 0, fuel = 6", "output": "Output: 5", "explanation": "Explanation: The following are all possible routes:\n1 -> 0, used fuel = 1\n1 -> 2 -> 0, used fuel = 5\n1 -> 2 -> 1 -> 0, used fuel = 5\n1 -> 0 -> 1 -> 0, used fuel = 3\n1 -> 0 -> 1 -> 0 -> 1 -> 0, used fuel = 5"}, {"full_text": "Example 3:\nInput: locations = [5,2,1], start = 0, finish = 2, fuel = 3\nOutput: 0\nExplanation: It is impossible to get from 0 to 2 using only 3 units of fuel since the shortest route needs 4 units of fuel.", "input": "Input: locations = [5,2,1], start = 0, finish = 2, fuel = 3", "output": "Output: 0", "explanation": "Explanation: It is impossible to get from 0 to 2 using only 3 units of fuel since the shortest route needs 4 units of fuel."}], "constraints": "Constraints:\n2 <= locations.length <= 100\n1 <= locations[i] <= 10^9\nAll integers in locations are distinct.\n0 <= start, finish < locations.length\n1 <= fuel <= 200", "notes": ""}, "1569": {"label": "Hard", "title": "Number of Ways to Reorder Array to Get Same BST", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4924, "total_accepted": 8900.0, "total_submissions": 18000.0, "testcase_example": "'[2,1,3]'", "body": "Given an array nums that represents a permutation of integers from 1 to n. We are going to construct a binary search tree (BST) by inserting the elements of nums in order into an initially empty BST. Find the number of different ways to reorder nums so that the constructed BST is identical to that formed from the original array nums.\nFor example, given nums = [2,1,3], we will have 2 as the root, 1 as a left child, and 3 as a right child. The array [2,3,1] also yields the same BST but [3,2,1] yields a different BST.\nReturn the number of ways to reorder nums such that the BST formed is identical to the original BST formed from nums.\nSince the answer may be very large, return it modulo 10^9 + 7.", "examples": [{"full_text": "Example 1:\nInput: nums = [2,1,3]\nOutput: 1\nExplanation: We can reorder nums to be [2,3,1] which will yield the same BST. There are no other ways to reorder nums which will yield the same BST.", "input": "Input: nums = [2,1,3]", "output": "Output: 1", "explanation": "Explanation: We can reorder nums to be [2,3,1] which will yield the same BST. There are no other ways to reorder nums which will yield the same BST."}, {"full_text": "Example 2:\nInput: nums = [3,4,5,1,2]\nOutput: 5\nExplanation: The following 5 arrays will yield the same BST:\n[3,1,2,4,5]\n[3,1,4,2,5]\n[3,1,4,5,2]\n[3,4,1,2,5]\n[3,4,1,5,2]", "input": "Input: nums = [3,4,5,1,2]", "output": "Output: 5", "explanation": "Explanation: The following 5 arrays will yield the same BST:\n[3,1,2,4,5]\n[3,1,4,2,5]\n[3,1,4,5,2]\n[3,4,1,2,5]\n[3,4,1,5,2]"}, {"full_text": "Example 3:\nInput: nums = [1,2,3]\nOutput: 0\nExplanation: There are no other orderings of nums that will yield the same BST.", "input": "Input: nums = [1,2,3]", "output": "Output: 0", "explanation": "Explanation: There are no other orderings of nums that will yield the same BST."}], "constraints": "Constraints:\n1 <= nums.length <= 1000\n1 <= nums[i] <= nums.length\nAll integers in nums are distinct.", "notes": ""}, "1568": {"label": "Hard", "title": "Minimum Number of Days to Disconnect Island", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4905, "total_accepted": 7800.0, "total_submissions": 16000.0, "testcase_example": "'[[0,1,1,0],[0,1,1,0],[0,0,0,0]]'", "body": "You are given an m x n binary grid grid where 1 represents land and 0 represents water. An island is a maximal 4-directionally (horizontal or vertical) connected group of 1's.\nThe grid is said to be connected if we have exactly one island, otherwise is said disconnected.\nIn one day, we are allowed to change any single land cell (1) into a water cell (0).\nReturn the minimum number of days to disconnect the grid.", "examples": [{"full_text": "Example 1:\nInput: grid = [[0,1,1,0],[0,1,1,0],[0,0,0,0]]\nOutput: 2\nExplanation: We need at least 2 days to get a disconnected grid.\nChange land grid[1][1] and grid[0][2] to water and get 2 disconnected island.", "input": "Input: grid = [[0,1,1,0],[0,1,1,0],[0,0,0,0]]", "output": "Output: 2", "explanation": "Explanation: We need at least 2 days to get a disconnected grid.\nChange land grid[1][1] and grid[0][2] to water and get 2 disconnected island."}, {"full_text": "Example 2:\nInput: grid = [[1,1]]\nOutput: 2\nExplanation: Grid of full water is also disconnected ([[1,1]] -> [[0,0]]), 0 islands.", "input": "Input: grid = [[1,1]]", "output": "Output: 2", "explanation": "Explanation: Grid of full water is also disconnected ([[1,1]] -> [[0,0]]), 0 islands."}], "constraints": "Constraints:\nm == grid.length\nn == grid[i].length\n1 <= m, n <= 30\ngrid[i][j] is either 0 or 1.", "notes": ""}, "1563": {"label": "Hard", "title": "Stone Game V", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4094, "total_accepted": 12200.0, "total_submissions": 29900.0, "testcase_example": "'[6,2,3,4,5,5]'", "body": "There are several stones arranged in a row, and each stone has an associated value which is an integer given in the array stoneValue.\nIn each round of the game, Alice divides the row into two non-empty rows (i.e. left row and right row), then Bob calculates the value of each row which is the sum of the values of all the stones in this row. Bob throws away the row which has the maximum value, and Alice's score increases by the value of the remaining row. If the value of the two rows are equal, Bob lets Alice decide which row will be thrown away. The next round starts with the remaining row.\nThe game ends when there is only one stone remaining. Alice's is initially zero.\nReturn the maximum score that Alice can obtain.", "examples": [{"full_text": "Example 1:\nInput: stoneValue = [6,2,3,4,5,5]\nOutput: 18\nExplanation: In the first round, Alice divides the row to [6,2,3], [4,5,5]. The left row has the value 11 and the right row has value 14. Bob throws away the right row and Alice's score is now 11.\nIn the second round Alice divides the row to [6], [2,3]. This time Bob throws away the left row and Alice's score becomes 16 (11 + 5).\nThe last round Alice has only one choice to divide the row which is [2], [3]. Bob throws away the right row and Alice's score is now 18 (16 + 2). The game ends because only one stone is remaining in the row.", "input": "Input: stoneValue = [6,2,3,4,5,5]", "output": "Output: 18", "explanation": "Explanation: In the first round, Alice divides the row to [6,2,3], [4,5,5]. The left row has the value 11 and the right row has value 14. Bob throws away the right row and Alice's score is now 11.\nIn the second round Alice divides the row to [6], [2,3]. This time Bob throws away the left row and Alice's score becomes 16 (11 + 5).\nThe last round Alice has only one choice to divide the row which is [2], [3]. Bob throws away the right row and Alice's score is now 18 (16 + 2). The game ends because only one stone is remaining in the row."}, {"full_text": "Example 2:\nInput: stoneValue = [7,7,7,7,7,7,7]\nOutput: 28", "input": "Input: stoneValue = [7,7,7,7,7,7,7]", "output": "Output: 28", "explanation": ""}, {"full_text": "Example 3:\nInput: stoneValue = [4]\nOutput: 0", "input": "Input: stoneValue = [4]", "output": "Output: 0", "explanation": ""}], "constraints": "Constraints:\n1 <= stoneValue.length <= 500\n1 <= stoneValue[i] <= 10^6", "notes": ""}, "1553": {"label": "Hard", "title": "Minimum Number of Days to Eat N Oranges", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3257, "total_accepted": 20900.0, "total_submissions": 64200.0, "testcase_example": "'10'", "body": "There are n oranges in the kitchen and you decided to eat some of these oranges every day as follows:\nEat one orange.\nIf the number of remaining oranges n is divisible by 2 then you can eat n / 2 oranges.\nIf the number of remaining oranges n is divisible by 3 then you can eat 2 * (n / 3) oranges.\nYou can only choose one of the actions per day.\nGiven the integer n, return the minimum number of days to eat n oranges.", "examples": [{"full_text": "Example 1:\nInput: n = 10\nOutput: 4\nExplanation: You have 10 oranges.\nDay 1: Eat 1 orange, 10 - 1 = 9.\nDay 2: Eat 6 oranges, 9 - 2*(9/3) = 9 - 6 = 3. (Since 9 is divisible by 3)\nDay 3: Eat 2 oranges, 3 - 2*(3/3) = 3 - 2 = 1.\nDay 4: Eat the last orange 1 - 1 = 0.\nYou need at least 4 days to eat the 10 oranges.", "input": "Input: n = 10", "output": "Output: 4", "explanation": "Explanation: You have 10 oranges.\nDay 1: Eat 1 orange, 10 - 1 = 9.\nDay 2: Eat 6 oranges, 9 - 2*(9/3) = 9 - 6 = 3. (Since 9 is divisible by 3)\nDay 3: Eat 2 oranges, 3 - 2*(3/3) = 3 - 2 = 1.\nDay 4: Eat the last orange 1 - 1 = 0.\nYou need at least 4 days to eat the 10 oranges."}, {"full_text": "Example 2:\nInput: n = 6\nOutput: 3\nExplanation: You have 6 oranges.\nDay 1: Eat 3 oranges, 6 - 6/2 = 6 - 3 = 3. (Since 6 is divisible by 2).\nDay 2: Eat 2 oranges, 3 - 2*(3/3) = 3 - 2 = 1. (Since 3 is divisible by 3)\nDay 3: Eat the last orange 1 - 1 = 0.\nYou need at least 3 days to eat the 6 oranges.", "input": "Input: n = 6", "output": "Output: 3", "explanation": "Explanation: You have 6 oranges.\nDay 1: Eat 3 oranges, 6 - 6/2 = 6 - 3 = 3. (Since 6 is divisible by 2).\nDay 2: Eat 2 oranges, 3 - 2*(3/3) = 3 - 2 = 1. (Since 3 is divisible by 3)\nDay 3: Eat the last orange 1 - 1 = 0.\nYou need at least 3 days to eat the 6 oranges."}], "constraints": "Constraints:\n1 <= n <= 2 * 10^9", "notes": ""}, "1547": {"label": "Hard", "title": "Minimum Cost to Cut a Stick", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5493, "total_accepted": 20300.0, "total_submissions": 36900.0, "testcase_example": "'7\\n[1,3,4,5]'", "body": "Given a wooden stick of length n units. The stick is labelled from 0 to n. For example, a stick of length 6 is labelled as follows:\nGiven an integer array cuts where cuts[i] denotes a position you should perform a cut at.\nYou should perform the cuts in order, you can change the order of the cuts as you wish.\nThe cost of one cut is the length of the stick to be cut, the total cost is the sum of costs of all cuts. When you cut a stick, it will be split into two smaller sticks (i.e. the sum of their lengths is the length of the stick before the cut). Please refer to the first example for a better explanation.\nReturn the minimum total cost of the cuts.", "examples": [{"full_text": "Example 1:\nInput: n = 7, cuts = [1,3,4,5]\nOutput: 16\nExplanation: Using cuts order = [1, 3, 4, 5] as in the input leads to the following scenario:\nThe first cut is done to a rod of length 7 so the cost is 7. The second cut is done to a rod of length 6 (i.e. the second part of the first cut), the third is done to a rod of length 4 and the last cut is to a rod of length 3. The total cost is 7 + 6 + 4 + 3 = 20.\nRearranging the cuts to be [3, 5, 1, 4] for example will lead to a scenario with total cost = 16 (as shown in the example photo 7 + 4 + 3 + 2 = 16).", "input": "Input: n = 7, cuts = [1,3,4,5]", "output": "Output: 16", "explanation": "Explanation: Using cuts order = [1, 3, 4, 5] as in the input leads to the following scenario:\nThe first cut is done to a rod of length 7 so the cost is 7. The second cut is done to a rod of length 6 (i.e. the second part of the first cut), the third is done to a rod of length 4 and the last cut is to a rod of length 3. The total cost is 7 + 6 + 4 + 3 = 20.\nRearranging the cuts to be [3, 5, 1, 4] for example will lead to a scenario with total cost = 16 (as shown in the example photo 7 + 4 + 3 + 2 = 16)."}, {"full_text": "Example 2:\nInput: n = 9, cuts = [5,6,1,4,2]\nOutput: 22\nExplanation: If you try the given cuts ordering the cost will be 25.\nThere are much ordering with total cost <= 25, for example, the order [4, 6, 5, 2, 1] has total cost = 22 which is the minimum possible.", "input": "Input: n = 9, cuts = [5,6,1,4,2]", "output": "Output: 22", "explanation": "Explanation: If you try the given cuts ordering the cost will be 25.\nThere are much ordering with total cost <= 25, for example, the order [4, 6, 5, 2, 1] has total cost = 22 which is the minimum possible."}], "constraints": "Constraints:\n2 <= n <= 10^6\n1 <= cuts.length <= min(n - 1, 100)\n1 <= cuts[i] <= n - 1\nAll the integers in cuts array are distinct.", "notes": ""}, "1542": {"label": "Hard", "title": "Find Longest Awesome Substring", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4028, "total_accepted": 8400.0, "total_submissions": 20900.0, "testcase_example": "'\"3242415\"'", "body": "You are given a string s. An awesome substring is a non-empty substring of s such that we can make any number of swaps in order to make it a palindrome.\nReturn the length of the maximum length awesome substring of s.", "examples": [{"full_text": "Example 1:\nInput: s = \"3242415\"\nOutput: 5\nExplanation: \"24241\" is the longest awesome substring, we can form the palindrome \"24142\" with some swaps.", "input": "Input: s = \"3242415\"", "output": "Output: 5", "explanation": "Explanation: \"24241\" is the longest awesome substring, we can form the palindrome \"24142\" with some swaps."}, {"full_text": "Example 2:\nInput: s = \"12345678\"\nOutput: 1", "input": "Input: s = \"12345678\"", "output": "Output: 1", "explanation": ""}, {"full_text": "Example 3:\nInput: s = \"213123\"\nOutput: 6\nExplanation: \"213123\" is the longest awesome substring, we can form the palindrome \"231132\" with some swaps.", "input": "Input: s = \"213123\"", "output": "Output: 6", "explanation": "Explanation: \"213123\" is the longest awesome substring, we can form the palindrome \"231132\" with some swaps."}], "constraints": "Constraints:\n1 <= s.length <= 10^5\ns consists only of digits.", "notes": ""}, "1537": {"label": "Hard", "title": "Get the Maximum Score", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3898, "total_accepted": 15600.0, "total_submissions": 40000.0, "testcase_example": "'[2,4,5,8,10]\\n[4,6,8,9]'", "body": "You are given two sorted arrays of distinct integers nums1 and nums2.\nA valid path is defined as follows:\nChoose array nums1 or nums2 to traverse (from index-0).\nTraverse the current array from left to right.\nIf you are reading any value that is present in nums1 and nums2 you are allowed to change your path to the other array. (Only one repeated value is considered in the valid path).\nThe score is defined as the sum of uniques values in a valid path.\nReturn the maximum score you can obtain of all possible valid paths. Since the answer may be too large, return it modulo 10^9 + 7.", "examples": [{"full_text": "Example 1:\nInput: nums1 = [2,4,5,8,10], nums2 = [4,6,8,9]\nOutput: 30\nExplanation: Valid paths:\n[2,4,5,8,10], [2,4,5,8,9], [2,4,6,8,9], [2,4,6,8,10], (starting from nums1)\n[4,6,8,9], [4,5,8,10], [4,5,8,9], [4,6,8,10] (starting from nums2)\nThe maximum is obtained with the path in green [2,4,6,8,10].", "input": "Input: nums1 = [2,4,5,8,10], nums2 = [4,6,8,9]", "output": "Output: 30", "explanation": "Explanation: Valid paths:\n[2,4,5,8,10], [2,4,5,8,9], [2,4,6,8,9], [2,4,6,8,10], (starting from nums1)\n[4,6,8,9], [4,5,8,10], [4,5,8,9], [4,6,8,10] (starting from nums2)\nThe maximum is obtained with the path in green [2,4,6,8,10]."}, {"full_text": "Example 2:\nInput: nums1 = [1,3,5,7,9], nums2 = [3,5,100]\nOutput: 109\nExplanation: Maximum sum is obtained with the path [1,3,5,100].", "input": "Input: nums1 = [1,3,5,7,9], nums2 = [3,5,100]", "output": "Output: 109", "explanation": "Explanation: Maximum sum is obtained with the path [1,3,5,100]."}, {"full_text": "Example 3:\nInput: nums1 = [1,2,3,4,5], nums2 = [6,7,8,9,10]\nOutput: 40\nExplanation: There are no common elements between nums1 and nums2.\nMaximum sum is obtained with the path [6,7,8,9,10].", "input": "Input: nums1 = [1,2,3,4,5], nums2 = [6,7,8,9,10]", "output": "Output: 40", "explanation": "Explanation: There are no common elements between nums1 and nums2.\nMaximum sum is obtained with the path [6,7,8,9,10]."}], "constraints": "Constraints:\n1 <= nums1.length, nums2.length <= 10^5\n1 <= nums1[i], nums2[i] <= 10^7\nnums1 and nums2 are strictly increasing.", "notes": ""}, "1531": {"label": "Hard", "title": "String Compression II", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3746, "total_accepted": 10100.0, "total_submissions": 26900.0, "testcase_example": "'\"aaabcccd\"\\n2'", "body": "Run-length encoding is a string compression method that works by\nreplacing consecutive identical characters (repeated 2 or more times) with the concatenation of the character and the number marking the count of the characters (length of the run). For example, to compress the string\n\"aabccc\"\nwe replace \"aa\"\nby\n\"a2\"\nand replace \"ccc\"\nby\n\"c3\". Thus the compressed string becomes \"a2bc3\".\nNotice that in this problem, we are not adding\n'1'\nafter single characters.\nGiven a\nstring s\nand an integer k. You need to delete at most\nk characters from\ns\nsuch that the run-length encoded version of s\nhas minimum length.\nFind the minimum length of the run-length encoded\nversion of s after deleting at most k characters.", "examples": [{"full_text": "Example 1:\nInput: s = \"aaabcccd\", k = 2\nOutput: 4\nExplanation: Compressing s without deleting anything will give us \"a3bc3d\" of length 6. Deleting any of the characters 'a' or 'c' would at most decrease the length of the compressed string to 5, for instance delete 2 'a' then we will have s = \"abcccd\" which compressed is abc3d. Therefore, the optimal way is to delete 'b' and 'd', then the compressed version of s will be \"a3c3\" of length 4.", "input": "Input: s = \"aaabcccd\", k = 2", "output": "Output: 4", "explanation": "Explanation: Compressing s without deleting anything will give us \"a3bc3d\" of length 6. Deleting any of the characters 'a' or 'c' would at most decrease the length of the compressed string to 5, for instance delete 2 'a' then we will have s = \"abcccd\" which compressed is abc3d. Therefore, the optimal way is to delete 'b' and 'd', then the compressed version of s will be \"a3c3\" of length 4."}, {"full_text": "Example 2:\nInput: s = \"aabbaa\", k = 2\nOutput: 2\nExplanation: If we delete both 'b' characters, the resulting compressed string would be \"a4\" of length 2.", "input": "Input: s = \"aabbaa\", k = 2", "output": "Output: 2", "explanation": "Explanation: If we delete both 'b' characters, the resulting compressed string would be \"a4\" of length 2."}, {"full_text": "Example 3:\nInput: s = \"aaaaaaaaaaa\", k = 0\nOutput: 3\nExplanation: Since k is zero, we cannot delete anything. The compressed string is \"a11\" of length 3.", "input": "Input: s = \"aaaaaaaaaaa\", k = 0", "output": "Output: 3", "explanation": "Explanation: Since k is zero, we cannot delete anything. The compressed string is \"a11\" of length 3."}], "constraints": "Constraints:\n1 <= s.length <= 100\n0 <= k <= s.length\ns contains only lowercase English letters.", "notes": ""}, "1526": {"label": "Hard", "title": "Minimum Number of Increments on Subarrays to Form a Target Array", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6787000000000001, "total_accepted": 22900.0, "total_submissions": 33700.0, "testcase_example": "'[1,2,3,2,1]'", "body": "You are given an integer array target. You have an integer array initial of the same size as target with all elements initially zeros.\nIn one operation you can choose any subarray from initial and increment each value by one.\nReturn the minimum number of operations to form a target array from initial.\nThe test cases are generated so that the answer fits in a 32-bit integer.", "examples": [{"full_text": "Example 1:\nInput: target = [1,2,3,2,1]\nOutput: 3\nExplanation: We need at least 3 operations to form the target array from the initial array.\n[0,0,0,0,0] increment 1 from index 0 to 4 (inclusive).\n[1,1,1,1,1] increment 1 from index 1 to 3 (inclusive).\n[1,2,2,2,1] increment 1 at index 2.\n[1,2,3,2,1] target array is formed.", "input": "Input: target = [1,2,3,2,1]", "output": "Output: 3", "explanation": "Explanation: We need at least 3 operations to form the target array from the initial array.\n[0,0,0,0,0] increment 1 from index 0 to 4 (inclusive).\n[1,1,1,1,1] increment 1 from index 1 to 3 (inclusive).\n[1,2,2,2,1] increment 1 at index 2.\n[1,2,3,2,1] target array is formed."}, {"full_text": "Example 2:\nInput: target = [3,1,1,2]\nOutput: 4\nExplanation: [0,0,0,0] -> [1,1,1,1] -> [1,1,1,2] -> [2,1,1,2] -> [3,1,1,2]", "input": "Input: target = [3,1,1,2]", "output": "Output: 4", "explanation": "Explanation: [0,0,0,0] -> [1,1,1,1] -> [1,1,1,2] -> [2,1,1,2] -> [3,1,1,2]"}, {"full_text": "Example 3:\nInput: target = [3,1,5,4,2]\nOutput: 7\nExplanation: [0,0,0,0,0] -> [1,1,1,1,1] -> [2,1,1,1,1] -> [3,1,1,1,1] -> [3,1,2,2,2] -> [3,1,3,3,2] -> [3,1,4,4,2] -> [3,1,5,4,2].", "input": "Input: target = [3,1,5,4,2]", "output": "Output: 7", "explanation": "Explanation: [0,0,0,0,0] -> [1,1,1,1,1] -> [2,1,1,1,1] -> [3,1,1,1,1] -> [3,1,2,2,2] -> [3,1,3,3,2] -> [3,1,4,4,2] -> [3,1,5,4,2]."}], "constraints": "Constraints:\n1 <= target.length <= 10^5\n1 <= target[i] <= 10^5", "notes": ""}, "1521": {"label": "Hard", "title": "Find a Value of a Mysterious Function Closest to Target", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4362, "total_accepted": 7200.0, "total_submissions": 16500.0, "testcase_example": "'[9,12,3,7,15]\\n5'", "body": "Winston was given the above mysterious function func. He has an integer array arr and an integer target and he wants to find the values l and r that make the value |func(arr, l, r) - target| minimum possible.\nReturn the minimum possible value of |func(arr, l, r) - target|.\nNotice that func should be called with the values l and r where 0 <= l, r < arr.length.", "examples": [{"full_text": "Example 1:\nInput: arr = [9,12,3,7,15], target = 5\nOutput: 2\nExplanation: Calling func with all the pairs of [l,r] = [[0,0],[1,1],[2,2],[3,3],[4,4],[0,1],[1,2],[2,3],[3,4],[0,2],[1,3],[2,4],[0,3],[1,4],[0,4]], Winston got the following results [9,12,3,7,15,8,0,3,7,0,0,3,0,0,0]. The value closest to 5 is 7 and 3, thus the minimum difference is 2.", "input": "Input: arr = [9,12,3,7,15], target = 5", "output": "Output: 2", "explanation": "Explanation: Calling func with all the pairs of [l,r] = [[0,0],[1,1],[2,2],[3,3],[4,4],[0,1],[1,2],[2,3],[3,4],[0,2],[1,3],[2,4],[0,3],[1,4],[0,4]], Winston got the following results [9,12,3,7,15,8,0,3,7,0,0,3,0,0,0]. The value closest to 5 is 7 and 3, thus the minimum difference is 2."}, {"full_text": "Example 2:\nInput: arr = [1000000,1000000,1000000], target = 1\nOutput: 999999\nExplanation: Winston called the func with all possible values of [l,r] and he always got 1000000, thus the min difference is 999999.", "input": "Input: arr = [1000000,1000000,1000000], target = 1", "output": "Output: 999999", "explanation": "Explanation: Winston called the func with all possible values of [l,r] and he always got 1000000, thus the min difference is 999999."}, {"full_text": "Example 3:\nInput: arr = [1,2,4,8,16], target = 0\nOutput: 0", "input": "Input: arr = [1,2,4,8,16], target = 0", "output": "Output: 0", "explanation": ""}], "constraints": "Constraints:\n1 <= arr.length <= 10^5\n1 <= arr[i] <= 10^6\n0 <= target <= 10^7", "notes": ""}, "1520": {"label": "Hard", "title": "Maximum Number of Non-Overlapping Substrings", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3734, "total_accepted": 10400.0, "total_submissions": 27700.0, "testcase_example": "'\"adefaddaccc\"'", "body": "Given a string s\nof lowercase letters, you need to find the maximum number of non-empty substrings of\ns\nthat meet the following conditions:\nThe substrings do not overlap, that is for any two substrings s[i..j] and s[k..l], either j < k or i > l\nis true.\nA substring that contains a certain character\nc\nmust also contain all occurrences of c.\nFind the maximum number of substrings that meet the above conditions. If there are multiple solutions with the same number of substrings, return the one with minimum total length.\nIt can be shown that there exists a unique solution of minimum total length.\nNotice that you can return the substrings in any order.", "examples": [{"full_text": "Example 1:\nInput: s = \"adefaddaccc\"\nOutput: [\"e\",\"f\",\"ccc\"]\nExplanation:\nThe following are all the possible substrings that meet the conditions:\n[\n\"adefaddaccc\"\n\"adefadda\",\n\"ef\",\n\"e\",\n\"f\",\n\"ccc\",\n]\nIf we choose the first string, we cannot choose anything else and we'd get only 1. If we choose \"adefadda\", we are left with \"ccc\" which is the only one that doesn't overlap, thus obtaining 2 substrings. Notice also, that it's not optimal to choose \"ef\" since it can be split into two. Therefore, the optimal way is to choose [\"e\",\"f\",\"ccc\"] which gives us 3 substrings. No other solution of the same number of substrings exist.", "input": "Input: s = \"adefaddaccc\"", "output": "Output: [\"e\",\"f\",\"ccc\"]", "explanation": "Explanation:\nThe following are all the possible substrings that meet the conditions:\n[\n\"adefaddaccc\"\n\"adefadda\",\n\"ef\",\n\"e\",\n\"f\",\n\"ccc\",\n]\nIf we choose the first string, we cannot choose anything else and we'd get only 1. If we choose \"adefadda\", we are left with \"ccc\" which is the only one that doesn't overlap, thus obtaining 2 substrings. Notice also, that it's not optimal to choose \"ef\" since it can be split into two. Therefore, the optimal way is to choose [\"e\",\"f\",\"ccc\"] which gives us 3 substrings. No other solution of the same number of substrings exist."}, {"full_text": "Example 2:\nInput: s = \"abbaccd\"\nOutput: [\"d\",\"bb\",\"cc\"]\nExplanation: Notice that while the set of substrings [\"d\",\"abba\",\"cc\"] also has length 3, it's considered incorrect since it has larger total length.", "input": "Input: s = \"abbaccd\"", "output": "Output: [\"d\",\"bb\",\"cc\"]", "explanation": "Explanation: Notice that while the set of substrings [\"d\",\"abba\",\"cc\"] also has length 3, it's considered incorrect since it has larger total length."}], "constraints": "Constraints:\n1 <= s.length <= 10^5\ns\ncontains only lowercase English letters.", "notes": ""}, "1515": {"label": "Hard", "title": "Best Position for a Service Centre", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3895, "total_accepted": 8900.0, "total_submissions": 22900.0, "testcase_example": "'[[0,1],[1,0],[1,2],[2,1]]'", "body": "A delivery company wants to build a new service center in a new city. The company knows the positions of all the customers in this city on a 2D-Map and wants to build the new center in a position such that the sum of the euclidean distances to all customers is minimum.\nGiven an array positions where positions[i] = [xi, yi] is the position of the ith customer on the map, return the minimum sum of the euclidean distances to all customers.\nIn other words, you need to choose the position of the service center [xcentre, ycentre] such that the following formula is minimized:\nAnswers within 10^-5 of the actual value will be accepted.", "examples": [{"full_text": "Example 1:\nInput: positions = [[0,1],[1,0],[1,2],[2,1]]\nOutput: 4.00000\nExplanation: As shown, you can see that choosing [xcentre, ycentre] = [1, 1] will make the distance to each customer = 1, the sum of all distances is 4 which is the minimum possible we can achieve.", "input": "Input: positions = [[0,1],[1,0],[1,2],[2,1]]", "output": "Output: 4.00000", "explanation": "Explanation: As shown, you can see that choosing [xcentre, ycentre] = [1, 1] will make the distance to each customer = 1, the sum of all distances is 4 which is the minimum possible we can achieve."}, {"full_text": "Example 2:\nInput: positions = [[1,1],[3,3]]\nOutput: 2.82843\nExplanation: The minimum possible sum of distances = sqrt(2) + sqrt(2) = 2.82843", "input": "Input: positions = [[1,1],[3,3]]", "output": "Output: 2.82843", "explanation": "Explanation: The minimum possible sum of distances = sqrt(2) + sqrt(2) = 2.82843"}], "constraints": "Constraints:\n1 <= positions.length <= 50\npositions[i].length == 2\n0 <= xi, yi <= 100", "notes": ""}, "1510": {"label": "Hard", "title": "Stone Game IV", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.608, "total_accepted": 56600.0, "total_submissions": 93100.0, "testcase_example": "'1'", "body": "Alice and Bob take turns playing a game, with Alice starting first.\nInitially, there are n stones in a pile. On each player's turn, that player makes a move consisting of removing any non-zero square number of stones in the pile.\nAlso, if a player cannot make a move, he/she loses the game.\nGiven a positive integer n, return true if and only if Alice wins the game otherwise return false, assuming both players play optimally.", "examples": [{"full_text": "Example 1:\nInput: n = 1\nOutput: true\nExplanation: Alice can remove 1 stone winning the game because Bob doesn't have any moves.", "input": "Input: n = 1", "output": "Output: true", "explanation": "Explanation: Alice can remove 1 stone winning the game because Bob doesn't have any moves."}, {"full_text": "Example 2:\nInput: n = 2\nOutput: false\nExplanation: Alice can only remove 1 stone, after that Bob removes the last one winning the game (2 -> 1 -> 0).", "input": "Input: n = 2", "output": "Output: false", "explanation": "Explanation: Alice can only remove 1 stone, after that Bob removes the last one winning the game (2 -> 1 -> 0)."}, {"full_text": "Example 3:\nInput: n = 4\nOutput: true\nExplanation: n is already a perfect square, Alice can win with one move, removing 4 stones (4 -> 0).", "input": "Input: n = 4", "output": "Output: true", "explanation": "Explanation: n is already a perfect square, Alice can win with one move, removing 4 stones (4 -> 0)."}], "constraints": "Constraints:\n1 <= n <= 10^5", "notes": ""}, "1505": {"label": "Hard", "title": "Minimum Possible Integer After at Most K Adjacent Swaps On Digits", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.37439999999999996, "total_accepted": 7100.0, "total_submissions": 19000.0, "testcase_example": "'\"4321\"\\n4'", "body": "You are given a string num representing the digits of a very large integer and an integer k. You are allowed to swap any two adjacent digits of the integer at most k times.\nReturn the minimum integer you can obtain also as a string.", "examples": [{"full_text": "Example 1:\nInput: num = \"4321\", k = 4\nOutput: \"1342\"\nExplanation: The steps to obtain the minimum integer from 4321 with 4 adjacent swaps are shown.", "input": "Input: num = \"4321\", k = 4", "output": "Output: \"1342\"", "explanation": "Explanation: The steps to obtain the minimum integer from 4321 with 4 adjacent swaps are shown."}, {"full_text": "Example 2:\nInput: num = \"100\", k = 1\nOutput: \"010\"\nExplanation: It's ok for the output to have leading zeros, but the input is guaranteed not to have any leading zeros.", "input": "Input: num = \"100\", k = 1", "output": "Output: \"010\"", "explanation": "Explanation: It's ok for the output to have leading zeros, but the input is guaranteed not to have any leading zeros."}, {"full_text": "Example 3:\nInput: num = \"36789\", k = 1000\nOutput: \"36789\"\nExplanation: We can keep the number without any swaps.", "input": "Input: num = \"36789\", k = 1000", "output": "Output: \"36789\"", "explanation": "Explanation: We can keep the number without any swaps."}], "constraints": "Constraints:\n1 <= num.length <= 3 * 10^4\nnum consists of only digits and does not contain leading zeros.\n1 <= k <= 10^4", "notes": ""}, "1499": {"label": "Hard", "title": "Max Value of Equation", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4689, "total_accepted": 28400.0, "total_submissions": 60500.0, "testcase_example": "'[[1,3],[2,0],[5,10],[6,-10]]\\n1'", "body": "You are given an array points containing the coordinates of points on a 2D plane, sorted by the x-values, where points[i] = [xi, yi] such that xi < xj for all 1 <= i < j <= points.length. You are also given an integer k.\nReturn the maximum value of the equation yi + yj + |xi - xj| where |xi - xj| <= k and 1 <= i < j <= points.length.\nIt is guaranteed that there exists at least one pair of points that satisfy the constraint |xi - xj| <= k.", "examples": [{"full_text": "Example 1:\nInput: points = [[1,3],[2,0],[5,10],[6,-10]], k = 1\nOutput: 4\nExplanation: The first two points satisfy the condition |xi - xj| <= 1 and if we calculate the equation we get 3 + 0 + |1 - 2| = 4. Third and fourth points also satisfy the condition and give a value of 10 + -10 + |5 - 6| = 1.\nNo other pairs satisfy the condition, so we return the max of 4 and 1.", "input": "Input: points = [[1,3],[2,0],[5,10],[6,-10]], k = 1", "output": "Output: 4", "explanation": "Explanation: The first two points satisfy the condition |xi - xj| <= 1 and if we calculate the equation we get 3 + 0 + |1 - 2| = 4. Third and fourth points also satisfy the condition and give a value of 10 + -10 + |5 - 6| = 1.\nNo other pairs satisfy the condition, so we return the max of 4 and 1."}, {"full_text": "Example 2:\nInput: points = [[0,0],[3,0],[9,2]], k = 3\nOutput: 3\nExplanation: Only the first two points have an absolute difference of 3 or less in the x-values, and give the value of 0 + 0 + |0 - 3| = 3.", "input": "Input: points = [[0,0],[3,0],[9,2]], k = 3", "output": "Output: 3", "explanation": "Explanation: Only the first two points have an absolute difference of 3 or less in the x-values, and give the value of 0 + 0 + |0 - 3| = 3."}], "constraints": "Constraints:\n2 <= points.length <= 10^5\npoints[i].length == 2\n-10^8 <= xi, yi <= 10^8\n0 <= k <= 2 * 10^8\nxi < xj for all 1 <= i < j <= points.length\nxi form a strictly increasing sequence.", "notes": ""}, "1494": {"label": "Hard", "title": "Parallel Courses II", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3134, "total_accepted": 9800.0, "total_submissions": 31100.0, "testcase_example": "'4\\n[[2,1],[3,1],[1,4]]\\n2'", "body": "You are given an integer n, which indicates that there are n courses labeled from 1 to n. You are also given an array relations where relations[i] = [prevCoursei, nextCoursei], representing a prerequisite relationship between course prevCoursei and course nextCoursei: course prevCoursei has to be taken before course nextCoursei. Also, you are given the integer k.\nIn one semester, you can take at most k courses as long as you have taken all the prerequisites in the previous semester for the courses you are taking.\nReturn the minimum number of semesters needed to take all courses. The testcases will be generated such that it is possible to take every course.", "examples": [{"full_text": "Example 1:\nInput: n = 4, dependencies = [[2,1],[3,1],[1,4]], k = 2\nOutput: 3\nExplanation: The figure above represents the given graph.\nIn the first semester, you can take courses 2 and 3.\nIn the second semester, you can take course 1.\nIn the third semester, you can take course 4.", "input": "Input: n = 4, dependencies = [[2,1],[3,1],[1,4]], k = 2", "output": "Output: 3", "explanation": "Explanation: The figure above represents the given graph.\nIn the first semester, you can take courses 2 and 3.\nIn the second semester, you can take course 1.\nIn the third semester, you can take course 4."}, {"full_text": "Example 2:\nInput: n = 5, dependencies = [[2,1],[3,1],[4,1],[1,5]], k = 2\nOutput: 4\nExplanation: The figure above represents the given graph.\nIn the first semester, you can take courses 2 and 3 only since you cannot take more than two per semester.\nIn the second semester, you can take course 4.\nIn the third semester, you can take course 1.\nIn the fourth semester, you can take course 5.", "input": "Input: n = 5, dependencies = [[2,1],[3,1],[4,1],[1,5]], k = 2", "output": "Output: 4", "explanation": "Explanation: The figure above represents the given graph.\nIn the first semester, you can take courses 2 and 3 only since you cannot take more than two per semester.\nIn the second semester, you can take course 4.\nIn the third semester, you can take course 1.\nIn the fourth semester, you can take course 5."}, {"full_text": "Example 3:\nInput: n = 11, dependencies = [], k = 2\nOutput: 6", "input": "Input: n = 11, dependencies = [], k = 2", "output": "Output: 6", "explanation": ""}], "constraints": "Constraints:\n1 <= n <= 15\n1 <= k <= n\n0 <= relations.length <= n * (n-1) / 2\nrelations[i].length == 2\n1 <= prevCoursei, nextCoursei <= n\nprevCoursei != nextCoursei\nAll the pairs [prevCoursei, nextCoursei] are unique.\nThe given graph is a directed acyclic graph.", "notes": ""}, "1489": {"label": "Hard", "title": "Find Critical and Pseudo-Critical Edges in Minimum Spanning Tree", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5267000000000001, "total_accepted": 7100.0, "total_submissions": 13500.0, "testcase_example": "'5\\n[[0,1,1],[1,2,1],[2,3,2],[0,3,2],[0,4,3],[3,4,3],[1,4,6]]'", "body": "Given a weighted undirected connected graph with n\nvertices numbered from 0 to n - 1,\nand an array edges\nwhere edges[i] = [ai, bi, weighti] represents a bidirectional and weighted edge between nodes\nai\nand bi. A minimum spanning tree (MST) is a subset of the graph's edges that connects all vertices without cycles\nand with the minimum possible total edge weight.\nFind all the critical and pseudo-critical edges in the given graph's minimum spanning tree (MST). An MST edge whose deletion from the graph would cause the MST weight to increase is called a\ncritical edge. On\nthe other hand, a pseudo-critical edge is that which can appear in some MSTs but not all.\nNote that you can return the indices of the edges in any order.", "examples": [{"full_text": "Example 1:\nInput: n = 5, edges = [[0,1,1],[1,2,1],[2,3,2],[0,3,2],[0,4,3],[3,4,3],[1,4,6]]\nOutput: [[0,1],[2,3,4,5]]\nExplanation: The figure above describes the graph.\nThe following figure shows all the possible MSTs:\nNotice that the two edges 0 and 1 appear in all MSTs, therefore they are critical edges, so we return them in the first list of the output.\nThe edges 2, 3, 4, and 5 are only part of some MSTs, therefore they are considered pseudo-critical edges. We add them to the second list of the output.", "input": "Input: n = 5, edges = [[0,1,1],[1,2,1],[2,3,2],[0,3,2],[0,4,3],[3,4,3],[1,4,6]]", "output": "Output: [[0,1],[2,3,4,5]]", "explanation": "Explanation: The figure above describes the graph.\nThe following figure shows all the possible MSTs:\nNotice that the two edges 0 and 1 appear in all MSTs, therefore they are critical edges, so we return them in the first list of the output.\nThe edges 2, 3, 4, and 5 are only part of some MSTs, therefore they are considered pseudo-critical edges. We add them to the second list of the output."}, {"full_text": "Example 2:\nInput: n = 4, edges = [[0,1,1],[1,2,1],[2,3,1],[0,3,1]]\nOutput: [[],[0,1,2,3]]\nExplanation: We can observe that since all 4 edges have equal weight, choosing any 3 edges from the given 4 will yield an MST. Therefore all 4 edges are pseudo-critical.", "input": "Input: n = 4, edges = [[0,1,1],[1,2,1],[2,3,1],[0,3,1]]", "output": "Output: [[],[0,1,2,3]]", "explanation": "Explanation: We can observe that since all 4 edges have equal weight, choosing any 3 edges from the given 4 will yield an MST. Therefore all 4 edges are pseudo-critical."}], "constraints": "Constraints:\n2 <= n <= 100\n1 <= edges.length <= min(200, n * (n - 1) / 2)\nedges[i].length == 3\n0 <= ai < bi < n\n1 <= weighti\n<= 1000\nAll pairs (ai, bi) are distinct.", "notes": ""}, "1483": {"label": "Hard", "title": "Kth Ancestor of a Tree Node", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.33299999999999996, "total_accepted": 18900.0, "total_submissions": 56900.0, "testcase_example": "'[\"TreeAncestor\",\"getKthAncestor\",\"getKthAncestor\",\"getKthAncestor\"]\\n' +\n  '[[7,[-1,0,0,1,1,2,2]],[3,1],[5,2],[6,3]]'", "body": "You are given a tree with n nodes numbered from 0 to n - 1 in the form of a parent array parent where parent[i] is the parent of i^th node. The root of the tree is node 0. Find the k^th ancestor of a given node.\nThe k^th ancestor of a tree node is the k^th node in the path from that node to the root node.\nImplement the TreeAncestor class:\nTreeAncestor(int n, int[] parent) Initializes the object with the number of nodes in the tree and the parent array.\nint getKthAncestor(int node, int k) return the k^th ancestor of the given node node. If there is no such ancestor, return -1.", "examples": [{"full_text": "Example 1:\nInput\n[\"TreeAncestor\", \"getKthAncestor\", \"getKthAncestor\", \"getKthAncestor\"]\n[[7, [-1, 0, 0, 1, 1, 2, 2]], [3, 1], [5, 2], [6, 3]]\nOutput\n[null, 1, 0, -1]\nExplanation\nTreeAncestor treeAncestor = new TreeAncestor(7, [-1, 0, 0, 1, 1, 2, 2]);\ntreeAncestor.getKthAncestor(3, 1); // returns 1 which is the parent of 3\ntreeAncestor.getKthAncestor(5, 2); // returns 0 which is the grandparent of 5\ntreeAncestor.getKthAncestor(6, 3); // returns -1 because there is no such ancestor", "input": "Input\n[\"TreeAncestor\", \"getKthAncestor\", \"getKthAncestor\", \"getKthAncestor\"]\n[[7, [-1, 0, 0, 1, 1, 2, 2]], [3, 1], [5, 2], [6, 3]]", "output": "Output\n[null, 1, 0, -1]", "explanation": "Explanation\nTreeAncestor treeAncestor = new TreeAncestor(7, [-1, 0, 0, 1, 1, 2, 2]);\ntreeAncestor.getKthAncestor(3, 1); // returns 1 which is the parent of 3\ntreeAncestor.getKthAncestor(5, 2); // returns 0 which is the grandparent of 5\ntreeAncestor.getKthAncestor(6, 3); // returns -1 because there is no such ancestor"}], "constraints": "Constraints:\n1 <= k <= n <= 5 * 10^4\nparent.length == n\nparent[0] == -1\n0 <= parent[i] < n for all 0 < i < n\n0 <= node < n\nThere will be at most 5 * 10^4 queries.", "notes": ""}, "1478": {"label": "Hard", "title": "Allocate Mailboxes", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5547, "total_accepted": 14400.0, "total_submissions": 25900.0, "testcase_example": "'[1,4,8,10,20]\\n3'", "body": "Given the array houses where houses[i] is the location of the i^th house along a street and an integer k, allocate k mailboxes in the street.\nReturn the minimum total distance between each house and its nearest mailbox.\nThe test cases are generated so that the answer fits in a 32-bit integer.", "examples": [{"full_text": "Example 1:\nInput: houses = [1,4,8,10,20], k = 3\nOutput: 5\nExplanation: Allocate mailboxes in position 3, 9 and 20.\nMinimum total distance from each houses to nearest mailboxes is |3-1| + |4-3| + |9-8| + |10-9| + |20-20| = 5", "input": "Input: houses = [1,4,8,10,20], k = 3", "output": "Output: 5", "explanation": "Explanation: Allocate mailboxes in position 3, 9 and 20.\nMinimum total distance from each houses to nearest mailboxes is |3-1| + |4-3| + |9-8| + |10-9| + |20-20| = 5"}, {"full_text": "Example 2:\nInput: houses = [2,3,5,12,18], k = 2\nOutput: 9\nExplanation: Allocate mailboxes in position 3 and 14.\nMinimum total distance from each houses to nearest mailboxes is |2-3| + |3-3| + |5-3| + |12-14| + |18-14| = 9.", "input": "Input: houses = [2,3,5,12,18], k = 2", "output": "Output: 9", "explanation": "Explanation: Allocate mailboxes in position 3 and 14.\nMinimum total distance from each houses to nearest mailboxes is |2-3| + |3-3| + |5-3| + |12-14| + |18-14| = 9."}], "constraints": "Constraints:\n1 <= k <= houses.length <= 100\n1 <= houses[i] <= 10^4\nAll the integers of houses are unique.", "notes": ""}, "1473": {"label": "Hard", "title": "Paint House III", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5046, "total_accepted": 14200.0, "total_submissions": 28000.0, "testcase_example": "'[0,0,0,0,0]\\n[[1,10],[10,1],[10,1],[1,10],[5,1]]\\n5\\n2\\n3'", "body": "There is a row of m houses in a small city, each house must be painted with one of the n colors (labeled from 1 to n), some houses that have been painted last summer should not be painted again.\nA neighborhood is a maximal group of continuous houses that are painted with the same color.\nFor example: houses = [1,2,2,3,3,2,1,1] contains 5 neighborhoods [{1}, {2,2}, {3,3}, {2}, {1,1}].\nGiven an array houses, an m x n matrix cost and an integer target where:\nhouses[i]: is the color of the house i, and 0 if the house is not painted yet.\ncost[i][j]: is the cost of paint the house i with the color j + 1.\nReturn the minimum cost of painting all the remaining houses in such a way that there are exactly target neighborhoods. If it is not possible, return -1.", "examples": [{"full_text": "Example 1:\nInput: houses = [0,0,0,0,0], cost = [[1,10],[10,1],[10,1],[1,10],[5,1]], m = 5, n = 2, target = 3\nOutput: 9\nExplanation: Paint houses of this way [1,2,2,1,1]\nThis array contains target = 3 neighborhoods, [{1}, {2,2}, {1,1}].\nCost of paint all houses (1 + 1 + 1 + 1 + 5) = 9.", "input": "Input: houses = [0,0,0,0,0], cost = [[1,10],[10,1],[10,1],[1,10],[5,1]], m = 5, n = 2, target = 3", "output": "Output: 9", "explanation": "Explanation: Paint houses of this way [1,2,2,1,1]\nThis array contains target = 3 neighborhoods, [{1}, {2,2}, {1,1}].\nCost of paint all houses (1 + 1 + 1 + 1 + 5) = 9."}, {"full_text": "Example 2:\nInput: houses = [0,2,1,2,0], cost = [[1,10],[10,1],[10,1],[1,10],[5,1]], m = 5, n = 2, target = 3\nOutput: 11\nExplanation: Some houses are already painted, Paint the houses of this way [2,2,1,2,2]\nThis array contains target = 3 neighborhoods, [{2,2}, {1}, {2,2}].\nCost of paint the first and last house (10 + 1) = 11.", "input": "Input: houses = [0,2,1,2,0], cost = [[1,10],[10,1],[10,1],[1,10],[5,1]], m = 5, n = 2, target = 3", "output": "Output: 11", "explanation": "Explanation: Some houses are already painted, Paint the houses of this way [2,2,1,2,2]\nThis array contains target = 3 neighborhoods, [{2,2}, {1}, {2,2}].\nCost of paint the first and last house (10 + 1) = 11."}, {"full_text": "Example 3:\nInput: houses = [3,1,2,3], cost = [[1,1,1],[1,1,1],[1,1,1],[1,1,1]], m = 4, n = 3, target = 3\nOutput: -1\nExplanation: Houses are already painted with a total of 4 neighborhoods [{3},{1},{2},{3}] different of target = 3.", "input": "Input: houses = [3,1,2,3], cost = [[1,1,1],[1,1,1],[1,1,1],[1,1,1]], m = 4, n = 3, target = 3", "output": "Output: -1", "explanation": "Explanation: Houses are already painted with a total of 4 neighborhoods [{3},{1},{2},{3}] different of target = 3."}], "constraints": "Constraints:\nm == houses.length == cost.length\nn == cost[i].length\n1 <= m <= 100\n1 <= n <= 20\n1 <= target <= m\n0 <= houses[i] <= n\n1 <= cost[i][j] <= 10^4", "notes": ""}, "1467": {"label": "Hard", "title": "Probability of a Two Boxes Having The Same Number of Distinct Balls", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6079, "total_accepted": 5800.0, "total_submissions": 9500.0, "testcase_example": "'[1,1]'", "body": "Given 2n balls of k distinct colors. You will be given an integer array balls of size k where balls[i] is the number of balls of color i.\nAll the balls will be shuffled uniformly at random, then we will distribute the first n balls to the first box and the remaining n balls to the other box (Please read the explanation of the second example carefully).\nPlease note that the two boxes are considered different. For example, if we have two balls of colors a and b, and two boxes [] and (), then the distribution [a] (b) is considered different than the distribution [b] (a) (Please read the explanation of the first example carefully).\nReturn the probability that the two boxes have the same number of distinct balls. Answers within 10^-5 of the actual value will be accepted as correct.", "examples": [{"full_text": "Example 1:\nInput: balls = [1,1]\nOutput: 1.00000\nExplanation: Only 2 ways to divide the balls equally:\n- A ball of color 1 to box 1 and a ball of color 2 to box 2\n- A ball of color 2 to box 1 and a ball of color 1 to box 2\nIn both ways, the number of distinct colors in each box is equal. The probability is 2/2 = 1", "input": "Input: balls = [1,1]", "output": "Output: 1.00000", "explanation": "Explanation: Only 2 ways to divide the balls equally:\n- A ball of color 1 to box 1 and a ball of color 2 to box 2\n- A ball of color 2 to box 1 and a ball of color 1 to box 2\nIn both ways, the number of distinct colors in each box is equal. The probability is 2/2 = 1"}, {"full_text": "Example 2:\nInput: balls = [2,1,1]\nOutput: 0.66667\nExplanation: We have the set of balls [1, 1, 2, 3]\nThis set of balls will be shuffled randomly and we may have one of the 12 distinct shuffles with equal probability (i.e. 1/12):\n[1,1 / 2,3], [1,1 / 3,2], [1,2 / 1,3], [1,2 / 3,1], [1,3 / 1,2], [1,3 / 2,1], [2,1 / 1,3], [2,1 / 3,1], [2,3 / 1,1], [3,1 / 1,2], [3,1 / 2,1], [3,2 / 1,1]\nAfter that, we add the first two balls to the first box and the second two balls to the second box.\nWe can see that 8 of these 12 possible random distributions have the same number of distinct colors of balls in each box.\nProbability is 8/12 = 0.66667", "input": "Input: balls = [2,1,1]", "output": "Output: 0.66667", "explanation": "Explanation: We have the set of balls [1, 1, 2, 3]\nThis set of balls will be shuffled randomly and we may have one of the 12 distinct shuffles with equal probability (i.e. 1/12):\n[1,1 / 2,3], [1,1 / 3,2], [1,2 / 1,3], [1,2 / 3,1], [1,3 / 1,2], [1,3 / 2,1], [2,1 / 1,3], [2,1 / 3,1], [2,3 / 1,1], [3,1 / 1,2], [3,1 / 2,1], [3,2 / 1,1]\nAfter that, we add the first two balls to the first box and the second two balls to the second box.\nWe can see that 8 of these 12 possible random distributions have the same number of distinct colors of balls in each box.\nProbability is 8/12 = 0.66667"}, {"full_text": "Example 3:\nInput: balls = [1,2,1,2]\nOutput: 0.60000\nExplanation: The set of balls is [1, 2, 2, 3, 4, 4]. It is hard to display all the 180 possible random shuffles of this set but it is easy to check that 108 of them will have the same number of distinct colors in each box.\nProbability = 108 / 180 = 0.6", "input": "Input: balls = [1,2,1,2]", "output": "Output: 0.60000", "explanation": "Explanation: The set of balls is [1, 2, 2, 3, 4, 4]. It is hard to display all the 180 possible random shuffles of this set but it is easy to check that 108 of them will have the same number of distinct colors in each box.\nProbability = 108 / 180 = 0.6"}], "constraints": "Constraints:\n1 <= balls.length <= 8\n1 <= balls[i] <= 6\nsum(balls) is even.", "notes": ""}, "1463": {"label": "Hard", "title": "Cherry Pickup II", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7087, "total_accepted": 55100.0, "total_submissions": 77700.0, "testcase_example": "'[[3,1,1],[2,5,1],[1,5,5],[2,1,1]]'", "body": "You are given a rows x cols matrix grid representing a field of cherries where grid[i][j] represents the number of cherries that you can collect from the (i, j) cell.\nYou have two robots that can collect cherries for you:\nRobot #1 is located at the top-left corner (0, 0), and\nRobot #2 is located at the top-right corner (0, cols - 1).\nReturn the maximum number of cherries collection using both robots by following the rules below:\nFrom a cell (i, j), robots can move to cell (i + 1, j - 1), (i + 1, j), or (i + 1, j + 1).\nWhen any robot passes through a cell, It picks up all cherries, and the cell becomes an empty cell.\nWhen both robots stay in the same cell, only one takes the cherries.\nBoth robots cannot move outside of the grid at any moment.\nBoth robots should reach the bottom row in grid.", "examples": [{"full_text": "Example 1:\nInput: grid = [[3,1,1],[2,5,1],[1,5,5],[2,1,1]]\nOutput: 24\nExplanation: Path of robot #1 and #2 are described in color green and blue respectively.\nCherries taken by Robot #1, (3 + 2 + 5 + 2) = 12.\nCherries taken by Robot #2, (1 + 5 + 5 + 1) = 12.\nTotal of cherries: 12 + 12 = 24.", "input": "Input: grid = [[3,1,1],[2,5,1],[1,5,5],[2,1,1]]", "output": "Output: 24", "explanation": "Explanation: Path of robot #1 and #2 are described in color green and blue respectively.\nCherries taken by Robot #1, (3 + 2 + 5 + 2) = 12.\nCherries taken by Robot #2, (1 + 5 + 5 + 1) = 12.\nTotal of cherries: 12 + 12 = 24."}, {"full_text": "Example 2:\nInput: grid = [[1,0,0,0,0,0,1],[2,0,0,0,0,3,0],[2,0,9,0,0,0,0],[0,3,0,5,4,0,0],[1,0,2,3,0,0,6]]\nOutput: 28\nExplanation: Path of robot #1 and #2 are described in color green and blue respectively.\nCherries taken by Robot #1, (1 + 9 + 5 + 2) = 17.\nCherries taken by Robot #2, (1 + 3 + 4 + 3) = 11.\nTotal of cherries: 17 + 11 = 28.", "input": "Input: grid = [[1,0,0,0,0,0,1],[2,0,0,0,0,3,0],[2,0,9,0,0,0,0],[0,3,0,5,4,0,0],[1,0,2,3,0,0,6]]", "output": "Output: 28", "explanation": "Explanation: Path of robot #1 and #2 are described in color green and blue respectively.\nCherries taken by Robot #1, (1 + 9 + 5 + 2) = 17.\nCherries taken by Robot #2, (1 + 3 + 4 + 3) = 11.\nTotal of cherries: 17 + 11 = 28."}], "constraints": "Constraints:\nrows == grid.length\ncols == grid[i].length\n2 <= rows, cols <= 70\n0 <= grid[i][j] <= 100", "notes": ""}, "1458": {"label": "Hard", "title": "Max Dot Product of Two Subsequences", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.44939999999999997, "total_accepted": 15800.0, "total_submissions": 35200.0, "testcase_example": "'[2,1,-2,5]\\r\\n[3,0,-6]\\r'", "body": "Given two arrays nums1\nand nums2.\nReturn the maximum dot product\nbetween\nnon-empty subsequences of nums1 and nums2 with the same length.\nA subsequence of a array is a new array which is formed from the original array by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie,\n[2,3,5]\nis a subsequence of\n[1,2,3,4,5]\nwhile [1,5,3]\nis not).", "examples": [{"full_text": "Example 1:\nInput: nums1 = [2,1,-2,5], nums2 = [3,0,-6]\nOutput: 18\nExplanation: Take subsequence [2,-2] from nums1 and subsequence [3,-6] from nums2.\nTheir dot product is (2*3 + (-2)*(-6)) = 18.", "input": "Input: nums1 = [2,1,-2,5], nums2 = [3,0,-6]", "output": "Output: 18", "explanation": "Explanation: Take subsequence [2,-2] from nums1 and subsequence [3,-6] from nums2.\nTheir dot product is (2*3 + (-2)*(-6)) = 18."}, {"full_text": "Example 2:\nInput: nums1 = [3,-2], nums2 = [2,-6,7]\nOutput: 21\nExplanation: Take subsequence [3] from nums1 and subsequence [7] from nums2.\nTheir dot product is (3*7) = 21.", "input": "Input: nums1 = [3,-2], nums2 = [2,-6,7]", "output": "Output: 21", "explanation": "Explanation: Take subsequence [3] from nums1 and subsequence [7] from nums2.\nTheir dot product is (3*7) = 21."}, {"full_text": "Example 3:\nInput: nums1 = [-1,-1], nums2 = [1,1]\nOutput: -1\nExplanation: Take subsequence [-1] from nums1 and subsequence [1] from nums2.\nTheir dot product is -1.", "input": "Input: nums1 = [-1,-1], nums2 = [1,1]", "output": "Output: -1", "explanation": "Explanation: Take subsequence [-1] from nums1 and subsequence [1] from nums2.\nTheir dot product is -1."}], "constraints": "Constraints:\n1 <= nums1.length, nums2.length <= 500\n-1000 <= nums1[i], nums2[i] <= 1000", "notes": ""}, "1453": {"label": "Hard", "title": "Maximum Number of Darts Inside of a Circular Dartboard", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3629, "total_accepted": 4500.0, "total_submissions": 12300.0, "testcase_example": "'[[-2,0],[2,0],[0,2],[0,-2]]\\n2'", "body": "Alice is throwing n darts on a very large wall. You are given an array darts where darts[i] = [xi, yi] is the position of the i^th dart that Alice threw on the wall.\nBob knows the positions of the n darts on the wall. He wants to place a dartboard of radius r on the wall so that the maximum number of darts that Alice throws lies on the dartboard.\nGiven the integer r, return the maximum number of darts that can lie on the dartboard.", "examples": [{"full_text": "Example 1:\nInput: darts = [[-2,0],[2,0],[0,2],[0,-2]], r = 2\nOutput: 4\nExplanation: Circle dartboard with center in (0,0) and radius = 2 contain all points.", "input": "Input: darts = [[-2,0],[2,0],[0,2],[0,-2]], r = 2", "output": "Output: 4", "explanation": "Explanation: Circle dartboard with center in (0,0) and radius = 2 contain all points."}, {"full_text": "Example 2:\nInput: darts = [[-3,0],[3,0],[2,6],[5,4],[0,9],[7,8]], r = 5\nOutput: 5\nExplanation: Circle dartboard with center in (0,4) and radius = 5 contain all points except the point (7,8).", "input": "Input: darts = [[-3,0],[3,0],[2,6],[5,4],[0,9],[7,8]], r = 5", "output": "Output: 5", "explanation": "Explanation: Circle dartboard with center in (0,4) and radius = 5 contain all points except the point (7,8)."}], "constraints": "Constraints:\n1 <= darts.length <= 100\ndarts[i].length == 2\n-10^4 <= xi, yi <= 10^4\n1 <= r <= 5000", "notes": ""}, "1449": {"label": "Hard", "title": "Form Largest Integer With Digits That Add up to Target", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4618, "total_accepted": 11600.0, "total_submissions": 25100.0, "testcase_example": "'[4,3,2,5,6,7,2,5,5]\\n9'", "body": "Given an array of integers cost and an integer target, return the maximum integer you can paint under the following rules:\nThe cost of painting a digit (i + 1) is given by cost[i] (0-indexed).\nThe total cost used must be equal to target.\nThe integer does not have 0 digits.\nSince the answer may be very large, return it as a string. If there is no way to paint any integer given the condition, return \"0\".", "examples": [{"full_text": "Example 1:\nInput: cost = [4,3,2,5,6,7,2,5,5], target = 9\nOutput: \"7772\"\nExplanation: The cost to paint the digit '7' is 2, and the digit '2' is 3. Then cost(\"7772\") = 2*3+ 3*1 = 9. You could also paint \"977\", but \"7772\" is the largest number.\nDigit cost\n1 -> 4\n2 -> 3\n3 -> 2\n4 -> 5\n5 -> 6\n6 -> 7\n7 -> 2\n8 -> 5\n9 -> 5", "input": "Input: cost = [4,3,2,5,6,7,2,5,5], target = 9", "output": "Output: \"7772\"", "explanation": "Explanation: The cost to paint the digit '7' is 2, and the digit '2' is 3. Then cost(\"7772\") = 2*3+ 3*1 = 9. You could also paint \"977\", but \"7772\" is the largest number.\nDigit cost\n1 -> 4\n2 -> 3\n3 -> 2\n4 -> 5\n5 -> 6\n6 -> 7\n7 -> 2\n8 -> 5\n9 -> 5"}, {"full_text": "Example 2:\nInput: cost = [7,6,5,5,5,6,8,7,8], target = 12\nOutput: \"85\"\nExplanation: The cost to paint the digit '8' is 7, and the digit '5' is 5. Then cost(\"85\") = 7 + 5 = 12.", "input": "Input: cost = [7,6,5,5,5,6,8,7,8], target = 12", "output": "Output: \"85\"", "explanation": "Explanation: The cost to paint the digit '8' is 7, and the digit '5' is 5. Then cost(\"85\") = 7 + 5 = 12."}, {"full_text": "Example 3:\nInput: cost = [2,4,6,2,4,6,4,4,4], target = 5\nOutput: \"0\"\nExplanation: It is impossible to paint any integer with total cost equal to target.", "input": "Input: cost = [2,4,6,2,4,6,4,4,4], target = 5", "output": "Output: \"0\"", "explanation": "Explanation: It is impossible to paint any integer with total cost equal to target."}], "constraints": "Constraints:\ncost.length == 9\n1 <= cost[i], target <= 5000", "notes": ""}, "1444": {"label": "Hard", "title": "Number of Ways of Cutting a Pizza", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5536, "total_accepted": 11200.0, "total_submissions": 20200.0, "testcase_example": "'[\"A..\",\"AAA\",\"...\"]\\n3'", "body": "Given a rectangular pizza represented as a rows x cols\nmatrix containing the following characters: 'A' (an apple) and '.' (empty cell) and given the integer k. You have to cut the pizza into k pieces using k-1 cuts.\nFor each cut you choose the direction: vertical or horizontal, then you choose a cut position at the cell boundary and cut the pizza into two pieces. If you cut the pizza vertically, give the left part of the pizza to a person. If you cut the pizza horizontally, give the upper part of the pizza to a person. Give the last piece of pizza to the last person.\nReturn the number of ways of cutting the pizza such that each piece contains at least one apple.\nSince the answer can be a huge number, return this modulo 10^9 + 7.", "examples": [{"full_text": "Example 1:\nInput: pizza = [\"A..\",\"AAA\",\"...\"], k = 3\nOutput: 3\nExplanation: The figure above shows the three ways to cut the pizza. Note that pieces must contain at least one apple.", "input": "Input: pizza = [\"A..\",\"AAA\",\"...\"], k = 3", "output": "Output: 3", "explanation": "Explanation: The figure above shows the three ways to cut the pizza. Note that pieces must contain at least one apple."}, {"full_text": "Example 2:\nInput: pizza = [\"A..\",\"AA.\",\"...\"], k = 3\nOutput: 1", "input": "Input: pizza = [\"A..\",\"AA.\",\"...\"], k = 3", "output": "Output: 1", "explanation": ""}, {"full_text": "Example 3:\nInput: pizza = [\"A..\",\"A..\",\"...\"], k = 1\nOutput: 1", "input": "Input: pizza = [\"A..\",\"A..\",\"...\"], k = 1", "output": "Output: 1", "explanation": ""}], "constraints": "Constraints:\n1 <= rows, cols <= 50\nrows ==\npizza.length\ncols ==\npizza[i].length\n1 <= k <= 10\npizza consists of characters 'A'\nand '.' only.", "notes": ""}, "1439": {"label": "Hard", "title": "Find the Kth Smallest Sum of a Matrix With Sorted Rows", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6151, "total_accepted": 23400.0, "total_submissions": 38000.0, "testcase_example": "'[[1,3,11],[2,4,6]]\\n5'", "body": "You are given an m x n matrix mat that has its rows sorted in non-decreasing order and an integer k.\nYou are allowed to choose exactly one element from each row to form an array.\nReturn the k^th smallest array sum among all possible arrays.", "examples": [{"full_text": "Example 1:\nInput: mat = [[1,3,11],[2,4,6]], k = 5\nOutput: 7\nExplanation: Choosing one element from each row, the first k smallest sum are:\n[1,2], [1,4], [3,2], [3,4], [1,6]. Where the 5th sum is 7.", "input": "Input: mat = [[1,3,11],[2,4,6]], k = 5", "output": "Output: 7", "explanation": "Explanation: Choosing one element from each row, the first k smallest sum are:\n[1,2], [1,4], [3,2], [3,4], [1,6]. Where the 5th sum is 7."}, {"full_text": "Example 2:\nInput: mat = [[1,3,11],[2,4,6]], k = 9\nOutput: 17", "input": "Input: mat = [[1,3,11],[2,4,6]], k = 9", "output": "Output: 17", "explanation": ""}, {"full_text": "Example 3:\nInput: mat = [[1,10,10],[1,4,5],[2,3,6]], k = 7\nOutput: 9\nExplanation: Choosing one element from each row, the first k smallest sum are:\n[1,1,2], [1,1,3], [1,4,2], [1,4,3], [1,1,6], [1,5,2], [1,5,3]. Where the 7th sum is 9.", "input": "Input: mat = [[1,10,10],[1,4,5],[2,3,6]], k = 7", "output": "Output: 9", "explanation": "Explanation: Choosing one element from each row, the first k smallest sum are:\n[1,1,2], [1,1,3], [1,4,2], [1,4,3], [1,1,6], [1,5,2], [1,5,3]. Where the 7th sum is 9."}], "constraints": "Constraints:\nm == mat.length\nn == mat.length[i]\n1 <= m, n <= 40\n1 <= mat[i][j] <= 5000\n1 <= k <= min(200, n^m)\nmat[i] is a non-decreasing array.", "notes": ""}, "1434": {"label": "Hard", "title": "Number of Ways to Wear Different Hats to Each Other", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4155, "total_accepted": 8400.0, "total_submissions": 20200.0, "testcase_example": "'[[3,4],[4,5],[5]]'", "body": "There are n people and 40 types of hats labeled from 1 to 40.\nGiven a 2D integer array hats, where hats[i] is a list of all hats preferred by the i^th person.\nReturn the number of ways that the n people wear different hats to each other.\nSince the answer may be too large, return it modulo 10^9 + 7.", "examples": [{"full_text": "Example 1:\nInput: hats = [[3,4],[4,5],[5]]\nOutput: 1\nExplanation: There is only one way to choose hats given the conditions.\nFirst person choose hat 3, Second person choose hat 4 and last one hat 5.", "input": "Input: hats = [[3,4],[4,5],[5]]", "output": "Output: 1", "explanation": "Explanation: There is only one way to choose hats given the conditions.\nFirst person choose hat 3, Second person choose hat 4 and last one hat 5."}, {"full_text": "Example 2:\nInput: hats = [[3,5,1],[3,5]]\nOutput: 4\nExplanation: There are 4 ways to choose hats:\n(3,5), (5,3), (1,3) and (1,5)", "input": "Input: hats = [[3,5,1],[3,5]]", "output": "Output: 4", "explanation": "Explanation: There are 4 ways to choose hats:\n(3,5), (5,3), (1,3) and (1,5)"}, {"full_text": "Example 3:\nInput: hats = [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]\nOutput: 24\nExplanation: Each person can choose hats labeled from 1 to 4.\nNumber of Permutations of (1,2,3,4) = 24.", "input": "Input: hats = [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]", "output": "Output: 24", "explanation": "Explanation: Each person can choose hats labeled from 1 to 4.\nNumber of Permutations of (1,2,3,4) = 24."}], "constraints": "Constraints:\nn == hats.length\n1 <= n <= 10\n1 <= hats[i].length <= 40\n1 <= hats[i][j] <= 40\nhats[i] contains a list of unique integers.", "notes": ""}, "1425": {"label": "Hard", "title": "Constrained Subsequence Sum", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4635, "total_accepted": 17100.0, "total_submissions": 36800.0, "testcase_example": "'[10,2,-10,5,20]\\n2'", "body": "Given an integer array nums and an integer k, return the maximum sum of a non-empty subsequence of that array such that for every two consecutive integers in the subsequence, nums[i] and nums[j], where i < j, the condition j - i <= k is satisfied.\nA subsequence of an array is obtained by deleting some number of elements (can be zero) from the array, leaving the remaining elements in their original order.", "examples": [{"full_text": "Example 1:\nInput: nums = [10,2,-10,5,20], k = 2\nOutput: 37\nExplanation: The subsequence is [10, 2, 5, 20].", "input": "Input: nums = [10,2,-10,5,20], k = 2", "output": "Output: 37", "explanation": "Explanation: The subsequence is [10, 2, 5, 20]."}, {"full_text": "Example 2:\nInput: nums = [-1,-2,-3], k = 1\nOutput: -1\nExplanation: The subsequence must be non-empty, so we choose the largest number.", "input": "Input: nums = [-1,-2,-3], k = 1", "output": "Output: -1", "explanation": "Explanation: The subsequence must be non-empty, so we choose the largest number."}, {"full_text": "Example 3:\nInput: nums = [10,-2,-10,-5,20], k = 2\nOutput: 23\nExplanation: The subsequence is [10, -2, -5, 20].", "input": "Input: nums = [10,-2,-10,-5,20], k = 2", "output": "Output: 23", "explanation": "Explanation: The subsequence is [10, -2, -5, 20]."}], "constraints": "Constraints:\n1 <= k <= nums.length <= 10^5\n-10^4 <= nums[i] <= 10^4", "notes": ""}, "1420": {"label": "Hard", "title": "Build Array Where You Can Find The Maximum Exactly K Comparisons", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.647, "total_accepted": 9200.0, "total_submissions": 14200.0, "testcase_example": "'2\\n3\\n1'", "body": "You are given three integers n, m and k. Consider the following algorithm to find the maximum element of an array of positive integers:\nYou should build the array arr which has the following properties:\narr has exactly n integers.\n1 <= arr[i] <= m where (0 <= i < n).\nAfter applying the mentioned algorithm to arr, the value search_cost is equal to k.\nReturn the number of ways to build the array arr under the mentioned conditions. As the answer may grow large, the answer must be computed modulo 10^9 + 7.", "examples": [{"full_text": "Example 1:\nInput: n = 2, m = 3, k = 1\nOutput: 6\nExplanation: The possible arrays are [1, 1], [2, 1], [2, 2], [3, 1], [3, 2] [3, 3]", "input": "Input: n = 2, m = 3, k = 1", "output": "Output: 6", "explanation": "Explanation: The possible arrays are [1, 1], [2, 1], [2, 2], [3, 1], [3, 2] [3, 3]"}, {"full_text": "Example 2:\nInput: n = 5, m = 2, k = 3\nOutput: 0\nExplanation: There are no possible arrays that satisify the mentioned conditions.", "input": "Input: n = 5, m = 2, k = 3", "output": "Output: 0", "explanation": "Explanation: There are no possible arrays that satisify the mentioned conditions."}, {"full_text": "Example 3:\nInput: n = 9, m = 1, k = 1\nOutput: 1\nExplanation: The only possible array is [1, 1, 1, 1, 1, 1, 1, 1, 1]", "input": "Input: n = 9, m = 1, k = 1", "output": "Output: 1", "explanation": "Explanation: The only possible array is [1, 1, 1, 1, 1, 1, 1, 1, 1]"}], "constraints": "Constraints:\n1 <= n <= 50\n1 <= m <= 100\n0 <= k <= n", "notes": ""}, "1416": {"label": "Hard", "title": "Restore The Array", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.37799999999999995, "total_accepted": 11500.0, "total_submissions": 30500.0, "testcase_example": "'\"1000\"\\n10000'", "body": "A program was supposed to print an array of integers. The program forgot to print whitespaces and the array is printed as a string of digits s and all we know is that all integers in the array were in the range [1, k] and there are no leading zeros in the array.\nGiven the string s and the integer k, return the number of the possible arrays that can be printed as s using the mentioned program. Since the answer may be very large, return it modulo 10^9 + 7.", "examples": [{"full_text": "Example 1:\nInput: s = \"1000\", k = 10000\nOutput: 1\nExplanation: The only possible array is [1000]", "input": "Input: s = \"1000\", k = 10000", "output": "Output: 1", "explanation": "Explanation: The only possible array is [1000]"}, {"full_text": "Example 2:\nInput: s = \"1000\", k = 10\nOutput: 0\nExplanation: There cannot be an array that was printed this way and has all integer >= 1 and <= 10.", "input": "Input: s = \"1000\", k = 10", "output": "Output: 0", "explanation": "Explanation: There cannot be an array that was printed this way and has all integer >= 1 and <= 10."}, {"full_text": "Example 3:\nInput: s = \"1317\", k = 2000\nOutput: 8\nExplanation: Possible arrays are [1317],[131,7],[13,17],[1,317],[13,1,7],[1,31,7],[1,3,17],[1,3,1,7]", "input": "Input: s = \"1317\", k = 2000", "output": "Output: 8", "explanation": "Explanation: Possible arrays are [1317],[131,7],[13,17],[1,317],[13,1,7],[1,31,7],[1,3,17],[1,3,1,7]"}], "constraints": "Constraints:\n1 <= s.length <= 10^5\ns consists of only digits and does not contain leading zeros.\n1 <= k <= 10^9", "notes": ""}, "1411": {"label": "Hard", "title": "Number of Ways to Paint N \u00d7 3 Grid", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6179, "total_accepted": 23400.0, "total_submissions": 37900.0, "testcase_example": "'1'", "body": "You have a grid of size n x 3 and you want to paint each cell of the grid with exactly one of the three colors: Red, Yellow, or Green while making sure that no two adjacent cells have the same color (i.e., no two cells that share vertical or horizontal sides have the same color).\nGiven n the number of rows of the grid, return the number of ways you can paint this grid. As the answer may grow large, the answer must be computed modulo 10^9 + 7.", "examples": [{"full_text": "Example 1:\nInput: n = 1\nOutput: 12\nExplanation: There are 12 possible way to paint the grid as shown.", "input": "Input: n = 1", "output": "Output: 12", "explanation": "Explanation: There are 12 possible way to paint the grid as shown."}, {"full_text": "Example 2:\nInput: n = 5000\nOutput: 30228214", "input": "Input: n = 5000", "output": "Output: 30228214", "explanation": ""}], "constraints": "Constraints:\nn == grid.length\n1 <= n <= 5000", "notes": ""}, "1406": {"label": "Hard", "title": "Stone Game III", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6024, "total_accepted": 34100.0, "total_submissions": 56700.0, "testcase_example": "'[1,2,3,7]'", "body": "Alice and Bob continue their games with piles of stones. There are several stones arranged in a row, and each stone has an associated value which is an integer given in the array stoneValue.\nAlice and Bob take turns, with Alice starting first. On each player's turn, that player can take 1, 2, or 3 stones from the first remaining stones in the row.\nThe score of each player is the sum of the values of the stones taken. The score of each player is 0 initially.\nThe objective of the game is to end with the highest score, and the winner is the player with the highest score and there could be a tie. The game continues until all the stones have been taken.\nAssume Alice and Bob play optimally.\nReturn \"Alice\" if Alice will win, \"Bob\" if Bob will win, or \"Tie\" if they will end the game with the same score.", "examples": [{"full_text": "Example 1:\nInput: values = [1,2,3,7]\nOutput: \"Bob\"\nExplanation: Alice will always lose. Her best move will be to take three piles and the score become 6. Now the score of Bob is 7 and Bob wins.", "input": "Input: values = [1,2,3,7]", "output": "Output: \"Bob\"", "explanation": "Explanation: Alice will always lose. Her best move will be to take three piles and the score become 6. Now the score of Bob is 7 and Bob wins."}, {"full_text": "Example 2:\nInput: values = [1,2,3,-9]\nOutput: \"Alice\"\nExplanation: Alice must choose all the three piles at the first move to win and leave Bob with negative score.\nIf Alice chooses one pile her score will be 1 and the next move Bob's score becomes 5. In the next move, Alice will take the pile with value = -9 and lose.\nIf Alice chooses two piles her score will be 3 and the next move Bob's score becomes 3. In the next move, Alice will take the pile with value = -9 and also lose.\nRemember that both play optimally so here Alice will choose the scenario that makes her win.", "input": "Input: values = [1,2,3,-9]", "output": "Output: \"Alice\"", "explanation": "Explanation: Alice must choose all the three piles at the first move to win and leave Bob with negative score.\nIf Alice chooses one pile her score will be 1 and the next move Bob's score becomes 5. In the next move, Alice will take the pile with value = -9 and lose.\nIf Alice chooses two piles her score will be 3 and the next move Bob's score becomes 3. In the next move, Alice will take the pile with value = -9 and also lose.\nRemember that both play optimally so here Alice will choose the scenario that makes her win."}, {"full_text": "Example 3:\nInput: values = [1,2,3,6]\nOutput: \"Tie\"\nExplanation: Alice cannot win this game. She can end the game in a draw if she decided to choose all the first three piles, otherwise she will lose.", "input": "Input: values = [1,2,3,6]", "output": "Output: \"Tie\"", "explanation": "Explanation: Alice cannot win this game. She can end the game in a draw if she decided to choose all the first three piles, otherwise she will lose."}], "constraints": "Constraints:\n1 <= stoneValue.length <= 5 * 10^4\n-1000 <= stoneValue[i] <= 1000", "notes": ""}, "1402": {"label": "Hard", "title": "Reducing Dishes", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7253000000000001, "total_accepted": 33700.0, "total_submissions": 46500.0, "testcase_example": "'[-1,-8,0,5,-7]'", "body": "A chef has collected data on the satisfaction level of his n dishes. Chef can cook any dish in 1 unit of time.\nLike-time coefficient of a dish is defined as the time taken to cook that dish including previous dishes multiplied by its satisfaction level i.e. time[i] * satisfaction[i].\nReturn the maximum sum of like-time coefficient that the chef can obtain after dishes preparation.\nDishes can be prepared in any order and the chef can discard some dishes to get this maximum value.", "examples": [{"full_text": "Example 1:\nInput: satisfaction = [-1,-8,0,5,-9]\nOutput: 14\nExplanation: After Removing the second and last dish, the maximum total like-time coefficient will be equal to (-1*1 + 0*2 + 5*3 = 14).\nEach dish is prepared in one unit of time.", "input": "Input: satisfaction = [-1,-8,0,5,-9]", "output": "Output: 14", "explanation": "Explanation: After Removing the second and last dish, the maximum total like-time coefficient will be equal to (-1*1 + 0*2 + 5*3 = 14).\nEach dish is prepared in one unit of time."}, {"full_text": "Example 2:\nInput: satisfaction = [4,3,2]\nOutput: 20\nExplanation: Dishes can be prepared in any order, (2*1 + 3*2 + 4*3 = 20)", "input": "Input: satisfaction = [4,3,2]", "output": "Output: 20", "explanation": "Explanation: Dishes can be prepared in any order, (2*1 + 3*2 + 4*3 = 20)"}, {"full_text": "Example 3:\nInput: satisfaction = [-1,-4,-5]\nOutput: 0\nExplanation: People do not like the dishes. No dish is prepared.", "input": "Input: satisfaction = [-1,-4,-5]", "output": "Output: 0", "explanation": "Explanation: People do not like the dishes. No dish is prepared."}], "constraints": "Constraints:\nn == satisfaction.length\n1 <= n <= 500\n-1000 <= satisfaction[i] <= 1000", "notes": ""}, "1397": {"label": "Hard", "title": "Find All Good Strings", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4028, "total_accepted": 3700.0, "total_submissions": 9200.0, "testcase_example": "'2\\n\"aa\"\\n\"da\"\\n\"b\"'", "body": "Given the strings s1 and s2 of size n and the string evil, return the number of good strings.\nA good string has size n, it is alphabetically greater than or equal to s1, it is alphabetically smaller than or equal to s2, and it does not contain the string evil as a substring. Since the answer can be a huge number, return this modulo 10^9 + 7.", "examples": [{"full_text": "Example 1:\nInput: n = 2, s1 = \"aa\", s2 = \"da\", evil = \"b\"\nOutput: 51\nExplanation: There are 25 good strings starting with 'a': \"aa\",\"ac\",\"ad\",...,\"az\". Then there are 25 good strings starting with 'c': \"ca\",\"cc\",\"cd\",...,\"cz\" and finally there is one good string starting with 'd': \"da\".", "input": "Input: n = 2, s1 = \"aa\", s2 = \"da\", evil = \"b\"", "output": "Output: 51", "explanation": "Explanation: There are 25 good strings starting with 'a': \"aa\",\"ac\",\"ad\",...,\"az\". Then there are 25 good strings starting with 'c': \"ca\",\"cc\",\"cd\",...,\"cz\" and finally there is one good string starting with 'd': \"da\"."}, {"full_text": "Example 2:\nInput: n = 8, s1 = \"leetcode\", s2 = \"leetgoes\", evil = \"leet\"\nOutput: 0\nExplanation: All strings greater than or equal to s1 and smaller than or equal to s2 start with the prefix \"leet\", therefore, there is not any good string.", "input": "Input: n = 8, s1 = \"leetcode\", s2 = \"leetgoes\", evil = \"leet\"", "output": "Output: 0", "explanation": "Explanation: All strings greater than or equal to s1 and smaller than or equal to s2 start with the prefix \"leet\", therefore, there is not any good string."}, {"full_text": "Example 3:\nInput: n = 2, s1 = \"gx\", s2 = \"gz\", evil = \"x\"\nOutput: 2", "input": "Input: n = 2, s1 = \"gx\", s2 = \"gz\", evil = \"x\"", "output": "Output: 2", "explanation": ""}], "constraints": "Constraints:\ns1.length == n\ns2.length == n\ns1 <= s2\n1 <= n <= 500\n1 <= evil.length <= 50\nAll strings consist of lowercase English letters.", "notes": ""}, "1392": {"label": "Hard", "title": "Longest Happy Prefix", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.44229999999999997, "total_accepted": 18800.0, "total_submissions": 42400.0, "testcase_example": "'\"level\"'", "body": "A string is called a happy prefix if is a non-empty prefix which is also a suffix (excluding itself).\nGiven a string s, return the longest happy prefix of s. Return an empty string \"\" if no such prefix exists.", "examples": [{"full_text": "Example 1:\nInput: s = \"level\"\nOutput: \"l\"\nExplanation: s contains 4 prefix excluding itself (\"l\", \"le\", \"lev\", \"leve\"), and suffix (\"l\", \"el\", \"vel\", \"evel\"). The largest prefix which is also suffix is given by \"l\".", "input": "Input: s = \"level\"", "output": "Output: \"l\"", "explanation": "Explanation: s contains 4 prefix excluding itself (\"l\", \"le\", \"lev\", \"leve\"), and suffix (\"l\", \"el\", \"vel\", \"evel\"). The largest prefix which is also suffix is given by \"l\"."}, {"full_text": "Example 2:\nInput: s = \"ababab\"\nOutput: \"abab\"\nExplanation: \"abab\" is the largest prefix which is also suffix. They can overlap in the original string.", "input": "Input: s = \"ababab\"", "output": "Output: \"abab\"", "explanation": "Explanation: \"abab\" is the largest prefix which is also suffix. They can overlap in the original string."}], "constraints": "Constraints:\n1 <= s.length <= 10^5\ns contains only lowercase English letters.", "notes": ""}, "1388": {"label": "Hard", "title": "Pizza With 3n Slices", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4833, "total_accepted": 7600.0, "total_submissions": 15700.0, "testcase_example": "'[1,2,3,4,5,6]'", "body": "There is a pizza with 3n slices of varying size, you and your friends will take slices of pizza as follows:\nYou will pick any pizza slice.\nYour friend Alice will pick the next slice in the anti-clockwise direction of your pick.\nYour friend Bob will pick the next slice in the clockwise direction of your pick.\nRepeat until there are no more slices of pizzas.\nGiven an integer array slices that represent the sizes of the pizza slices in a clockwise direction, return the maximum possible sum of slice sizes that you can pick.", "examples": [{"full_text": "Example 1:\nInput: slices = [1,2,3,4,5,6]\nOutput: 10\nExplanation: Pick pizza slice of size 4, Alice and Bob will pick slices with size 3 and 5 respectively. Then Pick slices with size 6, finally Alice and Bob will pick slice of size 2 and 1 respectively. Total = 4 + 6.", "input": "Input: slices = [1,2,3,4,5,6]", "output": "Output: 10", "explanation": "Explanation: Pick pizza slice of size 4, Alice and Bob will pick slices with size 3 and 5 respectively. Then Pick slices with size 6, finally Alice and Bob will pick slice of size 2 and 1 respectively. Total = 4 + 6."}, {"full_text": "Example 2:\nInput: slices = [8,9,8,6,1,1]\nOutput: 16\nExplanation: Pick pizza slice of size 8 in each turn. If you pick slice with size 9 your partners will pick slices of size 8.", "input": "Input: slices = [8,9,8,6,1,1]", "output": "Output: 16", "explanation": "Explanation: Pick pizza slice of size 8 in each turn. If you pick slice with size 9 your partners will pick slices of size 8."}], "constraints": "Constraints:\n3 * n == slices.length\n1 <= slices.length <= 500\n1 <= slices[i] <= 1000", "notes": ""}, "1383": {"label": "Hard", "title": "Maximum Performance of a Team", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.41409999999999997, "total_accepted": 37700.0, "total_submissions": 90900.0, "testcase_example": "'6\\n[2,10,3,1,5,8]\\n[5,4,3,9,7,2]\\n2'", "body": "You are given two integers n and k and two integer arrays speed and efficiency both of length n. There are n engineers numbered from 1 to n. speed[i] and efficiency[i] represent the speed and efficiency of the i^th engineer respectively.\nChoose at most k different engineers out of the n engineers to form a team with the maximum performance.\nThe performance of a team is the sum of their engineers' speeds multiplied by the minimum efficiency among their engineers.\nReturn the maximum performance of this team. Since the answer can be a huge number, return it modulo 10^9 + 7.", "examples": [{"full_text": "Example 1:\nInput: n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 2\nOutput: 60\nExplanation:\nWe have the maximum performance of the team by selecting engineer 2 (with speed=10 and efficiency=4) and engineer 5 (with speed=5 and efficiency=7). That is, performance = (10 + 5) * min(4, 7) = 60.", "input": "Input: n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 2", "output": "Output: 60", "explanation": "Explanation:\nWe have the maximum performance of the team by selecting engineer 2 (with speed=10 and efficiency=4) and engineer 5 (with speed=5 and efficiency=7). That is, performance = (10 + 5) * min(4, 7) = 60."}, {"full_text": "Example 2:\nInput: n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 3\nOutput: 68\nExplanation:\nThis is the same example as the first but k = 3. We can select engineer 1, engineer 2 and engineer 5 to get the maximum performance of the team. That is, performance = (2 + 10 + 5) * min(5, 4, 7) = 68.", "input": "Input: n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 3", "output": "Output: 68", "explanation": "Explanation:\nThis is the same example as the first but k = 3. We can select engineer 1, engineer 2 and engineer 5 to get the maximum performance of the team. That is, performance = (2 + 10 + 5) * min(5, 4, 7) = 68."}, {"full_text": "Example 3:\nInput: n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 4\nOutput: 72", "input": "Input: n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 4", "output": "Output: 72", "explanation": ""}], "constraints": "Constraints:\n1 <= k <= n <= 10^5\nspeed.length == n\nefficiency.length == n\n1 <= speed[i] <= 10^5\n1 <= efficiency[i] <= 10^8", "notes": ""}, "1377": {"label": "Hard", "title": "Frog Position After T Seconds", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.36200000000000004, "total_accepted": 18400.0, "total_submissions": 50800.0, "testcase_example": "'7\\n[[1,2],[1,3],[1,7],[2,4],[2,6],[3,5]]\\n2\\n4'", "body": "Given an undirected tree consisting of n vertices numbered from 1 to n. A frog starts jumping from vertex 1. In one second, the frog jumps from its current vertex to another unvisited vertex if they are directly connected. The frog can not jump back to a visited vertex. In case the frog can jump to several vertices, it jumps randomly to one of them with the same probability. Otherwise, when the frog can not jump to any unvisited vertex, it jumps forever on the same vertex.\nThe edges of the undirected tree are given in the array edges, where edges[i] = [ai, bi] means that exists an edge connecting the vertices ai and bi.\nReturn the probability that after t seconds the frog is on the vertex target. Answers within 10^-5 of the actual answer will be accepted.", "examples": [{"full_text": "Example 1:\nInput: n = 7, edges = [[1,2],[1,3],[1,7],[2,4],[2,6],[3,5]], t = 2, target = 4\nOutput: 0.16666666666666666\nExplanation: The figure above shows the given graph. The frog starts at vertex 1, jumping with 1/3 probability to the vertex 2 after second 1 and then jumping with 1/2 probability to vertex 4 after second 2. Thus the probability for the frog is on the vertex 4 after 2 seconds is 1/3 * 1/2 = 1/6 = 0.16666666666666666.", "input": "Input: n = 7, edges = [[1,2],[1,3],[1,7],[2,4],[2,6],[3,5]], t = 2, target = 4", "output": "Output: 0.16666666666666666", "explanation": "Explanation: The figure above shows the given graph. The frog starts at vertex 1, jumping with 1/3 probability to the vertex 2 after second 1 and then jumping with 1/2 probability to vertex 4 after second 2. Thus the probability for the frog is on the vertex 4 after 2 seconds is 1/3 * 1/2 = 1/6 = 0.16666666666666666."}, {"full_text": "Example 2:\nInput: n = 7, edges = [[1,2],[1,3],[1,7],[2,4],[2,6],[3,5]], t = 1, target = 7\nOutput: 0.3333333333333333\nExplanation: The figure above shows the given graph. The frog starts at vertex 1, jumping with 1/3 = 0.3333333333333333 probability to the vertex 7 after second 1.", "input": "Input: n = 7, edges = [[1,2],[1,3],[1,7],[2,4],[2,6],[3,5]], t = 1, target = 7", "output": "Output: 0.3333333333333333", "explanation": "Explanation: The figure above shows the given graph. The frog starts at vertex 1, jumping with 1/3 = 0.3333333333333333 probability to the vertex 7 after second 1."}], "constraints": "Constraints:\n1 <= n <= 100\nedges.length == n - 1\nedges[i].length == 2\n1 <= ai, bi <= n\n1 <= t <= 50\n1 <= target <= n", "notes": ""}, "1373": {"label": "Hard", "title": "Maximum Sum BST in Binary Tree", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.386, "total_accepted": 28700.0, "total_submissions": 74300.0, "testcase_example": "'[1,4,3,2,4,2,5,null,null,null,null,null,null,4,6]'", "body": "Given a binary tree root, return the maximum sum of all keys of any sub-tree which is also a Binary Search Tree (BST).\nAssume a BST is defined as follows:\nThe left subtree of a node contains only nodes with keys less than the node's key.\nThe right subtree of a node contains only nodes with keys greater than the node's key.\nBoth the left and right subtrees must also be binary search trees.", "examples": [{"full_text": "Example 1:\nInput: root = [1,4,3,2,4,2,5,null,null,null,null,null,null,4,6]\nOutput: 20\nExplanation: Maximum sum in a valid Binary search tree is obtained in root node with key equal to 3.", "input": "Input: root = [1,4,3,2,4,2,5,null,null,null,null,null,null,4,6]", "output": "Output: 20", "explanation": "Explanation: Maximum sum in a valid Binary search tree is obtained in root node with key equal to 3."}, {"full_text": "Example 2:\nInput: root = [4,3,null,1,2]\nOutput: 2\nExplanation: Maximum sum in a valid Binary search tree is obtained in a single root node with key equal to 2.", "input": "Input: root = [4,3,null,1,2]", "output": "Output: 2", "explanation": "Explanation: Maximum sum in a valid Binary search tree is obtained in a single root node with key equal to 2."}, {"full_text": "Example 3:\nInput: root = [-4,-2,-5]\nOutput: 0\nExplanation: All values are negatives. Return an empty BST.", "input": "Input: root = [-4,-2,-5]", "output": "Output: 0", "explanation": "Explanation: All values are negatives. Return an empty BST."}], "constraints": "Constraints:\nThe number of nodes in the tree is in the range [1, 4 * 10^4].\n-4 * 10^4 <= Node.val <= 4 * 10^4", "notes": ""}, "1368": {"label": "Hard", "title": "Minimum Cost to Make at Least One Valid Path in a Grid", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6032, "total_accepted": 28300.0, "total_submissions": 47000.0, "testcase_example": "'[[1,1,1,1],[2,2,2,2],[1,1,1,1],[2,2,2,2]]'", "body": "Given an m x n grid. Each cell of the grid has a sign pointing to the next cell you should visit if you are currently in this cell. The sign of grid[i][j] can be:\n1 which means go to the cell to the right. (i.e go from grid[i][j] to grid[i][j + 1])\n2 which means go to the cell to the left. (i.e go from grid[i][j] to grid[i][j - 1])\n3 which means go to the lower cell. (i.e go from grid[i][j] to grid[i + 1][j])\n4 which means go to the upper cell. (i.e go from grid[i][j] to grid[i - 1][j])\nNotice that there could be some signs on the cells of the grid that point outside the grid.\nYou will initially start at the upper left cell (0, 0). A valid path in the grid is a path that starts from the upper left cell (0, 0) and ends at the bottom-right cell (m - 1, n - 1) following the signs on the grid. The valid path does not have to be the shortest.\nYou can modify the sign on a cell with cost = 1. You can modify the sign on a cell one time only.\nReturn the minimum cost to make the grid have at least one valid path.", "examples": [{"full_text": "Example 1:\nInput: grid = [[1,1,1,1],[2,2,2,2],[1,1,1,1],[2,2,2,2]]\nOutput: 3\nExplanation: You will start at point (0, 0).\nThe path to (3, 3) is as follows. (0, 0) --> (0, 1) --> (0, 2) --> (0, 3) change the arrow to down with cost = 1 --> (1, 3) --> (1, 2) --> (1, 1) --> (1, 0) change the arrow to down with cost = 1 --> (2, 0) --> (2, 1) --> (2, 2) --> (2, 3) change the arrow to down with cost = 1 --> (3, 3)\nThe total cost = 3.", "input": "Input: grid = [[1,1,1,1],[2,2,2,2],[1,1,1,1],[2,2,2,2]]", "output": "Output: 3", "explanation": "Explanation: You will start at point (0, 0).\nThe path to (3, 3) is as follows. (0, 0) --> (0, 1) --> (0, 2) --> (0, 3) change the arrow to down with cost = 1 --> (1, 3) --> (1, 2) --> (1, 1) --> (1, 0) change the arrow to down with cost = 1 --> (2, 0) --> (2, 1) --> (2, 2) --> (2, 3) change the arrow to down with cost = 1 --> (3, 3)\nThe total cost = 3."}, {"full_text": "Example 2:\nInput: grid = [[1,1,3],[3,2,2],[1,1,4]]\nOutput: 0\nExplanation: You can follow the path from (0, 0) to (2, 2).", "input": "Input: grid = [[1,1,3],[3,2,2],[1,1,4]]", "output": "Output: 0", "explanation": "Explanation: You can follow the path from (0, 0) to (2, 2)."}, {"full_text": "Example 3:\nInput: grid = [[1,2],[4,3]]\nOutput: 1", "input": "Input: grid = [[1,2],[4,3]]", "output": "Output: 1", "explanation": ""}], "constraints": "Constraints:\nm == grid.length\nn == grid[i].length\n1 <= m, n <= 100\n1 <= grid[i][j] <= 4", "notes": ""}, "1363": {"label": "Hard", "title": "Largest Multiple of Three", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.344, "total_accepted": 13100.0, "total_submissions": 38100.0, "testcase_example": "'[8,1,9]'", "body": "Given an array of digits digits, return the largest multiple of three that can be formed by concatenating some of the given digits in any order. If there is no answer return an empty string.\nSince the answer may not fit in an integer data type, return the answer as a string. Note that the returning answer must not contain unnecessary leading zeros.", "examples": [{"full_text": "Example 1:\nInput: digits = [8,1,9]\nOutput: \"981\"", "input": "Input: digits = [8,1,9]", "output": "Output: \"981\"", "explanation": ""}, {"full_text": "Example 2:\nInput: digits = [8,6,7,1,0]\nOutput: \"8760\"", "input": "Input: digits = [8,6,7,1,0]", "output": "Output: \"8760\"", "explanation": ""}, {"full_text": "Example 3:\nInput: digits = [1]\nOutput: \"\"", "input": "Input: digits = [1]", "output": "Output: \"\"", "explanation": ""}], "constraints": "Constraints:\n1 <= digits.length <= 10^4\n0 <= digits[i] <= 9", "notes": ""}, "1359": {"label": "Hard", "title": "Count All Valid Pickup and Delivery Options", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.546, "total_accepted": 22000.0, "total_submissions": 40400.0, "testcase_example": "'1'", "body": "Given n orders, each order consist in pickup and delivery services.\nCount all valid pickup/delivery possible sequences such that delivery(i) is always after of\npickup(i).\nSince the answer\nmay be too large,\nreturn it modulo\n10^9 + 7.", "examples": [{"full_text": "Example 1:\nInput: n = 1\nOutput: 1\nExplanation: Unique order (P1, D1), Delivery 1 always is after of Pickup 1.", "input": "Input: n = 1", "output": "Output: 1", "explanation": "Explanation: Unique order (P1, D1), Delivery 1 always is after of Pickup 1."}, {"full_text": "Example 2:\nInput: n = 2\nOutput: 6\nExplanation: All possible orders:\n(P1,P2,D1,D2), (P1,P2,D2,D1), (P1,D1,P2,D2), (P2,P1,D1,D2), (P2,P1,D2,D1) and (P2,D2,P1,D1).\nThis is an invalid order (P1,D2,P2,D1) because Pickup 2 is after of Delivery 2.", "input": "Input: n = 2", "output": "Output: 6", "explanation": "Explanation: All possible orders:\n(P1,P2,D1,D2), (P1,P2,D2,D1), (P1,D1,P2,D2), (P2,P1,D1,D2), (P2,P1,D2,D1) and (P2,D2,P1,D1).\nThis is an invalid order (P1,D2,P2,D1) because Pickup 2 is after of Delivery 2."}, {"full_text": "Example 3:\nInput: n = 3\nOutput: 90", "input": "Input: n = 3", "output": "Output: 90", "explanation": ""}], "constraints": "Constraints:\n1 <= n <= 500", "notes": ""}, "1354": {"label": "Hard", "title": "Construct Target Array With Multiple Sums", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3118, "total_accepted": 24900.0, "total_submissions": 79900.0, "testcase_example": "'[9,3,5]'", "body": "You are given an array target of n integers. From a starting array arr consisting of n 1's, you may perform the following procedure :\nlet x be the sum of all elements currently in your array.\nchoose index i, such that 0 <= i < n and set the value of arr at index i to x.\nYou may repeat this procedure as many times as needed.\nReturn true if it is possible to construct the target array from arr, otherwise, return false.", "examples": [{"full_text": "Example 1:\nInput: target = [9,3,5]\nOutput: true\nExplanation: Start with arr = [1, 1, 1]\n[1, 1, 1], sum = 3 choose index 1\n[1, 3, 1], sum = 5 choose index 2\n[1, 3, 5], sum = 9 choose index 0\n[9, 3, 5] Done", "input": "Input: target = [9,3,5]", "output": "Output: true", "explanation": "Explanation: Start with arr = [1, 1, 1]\n[1, 1, 1], sum = 3 choose index 1\n[1, 3, 1], sum = 5 choose index 2\n[1, 3, 5], sum = 9 choose index 0\n[9, 3, 5] Done"}, {"full_text": "Example 2:\nInput: target = [1,1,1,2]\nOutput: false\nExplanation: Impossible to create target array from [1,1,1,1].", "input": "Input: target = [1,1,1,2]", "output": "Output: false", "explanation": "Explanation: Impossible to create target array from [1,1,1,1]."}, {"full_text": "Example 3:\nInput: target = [8,5]\nOutput: true", "input": "Input: target = [8,5]", "output": "Output: true", "explanation": ""}], "constraints": "Constraints:\nn == target.length\n1 <= n <= 5 * 10^4\n1 <= target[i] <= 10^9", "notes": ""}, "1349": {"label": "Hard", "title": "Maximum Students Taking Exam", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4647, "total_accepted": 9500.0, "total_submissions": 20500.0, "testcase_example": "'[[\"#\",\".\",\"#\",\"#\",\".\",\"#\"],[\".\",\"#\",\"#\",\"#\",\"#\",\".\"],[\"#\",\".\",\"#\",\"#\",\".\",\"#\"]]'", "body": "Given a m\n* n\nmatrix seats\nthat represent seats distributions\nin a classroom.\nIf a seat\nis\nbroken, it is denoted by '#' character otherwise it is denoted by a '.' character.\nStudents can see the answers of those sitting next to the left, right, upper left and upper right, but he cannot see the answers of the student sitting\ndirectly in front or behind him. Return the maximum number of students that can take the exam together\nwithout any cheating being possible..\nStudents must be placed in seats in good condition.", "examples": [{"full_text": "Example 1:\nInput: seats = [[\"#\",\".\",\"#\",\"#\",\".\",\"#\"],\n[\".\",\"#\",\"#\",\"#\",\"#\",\".\"],\n[\"#\",\".\",\"#\",\"#\",\".\",\"#\"]]\nOutput: 4\nExplanation: Teacher can place 4 students in available seats so they don't cheat on the exam.", "input": "Input: seats = [[\"#\",\".\",\"#\",\"#\",\".\",\"#\"],\n[\".\",\"#\",\"#\",\"#\",\"#\",\".\"],\n[\"#\",\".\",\"#\",\"#\",\".\",\"#\"]]", "output": "Output: 4", "explanation": "Explanation: Teacher can place 4 students in available seats so they don't cheat on the exam."}, {"full_text": "Example 2:\nInput: seats = [[\".\",\"#\"],\n[\"#\",\"#\"],\n[\"#\",\".\"],\n[\"#\",\"#\"],\n[\".\",\"#\"]]\nOutput: 3\nExplanation: Place all students in available seats.", "input": "Input: seats = [[\".\",\"#\"],\n[\"#\",\"#\"],\n[\"#\",\".\"],\n[\"#\",\"#\"],\n[\".\",\"#\"]]", "output": "Output: 3", "explanation": "Explanation: Place all students in available seats."}, {"full_text": "Example 3:\nInput: seats = [[\"#\",\".\",\".\",\".\",\"#\"],\n[\".\",\"#\",\".\",\"#\",\".\"],\n[\".\",\".\",\"#\",\".\",\".\"],\n[\".\",\"#\",\".\",\"#\",\".\"],\n[\"#\",\".\",\".\",\".\",\"#\"]]\nOutput: 10\nExplanation: Place students in available seats in column 1, 3 and 5.", "input": "Input: seats = [[\"#\",\".\",\".\",\".\",\"#\"],\n[\".\",\"#\",\".\",\"#\",\".\"],\n[\".\",\".\",\"#\",\".\",\".\"],\n[\".\",\"#\",\".\",\"#\",\".\"],\n[\"#\",\".\",\".\",\".\",\"#\"]]", "output": "Output: 10", "explanation": "Explanation: Place students in available seats in column 1, 3 and 5."}], "constraints": "Constraints:\nseats\ncontains only characters\n'.'\nand'#'.\nm ==\nseats.length\nn ==\nseats[i].length\n1 <= m <= 8\n1 <= n <= 8", "notes": ""}, "1345": {"label": "Hard", "title": "Jump Game IV", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.44380000000000003, "total_accepted": 67500.0, "total_submissions": 152200.0, "testcase_example": "'[100,-23,-23,404,100,23,23,23,3,404]'", "body": "Given an array of\nintegers arr, you are initially positioned at the first index of the array.\nIn one step you can jump from index i to index:\ni + 1 where:\ni + 1 < arr.length.\ni - 1 where:\ni - 1 >= 0.\nj where: arr[i] == arr[j] and i != j.\nReturn the minimum number of steps to reach the last index of the array.\nNotice that you can not jump outside of the array at any time.", "examples": [{"full_text": "Example 1:\nInput: arr = [100,-23,-23,404,100,23,23,23,3,404]\nOutput: 3\nExplanation: You need three jumps from index 0 --> 4 --> 3 --> 9. Note that index 9 is the last index of the array.", "input": "Input: arr = [100,-23,-23,404,100,23,23,23,3,404]", "output": "Output: 3", "explanation": "Explanation: You need three jumps from index 0 --> 4 --> 3 --> 9. Note that index 9 is the last index of the array."}, {"full_text": "Example 2:\nInput: arr = [7]\nOutput: 0\nExplanation: Start index is the last index. You do not need to jump.", "input": "Input: arr = [7]", "output": "Output: 0", "explanation": "Explanation: Start index is the last index. You do not need to jump."}, {"full_text": "Example 3:\nInput: arr = [7,6,9,6,9,6,9,7]\nOutput: 1\nExplanation: You can jump directly from index 0 to index 7 which is last index of the array.", "input": "Input: arr = [7,6,9,6,9,6,9,7]", "output": "Output: 1", "explanation": "Explanation: You can jump directly from index 0 to index 7 which is last index of the array."}], "constraints": "Constraints:\n1 <= arr.length <= 5 * 10^4\n-10^8 <= arr[i] <= 10^8", "notes": ""}, "1340": {"label": "Hard", "title": "Jump Game V", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.619, "total_accepted": 17500.0, "total_submissions": 28300.0, "testcase_example": "'[6,4,14,6,8,13,9,7,10,6,12]\\n2'", "body": "Given an array of\nintegers arr and an integer d. In one step you can jump from index i to index:\ni + x where:\ni + x < arr.length and 0 <\nx <= d.\ni - x where:\ni - x >= 0 and 0 <\nx <= d.\nIn addition, you can only jump from index i to index j\nif arr[i] > arr[j] and arr[i] > arr[k] for all indices k between i and j (More formally min(i,\nj) < k < max(i, j)).\nYou can choose any index of the array and start jumping. Return the maximum number of indices\nyou can visit.\nNotice that you can not jump outside of the array at any time.", "examples": [{"full_text": "Example 1:\nInput: arr = [6,4,14,6,8,13,9,7,10,6,12], d = 2\nOutput: 4\nExplanation: You can start at index 10. You can jump 10 --> 8 --> 6 --> 7 as shown.\nNote that if you start at index 6 you can only jump to index 7. You cannot jump to index 5 because 13 > 9. You cannot jump to index 4 because index 5 is between index 4 and 6 and 13 > 9.\nSimilarly You cannot jump from index 3 to index 2 or index 1.", "input": "Input: arr = [6,4,14,6,8,13,9,7,10,6,12], d = 2", "output": "Output: 4", "explanation": "Explanation: You can start at index 10. You can jump 10 --> 8 --> 6 --> 7 as shown.\nNote that if you start at index 6 you can only jump to index 7. You cannot jump to index 5 because 13 > 9. You cannot jump to index 4 because index 5 is between index 4 and 6 and 13 > 9.\nSimilarly You cannot jump from index 3 to index 2 or index 1."}, {"full_text": "Example 2:\nInput: arr = [3,3,3,3,3], d = 3\nOutput: 1\nExplanation: You can start at any index. You always cannot jump to any index.", "input": "Input: arr = [3,3,3,3,3], d = 3", "output": "Output: 1", "explanation": "Explanation: You can start at any index. You always cannot jump to any index."}, {"full_text": "Example 3:\nInput: arr = [7,6,5,4,3,2,1], d = 1\nOutput: 7\nExplanation: Start at index 0. You can visit all the indicies.", "input": "Input: arr = [7,6,5,4,3,2,1], d = 1", "output": "Output: 7", "explanation": "Explanation: Start at index 0. You can visit all the indicies."}], "constraints": "Constraints:\n1 <= arr.length <= 1000\n1 <= arr[i] <= 10^5\n1 <= d <= arr.length", "notes": ""}, "1335": {"label": "Hard", "title": "Minimum Difficulty of a Job Schedule", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5682, "total_accepted": 63000.0, "total_submissions": 110900.0, "testcase_example": "'[6,5,4,3,2,1]\\n2'", "body": "You want to schedule a list of jobs in d days. Jobs are dependent (i.e To work on the i^th job, you have to finish all the jobs j where 0 <= j < i).\nYou have to finish at least one task every day. The difficulty of a job schedule is the sum of difficulties of each day of the d days. The difficulty of a day is the maximum difficulty of a job done on that day.\nYou are given an integer array jobDifficulty and an integer d. The difficulty of the i^th job is jobDifficulty[i].\nReturn the minimum difficulty of a job schedule. If you cannot find a schedule for the jobs return -1.", "examples": [{"full_text": "Example 1:\nInput: jobDifficulty = [6,5,4,3,2,1], d = 2\nOutput: 7\nExplanation: First day you can finish the first 5 jobs, total difficulty = 6.\nSecond day you can finish the last job, total difficulty = 1.\nThe difficulty of the schedule = 6 + 1 = 7", "input": "Input: jobDifficulty = [6,5,4,3,2,1], d = 2", "output": "Output: 7", "explanation": "Explanation: First day you can finish the first 5 jobs, total difficulty = 6.\nSecond day you can finish the last job, total difficulty = 1.\nThe difficulty of the schedule = 6 + 1 = 7"}, {"full_text": "Example 2:\nInput: jobDifficulty = [9,9,9], d = 4\nOutput: -1\nExplanation: If you finish a job per day you will still have a free day. you cannot find a schedule for the given jobs.", "input": "Input: jobDifficulty = [9,9,9], d = 4", "output": "Output: -1", "explanation": "Explanation: If you finish a job per day you will still have a free day. you cannot find a schedule for the given jobs."}, {"full_text": "Example 3:\nInput: jobDifficulty = [1,1,1], d = 3\nOutput: 3\nExplanation: The schedule is one job per day. total difficulty will be 3.", "input": "Input: jobDifficulty = [1,1,1], d = 3", "output": "Output: 3", "explanation": "Explanation: The schedule is one job per day. total difficulty will be 3."}], "constraints": "Constraints:\n1 <= jobDifficulty.length <= 300\n0 <= jobDifficulty[i] <= 1000\n1 <= d <= 10", "notes": ""}, "1330": {"label": "Hard", "title": "Reverse Subarray To Maximize Array Value", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3881, "total_accepted": 3700.0, "total_submissions": 9600.0, "testcase_example": "'[2,3,1,5,4]'", "body": "You are given an integer array nums. The value of this array is defined as the sum of |nums[i] - nums[i + 1]| for all 0 <= i < nums.length - 1.\nYou are allowed to select any subarray of the given array and reverse it. You can perform this operation only once.\nFind maximum possible value of the final array.", "examples": [{"full_text": "Example 1:\nInput: nums = [2,3,1,5,4]\nOutput: 10\nExplanation: By reversing the subarray [3,1,5] the array becomes [2,5,1,3,4] whose value is 10.", "input": "Input: nums = [2,3,1,5,4]", "output": "Output: 10", "explanation": "Explanation: By reversing the subarray [3,1,5] the array becomes [2,5,1,3,4] whose value is 10."}, {"full_text": "Example 2:\nInput: nums = [2,4,9,24,2,1,10]\nOutput: 68", "input": "Input: nums = [2,4,9,24,2,1,10]", "output": "Output: 68", "explanation": ""}], "constraints": "Constraints:\n1 <= nums.length <= 3 * 10^4\n-10^5 <= nums[i] <= 10^5", "notes": ""}, "1326": {"label": "Hard", "title": "Minimum Number of Taps to Open to Water a Garden", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4829, "total_accepted": 50900.0, "total_submissions": 105300.0, "testcase_example": "'5\\n[3,4,1,1,0,0]'", "body": "There is a one-dimensional garden on the x-axis. The garden starts at the point 0 and ends at the point n. (i.e The length of the garden is n).\nThere are n + 1 taps located at points [0, 1, ..., n] in the garden.\nGiven an integer n and an integer array ranges of length n + 1 where ranges[i] (0-indexed) means the i-th tap can water the area [i - ranges[i], i + ranges[i]] if it was open.\nReturn the minimum number of taps that should be open to water the whole garden, If the garden cannot be watered return -1.", "examples": [{"full_text": "Example 1:\nInput: n = 5, ranges = [3,4,1,1,0,0]\nOutput: 1\nExplanation: The tap at point 0 can cover the interval [-3,3]\nThe tap at point 1 can cover the interval [-3,5]\nThe tap at point 2 can cover the interval [1,3]\nThe tap at point 3 can cover the interval [2,4]\nThe tap at point 4 can cover the interval [4,4]\nThe tap at point 5 can cover the interval [5,5]\nOpening Only the second tap will water the whole garden [0,5]", "input": "Input: n = 5, ranges = [3,4,1,1,0,0]", "output": "Output: 1", "explanation": "Explanation: The tap at point 0 can cover the interval [-3,3]\nThe tap at point 1 can cover the interval [-3,5]\nThe tap at point 2 can cover the interval [1,3]\nThe tap at point 3 can cover the interval [2,4]\nThe tap at point 4 can cover the interval [4,4]\nThe tap at point 5 can cover the interval [5,5]\nOpening Only the second tap will water the whole garden [0,5]"}, {"full_text": "Example 2:\nInput: n = 3, ranges = [0,0,0,0]\nOutput: -1\nExplanation: Even if you activate all the four taps you cannot water the whole garden.", "input": "Input: n = 3, ranges = [0,0,0,0]", "output": "Output: -1", "explanation": "Explanation: Even if you activate all the four taps you cannot water the whole garden."}], "constraints": "Constraints:\n1 <= n <= 10^4\nranges.length == n + 1\n0 <= ranges[i] <= 100", "notes": ""}, "1320": {"label": "Hard", "title": "Minimum Distance to Type a Word Using Two Fingers", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6053000000000001, "total_accepted": 22800.0, "total_submissions": 37700.0, "testcase_example": "'\"CAKE\"'", "body": "You have a keyboard layout as shown above in the X-Y plane, where each English uppercase letter is located at some coordinate.\nFor example, the letter 'A' is located at coordinate (0, 0), the letter 'B' is located at coordinate (0, 1), the letter 'P' is located at coordinate (2, 3) and the letter 'Z' is located at coordinate (4, 1).\nGiven the string word, return the minimum total distance to type such string using only two fingers.\nThe distance between coordinates (x1, y1) and (x2, y2) is |x1 - x2| + |y1 - y2|.\nNote that the initial positions of your two fingers are considered free so do not count towards your total distance, also your two fingers do not have to start at the first letter or the first two letters.", "examples": [{"full_text": "Example 1:\nInput: word = \"CAKE\"\nOutput: 3\nExplanation: Using two fingers, one optimal way to type \"CAKE\" is:\nFinger 1 on letter 'C' -> cost = 0\nFinger 1 on letter 'A' -> cost = Distance from letter 'C' to letter 'A' = 2\nFinger 2 on letter 'K' -> cost = 0\nFinger 2 on letter 'E' -> cost = Distance from letter 'K' to letter 'E' = 1\nTotal distance = 3", "input": "Input: word = \"CAKE\"", "output": "Output: 3", "explanation": "Explanation: Using two fingers, one optimal way to type \"CAKE\" is:\nFinger 1 on letter 'C' -> cost = 0\nFinger 1 on letter 'A' -> cost = Distance from letter 'C' to letter 'A' = 2\nFinger 2 on letter 'K' -> cost = 0\nFinger 2 on letter 'E' -> cost = Distance from letter 'K' to letter 'E' = 1\nTotal distance = 3"}, {"full_text": "Example 2:\nInput: word = \"HAPPY\"\nOutput: 6\nExplanation: Using two fingers, one optimal way to type \"HAPPY\" is:\nFinger 1 on letter 'H' -> cost = 0\nFinger 1 on letter 'A' -> cost = Distance from letter 'H' to letter 'A' = 2\nFinger 2 on letter 'P' -> cost = 0\nFinger 2 on letter 'P' -> cost = Distance from letter 'P' to letter 'P' = 0\nFinger 1 on letter 'Y' -> cost = Distance from letter 'A' to letter 'Y' = 4\nTotal distance = 6", "input": "Input: word = \"HAPPY\"", "output": "Output: 6", "explanation": "Explanation: Using two fingers, one optimal way to type \"HAPPY\" is:\nFinger 1 on letter 'H' -> cost = 0\nFinger 1 on letter 'A' -> cost = Distance from letter 'H' to letter 'A' = 2\nFinger 2 on letter 'P' -> cost = 0\nFinger 2 on letter 'P' -> cost = Distance from letter 'P' to letter 'P' = 0\nFinger 1 on letter 'Y' -> cost = Distance from letter 'A' to letter 'Y' = 4\nTotal distance = 6"}], "constraints": "Constraints:\n2 <= word.length <= 300\nword consists of uppercase English letters.", "notes": ""}, "1316": {"label": "Hard", "title": "Distinct Echo Substrings", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5015, "total_accepted": 11100.0, "total_submissions": 22100.0, "testcase_example": "'\"abcabcabc\"'", "body": "Return the number of distinct non-empty substrings of text\nthat can be written as the concatenation of some string with itself (i.e. it can be written as a + a\nwhere a is some string).", "examples": [{"full_text": "Example 1:\nInput: text = \"abcabcabc\"\nOutput: 3\nExplanation: The 3 substrings are \"abcabc\", \"bcabca\" and \"cabcab\".", "input": "Input: text = \"abcabcabc\"", "output": "Output: 3", "explanation": "Explanation: The 3 substrings are \"abcabc\", \"bcabca\" and \"cabcab\"."}, {"full_text": "Example 2:\nInput: text = \"leetcodeleetcode\"\nOutput: 2\nExplanation: The 2 substrings are \"ee\" and \"leetcodeleetcode\".", "input": "Input: text = \"leetcodeleetcode\"", "output": "Output: 2", "explanation": "Explanation: The 2 substrings are \"ee\" and \"leetcodeleetcode\"."}], "constraints": "Constraints:\n1 <= text.length <= 2000\ntext\nhas only lowercase English letters.", "notes": ""}, "1312": {"label": "Hard", "title": "Minimum Insertion Steps to Make a String Palindrome", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6282, "total_accepted": 41200.0, "total_submissions": 65600.0, "testcase_example": "'\"zzazz\"'", "body": "Given a string s. In one step you can insert any character at any index of the string.\nReturn the minimum number of steps to make s\npalindrome.\nA\nPalindrome String\nis one that reads the same backward as well as forward.", "examples": [{"full_text": "Example 1:\nInput: s = \"zzazz\"\nOutput: 0\nExplanation: The string \"zzazz\" is already palindrome we don't need any insertions.", "input": "Input: s = \"zzazz\"", "output": "Output: 0", "explanation": "Explanation: The string \"zzazz\" is already palindrome we don't need any insertions."}, {"full_text": "Example 2:\nInput: s = \"mbadm\"\nOutput: 2\nExplanation: String can be \"mbdadbm\" or \"mdbabdm\".", "input": "Input: s = \"mbadm\"", "output": "Output: 2", "explanation": "Explanation: String can be \"mbdadbm\" or \"mdbabdm\"."}, {"full_text": "Example 3:\nInput: s = \"leetcode\"\nOutput: 5\nExplanation: Inserting 5 characters the string becomes \"leetcodocteel\".", "input": "Input: s = \"leetcode\"", "output": "Output: 5", "explanation": "Explanation: Inserting 5 characters the string becomes \"leetcodocteel\"."}], "constraints": "Constraints:\n1 <= s.length <= 500\ns consists of lowercase English letters.", "notes": ""}, "1307": {"label": "Hard", "title": "Verbal Arithmetic Puzzle", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3522, "total_accepted": 6600.0, "total_submissions": 18800.0, "testcase_example": "'[\"SEND\",\"MORE\"]\\n\"MONEY\"'", "body": "Given an equation, represented by words on the left side and the result on the right side.\nYou need to check if the equation is solvable under the following rules:\nEach character is decoded as one digit (0 - 9).\nEvery pair of different characters must map to different digits.\nEach words[i] and result are decoded as one number without leading zeros.\nSum of numbers on the left side (words) will equal to the number on the right side (result).\nReturn true if the equation is solvable, otherwise return false.", "examples": [{"full_text": "Example 1:\nInput: words = [\"SEND\",\"MORE\"], result = \"MONEY\"\nOutput: true\nExplanation: Map 'S'-> 9, 'E'->5, 'N'->6, 'D'->7, 'M'->1, 'O'->0, 'R'->8, 'Y'->'2'\nSuch that: \"SEND\" + \"MORE\" = \"MONEY\" , 9567 + 1085 = 10652", "input": "Input: words = [\"SEND\",\"MORE\"], result = \"MONEY\"", "output": "Output: true", "explanation": "Explanation: Map 'S'-> 9, 'E'->5, 'N'->6, 'D'->7, 'M'->1, 'O'->0, 'R'->8, 'Y'->'2'\nSuch that: \"SEND\" + \"MORE\" = \"MONEY\" , 9567 + 1085 = 10652"}, {"full_text": "Example 2:\nInput: words = [\"SIX\",\"SEVEN\",\"SEVEN\"], result = \"TWENTY\"\nOutput: true\nExplanation: Map 'S'-> 6, 'I'->5, 'X'->0, 'E'->8, 'V'->7, 'N'->2, 'T'->1, 'W'->'3', 'Y'->4\nSuch that: \"SIX\" + \"SEVEN\" + \"SEVEN\" = \"TWENTY\" , 650 + 68782 + 68782 = 138214", "input": "Input: words = [\"SIX\",\"SEVEN\",\"SEVEN\"], result = \"TWENTY\"", "output": "Output: true", "explanation": "Explanation: Map 'S'-> 6, 'I'->5, 'X'->0, 'E'->8, 'V'->7, 'N'->2, 'T'->1, 'W'->'3', 'Y'->4\nSuch that: \"SIX\" + \"SEVEN\" + \"SEVEN\" = \"TWENTY\" , 650 + 68782 + 68782 = 138214"}, {"full_text": "Example 3:\nInput: words = [\"LEET\",\"CODE\"], result = \"POINT\"\nOutput: false", "input": "Input: words = [\"LEET\",\"CODE\"], result = \"POINT\"", "output": "Output: false", "explanation": ""}], "constraints": "Constraints:\n2 <= words.length <= 5\n1 <= words[i].length, result.length <= 7\nwords[i], result contain only uppercase English letters.\nThe number of different characters used in the expression is at most 10.", "notes": ""}, "1301": {"label": "Hard", "title": "Number of Paths with Max Score", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3876, "total_accepted": 8800.0, "total_submissions": 22600.0, "testcase_example": "'[\"E23\",\"2X2\",\"12S\"]\\r'", "body": "You are given a square board\nof characters. You can move on the board starting at the bottom right square marked with the character\n'S'.\nYou need\nto reach the top left square marked with the character 'E'. The rest of the squares are labeled either with a numeric character\n1, 2, ..., 9 or with an obstacle 'X'. In one move you can go up, left or up-left (diagonally) only if there is no obstacle there.\nReturn a list of two integers: the first integer is the maximum sum of numeric characters you can collect, and the second is the number of such paths that you can take to get that maximum sum, taken modulo 10^9 + 7.\nIn case there is no path, return\n[0, 0].", "examples": [{"full_text": "Example 1:\nInput: board = [\"E23\",\"2X2\",\"12S\"]\nOutput: [7,1]", "input": "Input: board = [\"E23\",\"2X2\",\"12S\"]", "output": "Output: [7,1]", "explanation": ""}, {"full_text": "Example 2:\nInput: board = [\"E12\",\"1X1\",\"21S\"]\nOutput: [4,2]", "input": "Input: board = [\"E12\",\"1X1\",\"21S\"]", "output": "Output: [4,2]", "explanation": ""}, {"full_text": "Example 3:\nInput: board = [\"E11\",\"XXX\",\"11S\"]\nOutput: [0,0]", "input": "Input: board = [\"E11\",\"XXX\",\"11S\"]", "output": "Output: [0,0]", "explanation": ""}], "constraints": "Constraints:\n2 <= board.length == board[i].length <= 100", "notes": ""}, "1298": {"label": "Hard", "title": "Maximum Candies You Can Get from Boxes", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6085, "total_accepted": 9800.0, "total_submissions": 16000.0, "testcase_example": "'[1,0,1,0]\\n[7,5,4,100]\\n[[],[],[1],[]]\\n[[1,2],[3],[],[]]\\n[0]'", "body": "You have n boxes labeled from 0 to n - 1. You are given four arrays: status, candies, keys, and containedBoxes where:\nstatus[i] is 1 if the i^th box is open and 0 if the i^th box is closed,\ncandies[i] is the number of candies in the i^th box,\nkeys[i] is a list of the labels of the boxes you can open after opening the i^th box.\ncontainedBoxes[i] is a list of the boxes you found inside the i^th box.\nYou are given an integer array initialBoxes that contains the labels of the boxes you initially have. You can take all the candies in any open box and you can use the keys in it to open new boxes and you also can use the boxes you find in it.\nReturn the maximum number of candies you can get following the rules above.", "examples": [{"full_text": "Example 1:\nInput: status = [1,0,1,0], candies = [7,5,4,100], keys = [[],[],[1],[]], containedBoxes = [[1,2],[3],[],[]], initialBoxes = [0]\nOutput: 16\nExplanation: You will be initially given box 0. You will find 7 candies in it and boxes 1 and 2.\nBox 1 is closed and you do not have a key for it so you will open box 2. You will find 4 candies and a key to box 1 in box 2.\nIn box 1, you will find 5 candies and box 3 but you will not find a key to box 3 so box 3 will remain closed.\nTotal number of candies collected = 7 + 4 + 5 = 16 candy.", "input": "Input: status = [1,0,1,0], candies = [7,5,4,100], keys = [[],[],[1],[]], containedBoxes = [[1,2],[3],[],[]], initialBoxes = [0]", "output": "Output: 16", "explanation": "Explanation: You will be initially given box 0. You will find 7 candies in it and boxes 1 and 2.\nBox 1 is closed and you do not have a key for it so you will open box 2. You will find 4 candies and a key to box 1 in box 2.\nIn box 1, you will find 5 candies and box 3 but you will not find a key to box 3 so box 3 will remain closed.\nTotal number of candies collected = 7 + 4 + 5 = 16 candy."}, {"full_text": "Example 2:\nInput: status = [1,0,0,0,0,0], candies = [1,1,1,1,1,1], keys = [[1,2,3,4,5],[],[],[],[],[]], containedBoxes = [[1,2,3,4,5],[],[],[],[],[]], initialBoxes = [0]\nOutput: 6\nExplanation: You have initially box 0. Opening it you can find boxes 1,2,3,4 and 5 and their keys.\nThe total number of candies will be 6.", "input": "Input: status = [1,0,0,0,0,0], candies = [1,1,1,1,1,1], keys = [[1,2,3,4,5],[],[],[],[],[]], containedBoxes = [[1,2,3,4,5],[],[],[],[],[]], initialBoxes = [0]", "output": "Output: 6", "explanation": "Explanation: You have initially box 0. Opening it you can find boxes 1,2,3,4 and 5 and their keys.\nThe total number of candies will be 6."}], "constraints": "Constraints:\nn == status.length == candies.length == keys.length == containedBoxes.length\n1 <= n <= 1000\nstatus[i] is either 0 or 1.\n1 <= candies[i] <= 1000\n0 <= keys[i].length <= n\n0 <= keys[i][j] < n\nAll values of keys[i] are unique.\n0 <= containedBoxes[i].length <= n\n0 <= containedBoxes[i][j] < n\nAll values of containedBoxes[i] are unique.\nEach box is contained in one box at most.\n0 <= initialBoxes.length <= n\n0 <= initialBoxes[i] < n", "notes": ""}, "1293": {"label": "Hard", "title": "Shortest Path in a Grid with Obstacles Elimination", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.43729999999999997, "total_accepted": 77400.0, "total_submissions": 176900.0, "testcase_example": "'[[0,0,0],[1,1,0],[0,0,0],[0,1,1],[0,0,0]]\\n1'", "body": "You are given an m x n integer matrix grid where each cell is either 0 (empty) or 1 (obstacle). You can move up, down, left, or right from and to an empty cell in one step.\nReturn the minimum number of steps to walk from the upper left corner (0, 0) to the lower right corner (m - 1, n - 1) given that you can eliminate at most k obstacles. If it is not possible to find such walk return -1.", "examples": [{"full_text": "Example 1:\nInput: grid = [[0,0,0],[1,1,0],[0,0,0],[0,1,1],[0,0,0]], k = 1\nOutput: 6\nExplanation:\nThe shortest path without eliminating any obstacle is 10.\nThe shortest path with one obstacle elimination at position (3,2) is 6. Such path is (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) -> (3,2) -> (4,2).", "input": "Input: grid = [[0,0,0],[1,1,0],[0,0,0],[0,1,1],[0,0,0]], k = 1", "output": "Output: 6", "explanation": "Explanation:\nThe shortest path without eliminating any obstacle is 10.\nThe shortest path with one obstacle elimination at position (3,2) is 6. Such path is (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) -> (3,2) -> (4,2)."}, {"full_text": "Example 2:\nInput: grid = [[0,1,1],[1,1,1],[1,0,0]], k = 1\nOutput: -1\nExplanation: We need to eliminate at least two obstacles to find such a walk.", "input": "Input: grid = [[0,1,1],[1,1,1],[1,0,0]], k = 1", "output": "Output: -1", "explanation": "Explanation: We need to eliminate at least two obstacles to find such a walk."}], "constraints": "Constraints:\nm == grid.length\nn == grid[i].length\n1 <= m, n <= 40\n1 <= k <= m * n\ngrid[i][j] is either 0 or 1.\ngrid[0][0] == grid[m - 1][n - 1] == 0", "notes": ""}, "1289": {"label": "Hard", "title": "Minimum Falling Path Sum II", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6178, "total_accepted": 25700.0, "total_submissions": 41700.0, "testcase_example": "'[[1,2,3],[4,5,6],[7,8,9]]'", "body": "Given an n x n integer matrix grid, return the minimum sum of a falling path with non-zero shifts.\nA falling path with non-zero shifts is a choice of exactly one element from each row of grid such that no two elements chosen in adjacent rows are in the same column.", "examples": [{"full_text": "Example 1:\nInput: arr = [[1,2,3],[4,5,6],[7,8,9]]\nOutput: 13\nExplanation:\nThe possible falling paths are:\n[1,5,9], [1,5,7], [1,6,7], [1,6,8],\n[2,4,8], [2,4,9], [2,6,7], [2,6,8],\n[3,4,8], [3,4,9], [3,5,7], [3,5,9]\nThe falling path with the smallest sum is\n[1,5,7], so the answer is\n13.", "input": "Input: arr = [[1,2,3],[4,5,6],[7,8,9]]", "output": "Output: 13", "explanation": "Explanation:\nThe possible falling paths are:\n[1,5,9], [1,5,7], [1,6,7], [1,6,8],\n[2,4,8], [2,4,9], [2,6,7], [2,6,8],\n[3,4,8], [3,4,9], [3,5,7], [3,5,9]\nThe falling path with the smallest sum is\n[1,5,7], so the answer is\n13."}, {"full_text": "Example 2:\nInput: grid = [[7]]\nOutput: 7", "input": "Input: grid = [[7]]", "output": "Output: 7", "explanation": ""}], "constraints": "Constraints:\nn == grid.length == grid[i].length\n1 <= n <= 200\n-99 <= grid[i][j] <= 99", "notes": ""}, "1284": {"label": "Hard", "title": "Minimum Number of Flips to Convert Binary Matrix to Zero Matrix", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7132, "total_accepted": 17800.0, "total_submissions": 24900.0, "testcase_example": "'[[0,0],[0,1]]'", "body": "Given a m x n binary matrix mat. In one step, you can choose one cell and flip it and all the four neighbors of it if they exist (Flip is changing 1 to 0 and 0 to 1). A pair of cells are called neighbors if they share one edge.\nReturn the minimum number of steps required to convert mat to a zero matrix or -1 if you cannot.\nA binary matrix is a matrix with all cells equal to 0 or 1 only.\nA zero matrix is a matrix with all cells equal to 0.", "examples": [{"full_text": "Example 1:\nInput: mat = [[0,0],[0,1]]\nOutput: 3\nExplanation: One possible solution is to flip (1, 0) then (0, 1) and finally (1, 1) as shown.", "input": "Input: mat = [[0,0],[0,1]]", "output": "Output: 3", "explanation": "Explanation: One possible solution is to flip (1, 0) then (0, 1) and finally (1, 1) as shown."}, {"full_text": "Example 2:\nInput: mat = [[0]]\nOutput: 0\nExplanation: Given matrix is a zero matrix. We do not need to change it.", "input": "Input: mat = [[0]]", "output": "Output: 0", "explanation": "Explanation: Given matrix is a zero matrix. We do not need to change it."}, {"full_text": "Example 3:\nInput: mat = [[1,0,0],[1,0,0]]\nOutput: -1\nExplanation: Given matrix cannot be a zero matrix.", "input": "Input: mat = [[1,0,0],[1,0,0]]", "output": "Output: -1", "explanation": "Explanation: Given matrix cannot be a zero matrix."}], "constraints": "Constraints:\nm == mat.length\nn == mat[i].length\n1 <= m, n <= 3\nmat[i][j] is either 0 or 1.", "notes": ""}, "1278": {"label": "Hard", "title": "Palindrome Partitioning III", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6089, "total_accepted": 17400.0, "total_submissions": 28500.0, "testcase_example": "'\"abc\"\\n2'", "body": "You are given a string s containing lowercase letters and an integer k. You need to :\nFirst, change some characters of s to other lowercase English letters.\nThen divide s into k non-empty disjoint substrings such that each substring is a palindrome.\nReturn the minimal number of characters that you need to change to divide the string.", "examples": [{"full_text": "Example 1:\nInput: s = \"abc\", k = 2\nOutput: 1\nExplanation:\nYou can split the string into \"ab\" and \"c\", and change 1 character in \"ab\" to make it palindrome.", "input": "Input: s = \"abc\", k = 2", "output": "Output: 1", "explanation": "Explanation:\nYou can split the string into \"ab\" and \"c\", and change 1 character in \"ab\" to make it palindrome."}, {"full_text": "Example 2:\nInput: s = \"aabbc\", k = 3\nOutput: 0\nExplanation:\nYou can split the string into \"aa\", \"bb\" and \"c\", all of them are palindrome.", "input": "Input: s = \"aabbc\", k = 3", "output": "Output: 0", "explanation": "Explanation:\nYou can split the string into \"aa\", \"bb\" and \"c\", all of them are palindrome."}, {"full_text": "Example 3:\nInput: s = \"leetcode\", k = 8\nOutput: 0", "input": "Input: s = \"leetcode\", k = 8", "output": "Output: 0", "explanation": ""}], "constraints": "Constraints:\n1 <= k <= s.length <= 100.\ns only contains lowercase English letters.", "notes": ""}, "1269": {"label": "Hard", "title": "Number of Ways to Stay in the Same Place After Some Steps", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4341, "total_accepted": 26300.0, "total_submissions": 60600.0, "testcase_example": "'3\\n2'", "body": "You have a pointer at index 0 in an array of size arrLen. At each step, you can move 1 position to the left, 1 position to the right in the array, or stay in the same place (The pointer should not be placed outside the array at any time).\nGiven two integers steps and arrLen, return the number of ways such that your pointer still at index 0 after exactly steps steps. Since the answer may be too large, return it modulo 10^9 + 7.", "examples": [{"full_text": "Example 1:\nInput: steps = 3, arrLen = 2\nOutput: 4\nExplanation: There are 4 differents ways to stay at index 0 after 3 steps.\nRight, Left, Stay\nStay, Right, Left\nRight, Stay, Left\nStay, Stay, Stay", "input": "Input: steps = 3, arrLen = 2", "output": "Output: 4", "explanation": "Explanation: There are 4 differents ways to stay at index 0 after 3 steps.\nRight, Left, Stay\nStay, Right, Left\nRight, Stay, Left\nStay, Stay, Stay"}, {"full_text": "Example 2:\nInput: steps = 2, arrLen = 4\nOutput: 2\nExplanation: There are 2 differents ways to stay at index 0 after 2 steps\nRight, Left\nStay, Stay", "input": "Input: steps = 2, arrLen = 4", "output": "Output: 2", "explanation": "Explanation: There are 2 differents ways to stay at index 0 after 2 steps\nRight, Left\nStay, Stay"}, {"full_text": "Example 3:\nInput: steps = 4, arrLen = 2\nOutput: 8", "input": "Input: steps = 4, arrLen = 2", "output": "Output: 8", "explanation": ""}], "constraints": "Constraints:\n1 <= steps <= 500\n1 <= arrLen <= 10^6", "notes": ""}, "1263": {"label": "Hard", "title": "Minimum Moves to Move a Box to Their Target Location", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4813, "total_accepted": 19800.0, "total_submissions": 41000.0, "testcase_example": "'[[\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"],[\"#\",\"T\",\"#\",\"#\",\"#\",\"#\"],[\"#\",\".\",\".\",\"B\",\".\",\"#\"],[\"#\",\".\",\"#\",\"#\",\".\",\"#\"],[\"#\",\".\",\".\",\".\",\"S\",\"#\"],[\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"]]'", "body": "A storekeeper is a game in which the player pushes boxes around in a warehouse trying to get them to target locations.\nThe game is represented by an m x n grid of characters grid where each element is a wall, floor, or box.\nYour task is to move the box 'B' to the target position 'T' under the following rules:\nThe character 'S' represents the player. The player can move up, down, left, right in grid if it is a floor (empty cell).\nThe character '.' represents the floor which means a free cell to walk.\nThe character '#' represents the wall which means an obstacle (impossible to walk there).\nThere is only one box 'B' and one target cell 'T' in the grid.\nThe box can be moved to an adjacent free cell by standing next to the box and then moving in the direction of the box. This is a push.\nThe player cannot walk through the box.\nReturn the minimum number of pushes to move the box to the target. If there is no way to reach the target, return -1.", "examples": [{"full_text": "Example 1:\nInput: grid = [[\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"],\n[\"#\",\"T\",\"#\",\"#\",\"#\",\"#\"],\n[\"#\",\".\",\".\",\"B\",\".\",\"#\"],\n[\"#\",\".\",\"#\",\"#\",\".\",\"#\"],\n[\"#\",\".\",\".\",\".\",\"S\",\"#\"],\n[\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"]]\nOutput: 3\nExplanation: We return only the number of times the box is pushed.", "input": "Input: grid = [[\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"],\n[\"#\",\"T\",\"#\",\"#\",\"#\",\"#\"],\n[\"#\",\".\",\".\",\"B\",\".\",\"#\"],\n[\"#\",\".\",\"#\",\"#\",\".\",\"#\"],\n[\"#\",\".\",\".\",\".\",\"S\",\"#\"],\n[\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"]]", "output": "Output: 3", "explanation": "Explanation: We return only the number of times the box is pushed."}, {"full_text": "Example 2:\nInput: grid = [[\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"],\n[\"#\",\"T\",\"#\",\"#\",\"#\",\"#\"],\n[\"#\",\".\",\".\",\"B\",\".\",\"#\"],\n[\"#\",\"#\",\"#\",\"#\",\".\",\"#\"],\n[\"#\",\".\",\".\",\".\",\"S\",\"#\"],\n[\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"]]\nOutput: -1", "input": "Input: grid = [[\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"],\n[\"#\",\"T\",\"#\",\"#\",\"#\",\"#\"],\n[\"#\",\".\",\".\",\"B\",\".\",\"#\"],\n[\"#\",\"#\",\"#\",\"#\",\".\",\"#\"],\n[\"#\",\".\",\".\",\".\",\"S\",\"#\"],\n[\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"]]", "output": "Output: -1", "explanation": ""}, {"full_text": "Example 3:\nInput: grid = [[\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"],\n[\"#\",\"T\",\".\",\".\",\"#\",\"#\"],\n[\"#\",\".\",\"#\",\"B\",\".\",\"#\"],\n[\"#\",\".\",\".\",\".\",\".\",\"#\"],\n[\"#\",\".\",\".\",\".\",\"S\",\"#\"],\n[\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"]]\nOutput: 5\nExplanation: push the box down, left, left, up and up.", "input": "Input: grid = [[\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"],\n[\"#\",\"T\",\".\",\".\",\"#\",\"#\"],\n[\"#\",\".\",\"#\",\"B\",\".\",\"#\"],\n[\"#\",\".\",\".\",\".\",\".\",\"#\"],\n[\"#\",\".\",\".\",\".\",\"S\",\"#\"],\n[\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"]]", "output": "Output: 5", "explanation": "Explanation: push the box down, left, left, up and up."}], "constraints": "Constraints:\nm == grid.length\nn == grid[i].length\n1 <= m, n <= 20\ngrid contains only characters '.', '#', 'S', 'T', or 'B'.\nThere is only one character 'S', 'B', and 'T' in the grid.", "notes": ""}, "1255": {"label": "Hard", "title": "Maximum Score Words Formed by Letters", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7192000000000001, "total_accepted": 19700.0, "total_submissions": 27400.0, "testcase_example": "'[\"dog\",\"cat\",\"dad\",\"good\"]\\n' +\n  '[\"a\",\"a\",\"c\",\"d\",\"d\",\"d\",\"g\",\"o\",\"o\"]\\n' +\n  '[1,0,9,5,0,0,3,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0]'", "body": "Given a list of words, list of\nsingle\nletters (might be repeating)\nand score\nof every character.\nReturn the maximum score of any valid set of words formed by using the given letters (words[i] cannot be used two\nor more times).\nIt is not necessary to use all characters in letters and each letter can only be used once. Score of letters\n'a', 'b', 'c', ... ,'z' is given by\nscore[0], score[1], ... , score[25] respectively.", "examples": [{"full_text": "Example 1:\nInput: words = [\"dog\",\"cat\",\"dad\",\"good\"], letters = [\"a\",\"a\",\"c\",\"d\",\"d\",\"d\",\"g\",\"o\",\"o\"], score = [1,0,9,5,0,0,3,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0]\nOutput: 23\nExplanation:\nScore a=1, c=9, d=5, g=3, o=2\nGiven letters, we can form the words \"dad\" (5+1+5) and \"good\" (3+2+2+5) with a score of 23.\nWords \"dad\" and \"dog\" only get a score of 21.", "input": "Input: words = [\"dog\",\"cat\",\"dad\",\"good\"], letters = [\"a\",\"a\",\"c\",\"d\",\"d\",\"d\",\"g\",\"o\",\"o\"], score = [1,0,9,5,0,0,3,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0]", "output": "Output: 23", "explanation": "Explanation:\nScore a=1, c=9, d=5, g=3, o=2\nGiven letters, we can form the words \"dad\" (5+1+5) and \"good\" (3+2+2+5) with a score of 23.\nWords \"dad\" and \"dog\" only get a score of 21."}, {"full_text": "Example 2:\nInput: words = [\"xxxz\",\"ax\",\"bx\",\"cx\"], letters = [\"z\",\"a\",\"b\",\"c\",\"x\",\"x\",\"x\"], score = [4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,10]\nOutput: 27\nExplanation:\nScore a=4, b=4, c=4, x=5, z=10\nGiven letters, we can form the words \"ax\" (4+5), \"bx\" (4+5) and \"cx\" (4+5) with a score of 27.\nWord \"xxxz\" only get a score of 25.", "input": "Input: words = [\"xxxz\",\"ax\",\"bx\",\"cx\"], letters = [\"z\",\"a\",\"b\",\"c\",\"x\",\"x\",\"x\"], score = [4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,10]", "output": "Output: 27", "explanation": "Explanation:\nScore a=4, b=4, c=4, x=5, z=10\nGiven letters, we can form the words \"ax\" (4+5), \"bx\" (4+5) and \"cx\" (4+5) with a score of 27.\nWord \"xxxz\" only get a score of 25."}, {"full_text": "Example 3:\nInput: words = [\"leetcode\"], letters = [\"l\",\"e\",\"t\",\"c\",\"o\",\"d\"], score = [0,0,1,1,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0]\nOutput: 0\nExplanation:\nLetter \"e\" can only be used once.", "input": "Input: words = [\"leetcode\"], letters = [\"l\",\"e\",\"t\",\"c\",\"o\",\"d\"], score = [0,0,1,1,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0]", "output": "Output: 0", "explanation": "Explanation:\nLetter \"e\" can only be used once."}], "constraints": "Constraints:\n1 <= words.length <= 14\n1 <= words[i].length <= 15\n1 <= letters.length <= 100\nletters[i].length == 1\nscore.length ==\n26\n0 <= score[i] <= 10\nwords[i], letters[i]\ncontains only lower case English letters.", "notes": ""}, "1250": {"label": "Hard", "title": "Check If It Is a Good Array", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5754, "total_accepted": 12400.0, "total_submissions": 21600.0, "testcase_example": "'[12,5,7,23]'", "body": "Given an array nums of\npositive integers. Your task is to select some subset of nums, multiply each element by an integer and add all these numbers.\nThe array is said to be\ngood\nif you can obtain a sum of\n1\nfrom the array by any possible subset and multiplicand.\nReturn\nTrue\nif the array is good\notherwise\nreturn\nFalse.", "examples": [{"full_text": "Example 1:\nInput: nums = [12,5,7,23]\nOutput: true\nExplanation: Pick numbers 5 and 7.\n5*3 + 7*(-2) = 1", "input": "Input: nums = [12,5,7,23]", "output": "Output: true", "explanation": "Explanation: Pick numbers 5 and 7.\n5*3 + 7*(-2) = 1"}, {"full_text": "Example 2:\nInput: nums = [29,6,10]\nOutput: true\nExplanation: Pick numbers 29, 6 and 10.\n29*1 + 6*(-3) + 10*(-1) = 1", "input": "Input: nums = [29,6,10]", "output": "Output: true", "explanation": "Explanation: Pick numbers 29, 6 and 10.\n29*1 + 6*(-3) + 10*(-1) = 1"}, {"full_text": "Example 3:\nInput: nums = [3,6]\nOutput: false", "input": "Input: nums = [3,6]", "output": "Output: false", "explanation": ""}], "constraints": "Constraints:\n1 <= nums.length <= 10^5\n1 <= nums[i] <= 10^9", "notes": ""}, "1240": {"label": "Hard", "title": "Tiling a Rectangle with the Fewest Squares", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5266, "total_accepted": 14700.0, "total_submissions": 27900.0, "testcase_example": "'2\\n3'", "body": "Given a rectangle of size n x m, return the minimum number of integer-sided squares that tile the rectangle.", "examples": [{"full_text": "Example 1:\nInput: n = 2, m = 3\nOutput: 3\nExplanation: 3 squares are necessary to cover the rectangle.\n2 (squares of 1x1)\n1 (square of 2x2)", "input": "Input: n = 2, m = 3", "output": "Output: 3", "explanation": "Explanation: 3 squares are necessary to cover the rectangle.\n2 (squares of 1x1)\n1 (square of 2x2)"}, {"full_text": "Example 2:\nInput: n = 5, m = 8\nOutput: 5", "input": "Input: n = 5, m = 8", "output": "Output: 5", "explanation": ""}, {"full_text": "Example 3:\nInput: n = 11, m = 13\nOutput: 6", "input": "Input: n = 11, m = 13", "output": "Output: 6", "explanation": ""}], "constraints": "Constraints:\n1 <= n, m <= 13", "notes": ""}, "1235": {"label": "Hard", "title": "Maximum Profit in Job Scheduling", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5075999999999999, "total_accepted": 101900.0, "total_submissions": 200700.0, "testcase_example": "'[1,2,3,3]\\n[3,4,5,6]\\n[50,10,40,70]'", "body": "We have n jobs, where every job is scheduled to be done from startTime[i] to endTime[i], obtaining a profit of profit[i].\nYou're given the startTime, endTime and profit arrays, return the maximum profit you can take such that there are no two jobs in the subset with overlapping time range.\nIf you choose a job that ends at time X you will be able to start another job that starts at time X.", "examples": [{"full_text": "Example 1:\nInput: startTime = [1,2,3,3], endTime = [3,4,5,6], profit = [50,10,40,70]\nOutput: 120\nExplanation: The subset chosen is the first and fourth job.\nTime range [1-3]+[3-6] , we get profit of 120 = 50 + 70.", "input": "Input: startTime = [1,2,3,3], endTime = [3,4,5,6], profit = [50,10,40,70]", "output": "Output: 120", "explanation": "Explanation: The subset chosen is the first and fourth job.\nTime range [1-3]+[3-6] , we get profit of 120 = 50 + 70."}, {"full_text": "Example 2:\n\nInput: startTime = [1,2,3,4,6], endTime = [3,5,10,6,9], profit = [20,20,100,70,60]\nOutput: 150\nExplanation: The subset chosen is the first, fourth and fifth job.\nProfit obtained 150 = 20 + 70 + 60.", "input": "Input: startTime = [1,2,3,4,6], endTime = [3,5,10,6,9], profit = [20,20,100,70,60]", "output": "Output: 150", "explanation": "Explanation: The subset chosen is the first, fourth and fifth job.\nProfit obtained 150 = 20 + 70 + 60."}, {"full_text": "Example 3:\nInput: startTime = [1,1,1], endTime = [2,3,4], profit = [5,6,4]\nOutput: 6", "input": "Input: startTime = [1,1,1], endTime = [2,3,4], profit = [5,6,4]", "output": "Output: 6", "explanation": ""}], "constraints": "Constraints:\n1 <= startTime.length == endTime.length == profit.length <= 5 * 10^4\n1 <= startTime[i] < endTime[i] <= 10^9\n1 <= profit[i] <= 10^4", "notes": ""}, "1224": {"label": "Hard", "title": "Maximum Equal Frequency", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3661, "total_accepted": 10300.0, "total_submissions": 28200.0, "testcase_example": "'[2,2,1,1,5,3,3,5]'", "body": "Given an array nums of positive integers, return the longest possible length of an array prefix of nums, such that it is possible to remove exactly one element from this prefix so that every number that has appeared in it will have the same number of occurrences.\nIf after removing one element there are no remaining elements, it's still considered that every appeared number has the same number of ocurrences (0).", "examples": [{"full_text": "Example 1:\nInput: nums = [2,2,1,1,5,3,3,5]\nOutput: 7\nExplanation: For the subarray [2,2,1,1,5,3,3] of length 7, if we remove nums[4] = 5, we will get [2,2,1,1,3,3], so that each number will appear exactly twice.", "input": "Input: nums = [2,2,1,1,5,3,3,5]", "output": "Output: 7", "explanation": "Explanation: For the subarray [2,2,1,1,5,3,3] of length 7, if we remove nums[4] = 5, we will get [2,2,1,1,3,3], so that each number will appear exactly twice."}, {"full_text": "Example 2:\nInput: nums = [1,1,1,2,2,2,3,3,3,4,4,4,5]\nOutput: 13", "input": "Input: nums = [1,1,1,2,2,2,3,3,3,4,4,4,5]", "output": "Output: 13", "explanation": ""}], "constraints": "Constraints:\n2 <= nums.length <= 10^5\n1 <= nums[i] <= 10^5", "notes": ""}, "1223": {"label": "Hard", "title": "Dice Roll Simulation", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4769, "total_accepted": 21100.0, "total_submissions": 44200.0, "testcase_example": "'2\\n[1,1,2,2,2,3]'", "body": "A die simulator generates a random number from 1 to 6 for each roll. You introduced a constraint to the generator such that it cannot roll the number i more than rollMax[i] (1-indexed) consecutive times.\nGiven an array of integers rollMax and an integer n, return the number of distinct sequences that can be obtained with exact n rolls. Since the answer may be too large, return it modulo 10^9 + 7.\nTwo sequences are considered different if at least one element differs from each other.", "examples": [{"full_text": "Example 1:\nInput: n = 2, rollMax = [1,1,2,2,2,3]\nOutput: 34\nExplanation: There will be 2 rolls of die, if there are no constraints on the die, there are 6 * 6 = 36 possible combinations. In this case, looking at rollMax array, the numbers 1 and 2 appear at most once consecutively, therefore sequences (1,1) and (2,2) cannot occur, so the final answer is 36-2 = 34.", "input": "Input: n = 2, rollMax = [1,1,2,2,2,3]", "output": "Output: 34", "explanation": "Explanation: There will be 2 rolls of die, if there are no constraints on the die, there are 6 * 6 = 36 possible combinations. In this case, looking at rollMax array, the numbers 1 and 2 appear at most once consecutively, therefore sequences (1,1) and (2,2) cannot occur, so the final answer is 36-2 = 34."}, {"full_text": "Example 2:\nInput: n = 2, rollMax = [1,1,1,1,1,1]\nOutput: 30", "input": "Input: n = 2, rollMax = [1,1,1,1,1,1]", "output": "Output: 30", "explanation": ""}, {"full_text": "Example 3:\nInput: n = 3, rollMax = [1,1,1,2,2,3]\nOutput: 181", "input": "Input: n = 3, rollMax = [1,1,1,2,2,3]", "output": "Output: 181", "explanation": ""}], "constraints": "Constraints:\n1 <= n <= 5000\nrollMax.length == 6\n1 <= rollMax[i] <= 15", "notes": ""}, "1220": {"label": "Hard", "title": "Count Vowels Permutation", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5632, "total_accepted": 45000.0, "total_submissions": 80000.0, "testcase_example": "'1'", "body": "Given an integer n, your task is to count how many strings of length n can be formed under the following rules:\nEach character is a lower case vowel\n('a', 'e', 'i', 'o', 'u')\nEach vowel\n'a' may only be followed by an 'e'.\nEach vowel\n'e' may only be followed by an 'a'\nor an 'i'.\nEach vowel\n'i' may not be followed by another 'i'.\nEach vowel\n'o' may only be followed by an 'i' or a\n'u'.\nEach vowel\n'u' may only be followed by an 'a'.\nSince the answer\nmay be too large,\nreturn it modulo 10^9 + 7.", "examples": [{"full_text": "Example 1:\nInput: n = 1\nOutput: 5\nExplanation: All possible strings are: \"a\", \"e\", \"i\" , \"o\" and \"u\".", "input": "Input: n = 1", "output": "Output: 5", "explanation": "Explanation: All possible strings are: \"a\", \"e\", \"i\" , \"o\" and \"u\"."}, {"full_text": "Example 2:\nInput: n = 2\nOutput: 10\nExplanation: All possible strings are: \"ae\", \"ea\", \"ei\", \"ia\", \"ie\", \"io\", \"iu\", \"oi\", \"ou\" and \"ua\".", "input": "Input: n = 2", "output": "Output: 10", "explanation": "Explanation: All possible strings are: \"ae\", \"ea\", \"ei\", \"ia\", \"ie\", \"io\", \"iu\", \"oi\", \"ou\" and \"ua\"."}, {"full_text": "Example 3:\nInput: n = 5\nOutput: 68", "input": "Input: n = 5", "output": "Output: 68", "explanation": ""}], "constraints": "Constraints:\n1 <= n <= 2 * 10^4", "notes": ""}, "1210": {"label": "Hard", "title": "Minimum Moves to Reach Target with Rotations", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.479, "total_accepted": 7000.0, "total_submissions": 14700.0, "testcase_example": "'[[0,0,0,0,0,1],[1,1,0,0,1,0],[0,0,0,0,1,1],[0,0,1,0,1,0],[0,1,1,0,0,0],[0,1,1,0,0,0]]\\r'", "body": "In an\nn*n\ngrid, there is a snake that spans 2 cells and starts moving from the top left corner at (0, 0) and (0, 1). The grid has empty cells represented by zeros and blocked cells represented by ones. The snake wants to reach the lower right corner at\n(n-1, n-2)\nand\n(n-1, n-1).\nIn one move the snake can:\nMove one cell to the right\nif there are no blocked cells there. This move keeps the horizontal/vertical position of the snake as it is.\nMove down one cell\nif there are no blocked cells there. This move keeps the horizontal/vertical position of the snake as it is.\nRotate clockwise if it's in a horizontal position and the two cells under it are both empty. In that case the snake moves from\n(r, c)\nand\n(r, c+1)\nto\n(r, c)\nand\n(r+1, c).\n\nRotate counterclockwise\nif it's in a vertical position and the two cells to its right are both empty. In that case the snake moves from\n(r, c)\nand\n(r+1, c)\nto\n(r, c)\nand\n(r, c+1).\n\nReturn the minimum number of moves to reach the target.\nIf there is no way to reach the target, return\n-1.", "examples": [{"full_text": "Example 1:\nInput: grid = [[0,0,0,0,0,1],\n[1,1,0,0,1,0],\n[0,0,0,0,1,1],\n[0,0,1,0,1,0],\n[0,1,1,0,0,0],\n[0,1,1,0,0,0]]\nOutput: 11\nExplanation:\nOne possible solution is [right, right, rotate clockwise, right, down, down, down, down, rotate counterclockwise, right, down].", "input": "Input: grid = [[0,0,0,0,0,1],\n[1,1,0,0,1,0],\n[0,0,0,0,1,1],\n[0,0,1,0,1,0],\n[0,1,1,0,0,0],\n[0,1,1,0,0,0]]", "output": "Output: 11", "explanation": "Explanation:\nOne possible solution is [right, right, rotate clockwise, right, down, down, down, down, rotate counterclockwise, right, down]."}, {"full_text": "Example 2:\nInput: grid = [[0,0,1,1,1,1],\n[0,0,0,0,1,1],\n[1,1,0,0,0,1],\n[1,1,1,0,0,1],\n[1,1,1,0,0,1],\n[1,1,1,0,0,0]]\nOutput: 9", "input": "Input: grid = [[0,0,1,1,1,1],\n[0,0,0,0,1,1],\n[1,1,0,0,0,1],\n[1,1,1,0,0,1],\n[1,1,1,0,0,1],\n[1,1,1,0,0,0]]", "output": "Output: 9", "explanation": ""}], "constraints": "Constraints:\n2 <= n <= 100\n0 <= grid[i][j] <= 1\nIt is guaranteed that the snake starts at empty cells.", "notes": ""}, "1206": {"label": "Hard", "title": "Design Skiplist", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5963, "total_accepted": 11400.0, "total_submissions": 19100.0, "testcase_example": "'[\"Skiplist\",\"add\",\"add\",\"add\",\"search\",\"add\",\"search\",\"erase\",\"erase\",\"search\"]\\n' +\n  '[[],[1],[2],[3],[0],[4],[1],[0],[1],[1]]'", "body": "Design a Skiplist without using any built-in libraries.\nA skiplist is a data structure that takes O(log(n)) time to add, erase and search. Comparing with treap and red-black tree which has the same function and performance, the code length of Skiplist can be comparatively short and the idea behind Skiplists is just simple linked lists.\nFor example, we have a Skiplist containing [30,40,50,60,70,90] and we want to add 80 and 45 into it. The Skiplist works this way:\nArtyom Kalinin [CC BY-SA 3.0], via Wikimedia Commons\nYou can see there are many layers in the Skiplist. Each layer is a sorted linked list. With the help of the top layers, add, erase and search can be faster than O(n). It can be proven that the average time complexity for each operation is O(log(n)) and space complexity is O(n).\nSee more about Skiplist: https://en.wikipedia.org/wiki/Skip_list\nImplement the Skiplist class:\nSkiplist() Initializes the object of the skiplist.\nbool search(int target) Returns true if the integer target exists in the Skiplist or false otherwise.\nvoid add(int num) Inserts the value num into the SkipList.\nbool erase(int num) Removes the value num from the Skiplist and returns true. If num does not exist in the Skiplist, do nothing and return false. If there exist multiple num values, removing any one of them is fine.\nNote that duplicates may exist in the Skiplist, your code needs to handle this situation.", "examples": [{"full_text": "Example 1:\nInput\n[\"Skiplist\", \"add\", \"add\", \"add\", \"search\", \"add\", \"search\", \"erase\", \"erase\", \"search\"]\n[[], [1], [2], [3], [0], [4], [1], [0], [1], [1]]\nOutput\n[null, null, null, null, false, null, true, false, true, false]\nExplanation\nSkiplist skiplist = new Skiplist();\nskiplist.add(1);\nskiplist.add(2);\nskiplist.add(3);\nskiplist.search(0); // return False\nskiplist.add(4);\nskiplist.search(1); // return True\nskiplist.erase(0); // return False, 0 is not in skiplist.\nskiplist.erase(1); // return True\nskiplist.search(1); // return False, 1 has already been erased.", "input": "Input\n[\"Skiplist\", \"add\", \"add\", \"add\", \"search\", \"add\", \"search\", \"erase\", \"erase\", \"search\"]\n[[], [1], [2], [3], [0], [4], [1], [0], [1], [1]]", "output": "Output\n[null, null, null, null, false, null, true, false, true, false]", "explanation": "Explanation\nSkiplist skiplist = new Skiplist();\nskiplist.add(1);\nskiplist.add(2);\nskiplist.add(3);\nskiplist.search(0); // return False\nskiplist.add(4);\nskiplist.search(1); // return True\nskiplist.erase(0); // return False, 0 is not in skiplist.\nskiplist.erase(1); // return True\nskiplist.search(1); // return False, 1 has already been erased."}], "constraints": "Constraints:\n0 <= num, target <= 2 * 10^4\nAt most 5 * 10^4 calls will be made to search, add, and erase.", "notes": ""}, "1203": {"label": "Hard", "title": "Sort Items by Groups Respecting Dependencies", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4915, "total_accepted": 11300.0, "total_submissions": 23000.0, "testcase_example": "'8\\n2\\n[-1,-1,1,0,0,1,0,-1]\\n[[],[6],[5],[6],[3,6],[],[],[]]'", "body": "There are\nn\nitems each\nbelonging to zero or one of\nm\ngroups where group[i]\nis the group that the i-th item belongs to and it's equal to -1\nif the i-th item belongs to no group. The items and the groups are zero indexed. A group can have no item belonging to it.\nReturn a sorted list of the items such that:\nThe items that belong to the same group are next to each other in the sorted list.\nThere are some\nrelations\nbetween these items where\nbeforeItems[i]\nis a list containing all the items that should come before the\ni-th item in the sorted array (to the left of the\ni-th item).\nReturn any solution if there is more than one solution and return an empty list\nif there is no solution.", "examples": [{"full_text": "Example 1:\nInput: n = 8, m = 2, group = [-1,-1,1,0,0,1,0,-1], beforeItems = [[],[6],[5],[6],[3,6],[],[],[]]\nOutput: [6,3,4,1,5,2,0,7]", "input": "Input: n = 8, m = 2, group = [-1,-1,1,0,0,1,0,-1], beforeItems = [[],[6],[5],[6],[3,6],[],[],[]]", "output": "Output: [6,3,4,1,5,2,0,7]", "explanation": ""}, {"full_text": "Example 2:\nInput: n = 8, m = 2, group = [-1,-1,1,0,0,1,0,-1], beforeItems = [[],[6],[5],[6],[3],[],[4],[]]\nOutput: []\nExplanation:\nThis is the same as example 1 except that 4 needs to be before 6 in the sorted list.", "input": "Input: n = 8, m = 2, group = [-1,-1,1,0,0,1,0,-1], beforeItems = [[],[6],[5],[6],[3],[],[4],[]]", "output": "Output: []", "explanation": "Explanation:\nThis is the same as example 1 except that 4 needs to be before 6 in the sorted list."}], "constraints": "Constraints:\n1 <= m <= n <= 3 * 10^4\ngroup.length == beforeItems.length == n\n-1 <= group[i] <= m - 1\n0 <= beforeItems[i].length <= n - 1\n0 <= beforeItems[i][j] <= n - 1\ni != beforeItems[i][j]\nbeforeItems[i]\ndoes not contain\nduplicates elements.", "notes": ""}, "1192": {"label": "Hard", "title": "Critical Connections in a Network", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.52, "total_accepted": 141000.0, "total_submissions": 271100.0, "testcase_example": "'4\\n[[0,1],[1,2],[2,0],[1,3]]'", "body": "There are n servers numbered from 0 to n - 1 connected by undirected server-to-server connections forming a network where connections[i] = [ai, bi] represents a connection between servers ai and bi. Any server can reach other servers directly or indirectly through the network.\nA critical connection is a connection that, if removed, will make some servers unable to reach some other server.\nReturn all critical connections in the network in any order.", "examples": [{"full_text": "Example 1:\nInput: n = 4, connections = [[0,1],[1,2],[2,0],[1,3]]\nOutput: [[1,3]]\nExplanation: [[3,1]] is also accepted.", "input": "Input: n = 4, connections = [[0,1],[1,2],[2,0],[1,3]]", "output": "Output: [[1,3]]", "explanation": "Explanation: [[3,1]] is also accepted."}, {"full_text": "Example 2:\nInput: n = 2, connections = [[0,1]]\nOutput: [[0,1]]", "input": "Input: n = 2, connections = [[0,1]]", "output": "Output: [[0,1]]", "explanation": ""}], "constraints": "Constraints:\n2 <= n <= 10^5\nn - 1 <= connections.length <= 10^5\n0 <= ai, bi <= n - 1\nai != bi\nThere are no repeated connections.", "notes": ""}, "1187": {"label": "Hard", "title": "Make Array Strictly Increasing", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.44549999999999995, "total_accepted": 11000.0, "total_submissions": 24600.0, "testcase_example": "'[1,5,3,6,7]\\n[1,3,2,4]'", "body": "Given two integer arrays\narr1 and arr2, return the minimum number of operations (possibly zero) needed\nto make arr1 strictly increasing.\nIn one operation, you can choose two indices\n0 <=\ni < arr1.length\nand\n0 <= j < arr2.length\nand do the assignment\narr1[i] = arr2[j].\nIf there is no way to make\narr1\nstrictly increasing,\nreturn\n-1.", "examples": [{"full_text": "Example 1:\nInput: arr1 = [1,5,3,6,7], arr2 = [1,3,2,4]\nOutput: 1\nExplanation: Replace 5 with 2, then arr1 = [1, 2, 3, 6, 7].", "input": "Input: arr1 = [1,5,3,6,7], arr2 = [1,3,2,4]", "output": "Output: 1", "explanation": "Explanation: Replace 5 with 2, then arr1 = [1, 2, 3, 6, 7]."}, {"full_text": "Example 2:\nInput: arr1 = [1,5,3,6,7], arr2 = [4,3,1]\nOutput: 2\nExplanation: Replace 5 with 3 and then replace 3 with 4. arr1 = [1, 3, 4, 6, 7].", "input": "Input: arr1 = [1,5,3,6,7], arr2 = [4,3,1]", "output": "Output: 2", "explanation": "Explanation: Replace 5 with 3 and then replace 3 with 4. arr1 = [1, 3, 4, 6, 7]."}, {"full_text": "Example 3:\nInput: arr1 = [1,5,3,6,7], arr2 = [1,6,3,3]\nOutput: -1\nExplanation: You can't make arr1 strictly increasing.", "input": "Input: arr1 = [1,5,3,6,7], arr2 = [1,6,3,3]", "output": "Output: -1", "explanation": "Explanation: You can't make arr1 strictly increasing."}], "constraints": "Constraints:\n1 <= arr1.length, arr2.length <= 2000\n0 <= arr1[i], arr2[i] <= 10^9", "notes": ""}, "1178": {"label": "Hard", "title": "Number of Valid Words for Each Puzzle", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.469, "total_accepted": 26100.0, "total_submissions": 55600.0, "testcase_example": "'[\"aaaa\",\"asas\",\"able\",\"ability\",\"actt\",\"actor\",\"access\"]\\n' +\n  '[\"aboveyz\",\"abrodyz\",\"abslute\",\"absoryz\",\"actresz\",\"gaswxyz\"]'", "body": "With respect to a given puzzle string, a word is valid if both the following conditions are satisfied:\nword contains the first letter of puzzle.\nFor each letter in word, that letter is in puzzle.\n\nFor example, if the puzzle is \"abcdefg\", then valid words are \"faced\", \"cabbage\", and \"baggage\", while\ninvalid words are \"beefed\" (does not include 'a') and \"based\" (includes 's' which is not in the puzzle).\n\n\nReturn an array answer, where answer[i] is the number of words in the given word list words that is valid with respect to the puzzle puzzles[i].", "examples": [{"full_text": "Example 1:\nInput: words = [\"aaaa\",\"asas\",\"able\",\"ability\",\"actt\",\"actor\",\"access\"], puzzles = [\"aboveyz\",\"abrodyz\",\"abslute\",\"absoryz\",\"actresz\",\"gaswxyz\"]\nOutput: [1,1,3,2,4,0]\nExplanation:\n1 valid word for \"aboveyz\" : \"aaaa\"\n1 valid word for \"abrodyz\" : \"aaaa\"\n3 valid words for \"abslute\" : \"aaaa\", \"asas\", \"able\"\n2 valid words for \"absoryz\" : \"aaaa\", \"asas\"\n4 valid words for \"actresz\" : \"aaaa\", \"asas\", \"actt\", \"access\"\nThere are no valid words for \"gaswxyz\" cause none of the words in the list contains letter 'g'.", "input": "Input: words = [\"aaaa\",\"asas\",\"able\",\"ability\",\"actt\",\"actor\",\"access\"], puzzles = [\"aboveyz\",\"abrodyz\",\"abslute\",\"absoryz\",\"actresz\",\"gaswxyz\"]", "output": "Output: [1,1,3,2,4,0]", "explanation": "Explanation:\n1 valid word for \"aboveyz\" : \"aaaa\"\n1 valid word for \"abrodyz\" : \"aaaa\"\n3 valid words for \"abslute\" : \"aaaa\", \"asas\", \"able\"\n2 valid words for \"absoryz\" : \"aaaa\", \"asas\"\n4 valid words for \"actresz\" : \"aaaa\", \"asas\", \"actt\", \"access\"\nThere are no valid words for \"gaswxyz\" cause none of the words in the list contains letter 'g'."}, {"full_text": "Example 2:\nInput: words = [\"apple\",\"pleas\",\"please\"], puzzles = [\"aelwxyz\",\"aelpxyz\",\"aelpsxy\",\"saelpxy\",\"xaelpsy\"]\nOutput: [0,1,3,2,0]", "input": "Input: words = [\"apple\",\"pleas\",\"please\"], puzzles = [\"aelwxyz\",\"aelpxyz\",\"aelpsxy\",\"saelpxy\",\"xaelpsy\"]", "output": "Output: [0,1,3,2,0]", "explanation": ""}], "constraints": "Constraints:\n1 <= words.length <= 10^5\n4 <= words[i].length <= 50\n1 <= puzzles.length <= 10^4\npuzzles[i].length == 7\nwords[i] and puzzles[i] consist of lowercase English letters.\nEach puzzles[i] does not contain repeated characters.", "notes": ""}, "1172": {"label": "Hard", "title": "Dinner Plate Stacks", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.34869999999999995, "total_accepted": 13100.0, "total_submissions": 37700.0, "testcase_example": "'[\"DinnerPlates\",\"push\",\"push\",\"push\",\"push\",\"push\",\"popAtStack\",\"push\",\"push\",\"popAtStack\",\"popAtStack\",\"pop\",\"pop\",\"pop\",\"pop\",\"pop\"]\\n' +\n  '[[2],[1],[2],[3],[4],[5],[0],[20],[21],[0],[2],[],[],[],[],[]]'", "body": "You have an infinite number of stacks arranged in a row and numbered (left to right) from 0, each of the stacks has the same maximum capacity.\nImplement the DinnerPlates class:\nDinnerPlates(int capacity) Initializes the object with the maximum capacity of the stacks capacity.\nvoid push(int val) Pushes the given integer val into the leftmost stack with a size less than capacity.\nint pop() Returns the value at the top of the rightmost non-empty stack and removes it from that stack, and returns -1 if all the stacks are empty.\nint popAtStack(int index) Returns the value at the top of the stack with the given index index and removes it from that stack or returns -1 if the stack with that given index is empty.", "examples": [{"full_text": "Example 1:\nInput\n[\"DinnerPlates\", \"push\", \"push\", \"push\", \"push\", \"push\", \"popAtStack\", \"push\", \"push\", \"popAtStack\", \"popAtStack\", \"pop\", \"pop\", \"pop\", \"pop\", \"pop\"]\n[[2], [1], [2], [3], [4], [5], [0], [20], [21], [0], [2], [], [], [], [], []]\nOutput\n[null, null, null, null, null, null, 2, null, null, 20, 21, 5, 4, 3, 1, -1]\nExplanation:\nDinnerPlates D = DinnerPlates(2); // Initialize with capacity = 2\nD.push(1);\nD.push(2);\nD.push(3);\nD.push(4);\nD.push(5); // The stacks are now: 2 4\n1 3 5\n\ufe48 \ufe48 \ufe48\nD.popAtStack(0); // Returns 2. The stacks are now: 4\n1 3 5\n\ufe48 \ufe48 \ufe48\nD.push(20); // The stacks are now: 20 4\n1 3 5\n\ufe48 \ufe48 \ufe48\nD.push(21); // The stacks are now: 20 4 21\n1 3 5\n\ufe48 \ufe48 \ufe48\nD.popAtStack(0); // Returns 20. The stacks are now: 4 21\n1 3 5\n\ufe48 \ufe48 \ufe48\nD.popAtStack(2); // Returns 21. The stacks are now: 4\n1 3 5\n\ufe48 \ufe48 \ufe48\nD.pop() // Returns 5. The stacks are now: 4\n1 3\n\ufe48 \ufe48\nD.pop() // Returns 4. The stacks are now: 1 3\n\ufe48 \ufe48\nD.pop() // Returns 3. The stacks are now: 1\n\ufe48\nD.pop() // Returns 1. There are no stacks.\nD.pop() // Returns -1. There are still no stacks.", "input": "Input\n[\"DinnerPlates\", \"push\", \"push\", \"push\", \"push\", \"push\", \"popAtStack\", \"push\", \"push\", \"popAtStack\", \"popAtStack\", \"pop\", \"pop\", \"pop\", \"pop\", \"pop\"]\n[[2], [1], [2], [3], [4], [5], [0], [20], [21], [0], [2], [], [], [], [], []]", "output": "Output\n[null, null, null, null, null, null, 2, null, null, 20, 21, 5, 4, 3, 1, -1]", "explanation": "Explanation:\nDinnerPlates D = DinnerPlates(2); // Initialize with capacity = 2\nD.push(1);\nD.push(2);\nD.push(3);\nD.push(4);\nD.push(5); // The stacks are now: 2 4\n1 3 5\n\ufe48 \ufe48 \ufe48\nD.popAtStack(0); // Returns 2. The stacks are now: 4\n1 3 5\n\ufe48 \ufe48 \ufe48\nD.push(20); // The stacks are now: 20 4\n1 3 5\n\ufe48 \ufe48 \ufe48\nD.push(21); // The stacks are now: 20 4 21\n1 3 5\n\ufe48 \ufe48 \ufe48\nD.popAtStack(0); // Returns 20. The stacks are now: 4 21\n1 3 5\n\ufe48 \ufe48 \ufe48\nD.popAtStack(2); // Returns 21. The stacks are now: 4\n1 3 5\n\ufe48 \ufe48 \ufe48\nD.pop() // Returns 5. The stacks are now: 4\n1 3\n\ufe48 \ufe48\nD.pop() // Returns 4. The stacks are now: 1 3\n\ufe48 \ufe48\nD.pop() // Returns 3. The stacks are now: 1\n\ufe48\nD.pop() // Returns 1. There are no stacks.\nD.pop() // Returns -1. There are still no stacks."}], "constraints": "Constraints:\n1 <= capacity <= 2 * 10^4\n1 <= val <= 2 * 10^4\n0 <= index <= 10^5\nAt most 2 * 10^5 calls will be made to push, pop, and popAtStack.", "notes": ""}, "1163": {"label": "Hard", "title": "Last Substring in Lexicographical Order", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3578, "total_accepted": 28900.0, "total_submissions": 80900.0, "testcase_example": "'\"abab\"'", "body": "Given a string s, return the last substring of s in lexicographical order.", "examples": [{"full_text": "Example 1:\nInput: s = \"abab\"\nOutput: \"bab\"\nExplanation: The substrings are [\"a\", \"ab\", \"aba\", \"abab\", \"b\", \"ba\", \"bab\"]. The lexicographically maximum substring is \"bab\".", "input": "Input: s = \"abab\"", "output": "Output: \"bab\"", "explanation": "Explanation: The substrings are [\"a\", \"ab\", \"aba\", \"abab\", \"b\", \"ba\", \"bab\"]. The lexicographically maximum substring is \"bab\"."}, {"full_text": "Example 2:\nInput: s = \"leetcode\"\nOutput: \"tcode\"", "input": "Input: s = \"leetcode\"", "output": "Output: \"tcode\"", "explanation": ""}], "constraints": "Constraints:\n1 <= s.length <= 4 * 10^5\ns contains only lowercase English letters.", "notes": ""}, "1157": {"label": "Hard", "title": "Online Majority Element In Subarray", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4199, "total_accepted": 12200.0, "total_submissions": 29100.0, "testcase_example": "'[\"MajorityChecker\",\"query\",\"query\",\"query\"]\\n' +\n  '[[[1,1,2,2,1,1]],[0,5,4],[0,3,3],[2,3,2]]'", "body": "Design a data structure that efficiently finds the majority element of a given subarray.\nThe majority element of a subarray is an element that occurs threshold times or more in the subarray.\nImplementing the MajorityChecker class:\nMajorityChecker(int[] arr) Initializes the instance of the class with the given array arr.\nint query(int left, int right, int threshold) returns the element in the subarray arr[left...right] that occurs at least threshold times, or -1 if no such element exists.", "examples": [{"full_text": "Example 1:\nInput\n[\"MajorityChecker\", \"query\", \"query\", \"query\"]\n[[[1, 1, 2, 2, 1, 1]], [0, 5, 4], [0, 3, 3], [2, 3, 2]]\nOutput\n[null, 1, -1, 2]\nExplanation\nMajorityChecker majorityChecker = new MajorityChecker([1, 1, 2, 2, 1, 1]);\nmajorityChecker.query(0, 5, 4); // return 1\nmajorityChecker.query(0, 3, 3); // return -1\nmajorityChecker.query(2, 3, 2); // return 2", "input": "Input\n[\"MajorityChecker\", \"query\", \"query\", \"query\"]\n[[[1, 1, 2, 2, 1, 1]], [0, 5, 4], [0, 3, 3], [2, 3, 2]]", "output": "Output\n[null, 1, -1, 2]", "explanation": "Explanation\nMajorityChecker majorityChecker = new MajorityChecker([1, 1, 2, 2, 1, 1]);\nmajorityChecker.query(0, 5, 4); // return 1\nmajorityChecker.query(0, 3, 3); // return -1\nmajorityChecker.query(2, 3, 2); // return 2"}], "constraints": "Constraints:\n1 <= arr.length <= 2 * 10^4\n1 <= arr[i] <= 2 * 10^4\n0 <= left <= right < arr.length\nthreshold <= right - left + 1\n2 * threshold > right - left + 1\nAt most 10^4 calls will be made to query.", "notes": ""}, "1147": {"label": "Hard", "title": "Longest Chunked Palindrome Decomposition", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6038, "total_accepted": 15700.0, "total_submissions": 26100.0, "testcase_example": "'\"ghiabcdefhelloadamhelloabcdefghi\"'", "body": "You are given a string text. You should split it to k substrings (subtext1, subtext2, ..., subtextk) such that:\nsubtexti is a non-empty string.\nThe concatenation of all the substrings is equal to text (i.e., subtext1 + subtext2 + ... + subtextk == text).\nsubtexti == subtextk - i + 1 for all valid values of i (i.e., 1 <= i <= k).\nReturn the largest possible value of k.", "examples": [{"full_text": "Example 1:\nInput: text = \"ghiabcdefhelloadamhelloabcdefghi\"\nOutput: 7\nExplanation: We can split the string on \"(ghi)(abcdef)(hello)(adam)(hello)(abcdef)(ghi)\".", "input": "Input: text = \"ghiabcdefhelloadamhelloabcdefghi\"", "output": "Output: 7", "explanation": "Explanation: We can split the string on \"(ghi)(abcdef)(hello)(adam)(hello)(abcdef)(ghi)\"."}, {"full_text": "Example 2:\nInput: text = \"merchant\"\nOutput: 1\nExplanation: We can split the string on \"(merchant)\".", "input": "Input: text = \"merchant\"", "output": "Output: 1", "explanation": "Explanation: We can split the string on \"(merchant)\"."}, {"full_text": "Example 3:\nInput: text = \"antaprezatepzapreanta\"\nOutput: 11\nExplanation: We can split the string on \"(a)(nt)(a)(pre)(za)(tpe)(za)(pre)(a)(nt)(a)\".", "input": "Input: text = \"antaprezatepzapreanta\"", "output": "Output: 11", "explanation": "Explanation: We can split the string on \"(a)(nt)(a)(pre)(za)(tpe)(za)(pre)(a)(nt)(a)\"."}], "constraints": "Constraints:\n1 <= text.length <= 1000\ntext consists only of lowercase English characters.", "notes": ""}, "1125": {"label": "Hard", "title": "Smallest Sufficient Team", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.47909999999999997, "total_accepted": 15400.0, "total_submissions": 32100.0, "testcase_example": "'[\"java\",\"nodejs\",\"reactjs\"]\\n[[\"java\"],[\"nodejs\"],[\"nodejs\",\"reactjs\"]]'", "body": "In a project, you have a list of required skills req_skills, and a list of people. The i^th person people[i] contains a list of skills that the person has.\nConsider a sufficient team: a set of people such that for every required skill in req_skills, there is at least one person in the team who has that skill. We can represent these teams by the index of each person.\nFor example, team = [0, 1, 3] represents the people with skills people[0], people[1], and people[3].\nReturn any sufficient team of the smallest possible size, represented by the index of each person. You may return the answer in any order.\nIt is guaranteed an answer exists.", "examples": [{"full_text": "Example 1:\nInput: req_skills = [\"java\",\"nodejs\",\"reactjs\"], people = [[\"java\"],[\"nodejs\"],[\"nodejs\",\"reactjs\"]]\nOutput: [0,2]", "input": "Input: req_skills = [\"java\",\"nodejs\",\"reactjs\"], people = [[\"java\"],[\"nodejs\"],[\"nodejs\",\"reactjs\"]]", "output": "Output: [0,2]", "explanation": ""}, {"full_text": "Example 2:\nInput: req_skills = [\"algorithms\",\"math\",\"java\",\"reactjs\",\"csharp\",\"aws\"], people = [[\"algorithms\",\"math\",\"java\"],[\"algorithms\",\"math\",\"reactjs\"],[\"java\",\"csharp\",\"aws\"],[\"reactjs\",\"csharp\"],[\"csharp\",\"math\"],[\"aws\",\"java\"]]\nOutput: [1,2]", "input": "Input: req_skills = [\"algorithms\",\"math\",\"java\",\"reactjs\",\"csharp\",\"aws\"], people = [[\"algorithms\",\"math\",\"java\"],[\"algorithms\",\"math\",\"reactjs\"],[\"java\",\"csharp\",\"aws\"],[\"reactjs\",\"csharp\"],[\"csharp\",\"math\"],[\"aws\",\"java\"]]", "output": "Output: [1,2]", "explanation": ""}], "constraints": "Constraints:\n1 <= req_skills.length <= 16\n1 <= req_skills[i].length <= 16\nreq_skills[i] consists of lowercase English letters.\nAll the strings of req_skills are unique.\n1 <= people.length <= 60\n0 <= people[i].length <= 16\n1 <= people[i][j].length <= 16\npeople[i][j] consists of lowercase English letters.\nAll the strings of people[i] are unique.\nEvery skill in people[i] is a skill in req_skills.\nIt is guaranteed a sufficient team exists.", "notes": ""}, "1106": {"label": "Hard", "title": "Parsing A Boolean Expression", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5934, "total_accepted": 17500.0, "total_submissions": 29500.0, "testcase_example": "'\"!(f)\"'", "body": "Return the result of evaluating a given boolean expression, represented as a string.\nAn expression can either be:\n\"t\", evaluating to True;\n\"f\", evaluating to False;\n\"!(expr)\", evaluating to the logical NOT of the inner expression expr;\n\"&(expr1,expr2,...)\", evaluating to the logical AND of 2 or more inner expressions expr1, expr2, ...;\n\"|(expr1,expr2,...)\", evaluating to the logical OR of 2 or more inner expressions expr1, expr2, ...", "examples": [{"full_text": "Example 1:\nInput: expression = \"!(f)\"\nOutput: true", "input": "Input: expression = \"!(f)\"", "output": "Output: true", "explanation": ""}, {"full_text": "Example 2:\nInput: expression = \"|(f,t)\"\nOutput: true", "input": "Input: expression = \"|(f,t)\"", "output": "Output: true", "explanation": ""}, {"full_text": "Example 3:\nInput: expression = \"&(t,f)\"\nOutput: false", "input": "Input: expression = \"&(t,f)\"", "output": "Output: false", "explanation": ""}], "constraints": "Constraints:\n1 <= expression.length <= 2 * 10^4\nexpression[i] consists of characters in {'(', ')', '&', '|', '!', 't', 'f', ','}.\nexpression is a valid expression representing a boolean, as given in the description.", "notes": ""}, "1096": {"label": "Hard", "title": "Brace Expansion II", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6236999999999999, "total_accepted": 18000.0, "total_submissions": 28900.0, "testcase_example": "'\"{a,b}{c,{d,e}}\"'", "body": "Under the grammar given below, strings can represent a set of lowercase words. Let\nR(expr)\ndenote the set of words the expression represents.\nThe grammar can best be understood through simple examples:\nSingle letters represent a singleton set containing that word.\n\nR(\"a\") = {\"a\"}\nR(\"w\") = {\"w\"}\n\n\nWhen we take a comma-delimited list of two or more expressions, we take the union of possibilities.\n\nR(\"{a,b,c}\") = {\"a\",\"b\",\"c\"}\nR(\"{{a,b},{b,c}}\") = {\"a\",\"b\",\"c\"} (notice the final set only contains each word at most once)\n\n\nWhen we concatenate two expressions, we take the set of possible concatenations between two words where the first word comes from the first expression and the second word comes from the second expression.\n\nR(\"{a,b}{c,d}\") = {\"ac\",\"ad\",\"bc\",\"bd\"}\nR(\"a{b,c}{d,e}f{g,h}\") = {\"abdfg\", \"abdfh\", \"abefg\", \"abefh\", \"acdfg\", \"acdfh\", \"acefg\", \"acefh\"}\n\n\nFormally, the three rules for our grammar:\nFor every lowercase letter x, we have R(x) = {x}.\nFor expressions e1, e2, ... , ek with k >= 2, we have R({e1, e2, ...}) = R(e1) \u222a R(e2) \u222a ...\nFor expressions e1 and e2, we have R(e1 + e2) = {a + b for (a, b) in R(e1) \u00d7 R(e2)}, where + denotes concatenation, and \u00d7 denotes the cartesian product.\nGiven an expression representing a set of words under the given grammar, return the sorted list of words that the expression represents.", "examples": [{"full_text": "Example 1:\nInput: expression = \"{a,b}{c,{d,e}}\"\nOutput: [\"ac\",\"ad\",\"ae\",\"bc\",\"bd\",\"be\"]", "input": "Input: expression = \"{a,b}{c,{d,e}}\"", "output": "Output: [\"ac\",\"ad\",\"ae\",\"bc\",\"bd\",\"be\"]", "explanation": ""}, {"full_text": "Example 2:\nInput: expression = \"{{a,z},a{b,c},{ab,z}}\"\nOutput: [\"a\",\"ab\",\"ac\",\"z\"]\nExplanation: Each distinct word is written only once in the final answer.", "input": "Input: expression = \"{{a,z},a{b,c},{ab,z}}\"", "output": "Output: [\"a\",\"ab\",\"ac\",\"z\"]", "explanation": "Explanation: Each distinct word is written only once in the final answer."}], "constraints": "Constraints:\n1 <= expression.length <= 60\nexpression[i] consists of '{', '}', ','or lowercase English letters.\nThe given\nexpression\nrepresents a set of words based on the grammar given in the description.", "notes": ""}, "1095": {"label": "Hard", "title": "Find in Mountain Array", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3594, "total_accepted": 39600.0, "total_submissions": 110200.0, "testcase_example": "'[1,2,3,4,5,3,1]\\n3'", "body": "(This problem is an interactive problem.)\nYou may recall that an array arr is a mountain array if and only if:\narr.length >= 3\nThere exists some i with 0 < i < arr.length - 1 such that:\n\narr[0] < arr[1] < ... < arr[i - 1] < arr[i]\narr[i] > arr[i + 1] > ... > arr[arr.length - 1]\n\n\nGiven a mountain array mountainArr, return the minimum index such that mountainArr.get(index) == target. If such an index does not exist, return -1.\nYou cannot access the mountain array directly. You may only access the array using a MountainArray interface:\nMountainArray.get(k) returns the element of the array at index k (0-indexed).\nMountainArray.length() returns the length of the array.\nSubmissions making more than 100 calls to MountainArray.get will be judged Wrong Answer. Also, any solutions that attempt to circumvent the judge will result in disqualification.", "examples": [{"full_text": "Example 1:\nInput: array = [1,2,3,4,5,3,1], target = 3\nOutput: 2\nExplanation: 3 exists in the array, at index=2 and index=5. Return the minimum index, which is 2.", "input": "Input: array = [1,2,3,4,5,3,1], target = 3", "output": "Output: 2", "explanation": "Explanation: 3 exists in the array, at index=2 and index=5. Return the minimum index, which is 2."}, {"full_text": "Example 2:\nInput: array = [0,1,2,4,2,1], target = 3\nOutput: -1\nExplanation: 3 does not exist in the array, so we return -1.", "input": "Input: array = [0,1,2,4,2,1], target = 3", "output": "Output: -1", "explanation": "Explanation: 3 does not exist in the array, so we return -1."}], "constraints": "Constraints:\n3 <= mountain_arr.length() <= 10^4\n0 <= target <= 10^9\n0 <= mountain_arr.get(index) <= 10^9", "notes": ""}, "1092": {"label": "Hard", "title": "Shortest Common Supersequence", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.556, "total_accepted": 39900.0, "total_submissions": 71700.0, "testcase_example": "'\"abac\"\\n\"cab\"'", "body": "Given two strings str1 and str2, return the shortest string that has both str1 and str2 as subsequences. If there are multiple valid strings, return any of them.\nA string s is a subsequence of string t if deleting some number of characters from t (possibly 0) results in the string s.", "examples": [{"full_text": "Example 1:\nInput: str1 = \"abac\", str2 = \"cab\"\nOutput: \"cabac\"\nExplanation:\nstr1 = \"abac\" is a subsequence of \"cabac\" because we can delete the first \"c\".\nstr2 = \"cab\" is a subsequence of \"cabac\" because we can delete the last \"ac\".\nThe answer provided is the shortest such string that satisfies these properties.", "input": "Input: str1 = \"abac\", str2 = \"cab\"", "output": "Output: \"cabac\"", "explanation": "Explanation:\nstr1 = \"abac\" is a subsequence of \"cabac\" because we can delete the first \"c\".\nstr2 = \"cab\" is a subsequence of \"cabac\" because we can delete the last \"ac\".\nThe answer provided is the shortest such string that satisfies these properties."}, {"full_text": "Example 2:\nInput: str1 = \"aaaaaaaa\", str2 = \"aaaaaaaa\"\nOutput: \"aaaaaaaa\"", "input": "Input: str1 = \"aaaaaaaa\", str2 = \"aaaaaaaa\"", "output": "Output: \"aaaaaaaa\"", "explanation": ""}], "constraints": "Constraints:\n1 <= str1.length, str2.length <= 1000\nstr1 and str2 consist of lowercase English letters.", "notes": ""}, "1074": {"label": "Hard", "title": "Number of Submatrices That Sum to Target", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6625, "total_accepted": 46600.0, "total_submissions": 70400.0, "testcase_example": "'[[0,1,0],[1,1,1],[0,1,0]]\\n0'", "body": "Given a matrix\nand a target, return the number of non-empty submatrices that sum to target.\nA submatrix x1, y1, x2, y2 is the set of all cells matrix[x][y] with x1 <= x <= x2 and y1 <= y <= y2.\nTwo submatrices (x1, y1, x2, y2) and (x1', y1', x2', y2') are different if they have some coordinate\nthat is different: for example, if x1 != x1'.", "examples": [{"full_text": "Example 1:\nInput: matrix = [[0,1,0],[1,1,1],[0,1,0]], target = 0\nOutput: 4\nExplanation: The four 1x1 submatrices that only contain 0.", "input": "Input: matrix = [[0,1,0],[1,1,1],[0,1,0]], target = 0", "output": "Output: 4", "explanation": "Explanation: The four 1x1 submatrices that only contain 0."}, {"full_text": "Example 2:\nInput: matrix = [[1,-1],[-1,1]], target = 0\nOutput: 5\nExplanation: The two 1x2 submatrices, plus the two 2x1 submatrices, plus the 2x2 submatrix.", "input": "Input: matrix = [[1,-1],[-1,1]], target = 0", "output": "Output: 5", "explanation": "Explanation: The two 1x2 submatrices, plus the two 2x1 submatrices, plus the 2x2 submatrix."}, {"full_text": "Example 3:\nInput: matrix = [[904]], target = 0\nOutput: 0", "input": "Input: matrix = [[904]], target = 0", "output": "Output: 0", "explanation": ""}], "constraints": "Constraints:\n1 <= matrix.length <= 100\n1 <= matrix[0].length <= 100\n-1000 <= matrix[i] <= 1000\n-10^8 <= target <= 10^8", "notes": ""}, "1044": {"label": "Hard", "title": "Longest Duplicate Substring", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3131, "total_accepted": 50600.0, "total_submissions": 161600.0, "testcase_example": "'\"banana\"'", "body": "Given a string s, consider all duplicated substrings: (contiguous) substrings of s that occur 2 or more times.\nThe occurrences\nmay overlap.\nReturn any duplicated\nsubstring that has the longest possible length.\nIf s does not have a duplicated substring, the answer is \"\".", "examples": [{"full_text": "Example 1:\nInput: s = \"banana\"\nOutput: \"ana\"", "input": "Input: s = \"banana\"", "output": "Output: \"ana\"", "explanation": ""}, {"full_text": "Example 2:\nInput: s = \"abcd\"\nOutput: \"\"", "input": "Input: s = \"abcd\"", "output": "Output: \"\"", "explanation": ""}], "constraints": "Constraints:\n2 <= s.length <= 3 * 10^4\ns consists of lowercase English letters.", "notes": ""}, "1036": {"label": "Hard", "title": "Escape a Large Maze", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3431, "total_accepted": 15000.0, "total_submissions": 43900.0, "testcase_example": "'[[0,1],[1,0]]\\n[0,0]\\n[0,2]'", "body": "There is a 1 million by 1 million grid on an XY-plane, and the coordinates of each grid square are (x, y).\nWe start at the source = [sx, sy] square and want to reach the target = [tx, ty] square. There is also an array of blocked squares, where each blocked[i] = [xi, yi] represents a blocked square with coordinates (xi, yi).\nEach move, we can walk one square north, east, south, or west if the square is not in the array of blocked squares. We are also not allowed to walk outside of the grid.\nReturn true if and only if it is possible to reach the target square from the source square through a sequence of valid moves.", "examples": [{"full_text": "Example 1:\nInput: blocked = [[0,1],[1,0]], source = [0,0], target = [0,2]\nOutput: false\nExplanation: The target square is inaccessible starting from the source square because we cannot move.\nWe cannot move north or east because those squares are blocked.\nWe cannot move south or west because we cannot go outside of the grid.", "input": "Input: blocked = [[0,1],[1,0]], source = [0,0], target = [0,2]", "output": "Output: false", "explanation": "Explanation: The target square is inaccessible starting from the source square because we cannot move.\nWe cannot move north or east because those squares are blocked.\nWe cannot move south or west because we cannot go outside of the grid."}, {"full_text": "Example 2:\nInput: blocked = [], source = [0,0], target = [999999,999999]\nOutput: true\nExplanation: Because there are no blocked cells, it is possible to reach the target square.", "input": "Input: blocked = [], source = [0,0], target = [999999,999999]", "output": "Output: true", "explanation": "Explanation: Because there are no blocked cells, it is possible to reach the target square."}], "constraints": "Constraints:\n0 <= blocked.length <= 200\nblocked[i].length == 2\n0 <= xi, yi < 10^6\nsource.length == target.length == 2\n0 <= sx, sy, tx, ty < 10^6\nsource != target\nIt is guaranteed that source and target are not blocked.", "notes": ""}, "1032": {"label": "Hard", "title": "Stream of Characters", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5132, "total_accepted": 71800.0, "total_submissions": 140000.0, "testcase_example": "'[\"StreamChecker\",\"query\",\"query\",\"query\",\"query\",\"query\",\"query\",\"query\",\"query\",\"query\",\"query\",\"query\",\"query\"]\\n' +\n  '[[[\"cd\",\"f\",\"kl\"]],[\"a\"],[\"b\"],[\"c\"],[\"d\"],[\"e\"],[\"f\"],[\"g\"],[\"h\"],[\"i\"],[\"j\"],[\"k\"],[\"l\"]]'", "body": "Design an algorithm that accepts a stream of characters and checks if a suffix of these characters is a string of a given array of strings words.\nFor example, if words = [\"abc\", \"xyz\"]\nand the stream added the four characters (one by one) 'a', 'x', 'y', and 'z', your algorithm should detect that the suffix \"xyz\" of the characters \"axyz\" matches \"xyz\" from words.\nImplement the StreamChecker class:\nStreamChecker(String[] words) Initializes the object with the strings array words.\nboolean query(char letter) Accepts a new character from the stream and returns true if any non-empty suffix from the stream forms a word that is in words.", "examples": [{"full_text": "Example 1:\nInput\n[\"StreamChecker\", \"query\", \"query\", \"query\", \"query\", \"query\", \"query\", \"query\", \"query\", \"query\", \"query\", \"query\", \"query\"]\n[[[\"cd\", \"f\", \"kl\"]], [\"a\"], [\"b\"], [\"c\"], [\"d\"], [\"e\"], [\"f\"], [\"g\"], [\"h\"], [\"i\"], [\"j\"], [\"k\"], [\"l\"]]\nOutput\n[null, false, false, false, true, false, true, false, false, false, false, false, true]\nExplanation\nStreamChecker streamChecker = new StreamChecker([\"cd\", \"f\", \"kl\"]);\nstreamChecker.query(\"a\"); // return False\nstreamChecker.query(\"b\"); // return False\nstreamChecker.query(\"c\"); // return False\nstreamChecker.query(\"d\"); // return True, because 'cd' is in the wordlist\nstreamChecker.query(\"e\"); // return False\nstreamChecker.query(\"f\"); // return True, because 'f' is in the wordlist\nstreamChecker.query(\"g\"); // return False\nstreamChecker.query(\"h\"); // return False\nstreamChecker.query(\"i\"); // return False\nstreamChecker.query(\"j\"); // return False\nstreamChecker.query(\"k\"); // return False\nstreamChecker.query(\"l\"); // return True, because 'kl' is in the wordlist", "input": "Input\n[\"StreamChecker\", \"query\", \"query\", \"query\", \"query\", \"query\", \"query\", \"query\", \"query\", \"query\", \"query\", \"query\", \"query\"]\n[[[\"cd\", \"f\", \"kl\"]], [\"a\"], [\"b\"], [\"c\"], [\"d\"], [\"e\"], [\"f\"], [\"g\"], [\"h\"], [\"i\"], [\"j\"], [\"k\"], [\"l\"]]", "output": "Output\n[null, false, false, false, true, false, true, false, false, false, false, false, true]", "explanation": "Explanation\nStreamChecker streamChecker = new StreamChecker([\"cd\", \"f\", \"kl\"]);\nstreamChecker.query(\"a\"); // return False\nstreamChecker.query(\"b\"); // return False\nstreamChecker.query(\"c\"); // return False\nstreamChecker.query(\"d\"); // return True, because 'cd' is in the wordlist\nstreamChecker.query(\"e\"); // return False\nstreamChecker.query(\"f\"); // return True, because 'f' is in the wordlist\nstreamChecker.query(\"g\"); // return False\nstreamChecker.query(\"h\"); // return False\nstreamChecker.query(\"i\"); // return False\nstreamChecker.query(\"j\"); // return False\nstreamChecker.query(\"k\"); // return False\nstreamChecker.query(\"l\"); // return True, because 'kl' is in the wordlist"}], "constraints": "Constraints:\n1 <= words.length <= 2000\n1 <= words[i].length <= 2000\nwords[i] consists of lowercase English letters.\nletter is a lowercase English letter.\nAt most 4 * 10^4 calls will be made to query.", "notes": ""}, "1028": {"label": "Hard", "title": "Recover a Tree From Preorder Traversal", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.7217, "total_accepted": 33100.0, "total_submissions": 45800.0, "testcase_example": "'\"1-2--3--4-5--6--7\"'", "body": "We run a\npreorder\ndepth-first search (DFS) on the root of a binary tree.\nAt each node in this traversal, we output D dashes (where D is the depth of this node), then we output the value of this node.\nIf the depth of a node is D, the depth of its immediate child is D + 1.\nThe depth of the root node is 0.\nIf a node has only one child, that child is guaranteed to be the left child.\nGiven the output traversal of this traversal, recover the tree and return its root.", "examples": [{"full_text": "Example 1:\nInput: traversal = \"1-2--3--4-5--6--7\"\nOutput: [1,2,5,3,4,6,7]", "input": "Input: traversal = \"1-2--3--4-5--6--7\"", "output": "Output: [1,2,5,3,4,6,7]", "explanation": ""}, {"full_text": "Example 2:\nInput: traversal = \"1-2--3---4-5--6---7\"\nOutput: [1,2,5,3,null,6,null,4,null,7]", "input": "Input: traversal = \"1-2--3---4-5--6---7\"", "output": "Output: [1,2,5,3,null,6,null,4,null,7]", "explanation": ""}, {"full_text": "Example 3:\nInput: traversal = \"1-401--349---90--88\"\nOutput: [1,401,null,349,88,90]", "input": "Input: traversal = \"1-401--349---90--88\"", "output": "Output: [1,401,null,349,88,90]", "explanation": ""}], "constraints": "Constraints:\nThe number of nodes in the original tree is in the range [1, 1000].\n1 <= Node.val <= 10^9", "notes": ""}, "1012": {"label": "Hard", "title": "Numbers With Repeated Digits", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.38530000000000003, "total_accepted": 8700.0, "total_submissions": 22600.0, "testcase_example": "'20'", "body": "Given an integer n, return the number of positive integers in the range [1, n] that have at least one repeated digit.", "examples": [{"full_text": "Example 1:\nInput: n = 20\nOutput: 1\nExplanation: The only positive number (<= 20) with at least 1 repeated digit is 11.", "input": "Input: n = 20", "output": "Output: 1", "explanation": "Explanation: The only positive number (<= 20) with at least 1 repeated digit is 11."}, {"full_text": "Example 2:\nInput: n = 100\nOutput: 10\nExplanation: The positive numbers (<= 100) with atleast 1 repeated digit are 11, 22, 33, 44, 55, 66, 77, 88, 99, and 100.", "input": "Input: n = 100", "output": "Output: 10", "explanation": "Explanation: The positive numbers (<= 100) with atleast 1 repeated digit are 11, 22, 33, 44, 55, 66, 77, 88, 99, and 100."}, {"full_text": "Example 3:\nInput: n = 1000\nOutput: 262", "input": "Input: n = 1000", "output": "Output: 262", "explanation": ""}], "constraints": "Constraints:\n1 <= n <= 10^9", "notes": ""}, "1001": {"label": "Hard", "title": "Grid Illumination", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3613, "total_accepted": 14600.0, "total_submissions": 40400.0, "testcase_example": "'5\\n[[0,0],[4,4]]\\n[[1,1],[1,0]]'", "body": "There is a 2D grid of size n x n where each cell of this grid has a lamp that is initially turned off.\nYou are given a 2D array of lamp positions lamps, where lamps[i] = [rowi, coli] indicates that the lamp at grid[rowi][coli] is turned on. Even if the same lamp is listed more than once, it is turned on.\nWhen a lamp is turned on, it illuminates its cell and all other cells in the same row, column, or diagonal.\nYou are also given another 2D array queries, where queries[j] = [rowj, colj]. For the j^th query, determine whether grid[rowj][colj] is illuminated or not. After answering the j^th query, turn off the lamp at grid[rowj][colj] and its 8 adjacent lamps if they exist. A lamp is adjacent if its cell shares either a side or corner with grid[rowj][colj].\nReturn an array of integers ans, where ans[j] should be 1 if the cell in the j^th query was illuminated, or 0 if the lamp was not.", "examples": [{"full_text": "Example 1:\nInput: n = 5, lamps = [[0,0],[4,4]], queries = [[1,1],[1,0]]\nOutput: [1,0]\nExplanation: We have the initial grid with all lamps turned off. In the above picture we see the grid after turning on the lamp at grid[0][0] then turning on the lamp at grid[4][4].\nThe 0^th\nquery asks if the lamp at grid[1][1] is illuminated or not (the blue square). It is illuminated, so set ans[0] = 1. Then, we turn off all lamps in the red square.\nThe 1^st\nquery asks if the lamp at grid[1][0] is illuminated or not (the blue square). It is not illuminated, so set ans[1] = 0. Then, we turn off all lamps in the red rectangle.", "input": "Input: n = 5, lamps = [[0,0],[4,4]], queries = [[1,1],[1,0]]", "output": "Output: [1,0]", "explanation": "Explanation: We have the initial grid with all lamps turned off. In the above picture we see the grid after turning on the lamp at grid[0][0] then turning on the lamp at grid[4][4].\nThe 0^th\nquery asks if the lamp at grid[1][1] is illuminated or not (the blue square). It is illuminated, so set ans[0] = 1. Then, we turn off all lamps in the red square.\nThe 1^st\nquery asks if the lamp at grid[1][0] is illuminated or not (the blue square). It is not illuminated, so set ans[1] = 0. Then, we turn off all lamps in the red rectangle."}, {"full_text": "Example 2:\nInput: n = 5, lamps = [[0,0],[4,4]], queries = [[1,1],[1,1]]\nOutput: [1,1]", "input": "Input: n = 5, lamps = [[0,0],[4,4]], queries = [[1,1],[1,1]]", "output": "Output: [1,1]", "explanation": ""}, {"full_text": "Example 3:\nInput: n = 5, lamps = [[0,0],[0,4]], queries = [[0,4],[0,1],[1,4]]\nOutput: [1,1,0]", "input": "Input: n = 5, lamps = [[0,0],[0,4]], queries = [[0,4],[0,1],[1,4]]", "output": "Output: [1,1,0]", "explanation": ""}], "constraints": "Constraints:\n1 <= n <= 10^9\n0 <= lamps.length <= 20000\n0 <= queries.length <= 20000\nlamps[i].length == 2\n0 <= rowi, coli < n\nqueries[j].length == 2\n0 <= rowj, colj < n", "notes": ""}, "1000": {"label": "Hard", "title": "Minimum Cost to Merge Stones", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.41979999999999995, "total_accepted": 26500.0, "total_submissions": 63000.0, "testcase_example": "'[3,2,4,1]\\n2'", "body": "There are n piles of stones arranged in a row. The i^th pile has stones[i] stones.\nA move consists of merging exactly k consecutive piles into one pile, and the cost of this move is equal to the total number of stones in these k piles.\nReturn the minimum cost to merge all piles of stones into one pile. If it is impossible, return -1.", "examples": [{"full_text": "Example 1:\nInput: stones = [3,2,4,1], k = 2\nOutput: 20\nExplanation: We start with [3, 2, 4, 1].\nWe merge [3, 2] for a cost of 5, and we are left with [5, 4, 1].\nWe merge [4, 1] for a cost of 5, and we are left with [5, 5].\nWe merge [5, 5] for a cost of 10, and we are left with [10].\nThe total cost was 20, and this is the minimum possible.", "input": "Input: stones = [3,2,4,1], k = 2", "output": "Output: 20", "explanation": "Explanation: We start with [3, 2, 4, 1].\nWe merge [3, 2] for a cost of 5, and we are left with [5, 4, 1].\nWe merge [4, 1] for a cost of 5, and we are left with [5, 5].\nWe merge [5, 5] for a cost of 10, and we are left with [10].\nThe total cost was 20, and this is the minimum possible."}, {"full_text": "Example 2:\nInput: stones = [3,2,4,1], k = 3\nOutput: -1\nExplanation: After any merge operation, there are 2 piles left, and we can't merge anymore. So the task is impossible.", "input": "Input: stones = [3,2,4,1], k = 3", "output": "Output: -1", "explanation": "Explanation: After any merge operation, there are 2 piles left, and we can't merge anymore. So the task is impossible."}, {"full_text": "Example 3:\nInput: stones = [3,5,1,2,6], k = 3\nOutput: 25\nExplanation: We start with [3, 5, 1, 2, 6].\nWe merge [5, 1, 2] for a cost of 8, and we are left with [3, 8, 6].\nWe merge [3, 8, 6] for a cost of 17, and we are left with [17].\nThe total cost was 25, and this is the minimum possible.", "input": "Input: stones = [3,5,1,2,6], k = 3", "output": "Output: 25", "explanation": "Explanation: We start with [3, 5, 1, 2, 6].\nWe merge [5, 1, 2] for a cost of 8, and we are left with [3, 8, 6].\nWe merge [3, 8, 6] for a cost of 17, and we are left with [17].\nThe total cost was 25, and this is the minimum possible."}], "constraints": "Constraints:\nn == stones.length\n1 <= n <= 30\n1 <= stones[i] <= 100\n2 <= k <= 30", "notes": ""}, "996": {"label": "Hard", "title": "Number of Squareful Arrays", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.49090000000000006, "total_accepted": 24400.0, "total_submissions": 49700.0, "testcase_example": "'[1,17,8]'", "body": "An array is squareful if the sum of every pair of adjacent elements is a perfect square.\nGiven an integer array nums, return the number of permutations of nums that are squareful.\nTwo permutations perm1 and perm2 are different if there is some index i such that perm1[i] != perm2[i].", "examples": [{"full_text": "Example 1:\nInput: nums = [1,17,8]\nOutput: 2\nExplanation: [1,8,17] and [17,8,1] are the valid permutations.", "input": "Input: nums = [1,17,8]", "output": "Output: 2", "explanation": "Explanation: [1,8,17] and [17,8,1] are the valid permutations."}, {"full_text": "Example 2:\nInput: nums = [2,2,2]\nOutput: 1", "input": "Input: nums = [2,2,2]", "output": "Output: 1", "explanation": ""}], "constraints": "Constraints:\n1 <= nums.length <= 12\n0 <= nums[i] <= 10^9", "notes": ""}, "995": {"label": "Hard", "title": "Minimum Number of K Consecutive Bit Flips", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5062, "total_accepted": 24300.0, "total_submissions": 48000.0, "testcase_example": "'[0,1,0]\\n1'", "body": "You are given a binary array nums and an integer k.\nA k-bit flip is choosing a subarray of length k from nums and simultaneously changing every 0 in the subarray to 1, and every 1 in the subarray to 0.\nReturn the minimum number of k-bit flips required so that there is no 0 in the array. If it is not possible, return -1.\nA subarray is a contiguous part of an array.", "examples": [{"full_text": "Example 1:\nInput: nums = [0,1,0], k = 1\nOutput: 2\nExplanation: Flip nums[0], then flip nums[2].", "input": "Input: nums = [0,1,0], k = 1", "output": "Output: 2", "explanation": "Explanation: Flip nums[0], then flip nums[2]."}, {"full_text": "Example 2:\nInput: nums = [1,1,0], k = 2\nOutput: -1\nExplanation: No matter how we flip subarrays of size 2, we cannot make the array become [1,1,1].", "input": "Input: nums = [1,1,0], k = 2", "output": "Output: -1", "explanation": "Explanation: No matter how we flip subarrays of size 2, we cannot make the array become [1,1,1]."}, {"full_text": "Example 3:\nInput: nums = [0,0,0,1,0,1,1,0], k = 3\nOutput: 3\nExplanation:\nFlip nums[0],nums[1],nums[2]: nums becomes [1,1,1,1,0,1,1,0]\nFlip nums[4],nums[5],nums[6]: nums becomes [1,1,1,1,1,0,0,0]\nFlip nums[5],nums[6],nums[7]: nums becomes [1,1,1,1,1,1,1,1]", "input": "Input: nums = [0,0,0,1,0,1,1,0], k = 3", "output": "Output: 3", "explanation": "Explanation:\nFlip nums[0],nums[1],nums[2]: nums becomes [1,1,1,1,0,1,1,0]\nFlip nums[4],nums[5],nums[6]: nums becomes [1,1,1,1,1,0,0,0]\nFlip nums[5],nums[6],nums[7]: nums becomes [1,1,1,1,1,1,1,1]"}], "constraints": "Constraints:\n1 <= nums.length <= 10^5\n1 <= k <= nums.length", "notes": ""}, "992": {"label": "Hard", "title": "Subarrays with K Different Integers", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5312, "total_accepted": 64200.0, "total_submissions": 120900.0, "testcase_example": "'[1,2,1,2,3]\\n2'", "body": "Given an integer array nums and an integer k, return the number of good subarrays of nums.\nA good array is an array where the number of different integers in that array is exactly k.\nFor example, [1,2,3,1,2] has 3 different integers: 1, 2, and 3.\nA subarray is a contiguous part of an array.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,2,1,2,3], k = 2\nOutput: 7\nExplanation: Subarrays formed with exactly 2 different integers: [1,2], [2,1], [1,2], [2,3], [1,2,1], [2,1,2], [1,2,1,2]", "input": "Input: nums = [1,2,1,2,3], k = 2", "output": "Output: 7", "explanation": "Explanation: Subarrays formed with exactly 2 different integers: [1,2], [2,1], [1,2], [2,3], [1,2,1], [2,1,2], [1,2,1,2]"}, {"full_text": "Example 2:\nInput: nums = [1,2,1,3,4], k = 3\nOutput: 3\nExplanation: Subarrays formed with exactly 3 different integers: [1,2,1,3], [2,1,3], [1,3,4].", "input": "Input: nums = [1,2,1,3,4], k = 3", "output": "Output: 3", "explanation": "Explanation: Subarrays formed with exactly 3 different integers: [1,2,1,3], [2,1,3], [1,3,4]."}], "constraints": "Constraints:\n1 <= nums.length <= 2 * 10^4\n1 <= nums[i], k <= nums.length", "notes": ""}, "987": {"label": "Hard", "title": "Vertical Order Traversal of a Binary Tree", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4096, "total_accepted": 198500.0, "total_submissions": 484500.0, "testcase_example": "'[3,9,20,null,null,15,7]'", "body": "Given the root of a binary tree, calculate the vertical order traversal of the binary tree.\nFor each node at position (row, col), its left and right children will be at positions (row + 1, col - 1) and (row + 1, col + 1) respectively. The root of the tree is at (0, 0).\nThe vertical order traversal of a binary tree is a list of top-to-bottom orderings for each column index starting from the leftmost column and ending on the rightmost column. There may be multiple nodes in the same row and same column. In such a case, sort these nodes by their values.\nReturn the vertical order traversal of the binary tree.", "examples": [{"full_text": "Example 1:\nInput: root = [3,9,20,null,null,15,7]\nOutput: [[9],[3,15],[20],[7]]\nExplanation:\nColumn -1: Only node 9 is in this column.\nColumn 0: Nodes 3 and 15 are in this column in that order from top to bottom.\nColumn 1: Only node 20 is in this column.\nColumn 2: Only node 7 is in this column.", "input": "Input: root = [3,9,20,null,null,15,7]", "output": "Output: [[9],[3,15],[20],[7]]", "explanation": "Explanation:\nColumn -1: Only node 9 is in this column.\nColumn 0: Nodes 3 and 15 are in this column in that order from top to bottom.\nColumn 1: Only node 20 is in this column.\nColumn 2: Only node 7 is in this column."}, {"full_text": "Example 2:\nInput: root = [1,2,3,4,5,6,7]\nOutput: [[4],[2],[1,5,6],[3],[7]]\nExplanation:\nColumn -2: Only node 4 is in this column.\nColumn -1: Only node 2 is in this column.\nColumn 0: Nodes 1, 5, and 6 are in this column.\n1 is at the top, so it comes first.\n5 and 6 are at the same position (2, 0), so we order them by their value, 5 before 6.\nColumn 1: Only node 3 is in this column.\nColumn 2: Only node 7 is in this column.", "input": "Input: root = [1,2,3,4,5,6,7]", "output": "Output: [[4],[2],[1,5,6],[3],[7]]", "explanation": "Explanation:\nColumn -2: Only node 4 is in this column.\nColumn -1: Only node 2 is in this column.\nColumn 0: Nodes 1, 5, and 6 are in this column.\n1 is at the top, so it comes first.\n5 and 6 are at the same position (2, 0), so we order them by their value, 5 before 6.\nColumn 1: Only node 3 is in this column.\nColumn 2: Only node 7 is in this column."}, {"full_text": "Example 3:\nInput: root = [1,2,3,4,6,5,7]\nOutput: [[4],[2],[1,5,6],[3],[7]]\nExplanation:\nThis case is the exact same as example 2, but with nodes 5 and 6 swapped.\nNote that the solution remains the same since 5 and 6 are in the same location and should be ordered by their values.", "input": "Input: root = [1,2,3,4,6,5,7]", "output": "Output: [[4],[2],[1,5,6],[3],[7]]", "explanation": "Explanation:\nThis case is the exact same as example 2, but with nodes 5 and 6 swapped.\nNote that the solution remains the same since 5 and 6 are in the same location and should be ordered by their values."}], "constraints": "Constraints:\nThe number of nodes in the tree is in the range [1, 1000].\n0 <= Node.val <= 1000", "notes": ""}, "982": {"label": "Hard", "title": "Triples with Bitwise AND Equal To Zero", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5749, "total_accepted": 11800.0, "total_submissions": 20500.0, "testcase_example": "'[2,1,3]'", "body": "Given an integer array nums, return the number of AND triples.\nAn AND triple is a triple of indices (i, j, k) such that:\n0 <= i < nums.length\n0 <= j < nums.length\n0 <= k < nums.length\nnums[i] & nums[j] & nums[k] == 0, where & represents the bitwise-AND operator.", "examples": [{"full_text": "Example 1:\nInput: nums = [2,1,3]\nOutput: 12\nExplanation: We could choose the following i, j, k triples:\n(i=0, j=0, k=1) : 2 & 2 & 1\n(i=0, j=1, k=0) : 2 & 1 & 2\n(i=0, j=1, k=1) : 2 & 1 & 1\n(i=0, j=1, k=2) : 2 & 1 & 3\n(i=0, j=2, k=1) : 2 & 3 & 1\n(i=1, j=0, k=0) : 1 & 2 & 2\n(i=1, j=0, k=1) : 1 & 2 & 1\n(i=1, j=0, k=2) : 1 & 2 & 3\n(i=1, j=1, k=0) : 1 & 1 & 2\n(i=1, j=2, k=0) : 1 & 3 & 2\n(i=2, j=0, k=1) : 3 & 2 & 1\n(i=2, j=1, k=0) : 3 & 1 & 2", "input": "Input: nums = [2,1,3]", "output": "Output: 12", "explanation": "Explanation: We could choose the following i, j, k triples:\n(i=0, j=0, k=1) : 2 & 2 & 1\n(i=0, j=1, k=0) : 2 & 1 & 2\n(i=0, j=1, k=1) : 2 & 1 & 1\n(i=0, j=1, k=2) : 2 & 1 & 3\n(i=0, j=2, k=1) : 2 & 3 & 1\n(i=1, j=0, k=0) : 1 & 2 & 2\n(i=1, j=0, k=1) : 1 & 2 & 1\n(i=1, j=0, k=2) : 1 & 2 & 3\n(i=1, j=1, k=0) : 1 & 1 & 2\n(i=1, j=2, k=0) : 1 & 3 & 2\n(i=2, j=0, k=1) : 3 & 2 & 1\n(i=2, j=1, k=0) : 3 & 1 & 2"}, {"full_text": "Example 2:\nInput: nums = [0,0,0]\nOutput: 27", "input": "Input: nums = [0,0,0]", "output": "Output: 27", "explanation": ""}], "constraints": "Constraints:\n1 <= nums.length <= 1000\n0 <= nums[i] < 2^16", "notes": ""}, "980": {"label": "Hard", "title": "Unique Paths III", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.794, "total_accepted": 108800.0, "total_submissions": 137000.0, "testcase_example": "'[[1,0,0,0],[0,0,0,0],[0,0,2,-1]]'", "body": "You are given an m x n integer array grid where grid[i][j] could be:\n1 representing the starting square. There is exactly one starting square.\n2 representing the ending square. There is exactly one ending square.\n0 representing empty squares we can walk over.\n-1 representing obstacles that we cannot walk over.\nReturn the number of 4-directional walks from the starting square to the ending square, that walk over every non-obstacle square exactly once.", "examples": [{"full_text": "Example 1:\nInput: grid = [[1,0,0,0],[0,0,0,0],[0,0,2,-1]]\nOutput: 2\nExplanation: We have the following two paths:\n1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2)\n2. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2)", "input": "Input: grid = [[1,0,0,0],[0,0,0,0],[0,0,2,-1]]", "output": "Output: 2", "explanation": "Explanation: We have the following two paths:\n1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2)\n2. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2)"}, {"full_text": "Example 2:\nInput: grid = [[1,0,0,0],[0,0,0,0],[0,0,0,2]]\nOutput: 4\nExplanation: We have the following four paths:\n1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2),(2,3)\n2. (0,0),(0,1),(1,1),(1,0),(2,0),(2,1),(2,2),(1,2),(0,2),(0,3),(1,3),(2,3)\n3. (0,0),(1,0),(2,0),(2,1),(2,2),(1,2),(1,1),(0,1),(0,2),(0,3),(1,3),(2,3)\n4. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2),(2,3)", "input": "Input: grid = [[1,0,0,0],[0,0,0,0],[0,0,0,2]]", "output": "Output: 4", "explanation": "Explanation: We have the following four paths:\n1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2),(2,3)\n2. (0,0),(0,1),(1,1),(1,0),(2,0),(2,1),(2,2),(1,2),(0,2),(0,3),(1,3),(2,3)\n3. (0,0),(1,0),(2,0),(2,1),(2,2),(1,2),(1,1),(0,1),(0,2),(0,3),(1,3),(2,3)\n4. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2),(2,3)"}, {"full_text": "Example 3:\nInput: grid = [[0,1],[2,0]]\nOutput: 0\nExplanation: There is no path that walks over every empty square exactly once.\nNote that the starting and ending square can be anywhere in the grid.", "input": "Input: grid = [[0,1],[2,0]]", "output": "Output: 0", "explanation": "Explanation: There is no path that walks over every empty square exactly once.\nNote that the starting and ending square can be anywhere in the grid."}], "constraints": "Constraints:\nm == grid.length\nn == grid[i].length\n1 <= m, n <= 20\n1 <= m * n <= 20\n-1 <= grid[i][j] <= 2\nThere is exactly one starting cell and one ending cell.", "notes": ""}, "975": {"label": "Hard", "title": "Odd Even Jump", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3917, "total_accepted": 54300.0, "total_submissions": 138700.0, "testcase_example": "'[10,13,12,14,15]'", "body": "You are given an integer array arr. From some starting index, you can make a series of jumps. The (1^st, 3^rd, 5^th, ...) jumps in the series are called odd-numbered jumps, and the (2^nd, 4^th, 6^th, ...) jumps in the series are called even-numbered jumps. Note that the jumps are numbered, not the indices.\nYou may jump forward from index i to index j (with i < j) in the following way:\nDuring odd-numbered jumps (i.e., jumps 1, 3, 5, ...), you jump to the index j such that arr[i] <= arr[j] and arr[j] is the smallest possible value. If there are multiple such indices j, you can only jump to the smallest such index j.\nDuring even-numbered jumps (i.e., jumps 2, 4, 6, ...), you jump to the index j such that arr[i] >= arr[j] and arr[j] is the largest possible value. If there are multiple such indices j, you can only jump to the smallest such index j.\nIt may be the case that for some index i, there are no legal jumps.\nA starting index is good if, starting from that index, you can reach the end of the array (index arr.length - 1) by jumping some number of times (possibly 0 or more than once).\nReturn the number of good starting indices.", "examples": [{"full_text": "Example 1:\nInput: arr = [10,13,12,14,15]\nOutput: 2\nExplanation:\nFrom starting index i = 0, we can make our 1st jump to i = 2 (since arr[2] is the smallest among arr[1], arr[2], arr[3], arr[4] that is greater or equal to arr[0]), then we cannot jump any more.\nFrom starting index i = 1 and i = 2, we can make our 1st jump to i = 3, then we cannot jump any more.\nFrom starting index i = 3, we can make our 1st jump to i = 4, so we have reached the end.\nFrom starting index i = 4, we have reached the end already.\nIn total, there are 2 different starting indices i = 3 and i = 4, where we can reach the end with some number of\njumps.", "input": "Input: arr = [10,13,12,14,15]", "output": "Output: 2", "explanation": "Explanation:\nFrom starting index i = 0, we can make our 1st jump to i = 2 (since arr[2] is the smallest among arr[1], arr[2], arr[3], arr[4] that is greater or equal to arr[0]), then we cannot jump any more.\nFrom starting index i = 1 and i = 2, we can make our 1st jump to i = 3, then we cannot jump any more.\nFrom starting index i = 3, we can make our 1st jump to i = 4, so we have reached the end.\nFrom starting index i = 4, we have reached the end already.\nIn total, there are 2 different starting indices i = 3 and i = 4, where we can reach the end with some number of\njumps."}, {"full_text": "Example 2:\nInput: arr = [2,3,1,1,4]\nOutput: 3\nExplanation:\nFrom starting index i = 0, we make jumps to i = 1, i = 2, i = 3:\nDuring our 1st jump (odd-numbered), we first jump to i = 1 because arr[1] is the smallest value in [arr[1], arr[2], arr[3], arr[4]] that is greater than or equal to arr[0].\nDuring our 2nd jump (even-numbered), we jump from i = 1 to i = 2 because arr[2] is the largest value in [arr[2], arr[3], arr[4]] that is less than or equal to arr[1]. arr[3] is also the largest value, but 2 is a smaller index, so we can only jump to i = 2 and not i = 3\nDuring our 3rd jump (odd-numbered), we jump from i = 2 to i = 3 because arr[3] is the smallest value in [arr[3], arr[4]] that is greater than or equal to arr[2].\nWe can't jump from i = 3 to i = 4, so the starting index i = 0 is not good.\nIn a similar manner, we can deduce that:\nFrom starting index i = 1, we jump to i = 4, so we reach the end.\nFrom starting index i = 2, we jump to i = 3, and then we can't jump anymore.\nFrom starting index i = 3, we jump to i = 4, so we reach the end.\nFrom starting index i = 4, we are already at the end.\nIn total, there are 3 different starting indices i = 1, i = 3, and i = 4, where we can reach the end with some\nnumber of jumps.", "input": "Input: arr = [2,3,1,1,4]", "output": "Output: 3", "explanation": "Explanation:\nFrom starting index i = 0, we make jumps to i = 1, i = 2, i = 3:\nDuring our 1st jump (odd-numbered), we first jump to i = 1 because arr[1] is the smallest value in [arr[1], arr[2], arr[3], arr[4]] that is greater than or equal to arr[0].\nDuring our 2nd jump (even-numbered), we jump from i = 1 to i = 2 because arr[2] is the largest value in [arr[2], arr[3], arr[4]] that is less than or equal to arr[1]. arr[3] is also the largest value, but 2 is a smaller index, so we can only jump to i = 2 and not i = 3\nDuring our 3rd jump (odd-numbered), we jump from i = 2 to i = 3 because arr[3] is the smallest value in [arr[3], arr[4]] that is greater than or equal to arr[2].\nWe can't jump from i = 3 to i = 4, so the starting index i = 0 is not good.\nIn a similar manner, we can deduce that:\nFrom starting index i = 1, we jump to i = 4, so we reach the end.\nFrom starting index i = 2, we jump to i = 3, and then we can't jump anymore.\nFrom starting index i = 3, we jump to i = 4, so we reach the end.\nFrom starting index i = 4, we are already at the end.\nIn total, there are 3 different starting indices i = 1, i = 3, and i = 4, where we can reach the end with some\nnumber of jumps."}, {"full_text": "Example 3:\nInput: arr = [5,1,3,4,2]\nOutput: 3\nExplanation: We can reach the end from starting indices 1, 2, and 4.", "input": "Input: arr = [5,1,3,4,2]", "output": "Output: 3", "explanation": "Explanation: We can reach the end from starting indices 1, 2, and 4."}], "constraints": "Constraints:\n1 <= arr.length <= 2 * 10^4\n0 <= arr[i] < 10^5", "notes": ""}, "972": {"label": "Hard", "title": "Equal Rational Numbers", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4244, "total_accepted": 5200.0, "total_submissions": 12300.0, "testcase_example": "'\"0.(52)\"\\n\"0.5(25)\"'", "body": "Given two strings s and t, each of which represents a non-negative rational number, return true if and only if they represent the same number. The strings may use parentheses to denote the repeating part of the rational number.\nA rational number can be represented using up to three parts: <IntegerPart>, <NonRepeatingPart>, and a <RepeatingPart>. The number will be represented in one of the following three ways:\n<IntegerPart>\n\nFor example, 12, 0, and 123.\n\n\n<IntegerPart><.><NonRepeatingPart>\n\nFor example, 0.5, 1., 2.12, and 123.0001.\n\n\n<IntegerPart><.><NonRepeatingPart><(><RepeatingPart><)>\n\nFor example, 0.1(6), 1.(9), 123.00(1212).\n\n\nThe repeating portion of a decimal expansion is conventionally denoted within a pair of round brackets. For example:\n1/6 = 0.16666666... = 0.1(6) = 0.1666(6) = 0.166(66).", "examples": [{"full_text": "Example 1:\nInput: s = \"0.(52)\", t = \"0.5(25)\"\nOutput: true\nExplanation: Because \"0.(52)\" represents 0.52525252..., and \"0.5(25)\" represents 0.52525252525..... , the strings represent the same number.", "input": "Input: s = \"0.(52)\", t = \"0.5(25)\"", "output": "Output: true", "explanation": "Explanation: Because \"0.(52)\" represents 0.52525252..., and \"0.5(25)\" represents 0.52525252525..... , the strings represent the same number."}, {"full_text": "Example 2:\nInput: s = \"0.1666(6)\", t = \"0.166(66)\"\nOutput: true", "input": "Input: s = \"0.1666(6)\", t = \"0.166(66)\"", "output": "Output: true", "explanation": ""}, {"full_text": "Example 3:\nInput: s = \"0.9(9)\", t = \"1.\"\nOutput: true\nExplanation: \"0.9(9)\" represents 0.999999999... repeated forever, which equals 1. [See this link for an explanation.]\n\"1.\" represents the number 1, which is formed correctly: (IntegerPart) = \"1\" and (NonRepeatingPart) = \"\".", "input": "Input: s = \"0.9(9)\", t = \"1.\"", "output": "Output: true", "explanation": "Explanation: \"0.9(9)\" represents 0.999999999... repeated forever, which equals 1. [See this link for an explanation.]\n\"1.\" represents the number 1, which is formed correctly: (IntegerPart) = \"1\" and (NonRepeatingPart) = \"\"."}], "constraints": "Constraints:\nEach part consists only of digits.\nThe <IntegerPart> does not have leading zeros (except for the zero itself).\n1 <= <IntegerPart>.length <= 4\n0 <= <NonRepeatingPart>.length <= 4\n1 <= <RepeatingPart>.length <= 4", "notes": ""}, "968": {"label": "Hard", "title": "Binary Tree Cameras", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.41590000000000005, "total_accepted": 60400.0, "total_submissions": 145100.0, "testcase_example": "'[0,0,null,0,0]'", "body": "You are given the root of a binary tree. We install cameras on the tree nodes where each camera at a node can monitor its parent, itself, and its immediate children.\nReturn the minimum number of cameras needed to monitor all nodes of the tree.", "examples": [{"full_text": "Example 1:\nInput: root = [0,0,null,0,0]\nOutput: 1\nExplanation: One camera is enough to monitor all nodes if placed as shown.", "input": "Input: root = [0,0,null,0,0]", "output": "Output: 1", "explanation": "Explanation: One camera is enough to monitor all nodes if placed as shown."}, {"full_text": "Example 2:\nInput: root = [0,0,null,0,null,0,null,null,0]\nOutput: 2\nExplanation: At least two cameras are needed to monitor all nodes of the tree. The above image shows one of the valid configurations of camera placement.", "input": "Input: root = [0,0,null,0,null,0,null,null,0]", "output": "Output: 2", "explanation": "Explanation: At least two cameras are needed to monitor all nodes of the tree. The above image shows one of the valid configurations of camera placement."}], "constraints": "Constraints:\nThe number of nodes in the tree is in the range [1, 1000].\nNode.val == 0", "notes": ""}, "964": {"label": "Hard", "title": "Least Operators to Express Number", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.46869999999999995, "total_accepted": 7700.0, "total_submissions": 16400.0, "testcase_example": "'3\\n19'", "body": "Given a single positive integer x, we will write an expression of the form x (op1) x (op2) x (op3) x ... where each operator op1, op2, etc. is either addition, subtraction, multiplication, or division (+, -, *, or /). For example, with x = 3, we might write 3 * 3 / 3 + 3 - 3 which is a value of 3.\nWhen writing such an expression, we adhere to the following conventions:\nThe division operator (/) returns rational numbers.\nThere are no parentheses placed anywhere.\nWe use the usual order of operations: multiplication and division happen before addition and subtraction.\nIt is not allowed to use the unary negation operator (-). For example, \"x - x\" is a valid expression as it only uses subtraction, but \"-x + x\" is not because it uses negation.\nWe would like to write an expression with the least number of operators such that the expression equals the given target. Return the least number of operators used.", "examples": [{"full_text": "Example 1:\nInput: x = 3, target = 19\nOutput: 5\nExplanation: 3 * 3 + 3 * 3 + 3 / 3.\nThe expression contains 5 operations.", "input": "Input: x = 3, target = 19", "output": "Output: 5", "explanation": "Explanation: 3 * 3 + 3 * 3 + 3 / 3.\nThe expression contains 5 operations."}, {"full_text": "Example 2:\nInput: x = 5, target = 501\nOutput: 8\nExplanation: 5 * 5 * 5 * 5 - 5 * 5 * 5 + 5 / 5.\nThe expression contains 8 operations.", "input": "Input: x = 5, target = 501", "output": "Output: 8", "explanation": "Explanation: 5 * 5 * 5 * 5 - 5 * 5 * 5 + 5 / 5.\nThe expression contains 8 operations."}, {"full_text": "Example 3:\nInput: x = 100, target = 100000000\nOutput: 3\nExplanation: 100 * 100 * 100 * 100.\nThe expression contains 3 operations.", "input": "Input: x = 100, target = 100000000", "output": "Output: 3", "explanation": "Explanation: 100 * 100 * 100 * 100.\nThe expression contains 3 operations."}], "constraints": "Constraints:\n2 <= x <= 100\n1 <= target <= 2 * 10^8", "notes": ""}, "960": {"label": "Hard", "title": "Delete Columns to Make Sorted III", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5643, "total_accepted": 9900.0, "total_submissions": 17500.0, "testcase_example": "'[\"babca\",\"bbazb\"]'", "body": "You are given an array of n strings strs, all of the same length.\nWe may choose any deletion indices, and we delete all the characters in those indices for each string.\nFor example, if we have strs = [\"abcdef\",\"uvwxyz\"] and deletion indices {0, 2, 3}, then the final array after deletions is [\"bef\", \"vyz\"].\nSuppose we chose a set of deletion indices answer such that after deletions, the final array has every string (row) in lexicographic order. (i.e., (strs[0][0] <= strs[0][1] <= ... <= strs[0][strs[0].length - 1]), and (strs[1][0] <= strs[1][1] <= ... <= strs[1][strs[1].length - 1]), and so on). Return the minimum possible value of answer.length.", "examples": [{"full_text": "Example 1:\nInput: strs = [\"babca\",\"bbazb\"]\nOutput: 3\nExplanation: After deleting columns 0, 1, and 4, the final array is strs = [\"bc\", \"az\"].\nBoth these rows are individually in lexicographic order (ie. strs[0][0] <= strs[0][1] and strs[1][0] <= strs[1][1]).\nNote that strs[0] > strs[1] - the array strs is not necessarily in lexicographic order.", "input": "Input: strs = [\"babca\",\"bbazb\"]", "output": "Output: 3", "explanation": "Explanation: After deleting columns 0, 1, and 4, the final array is strs = [\"bc\", \"az\"].\nBoth these rows are individually in lexicographic order (ie. strs[0][0] <= strs[0][1] and strs[1][0] <= strs[1][1]).\nNote that strs[0] > strs[1] - the array strs is not necessarily in lexicographic order."}, {"full_text": "Example 2:\nInput: strs = [\"edcba\"]\nOutput: 4\nExplanation: If we delete less than 4 columns, the only row will not be lexicographically sorted.", "input": "Input: strs = [\"edcba\"]", "output": "Output: 4", "explanation": "Explanation: If we delete less than 4 columns, the only row will not be lexicographically sorted."}, {"full_text": "Example 3:\nInput: strs = [\"ghi\",\"def\",\"abc\"]\nOutput: 0\nExplanation: All rows are already lexicographically sorted.", "input": "Input: strs = [\"ghi\",\"def\",\"abc\"]", "output": "Output: 0", "explanation": "Explanation: All rows are already lexicographically sorted."}], "constraints": "Constraints:\nn == strs.length\n1 <= n <= 100\n1 <= strs[i].length <= 100\nstrs[i] consists of lowercase English letters.\n", "notes": ""}, "956": {"label": "Hard", "title": "Tallest Billboard", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3995, "total_accepted": 12500.0, "total_submissions": 31200.0, "testcase_example": "'[1,2,3,6]'", "body": "You are installing a billboard and want it to have the largest height. The billboard will have two steel supports, one on each side. Each steel support must be an equal height.\nYou are given a collection of rods that can be welded together. For example, if you have rods of lengths 1, 2, and 3, you can weld them together to make a support of length 6.\nReturn the largest possible height of your billboard installation. If you cannot support the billboard, return 0.", "examples": [{"full_text": "Example 1:\nInput: rods = [1,2,3,6]\nOutput: 6\nExplanation: We have two disjoint subsets {1,2,3} and {6}, which have the same sum = 6.", "input": "Input: rods = [1,2,3,6]", "output": "Output: 6", "explanation": "Explanation: We have two disjoint subsets {1,2,3} and {6}, which have the same sum = 6."}, {"full_text": "Example 2:\nInput: rods = [1,2,3,4,5,6]\nOutput: 10\nExplanation: We have two disjoint subsets {2,3,5} and {4,6}, which have the same sum = 10.", "input": "Input: rods = [1,2,3,4,5,6]", "output": "Output: 10", "explanation": "Explanation: We have two disjoint subsets {2,3,5} and {4,6}, which have the same sum = 10."}, {"full_text": "Example 3:\nInput: rods = [1,2]\nOutput: 0\nExplanation: The billboard cannot be supported, so we return 0.", "input": "Input: rods = [1,2]", "output": "Output: 0", "explanation": "Explanation: The billboard cannot be supported, so we return 0."}], "constraints": "Constraints:\n1 <= rods.length <= 20\n1 <= rods[i] <= 1000\nsum(rods[i]) <= 5000", "notes": ""}, "952": {"label": "Hard", "title": "Largest Component Size by Common Factor", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.40409999999999996, "total_accepted": 43100.0, "total_submissions": 106800.0, "testcase_example": "'[4,6,15,35]'", "body": "You are given an integer array of unique positive integers nums. Consider the following graph:\nThere are nums.length nodes, labeled nums[0] to nums[nums.length - 1],\nThere is an undirected edge between nums[i] and nums[j] if nums[i] and nums[j] share a common factor greater than 1.\nReturn the size of the largest connected component in the graph.", "examples": [{"full_text": "Example 1:\nInput: nums = [4,6,15,35]\nOutput: 4", "input": "Input: nums = [4,6,15,35]", "output": "Output: 4", "explanation": ""}, {"full_text": "Example 2:\nInput: nums = [20,50,9,63]\nOutput: 2", "input": "Input: nums = [20,50,9,63]", "output": "Output: 2", "explanation": ""}, {"full_text": "Example 3:\nInput: nums = [2,3,6,7,4,12,21,39]\nOutput: 8", "input": "Input: nums = [2,3,6,7,4,12,21,39]", "output": "Output: 8", "explanation": ""}], "constraints": "Constraints:\n1 <= nums.length <= 2 * 10^4\n1 <= nums[i] <= 10^5\nAll the values of nums are unique.", "notes": ""}, "943": {"label": "Hard", "title": "Find the Shortest Superstring", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4543, "total_accepted": 22900.0, "total_submissions": 50500.0, "testcase_example": "'[\"alex\",\"loves\",\"leetcode\"]'", "body": "Given an array of strings words, return the smallest string that contains each string in words as a substring. If there are multiple valid strings of the smallest length, return any of them.\nYou may assume that no string in words is a substring of another string in words.", "examples": [{"full_text": "Example 1:\nInput: words = [\"alex\",\"loves\",\"leetcode\"]\nOutput: \"alexlovesleetcode\"\nExplanation: All permutations of \"alex\",\"loves\",\"leetcode\" would also be accepted.", "input": "Input: words = [\"alex\",\"loves\",\"leetcode\"]", "output": "Output: \"alexlovesleetcode\"", "explanation": "Explanation: All permutations of \"alex\",\"loves\",\"leetcode\" would also be accepted."}, {"full_text": "Example 2:\nInput: words = [\"catg\",\"ctaagt\",\"gcta\",\"ttca\",\"atgcatc\"]\nOutput: \"gctaagttcatgcatc\"", "input": "Input: words = [\"catg\",\"ctaagt\",\"gcta\",\"ttca\",\"atgcatc\"]", "output": "Output: \"gctaagttcatgcatc\"", "explanation": ""}], "constraints": "Constraints:\n1 <= words.length <= 12\n1 <= words[i].length <= 20\nwords[i] consists of lowercase English letters.\nAll the strings of words are unique.", "notes": ""}, "940": {"label": "Hard", "title": "Distinct Subsequences II", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4411, "total_accepted": 25500.0, "total_submissions": 57900.0, "testcase_example": "'\"abc\"'", "body": "Given a string s, return the number of distinct non-empty subsequences of s. Since the answer may be very large, return it modulo 10^9 + 7.\nA subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., \"ace\" is a subsequence of \"abcde\" while \"aec\" is not.", "examples": [{"full_text": "Example 1:\nInput: s = \"abc\"\nOutput: 7\nExplanation: The 7 distinct subsequences are \"a\", \"b\", \"c\", \"ab\", \"ac\", \"bc\", and \"abc\".", "input": "Input: s = \"abc\"", "output": "Output: 7", "explanation": "Explanation: The 7 distinct subsequences are \"a\", \"b\", \"c\", \"ab\", \"ac\", \"bc\", and \"abc\"."}, {"full_text": "Example 2:\nInput: s = \"aba\"\nOutput: 6\nExplanation: The 6 distinct subsequences are \"a\", \"b\", \"ab\", \"aa\", \"ba\", and \"aba\".", "input": "Input: s = \"aba\"", "output": "Output: 6", "explanation": "Explanation: The 6 distinct subsequences are \"a\", \"b\", \"ab\", \"aa\", \"ba\", and \"aba\"."}, {"full_text": "Example 3:\nInput: s = \"aaa\"\nOutput: 3\nExplanation: The 3 distinct subsequences are \"a\", \"aa\" and \"aaa\".", "input": "Input: s = \"aaa\"", "output": "Output: 3", "explanation": "Explanation: The 3 distinct subsequences are \"a\", \"aa\" and \"aaa\"."}], "constraints": "Constraints:\n1 <= s.length <= 2000\ns consists of lowercase English letters.", "notes": ""}, "936": {"label": "Hard", "title": "Stamping The Sequence", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.535, "total_accepted": 23700.0, "total_submissions": 44200.0, "testcase_example": "'\"abc\"\\n\"ababc\"'", "body": "You are given two strings stamp and target. Initially, there is a string s of length target.length with all s[i] == '?'.\nIn one turn, you can place stamp over s and replace every letter in the s with the corresponding letter from stamp.\nFor example, if stamp = \"abc\" and target = \"abcba\", then s is \"?????\" initially. In one turn you can:\n\nplace stamp at index 0 of s to obtain \"abc??\",\nplace stamp at index 1 of s to obtain \"?abc?\", or\nplace stamp at index 2 of s to obtain \"??abc\".\n\nNote that stamp must be fully contained in the boundaries of s in order to stamp (i.e., you cannot place stamp at index 3 of s).\nWe want to convert s to target using at most 10 * target.length turns.\nReturn an array of the index of the left-most letter being stamped at each turn. If we cannot obtain target from s within 10 * target.length turns, return an empty array.", "examples": [{"full_text": "Example 1:\nInput: stamp = \"abc\", target = \"ababc\"\nOutput: [0,2]\nExplanation: Initially s = \"?????\".\n- Place stamp at index 0 to get \"abc??\".\n- Place stamp at index 2 to get \"ababc\".\n[1,0,2] would also be accepted as an answer, as well as some other answers.", "input": "Input: stamp = \"abc\", target = \"ababc\"", "output": "Output: [0,2]", "explanation": "Explanation: Initially s = \"?????\".\n- Place stamp at index 0 to get \"abc??\".\n- Place stamp at index 2 to get \"ababc\".\n[1,0,2] would also be accepted as an answer, as well as some other answers."}, {"full_text": "Example 2:\nInput: stamp = \"abca\", target = \"aabcaca\"\nOutput: [3,0,1]\nExplanation: Initially s = \"???????\".\n- Place stamp at index 3 to get \"???abca\".\n- Place stamp at index 0 to get \"abcabca\".\n- Place stamp at index 1 to get \"aabcaca\".", "input": "Input: stamp = \"abca\", target = \"aabcaca\"", "output": "Output: [3,0,1]", "explanation": "Explanation: Initially s = \"???????\".\n- Place stamp at index 3 to get \"???abca\".\n- Place stamp at index 0 to get \"abcabca\".\n- Place stamp at index 1 to get \"aabcaca\"."}], "constraints": "Constraints:\n1 <= stamp.length <= target.length <= 1000\nstamp and target consist of lowercase English letters.", "notes": ""}, "928": {"label": "Hard", "title": "Minimize Malware Spread II", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4191, "total_accepted": 14600.0, "total_submissions": 34900.0, "testcase_example": "'[[1,1,0],[1,1,0],[0,0,1]]\\n[0,1]'", "body": "You are given a network of n nodes represented as an n x n adjacency matrix graph, where the i^th node is directly connected to the j^th node if graph[i][j] == 1.\nSome nodes initial are initially infected by malware. Whenever two nodes are directly connected, and at least one of those two nodes is infected by malware, both nodes will be infected by malware. This spread of malware will continue until no more nodes can be infected in this manner.\nSuppose M(initial) is the final number of nodes infected with malware in the entire network after the spread of malware stops.\nWe will remove exactly one node from initial, completely removing it and any connections from this node to any other node.\nReturn the node that, if removed, would minimize M(initial). If multiple nodes could be removed to minimize M(initial), return such a node with the smallest index.", "examples": [{"full_text": "Example 1:\nInput: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]\nOutput: 0", "input": "Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]", "output": "Output: 0", "explanation": ""}, {"full_text": "Example 2:\nInput: graph = [[1,1,0],[1,1,1],[0,1,1]], initial = [0,1]\nOutput: 1", "input": "Input: graph = [[1,1,0],[1,1,1],[0,1,1]], initial = [0,1]", "output": "Output: 1", "explanation": ""}, {"full_text": "Example 3:\nInput: graph = [[1,1,0,0],[1,1,1,0],[0,1,1,1],[0,0,1,1]], initial = [0,1]\nOutput: 1", "input": "Input: graph = [[1,1,0,0],[1,1,1,0],[0,1,1,1],[0,0,1,1]], initial = [0,1]", "output": "Output: 1", "explanation": ""}], "constraints": "Constraints:\nn == graph.length\nn == graph[i].length\n2 <= n <= 300\ngraph[i][j] is 0 or 1.\ngraph[i][j] == graph[j][i]\ngraph[i][i] == 1\n1 <= initial.length <\nn\n0 <= initial[i] <= n - 1\nAll the integers in initial are unique.", "notes": ""}, "927": {"label": "Hard", "title": "Three Equal Parts", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.39299999999999996, "total_accepted": 25400.0, "total_submissions": 64599.99999999999, "testcase_example": "'[1,0,1,0,1]'", "body": "You are given an array arr which consists of only zeros and ones, divide the array into three non-empty parts such that all of these parts represent the same binary value.\nIf it is possible, return any [i, j] with i + 1 < j, such that:\narr[0], arr[1], ..., arr[i] is the first part,\narr[i + 1], arr[i + 2], ..., arr[j - 1] is the second part, and\narr[j], arr[j + 1], ..., arr[arr.length - 1] is the third part.\nAll three parts have equal binary values.\nIf it is not possible, return [-1, -1].\nNote that the entire part is used when considering what binary value it represents. For example, [1,1,0] represents 6 in decimal, not 3. Also, leading zeros are allowed, so [0,1,1] and [1,1] represent the same value.", "examples": [{"full_text": "Example 1:\nInput: arr = [1,0,1,0,1]\nOutput: [0,3]", "input": "Input: arr = [1,0,1,0,1]", "output": "Output: [0,3]", "explanation": ""}, {"full_text": "Example 2:\nInput: arr = [1,1,0,1,1]\nOutput: [-1,-1]", "input": "Input: arr = [1,1,0,1,1]", "output": "Output: [-1,-1]", "explanation": ""}, {"full_text": "Example 3:\nInput: arr = [1,1,0,0,1]\nOutput: [0,2]", "input": "Input: arr = [1,1,0,0,1]", "output": "Output: [0,2]", "explanation": ""}], "constraints": "Constraints:\n3 <= arr.length <= 3 * 10^4\narr[i] is 0 or 1", "notes": ""}, "924": {"label": "Hard", "title": "Minimize Malware Spread", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4192, "total_accepted": 35800.0, "total_submissions": 85400.0, "testcase_example": "'[[1,1,0],[1,1,0],[0,0,1]]\\n[0,1]'", "body": "You are given a network of n nodes represented as an n x n adjacency matrix graph, where the i^th node is directly connected to the j^th node if graph[i][j] == 1.\nSome nodes initial are initially infected by malware. Whenever two nodes are directly connected, and at least one of those two nodes is infected by malware, both nodes will be infected by malware. This spread of malware will continue until no more nodes can be infected in this manner.\nSuppose M(initial) is the final number of nodes infected with malware in the entire network after the spread of malware stops. We will remove exactly one node from initial.\nReturn the node that, if removed, would minimize M(initial). If multiple nodes could be removed to minimize M(initial), return such a node with the smallest index.\nNote that if a node was removed from the initial list of infected nodes, it might still be infected later due to the malware spread.", "examples": [{"full_text": "Example 1:\nInput: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]\nOutput: 0", "input": "Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]", "output": "Output: 0", "explanation": ""}, {"full_text": "Example 2:\nInput: graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2]\nOutput: 0", "input": "Input: graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2]", "output": "Output: 0", "explanation": ""}, {"full_text": "Example 3:\nInput: graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2]\nOutput: 1", "input": "Input: graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2]", "output": "Output: 1", "explanation": ""}], "constraints": "Constraints:\nn == graph.length\nn == graph[i].length\n2 <= n <= 300\ngraph[i][j] is 0 or 1.\ngraph[i][j] == graph[j][i]\ngraph[i][i] == 1\n1 <= initial.length <= n\n0 <= initial[i] <= n - 1\nAll the integers in initial are unique.", "notes": ""}, "920": {"label": "Hard", "title": "Number of Music Playlists", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4927, "total_accepted": 17400.0, "total_submissions": 35400.0, "testcase_example": "'3\\n3\\n1'", "body": "Your music player contains n different songs. You want to listen to goal songs (not necessarily different) during your trip. To avoid boredom, you will create a playlist so that:\nEvery song is played at least once.\nA song can only be played again only if k other songs have been played.\nGiven n, goal, and k, return the number of possible playlists that you can create. Since the answer can be very large, return it modulo 10^9 + 7.", "examples": [{"full_text": "Example 1:\nInput: n = 3, goal = 3, k = 1\nOutput: 6\nExplanation: There are 6 possible playlists: [1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], and [3, 2, 1].", "input": "Input: n = 3, goal = 3, k = 1", "output": "Output: 6", "explanation": "Explanation: There are 6 possible playlists: [1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], and [3, 2, 1]."}, {"full_text": "Example 2:\nInput: n = 2, goal = 3, k = 0\nOutput: 6\nExplanation: There are 6 possible playlists: [1, 1, 2], [1, 2, 1], [2, 1, 1], [2, 2, 1], [2, 1, 2], and [1, 2, 2].", "input": "Input: n = 2, goal = 3, k = 0", "output": "Output: 6", "explanation": "Explanation: There are 6 possible playlists: [1, 1, 2], [1, 2, 1], [2, 1, 1], [2, 2, 1], [2, 1, 2], and [1, 2, 2]."}, {"full_text": "Example 3:\nInput: n = 2, goal = 3, k = 1\nOutput: 2\nExplanation: There are 2 possible playlists: [1, 2, 1] and [2, 1, 2].", "input": "Input: n = 2, goal = 3, k = 1", "output": "Output: 2", "explanation": "Explanation: There are 2 possible playlists: [1, 2, 1] and [2, 1, 2]."}], "constraints": "Constraints:\n0 <= k < n <= goal <= 100", "notes": ""}, "913": {"label": "Hard", "title": "Cat and Mouse", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.35100000000000003, "total_accepted": 13900.0, "total_submissions": 39500.0, "testcase_example": "'[[2,5],[3],[0,4,5],[1,4,5],[2,3],[0,2,3]]'", "body": "A game on an undirected graph is played by two players, Mouse and Cat, who alternate turns.\nThe graph is given as follows: graph[a] is a list of all nodes b such that ab is an edge of the graph.\nThe mouse starts at node 1 and goes first, the cat starts at node 2 and goes second, and there is a hole at node 0.\nDuring each player's turn, they must travel along one\nedge of the graph that meets where they are.\nFor example, if the Mouse is at node 1, it must travel to any node in graph[1].\nAdditionally, it is not allowed for the Cat to travel to the Hole (node 0.)\nThen, the game can end in three\nways:\nIf ever the Cat occupies the same node as the Mouse, the Cat wins.\nIf ever the Mouse reaches the Hole, the Mouse wins.\nIf ever a position is repeated (i.e., the players are in the same position as a previous turn, and\nit is the same player's turn to move), the game is a draw.\nGiven a graph, and assuming both players play optimally, return\n1\nif the mouse wins the game,\n2\nif the cat wins the game, or\n0\nif the game is a draw.", "examples": [{"full_text": "Example 1:\nInput: graph = [[2,5],[3],[0,4,5],[1,4,5],[2,3],[0,2,3]]\nOutput: 0", "input": "Input: graph = [[2,5],[3],[0,4,5],[1,4,5],[2,3],[0,2,3]]", "output": "Output: 0", "explanation": ""}, {"full_text": "Example 2:\nInput: graph = [[1,3],[0],[3],[0,2]]\nOutput: 1", "input": "Input: graph = [[1,3],[0],[3],[0,2]]", "output": "Output: 1", "explanation": ""}], "constraints": "Constraints:\n3 <= graph.length <= 50\n1\n<= graph[i].length < graph.length\n0 <= graph[i][j] < graph.length\ngraph[i][j] != i\ngraph[i] is unique.\nThe mouse and the cat can always move.", "notes": ""}, "906": {"label": "Hard", "title": "Super Palindromes", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3918, "total_accepted": 21000.0, "total_submissions": 53500.0, "testcase_example": "'\"4\"\\n\"1000\"'", "body": "Let's say a positive integer is a super-palindrome if it is a palindrome, and it is also the square of a palindrome.\nGiven two positive integers left and right represented as strings, return the number of super-palindromes integers in the inclusive range [left, right].", "examples": [{"full_text": "Example 1:\nInput: left = \"4\", right = \"1000\"\nOutput: 4\nExplanation: 4, 9, 121, and 484 are superpalindromes.\nNote that 676 is not a superpalindrome: 26 * 26 = 676, but 26 is not a palindrome.", "input": "Input: left = \"4\", right = \"1000\"", "output": "Output: 4", "explanation": "Explanation: 4, 9, 121, and 484 are superpalindromes.\nNote that 676 is not a superpalindrome: 26 * 26 = 676, but 26 is not a palindrome."}, {"full_text": "Example 2:\nInput: left = \"1\", right = \"2\"\nOutput: 1", "input": "Input: left = \"1\", right = \"2\"", "output": "Output: 1", "explanation": ""}], "constraints": "Constraints:\n1 <= left.length, right.length <= 18\nleft and right consist of only digits.\nleft and right cannot have leading zeros.\nleft and right represent integers in the range [1, 10^18 - 1].\nleft is less than or equal to right.", "notes": ""}, "903": {"label": "Hard", "title": "Valid Permutations for DI Sequence", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5684, "total_accepted": 10300.0, "total_submissions": 18200.0, "testcase_example": "'\"DID\"'", "body": "You are given a string s of length n where s[i] is either:\n'D' means decreasing, or\n'I' means increasing.\nA permutation perm of n + 1 integers of all the integers in the range [0, n] is called a valid permutation if for all valid i:\nIf s[i] == 'D', then perm[i] > perm[i + 1], and\nIf s[i] == 'I', then perm[i] < perm[i + 1].\nReturn the number of valid permutations perm. Since the answer may be large, return it modulo 10^9 + 7.", "examples": [{"full_text": "Example 1:\nInput: s = \"DID\"\nOutput: 5\nExplanation: The 5 valid permutations of (0, 1, 2, 3) are:\n(1, 0, 3, 2)\n(2, 0, 3, 1)\n(2, 1, 3, 0)\n(3, 0, 2, 1)\n(3, 1, 2, 0)", "input": "Input: s = \"DID\"", "output": "Output: 5", "explanation": "Explanation: The 5 valid permutations of (0, 1, 2, 3) are:\n(1, 0, 3, 2)\n(2, 0, 3, 1)\n(2, 1, 3, 0)\n(3, 0, 2, 1)\n(3, 1, 2, 0)"}, {"full_text": "Example 2:\nInput: s = \"D\"\nOutput: 1", "input": "Input: s = \"D\"", "output": "Output: 1", "explanation": ""}], "constraints": "Constraints:\nn == s.length\n1 <= n <= 200\ns[i] is either 'I' or 'D'.", "notes": ""}, "902": {"label": "Hard", "title": "Numbers At Most N Given Digit Set", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4081, "total_accepted": 34600.0, "total_submissions": 84700.0, "testcase_example": "'[\"1\",\"3\",\"5\",\"7\"]\\n100'", "body": "Given an array of digits which is sorted in non-decreasing order. You can write numbers using each digits[i] as many times as we want. For example, if digits = ['1','3','5'], we may write numbers such as '13', '551', and '1351315'.\nReturn the number of positive integers that can be generated that are less than or equal to a given integer n.", "examples": [{"full_text": "Example 1:\nInput: digits = [\"1\",\"3\",\"5\",\"7\"], n = 100\nOutput: 20\nExplanation:\nThe 20 numbers that can be written are:\n1, 3, 5, 7, 11, 13, 15, 17, 31, 33, 35, 37, 51, 53, 55, 57, 71, 73, 75, 77.", "input": "Input: digits = [\"1\",\"3\",\"5\",\"7\"], n = 100", "output": "Output: 20", "explanation": "Explanation:\nThe 20 numbers that can be written are:\n1, 3, 5, 7, 11, 13, 15, 17, 31, 33, 35, 37, 51, 53, 55, 57, 71, 73, 75, 77."}, {"full_text": "Example 2:\nInput: digits = [\"1\",\"4\",\"9\"], n = 1000000000\nOutput: 29523\nExplanation:\nWe can write 3 one digit numbers, 9 two digit numbers, 27 three digit numbers,\n81 four digit numbers, 243 five digit numbers, 729 six digit numbers,\n2187 seven digit numbers, 6561 eight digit numbers, and 19683 nine digit numbers.\nIn total, this is 29523 integers that can be written using the digits array.", "input": "Input: digits = [\"1\",\"4\",\"9\"], n = 1000000000", "output": "Output: 29523", "explanation": "Explanation:\nWe can write 3 one digit numbers, 9 two digit numbers, 27 three digit numbers,\n81 four digit numbers, 243 five digit numbers, 729 six digit numbers,\n2187 seven digit numbers, 6561 eight digit numbers, and 19683 nine digit numbers.\nIn total, this is 29523 integers that can be written using the digits array."}, {"full_text": "Example 3:\nInput: digits = [\"7\"], n = 8\nOutput: 1", "input": "Input: digits = [\"7\"], n = 8", "output": "Output: 1", "explanation": ""}], "constraints": "Constraints:\n1 <= digits.length <= 9\ndigits[i].length == 1\ndigits[i] is a digit from\n'1'\nto '9'.\nAll the values in\ndigits are unique.\ndigits is sorted in\nnon-decreasing order.\n1 <= n <= 10^9", "notes": ""}, "899": {"label": "Hard", "title": "Orderly Queue", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5841, "total_accepted": 25200.0, "total_submissions": 43200.0, "testcase_example": "'\"cba\"\\n1'", "body": "You are given a string s and an integer k. You can choose one of the first k letters of s and append it at the end of the string..\nReturn the lexicographically smallest string you could have after applying the mentioned step any number of moves.", "examples": [{"full_text": "Example 1:\nInput: s = \"cba\", k = 1\nOutput: \"acb\"\nExplanation:\nIn the first move, we move the 1^st character 'c' to the end, obtaining the string \"bac\".\nIn the second move, we move the 1^st character 'b' to the end, obtaining the final result \"acb\".", "input": "Input: s = \"cba\", k = 1", "output": "Output: \"acb\"", "explanation": "Explanation:\nIn the first move, we move the 1^st character 'c' to the end, obtaining the string \"bac\".\nIn the second move, we move the 1^st character 'b' to the end, obtaining the final result \"acb\"."}, {"full_text": "Example 2:\nInput: s = \"baaca\", k = 3\nOutput: \"aaabc\"\nExplanation:\nIn the first move, we move the 1^st character 'b' to the end, obtaining the string \"aacab\".\nIn the second move, we move the 3^rd character 'c' to the end, obtaining the final result \"aaabc\".", "input": "Input: s = \"baaca\", k = 3", "output": "Output: \"aaabc\"", "explanation": "Explanation:\nIn the first move, we move the 1^st character 'b' to the end, obtaining the string \"aacab\".\nIn the second move, we move the 3^rd character 'c' to the end, obtaining the final result \"aaabc\"."}], "constraints": "Constraints:\n1 <= k <= s.length <= 1000\ns consist of lowercase English letters.", "notes": ""}, "895": {"label": "Hard", "title": "Maximum Frequency Stack", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6472, "total_accepted": 90000.0, "total_submissions": 139100.0, "testcase_example": "'[\"FreqStack\",\"push\",\"push\",\"push\",\"push\",\"push\",\"push\",\"pop\",\"pop\",\"pop\",\"pop\"]\\n' +\n  '[[],[5],[7],[5],[7],[4],[5],[],[],[],[]]'", "body": "Design a stack-like data structure to push elements to the stack and pop the most frequent element from the stack.\nImplement the FreqStack class:\nFreqStack() constructs an empty frequency stack.\nvoid push(int val) pushes an integer val onto the top of the stack.\nint pop() removes and returns the most frequent element in the stack.\n\nIf there is a tie for the most frequent element, the element closest to the stack's top is removed and returned.\n\n", "examples": [{"full_text": "Example 1:\nInput\n[\"FreqStack\", \"push\", \"push\", \"push\", \"push\", \"push\", \"push\", \"pop\", \"pop\", \"pop\", \"pop\"]\n[[], [5], [7], [5], [7], [4], [5], [], [], [], []]\nOutput\n[null, null, null, null, null, null, null, 5, 7, 5, 4]\nExplanation\nFreqStack freqStack = new FreqStack();\nfreqStack.push(5); // The stack is [5]\nfreqStack.push(7); // The stack is [5,7]\nfreqStack.push(5); // The stack is [5,7,5]\nfreqStack.push(7); // The stack is [5,7,5,7]\nfreqStack.push(4); // The stack is [5,7,5,7,4]\nfreqStack.push(5); // The stack is [5,7,5,7,4,5]\nfreqStack.pop(); // return 5, as 5 is the most frequent. The stack becomes [5,7,5,7,4].\nfreqStack.pop(); // return 7, as 5 and 7 is the most frequent, but 7 is closest to the top. The stack becomes [5,7,5,4].\nfreqStack.pop(); // return 5, as 5 is the most frequent. The stack becomes [5,7,4].\nfreqStack.pop(); // return 4, as 4, 5 and 7 is the most frequent, but 4 is closest to the top. The stack becomes [5,7].", "input": "Input\n[\"FreqStack\", \"push\", \"push\", \"push\", \"push\", \"push\", \"push\", \"pop\", \"pop\", \"pop\", \"pop\"]\n[[], [5], [7], [5], [7], [4], [5], [], [], [], []]", "output": "Output\n[null, null, null, null, null, null, null, 5, 7, 5, 4]", "explanation": "Explanation\nFreqStack freqStack = new FreqStack();\nfreqStack.push(5); // The stack is [5]\nfreqStack.push(7); // The stack is [5,7]\nfreqStack.push(5); // The stack is [5,7,5]\nfreqStack.push(7); // The stack is [5,7,5,7]\nfreqStack.push(4); // The stack is [5,7,5,7,4]\nfreqStack.push(5); // The stack is [5,7,5,7,4,5]\nfreqStack.pop(); // return 5, as 5 is the most frequent. The stack becomes [5,7,5,7,4].\nfreqStack.pop(); // return 7, as 5 and 7 is the most frequent, but 7 is closest to the top. The stack becomes [5,7,5,4].\nfreqStack.pop(); // return 5, as 5 is the most frequent. The stack becomes [5,7,4].\nfreqStack.pop(); // return 4, as 4, 5 and 7 is the most frequent, but 4 is closest to the top. The stack becomes [5,7]."}], "constraints": "Constraints:\n0 <= val <= 10^9\nAt most 2 * 10^4 calls will be made to push and pop.\nIt is guaranteed that there will be at least one element in the stack before calling pop.", "notes": ""}, "891": {"label": "Hard", "title": "Sum of Subsequence Widths", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.34729999999999994, "total_accepted": 13900.0, "total_submissions": 40000.0, "testcase_example": "'[2,1,3]'", "body": "The width of a sequence is the difference between the maximum and minimum elements in the sequence.\nGiven an array of integers nums, return the sum of the widths of all the non-empty subsequences of nums. Since the answer may be very large, return it modulo 10^9 + 7.\nA subsequence is a sequence that can be derived from an array by deleting some or no elements without changing the order of the remaining elements. For example, [3,6,2,7] is a subsequence of the array [0,3,1,6,2,2,7].", "examples": [{"full_text": "Example 1:\nInput: nums = [2,1,3]\nOutput: 6\nExplanation: The subsequences are [1], [2], [3], [2,1], [2,3], [1,3], [2,1,3].\nThe corresponding widths are 0, 0, 0, 1, 1, 2, 2.\nThe sum of these widths is 6.", "input": "Input: nums = [2,1,3]", "output": "Output: 6", "explanation": "Explanation: The subsequences are [1], [2], [3], [2,1], [2,3], [1,3], [2,1,3].\nThe corresponding widths are 0, 0, 0, 1, 1, 2, 2.\nThe sum of these widths is 6."}, {"full_text": "Example 2:\nInput: nums = [2]\nOutput: 0", "input": "Input: nums = [2]", "output": "Output: 0", "explanation": ""}], "constraints": "Constraints:\n1 <= nums.length <= 10^5\n1 <= nums[i] <= 10^5", "notes": ""}, "887": {"label": "Hard", "title": "Super Egg Drop", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.2712, "total_accepted": 42400.0, "total_submissions": 156500.0, "testcase_example": "'1\\n2'", "body": "You are given k identical eggs and you have access to a building with n floors labeled from 1 to n.\nYou know that there exists a floor f where 0 <= f <= n such that any egg dropped at a floor higher than f will break, and any egg dropped at or below floor f will not break.\nEach move, you may take an unbroken egg and drop it from any floor x (where 1 <= x <= n). If the egg breaks, you can no longer use it. However, if the egg does not break, you may reuse it in future moves.\nReturn the minimum number of moves that you need to determine with certainty what the value of f is.", "examples": [{"full_text": "Example 1:\nInput: k = 1, n = 2\nOutput: 2\nExplanation:\nDrop the egg from floor 1. If it breaks, we know that f = 0.\nOtherwise, drop the egg from floor 2. If it breaks, we know that f = 1.\nIf it does not break, then we know f = 2.\nHence, we need at minimum 2 moves to determine with certainty what the value of f is.", "input": "Input: k = 1, n = 2", "output": "Output: 2", "explanation": "Explanation:\nDrop the egg from floor 1. If it breaks, we know that f = 0.\nOtherwise, drop the egg from floor 2. If it breaks, we know that f = 1.\nIf it does not break, then we know f = 2.\nHence, we need at minimum 2 moves to determine with certainty what the value of f is."}, {"full_text": "Example 2:\nInput: k = 2, n = 6\nOutput: 3", "input": "Input: k = 2, n = 6", "output": "Output: 3", "explanation": ""}, {"full_text": "Example 3:\nInput: k = 3, n = 14\nOutput: 4", "input": "Input: k = 3, n = 14", "output": "Output: 4", "explanation": ""}], "constraints": "Constraints:\n1 <= k <= 100\n1 <= n <= 10^4", "notes": ""}, "882": {"label": "Hard", "title": "Reachable Nodes In Subdivided Graph", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4968, "total_accepted": 19300.0, "total_submissions": 38900.0, "testcase_example": "'[[0,1,10],[0,2,1],[1,2,2]]\\n6\\n3'", "body": "You are given an undirected graph (the \"original graph\") with n nodes labeled from 0 to n - 1. You decide to subdivide each edge in the graph into a chain of nodes, with the number of new nodes varying between each edge.\nThe graph is given as a 2D array of edges where edges[i] = [ui, vi, cnti] indicates that there is an edge between nodes ui and vi in the original graph, and cnti is the total number of new nodes that you will subdivide the edge into. Note that cnti == 0 means you will not subdivide the edge.\nTo subdivide the edge [ui, vi], replace it with (cnti + 1) new edges and cnti new nodes. The new nodes are x1, x2, ..., xcnti, and the new edges are [ui, x1], [x1, x2], [x2, x3], ..., [xcnti-1, xcnti], [xcnti, vi].\nIn this new graph, you want to know how many nodes are reachable from the node 0, where a node is reachable if the distance is maxMoves or less.\nGiven the original graph and maxMoves, return the number of nodes that are reachable from node 0 in the new graph.", "examples": [{"full_text": "Example 1:\nInput: edges = [[0,1,10],[0,2,1],[1,2,2]], maxMoves = 6, n = 3\nOutput: 13\nExplanation: The edge subdivisions are shown in the image above.\nThe nodes that are reachable are highlighted in yellow.", "input": "Input: edges = [[0,1,10],[0,2,1],[1,2,2]], maxMoves = 6, n = 3", "output": "Output: 13", "explanation": "Explanation: The edge subdivisions are shown in the image above.\nThe nodes that are reachable are highlighted in yellow."}, {"full_text": "Example 2:\nInput: edges = [[0,1,4],[1,2,6],[0,2,8],[1,3,1]], maxMoves = 10, n = 4\nOutput: 23", "input": "Input: edges = [[0,1,4],[1,2,6],[0,2,8],[1,3,1]], maxMoves = 10, n = 4", "output": "Output: 23", "explanation": ""}, {"full_text": "Example 3:\nInput: edges = [[1,2,4],[1,4,5],[1,3,1],[2,3,4],[3,4,5]], maxMoves = 17, n = 5\nOutput: 1\nExplanation: Node 0 is disconnected from the rest of the graph, so only node 0 is reachable.", "input": "Input: edges = [[1,2,4],[1,4,5],[1,3,1],[2,3,4],[3,4,5]], maxMoves = 17, n = 5", "output": "Output: 1", "explanation": "Explanation: Node 0 is disconnected from the rest of the graph, so only node 0 is reachable."}], "constraints": "Constraints:\n0 <= edges.length <= min(n * (n - 1) / 2, 10^4)\nedges[i].length == 3\n0 <= ui < vi < n\nThere are no multiple edges in the graph.\n0 <= cnti <= 10^4\n0 <= maxMoves <= 10^9\n1 <= n <= 3000", "notes": ""}, "879": {"label": "Hard", "title": "Profitable Schemes", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.406, "total_accepted": 14200.0, "total_submissions": 35000.0, "testcase_example": "'5\\n3\\n[2,2]\\n[2,3]'", "body": "There is a group of n members, and a list of various crimes they could commit. The i^th crime generates a profit[i] and requires group[i] members to participate in it. If a member participates in one crime, that member can't participate in another crime.\nLet's call a profitable scheme any subset of these crimes that generates at least minProfit profit, and the total number of members participating in that subset of crimes is at most n.\nReturn the number of schemes that can be chosen. Since the answer may be very large, return it modulo 10^9 + 7.", "examples": [{"full_text": "Example 1:\nInput: n = 5, minProfit = 3, group = [2,2], profit = [2,3]\nOutput: 2\nExplanation: To make a profit of at least 3, the group could either commit crimes 0 and 1, or just crime 1.\nIn total, there are 2 schemes.", "input": "Input: n = 5, minProfit = 3, group = [2,2], profit = [2,3]", "output": "Output: 2", "explanation": "Explanation: To make a profit of at least 3, the group could either commit crimes 0 and 1, or just crime 1.\nIn total, there are 2 schemes."}, {"full_text": "Example 2:\nInput: n = 10, minProfit = 5, group = [2,3,5], profit = [6,7,8]\nOutput: 7\nExplanation: To make a profit of at least 5, the group could commit any crimes, as long as they commit one.\nThere are 7 possible schemes: (0), (1), (2), (0,1), (0,2), (1,2), and (0,1,2).", "input": "Input: n = 10, minProfit = 5, group = [2,3,5], profit = [6,7,8]", "output": "Output: 7", "explanation": "Explanation: To make a profit of at least 5, the group could commit any crimes, as long as they commit one.\nThere are 7 possible schemes: (0), (1), (2), (0,1), (0,2), (1,2), and (0,1,2)."}], "constraints": "Constraints:\n1 <= n <= 100\n0 <= minProfit <= 100\n1 <= group.length <= 100\n1 <= group[i] <= 100\nprofit.length == group.length\n0 <= profit[i] <= 100", "notes": ""}, "878": {"label": "Hard", "title": "Nth Magical Number", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3579, "total_accepted": 28200.0, "total_submissions": 78900.0, "testcase_example": "'1\\n2\\n3'", "body": "A positive integer is magical if it is divisible by either a or b.\nGiven the three integers n, a, and b, return the n^th magical number. Since the answer may be very large, return it modulo 10^9 + 7.", "examples": [{"full_text": "Example 1:\nInput: n = 1, a = 2, b = 3\nOutput: 2", "input": "Input: n = 1, a = 2, b = 3", "output": "Output: 2", "explanation": ""}, {"full_text": "Example 2:\nInput: n = 4, a = 2, b = 3\nOutput: 6", "input": "Input: n = 4, a = 2, b = 3", "output": "Output: 6", "explanation": ""}], "constraints": "Constraints:\n1 <= n <= 10^9\n2 <= a, b <= 4 * 10^4", "notes": ""}, "871": {"label": "Hard", "title": "Minimum Number of Refueling Stops", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3552, "total_accepted": 67100.0, "total_submissions": 188900.0, "testcase_example": "'1\\n1\\n[]'", "body": "A car travels from a starting position to a destination which is target miles east of the starting position.\nThere are gas stations along the way. The gas stations are represented as an array stations where stations[i] = [positioni, fueli] indicates that the i^th gas station is positioni miles east of the starting position and has fueli liters of gas.\nThe car starts with an infinite tank of gas, which initially has startFuel liters of fuel in it. It uses one liter of gas per one mile that it drives. When the car reaches a gas station, it may stop and refuel, transferring all the gas from the station into the car.\nReturn the minimum number of refueling stops the car must make in order to reach its destination. If it cannot reach the destination, return -1.\nNote that if the car reaches a gas station with 0 fuel left, the car can still refuel there. If the car reaches the destination with 0 fuel left, it is still considered to have arrived.", "examples": [{"full_text": "Example 1:\nInput: target = 1, startFuel = 1, stations = []\nOutput: 0\nExplanation: We can reach the target without refueling.", "input": "Input: target = 1, startFuel = 1, stations = []", "output": "Output: 0", "explanation": "Explanation: We can reach the target without refueling."}, {"full_text": "Example 2:\nInput: target = 100, startFuel = 1, stations = [[10,100]]\nOutput: -1\nExplanation: We can not reach the target (or even the first gas station).", "input": "Input: target = 100, startFuel = 1, stations = [[10,100]]", "output": "Output: -1", "explanation": "Explanation: We can not reach the target (or even the first gas station)."}, {"full_text": "Example 3:\nInput: target = 100, startFuel = 10, stations = [[10,60],[20,30],[30,30],[60,40]]\nOutput: 2\nExplanation: We start with 10 liters of fuel.\nWe drive to position 10, expending 10 liters of fuel. We refuel from 0 liters to 60 liters of gas.\nThen, we drive from position 10 to position 60 (expending 50 liters of fuel),\nand refuel from 10 liters to 50 liters of gas. We then drive to and reach the target.\nWe made 2 refueling stops along the way, so we return 2.", "input": "Input: target = 100, startFuel = 10, stations = [[10,60],[20,30],[30,30],[60,40]]", "output": "Output: 2", "explanation": "Explanation: We start with 10 liters of fuel.\nWe drive to position 10, expending 10 liters of fuel. We refuel from 0 liters to 60 liters of gas.\nThen, we drive from position 10 to position 60 (expending 50 liters of fuel),\nand refuel from 10 liters to 50 liters of gas. We then drive to and reach the target.\nWe made 2 refueling stops along the way, so we return 2."}], "constraints": "Constraints:\n1 <= target, startFuel <= 10^9\n0 <= stations.length <= 500\n0 <= positioni <= positioni+1 < target\n1 <= fueli < 10^9", "notes": ""}, "864": {"label": "Hard", "title": "Shortest Path to Get All Keys", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.44229999999999997, "total_accepted": 22000.0, "total_submissions": 49800.0, "testcase_example": "'[\"@.a.#\",\"###.#\",\"b.A.B\"]'", "body": "You are given an m x n grid grid where:\n'.' is an empty cell.\n'#' is a wall.\n'@' is the starting point.\nLowercase letters represent keys.\nUppercase letters represent locks.\nYou start at the starting point and one move consists of walking one space in one of the four cardinal directions. You cannot walk outside the grid, or walk into a wall.\nIf you walk over a key, you can pick it up and you cannot walk over a lock unless you have its corresponding key.\nFor some 1 <= k <= 6, there is exactly one lowercase and one uppercase letter of the first k letters of the English alphabet in the grid. This means that there is exactly one key for each lock, and one lock for each key; and also that the letters used to represent the keys and locks were chosen in the same order as the English alphabet.\nReturn the lowest number of moves to acquire all keys. If it is impossible, return -1.", "examples": [{"full_text": "Example 1:\nInput: grid = [\"@.a.#\",\"###.#\",\"b.A.B\"]\nOutput: 8\nExplanation: Note that the goal is to obtain all the keys not to open all the locks.", "input": "Input: grid = [\"@.a.#\",\"###.#\",\"b.A.B\"]", "output": "Output: 8", "explanation": "Explanation: Note that the goal is to obtain all the keys not to open all the locks."}, {"full_text": "Example 2:\nInput: grid = [\"@..aA\",\"..B#.\",\"....b\"]\nOutput: 6", "input": "Input: grid = [\"@..aA\",\"..B#.\",\"....b\"]", "output": "Output: 6", "explanation": ""}, {"full_text": "Example 3:\nInput: grid = [\"@Aa\"]\nOutput: -1", "input": "Input: grid = [\"@Aa\"]", "output": "Output: -1", "explanation": ""}], "constraints": "Constraints:\nm == grid.length\nn == grid[i].length\n1 <= m, n <= 30\ngrid[i][j] is either an English letter, '.', '#', or '@'.\nThe number of keys in the grid is in the range [1, 6].\nEach key in the grid is unique.\nEach key in the grid has a matching lock.", "notes": ""}, "862": {"label": "Hard", "title": "Shortest Subarray with Sum at Least K", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.2609, "total_accepted": 65300.0, "total_submissions": 250400.0, "testcase_example": "'[1]\\n1'", "body": "Given an integer array nums and an integer k, return the length of the shortest non-empty subarray of nums with a sum of at least k. If there is no such subarray, return -1.\nA subarray is a contiguous part of an array.", "examples": [{"full_text": "Example 1:\nInput: nums = [1], k = 1\nOutput: 1", "input": "Input: nums = [1], k = 1", "output": "Output: 1", "explanation": ""}, {"full_text": "Example 2:\nInput: nums = [1,2], k = 4\nOutput: -1", "input": "Input: nums = [1,2], k = 4", "output": "Output: -1", "explanation": ""}, {"full_text": "Example 3:\nInput: nums = [2,-1,2], k = 3\nOutput: 3", "input": "Input: nums = [2,-1,2], k = 3", "output": "Output: 3", "explanation": ""}], "constraints": "Constraints:\n1 <= nums.length <= 10^5\n-10^5 <= nums[i] <= 10^5\n1 <= k <= 10^9", "notes": ""}, "857": {"label": "Hard", "title": "Minimum Cost to Hire K Workers", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.516, "total_accepted": 48100.0, "total_submissions": 93300.0, "testcase_example": "'[10,20,5]\\n[70,50,30]\\n2'", "body": "There are n workers. You are given two integer arrays quality and wage where quality[i] is the quality of the i^th worker and wage[i] is the minimum wage expectation for the i^th worker.\nWe want to hire exactly k workers to form a paid group. To hire a group of k workers, we must pay them according to the following rules:\nEvery worker in the paid group should be paid in the ratio of their quality compared to other workers in the paid group.\nEvery worker in the paid group must be paid at least their minimum wage expectation.\nGiven the integer k, return the least amount of money needed to form a paid group satisfying the above conditions. Answers within 10^-5 of the actual answer will be accepted.", "examples": [{"full_text": "Example 1:\nInput: quality = [10,20,5], wage = [70,50,30], k = 2\nOutput: 105.00000\nExplanation: We pay 70 to 0^th worker and 35 to 2^nd worker.", "input": "Input: quality = [10,20,5], wage = [70,50,30], k = 2", "output": "Output: 105.00000", "explanation": "Explanation: We pay 70 to 0^th worker and 35 to 2^nd worker."}, {"full_text": "Example 2:\nInput: quality = [3,1,10,10,1], wage = [4,8,2,2,7], k = 3\nOutput: 30.66667\nExplanation: We pay 4 to 0^th worker, 13.33333 to 2^nd and 3^rd workers separately.", "input": "Input: quality = [3,1,10,10,1], wage = [4,8,2,2,7], k = 3", "output": "Output: 30.66667", "explanation": "Explanation: We pay 4 to 0^th worker, 13.33333 to 2^nd and 3^rd workers separately."}], "constraints": "Constraints:\nn == quality.length == wage.length\n1 <= k <= n <= 10^4\n1 <= quality[i], wage[i] <= 10^4", "notes": ""}, "854": {"label": "Hard", "title": "K-Similar Strings", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3914, "total_accepted": 30500.0, "total_submissions": 77900.0, "testcase_example": "'\"ab\"\\n\"ba\"'", "body": "Strings s1 and s2 are k-similar (for some non-negative integer k) if we can swap the positions of two letters in s1 exactly k times so that the resulting string equals s2.\nGiven two anagrams s1 and s2, return the smallest k for which s1 and s2 are k-similar.", "examples": [{"full_text": "Example 1:\nInput: s1 = \"ab\", s2 = \"ba\"\nOutput: 1", "input": "Input: s1 = \"ab\", s2 = \"ba\"", "output": "Output: 1", "explanation": ""}, {"full_text": "Example 2:\nInput: s1 = \"abc\", s2 = \"bca\"\nOutput: 2", "input": "Input: s1 = \"abc\", s2 = \"bca\"", "output": "Output: 2", "explanation": ""}], "constraints": "Constraints:\n1 <= s1.length <= 20\ns2.length == s1.length\ns1 and s2 contain only lowercase letters from the set {'a', 'b', 'c', 'd', 'e', 'f'}.\ns2 is an anagram of s1.", "notes": ""}, "850": {"label": "Hard", "title": "Rectangle Area II", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5324, "total_accepted": 28600.0, "total_submissions": 53700.0, "testcase_example": "'[[0,0,2,2],[1,0,2,3],[1,0,3,1]]'", "body": "You are given a 2D array of axis-aligned rectangles. Each rectangle[i] = [xi1, yi1, xi2, yi2] denotes the i^th rectangle where (xi1, yi1) are the coordinates of the bottom-left corner, and (xi2, yi2) are the coordinates of the top-right corner.\nCalculate the total area covered by all rectangles in the plane. Any area covered by two or more rectangles should only be counted once.\nReturn the total area. Since the answer may be too large, return it modulo 10^9 + 7.", "examples": [{"full_text": "Example 1:\nInput: rectangles = [[0,0,2,2],[1,0,2,3],[1,0,3,1]]\nOutput: 6\nExplanation: A total area of 6 is covered by all three rectangales, as illustrated in the picture.\nFrom (1,1) to (2,2), the green and red rectangles overlap.\nFrom (1,0) to (2,3), all three rectangles overlap.", "input": "Input: rectangles = [[0,0,2,2],[1,0,2,3],[1,0,3,1]]", "output": "Output: 6", "explanation": "Explanation: A total area of 6 is covered by all three rectangales, as illustrated in the picture.\nFrom (1,1) to (2,2), the green and red rectangles overlap.\nFrom (1,0) to (2,3), all three rectangles overlap."}, {"full_text": "Example 2:\nInput: rectangles = [[0,0,1000000000,1000000000]]\nOutput: 49\nExplanation: The answer is 10^18 modulo (10^9 + 7), which is 49.", "input": "Input: rectangles = [[0,0,1000000000,1000000000]]", "output": "Output: 49", "explanation": "Explanation: The answer is 10^18 modulo (10^9 + 7), which is 49."}], "constraints": "Constraints:\n1 <= rectangles.length <= 200\nrectanges[i].length == 4\n0 <= xi1, yi1, xi2, yi2 <= 10^9", "notes": ""}, "847": {"label": "Hard", "title": "Shortest Path Visiting All Nodes", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5613, "total_accepted": 32299.999999999996, "total_submissions": 57600.0, "testcase_example": "'[[1,2,3],[0],[0],[0]]'", "body": "You have an undirected, connected graph of n nodes labeled from 0 to n - 1. You are given an array graph where graph[i] is a list of all the nodes connected with node i by an edge.\nReturn the length of the shortest path that visits every node. You may start and stop at any node, you may revisit nodes multiple times, and you may reuse edges.", "examples": [{"full_text": "Example 1:\nInput: graph = [[1,2,3],[0],[0],[0]]\nOutput: 4\nExplanation: One possible path is [1,0,2,0,3]", "input": "Input: graph = [[1,2,3],[0],[0],[0]]", "output": "Output: 4", "explanation": "Explanation: One possible path is [1,0,2,0,3]"}, {"full_text": "Example 2:\nInput: graph = [[1],[0,2,4],[1,3,4],[2],[1,2]]\nOutput: 4\nExplanation: One possible path is [0,1,4,2,3]", "input": "Input: graph = [[1],[0,2,4],[1,3,4],[2],[1,2]]", "output": "Output: 4", "explanation": "Explanation: One possible path is [0,1,4,2,3]"}], "constraints": "Constraints:\nn == graph.length\n1 <= n <= 12\n0 <= graph[i].length <\nn\ngraph[i] does not contain i.\nIf graph[a] contains b, then graph[b] contains a.\nThe input graph is always connected.", "notes": ""}, "843": {"label": "Hard", "title": "Guess the Word", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4335, "total_accepted": 108500.0, "total_submissions": 250200.0, "testcase_example": "'\"acckzz\"\\n[\"acckzz\",\"ccbazz\",\"eiowzz\",\"abcczz\"]\\n10'", "body": "This is an interactive problem.\nYou are given an array of unique strings wordlist where wordlist[i] is 6 letters long, and one word in this list is chosen as secret.\nYou may call Master.guess(word) to guess a word. The guessed word should have type string and must be from the original list with 6 lowercase letters.\nThis function returns an integer type, representing the number of exact matches (value and position) of your guess to the secret word. Also, if your guess is not in the given wordlist, it will return -1 instead.\nFor each test case, you have exactly 10 guesses to guess the word. At the end of any number of calls, if you have made 10 or fewer calls to Master.guess and at least one of these guesses was secret, then you pass the test case.", "examples": [{"full_text": "Example 1:\nInput: secret = \"acckzz\", wordlist = [\"acckzz\",\"ccbazz\",\"eiowzz\",\"abcczz\"], numguesses = 10\nOutput: You guessed the secret word correctly.\nExplanation:\nmaster.guess(\"aaaaaa\") returns -1, because \"aaaaaa\" is not in wordlist.\nmaster.guess(\"acckzz\") returns 6, because \"acckzz\" is secret and has all 6 matches.\nmaster.guess(\"ccbazz\") returns 3, because \"ccbazz\" has 3 matches.\nmaster.guess(\"eiowzz\") returns 2, because \"eiowzz\" has 2 matches.\nmaster.guess(\"abcczz\") returns 4, because \"abcczz\" has 4 matches.\nWe made 5 calls to master.guess and one of them was the secret, so we pass the test case.", "input": "Input: secret = \"acckzz\", wordlist = [\"acckzz\",\"ccbazz\",\"eiowzz\",\"abcczz\"], numguesses = 10", "output": "Output: You guessed the secret word correctly.", "explanation": "Explanation:\nmaster.guess(\"aaaaaa\") returns -1, because \"aaaaaa\" is not in wordlist.\nmaster.guess(\"acckzz\") returns 6, because \"acckzz\" is secret and has all 6 matches.\nmaster.guess(\"ccbazz\") returns 3, because \"ccbazz\" has 3 matches.\nmaster.guess(\"eiowzz\") returns 2, because \"eiowzz\" has 2 matches.\nmaster.guess(\"abcczz\") returns 4, because \"abcczz\" has 4 matches.\nWe made 5 calls to master.guess and one of them was the secret, so we pass the test case."}, {"full_text": "Example 2:\nInput: secret = \"hamada\", wordlist = [\"hamada\",\"khaled\"], numguesses = 10\nOutput: You guessed the secret word correctly.", "input": "Input: secret = \"hamada\", wordlist = [\"hamada\",\"khaled\"], numguesses = 10", "output": "Output: You guessed the secret word correctly.", "explanation": ""}], "constraints": "Constraints:\n1 <= wordlist.length <= 100\nwordlist[i].length == 6\nwordlist[i] consist of lowercase English letters.\nAll the strings of wordlist are unique.\nsecret exists in wordlist.\nnumguesses == 10", "notes": ""}, "839": {"label": "Hard", "title": "Similar String Groups", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.44880000000000003, "total_accepted": 47700.0, "total_submissions": 106300.0, "testcase_example": "'[\"tars\",\"rats\",\"arts\",\"star\"]'", "body": "Two strings X\nand Y\nare similar if we can swap two letters (in different positions) of X, so that\nit equals Y. Also two strings X and Y are similar if they are equal.\nFor example, \"tars\"\nand \"rats\"\nare similar (swapping at positions 0 and 2), and \"rats\" and \"arts\" are similar, but \"star\" is not similar to \"tars\", \"rats\", or \"arts\".\nTogether, these form two connected groups by similarity: {\"tars\", \"rats\", \"arts\"} and {\"star\"}.\nNotice that \"tars\" and \"arts\" are in the same group even though they are not similar.\nFormally, each group is such that a word is in the group if and only if it is similar to at least one other word in the group.\nWe are given a list strs of strings where every string in strs is an anagram of every other string in strs. How many groups are there?", "examples": [{"full_text": "Example 1:\nInput: strs = [\"tars\",\"rats\",\"arts\",\"star\"]\nOutput: 2", "input": "Input: strs = [\"tars\",\"rats\",\"arts\",\"star\"]", "output": "Output: 2", "explanation": ""}, {"full_text": "Example 2:\nInput: strs = [\"omv\",\"ovm\"]\nOutput: 1", "input": "Input: strs = [\"omv\",\"ovm\"]", "output": "Output: 1", "explanation": ""}], "constraints": "Constraints:\n1 <= strs.length <= 300\n1 <= strs[i].length <= 300\nstrs[i] consists of lowercase letters only.\nAll words in strs have the same length and are anagrams of each other.", "notes": ""}, "834": {"label": "Hard", "title": "Sum of Distances in Tree", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5271, "total_accepted": 39500.0, "total_submissions": 74900.0, "testcase_example": "'6\\n[[0,1],[0,2],[2,3],[2,4],[2,5]]'", "body": "There is an undirected connected tree with n nodes labeled from 0 to n - 1 and n - 1 edges.\nYou are given the integer n and the array edges where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree.\nReturn an array answer of length n where answer[i] is the sum of the distances between the i^th node in the tree and all other nodes.", "examples": [{"full_text": "Example 1:\nInput: n = 6, edges = [[0,1],[0,2],[2,3],[2,4],[2,5]]\nOutput: [8,12,6,10,10,10]\nExplanation: The tree is shown above.\nWe can see that dist(0,1) + dist(0,2) + dist(0,3) + dist(0,4) + dist(0,5)\nequals 1 + 1 + 2 + 2 + 2 = 8.\nHence, answer[0] = 8, and so on.", "input": "Input: n = 6, edges = [[0,1],[0,2],[2,3],[2,4],[2,5]]", "output": "Output: [8,12,6,10,10,10]", "explanation": "Explanation: The tree is shown above.\nWe can see that dist(0,1) + dist(0,2) + dist(0,3) + dist(0,4) + dist(0,5)\nequals 1 + 1 + 2 + 2 + 2 = 8.\nHence, answer[0] = 8, and so on."}, {"full_text": "Example 2:\nInput: n = 1, edges = []\nOutput: [0]", "input": "Input: n = 1, edges = []", "output": "Output: [0]", "explanation": ""}, {"full_text": "Example 3:\nInput: n = 2, edges = [[1,0]]\nOutput: [1,1]", "input": "Input: n = 2, edges = [[1,0]]", "output": "Output: [1,1]", "explanation": ""}], "constraints": "Constraints:\n1 <= n <= 3 * 10^4\nedges.length == n - 1\nedges[i].length == 2\n0 <= ai, bi < n\nai != bi\nThe given input represents a valid tree.", "notes": ""}, "829": {"label": "Hard", "title": "Consecutive Numbers Sum", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.408, "total_accepted": 64800.0, "total_submissions": 158900.0, "testcase_example": "'5'", "body": "Given an integer n, return the number of ways you can write n as the sum of consecutive positive integers.", "examples": [{"full_text": "Example 1:\nInput: n = 5\nOutput: 2\nExplanation: 5 = 2 + 3", "input": "Input: n = 5", "output": "Output: 2", "explanation": "Explanation: 5 = 2 + 3"}, {"full_text": "Example 2:\nInput: n = 9\nOutput: 3\nExplanation: 9 = 4 + 5 = 2 + 3 + 4", "input": "Input: n = 9", "output": "Output: 3", "explanation": "Explanation: 9 = 4 + 5 = 2 + 3 + 4"}, {"full_text": "Example 3:\nInput: n = 15\nOutput: 4\nExplanation: 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5", "input": "Input: n = 15", "output": "Output: 4", "explanation": "Explanation: 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5"}], "constraints": "Constraints:\n1 <= n <= 10^9", "notes": ""}, "828": {"label": "Hard", "title": "Count Unique Characters of All Substrings of a Given String", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4919, "total_accepted": 31100.0, "total_submissions": 63100.0, "testcase_example": "'\"ABC\"'", "body": "Let's define a function countUniqueChars(s) that returns the number of unique characters on s.\nFor example, calling countUniqueChars(s) if s = \"LEETCODE\" then \"L\", \"T\", \"C\", \"O\", \"D\" are the unique characters since they appear only once in s, therefore countUniqueChars(s) = 5.\nGiven a string s, return the sum of countUniqueChars(t) where t is a substring of s.\nNotice that some substrings can be repeated so in this case you have to count the repeated ones too.", "examples": [{"full_text": "Example 1:\nInput: s = \"ABC\"\nOutput: 10\nExplanation: All possible substrings are: \"A\",\"B\",\"C\",\"AB\",\"BC\" and \"ABC\".\nEvey substring is composed with only unique letters.\nSum of lengths of all substring is 1 + 1 + 1 + 2 + 2 + 3 = 10", "input": "Input: s = \"ABC\"", "output": "Output: 10", "explanation": "Explanation: All possible substrings are: \"A\",\"B\",\"C\",\"AB\",\"BC\" and \"ABC\".\nEvey substring is composed with only unique letters.\nSum of lengths of all substring is 1 + 1 + 1 + 2 + 2 + 3 = 10"}, {"full_text": "Example 2:\nInput: s = \"ABA\"\nOutput: 8\nExplanation: The same as example 1, except countUniqueChars(\"ABA\") = 1.", "input": "Input: s = \"ABA\"", "output": "Output: 8", "explanation": "Explanation: The same as example 1, except countUniqueChars(\"ABA\") = 1."}, {"full_text": "Example 3:\nInput: s = \"LEETCODE\"\nOutput: 92", "input": "Input: s = \"LEETCODE\"", "output": "Output: 92", "explanation": ""}], "constraints": "Constraints:\n1 <= s.length <= 10^5\ns consists of uppercase English letters only.", "notes": ""}, "827": {"label": "Hard", "title": "Making A Large Island", "tags": "algorithms", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4464, "total_accepted": 96300.0, "total_submissions": 215800.0, "testcase_example": "'[[1,0],[0,1]]'", "body": "You are given an n x n binary matrix grid. You are allowed to change at most one 0 to be 1.\nReturn the size of the largest island in grid after applying this operation.\nAn island is a 4-directionally connected group of 1s.", "examples": [{"full_text": "Example 1:\nInput: grid = [[1,0],[0,1]]\nOutput: 3\nExplanation: Change one 0 to 1 and connect two 1s, then we get an island with area = 3.", "input": "Input: grid = [[1,0],[0,1]]", "output": "Output: 3", "explanation": "Explanation: Change one 0 to 1 and connect two 1s, then we get an island with area = 3."}, {"full_text": "Example 2:\nInput: grid = [[1,1],[1,0]]\nOutput: 4\nExplanation: Change the 0 to 1 and make the island bigger, only one island with area = 4.", "input": "Input: grid = [[1,1],[1,0]]", "output": "Output: 4", "explanation": "Explanation: Change the 0 to 1 and make the island bigger, only one island with area = 4."}, {"full_text": "Example 3:\nInput: grid = [[1,1],[1,1]]\nOutput: 4\nExplanation: Can't change any 0 to 1, only one island with area = 4.", "input": "Input: grid = [[1,1],[1,1]]", "output": "Output: 4", "explanation": "Explanation: Can't change any 0 to 1, only one island with area = 4."}], "constraints": "Constraints:\nn == grid.length\nn == grid[i].length\n1 <= n <= 500\ngrid[i][j] is either 0 or 1.", "notes": ""}, "818": {"label": "Hard", "title": "Race Car", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4178, "total_accepted": 30800.0, "total_submissions": 73800.0, "testcase_example": "'3'", "body": "Your car starts at position 0 and speed +1 on an infinite number line. Your car can go into negative positions. Your car drives automatically according to a sequence of instructions 'A' (accelerate) and 'R' (reverse):\nWhen you get an instruction 'A', your car does the following:\n\nposition += speed\nspeed *= 2\n\n\nWhen you get an instruction 'R', your car does the following:\n\nIf your speed is positive then speed = -1\notherwise speed = 1\n\nYour position stays the same.\nFor example, after commands \"AAR\", your car goes to positions 0 --> 1 --> 3 --> 3, and your speed goes to 1 --> 2 --> 4 --> -1.\nGiven a target position target, return the length of the shortest sequence of instructions to get there.", "examples": [{"full_text": "Example 1:\nInput: target = 3\nOutput: 2\nExplanation:\nThe shortest instruction sequence is \"AA\".\nYour position goes from 0 --> 1 --> 3.", "input": "Input: target = 3", "output": "Output: 2", "explanation": "Explanation:\nThe shortest instruction sequence is \"AA\".\nYour position goes from 0 --> 1 --> 3."}, {"full_text": "Example 2:\nInput: target = 6\nOutput: 5\nExplanation:\nThe shortest instruction sequence is \"AAARA\".\nYour position goes from 0 --> 1 --> 3 --> 7 --> 7 --> 6.", "input": "Input: target = 6", "output": "Output: 5", "explanation": "Explanation:\nThe shortest instruction sequence is \"AAARA\".\nYour position goes from 0 --> 1 --> 3 --> 7 --> 7 --> 6."}], "constraints": "Constraints:\n1 <= target <= 10^4", "notes": ""}, "815": {"label": "Hard", "title": "Bus Routes", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4501, "total_accepted": 75800.0, "total_submissions": 168300.0, "testcase_example": "'[[1,2,7],[3,6,7]]\\n1\\n6'", "body": "You are given an array routes representing bus routes where routes[i] is a bus route that the i^th bus repeats forever.\nFor example, if routes[0] = [1, 5, 7], this means that the 0^th bus travels in the sequence 1 -> 5 -> 7 -> 1 -> 5 -> 7 -> 1 -> ... forever.\nYou will start at the bus stop source (You are not on any bus initially), and you want to go to the bus stop target. You can travel between bus stops by buses only.\nReturn the least number of buses you must take to travel from source to target. Return -1 if it is not possible.", "examples": [{"full_text": "Example 1:\nInput: routes = [[1,2,7],[3,6,7]], source = 1, target = 6\nOutput: 2\nExplanation: The best strategy is take the first bus to the bus stop 7, then take the second bus to the bus stop 6.", "input": "Input: routes = [[1,2,7],[3,6,7]], source = 1, target = 6", "output": "Output: 2", "explanation": "Explanation: The best strategy is take the first bus to the bus stop 7, then take the second bus to the bus stop 6."}, {"full_text": "Example 2:\nInput: routes = [[7,12],[4,5,15],[6],[15,19],[9,12,13]], source = 15, target = 12\nOutput: -1", "input": "Input: routes = [[7,12],[4,5,15],[6],[15,19],[9,12,13]], source = 15, target = 12", "output": "Output: -1", "explanation": ""}], "constraints": "Constraints:\n1 <= routes.length <= 500.\n1 <= routes[i].length <= 10^5\nAll the values of routes[i] are unique.\nsum(routes[i].length) <= 10^5\n0 <= routes[i][j] < 10^6\n0 <= source, target < 10^6", "notes": ""}, "810": {"label": "Hard", "title": "Chalkboard XOR Game", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5276, "total_accepted": 6200.0, "total_submissions": 11800.0, "testcase_example": "'[1,1,2]'", "body": "You are given an array of integers nums represents the numbers written on a chalkboard.\nAlice and Bob take turns erasing exactly one number from the chalkboard, with Alice starting first. If erasing a number causes the bitwise XOR of all the elements of the chalkboard to become 0, then that player loses. The bitwise XOR of one element is that element itself, and the bitwise XOR of no elements is 0.\nAlso, if any player starts their turn with the bitwise XOR of all the elements of the chalkboard equal to 0, then that player wins.\nReturn true if and only if Alice wins the game, assuming both players play optimally.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,1,2]\nOutput: false\nExplanation:\nAlice has two choices: erase 1 or erase 2.\nIf she erases 1, the nums array becomes [1, 2]. The bitwise XOR of all the elements of the chalkboard is 1 XOR 2 = 3. Now Bob can remove any element he wants, because Alice will be the one to erase the last element and she will lose.\nIf Alice erases 2 first, now nums become [1, 1]. The bitwise XOR of all the elements of the chalkboard is 1 XOR 1 = 0. Alice will lose.", "input": "Input: nums = [1,1,2]", "output": "Output: false", "explanation": "Explanation:\nAlice has two choices: erase 1 or erase 2.\nIf she erases 1, the nums array becomes [1, 2]. The bitwise XOR of all the elements of the chalkboard is 1 XOR 2 = 3. Now Bob can remove any element he wants, because Alice will be the one to erase the last element and she will lose.\nIf Alice erases 2 first, now nums become [1, 1]. The bitwise XOR of all the elements of the chalkboard is 1 XOR 1 = 0. Alice will lose."}, {"full_text": "Example 2:\nInput: nums = [0,1]\nOutput: true", "input": "Input: nums = [0,1]", "output": "Output: true", "explanation": ""}, {"full_text": "Example 3:\nInput: nums = [1,2,3]\nOutput: true", "input": "Input: nums = [1,2,3]", "output": "Output: true", "explanation": ""}], "constraints": "Constraints:\n1 <= nums.length <= 1000\n0 <= nums[i] < 2^16", "notes": ""}, "805": {"label": "Hard", "title": "Split Array With Same Average", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.266, "total_accepted": 24600.0, "total_submissions": 92300.0, "testcase_example": "'[1,2,3,4,5,6,7,8]'", "body": "You are given an integer array nums.\nYou should move each element of nums into one of the two arrays A and B such that A and B are non-empty, and average(A) == average(B).\nReturn true if it is possible to achieve that and false otherwise.\nNote that for an array arr, average(arr) is the sum of all the elements of arr over the length of arr.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,2,3,4,5,6,7,8]\nOutput: true\nExplanation: We can split the array into [1,4,5,8] and [2,3,6,7], and both of them have an average of 4.5.", "input": "Input: nums = [1,2,3,4,5,6,7,8]", "output": "Output: true", "explanation": "Explanation: We can split the array into [1,4,5,8] and [2,3,6,7], and both of them have an average of 4.5."}, {"full_text": "Example 2:\nInput: nums = [3,1]\nOutput: false", "input": "Input: nums = [3,1]", "output": "Output: false", "explanation": ""}], "constraints": "Constraints:\n1 <= nums.length <= 30\n0 <= nums[i] <= 10^4", "notes": ""}, "803": {"label": "Hard", "title": "Bricks Falling When Hit", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.33549999999999996, "total_accepted": 23700.0, "total_submissions": 70500.0, "testcase_example": "'[[1,0,0,0],[1,1,1,0]]\\n[[1,0]]'", "body": "You are given an m x n binary grid, where each 1 represents a brick and 0 represents an empty space. A brick is stable if:\nIt is directly connected to the top of the grid, or\nAt least one other brick in its four adjacent cells is stable.\nYou are also given an array hits, which is a sequence of erasures we want to apply. Each time we want to erase the brick at the location hits[i] = (rowi, coli). The brick on that location\n(if it exists) will disappear. Some other bricks may no longer be stable because of that erasure and will fall. Once a brick falls, it is immediately erased from the grid (i.e., it does not land on other stable bricks).\nReturn an array result, where each result[i] is the number of bricks that will fall after the i^th erasure is applied.\nNote that an erasure may refer to a location with no brick, and if it does, no bricks drop.", "examples": [{"full_text": "Example 1:\nInput: grid = [[1,0,0,0],[1,1,1,0]], hits = [[1,0]]\nOutput: [2]\nExplanation: Starting with the grid:\n[[1,0,0,0],\n[1,1,1,0]]\nWe erase the underlined brick at (1,0), resulting in the grid:\n[[1,0,0,0],\n[0,1,1,0]]\nThe two underlined bricks are no longer stable as they are no longer connected to the top nor adjacent to another stable brick, so they will fall. The resulting grid is:\n[[1,0,0,0],\n[0,0,0,0]]\nHence the result is [2].", "input": "Input: grid = [[1,0,0,0],[1,1,1,0]], hits = [[1,0]]", "output": "Output: [2]", "explanation": "Explanation: Starting with the grid:\n[[1,0,0,0],\n[1,1,1,0]]\nWe erase the underlined brick at (1,0), resulting in the grid:\n[[1,0,0,0],\n[0,1,1,0]]\nThe two underlined bricks are no longer stable as they are no longer connected to the top nor adjacent to another stable brick, so they will fall. The resulting grid is:\n[[1,0,0,0],\n[0,0,0,0]]\nHence the result is [2]."}, {"full_text": "Example 2:\nInput: grid = [[1,0,0,0],[1,1,0,0]], hits = [[1,1],[1,0]]\nOutput: [0,0]\nExplanation: Starting with the grid:\n[[1,0,0,0],\n[1,1,0,0]]\nWe erase the underlined brick at (1,1), resulting in the grid:\n[[1,0,0,0],\n[1,0,0,0]]\nAll remaining bricks are still stable, so no bricks fall. The grid remains the same:\n[[1,0,0,0],\n[1,0,0,0]]\nNext, we erase the underlined brick at (1,0), resulting in the grid:\n[[1,0,0,0],\n[0,0,0,0]]\nOnce again, all remaining bricks are still stable, so no bricks fall.\nHence the result is [0,0].", "input": "Input: grid = [[1,0,0,0],[1,1,0,0]], hits = [[1,1],[1,0]]", "output": "Output: [0,0]", "explanation": "Explanation: Starting with the grid:\n[[1,0,0,0],\n[1,1,0,0]]\nWe erase the underlined brick at (1,1), resulting in the grid:\n[[1,0,0,0],\n[1,0,0,0]]\nAll remaining bricks are still stable, so no bricks fall. The grid remains the same:\n[[1,0,0,0],\n[1,0,0,0]]\nNext, we erase the underlined brick at (1,0), resulting in the grid:\n[[1,0,0,0],\n[0,0,0,0]]\nOnce again, all remaining bricks are still stable, so no bricks fall.\nHence the result is [0,0]."}], "constraints": "Constraints:\nm == grid.length\nn == grid[i].length\n1 <= m, n <= 200\ngrid[i][j] is 0 or 1.\n1 <= hits.length <= 4 * 10^4\nhits[i].length == 2\n0 <= xi\n<= m - 1\n0 <=\nyi <= n - 1\nAll (xi, yi) are unique.", "notes": ""}, "801": {"label": "Hard", "title": "Minimum Swaps To Make Sequences Increasing", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3923, "total_accepted": 51200.0, "total_submissions": 130500.0, "testcase_example": "'[1,3,5,4]\\n[1,2,3,7]'", "body": "You are given two integer arrays of the same length nums1 and nums2. In one operation, you are allowed to swap nums1[i] with nums2[i].\nFor example, if nums1 = [1,2,3,8], and nums2 = [5,6,7,4], you can swap the element at i = 3 to obtain nums1 = [1,2,3,4] and nums2 = [5,6,7,8].\nReturn the minimum number of needed operations to make nums1 and nums2 strictly increasing. The test cases are generated so that the given input always makes it possible.\nAn array arr is strictly increasing if and only if arr[0] < arr[1] < arr[2] < ... < arr[arr.length - 1].", "examples": [{"full_text": "Example 1:\nInput: nums1 = [1,3,5,4], nums2 = [1,2,3,7]\nOutput: 1\nExplanation:\nSwap nums1[3] and nums2[3]. Then the sequences are:\nnums1 = [1, 3, 5, 7] and nums2 = [1, 2, 3, 4]\nwhich are both strictly increasing.", "input": "Input: nums1 = [1,3,5,4], nums2 = [1,2,3,7]", "output": "Output: 1", "explanation": "Explanation:\nSwap nums1[3] and nums2[3]. Then the sequences are:\nnums1 = [1, 3, 5, 7] and nums2 = [1, 2, 3, 4]\nwhich are both strictly increasing."}, {"full_text": "Example 2:\nInput: nums1 = [0,3,5,8,9], nums2 = [2,1,4,6,9]\nOutput: 1", "input": "Input: nums1 = [0,3,5,8,9], nums2 = [2,1,4,6,9]", "output": "Output: 1", "explanation": ""}], "constraints": "Constraints:\n2 <= nums1.length <= 10^5\nnums2.length == nums1.length\n0 <= nums1[i], nums2[i] <= 2 * 10^5", "notes": ""}, "798": {"label": "Hard", "title": "Smallest Rotation with Highest Score", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.46869999999999995, "total_accepted": 8300.0, "total_submissions": 17700.0, "testcase_example": "'[2,3,1,4,0]'", "body": "You are given an array nums. You can rotate it by a non-negative integer k so that the array becomes [nums[k], nums[k + 1], ... nums[nums.length - 1], nums[0], nums[1], ..., nums[k-1]]. Afterward, any entries that are less than or equal to their index are worth one point.\nFor example, if we have nums = [2,4,1,3,0], and we rotate by k = 2, it becomes [1,3,0,2,4]. This is worth 3 points because 1 > 0 [no points], 3 > 1 [no points], 0 <= 2 [one point], 2 <= 3 [one point], 4 <= 4 [one point].\nReturn the rotation index k that corresponds to the highest score we can achieve if we rotated nums by it. If there are multiple answers, return the smallest such index k.", "examples": [{"full_text": "Example 1:\nInput: nums = [2,3,1,4,0]\nOutput: 3\nExplanation: Scores for each k are listed below:\nk = 0, nums = [2,3,1,4,0], score 2\nk = 1, nums = [3,1,4,0,2], score 3\nk = 2, nums = [1,4,0,2,3], score 3\nk = 3, nums = [4,0,2,3,1], score 4\nk = 4, nums = [0,2,3,1,4], score 3\nSo we should choose k = 3, which has the highest score.", "input": "Input: nums = [2,3,1,4,0]", "output": "Output: 3", "explanation": "Explanation: Scores for each k are listed below:\nk = 0, nums = [2,3,1,4,0], score 2\nk = 1, nums = [3,1,4,0,2], score 3\nk = 2, nums = [1,4,0,2,3], score 3\nk = 3, nums = [4,0,2,3,1], score 4\nk = 4, nums = [0,2,3,1,4], score 3\nSo we should choose k = 3, which has the highest score."}, {"full_text": "Example 2:\nInput: nums = [1,3,0,2,4]\nOutput: 0\nExplanation: nums will always have 3 points no matter how it shifts.\nSo we will choose the smallest k, which is 0.", "input": "Input: nums = [1,3,0,2,4]", "output": "Output: 0", "explanation": "Explanation: nums will always have 3 points no matter how it shifts.\nSo we will choose the smallest k, which is 0."}], "constraints": "Constraints:\n1 <= nums.length <= 10^5\n0 <= nums[i] < nums.length", "notes": ""}, "793": {"label": "Hard", "title": "Preimage Size of Factorial Zeroes Function", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4143, "total_accepted": 11700.0, "total_submissions": 28200.0, "testcase_example": "'0'", "body": "Let f(x) be the number of zeroes at the end of x!. Recall that x! = 1 * 2 * 3 * ... * x and by convention, 0! = 1.\nFor example, f(3) = 0 because 3! = 6 has no zeroes at the end, while f(11) = 2 because 11! = 39916800 has two zeroes at the end.\nGiven an integer k, return the number of non-negative integers x have the property that f(x) = k.", "examples": [{"full_text": "Example 1:\nInput: k = 0\nOutput: 5\nExplanation: 0!, 1!, 2!, 3!, and 4! end with k = 0 zeroes.", "input": "Input: k = 0", "output": "Output: 5", "explanation": "Explanation: 0!, 1!, 2!, 3!, and 4! end with k = 0 zeroes."}, {"full_text": "Example 2:\nInput: k = 5\nOutput: 0\nExplanation: There is no x such that x! ends in k = 5 zeroes.", "input": "Input: k = 5", "output": "Output: 0", "explanation": "Explanation: There is no x such that x! ends in k = 5 zeroes."}, {"full_text": "Example 3:\nInput: k = 3\nOutput: 5", "input": "Input: k = 3", "output": "Output: 5", "explanation": ""}], "constraints": "Constraints:\n0 <= k <= 10^9", "notes": ""}, "786": {"label": "Hard", "title": "K-th Smallest Prime Fraction", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4788, "total_accepted": 24800.0, "total_submissions": 51900.0, "testcase_example": "'[1,2,3,5]\\n3'", "body": "You are given a sorted integer array arr containing 1 and prime numbers, where all the integers of arr are unique. You are also given an integer k.\nFor every i and j where 0 <= i < j < arr.length, we consider the fraction arr[i] / arr[j].\nReturn the k^th smallest fraction considered. Return your answer as an array of integers of size 2, where answer[0] == arr[i] and answer[1] == arr[j].", "examples": [{"full_text": "Example 1:\nInput: arr = [1,2,3,5], k = 3\nOutput: [2,5]\nExplanation: The fractions to be considered in sorted order are:\n1/5, 1/3, 2/5, 1/2, 3/5, and 2/3.\nThe third fraction is 2/5.", "input": "Input: arr = [1,2,3,5], k = 3", "output": "Output: [2,5]", "explanation": "Explanation: The fractions to be considered in sorted order are:\n1/5, 1/3, 2/5, 1/2, 3/5, and 2/3.\nThe third fraction is 2/5."}, {"full_text": "Example 2:\nInput: arr = [1,7], k = 1\nOutput: [1,7]", "input": "Input: arr = [1,7], k = 1", "output": "Output: [1,7]", "explanation": ""}], "constraints": "Constraints:\n2 <= arr.length <= 1000\n1 <= arr[i] <= 3 * 10^4\narr[0] == 1\narr[i] is a prime number for i > 0.\nAll the numbers of arr are unique and sorted in strictly increasing order.\n1 <= k <= arr.length * (arr.length - 1) / 2", "notes": ""}, "782": {"label": "Hard", "title": "Transform to Chessboard", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5214, "total_accepted": 14800.0, "total_submissions": 28400.0, "testcase_example": "'[[0,1,1,0],[0,1,1,0],[1,0,0,1],[1,0,0,1]]'", "body": "You are given an n x n binary grid board. In each move, you can swap any two rows with each other, or any two columns with each other.\nReturn the minimum number of moves to transform the board into a chessboard board. If the task is impossible, return -1.\nA chessboard board is a board where no 0's and no 1's are 4-directionally adjacent.", "examples": [{"full_text": "Example 1:\nInput: board = [[0,1,1,0],[0,1,1,0],[1,0,0,1],[1,0,0,1]]\nOutput: 2\nExplanation: One potential sequence of moves is shown.\nThe first move swaps the first and second column.\nThe second move swaps the second and third row.", "input": "Input: board = [[0,1,1,0],[0,1,1,0],[1,0,0,1],[1,0,0,1]]", "output": "Output: 2", "explanation": "Explanation: One potential sequence of moves is shown.\nThe first move swaps the first and second column.\nThe second move swaps the second and third row."}, {"full_text": "Example 2:\nInput: board = [[0,1],[1,0]]\nOutput: 0\nExplanation: Also note that the board with 0 in the top left corner, is also a valid chessboard.", "input": "Input: board = [[0,1],[1,0]]", "output": "Output: 0", "explanation": "Explanation: Also note that the board with 0 in the top left corner, is also a valid chessboard."}, {"full_text": "Example 3:\nInput: board = [[1,0],[1,0]]\nOutput: -1\nExplanation: No matter what sequence of moves you make, you cannot end with a valid chessboard.", "input": "Input: board = [[1,0],[1,0]]", "output": "Output: -1", "explanation": "Explanation: No matter what sequence of moves you make, you cannot end with a valid chessboard."}], "constraints": "Constraints:\nn == board.length\nn == board[i].length\n2 <= n <= 30\nboard[i][j] is either\n0 or 1.", "notes": ""}, "780": {"label": "Hard", "title": "Reaching Points", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3135, "total_accepted": 39100.0, "total_submissions": 124600.0, "testcase_example": "'1\\n1\\n3\\n5'", "body": "Given four integers sx, sy, tx, and ty, return true if it is possible to convert the point (sx, sy) to the point (tx, ty) through some operations, or false otherwise.\nThe allowed operation on some point (x, y) is to convert it to either (x, x + y) or (x + y, y).", "examples": [{"full_text": "Example 1:\nInput: sx = 1, sy = 1, tx = 3, ty = 5\nOutput: true\nExplanation:\nOne series of moves that transforms the starting point to the target is:\n(1, 1) -> (1, 2)\n(1, 2) -> (3, 2)\n(3, 2) -> (3, 5)", "input": "Input: sx = 1, sy = 1, tx = 3, ty = 5", "output": "Output: true", "explanation": "Explanation:\nOne series of moves that transforms the starting point to the target is:\n(1, 1) -> (1, 2)\n(1, 2) -> (3, 2)\n(3, 2) -> (3, 5)"}, {"full_text": "Example 2:\nInput: sx = 1, sy = 1, tx = 2, ty = 2\nOutput: false", "input": "Input: sx = 1, sy = 1, tx = 2, ty = 2", "output": "Output: false", "explanation": ""}, {"full_text": "Example 3:\nInput: sx = 1, sy = 1, tx = 1, ty = 1\nOutput: true", "input": "Input: sx = 1, sy = 1, tx = 1, ty = 1", "output": "Output: true", "explanation": ""}], "constraints": "Constraints:\n1 <= sx, sy, tx, ty <= 10^9", "notes": ""}, "778": {"label": "Hard", "title": "Swim in Rising Water", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5832999999999999, "total_accepted": 67800.0, "total_submissions": 116300.0, "testcase_example": "'[[0,2],[1,3]]'", "body": "You are given an n x n integer matrix grid where each value grid[i][j] represents the elevation at that point (i, j).\nThe rain starts to fall. At time t, the depth of the water everywhere is t. You can swim from a square to another 4-directionally adjacent square if and only if the elevation of both squares individually are at most t. You can swim infinite distances in zero time. Of course, you must stay within the boundaries of the grid during your swim.\nReturn the least time until you can reach the bottom right square (n - 1, n - 1) if you start at the top left square (0, 0).", "examples": [{"full_text": "Example 1:\nInput: grid = [[0,2],[1,3]]\nOutput: 3\nExplanation:\nAt time 0, you are in grid location (0, 0).\nYou cannot go anywhere else because 4-directionally adjacent neighbors have a higher elevation than t = 0.\nYou cannot reach point (1, 1) until time 3.\nWhen the depth of water is 3, we can swim anywhere inside the grid.", "input": "Input: grid = [[0,2],[1,3]]", "output": "Output: 3", "explanation": "Explanation:\nAt time 0, you are in grid location (0, 0).\nYou cannot go anywhere else because 4-directionally adjacent neighbors have a higher elevation than t = 0.\nYou cannot reach point (1, 1) until time 3.\nWhen the depth of water is 3, we can swim anywhere inside the grid."}, {"full_text": "Example 2:\nInput: grid = [[0,1,2,3,4],[24,23,22,21,5],[12,13,14,15,16],[11,17,18,19,20],[10,9,8,7,6]]\nOutput: 16\nExplanation: The final route is shown.\nWe need to wait until time 16 so that (0, 0) and (4, 4) are connected.", "input": "Input: grid = [[0,1,2,3,4],[24,23,22,21,5],[12,13,14,15,16],[11,17,18,19,20],[10,9,8,7,6]]", "output": "Output: 16", "explanation": "Explanation: The final route is shown.\nWe need to wait until time 16 so that (0, 0) and (4, 4) are connected."}], "constraints": "Constraints:\nn == grid.length\nn == grid[i].length\n1 <= n <= 50\n0 <= grid[i][j] <\nn^2\nEach value grid[i][j] is unique.", "notes": ""}, "773": {"label": "Hard", "title": "Sliding Puzzle", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6294, "total_accepted": 67700.0, "total_submissions": 107600.0, "testcase_example": "'[[1,2,3],[4,0,5]]'", "body": "On an 2 x 3 board, there are five tiles labeled from 1 to 5, and an empty square represented by 0. A move consists of choosing 0 and a 4-directionally adjacent number and swapping it.\nThe state of the board is solved if and only if the board is [[1,2,3],[4,5,0]].\nGiven the puzzle board board, return the least number of moves required so that the state of the board is solved. If it is impossible for the state of the board to be solved, return -1.", "examples": [{"full_text": "Example 1:\nInput: board = [[1,2,3],[4,0,5]]\nOutput: 1\nExplanation: Swap the 0 and the 5 in one move.", "input": "Input: board = [[1,2,3],[4,0,5]]", "output": "Output: 1", "explanation": "Explanation: Swap the 0 and the 5 in one move."}, {"full_text": "Example 2:\nInput: board = [[1,2,3],[5,4,0]]\nOutput: -1\nExplanation: No number of moves will make the board solved.", "input": "Input: board = [[1,2,3],[5,4,0]]", "output": "Output: -1", "explanation": "Explanation: No number of moves will make the board solved."}, {"full_text": "Example 3:\nInput: board = [[4,1,2],[5,0,3]]\nOutput: 5\nExplanation: 5 is the smallest number of moves that solves the board.\nAn example path:\nAfter move 0: [[4,1,2],[5,0,3]]\nAfter move 1: [[4,1,2],[0,5,3]]\nAfter move 2: [[0,1,2],[4,5,3]]\nAfter move 3: [[1,0,2],[4,5,3]]\nAfter move 4: [[1,2,0],[4,5,3]]\nAfter move 5: [[1,2,3],[4,5,0]]", "input": "Input: board = [[4,1,2],[5,0,3]]", "output": "Output: 5", "explanation": "Explanation: 5 is the smallest number of moves that solves the board.\nAn example path:\nAfter move 0: [[4,1,2],[5,0,3]]\nAfter move 1: [[4,1,2],[0,5,3]]\nAfter move 2: [[0,1,2],[4,5,3]]\nAfter move 3: [[1,0,2],[4,5,3]]\nAfter move 4: [[1,2,0],[4,5,3]]\nAfter move 5: [[1,2,3],[4,5,0]]"}], "constraints": "Constraints:\nboard.length == 2\nboard[i].length == 3\n0 <= board[i][j] <= 5\nEach value board[i][j] is unique.", "notes": ""}, "770": {"label": "Hard", "title": "Basic Calculator IV", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5544, "total_accepted": 7900.0, "total_submissions": 14200.0, "testcase_example": "'\"e + 8 - a + 5\"\\n[\"e\"]\\n[1]'", "body": "Given an expression such as expression = \"e + 8 - a + 5\" and an evaluation map such as {\"e\": 1} (given in terms of evalvars = [\"e\"] and evalints = [1]), return a list of tokens representing the simplified expression, such as [\"-1*a\",\"14\"]\nAn expression alternates chunks and symbols, with a space separating each chunk and symbol.\nA chunk is either an expression in parentheses, a variable, or a non-negative integer.\nA variable is a string of lowercase letters (not including digits.) Note that variables can be multiple letters, and note that variables never have a leading coefficient or unary operator like \"2x\" or \"-x\".\nExpressions are evaluated in the usual order: brackets first, then multiplication, then addition and subtraction.\nFor example, expression = \"1 + 2 * 3\" has an answer of [\"7\"].\nThe format of the output is as follows:\nFor each term of free variables with a non-zero coefficient, we write the free variables within a term in sorted order lexicographically.\n\nFor example, we would never write a term like \"b*a*c\", only \"a*b*c\".\n\n\nTerms have degrees equal to the number of free variables being multiplied, counting multiplicity. We write the largest degree terms of our answer first, breaking ties by lexicographic order ignoring the leading coefficient of the term.\n\nFor example, \"a*a*b*c\" has degree 4.\n\n\nThe leading coefficient of the term is placed directly to the left with an asterisk separating it from the variables (if they exist.) A leading coefficient of 1 is still printed.\nAn example of a well-formatted answer is [\"-2*a*a*a\", \"3*a*a*b\", \"3*b*b\", \"4*a\", \"5*c\", \"-6\"].\nTerms (including constant terms) with coefficient 0 are not included.\n\nFor example, an expression of \"0\" has an output of [].\n\n", "examples": [{"full_text": "Example 1:\nInput: expression = \"e + 8 - a + 5\", evalvars = [\"e\"], evalints = [1]\nOutput: [\"-1*a\",\"14\"]", "input": "Input: expression = \"e + 8 - a + 5\", evalvars = [\"e\"], evalints = [1]", "output": "Output: [\"-1*a\",\"14\"]", "explanation": ""}, {"full_text": "Example 2:\nInput: expression = \"e - 8 + temperature - pressure\", evalvars = [\"e\", \"temperature\"], evalints = [1, 12]\nOutput: [\"-1*pressure\",\"5\"]", "input": "Input: expression = \"e - 8 + temperature - pressure\", evalvars = [\"e\", \"temperature\"], evalints = [1, 12]", "output": "Output: [\"-1*pressure\",\"5\"]", "explanation": ""}, {"full_text": "Example 3:\nInput: expression = \"(e + 8) * (e - 8)\", evalvars = [], evalints = []\nOutput: [\"1*e*e\",\"-64\"]", "input": "Input: expression = \"(e + 8) * (e - 8)\", evalvars = [], evalints = []", "output": "Output: [\"1*e*e\",\"-64\"]", "explanation": ""}], "constraints": "Constraints:\n1 <= expression.length <= 250\nexpression consists of lowercase English letters, digits, '+', '-', '*', '(', ')', ' '.\nexpression does not contain any leading or trailing spaces.\nAll the tokens in expression are separated by a single space.\n0 <= evalvars.length <= 100\n1 <= evalvars[i].length <= 20\nevalvars[i] consists of lowercase English letters.\nevalints.length == evalvars.length\n-100 <= evalints[i] <= 100", "notes": ""}, "768": {"label": "Hard", "title": "Max Chunks To Make Sorted II", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5177, "total_accepted": 38300.0, "total_submissions": 74000.0, "testcase_example": "'[5,4,3,2,1]'", "body": "You are given an integer array arr.\nWe split arr into some number of chunks (i.e., partitions), and individually sort each chunk. After concatenating them, the result should equal the sorted array.\nReturn the largest number of chunks we can make to sort the array.", "examples": [{"full_text": "Example 1:\nInput: arr = [5,4,3,2,1]\nOutput: 1\nExplanation:\nSplitting into two or more chunks will not return the required result.\nFor example, splitting into [5, 4], [3, 2, 1] will result in [4, 5, 1, 2, 3], which isn't sorted.", "input": "Input: arr = [5,4,3,2,1]", "output": "Output: 1", "explanation": "Explanation:\nSplitting into two or more chunks will not return the required result.\nFor example, splitting into [5, 4], [3, 2, 1] will result in [4, 5, 1, 2, 3], which isn't sorted."}, {"full_text": "Example 2:\nInput: arr = [2,1,3,4,4]\nOutput: 4\nExplanation:\nWe can split into two chunks, such as [2, 1], [3, 4, 4].\nHowever, splitting into [2, 1], [3], [4], [4] is the highest number of chunks possible.", "input": "Input: arr = [2,1,3,4,4]", "output": "Output: 4", "explanation": "Explanation:\nWe can split into two chunks, such as [2, 1], [3, 4, 4].\nHowever, splitting into [2, 1], [3], [4], [4] is the highest number of chunks possible."}], "constraints": "Constraints:\n1 <= arr.length <= 2000\n0 <= arr[i] <= 10^8", "notes": ""}, "765": {"label": "Hard", "title": "Couples Holding Hands", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5636, "total_accepted": 41600.0, "total_submissions": 73800.0, "testcase_example": "'[0,2,1,3]'", "body": "There are n couples sitting in 2n seats arranged in a row and want to hold hands.\nThe people and seats are represented by an integer array row where row[i] is the ID of the person sitting in the i^th seat. The couples are numbered in order, the first couple being (0, 1), the second couple being (2, 3), and so on with the last couple being (2n - 2, 2n - 1).\nReturn the minimum number of swaps so that every couple is sitting side by side. A swap consists of choosing any two people, then they stand up and switch seats.", "examples": [{"full_text": "Example 1:\nInput: row = [0,2,1,3]\nOutput: 1\nExplanation: We only need to swap the second (row[1]) and third (row[2]) person.", "input": "Input: row = [0,2,1,3]", "output": "Output: 1", "explanation": "Explanation: We only need to swap the second (row[1]) and third (row[2]) person."}, {"full_text": "Example 2:\nInput: row = [3,2,0,1]\nOutput: 0\nExplanation: All couples are already seated side by side.", "input": "Input: row = [3,2,0,1]", "output": "Output: 0", "explanation": "Explanation: All couples are already seated side by side."}], "constraints": "Constraints:\n2n == row.length\n2 <= n <= 30\nn is even.\n0 <= row[i] < 2n\nAll the elements of row are unique.", "notes": ""}, "761": {"label": "Hard", "title": "Special Binary String", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5976, "total_accepted": 13000.0, "total_submissions": 21800.0, "testcase_example": "'\"11011000\"'", "body": "Special binary strings are binary strings with the following two properties:\nThe number of 0's is equal to the number of 1's.\nEvery prefix of the binary string has at least as many 1's as 0's.\nYou are given a special binary string s.\nA move consists of choosing two consecutive, non-empty, special substrings of s, and swapping them. Two strings are consecutive if the last character of the first string is exactly one index before the first character of the second string.\nReturn the lexicographically largest resulting string possible after applying the mentioned operations on the string.", "examples": [{"full_text": "Example 1:\nInput: s = \"11011000\"\nOutput: \"11100100\"\nExplanation: The strings \"10\" [occuring at s[1]] and \"1100\" [at s[3]] are swapped.\nThis is the lexicographically largest string possible after some number of swaps.", "input": "Input: s = \"11011000\"", "output": "Output: \"11100100\"", "explanation": "Explanation: The strings \"10\" [occuring at s[1]] and \"1100\" [at s[3]] are swapped.\nThis is the lexicographically largest string possible after some number of swaps."}, {"full_text": "Example 2:\nInput: s = \"10\"\nOutput: \"10\"", "input": "Input: s = \"10\"", "output": "Output: \"10\"", "explanation": ""}], "constraints": "Constraints:\n1 <= s.length <= 50\ns[i] is either '0' or '1'.\ns is a special binary string.", "notes": ""}, "757": {"label": "Hard", "title": "Set Intersection Size At Least Two", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.43, "total_accepted": 15000.0, "total_submissions": 34900.0, "testcase_example": "'[[1,3],[1,4],[2,5],[3,5]]'", "body": "An integer interval [a, b] (for integers a < b) is a set of all consecutive integers from a to b, including a and b.\nFind the minimum size of a set S such that for every integer interval A in intervals, the intersection of S with A has a size of at least two.", "examples": [{"full_text": "Example 1:\nInput: intervals = [[1,3],[1,4],[2,5],[3,5]]\nOutput: 3\nExplanation: Consider the set S = {2, 3, 4}. For each interval, there are at least 2 elements from S in the interval.\nAlso, there isn't a smaller size set that fulfills the above condition.\nThus, we output the size of this set, which is 3.", "input": "Input: intervals = [[1,3],[1,4],[2,5],[3,5]]", "output": "Output: 3", "explanation": "Explanation: Consider the set S = {2, 3, 4}. For each interval, there are at least 2 elements from S in the interval.\nAlso, there isn't a smaller size set that fulfills the above condition.\nThus, we output the size of this set, which is 3."}, {"full_text": "Example 2:\nInput: intervals = [[1,2],[2,3],[2,4],[4,5]]\nOutput: 5\nExplanation: An example of a minimum sized set is {1, 2, 3, 4, 5}.", "input": "Input: intervals = [[1,2],[2,3],[2,4],[4,5]]", "output": "Output: 5", "explanation": "Explanation: An example of a minimum sized set is {1, 2, 3, 4, 5}."}], "constraints": "Constraints:\n1 <= intervals.length <= 3000\nintervals[i].length == 2\n0 <= ai <\nbi <= 10^8", "notes": ""}, "753": {"label": "Hard", "title": "Cracking the Safe", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5432, "total_accepted": 44300.0, "total_submissions": 81500.0, "testcase_example": "'1\\n2'", "body": "There is a safe protected by a password. The password is a sequence of n digits where each digit can be in the range [0, k - 1].\nThe safe has a peculiar way of checking the password. When you enter in a sequence, it checks the most recent n digits that were entered each time you type a digit.\nFor example, the correct password is \"345\" and you enter in \"012345\":\n\nAfter typing 0, the most recent 3 digits is \"0\", which is incorrect.\nAfter typing 1, the most recent 3 digits is \"01\", which is incorrect.\nAfter typing 2, the most recent 3 digits is \"012\", which is incorrect.\nAfter typing 3, the most recent 3 digits is \"123\", which is incorrect.\nAfter typing 4, the most recent 3 digits is \"234\", which is incorrect.\nAfter typing 5, the most recent 3 digits is \"345\", which is correct and the safe unlocks.\n\n\nReturn any string of minimum length that will unlock the safe at some point of entering it.", "examples": [{"full_text": "Example 1:\nInput: n = 1, k = 2\nOutput: \"10\"\nExplanation: The password is a single digit, so enter each digit. \"01\" would also unlock the safe.", "input": "Input: n = 1, k = 2", "output": "Output: \"10\"", "explanation": "Explanation: The password is a single digit, so enter each digit. \"01\" would also unlock the safe."}, {"full_text": "Example 2:\nInput: n = 2, k = 2\nOutput: \"01100\"\nExplanation: For each possible password:\n- \"00\" is typed in starting from the 4^th digit.\n- \"01\" is typed in starting from the 1^st digit.\n- \"10\" is typed in starting from the 3^rd digit.\n- \"11\" is typed in starting from the 2^nd digit.\nThus \"01100\" will unlock the safe. \"01100\", \"10011\", and \"11001\" would also unlock the safe.", "input": "Input: n = 2, k = 2", "output": "Output: \"01100\"", "explanation": "Explanation: For each possible password:\n- \"00\" is typed in starting from the 4^th digit.\n- \"01\" is typed in starting from the 1^st digit.\n- \"10\" is typed in starting from the 3^rd digit.\n- \"11\" is typed in starting from the 2^nd digit.\nThus \"01100\" will unlock the safe. \"01100\", \"10011\", and \"11001\" would also unlock the safe."}], "constraints": "Constraints:\n1 <= n <= 4\n1 <= k <= 10\n1 <= k^n <= 4096", "notes": ""}, "749": {"label": "Hard", "title": "Contain Virus", "tags": "algorithms,dynamic-programming", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4979, "total_accepted": 7900.0, "total_submissions": 15900.0, "testcase_example": "'[[0,1,0,0,0,0,0,1],[0,1,0,0,0,0,0,1],[0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0]]'", "body": "A virus is spreading rapidly, and your task is to quarantine the infected area by installing walls.\nThe world is modeled as an m x n binary grid isInfected, where isInfected[i][j] == 0 represents uninfected cells, and isInfected[i][j] == 1 represents cells contaminated with the virus. A wall (and only one wall) can be installed between any two 4-directionally adjacent cells, on the shared boundary.\nEvery night, the virus spreads to all neighboring cells in all four directions unless blocked by a wall. Resources are limited. Each day, you can install walls around only one region (i.e., the affected area (continuous block of infected cells) that threatens the most uninfected cells the following night). There will never be a tie.\nReturn the number of walls used to quarantine all the infected regions. If the world will become fully infected, return the number of walls used.", "examples": [{"full_text": "Example 1:\nInput: isInfected = [[0,1,0,0,0,0,0,1],[0,1,0,0,0,0,0,1],[0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0]]\nOutput: 10\nExplanation: There are 2 contaminated regions.\nOn the first day, add 5 walls to quarantine the viral region on the left. The board after the virus spreads is:\nOn the second day, add 5 walls to quarantine the viral region on the right. The virus is fully contained.", "input": "Input: isInfected = [[0,1,0,0,0,0,0,1],[0,1,0,0,0,0,0,1],[0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0]]", "output": "Output: 10", "explanation": "Explanation: There are 2 contaminated regions.\nOn the first day, add 5 walls to quarantine the viral region on the left. The board after the virus spreads is:\nOn the second day, add 5 walls to quarantine the viral region on the right. The virus is fully contained."}, {"full_text": "Example 2:\nInput: isInfected = [[1,1,1],[1,0,1],[1,1,1]]\nOutput: 4\nExplanation: Even though there is only one cell saved, there are 4 walls built.\nNotice that walls are only built on the shared boundary of two different cells.", "input": "Input: isInfected = [[1,1,1],[1,0,1],[1,1,1]]", "output": "Output: 4", "explanation": "Explanation: Even though there is only one cell saved, there are 4 walls built.\nNotice that walls are only built on the shared boundary of two different cells."}, {"full_text": "Example 3:\nInput: isInfected = [[1,1,1,0,0,0,0,0,0],[1,0,1,0,1,1,1,1,1],[1,1,1,0,0,0,0,0,0]]\nOutput: 13\nExplanation: The region on the left only builds two new walls.", "input": "Input: isInfected = [[1,1,1,0,0,0,0,0,0],[1,0,1,0,1,1,1,1,1],[1,1,1,0,0,0,0,0,0]]", "output": "Output: 13", "explanation": "Explanation: The region on the left only builds two new walls."}], "constraints": "Constraints:\nm ==\nisInfected.length\nn ==\nisInfected[i].length\n1 <= m, n <= 50\nisInfected[i][j] is either 0 or 1.\nThere is always a contiguous viral region throughout the described process that will infect strictly more uncontaminated squares in the next round.", "notes": ""}, "745": {"label": "Hard", "title": "Prefix and Suffix Search", "tags": "algorithms,array,dynamic-programming", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3626, "total_accepted": 47900.0, "total_submissions": 132200.0, "testcase_example": "'[\"WordFilter\",\"f\"]\\n[[[\"apple\"]],[\"a\",\"e\"]]'", "body": "Design a special dictionary with some words that searchs the words in it by a prefix and a suffix.\nImplement the WordFilter class:\nWordFilter(string[] words) Initializes the object with the words in the dictionary.\nf(string prefix, string suffix) Returns the index of the word in the dictionary, which has the prefix prefix and the suffix suffix. If there is more than one valid index, return the largest of them. If there is no such word in the dictionary, return -1.", "examples": [{"full_text": "Example 1:\nInput\n[\"WordFilter\", \"f\"]\n[[[\"apple\"]], [\"a\", \"e\"]]\nOutput\n[null, 0]\nExplanation\nWordFilter wordFilter = new WordFilter([\"apple\"]);\nwordFilter.f(\"a\", \"e\"); // return 0, because the word at index 0 has prefix = \"a\" and suffix = 'e\".", "input": "Input\n[\"WordFilter\", \"f\"]\n[[[\"apple\"]], [\"a\", \"e\"]]", "output": "Output\n[null, 0]", "explanation": "Explanation\nWordFilter wordFilter = new WordFilter([\"apple\"]);\nwordFilter.f(\"a\", \"e\"); // return 0, because the word at index 0 has prefix = \"a\" and suffix = 'e\"."}], "constraints": "Constraints:\n1 <= words.length <= 15000\n1 <= words[i].length <= 10\n1 <= prefix.length, suffix.length <= 10\nwords[i], prefix and suffix consist of lower-case English letters only.\nAt most 15000 calls will be made to the function f.", "notes": ""}, "741": {"label": "Hard", "title": "Cherry Pickup", "tags": "algorithms,dynamic-programming", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3615, "total_accepted": 50600.0, "total_submissions": 139900.0, "testcase_example": "'[[0,1,-1],[1,0,-1],[1,1,1]]'", "body": "You are given an n x n grid representing a field of cherries, each cell is one of three possible integers.\n0 means the cell is empty, so you can pass through,\n1 means the cell contains a cherry that you can pick up and pass through, or\n-1 means the cell contains a thorn that blocks your way.\nReturn the maximum number of cherries you can collect by following the rules below:\nStarting at the position (0, 0) and reaching (n - 1, n - 1) by moving right or down through valid path cells (cells with value 0 or 1).\nAfter reaching (n - 1, n - 1), returning to (0, 0) by moving left or up through valid path cells.\nWhen passing through a path cell containing a cherry, you pick it up, and the cell becomes an empty cell 0.\nIf there is no valid path between (0, 0) and (n - 1, n - 1), then no cherries can be collected.", "examples": [{"full_text": "Example 1:\nInput: grid = [[0,1,-1],[1,0,-1],[1,1,1]]\nOutput: 5\nExplanation: The player started at (0, 0) and went down, down, right right to reach (2, 2).\n4 cherries were picked up during this single trip, and the matrix becomes [[0,1,-1],[0,0,-1],[0,0,0]].\nThen, the player went left, up, up, left to return home, picking up one more cherry.\nThe total number of cherries picked up is 5, and this is the maximum possible.", "input": "Input: grid = [[0,1,-1],[1,0,-1],[1,1,1]]", "output": "Output: 5", "explanation": "Explanation: The player started at (0, 0) and went down, down, right right to reach (2, 2).\n4 cherries were picked up during this single trip, and the matrix becomes [[0,1,-1],[0,0,-1],[0,0,0]].\nThen, the player went left, up, up, left to return home, picking up one more cherry.\nThe total number of cherries picked up is 5, and this is the maximum possible."}, {"full_text": "Example 2:\nInput: grid = [[1,1,-1],[1,-1,1],[-1,1,1]]\nOutput: 0", "input": "Input: grid = [[1,1,-1],[1,-1,1],[-1,1,1]]", "output": "Output: 0", "explanation": ""}], "constraints": "Constraints:\nn == grid.length\nn == grid[i].length\n1 <= n <= 50\ngrid[i][j] is -1, 0, or 1.\ngrid[0][0] != -1\ngrid[n - 1][n - 1] != -1", "notes": ""}, "736": {"label": "Hard", "title": "Parse Lisp Expression", "tags": "algorithms,string", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.511, "total_accepted": 18000.0, "total_submissions": 35300.0, "testcase_example": "'\"(let x 2 (mult x (let x 3 y 4 (add x y))))\"'", "body": "You are given a string expression representing a Lisp-like expression to return the integer value of.\nThe syntax for these expressions is given as follows.\nAn expression is either an integer, let expression, add expression, mult expression, or an assigned variable. Expressions always evaluate to a single integer.\n(An integer could be positive or negative.)\nA let expression takes the form \"(let v1 e1 v2 e2 ... vn en expr)\", where let is always the string \"let\", then there are one or more pairs of alternating variables and expressions, meaning that the first variable v1 is assigned the value of the expression e1, the second variable v2 is assigned the value of the expression e2, and so on sequentially; and then the value of this let expression is the value of the expression expr.\nAn add expression takes the form \"(add e1 e2)\" where add is always the string \"add\", there are always two expressions e1, e2 and the result is the addition of the evaluation of e1 and the evaluation of e2.\nA mult expression takes the form \"(mult e1 e2)\" where mult is always the string \"mult\", there are always two expressions e1, e2 and the result is the multiplication of the evaluation of e1 and the evaluation of e2.\nFor this question, we will use a smaller subset of variable names. A variable starts with a lowercase letter, then zero or more lowercase letters or digits. Additionally, for your convenience, the names \"add\", \"let\", and \"mult\" are protected and will never be used as variable names.\nFinally, there is the concept of scope. When an expression of a variable name is evaluated, within the context of that evaluation, the innermost scope (in terms of parentheses) is checked first for the value of that variable, and then outer scopes are checked sequentially. It is guaranteed that every expression is legal. Please see the examples for more details on the scope.", "examples": [{"full_text": "Example 1:\nInput: expression = \"(let x 2 (mult x (let x 3 y 4 (add x y))))\"\nOutput: 14\nExplanation: In the expression (add x y), when checking for the value of the variable x,\nwe check from the innermost scope to the outermost in the context of the variable we are trying to evaluate.\nSince x = 3 is found first, the value of x is 3.", "input": "Input: expression = \"(let x 2 (mult x (let x 3 y 4 (add x y))))\"", "output": "Output: 14", "explanation": "Explanation: In the expression (add x y), when checking for the value of the variable x,\nwe check from the innermost scope to the outermost in the context of the variable we are trying to evaluate.\nSince x = 3 is found first, the value of x is 3."}, {"full_text": "Example 2:\nInput: expression = \"(let x 3 x 2 x)\"\nOutput: 2\nExplanation: Assignment in let statements is processed sequentially.", "input": "Input: expression = \"(let x 3 x 2 x)\"", "output": "Output: 2", "explanation": "Explanation: Assignment in let statements is processed sequentially."}, {"full_text": "Example 3:\nInput: expression = \"(let x 1 y 2 x (add x y) (add x y))\"\nOutput: 5\nExplanation: The first (add x y) evaluates as 3, and is assigned to x.\nThe second (add x y) evaluates as 3+2 = 5.", "input": "Input: expression = \"(let x 1 y 2 x (add x y) (add x y))\"", "output": "Output: 5", "explanation": "Explanation: The first (add x y) evaluates as 3, and is assigned to x.\nThe second (add x y) evaluates as 3+2 = 5."}], "constraints": "Constraints:\n1 <= expression.length <= 2000\nThere are no leading or trailing spaces in expression.\nAll tokens are separated by a single space in expression.\nThe answer and all intermediate calculations of that answer are guaranteed to fit in a 32-bit integer.\nThe expression is guaranteed to be legal and evaluate to an integer.", "notes": ""}, "732": {"label": "Hard", "title": "My Calendar III", "tags": "algorithms,segment-tree,binary-search-tree", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6613, "total_accepted": 38500.0, "total_submissions": 58200.0, "testcase_example": "'[\"MyCalendarThree\",\"book\",\"book\",\"book\",\"book\",\"book\",\"book\"]\\n' +\n  '[[],[10,20],[50,60],[10,40],[5,15],[5,10],[25,55]]'", "body": "A k-booking happens when k events have some non-empty intersection (i.e., there is some time that is common to all k events.)\nYou are given some events [start, end), after each given event, return an integer k representing the maximum k-booking between all the previous events.\nImplement the MyCalendarThree class:\nMyCalendarThree() Initializes the object.\nint book(int start, int end) Returns an integer k representing the largest integer such that there exists a k-booking in the calendar.", "examples": [{"full_text": "Example 1:\nInput\n[\"MyCalendarThree\", \"book\", \"book\", \"book\", \"book\", \"book\", \"book\"]\n[[], [10, 20], [50, 60], [10, 40], [5, 15], [5, 10], [25, 55]]\nOutput\n[null, 1, 1, 2, 3, 3, 3]\nExplanation\nMyCalendarThree myCalendarThree = new MyCalendarThree();\nmyCalendarThree.book(10, 20); // return 1, The first event can be booked and is disjoint, so the maximum k-booking is a 1-booking.\nmyCalendarThree.book(50, 60); // return 1, The second event can be booked and is disjoint, so the maximum k-booking is a 1-booking.\nmyCalendarThree.book(10, 40); // return 2, The third event [10, 40) intersects the first event, and the maximum k-booking is a 2-booking.\nmyCalendarThree.book(5, 15); // return 3, The remaining events cause the maximum K-booking to be only a 3-booking.\nmyCalendarThree.book(5, 10); // return 3\nmyCalendarThree.book(25, 55); // return 3", "input": "Input\n[\"MyCalendarThree\", \"book\", \"book\", \"book\", \"book\", \"book\", \"book\"]\n[[], [10, 20], [50, 60], [10, 40], [5, 15], [5, 10], [25, 55]]", "output": "Output\n[null, 1, 1, 2, 3, 3, 3]", "explanation": "Explanation\nMyCalendarThree myCalendarThree = new MyCalendarThree();\nmyCalendarThree.book(10, 20); // return 1, The first event can be booked and is disjoint, so the maximum k-booking is a 1-booking.\nmyCalendarThree.book(50, 60); // return 1, The second event can be booked and is disjoint, so the maximum k-booking is a 1-booking.\nmyCalendarThree.book(10, 40); // return 2, The third event [10, 40) intersects the first event, and the maximum k-booking is a 2-booking.\nmyCalendarThree.book(5, 15); // return 3, The remaining events cause the maximum K-booking to be only a 3-booking.\nmyCalendarThree.book(5, 10); // return 3\nmyCalendarThree.book(25, 55); // return 3"}], "constraints": "Constraints:\n0 <= start < end <= 10^9\nAt most 400 calls will be made to book.", "notes": ""}, "730": {"label": "Hard", "title": "Count Different Palindromic Subsequences", "tags": "algorithms,linkedin,dynamic-programming,string", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.44020000000000004, "total_accepted": 25400.0, "total_submissions": 57700.0, "testcase_example": "'\"bccb\"'", "body": "Given a string s, return the number of different non-empty palindromic subsequences in s. Since the answer may be very large, return it modulo 10^9 + 7.\nA subsequence of a string is obtained by deleting zero or more characters from the string.\nA sequence is palindromic if it is equal to the sequence reversed.\nTwo sequences a1, a2, ... and b1, b2, ... are different if there is some i for which ai != bi.", "examples": [{"full_text": "Example 1:\nInput: s = \"bccb\"\nOutput: 6\nExplanation: The 6 different non-empty palindromic subsequences are 'b', 'c', 'bb', 'cc', 'bcb', 'bccb'.\nNote that 'bcb' is counted only once, even though it occurs twice.", "input": "Input: s = \"bccb\"", "output": "Output: 6", "explanation": "Explanation: The 6 different non-empty palindromic subsequences are 'b', 'c', 'bb', 'cc', 'bcb', 'bccb'.\nNote that 'bcb' is counted only once, even though it occurs twice."}, {"full_text": "Example 2:\nInput: s = \"abcdabcdabcdabcdabcdabcdabcdabcddcbadcbadcbadcbadcbadcbadcbadcba\"\nOutput: 104860361\nExplanation: There are 3104860382 different non-empty palindromic subsequences, which is 104860361 modulo 10^9 + 7.", "input": "Input: s = \"abcdabcdabcdabcdabcdabcdabcdabcddcbadcbadcbadcbadcbadcbadcbadcba\"", "output": "Output: 104860361", "explanation": "Explanation: There are 3104860382 different non-empty palindromic subsequences, which is 104860361 modulo 10^9 + 7."}], "constraints": "Constraints:\n1 <= s.length <= 1000\ns[i] is either 'a', 'b', 'c', or 'd'.", "notes": ""}, "726": {"label": "Hard", "title": "Number of Atoms", "tags": "algorithms,google,hash-table,stack", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5163, "total_accepted": 42600.0, "total_submissions": 82500.0, "testcase_example": "'\"H2O\"'", "body": "Given a string formula representing a chemical formula, return the count of each atom.\nThe atomic element always starts with an uppercase character, then zero or more lowercase letters, representing the name.\nOne or more digits representing that element's count may follow if the count is greater than 1. If the count is 1, no digits will follow.\nFor example, \"H2O\" and \"H2O2\" are possible, but \"H1O2\" is impossible.\nTwo formulas are concatenated together to produce another formula.\nFor example, \"H2O2He3Mg4\" is also a formula.\nA formula placed in parentheses, and a count (optionally added) is also a formula.\nFor example, \"(H2O2)\" and \"(H2O2)3\" are formulas.\nReturn the count of all elements as a string in the following form: the first name (in sorted order), followed by its count (if that count is more than 1), followed by the second name (in sorted order), followed by its count (if that count is more than 1), and so on.\nThe test cases are generated so that all the values in the output fit in a 32-bit integer.", "examples": [{"full_text": "Example 1:\nInput: formula = \"H2O\"\nOutput: \"H2O\"\nExplanation: The count of elements are {'H': 2, 'O': 1}.", "input": "Input: formula = \"H2O\"", "output": "Output: \"H2O\"", "explanation": "Explanation: The count of elements are {'H': 2, 'O': 1}."}, {"full_text": "Example 2:\nInput: formula = \"Mg(OH)2\"\nOutput: \"H2MgO2\"\nExplanation: The count of elements are {'H': 2, 'Mg': 1, 'O': 2}.", "input": "Input: formula = \"Mg(OH)2\"", "output": "Output: \"H2MgO2\"", "explanation": "Explanation: The count of elements are {'H': 2, 'Mg': 1, 'O': 2}."}, {"full_text": "Example 3:\nInput: formula = \"K4(ON(SO3)2)2\"\nOutput: \"K4N2O14S4\"\nExplanation: The count of elements are {'K': 4, 'N': 2, 'O': 14, 'S': 4}.", "input": "Input: formula = \"K4(ON(SO3)2)2\"", "output": "Output: \"K4N2O14S4\"", "explanation": "Explanation: The count of elements are {'K': 4, 'N': 2, 'O': 14, 'S': 4}."}], "constraints": "Constraints:\n1 <= formula.length <= 1000\nformula consists of English letters, digits, '(', and ')'.\nformula is always valid.", "notes": ""}, "719": {"label": "Hard", "title": "Find K-th Smallest Pair Distance", "tags": "algorithms,google,array,binary-search,heap", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.34590000000000004, "total_accepted": 55300.0, "total_submissions": 160000.0, "testcase_example": "'[1,3,1]\\n1'", "body": "The distance of a pair of integers a and b is defined as the absolute difference between a and b.\nGiven an integer array nums and an integer k, return the k^th smallest distance among all the pairs nums[i] and nums[j] where 0 <= i < j < nums.length.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,3,1], k = 1\nOutput: 0\nExplanation: Here are all the pairs:\n(1,3) -> 2\n(1,1) -> 0\n(3,1) -> 2\nThen the 1^st smallest distance pair is (1,1), and its distance is 0.", "input": "Input: nums = [1,3,1], k = 1", "output": "Output: 0", "explanation": "Explanation: Here are all the pairs:\n(1,3) -> 2\n(1,1) -> 0\n(3,1) -> 2\nThen the 1^st smallest distance pair is (1,1), and its distance is 0."}, {"full_text": "Example 2:\nInput: nums = [1,1,1], k = 2\nOutput: 0", "input": "Input: nums = [1,1,1], k = 2", "output": "Output: 0", "explanation": ""}, {"full_text": "Example 3:\nInput: nums = [1,6,1], k = 3\nOutput: 5", "input": "Input: nums = [1,6,1], k = 3", "output": "Output: 5", "explanation": ""}], "constraints": "Constraints:\nn == nums.length\n2 <= n <= 10^4\n0 <= nums[i] <= 10^6\n1 <= k <= n * (n - 1) / 2", "notes": ""}, "715": {"label": "Hard", "title": "Range Module", "tags": "algorithms,array,segment-tree,binary-search-tree", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.43270000000000003, "total_accepted": 40700.0, "total_submissions": 94100.0, "testcase_example": "'[\"RangeModule\",\"addRange\",\"removeRange\",\"queryRange\",\"queryRange\",\"queryRange\"]\\n' +\n  '[[],[10,20],[14,16],[10,14],[13,15],[16,17]]'", "body": "A Range Module is a module that tracks ranges of numbers. Design a data structure to track the ranges represented as half-open intervals and query about them.\nA half-open interval [left, right) denotes all the real numbers x where left <= x < right.\nImplement the RangeModule class:\nRangeModule() Initializes the object of the data structure.\nvoid addRange(int left, int right) Adds the half-open interval [left, right), tracking every real number in that interval. Adding an interval that partially overlaps with currently tracked numbers should add any numbers in the interval [left, right) that are not already tracked.\nboolean queryRange(int left, int right) Returns true if every real number in the interval [left, right) is currently being tracked, and false otherwise.\nvoid removeRange(int left, int right) Stops tracking every real number currently being tracked in the half-open interval [left, right).", "examples": [{"full_text": "Example 1:\nInput\n[\"RangeModule\", \"addRange\", \"removeRange\", \"queryRange\", \"queryRange\", \"queryRange\"]\n[[], [10, 20], [14, 16], [10, 14], [13, 15], [16, 17]]\nOutput\n[null, null, null, true, false, true]\nExplanation\nRangeModule rangeModule = new RangeModule();\nrangeModule.addRange(10, 20);\nrangeModule.removeRange(14, 16);\nrangeModule.queryRange(10, 14); // return True,(Every number in [10, 14) is being tracked)\nrangeModule.queryRange(13, 15); // return False,(Numbers like 14, 14.03, 14.17 in [13, 15) are not being tracked)\nrangeModule.queryRange(16, 17); // return True, (The number 16 in [16, 17) is still being tracked, despite the remove operation)", "input": "Input\n[\"RangeModule\", \"addRange\", \"removeRange\", \"queryRange\", \"queryRange\", \"queryRange\"]\n[[], [10, 20], [14, 16], [10, 14], [13, 15], [16, 17]]", "output": "Output\n[null, null, null, true, false, true]", "explanation": "Explanation\nRangeModule rangeModule = new RangeModule();\nrangeModule.addRange(10, 20);\nrangeModule.removeRange(14, 16);\nrangeModule.queryRange(10, 14); // return True,(Every number in [10, 14) is being tracked)\nrangeModule.queryRange(13, 15); // return False,(Numbers like 14, 14.03, 14.17 in [13, 15) are not being tracked)\nrangeModule.queryRange(16, 17); // return True, (The number 16 in [16, 17) is still being tracked, despite the remove operation)"}], "constraints": "Constraints:\n1 <= left < right <= 10^9\nAt most 10^4 calls will be made to addRange, queryRange, and removeRange.", "notes": ""}, "710": {"label": "Hard", "title": "Random Pick with Blacklist", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3322, "total_accepted": 25700.0, "total_submissions": 77500.0, "testcase_example": "'[\"Solution\",\"pick\",\"pick\",\"pick\",\"pick\",\"pick\",\"pick\",\"pick\"]\\n' +\n  '[[7,[2,3,5]],[],[],[],[],[],[],[]]'", "body": "You are given an integer n and an array of unique integers blacklist. Design an algorithm to pick a random integer in the range [0, n - 1] that is not in blacklist. Any integer that is in the mentioned range and not in blacklist should be equally likely to be returned.\nOptimize your algorithm such that it minimizes the number of calls to the built-in random function of your language.\nImplement the Solution class:\nSolution(int n, int[] blacklist) Initializes the object with the integer n and the blacklisted integers blacklist.\nint pick() Returns a random integer in the range [0, n - 1] and not in blacklist.", "examples": [{"full_text": "Example 1:\nInput\n[\"Solution\", \"pick\", \"pick\", \"pick\", \"pick\", \"pick\", \"pick\", \"pick\"]\n[[7, [2, 3, 5]], [], [], [], [], [], [], []]\nOutput\n[null, 0, 4, 1, 6, 1, 0, 4]\nExplanation\nSolution solution = new Solution(7, [2, 3, 5]);\nsolution.pick(); // return 0, any integer from [0,1,4,6] should be ok. Note that for every call of pick,\n// 0, 1, 4, and 6 must be equally likely to be returned (i.e., with probability 1/4).\nsolution.pick(); // return 4\nsolution.pick(); // return 1\nsolution.pick(); // return 6\nsolution.pick(); // return 1\nsolution.pick(); // return 0\nsolution.pick(); // return 4", "input": "Input\n[\"Solution\", \"pick\", \"pick\", \"pick\", \"pick\", \"pick\", \"pick\", \"pick\"]\n[[7, [2, 3, 5]], [], [], [], [], [], [], []]", "output": "Output\n[null, 0, 4, 1, 6, 1, 0, 4]", "explanation": "Explanation\nSolution solution = new Solution(7, [2, 3, 5]);\nsolution.pick(); // return 0, any integer from [0,1,4,6] should be ok. Note that for every call of pick,\n// 0, 1, 4, and 6 must be equally likely to be returned (i.e., with probability 1/4).\nsolution.pick(); // return 4\nsolution.pick(); // return 1\nsolution.pick(); // return 6\nsolution.pick(); // return 1\nsolution.pick(); // return 0\nsolution.pick(); // return 4"}], "constraints": "Constraints:\n1 <= n <= 10^9\n0 <= blacklist.length <- min(10^5, n - 1)\n0 <= blacklist[i] < n\nAll the values of blacklist are unique.\nAt most 2 * 10^4 calls will be made to pick.", "notes": ""}, "699": {"label": "Hard", "title": "Falling Squares", "tags": "algorithms,uber,segment-tree,binary-search-tree", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4365, "total_accepted": 18800.0, "total_submissions": 43200.0, "testcase_example": "'[[1,2],[2,3],[6,1]]'", "body": "There are several squares being dropped onto the X-axis of a 2D plane.\nYou are given a 2D integer array positions where positions[i] = [lefti, sideLengthi] represents the i^th square with a side length of sideLengthi that is dropped with its left edge aligned with X-coordinate lefti.\nEach square is dropped one at a time from a height above any landed squares. It then falls downward (negative Y direction) until it either lands on the top side of another square or on the X-axis. A square brushing the left/right side of another square does not count as landing on it. Once it lands, it freezes in place and cannot be moved.\nAfter each square is dropped, you must record the height of the current tallest stack of squares.\nReturn an integer array ans where ans[i] represents the height described above after dropping the i^th square.", "examples": [{"full_text": "Example 1:\nInput: positions = [[1,2],[2,3],[6,1]]\nOutput: [2,5,5]\nExplanation:\nAfter the first drop, the tallest stack is square 1 with a height of 2.\nAfter the second drop, the tallest stack is squares 1 and 2 with a height of 5.\nAfter the third drop, the tallest stack is still squares 1 and 2 with a height of 5.\nThus, we return an answer of [2, 5, 5].", "input": "Input: positions = [[1,2],[2,3],[6,1]]", "output": "Output: [2,5,5]", "explanation": "Explanation:\nAfter the first drop, the tallest stack is square 1 with a height of 2.\nAfter the second drop, the tallest stack is squares 1 and 2 with a height of 5.\nAfter the third drop, the tallest stack is still squares 1 and 2 with a height of 5.\nThus, we return an answer of [2, 5, 5]."}, {"full_text": "Example 2:\nInput: positions = [[100,100],[200,100]]\nOutput: [100,100]\nExplanation:\nAfter the first drop, the tallest stack is square 1 with a height of 100.\nAfter the second drop, the tallest stack is either square 1 or square 2, both with heights of 100.\nThus, we return an answer of [100, 100].\nNote that square 2 only brushes the right side of square 1, which does not count as landing on it.", "input": "Input: positions = [[100,100],[200,100]]", "output": "Output: [100,100]", "explanation": "Explanation:\nAfter the first drop, the tallest stack is square 1 with a height of 100.\nAfter the second drop, the tallest stack is either square 1 or square 2, both with heights of 100.\nThus, we return an answer of [100, 100].\nNote that square 2 only brushes the right side of square 1, which does not count as landing on it."}], "constraints": "Constraints:\n1 <= positions.length <= 1000\n1 <= lefti <= 10^8\n1 <= sideLengthi <= 10^6", "notes": ""}, "691": {"label": "Hard", "title": "Stickers to Spell Word", "tags": "algorithms,backtracking,dynamic-programming", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4675, "total_accepted": 28800.0, "total_submissions": 61700.0, "testcase_example": "'[\"with\",\"example\",\"science\"]\\n\"thehat\"'", "body": "We are given n different types of stickers. Each sticker has a lowercase English word on it.\nYou would like to spell out the given string target by cutting individual letters from your collection of stickers and rearranging them. You can use each sticker more than once if you want, and you have infinite quantities of each sticker.\nReturn the minimum number of stickers that you need to spell out target. If the task is impossible, return -1.\nNote: In all test cases, all words were chosen randomly from the 1000 most common US English words, and target was chosen as a concatenation of two random words.", "examples": [{"full_text": "Example 1:\nInput: stickers = [\"with\",\"example\",\"science\"], target = \"thehat\"\nOutput: 3\nExplanation:\nWe can use 2 \"with\" stickers, and 1 \"example\" sticker.\nAfter cutting and rearrange the letters of those stickers, we can form the target \"thehat\".\nAlso, this is the minimum number of stickers necessary to form the target string.", "input": "Input: stickers = [\"with\",\"example\",\"science\"], target = \"thehat\"", "output": "Output: 3", "explanation": "Explanation:\nWe can use 2 \"with\" stickers, and 1 \"example\" sticker.\nAfter cutting and rearrange the letters of those stickers, we can form the target \"thehat\".\nAlso, this is the minimum number of stickers necessary to form the target string."}, {"full_text": "Example 2:\nInput: stickers = [\"notice\",\"possible\"], target = \"basicbasic\"\nOutput: -1\nExplanation:\nWe cannot form the target \"basicbasic\" from cutting letters from the given stickers.", "input": "Input: stickers = [\"notice\",\"possible\"], target = \"basicbasic\"", "output": "Output: -1", "explanation": "Explanation:\nWe cannot form the target \"basicbasic\" from cutting letters from the given stickers."}], "constraints": "Constraints:\nn == stickers.length\n1 <= n <= 50\n1 <= stickers[i].length <= 10\n1 <= target <= 15\nstickers[i] and target consist of lowercase English letters.", "notes": ""}, "689": {"label": "Hard", "title": "Maximum Sum of 3 Non-Overlapping Subarrays", "tags": "algorithms,facebook,google,array,dynamic-programming", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4826, "total_accepted": 60800.0, "total_submissions": 125900.0, "testcase_example": "'[1,2,1,2,6,7,5,1]\\n2'", "body": "Given an integer array nums and an integer k, find three non-overlapping subarrays of length k with maximum sum and return them.\nReturn the result as a list of indices representing the starting position of each interval (0-indexed). If there are multiple answers, return the lexicographically smallest one.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,2,1,2,6,7,5,1], k = 2\nOutput: [0,3,5]\nExplanation: Subarrays [1, 2], [2, 6], [7, 5] correspond to the starting indices [0, 3, 5].\nWe could have also taken [2, 1], but an answer of [1, 3, 5] would be lexicographically larger.", "input": "Input: nums = [1,2,1,2,6,7,5,1], k = 2", "output": "Output: [0,3,5]", "explanation": "Explanation: Subarrays [1, 2], [2, 6], [7, 5] correspond to the starting indices [0, 3, 5].\nWe could have also taken [2, 1], but an answer of [1, 3, 5] would be lexicographically larger."}, {"full_text": "Example 2:\nInput: nums = [1,2,1,2,1,2,1,2,1], k = 2\nOutput: [0,2,4]", "input": "Input: nums = [1,2,1,2,1,2,1,2,1], k = 2", "output": "Output: [0,2,4]", "explanation": ""}], "constraints": "Constraints:\n1 <= nums.length <= 2 * 10^4\n1 <= nums[i] <\n2^16\n1 <= k <= floor(nums.length / 3)", "notes": ""}, "685": {"label": "Hard", "title": "Redundant Connection II", "tags": "algorithms,google,depth-first-search,graph,tree,union-find", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3362, "total_accepted": 49900.0, "total_submissions": 148400.0, "testcase_example": "'[[1,2],[1,3],[2,3]]'", "body": "In this problem, a rooted tree is a directed graph such that, there is exactly one node (the root) for which all other nodes are descendants of this node, plus every node has exactly one parent, except for the root node which has no parents.\nThe given input is a directed graph that started as a rooted tree with n nodes (with distinct values from 1 to n), with one additional directed edge added. The added edge has two different vertices chosen from 1 to n, and was not an edge that already existed.\nThe resulting graph is given as a 2D-array of edges. Each element of edges is a pair [ui, vi] that represents a directed edge connecting nodes ui and vi, where ui is a parent of child vi.\nReturn an edge that can be removed so that the resulting graph is a rooted tree of n nodes. If there are multiple answers, return the answer that occurs last in the given 2D-array.", "examples": [{"full_text": "Example 1:\nInput: edges = [[1,2],[1,3],[2,3]]\nOutput: [2,3]", "input": "Input: edges = [[1,2],[1,3],[2,3]]", "output": "Output: [2,3]", "explanation": ""}, {"full_text": "Example 2:\nInput: edges = [[1,2],[2,3],[3,4],[4,1],[1,5]]\nOutput: [4,1]", "input": "Input: edges = [[1,2],[2,3],[3,4],[4,1],[1,5]]", "output": "Output: [4,1]", "explanation": ""}], "constraints": "Constraints:\nn == edges.length\n3 <= n <= 1000\nedges[i].length == 2\n1 <= ui, vi <= n\nui != vi", "notes": ""}, "679": {"label": "Hard", "title": "24 Game", "tags": "algorithms,google,depth-first-search", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.48560000000000003, "total_accepted": 60600.0, "total_submissions": 124800.0, "testcase_example": "'[4,1,8,7]'", "body": "You are given an integer array cards of length 4. You have four cards, each containing a number in the range [1, 9]. You should arrange the numbers on these cards in a mathematical expression using the operators ['+', '-', '*', '/'] and the parentheses '(' and ')' to get the value 24.\nYou are restricted with the following rules:\nThe division operator '/' represents real division, not integer division.\n\nFor example, 4 / (1 - 2 / 3) = 4 / (1 / 3) = 12.\n\n\nEvery operation done is between two numbers. In particular, we cannot use '-' as a unary operator.\n\nFor example, if cards = [1, 1, 1, 1], the expression \"-1 - 1 - 1 - 1\" is not allowed.\n\n\nYou cannot concatenate numbers together\n\nFor example, if cards = [1, 2, 1, 2], the expression \"12 + 12\" is not valid.\n\n\nReturn true if you can get such expression that evaluates to 24, and false otherwise.", "examples": [{"full_text": "Example 1:\nInput: cards = [4,1,8,7]\nOutput: true\nExplanation: (8-4) * (7-1) = 24", "input": "Input: cards = [4,1,8,7]", "output": "Output: true", "explanation": "Explanation: (8-4) * (7-1) = 24"}, {"full_text": "Example 2:\nInput: cards = [1,2,1,2]\nOutput: false", "input": "Input: cards = [1,2,1,2]", "output": "Output: false", "explanation": ""}], "constraints": "Constraints:\ncards.length == 4\n1 <= cards[i] <= 9", "notes": ""}, "675": {"label": "Hard", "title": "Cut Off Trees for Golf Event", "tags": "algorithms,amazon,breadth-first-search", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3549, "total_accepted": 52700.0, "total_submissions": 148600.0, "testcase_example": "'[[1,2,3],[0,0,4],[7,6,5]]'", "body": "You are asked to cut off all the trees in a forest for a golf event. The forest is represented as an m x n matrix. In this matrix:\n0 means the cell cannot be walked through.\n1 represents an empty cell that can be walked through.\nA number greater than 1 represents a tree in a cell that can be walked through, and this number is the tree's height.\nIn one step, you can walk in any of the four directions: north, east, south, and west. If you are standing in a cell with a tree, you can choose whether to cut it off.\nYou must cut off the trees in order from shortest to tallest. When you cut off a tree, the value at its cell becomes 1 (an empty cell).\nStarting from the point (0, 0), return the minimum steps you need to walk to cut off all the trees. If you cannot cut off all the trees, return -1.\nYou are guaranteed that no two trees have the same height, and there is at least one tree needs to be cut off.", "examples": [{"full_text": "Example 1:\nInput: forest = [[1,2,3],[0,0,4],[7,6,5]]\nOutput: 6\nExplanation: Following the path above allows you to cut off the trees from shortest to tallest in 6 steps.", "input": "Input: forest = [[1,2,3],[0,0,4],[7,6,5]]", "output": "Output: 6", "explanation": "Explanation: Following the path above allows you to cut off the trees from shortest to tallest in 6 steps."}, {"full_text": "Example 2:\nInput: forest = [[1,2,3],[0,0,0],[7,6,5]]\nOutput: -1\nExplanation: The trees in the bottom row cannot be accessed as the middle row is blocked.", "input": "Input: forest = [[1,2,3],[0,0,0],[7,6,5]]", "output": "Output: -1", "explanation": "Explanation: The trees in the bottom row cannot be accessed as the middle row is blocked."}, {"full_text": "Example 3:\nInput: forest = [[2,3,4],[0,0,5],[8,7,6]]\nOutput: 6\nExplanation: You can follow the same path as Example 1 to cut off all the trees.\nNote that you can cut off the first tree at (0, 0) before making any steps.", "input": "Input: forest = [[2,3,4],[0,0,5],[8,7,6]]", "output": "Output: 6", "explanation": "Explanation: You can follow the same path as Example 1 to cut off all the trees.\nNote that you can cut off the first tree at (0, 0) before making any steps."}], "constraints": "Constraints:\nm == forest.length\nn == forest[i].length\n1 <= m, n <= 50\n0 <= forest[i][j] <= 10^9", "notes": ""}, "668": {"label": "Hard", "title": "Kth Smallest Number in Multiplication Table", "tags": "algorithms,google,binary-search", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.508, "total_accepted": 46500.0, "total_submissions": 91600.0, "testcase_example": "'3\\n3\\n5'", "body": "Nearly everyone has used the Multiplication Table. The multiplication table of size m x n is an integer matrix mat where mat[i][j] == i * j (1-indexed).\nGiven three integers m, n, and k, return the k^th smallest element in the m x n multiplication table.", "examples": [{"full_text": "Example 1:\nInput: m = 3, n = 3, k = 5\nOutput: 3\nExplanation: The 5^th smallest number is 3.", "input": "Input: m = 3, n = 3, k = 5", "output": "Output: 3", "explanation": "Explanation: The 5^th smallest number is 3."}, {"full_text": "Example 2:\nInput: m = 2, n = 3, k = 6\nOutput: 6\nExplanation: The 6^th smallest number is 6.", "input": "Input: m = 2, n = 3, k = 6", "output": "Output: 6", "explanation": "Explanation: The 6^th smallest number is 6."}], "constraints": "Constraints:\n1 <= m, n <= 3 * 10^4\n1 <= k <= m * n", "notes": ""}, "664": {"label": "Hard", "title": "Strange Printer", "tags": "algorithms,depth-first-search,dynamic-programming", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4511, "total_accepted": 24400.0, "total_submissions": 54000.0, "testcase_example": "'\"aaabbb\"'", "body": "There is a strange printer with the following two special properties:\nThe printer can only print a sequence of the same character each time.\nAt each turn, the printer can print new characters starting from and ending at any place and will cover the original existing characters.\nGiven a string s, return the minimum number of turns the printer needed to print it.", "examples": [{"full_text": "Example 1:\nInput: s = \"aaabbb\"\nOutput: 2\nExplanation: Print \"aaa\" first and then print \"bbb\".", "input": "Input: s = \"aaabbb\"", "output": "Output: 2", "explanation": "Explanation: Print \"aaa\" first and then print \"bbb\"."}, {"full_text": "Example 2:\nInput: s = \"aba\"\nOutput: 2\nExplanation: Print \"aaa\" first and then print \"b\" from the second place of the string, which will cover the existing character 'a'.", "input": "Input: s = \"aba\"", "output": "Output: 2", "explanation": "Explanation: Print \"aaa\" first and then print \"b\" from the second place of the string, which will cover the existing character 'a'."}], "constraints": "Constraints:\n1 <= s.length <= 100\ns consists of lowercase English letters.", "notes": ""}, "639": {"label": "Hard", "title": "Decode Ways II", "tags": "algorithms,facebook,dynamic-programming", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.30329999999999996, "total_accepted": 59200.0, "total_submissions": 195200.0, "testcase_example": "'\"*\"'", "body": "A message containing letters from A-Z can be encoded into numbers using the following mapping:\n'A' -> \"1\"\n'B' -> \"2\"\n...\n'Z' -> \"26\"\nTo decode an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). For example, \"11106\" can be mapped into:\n\"AAJF\" with the grouping (1 1 10 6)\n\"KJF\" with the grouping (11 10 6)\nNote that the grouping (1 11 06) is invalid because \"06\" cannot be mapped into 'F' since \"6\" is different from \"06\".\nIn addition to the mapping above, an encoded message may contain the '*' character, which can represent any digit from '1' to '9' ('0' is excluded). For example, the encoded message \"1*\" may represent any of the encoded messages \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", or \"19\". Decoding \"1*\" is equivalent to decoding any of the encoded messages it can represent.\nGiven a string s consisting of digits and '*' characters, return the number of ways to decode it.\nSince the answer may be very large, return it modulo 10^9 + 7.", "examples": [{"full_text": "Example 1:\nInput: s = \"*\"\nOutput: 9\nExplanation: The encoded message can represent any of the encoded messages \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", or \"9\".\nEach of these can be decoded to the strings \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", and \"I\" respectively.\nHence, there are a total of 9 ways to decode \"*\".", "input": "Input: s = \"*\"", "output": "Output: 9", "explanation": "Explanation: The encoded message can represent any of the encoded messages \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", or \"9\".\nEach of these can be decoded to the strings \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", and \"I\" respectively.\nHence, there are a total of 9 ways to decode \"*\"."}, {"full_text": "Example 2:\nInput: s = \"1*\"\nOutput: 18\nExplanation: The encoded message can represent any of the encoded messages \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", or \"19\".\nEach of these encoded messages have 2 ways to be decoded (e.g. \"11\" can be decoded to \"AA\" or \"K\").\nHence, there are a total of 9 * 2 = 18 ways to decode \"1*\".", "input": "Input: s = \"1*\"", "output": "Output: 18", "explanation": "Explanation: The encoded message can represent any of the encoded messages \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", or \"19\".\nEach of these encoded messages have 2 ways to be decoded (e.g. \"11\" can be decoded to \"AA\" or \"K\").\nHence, there are a total of 9 * 2 = 18 ways to decode \"1*\"."}, {"full_text": "Example 3:\nInput: s = \"2*\"\nOutput: 15\nExplanation: The encoded message can represent any of the encoded messages \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", or \"29\".\n\"21\", \"22\", \"23\", \"24\", \"25\", and \"26\" have 2 ways of being decoded, but \"27\", \"28\", and \"29\" only have 1 way.\nHence, there are a total of (6 * 2) + (3 * 1) = 12 + 3 = 15 ways to decode \"2*\".", "input": "Input: s = \"2*\"", "output": "Output: 15", "explanation": "Explanation: The encoded message can represent any of the encoded messages \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", or \"29\".\n\"21\", \"22\", \"23\", \"24\", \"25\", and \"26\" have 2 ways of being decoded, but \"27\", \"28\", and \"29\" only have 1 way.\nHence, there are a total of (6 * 2) + (3 * 1) = 12 + 3 = 15 ways to decode \"2*\"."}], "constraints": "Constraints:\n1 <= s.length <= 10^5\ns[i] is a digit or '*'.", "notes": ""}, "632": {"label": "Hard", "title": "Smallest Range Covering Elements from K Lists", "tags": "algorithms,hash-table,string,two-pointers", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5779, "total_accepted": 60300.0, "total_submissions": 104300.0, "testcase_example": "'[[4,10,15,24,26],[0,9,12,20],[5,18,22,30]]'", "body": "You have k lists of sorted integers in non-decreasing\norder. Find the smallest range that includes at least one number from each of the k lists.\nWe define the range [a, b] is smaller than range [c, d] if b - a < d - c or a < c if b - a == d - c.", "examples": [{"full_text": "Example 1:\nInput: nums = [[4,10,15,24,26],[0,9,12,20],[5,18,22,30]]\nOutput: [20,24]\nExplanation:\nList 1: [4, 10, 15, 24,26], 24 is in range [20,24].\nList 2: [0, 9, 12, 20], 20 is in range [20,24].\nList 3: [5, 18, 22, 30], 22 is in range [20,24].", "input": "Input: nums = [[4,10,15,24,26],[0,9,12,20],[5,18,22,30]]", "output": "Output: [20,24]", "explanation": "Explanation:\nList 1: [4, 10, 15, 24,26], 24 is in range [20,24].\nList 2: [0, 9, 12, 20], 20 is in range [20,24].\nList 3: [5, 18, 22, 30], 22 is in range [20,24]."}, {"full_text": "Example 2:\nInput: nums = [[1,2,3],[1,2,3],[1,2,3]]\nOutput: [1,1]", "input": "Input: nums = [[1,2,3],[1,2,3],[1,2,3]]", "output": "Output: [1,1]", "explanation": ""}], "constraints": "Constraints:\nnums.length == k\n1 <= k <= 3500\n1 <= nums[i].length <= 50\n-10^5 <= nums[i][j] <= 10^5\nnums[i]\nis sorted in non-decreasing order.", "notes": ""}, "630": {"label": "Hard", "title": "Course Schedule III", "tags": "algorithms,greedy", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3557, "total_accepted": 54200.0, "total_submissions": 152200.0, "testcase_example": "'[[100,200],[200,1300],[1000,1250],[2000,3200]]'", "body": "There are n different online courses numbered from 1 to n. You are given an array courses where courses[i] = [durationi, lastDayi] indicate that the i^th course should be taken continuously for durationi days and must be finished before or on lastDayi.\nYou will start on the 1^st day and you cannot take two or more courses simultaneously.\nReturn the maximum number of courses that you can take.", "examples": [{"full_text": "Example 1:\nInput: courses = [[100,200],[200,1300],[1000,1250],[2000,3200]]\nOutput: 3\nExplanation:\nThere are totally 4 courses, but you can take 3 courses at most:\nFirst, take the 1^st course, it costs 100 days so you will finish it on the 100^th day, and ready to take the next course on the 101^st day.\nSecond, take the 3^rd course, it costs 1000 days so you will finish it on the 1100^th day, and ready to take the next course on the 1101^st day.\nThird, take the 2^nd course, it costs 200 days so you will finish it on the 1300^th day.\nThe 4^th course cannot be taken now, since you will finish it on the 3300^th day, which exceeds the closed date.", "input": "Input: courses = [[100,200],[200,1300],[1000,1250],[2000,3200]]", "output": "Output: 3", "explanation": "Explanation:\nThere are totally 4 courses, but you can take 3 courses at most:\nFirst, take the 1^st course, it costs 100 days so you will finish it on the 100^th day, and ready to take the next course on the 101^st day.\nSecond, take the 3^rd course, it costs 1000 days so you will finish it on the 1100^th day, and ready to take the next course on the 1101^st day.\nThird, take the 2^nd course, it costs 200 days so you will finish it on the 1300^th day.\nThe 4^th course cannot be taken now, since you will finish it on the 3300^th day, which exceeds the closed date."}, {"full_text": "Example 2:\nInput: courses = [[1,2]]\nOutput: 1", "input": "Input: courses = [[1,2]]", "output": "Output: 1", "explanation": ""}, {"full_text": "Example 3:\nInput: courses = [[3,2],[4,3]]\nOutput: 0", "input": "Input: courses = [[3,2],[4,3]]", "output": "Output: 0", "explanation": ""}], "constraints": "Constraints:\n1 <= courses.length <= 10^4\n1 <= durationi, lastDayi <= 10^4", "notes": ""}, "629": {"label": "Hard", "title": "K Inverse Pairs Array", "tags": "algorithms,dynamic-programming", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3721, "total_accepted": 24400.0, "total_submissions": 65700.0, "testcase_example": "'3\\n0'", "body": "For an integer array nums, an inverse pair is a pair of integers [i, j] where 0 <= i < j < nums.length and nums[i] > nums[j].\nGiven two integers n and k, return the number of different arrays consist of numbers from 1 to n such that there are exactly k inverse pairs. Since the answer can be huge, return it modulo 10^9 + 7.", "examples": [{"full_text": "Example 1:\nInput: n = 3, k = 0\nOutput: 1\nExplanation: Only the array [1,2,3] which consists of numbers from 1 to 3 has exactly 0 inverse pairs.", "input": "Input: n = 3, k = 0", "output": "Output: 1", "explanation": "Explanation: Only the array [1,2,3] which consists of numbers from 1 to 3 has exactly 0 inverse pairs."}, {"full_text": "Example 2:\nInput: n = 3, k = 1\nOutput: 2\nExplanation: The array [1,3,2] and [2,1,3] have exactly 1 inverse pair.", "input": "Input: n = 3, k = 1", "output": "Output: 2", "explanation": "Explanation: The array [1,3,2] and [2,1,3] have exactly 1 inverse pair."}], "constraints": "Constraints:\n1 <= n <= 1000\n0 <= k <= 1000", "notes": ""}, "601": {"label": "Hard", "title": "Human Traffic of Stadium", "tags": "database", "langs": "mssql,mysql,oraclesql", "related_topics": "database", "acceptance_ratio": 0.491, "total_accepted": 57000.0, "total_submissions": 116100.0, "testcase_example": "'{\"headers\": {\"Stadium\": [\"id\", \"visit_date\", \"people\"]}, \"rows\": {\"Stadium\": [[1, \"2017-01-01\", 10], [2, \"2017-01-02\", 109], [3, \"2017-01-03\", 150], [4, \"2017-01-04\", 99], [5, \"2017-01-05\", 145], [6, \"2017-01-06\", 1455], [7, \"2017-01-07\", 199], [8, \"2017-01-09\", 188]]}}'", "body": "Table: Stadium\n+---------------+---------+\n| Column Name | Type |\n+---------------+---------+\n| id | int |\n| visit_date | date |\n| people | int |\n+---------------+---------+\nvisit_date is the primary key for this table.\nEach row of this table contains the visit date and visit id to the stadium with the number of people during the visit.\nNo two rows will have the same visit_date, and as the id increases, the dates increase as well.\nWrite an SQL query to display the records with three or more rows with consecutive id's, and the number of people is greater than or equal to 100 for each.\nReturn the result table ordered by visit_date in ascending order.\nThe query result format is in the following example.", "examples": [{"full_text": "Example 1:\nInput:\nStadium table:\n+------+------------+-----------+\n| id | visit_date | people |\n+------+------------+-----------+\n| 1 | 2017-01-01 | 10 |\n| 2 | 2017-01-02 | 109 |\n| 3 | 2017-01-03 | 150 |\n| 4 | 2017-01-04 | 99 |\n| 5 | 2017-01-05 | 145 |\n| 6 | 2017-01-06 | 1455 |\n| 7 | 2017-01-07 | 199 |\n| 8 | 2017-01-09 | 188 |\n+------+------------+-----------+\nOutput:\n+------+------------+-----------+\n| id | visit_date | people |\n+------+------------+-----------+\n| 5 | 2017-01-05 | 145 |\n| 6 | 2017-01-06 | 1455 |\n| 7 | 2017-01-07 | 199 |\n| 8 | 2017-01-09 | 188 |\n+------+------------+-----------+\nExplanation:\nThe four rows with ids 5, 6, 7, and 8 have consecutive ids and each of them has >= 100 people attended. Note that row 8 was included even though the visit_date was not the next day after row 7.\nThe rows with ids 2 and 3 are not included because we need at least three consecutive ids.", "input": "Input:\nStadium table:\n+------+------------+-----------+\n| id | visit_date | people |\n+------+------------+-----------+\n| 1 | 2017-01-01 | 10 |\n| 2 | 2017-01-02 | 109 |\n| 3 | 2017-01-03 | 150 |\n| 4 | 2017-01-04 | 99 |\n| 5 | 2017-01-05 | 145 |\n| 6 | 2017-01-06 | 1455 |\n| 7 | 2017-01-07 | 199 |\n| 8 | 2017-01-09 | 188 |\n+------+------------+-----------+", "output": "Output:\n+------+------------+-----------+\n| id | visit_date | people |\n+------+------------+-----------+\n| 5 | 2017-01-05 | 145 |\n| 6 | 2017-01-06 | 1455 |\n| 7 | 2017-01-07 | 199 |\n| 8 | 2017-01-09 | 188 |\n+------+------------+-----------+", "explanation": "Explanation:\nThe four rows with ids 5, 6, 7, and 8 have consecutive ids and each of them has >= 100 people attended. Note that row 8 was included even though the visit_date was not the next day after row 7.\nThe rows with ids 2 and 3 are not included because we need at least three consecutive ids."}], "constraints": "", "notes": ""}, "600": {"label": "Hard", "title": "Non-negative Integers without Consecutive Ones", "tags": "algorithms,dynamic-programming", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3857, "total_accepted": 29700.0, "total_submissions": 77100.0, "testcase_example": "'5'", "body": "Given a positive integer n, return the number of the integers in the range [0, n] whose binary representations do not contain consecutive ones.", "examples": [{"full_text": "Example 1:\nInput: n = 5\nOutput: 5\nExplanation:\nHere are the non-negative integers <= 5 with their corresponding binary representations:\n0 : 0\n1 : 1\n2 : 10\n3 : 11\n4 : 100\n5 : 101\nAmong them, only integer 3 disobeys the rule (two consecutive ones) and the other 5 satisfy the rule.", "input": "Input: n = 5", "output": "Output: 5", "explanation": "Explanation:\nHere are the non-negative integers <= 5 with their corresponding binary representations:\n0 : 0\n1 : 1\n2 : 10\n3 : 11\n4 : 100\n5 : 101\nAmong them, only integer 3 disobeys the rule (two consecutive ones) and the other 5 satisfy the rule."}, {"full_text": "Example 2:\nInput: n = 1\nOutput: 2", "input": "Input: n = 1", "output": "Output: 2", "explanation": ""}, {"full_text": "Example 3:\nInput: n = 2\nOutput: 3", "input": "Input: n = 2", "output": "Output: 3", "explanation": ""}], "constraints": "Constraints:\n1 <= n <= 10^9", "notes": ""}, "591": {"label": "Hard", "title": "Tag Validator", "tags": "algorithms,microsoft,stack,string", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.36119999999999997, "total_accepted": 10700.0, "total_submissions": 29600.0, "testcase_example": "'\"<DIV>This is the first line <![CDATA[<div>]]></DIV>\"'", "body": "Given a string representing a code snippet, implement a tag validator to parse the code and return whether it is valid.\nA code snippet is valid if all the following rules hold:\nThe code must be wrapped in a valid closed tag. Otherwise, the code is invalid.\nA closed tag (not necessarily valid) has exactly the following format : <TAG_NAME>TAG_CONTENT</TAG_NAME>. Among them, <TAG_NAME> is the start tag, and </TAG_NAME> is the end tag. The TAG_NAME in start and end tags should be the same. A closed tag is valid if and only if the TAG_NAME and TAG_CONTENT are valid.\nA valid TAG_NAME only contain upper-case letters, and has length in range [1,9]. Otherwise, the TAG_NAME is invalid.\nA valid TAG_CONTENT may contain other valid closed tags, cdata and any characters (see note1) EXCEPT unmatched <, unmatched start and end tag, and unmatched or closed tags with invalid TAG_NAME. Otherwise, the TAG_CONTENT is invalid.\nA start tag is unmatched if no end tag exists with the same TAG_NAME, and vice versa. However, you also need to consider the issue of unbalanced when tags are nested.\nA < is unmatched if you cannot find a subsequent >. And when you find a < or </, all the subsequent characters until the next > should be parsed as TAG_NAME (not necessarily valid).\nThe cdata has the following format : <![CDATA[CDATA_CONTENT]]>. The range of CDATA_CONTENT is defined as the characters between <![CDATA[ and the first subsequent ]]>.\nCDATA_CONTENT may contain any characters. The function of cdata is to forbid the validator to parse CDATA_CONTENT, so even it has some characters that can be parsed as tag (no matter valid or invalid), you should treat it as regular characters.", "examples": [{"full_text": "Example 1:\nInput: code = \"<DIV>This is the first line <![CDATA[<div>]]></DIV>\"\nOutput: true\nExplanation:\nThe code is wrapped in a closed tag : <DIV> and </DIV>.\nThe TAG_NAME is valid, the TAG_CONTENT consists of some characters and cdata.\nAlthough CDATA_CONTENT has an unmatched start tag with invalid TAG_NAME, it should be considered as plain text, not parsed as a tag.\nSo TAG_CONTENT is valid, and then the code is valid. Thus return true.", "input": "Input: code = \"<DIV>This is the first line <![CDATA[<div>]]></DIV>\"", "output": "Output: true", "explanation": "Explanation:\nThe code is wrapped in a closed tag : <DIV> and </DIV>.\nThe TAG_NAME is valid, the TAG_CONTENT consists of some characters and cdata.\nAlthough CDATA_CONTENT has an unmatched start tag with invalid TAG_NAME, it should be considered as plain text, not parsed as a tag.\nSo TAG_CONTENT is valid, and then the code is valid. Thus return true."}, {"full_text": "Example 2:\nInput: code = \"<DIV>>> ![cdata[]] <![CDATA[<div>]>]]>]]>>]</DIV>\"\nOutput: true\nExplanation:\nWe first separate the code into : start_tag|tag_content|end_tag.\nstart_tag -> \"<DIV>\"\nend_tag -> \"</DIV>\"\ntag_content could also be separated into : text1|cdata|text2.\ntext1 -> \">> ![cdata[]] \"\ncdata -> \"<![CDATA[<div>]>]]>\", where the CDATA_CONTENT is \"<div>]>\"\ntext2 -> \"]]>>]\"\nThe reason why start_tag is NOT \"<DIV>>>\" is because of the rule 6.\nThe reason why cdata is NOT \"<![CDATA[<div>]>]]>]]>\" is because of the rule 7.", "input": "Input: code = \"<DIV>>> ![cdata[]] <![CDATA[<div>]>]]>]]>>]</DIV>\"", "output": "Output: true", "explanation": "Explanation:\nWe first separate the code into : start_tag|tag_content|end_tag.\nstart_tag -> \"<DIV>\"\nend_tag -> \"</DIV>\"\ntag_content could also be separated into : text1|cdata|text2.\ntext1 -> \">> ![cdata[]] \"\ncdata -> \"<![CDATA[<div>]>]]>\", where the CDATA_CONTENT is \"<div>]>\"\ntext2 -> \"]]>>]\"\nThe reason why start_tag is NOT \"<DIV>>>\" is because of the rule 6.\nThe reason why cdata is NOT \"<![CDATA[<div>]>]]>]]>\" is because of the rule 7."}, {"full_text": "Example 3:\nInput: code = \"<A> <B> </A> </B>\"\nOutput: false\nExplanation: Unbalanced. If \"<A>\" is closed, then \"<B>\" must be unmatched, and vice versa.", "input": "Input: code = \"<A> <B> </A> </B>\"", "output": "Output: false", "explanation": "Explanation: Unbalanced. If \"<A>\" is closed, then \"<B>\" must be unmatched, and vice versa."}], "constraints": "Constraints:\n1 <= code.length <= 500\ncode consists of English letters, digits, '<', '>', '/', '!', '[', ']', '.', and ' '.", "notes": ""}, "587": {"label": "Hard", "title": "Erect the Fence", "tags": "algorithms,google", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4325, "total_accepted": 23800.0, "total_submissions": 55100.0, "testcase_example": "'[[1,1],[2,2],[2,0],[2,4],[3,3],[4,2]]'", "body": "You are given an array trees where trees[i] = [xi, yi] represents the location of a tree in the garden.\nYou are asked to fence the entire garden using the minimum length of rope as it is expensive. The garden is well fenced only if all the trees are enclosed.\nReturn the coordinates of trees that are exactly located on the fence perimeter.", "examples": [{"full_text": "Example 1:\nInput: points = [[1,1],[2,2],[2,0],[2,4],[3,3],[4,2]]\nOutput: [[1,1],[2,0],[3,3],[2,4],[4,2]]", "input": "Input: points = [[1,1],[2,2],[2,0],[2,4],[3,3],[4,2]]", "output": "Output: [[1,1],[2,0],[3,3],[2,4],[4,2]]", "explanation": ""}, {"full_text": "Example 2:\nInput: points = [[1,2],[2,2],[4,2]]\nOutput: [[4,2],[2,2],[1,2]]", "input": "Input: points = [[1,2],[2,2],[4,2]]", "output": "Output: [[4,2],[2,2],[1,2]]", "explanation": ""}], "constraints": "Constraints:\n1 <= points.length <= 3000\npoints[i].length == 2\n0 <= xi, yi <= 100\nAll the given points are unique.", "notes": ""}, "564": {"label": "Hard", "title": "Find the Closest Palindrome", "tags": "algorithms,yelp,string", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.21050000000000002, "total_accepted": 29900.0, "total_submissions": 142100.0, "testcase_example": "'\"123\"'", "body": "Given a string n representing an integer, return the closest integer (not including itself), which is a palindrome. If there is a tie, return the smaller one.\nThe closest is defined as the absolute difference minimized between two integers.", "examples": [{"full_text": "Example 1:\nInput: n = \"123\"\nOutput: \"121\"", "input": "Input: n = \"123\"", "output": "Output: \"121\"", "explanation": ""}, {"full_text": "Example 2:\nInput: n = \"1\"\nOutput: \"0\"\nExplanation: 0 and 2 are the closest palindromes but we return the smallest which is 0.", "input": "Input: n = \"1\"", "output": "Output: \"0\"", "explanation": "Explanation: 0 and 2 are the closest palindromes but we return the smallest which is 0."}], "constraints": "Constraints:\n1 <= n.length <= 18\nn consists of only digits.\nn does not have leading zeros.\nn is representing an integer in the range [1, 10^18 - 1].", "notes": ""}, "552": {"label": "Hard", "title": "Student Attendance Record II", "tags": "algorithms,google,dynamic-programming", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.40159999999999996, "total_accepted": 42400.0, "total_submissions": 105500.0, "testcase_example": "'2'", "body": "An attendance record for a student can be represented as a string where each character signifies whether the student was absent, late, or present on that day. The record only contains the following three characters:\n'A': Absent.\n'L': Late.\n'P': Present.\nAny student is eligible for an attendance award if they meet both of the following criteria:\nThe student was absent ('A') for strictly fewer than 2 days total.\nThe student was never late ('L') for 3 or more consecutive days.\nGiven an integer n, return the number of possible attendance records of length n that make a student eligible for an attendance award. The answer may be very large, so return it modulo 10^9 + 7.", "examples": [{"full_text": "Example 1:\nInput: n = 2\nOutput: 8\nExplanation: There are 8 records with length 2 that are eligible for an award:\n\"PP\", \"AP\", \"PA\", \"LP\", \"PL\", \"AL\", \"LA\", \"LL\"\nOnly \"AA\" is not eligible because there are 2 absences (there need to be fewer than 2).", "input": "Input: n = 2", "output": "Output: 8", "explanation": "Explanation: There are 8 records with length 2 that are eligible for an award:\n\"PP\", \"AP\", \"PA\", \"LP\", \"PL\", \"AL\", \"LA\", \"LL\"\nOnly \"AA\" is not eligible because there are 2 absences (there need to be fewer than 2)."}, {"full_text": "Example 2:\nInput: n = 1\nOutput: 3", "input": "Input: n = 1", "output": "Output: 3", "explanation": ""}, {"full_text": "Example 3:\nInput: n = 10101\nOutput: 183236316", "input": "Input: n = 10101", "output": "Output: 183236316", "explanation": ""}], "constraints": "Constraints:\n1 <= n <= 10^5", "notes": ""}, "546": {"label": "Hard", "title": "Remove Boxes", "tags": "algorithms,depth-first-search,dynamic-programming", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4733, "total_accepted": 33100.0, "total_submissions": 70000.0, "testcase_example": "'[1,3,2,2,2,3,4,3,1]'", "body": "You are given several boxes with different colors represented by different positive numbers.\nYou may experience several rounds to remove boxes until there is no box left. Each time you can choose some continuous boxes with the same color (i.e., composed of k boxes, k >= 1), remove them and get k * k points.\nReturn the maximum points you can get.", "examples": [{"full_text": "Example 1:\nInput: boxes = [1,3,2,2,2,3,4,3,1]\nOutput: 23\nExplanation:\n[1, 3, 2, 2, 2, 3, 4, 3, 1]\n----> [1, 3, 3, 4, 3, 1] (3*3=9 points)\n----> [1, 3, 3, 3, 1] (1*1=1 points)\n----> [1, 1] (3*3=9 points)\n----> [] (2*2=4 points)", "input": "Input: boxes = [1,3,2,2,2,3,4,3,1]", "output": "Output: 23", "explanation": "Explanation:\n[1, 3, 2, 2, 2, 3, 4, 3, 1]\n----> [1, 3, 3, 4, 3, 1] (3*3=9 points)\n----> [1, 3, 3, 3, 1] (1*1=1 points)\n----> [1, 1] (3*3=9 points)\n----> [] (2*2=4 points)"}, {"full_text": "Example 2:\nInput: boxes = [1,1,1]\nOutput: 9", "input": "Input: boxes = [1,1,1]", "output": "Output: 9", "explanation": ""}, {"full_text": "Example 3:\nInput: boxes = [1]\nOutput: 1", "input": "Input: boxes = [1]", "output": "Output: 1", "explanation": ""}], "constraints": "Constraints:\n1 <= boxes.length <= 100\n1 <= boxes[i]\n<= 100", "notes": ""}, "517": {"label": "Hard", "title": "Super Washing Machines", "tags": "algorithms,amazon,dynamic-programming,math", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3925, "total_accepted": 21300.0, "total_submissions": 54200.0, "testcase_example": "'[1,0,5]'", "body": "You have n super washing machines on a line. Initially, each washing machine has some dresses or is empty.\nFor each move, you could choose any m (1 <= m <= n) washing machines, and pass one dress of each washing machine to one of its adjacent washing machines at the same time.\nGiven an integer array machines representing the number of dresses in each washing machine from left to right on the line, return the minimum number of moves to make all the washing machines have the same number of dresses. If it is not possible to do it, return -1.", "examples": [{"full_text": "Example 1:\nInput: machines = [1,0,5]\nOutput: 3\nExplanation:\n1st move: 1 0 <-- 5 => 1 1 4\n2nd move: 1 <-- 1 <-- 4 => 2 1 3\n3rd move: 2 1 <-- 3 => 2 2 2", "input": "Input: machines = [1,0,5]", "output": "Output: 3", "explanation": "Explanation:\n1st move: 1 0 <-- 5 => 1 1 4\n2nd move: 1 <-- 1 <-- 4 => 2 1 3\n3rd move: 2 1 <-- 3 => 2 2 2"}, {"full_text": "Example 2:\nInput: machines = [0,3,0]\nOutput: 2\nExplanation:\n1st move: 0 <-- 3 0 => 1 2 0\n2nd move: 1 2 --> 0 => 1 1 1", "input": "Input: machines = [0,3,0]", "output": "Output: 2", "explanation": "Explanation:\n1st move: 0 <-- 3 0 => 1 2 0\n2nd move: 1 2 --> 0 => 1 1 1"}, {"full_text": "Example 3:\nInput: machines = [0,2,0]\nOutput: -1\nExplanation:\nIt's impossible to make all three washing machines have the same number of dresses.", "input": "Input: machines = [0,2,0]", "output": "Output: -1", "explanation": "Explanation:\nIt's impossible to make all three washing machines have the same number of dresses."}], "constraints": "Constraints:\nn == machines.length\n1 <= n <= 10^4\n0 <= machines[i] <= 10^5", "notes": ""}, "514": {"label": "Hard", "title": "Freedom Trail", "tags": "algorithms,google,depth-first-search,divide-and-conquer,dynamic-programming", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4592, "total_accepted": 26300.0, "total_submissions": 57200.0, "testcase_example": "'\"godding\"\\n\"gd\"'", "body": "In the video game Fallout 4, the quest \"Road to Freedom\" requires players to reach a metal dial called the \"Freedom Trail Ring\" and use the dial to spell a specific keyword to open the door.\nGiven a string ring that represents the code engraved on the outer ring and another string key that represents the keyword that needs to be spelled, return the minimum number of steps to spell all the characters in the keyword.\nInitially, the first character of the ring is aligned at the \"12:00\" direction. You should spell all the characters in key one by one by rotating ring clockwise or anticlockwise to make each character of the string key aligned at the \"12:00\" direction and then by pressing the center button.\nAt the stage of rotating the ring to spell the key character key[i]:\nYou can rotate the ring clockwise or anticlockwise by one place, which counts as one step. The final purpose of the rotation is to align one of ring's characters at the \"12:00\" direction, where this character must equal key[i].\nIf the character key[i] has been aligned at the \"12:00\" direction, press the center button to spell, which also counts as one step. After the pressing, you could begin to spell the next character in the key (next stage). Otherwise, you have finished all the spelling.", "examples": [{"full_text": "Example 1:\nInput: ring = \"godding\", key = \"gd\"\nOutput: 4\nExplanation:\nFor the first key character 'g', since it is already in place, we just need 1 step to spell this character.\nFor the second key character 'd', we need to rotate the ring \"godding\" anticlockwise by two steps to make it become \"ddinggo\".\nAlso, we need 1 more step for spelling.\nSo the final output is 4.", "input": "Input: ring = \"godding\", key = \"gd\"", "output": "Output: 4", "explanation": "Explanation:\nFor the first key character 'g', since it is already in place, we just need 1 step to spell this character.\nFor the second key character 'd', we need to rotate the ring \"godding\" anticlockwise by two steps to make it become \"ddinggo\".\nAlso, we need 1 more step for spelling.\nSo the final output is 4."}, {"full_text": "Example 2:\nInput: ring = \"godding\", key = \"godding\"\nOutput: 13", "input": "Input: ring = \"godding\", key = \"godding\"", "output": "Output: 13", "explanation": ""}], "constraints": "Constraints:\n1 <= ring.length, key.length <= 100\nring and key consist of only lower case English letters.\nIt is guaranteed that key could always be spelled by rotating ring.", "notes": ""}, "502": {"label": "Hard", "title": "IPO", "tags": "algorithms,greedy,heap", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.43670000000000003, "total_accepted": 30600.0, "total_submissions": 70100.0, "testcase_example": "'2\\n0\\n[1,2,3]\\n[0,1,1]'", "body": "Suppose LeetCode will start its IPO soon. In order to sell a good price of its shares to Venture Capital, LeetCode would like to work on some projects to increase its capital before the IPO. Since it has limited resources, it can only finish at most k distinct projects before the IPO. Help LeetCode design the best way to maximize its total capital after finishing at most k distinct projects.\nYou are given n projects where the i^th project has a pure profit profits[i] and a minimum capital of capital[i] is needed to start it.\nInitially, you have w capital. When you finish a project, you will obtain its pure profit and the profit will be added to your total capital.\nPick a list of at most k distinct projects from given projects to maximize your final capital, and return the final maximized capital.\nThe answer is guaranteed to fit in a 32-bit signed integer.", "examples": [{"full_text": "Example 1:\nInput: k = 2, w = 0, profits = [1,2,3], capital = [0,1,1]\nOutput: 4\nExplanation: Since your initial capital is 0, you can only start the project indexed 0.\nAfter finishing it you will obtain profit 1 and your capital becomes 1.\nWith capital 1, you can either start the project indexed 1 or the project indexed 2.\nSince you can choose at most 2 projects, you need to finish the project indexed 2 to get the maximum capital.\nTherefore, output the final maximized capital, which is 0 + 1 + 3 = 4.", "input": "Input: k = 2, w = 0, profits = [1,2,3], capital = [0,1,1]", "output": "Output: 4", "explanation": "Explanation: Since your initial capital is 0, you can only start the project indexed 0.\nAfter finishing it you will obtain profit 1 and your capital becomes 1.\nWith capital 1, you can either start the project indexed 1 or the project indexed 2.\nSince you can choose at most 2 projects, you need to finish the project indexed 2 to get the maximum capital.\nTherefore, output the final maximized capital, which is 0 + 1 + 3 = 4."}, {"full_text": "Example 2:\nInput: k = 3, w = 0, profits = [1,2,3], capital = [0,1,2]\nOutput: 6", "input": "Input: k = 3, w = 0, profits = [1,2,3], capital = [0,1,2]", "output": "Output: 6", "explanation": ""}], "constraints": "Constraints:\n1 <= k <= 10^5\n0 <= w <= 10^9\nn == profits.length\nn == capital.length\n1 <= n <= 10^5\n0 <= profits[i] <= 10^4\n0 <= capital[i] <= 10^9", "notes": ""}, "493": {"label": "Hard", "title": "Reverse Pairs", "tags": "algorithms,google,binary-indexed-tree,divide-and-conquer,segment-tree,binary-search-tree", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.2957, "total_accepted": 76300.0, "total_submissions": 258100.00000000003, "testcase_example": "'[1,3,2,3,1]'", "body": "Given an integer array nums, return the number of reverse pairs in the array.\nA reverse pair is a pair (i, j) where 0 <= i < j < nums.length and nums[i] > 2 * nums[j].", "examples": [{"full_text": "Example 1:\nInput: nums = [1,3,2,3,1]\nOutput: 2", "input": "Input: nums = [1,3,2,3,1]", "output": "Output: 2", "explanation": ""}, {"full_text": "Example 2:\nInput: nums = [2,4,3,5,1]\nOutput: 3", "input": "Input: nums = [2,4,3,5,1]", "output": "Output: 3", "explanation": ""}], "constraints": "Constraints:\n1 <= nums.length <= 5 * 10^4\n-2^31 <= nums[i] <= 2^31 - 1", "notes": ""}, "488": {"label": "Hard", "title": "Zuma Game", "tags": "algorithms,baidu,depth-first-search", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.36869999999999997, "total_accepted": 19600.0, "total_submissions": 53200.0, "testcase_example": "'\"WRRBBW\"\\n\"RB\"'", "body": "You are playing a variation of the game Zuma.\nIn this variation of Zuma, there is a single row of colored balls on a board, where each ball can be colored red 'R', yellow 'Y', blue 'B', green 'G', or white 'W'. You also have several colored balls in your hand.\nYour goal is to clear all of the balls from the board. On each turn:\nPick any ball from your hand and insert it in between two balls in the row or on either end of the row.\nIf there is a group of three or more consecutive balls of the same color, remove the group of balls from the board.\n\nIf this removal causes more groups of three or more of the same color to form, then continue removing each group until there are none left.\n\n\nIf there are no more balls on the board, then you win the game.\nRepeat this process until you either win or do not have any more balls in your hand.\nGiven a string board, representing the row of balls on the board, and a string hand, representing the balls in your hand, return the minimum number of balls you have to insert to clear all the balls from the board. If you cannot clear all the balls from the board using the balls in your hand, return -1.", "examples": [{"full_text": "Example 1:\nInput: board = \"WRRBBW\", hand = \"RB\"\nOutput: -1\nExplanation: It is impossible to clear all the balls. The best you can do is:\n- Insert 'R' so the board becomes WRRRBBW. WRRRBBW -> WBBW.\n- Insert 'B' so the board becomes WBBBW. WBBBW -> WW.\nThere are still balls remaining on the board, and you are out of balls to insert.", "input": "Input: board = \"WRRBBW\", hand = \"RB\"", "output": "Output: -1", "explanation": "Explanation: It is impossible to clear all the balls. The best you can do is:\n- Insert 'R' so the board becomes WRRRBBW. WRRRBBW -> WBBW.\n- Insert 'B' so the board becomes WBBBW. WBBBW -> WW.\nThere are still balls remaining on the board, and you are out of balls to insert."}, {"full_text": "Example 2:\nInput: board = \"WWRRBBWW\", hand = \"WRBRW\"\nOutput: 2\nExplanation: To make the board empty:\n- Insert 'R' so the board becomes WWRRRBBWW. WWRRRBBWW -> WWBBWW.\n- Insert 'B' so the board becomes WWBBBWW. WWBBBWW -> WWWW -> empty.\n2 balls from your hand were needed to clear the board.", "input": "Input: board = \"WWRRBBWW\", hand = \"WRBRW\"", "output": "Output: 2", "explanation": "Explanation: To make the board empty:\n- Insert 'R' so the board becomes WWRRRBBWW. WWRRRBBWW -> WWBBWW.\n- Insert 'B' so the board becomes WWBBBWW. WWBBBWW -> WWWW -> empty.\n2 balls from your hand were needed to clear the board."}, {"full_text": "Example 3:\nInput: board = \"G\", hand = \"GGGGG\"\nOutput: 2\nExplanation: To make the board empty:\n- Insert 'G' so the board becomes GG.\n- Insert 'G' so the board becomes GGG. GGG -> empty.\n2 balls from your hand were needed to clear the board.", "input": "Input: board = \"G\", hand = \"GGGGG\"", "output": "Output: 2", "explanation": "Explanation: To make the board empty:\n- Insert 'G' so the board becomes GG.\n- Insert 'G' so the board becomes GGG. GGG -> empty.\n2 balls from your hand were needed to clear the board."}], "constraints": "Constraints:\n1 <= board.length <= 16\n1 <= hand.length <= 5\nboard and hand consist of the characters 'R', 'Y', 'B', 'G', and 'W'.\nThe initial row of balls on the board will not have any groups of three or more consecutive balls of the same color.", "notes": ""}, "483": {"label": "Hard", "title": "Smallest Good Base", "tags": "algorithms,google,binary-search,math", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.37689999999999996, "total_accepted": 16400.0, "total_submissions": 43600.0, "testcase_example": "'\"13\"'", "body": "Given an integer n represented as a string, return the smallest good base of n.\nWe call k >= 2 a good base of n, if all digits of n base k are 1's.", "examples": [{"full_text": "Example 1:\nInput: n = \"13\"\nOutput: \"3\"\nExplanation: 13 base 3 is 111.", "input": "Input: n = \"13\"", "output": "Output: \"3\"", "explanation": "Explanation: 13 base 3 is 111."}, {"full_text": "Example 2:\nInput: n = \"4681\"\nOutput: \"8\"\nExplanation: 4681 base 8 is 11111.", "input": "Input: n = \"4681\"", "output": "Output: \"8\"", "explanation": "Explanation: 4681 base 8 is 11111."}, {"full_text": "Example 3:\nInput: n = \"1000000000000000000\"\nOutput: \"999999999999999999\"\nExplanation: 1000000000000000000 base 999999999999999999 is 11.", "input": "Input: n = \"1000000000000000000\"", "output": "Output: \"999999999999999999\"", "explanation": "Explanation: 1000000000000000000 base 999999999999999999 is 11."}], "constraints": "Constraints:\nn is an integer in the range [3, 10^18].\nn does not contain any leading zeros.", "notes": ""}, "480": {"label": "Hard", "title": "Sliding Window Median", "tags": "algorithms,google", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4064, "total_accepted": 98200.0, "total_submissions": 241700.0, "testcase_example": "'[1,3,-1,-3,5,3,6,7]\\n3'", "body": "The median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value. So the median is the mean of the two middle values.\nFor examples, if arr = [2,3,4], the median is 3.\nFor examples, if arr = [1,2,3,4], the median is (2 + 3) / 2 = 2.5.\nYou are given an integer array nums and an integer k. There is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position.\nReturn the median array for each window in the original array. Answers within 10^-5 of the actual value will be accepted.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,3,-1,-3,5,3,6,7], k = 3\nOutput: [1.00000,-1.00000,-1.00000,3.00000,5.00000,6.00000]\nExplanation:\nWindow position Median\n--------------- -----\n[1 3 -1] -3 5 3 6 7 1\n1 [3 -1 -3] 5 3 6 7 -1\n1 3 [-1 -3 5] 3 6 7 -1\n1 3 -1 [-3 5 3] 6 7 3\n1 3 -1 -3 [5 3 6] 7 5\n1 3 -1 -3 5 [3 6 7] 6", "input": "Input: nums = [1,3,-1,-3,5,3,6,7], k = 3", "output": "Output: [1.00000,-1.00000,-1.00000,3.00000,5.00000,6.00000]", "explanation": "Explanation:\nWindow position Median\n--------------- -----\n[1 3 -1] -3 5 3 6 7 1\n1 [3 -1 -3] 5 3 6 7 -1\n1 3 [-1 -3 5] 3 6 7 -1\n1 3 -1 [-3 5 3] 6 7 3\n1 3 -1 -3 [5 3 6] 7 5\n1 3 -1 -3 5 [3 6 7] 6"}, {"full_text": "Example 2:\nInput: nums = [1,2,3,4,2,3,1,4,2], k = 3\nOutput: [2.00000,3.00000,3.00000,3.00000,2.00000,3.00000,2.00000]", "input": "Input: nums = [1,2,3,4,2,3,1,4,2], k = 3", "output": "Output: [2.00000,3.00000,3.00000,3.00000,2.00000,3.00000,2.00000]", "explanation": ""}], "constraints": "Constraints:\n1 <= k <= nums.length <= 10^5\n-2^31 <= nums[i] <= 2^31 - 1", "notes": ""}, "479": {"label": "Hard", "title": "Largest Palindrome Product", "tags": "algorithms,yahoo", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3068, "total_accepted": 19700.0, "total_submissions": 64099.99999999999, "testcase_example": "'2'", "body": "Given an integer n, return the largest palindromic integer that can be represented as the product of two n-digits integers. Since the answer can be very large, return it modulo 1337.", "examples": [{"full_text": "Example 1:\nInput: n = 2\nOutput: 987\nExplanation: 99 x 91 = 9009, 9009 % 1337 = 987", "input": "Input: n = 2", "output": "Output: 987", "explanation": "Explanation: 99 x 91 = 9009, 9009 % 1337 = 987"}, {"full_text": "Example 2:\nInput: n = 1\nOutput: 9", "input": "Input: n = 1", "output": "Output: 9", "explanation": ""}], "constraints": "Constraints:\n1 <= n <= 8", "notes": ""}, "472": {"label": "Hard", "title": "Concatenated Words", "tags": "algorithms,depth-first-search,dynamic-programming,trie", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4225, "total_accepted": 121900.0, "total_submissions": 288400.0, "testcase_example": "'[\"cat\",\"cats\",\"catsdogcats\",\"dog\",\"dogcatsdog\",\"hippopotamuses\",\"rat\",\"ratcatdogcat\"]'", "body": "Given an array of strings words (without duplicates), return all the concatenated words in the given list of words.\nA concatenated word is defined as a string that is comprised entirely of at least two shorter words in the given array.", "examples": [{"full_text": "Example 1:\nInput: words = [\"cat\",\"cats\",\"catsdogcats\",\"dog\",\"dogcatsdog\",\"hippopotamuses\",\"rat\",\"ratcatdogcat\"]\nOutput: [\"catsdogcats\",\"dogcatsdog\",\"ratcatdogcat\"]\nExplanation: \"catsdogcats\" can be concatenated by \"cats\", \"dog\" and \"cats\";\n\"dogcatsdog\" can be concatenated by \"dog\", \"cats\" and \"dog\";\n\"ratcatdogcat\" can be concatenated by \"rat\", \"cat\", \"dog\" and \"cat\".", "input": "Input: words = [\"cat\",\"cats\",\"catsdogcats\",\"dog\",\"dogcatsdog\",\"hippopotamuses\",\"rat\",\"ratcatdogcat\"]", "output": "Output: [\"catsdogcats\",\"dogcatsdog\",\"ratcatdogcat\"]", "explanation": "Explanation: \"catsdogcats\" can be concatenated by \"cats\", \"dog\" and \"cats\";\n\"dogcatsdog\" can be concatenated by \"dog\", \"cats\" and \"dog\";\n\"ratcatdogcat\" can be concatenated by \"rat\", \"cat\", \"dog\" and \"cat\"."}, {"full_text": "Example 2:\nInput: words = [\"cat\",\"dog\",\"catdog\"]\nOutput: [\"catdog\"]", "input": "Input: words = [\"cat\",\"dog\",\"catdog\"]", "output": "Output: [\"catdog\"]", "explanation": ""}], "constraints": "Constraints:\n1 <= words.length <= 10^4\n0 <= words[i].length <= 30\nwords[i] consists of only lowercase English letters.\n0 <= sum(words[i].length) <= 10^5", "notes": ""}, "466": {"label": "Hard", "title": "Count The Repetitions", "tags": "algorithms,dynamic-programming", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.2894, "total_accepted": 13800.0, "total_submissions": 47700.0, "testcase_example": "'\"acb\"\\n4\\n\"ab\"\\n2'", "body": "We define str = [s, n] as the string str which consists of the string s concatenated n times.\nFor example, str == [\"abc\", 3] ==\"abcabcabc\".\nWe define that string s1 can be obtained from string s2 if we can remove some characters from s2 such that it becomes s1.\nFor example, s1 = \"abc\" can be obtained from s2 = \"abdbec\" based on our definition by removing the bolded underlined characters.\nYou are given two strings s1 and s2 and two integers n1 and n2. You have the two strings str1 = [s1, n1] and str2 = [s2, n2].\nReturn the maximum integer m such that str = [str2, m] can be obtained from str1.", "examples": [{"full_text": "Example 1:\nInput: s1 = \"acb\", n1 = 4, s2 = \"ab\", n2 = 2\nOutput: 2", "input": "Input: s1 = \"acb\", n1 = 4, s2 = \"ab\", n2 = 2", "output": "Output: 2", "explanation": ""}, {"full_text": "Example 2:\nInput: s1 = \"acb\", n1 = 1, s2 = \"acb\", n2 = 1\nOutput: 1", "input": "Input: s1 = \"acb\", n1 = 1, s2 = \"acb\", n2 = 1", "output": "Output: 1", "explanation": ""}], "constraints": "Constraints:\n1 <= s1.length, s2.length <= 100\ns1 and s2 consist of lowercase English letters.\n1 <= n1, n2 <= 10^6", "notes": ""}, "460": {"label": "Hard", "title": "LFU Cache", "tags": "algorithms,amazon,google,design", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3899, "total_accepted": 142900.0, "total_submissions": 366500.0, "testcase_example": "'[\"LFUCache\",\"put\",\"put\",\"get\",\"put\",\"get\",\"get\",\"put\",\"get\",\"get\",\"get\"]\\n' +\n  '[[2],[1,1],[2,2],[1],[3,3],[2],[3],[4,4],[1],[3],[4]]'", "body": "Design and implement a data structure for a Least Frequently Used (LFU) cache.\nImplement the LFUCache class:\nLFUCache(int capacity) Initializes the object with the capacity of the data structure.\nint get(int key) Gets the value of the key if the key exists in the cache. Otherwise, returns -1.\nvoid put(int key, int value) Update the value of the key if present, or inserts the key if not already present. When the cache reaches its capacity, it should invalidate and remove the least frequently used key before inserting a new item. For this problem, when there is a tie (i.e., two or more keys with the same frequency), the least recently used key would be invalidated.\nTo determine the least frequently used key, a use counter is maintained for each key in the cache. The key with the smallest use counter is the least frequently used key.\nWhen a key is first inserted into the cache, its use counter is set to 1 (due to the put operation). The use counter for a key in the cache is incremented either a get or put operation is called on it.\nThe functions\nget\nand\nput\nmust each run in O(1) average time complexity.", "examples": [{"full_text": "Example 1:\nInput\n[\"LFUCache\", \"put\", \"put\", \"get\", \"put\", \"get\", \"get\", \"put\", \"get\", \"get\", \"get\"]\n[[2], [1, 1], [2, 2], [1], [3, 3], [2], [3], [4, 4], [1], [3], [4]]\nOutput\n[null, null, null, 1, null, -1, 3, null, -1, 3, 4]\nExplanation\n// cnt(x) = the use counter for key x\n// cache=[] will show the last used order for tiebreakers (leftmost element is most recent)\nLFUCache lfu = new LFUCache(2);\nlfu.put(1, 1); // cache=[1,_], cnt(1)=1\nlfu.put(2, 2); // cache=[2,1], cnt(2)=1, cnt(1)=1\nlfu.get(1); // return 1\n// cache=[1,2], cnt(2)=1, cnt(1)=2\nlfu.put(3, 3); // 2 is the LFU key because cnt(2)=1 is the smallest, invalidate 2.\n// cache=[3,1], cnt(3)=1, cnt(1)=2\nlfu.get(2); // return -1 (not found)\nlfu.get(3); // return 3\n// cache=[3,1], cnt(3)=2, cnt(1)=2\nlfu.put(4, 4); // Both 1 and 3 have the same cnt, but 1 is LRU, invalidate 1.\n// cache=[4,3], cnt(4)=1, cnt(3)=2\nlfu.get(1); // return -1 (not found)\nlfu.get(3); // return 3\n// cache=[3,4], cnt(4)=1, cnt(3)=3\nlfu.get(4); // return 4\n// cache=[4,3], cnt(4)=2, cnt(3)=3", "input": "Input\n[\"LFUCache\", \"put\", \"put\", \"get\", \"put\", \"get\", \"get\", \"put\", \"get\", \"get\", \"get\"]\n[[2], [1, 1], [2, 2], [1], [3, 3], [2], [3], [4, 4], [1], [3], [4]]", "output": "Output\n[null, null, null, 1, null, -1, 3, null, -1, 3, 4]", "explanation": "Explanation\n// cnt(x) = the use counter for key x\n// cache=[] will show the last used order for tiebreakers (leftmost element is most recent)\nLFUCache lfu = new LFUCache(2);\nlfu.put(1, 1); // cache=[1,_], cnt(1)=1\nlfu.put(2, 2); // cache=[2,1], cnt(2)=1, cnt(1)=1\nlfu.get(1); // return 1\n// cache=[1,2], cnt(2)=1, cnt(1)=2\nlfu.put(3, 3); // 2 is the LFU key because cnt(2)=1 is the smallest, invalidate 2.\n// cache=[3,1], cnt(3)=1, cnt(1)=2\nlfu.get(2); // return -1 (not found)\nlfu.get(3); // return 3\n// cache=[3,1], cnt(3)=2, cnt(1)=2\nlfu.put(4, 4); // Both 1 and 3 have the same cnt, but 1 is LRU, invalidate 1.\n// cache=[4,3], cnt(4)=1, cnt(3)=2\nlfu.get(1); // return -1 (not found)\nlfu.get(3); // return 3\n// cache=[3,4], cnt(4)=1, cnt(3)=3\nlfu.get(4); // return 4\n// cache=[4,3], cnt(4)=2, cnt(3)=3"}], "constraints": "Constraints:\n0 <= capacity\n<= 10^4\n0 <= key <= 10^5\n0 <= value <= 10^9\nAt most 2 * 10^5\ncalls will be made to get and put.", "notes": ""}, "458": {"label": "Hard", "title": "Poor Pigs", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5538000000000001, "total_accepted": 33000.0, "total_submissions": 59600.0, "testcase_example": "'1000\\n15\\n60'", "body": "There are buckets buckets of liquid, where exactly one of the buckets is poisonous. To figure out which one is poisonous, you feed some number of (poor) pigs the liquid to see whether they will die or not. Unfortunately, you only have minutesToTest minutes to determine which bucket is poisonous.\nYou can feed the pigs according to these steps:\nChoose some live pigs to feed.\nFor each pig, choose which buckets to feed it. The pig will consume all the chosen buckets simultaneously and will take no time.\nWait for minutesToDie minutes. You may not feed any other pigs during this time.\nAfter minutesToDie minutes have passed, any pigs that have been fed the poisonous bucket will die, and all others will survive.\nRepeat this process until you run out of time.\nGiven buckets, minutesToDie, and minutesToTest, return the minimum number of pigs needed to figure out which bucket is poisonous within the allotted time.", "examples": [{"full_text": "Example 1:\nInput: buckets = 1000, minutesToDie = 15, minutesToTest = 60\nOutput: 5", "input": "Input: buckets = 1000, minutesToDie = 15, minutesToTest = 60", "output": "Output: 5", "explanation": ""}, {"full_text": "Example 2:\nInput: buckets = 4, minutesToDie = 15, minutesToTest = 15\nOutput: 2", "input": "Input: buckets = 4, minutesToDie = 15, minutesToTest = 15", "output": "Output: 2", "explanation": ""}, {"full_text": "Example 3:\nInput: buckets = 4, minutesToDie = 15, minutesToTest = 30\nOutput: 2", "input": "Input: buckets = 4, minutesToDie = 15, minutesToTest = 30", "output": "Output: 2", "explanation": ""}], "constraints": "Constraints:\n1 <= buckets <= 1000\n1 <=\nminutesToDie <=\nminutesToTest <= 100", "notes": ""}, "446": {"label": "Hard", "title": "Arithmetic Slices II - Subsequence", "tags": "algorithms,baidu,dynamic-programming", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3925, "total_accepted": 42200.0, "total_submissions": 107500.0, "testcase_example": "'[2,4,6,8,10]'", "body": "Given an integer array nums, return the number of all the arithmetic subsequences of nums.\nA sequence of numbers is called arithmetic if it consists of at least three elements and if the difference between any two consecutive elements is the same.\nFor example, [1, 3, 5, 7, 9], [7, 7, 7, 7], and [3, -1, -5, -9] are arithmetic sequences.\nFor example, [1, 1, 2, 5, 7] is not an arithmetic sequence.\nA subsequence of an array is a sequence that can be formed by removing some elements (possibly none) of the array.\nFor example, [2,5,10] is a subsequence of [1,2,1,2,4,1,5,10].\nThe test cases are generated so that the answer fits in 32-bit integer.", "examples": [{"full_text": "Example 1:\nInput: nums = [2,4,6,8,10]\nOutput: 7\nExplanation: All arithmetic subsequence slices are:\n[2,4,6]\n[4,6,8]\n[6,8,10]\n[2,4,6,8]\n[4,6,8,10]\n[2,4,6,8,10]\n[2,6,10]", "input": "Input: nums = [2,4,6,8,10]", "output": "Output: 7", "explanation": "Explanation: All arithmetic subsequence slices are:\n[2,4,6]\n[4,6,8]\n[6,8,10]\n[2,4,6,8]\n[4,6,8,10]\n[2,4,6,8,10]\n[2,6,10]"}, {"full_text": "Example 2:\nInput: nums = [7,7,7,7,7]\nOutput: 16\nExplanation: Any subsequence of this array is arithmetic.", "input": "Input: nums = [7,7,7,7,7]", "output": "Output: 16", "explanation": "Explanation: Any subsequence of this array is arithmetic."}], "constraints": "Constraints:\n1\n<= nums.length <= 1000\n-2^31 <= nums[i] <= 2^31 - 1", "notes": ""}, "440": {"label": "Hard", "title": "K-th Smallest in Lexicographical Order", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3042, "total_accepted": 17000.0, "total_submissions": 55800.0, "testcase_example": "'13\\n2'", "body": "Given two integers n and k, return the k^th lexicographically smallest integer in the range [1, n].", "examples": [{"full_text": "Example 1:\nInput: n = 13, k = 2\nOutput: 10\nExplanation: The lexicographical order is [1, 10, 11, 12, 13, 2, 3, 4, 5, 6, 7, 8, 9], so the second smallest number is 10.", "input": "Input: n = 13, k = 2", "output": "Output: 10", "explanation": "Explanation: The lexicographical order is [1, 10, 11, 12, 13, 2, 3, 4, 5, 6, 7, 8, 9], so the second smallest number is 10."}, {"full_text": "Example 2:\nInput: n = 1, k = 1\nOutput: 1", "input": "Input: n = 1, k = 1", "output": "Output: 1", "explanation": ""}], "constraints": "Constraints:\n1 <= k <= n <= 10^9", "notes": ""}, "432": {"label": "Hard", "title": "All O`one Data Structure", "tags": "algorithms,uber,design", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3533, "total_accepted": 52700.0, "total_submissions": 149200.0, "testcase_example": "'[\"AllOne\",\"inc\",\"inc\",\"getMaxKey\",\"getMinKey\",\"inc\",\"getMaxKey\",\"getMinKey\"]\\n' +\n  '[[],[\"hello\"],[\"hello\"],[],[],[\"leet\"],[],[]]'", "body": "Design a data structure to store the strings' count with the ability to return the strings with minimum and maximum counts.\nImplement the AllOne class:\nAllOne() Initializes the object of the data structure.\ninc(String key) Increments the count of the string key by 1. If key does not exist in the data structure, insert it with count 1.\ndec(String key) Decrements the count of the string key by 1. If the count of key is 0 after the decrement, remove it from the data structure. It is guaranteed that key exists in the data structure before the decrement.\ngetMaxKey() Returns one of the keys with the maximal count. If no element exists, return an empty string \"\".\ngetMinKey() Returns one of the keys with the minimum count. If no element exists, return an empty string \"\".", "examples": [{"full_text": "Example 1:\nInput\n[\"AllOne\", \"inc\", \"inc\", \"getMaxKey\", \"getMinKey\", \"inc\", \"getMaxKey\", \"getMinKey\"]\n[[], [\"hello\"], [\"hello\"], [], [], [\"leet\"], [], []]\nOutput\n[null, null, null, \"hello\", \"hello\", null, \"hello\", \"leet\"]\nExplanation\nAllOne allOne = new AllOne();\nallOne.inc(\"hello\");\nallOne.inc(\"hello\");\nallOne.getMaxKey(); // return \"hello\"\nallOne.getMinKey(); // return \"hello\"\nallOne.inc(\"leet\");\nallOne.getMaxKey(); // return \"hello\"\nallOne.getMinKey(); // return \"leet\"", "input": "Input\n[\"AllOne\", \"inc\", \"inc\", \"getMaxKey\", \"getMinKey\", \"inc\", \"getMaxKey\", \"getMinKey\"]\n[[], [\"hello\"], [\"hello\"], [], [], [\"leet\"], [], []]", "output": "Output\n[null, null, null, \"hello\", \"hello\", null, \"hello\", \"leet\"]", "explanation": "Explanation\nAllOne allOne = new AllOne();\nallOne.inc(\"hello\");\nallOne.inc(\"hello\");\nallOne.getMaxKey(); // return \"hello\"\nallOne.getMinKey(); // return \"hello\"\nallOne.inc(\"leet\");\nallOne.getMaxKey(); // return \"hello\"\nallOne.getMinKey(); // return \"leet\""}], "constraints": "Constraints:\n1 <= key.length <= 10\nkey consists of lowercase English letters.\nIt is guaranteed that for each call to dec, key is existing in the data structure.\nAt most 5 * 10^4\ncalls will be made to inc, dec, getMaxKey, and getMinKey.", "notes": ""}, "420": {"label": "Hard", "title": "Strong Password Checker", "tags": "algorithms", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.1409, "total_accepted": 23000.0, "total_submissions": 163400.0, "testcase_example": "'\"a\"'", "body": "A password is considered strong if the below conditions are all met:\nIt has at least 6 characters and at most 20 characters.\nIt contains at least one lowercase letter, at least one uppercase letter, and at least one digit.\nIt does\nnot contain three repeating characters in a row (i.e.,\n\"...aaa...\" is weak, but \"...aa...a...\" is strong, assuming other conditions are met).\nGiven a string password, return the minimum number of steps required to make password strong. if password is already strong, return 0.\nIn one step, you can:\nInsert one character to password,\nDelete one character from password, or\nReplace\none character of password with another character.", "examples": [{"full_text": "Example 1:\nInput: password = \"a\"\nOutput: 5", "input": "Input: password = \"a\"", "output": "Output: 5", "explanation": ""}, {"full_text": "Example 2:\nInput: password = \"aA1\"\nOutput: 3", "input": "Input: password = \"aA1\"", "output": "Output: 3", "explanation": ""}, {"full_text": "Example 3:\nInput: password = \"1337C0d3\"\nOutput: 0", "input": "Input: password = \"1337C0d3\"", "output": "Output: 0", "explanation": ""}], "constraints": "Constraints:\n1 <= password.length <= 50\npassword consists of letters, digits, dot\n'.' or exclamation mark '!'.", "notes": ""}, "410": {"label": "Hard", "title": "Split Array Largest Sum", "tags": "algorithms,baidu,facebook,binary-search,dynamic-programming", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4979, "total_accepted": 168200.0, "total_submissions": 337900.0, "testcase_example": "'[7,2,5,10,8]\\n2'", "body": "Given an array nums which consists of non-negative integers and an integer m, you can split the array into m non-empty continuous subarrays.\nWrite an algorithm to minimize the largest sum among these m subarrays.", "examples": [{"full_text": "Example 1:\nInput: nums = [7,2,5,10,8], m = 2\nOutput: 18\nExplanation:\nThere are four ways to split nums into two subarrays.\nThe best way is to split it into [7,2,5] and [10,8],\nwhere the largest sum among the two subarrays is only 18.", "input": "Input: nums = [7,2,5,10,8], m = 2", "output": "Output: 18", "explanation": "Explanation:\nThere are four ways to split nums into two subarrays.\nThe best way is to split it into [7,2,5] and [10,8],\nwhere the largest sum among the two subarrays is only 18."}, {"full_text": "Example 2:\nInput: nums = [1,2,3,4,5], m = 2\nOutput: 9", "input": "Input: nums = [1,2,3,4,5], m = 2", "output": "Output: 9", "explanation": ""}, {"full_text": "Example 3:\nInput: nums = [1,4,4], m = 3\nOutput: 4", "input": "Input: nums = [1,4,4], m = 3", "output": "Output: 4", "explanation": ""}], "constraints": "Constraints:\n1 <= nums.length <= 1000\n0 <= nums[i] <= 10^6\n1 <= m <= min(50, nums.length)", "notes": ""}, "407": {"label": "Hard", "title": "Trapping Rain Water II", "tags": "algorithms,google,twitter,breadth-first-search,heap", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.46619999999999995, "total_accepted": 65500.0, "total_submissions": 140600.0, "testcase_example": "'[[1,4,3,1,3,2],[3,2,1,3,2,4],[2,3,3,2,3,1]]'", "body": "Given an m x n integer matrix heightMap representing the height of each unit cell in a 2D elevation map, return the volume of water it can trap after raining.", "examples": [{"full_text": "Example 1:\nInput: heightMap = [[1,4,3,1,3,2],[3,2,1,3,2,4],[2,3,3,2,3,1]]\nOutput: 4\nExplanation: After the rain, water is trapped between the blocks.\nWe have two small ponds 1 and 3 units trapped.\nThe total volume of water trapped is 4.", "input": "Input: heightMap = [[1,4,3,1,3,2],[3,2,1,3,2,4],[2,3,3,2,3,1]]", "output": "Output: 4", "explanation": "Explanation: After the rain, water is trapped between the blocks.\nWe have two small ponds 1 and 3 units trapped.\nThe total volume of water trapped is 4."}, {"full_text": "Example 2:\nInput: heightMap = [[3,3,3,3,3],[3,2,2,2,3],[3,2,1,2,3],[3,2,2,2,3],[3,3,3,3,3]]\nOutput: 10", "input": "Input: heightMap = [[3,3,3,3,3],[3,2,2,2,3],[3,2,1,2,3],[3,2,2,2,3],[3,3,3,3,3]]", "output": "Output: 10", "explanation": ""}], "constraints": "Constraints:\nm == heightMap.length\nn == heightMap[i].length\n1 <= m, n <= 200\n0 <= heightMap[i][j] <= 2 * 10^4", "notes": ""}, "403": {"label": "Hard", "title": "Frog Jump", "tags": "algorithms,snapchat,dynamic-programming", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4278, "total_accepted": 146600.0, "total_submissions": 342800.0, "testcase_example": "'[0,1,3,5,6,8,12,17]'", "body": "A frog is crossing a river. The river is divided into some number of units, and at each unit, there may or may not exist a stone. The frog can jump on a stone, but it must not jump into the water.\nGiven a list of stones' positions (in units) in sorted ascending order, determine if the frog can cross the river by landing on the last stone. Initially, the frog is on the first stone and assumes the first jump must be 1 unit.\nIf the frog's last jump was k units, its next jump must be either k - 1, k, or k + 1 units. The frog can only jump in the forward direction.", "examples": [{"full_text": "Example 1:\nInput: stones = [0,1,3,5,6,8,12,17]\nOutput: true\nExplanation: The frog can jump to the last stone by jumping 1 unit to the 2nd stone, then 2 units to the 3rd stone, then 2 units to the 4th stone, then 3 units to the 6th stone, 4 units to the 7th stone, and 5 units to the 8th stone.", "input": "Input: stones = [0,1,3,5,6,8,12,17]", "output": "Output: true", "explanation": "Explanation: The frog can jump to the last stone by jumping 1 unit to the 2nd stone, then 2 units to the 3rd stone, then 2 units to the 4th stone, then 3 units to the 6th stone, 4 units to the 7th stone, and 5 units to the 8th stone."}, {"full_text": "Example 2:\nInput: stones = [0,1,2,3,4,8,9,11]\nOutput: false\nExplanation: There is no way to jump to the last stone as the gap between the 5th and 6th stone is too large.", "input": "Input: stones = [0,1,2,3,4,8,9,11]", "output": "Output: false", "explanation": "Explanation: There is no way to jump to the last stone as the gap between the 5th and 6th stone is too large."}], "constraints": "Constraints:\n2 <= stones.length <= 2000\n0 <= stones[i] <= 2^31 - 1\nstones[0] == 0\nstones\nis sorted in a strictly increasing order.", "notes": ""}, "391": {"label": "Hard", "title": "Perfect Rectangle", "tags": "algorithms,google", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.31920000000000004, "total_accepted": 33300.0, "total_submissions": 104300.0, "testcase_example": "'[[1,1,3,3],[3,1,4,2],[3,2,4,4],[1,3,2,4],[2,3,3,4]]'", "body": "Given an array rectangles where rectangles[i] = [xi, yi, ai, bi] represents an axis-aligned rectangle. The bottom-left point of the rectangle is (xi, yi) and the top-right point of it is (ai, bi).\nReturn true if all the rectangles together form an exact cover of a rectangular region.", "examples": [{"full_text": "Example 1:\nInput: rectangles = [[1,1,3,3],[3,1,4,2],[3,2,4,4],[1,3,2,4],[2,3,3,4]]\nOutput: true\nExplanation: All 5 rectangles together form an exact cover of a rectangular region.", "input": "Input: rectangles = [[1,1,3,3],[3,1,4,2],[3,2,4,4],[1,3,2,4],[2,3,3,4]]", "output": "Output: true", "explanation": "Explanation: All 5 rectangles together form an exact cover of a rectangular region."}, {"full_text": "Example 2:\nInput: rectangles = [[1,1,2,3],[1,3,2,4],[3,1,4,2],[3,2,4,4]]\nOutput: false\nExplanation: Because there is a gap between the two rectangular regions.", "input": "Input: rectangles = [[1,1,2,3],[1,3,2,4],[3,1,4,2],[3,2,4,4]]", "output": "Output: false", "explanation": "Explanation: Because there is a gap between the two rectangular regions."}, {"full_text": "Example 3:\nInput: rectangles = [[1,1,3,3],[3,1,4,2],[1,3,2,4],[2,2,4,4]]\nOutput: false\nExplanation: Because two of the rectangles overlap with each other.", "input": "Input: rectangles = [[1,1,3,3],[3,1,4,2],[1,3,2,4],[2,2,4,4]]", "output": "Output: false", "explanation": "Explanation: Because two of the rectangles overlap with each other."}], "constraints": "Constraints:\n1 <= rectangles.length <= 2 * 10^4\nrectangles[i].length == 4\n-10^5 <= xi, yi, ai, bi <= 10^5", "notes": ""}, "381": {"label": "Hard", "title": "Insert Delete GetRandom O(1) - Duplicates allowed", "tags": "algorithms,yelp,array,design,hash-table", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.35369999999999996, "total_accepted": 102600.0, "total_submissions": 290100.0, "testcase_example": "'[\"RandomizedCollection\",\"insert\",\"insert\",\"insert\",\"getRandom\",\"remove\",\"getRandom\"]\\n' +\n  '[[],[1],[1],[2],[],[1],[]]'", "body": "RandomizedCollection is a data structure that contains a collection of numbers, possibly duplicates (i.e., a multiset). It should support inserting and removing specific elements and also removing a random element.\nImplement the RandomizedCollection class:\nRandomizedCollection() Initializes the empty RandomizedCollection object.\nbool insert(int val) Inserts an item val into the multiset, even if the item is already present. Returns true if the item is not present, false otherwise.\nbool remove(int val) Removes an item val from the multiset if present. Returns true if the item is present, false otherwise. Note that if val has multiple occurrences in the multiset, we only remove one of them.\nint getRandom() Returns a random element from the current multiset of elements. The probability of each element being returned is linearly related to the number of same values the multiset contains.\nYou must implement the functions of the class such that each function works on average O(1) time complexity.\nNote: The test cases are generated such that getRandom will only be called if there is at least one item in the RandomizedCollection.", "examples": [{"full_text": "Example 1:\nInput\n[\"RandomizedCollection\", \"insert\", \"insert\", \"insert\", \"getRandom\", \"remove\", \"getRandom\"]\n[[], [1], [1], [2], [], [1], []]\nOutput\n[null, true, false, true, 2, true, 1]\nExplanation\nRandomizedCollection randomizedCollection = new RandomizedCollection();\nrandomizedCollection.insert(1); // return true since the collection does not contain 1.\n// Inserts 1 into the collection.\nrandomizedCollection.insert(1); // return false since the collection contains 1.\n// Inserts another 1 into the collection. Collection now contains [1,1].\nrandomizedCollection.insert(2); // return true since the collection does not contain 2.\n// Inserts 2 into the collection. Collection now contains [1,1,2].\nrandomizedCollection.getRandom(); // getRandom should:\n// - return 1 with probability 2/3, or\n// - return 2 with probability 1/3.\nrandomizedCollection.remove(1); // return true since the collection contains 1.\n// Removes 1 from the collection. Collection now contains [1,2].\nrandomizedCollection.getRandom(); // getRandom should return 1 or 2, both equally likely.", "input": "Input\n[\"RandomizedCollection\", \"insert\", \"insert\", \"insert\", \"getRandom\", \"remove\", \"getRandom\"]\n[[], [1], [1], [2], [], [1], []]", "output": "Output\n[null, true, false, true, 2, true, 1]", "explanation": "Explanation\nRandomizedCollection randomizedCollection = new RandomizedCollection();\nrandomizedCollection.insert(1); // return true since the collection does not contain 1.\n// Inserts 1 into the collection.\nrandomizedCollection.insert(1); // return false since the collection contains 1.\n// Inserts another 1 into the collection. Collection now contains [1,1].\nrandomizedCollection.insert(2); // return true since the collection does not contain 2.\n// Inserts 2 into the collection. Collection now contains [1,1,2].\nrandomizedCollection.getRandom(); // getRandom should:\n// - return 1 with probability 2/3, or\n// - return 2 with probability 1/3.\nrandomizedCollection.remove(1); // return true since the collection contains 1.\n// Removes 1 from the collection. Collection now contains [1,2].\nrandomizedCollection.getRandom(); // getRandom should return 1 or 2, both equally likely."}], "constraints": "Constraints:\n-2^31 <= val <= 2^31 - 1\nAt most 2 * 10^5 calls in total will be made to insert, remove, and getRandom.\nThere will be at least one element in the data structure when getRandom is called.", "notes": ""}, "363": {"label": "Hard", "title": "Max Sum of Rectangle No Larger Than K", "tags": "algorithms,google,binary-search,dynamic-programming,queue", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4014, "total_accepted": 77300.0, "total_submissions": 192500.0, "testcase_example": "'[[1,0,1],[0,-2,3]]\\n2'", "body": "Given an m x n matrix matrix and an integer k, return the max sum of a rectangle in the matrix such that its sum is no larger than k.\nIt is guaranteed that there will be a rectangle with a sum no larger than k.", "examples": [{"full_text": "Example 1:\nInput: matrix = [[1,0,1],[0,-2,3]], k = 2\nOutput: 2\nExplanation: Because the sum of the blue rectangle [[0, 1], [-2, 3]] is 2, and 2 is the max number no larger than k (k = 2).", "input": "Input: matrix = [[1,0,1],[0,-2,3]], k = 2", "output": "Output: 2", "explanation": "Explanation: Because the sum of the blue rectangle [[0, 1], [-2, 3]] is 2, and 2 is the max number no larger than k (k = 2)."}, {"full_text": "Example 2:\nInput: matrix = [[2,2,-1]], k = 3\nOutput: 3", "input": "Input: matrix = [[2,2,-1]], k = 3", "output": "Output: 3", "explanation": ""}], "constraints": "Constraints:\nm == matrix.length\nn == matrix[i].length\n1 <= m, n <= 100\n-100 <= matrix[i][j] <= 100\n-10^5 <= k <= 10^5\nFollow up: What if the number of rows is much larger than the number of columns?", "notes": ""}, "354": {"label": "Hard", "title": "Russian Doll Envelopes", "tags": "algorithms,google,binary-search,dynamic-programming", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.39390000000000003, "total_accepted": 131600.0, "total_submissions": 334000.0, "testcase_example": "'[[5,4],[6,4],[6,7],[2,3]]'", "body": "You are given a 2D array of integers envelopes where envelopes[i] = [wi, hi] represents the width and the height of an envelope.\nOne envelope can fit into another if and only if both the width and height of one envelope are greater than the other envelope's width and height.\nReturn the maximum number of envelopes you can Russian doll (i.e., put one inside the other).\nNote: You cannot rotate an envelope.", "examples": [{"full_text": "Example 1:\nInput: envelopes = [[5,4],[6,4],[6,7],[2,3]]\nOutput: 3\nExplanation: The maximum number of envelopes you can Russian doll is 3 ([2,3] => [5,4] => [6,7]).", "input": "Input: envelopes = [[5,4],[6,4],[6,7],[2,3]]", "output": "Output: 3", "explanation": "Explanation: The maximum number of envelopes you can Russian doll is 3 ([2,3] => [5,4] => [6,7])."}, {"full_text": "Example 2:\nInput: envelopes = [[1,1],[1,1],[1,1]]\nOutput: 1", "input": "Input: envelopes = [[1,1],[1,1],[1,1]]", "output": "Output: 1", "explanation": ""}], "constraints": "Constraints:\n1 <= envelopes.length <= 10^5\nenvelopes[i].length == 2\n1 <= wi, hi <= 10^5", "notes": ""}, "352": {"label": "Hard", "title": "Data Stream as Disjoint Intervals", "tags": "algorithms,binary-search-tree", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5025999999999999, "total_accepted": 49000.0, "total_submissions": 97500.0, "testcase_example": "'[\"SummaryRanges\",\"addNum\",\"getIntervals\",\"addNum\",\"getIntervals\",\"addNum\",\"getIntervals\",\"addNum\",\"getIntervals\",\"addNum\",\"getIntervals\"]\\n' +\n  '[[],[1],[],[3],[],[7],[],[2],[],[6],[]]'", "body": "Given a data stream input of non-negative integers a1, a2, ..., an, summarize the numbers seen so far as a list of disjoint intervals.\nImplement the SummaryRanges class:\nSummaryRanges() Initializes the object with an empty stream.\nvoid addNum(int val) Adds the integer val to the stream.\nint[][] getIntervals() Returns a summary of the integers in the stream currently as a list of disjoint intervals [starti, endi].", "examples": [{"full_text": "Example 1:\nInput\n[\"SummaryRanges\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\"]\n[[], [1], [], [3], [], [7], [], [2], [], [6], []]\nOutput\n[null, null, [[1, 1]], null, [[1, 1], [3, 3]], null, [[1, 1], [3, 3], [7, 7]], null, [[1, 3], [7, 7]], null, [[1, 3], [6, 7]]]\nExplanation\nSummaryRanges summaryRanges = new SummaryRanges();\nsummaryRanges.addNum(1); // arr = [1]\nsummaryRanges.getIntervals(); // return [[1, 1]]\nsummaryRanges.addNum(3); // arr = [1, 3]\nsummaryRanges.getIntervals(); // return [[1, 1], [3, 3]]\nsummaryRanges.addNum(7); // arr = [1, 3, 7]\nsummaryRanges.getIntervals(); // return [[1, 1], [3, 3], [7, 7]]\nsummaryRanges.addNum(2); // arr = [1, 2, 3, 7]\nsummaryRanges.getIntervals(); // return [[1, 3], [7, 7]]\nsummaryRanges.addNum(6); // arr = [1, 2, 3, 6, 7]\nsummaryRanges.getIntervals(); // return [[1, 3], [6, 7]]", "input": "Input\n[\"SummaryRanges\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\"]\n[[], [1], [], [3], [], [7], [], [2], [], [6], []]", "output": "Output\n[null, null, [[1, 1]], null, [[1, 1], [3, 3]], null, [[1, 1], [3, 3], [7, 7]], null, [[1, 3], [7, 7]], null, [[1, 3], [6, 7]]]", "explanation": "Explanation\nSummaryRanges summaryRanges = new SummaryRanges();\nsummaryRanges.addNum(1); // arr = [1]\nsummaryRanges.getIntervals(); // return [[1, 1]]\nsummaryRanges.addNum(3); // arr = [1, 3]\nsummaryRanges.getIntervals(); // return [[1, 1], [3, 3]]\nsummaryRanges.addNum(7); // arr = [1, 3, 7]\nsummaryRanges.getIntervals(); // return [[1, 1], [3, 3], [7, 7]]\nsummaryRanges.addNum(2); // arr = [1, 2, 3, 7]\nsummaryRanges.getIntervals(); // return [[1, 3], [7, 7]]\nsummaryRanges.addNum(6); // arr = [1, 2, 3, 6, 7]\nsummaryRanges.getIntervals(); // return [[1, 3], [6, 7]]"}], "constraints": "Constraints:\n0 <= val <= 10^4\nAt most 3 * 10^4 calls will be made to addNum and getIntervals.\nFollow up: What if there are lots of merges and the number of disjoint intervals is small compared to the size of the data stream?", "notes": ""}, "336": {"label": "Hard", "title": "Palindrome Pairs", "tags": "algorithms,airbnb,google,hash-table,string,trie", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.36060000000000003, "total_accepted": 143900.0, "total_submissions": 399100.0, "testcase_example": "'[\"abcd\",\"dcba\",\"lls\",\"s\",\"sssll\"]'", "body": "Given a list of unique words, return all the pairs of the\ndistinct indices (i, j) in the given list, so that the concatenation of the two words\nwords[i] + words[j] is a palindrome.", "examples": [{"full_text": "Example 1:\nInput: words = [\"abcd\",\"dcba\",\"lls\",\"s\",\"sssll\"]\nOutput: [[0,1],[1,0],[3,2],[2,4]]\nExplanation: The palindromes are [\"dcbaabcd\",\"abcddcba\",\"slls\",\"llssssll\"]", "input": "Input: words = [\"abcd\",\"dcba\",\"lls\",\"s\",\"sssll\"]", "output": "Output: [[0,1],[1,0],[3,2],[2,4]]", "explanation": "Explanation: The palindromes are [\"dcbaabcd\",\"abcddcba\",\"slls\",\"llssssll\"]"}, {"full_text": "Example 2:\nInput: words = [\"bat\",\"tab\",\"cat\"]\nOutput: [[0,1],[1,0]]\nExplanation: The palindromes are [\"battab\",\"tabbat\"]", "input": "Input: words = [\"bat\",\"tab\",\"cat\"]", "output": "Output: [[0,1],[1,0]]", "explanation": "Explanation: The palindromes are [\"battab\",\"tabbat\"]"}, {"full_text": "Example 3:\nInput: words = [\"a\",\"\"]\nOutput: [[0,1],[1,0]]", "input": "Input: words = [\"a\",\"\"]", "output": "Output: [[0,1],[1,0]]", "explanation": ""}], "constraints": "Constraints:\n1 <= words.length <= 5000\n0 <= words[i].length <= 300\nwords[i] consists of lower-case English letters.", "notes": ""}, "335": {"label": "Hard", "title": "Self Crossing", "tags": "algorithms,math", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.2907, "total_accepted": 27200.0, "total_submissions": 93500.0, "testcase_example": "'[2,1,1,2]'", "body": "You are given an array of integers distance.\nYou start at point (0,0) on an X-Y plane and you move distance[0] meters to the north, then distance[1] meters to the west, distance[2] meters to the south, distance[3] meters to the east, and so on. In other words, after each move, your direction changes counter-clockwise.\nReturn true if your path crosses itself, and false if it does not.", "examples": [{"full_text": "Example 1:\nInput: distance = [2,1,1,2]\nOutput: true", "input": "Input: distance = [2,1,1,2]", "output": "Output: true", "explanation": ""}, {"full_text": "Example 2:\nInput: distance = [1,2,3,4]\nOutput: false", "input": "Input: distance = [1,2,3,4]", "output": "Output: false", "explanation": ""}, {"full_text": "Example 3:\nInput: distance = [1,1,1,1]\nOutput: true", "input": "Input: distance = [1,1,1,1]", "output": "Output: true", "explanation": ""}], "constraints": "Constraints:\n1 <=\ndistance.length <= 10^5\n1 <=\ndistance[i] <= 10^5", "notes": ""}, "332": {"label": "Hard", "title": "Reconstruct Itinerary", "tags": "algorithms,google,depth-first-search,graph", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.39880000000000004, "total_accepted": 267400.0, "total_submissions": 670400.0, "testcase_example": "'[[\"MUC\",\"LHR\"],[\"JFK\",\"MUC\"],[\"SFO\",\"SJC\"],[\"LHR\",\"SFO\"]]'", "body": "You are given a list of airline tickets where tickets[i] = [fromi, toi] represent the departure and the arrival airports of one flight. Reconstruct the itinerary in order and return it.\nAll of the tickets belong to a man who departs from \"JFK\", thus, the itinerary must begin with \"JFK\". If there are multiple valid itineraries, you should return the itinerary that has the smallest lexical order when read as a single string.\nFor example, the itinerary [\"JFK\", \"LGA\"] has a smaller lexical order than [\"JFK\", \"LGB\"].\nYou may assume all tickets form at least one valid itinerary. You must use all the tickets once and only once.", "examples": [{"full_text": "Example 1:\nInput: tickets = [[\"MUC\",\"LHR\"],[\"JFK\",\"MUC\"],[\"SFO\",\"SJC\"],[\"LHR\",\"SFO\"]]\nOutput: [\"JFK\",\"MUC\",\"LHR\",\"SFO\",\"SJC\"]", "input": "Input: tickets = [[\"MUC\",\"LHR\"],[\"JFK\",\"MUC\"],[\"SFO\",\"SJC\"],[\"LHR\",\"SFO\"]]", "output": "Output: [\"JFK\",\"MUC\",\"LHR\",\"SFO\",\"SJC\"]", "explanation": ""}, {"full_text": "Example 2:\nInput: tickets = [[\"JFK\",\"SFO\"],[\"JFK\",\"ATL\"],[\"SFO\",\"ATL\"],[\"ATL\",\"JFK\"],[\"ATL\",\"SFO\"]]\nOutput: [\"JFK\",\"ATL\",\"JFK\",\"SFO\",\"ATL\",\"SFO\"]\nExplanation: Another possible reconstruction is [\"JFK\",\"SFO\",\"ATL\",\"JFK\",\"ATL\",\"SFO\"] but it is larger in lexical order.", "input": "Input: tickets = [[\"JFK\",\"SFO\"],[\"JFK\",\"ATL\"],[\"SFO\",\"ATL\"],[\"ATL\",\"JFK\"],[\"ATL\",\"SFO\"]]", "output": "Output: [\"JFK\",\"ATL\",\"JFK\",\"SFO\",\"ATL\",\"SFO\"]", "explanation": "Explanation: Another possible reconstruction is [\"JFK\",\"SFO\",\"ATL\",\"JFK\",\"ATL\",\"SFO\"] but it is larger in lexical order."}], "constraints": "Constraints:\n1 <= tickets.length <= 300\ntickets[i].length == 2\nfromi.length == 3\ntoi.length == 3\nfromi and toi consist of uppercase English letters.\nfromi != toi", "notes": ""}, "330": {"label": "Hard", "title": "Patching Array", "tags": "algorithms,google,greedy", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3935, "total_accepted": 55200.0, "total_submissions": 140200.0, "testcase_example": "'[1,3]\\n6'", "body": "Given a sorted integer array nums and an integer n, add/patch elements to the array such that any number in the range [1, n] inclusive can be formed by the sum of some elements in the array.\nReturn the minimum number of patches required.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,3], n = 6\nOutput: 1\nExplanation:\nCombinations of nums are [1], [3], [1,3], which form possible sums of: 1, 3, 4.\nNow if we add/patch 2 to nums, the combinations are: [1], [2], [3], [1,3], [2,3], [1,2,3].\nPossible sums are 1, 2, 3, 4, 5, 6, which now covers the range [1, 6].\nSo we only need 1 patch.", "input": "Input: nums = [1,3], n = 6", "output": "Output: 1", "explanation": "Explanation:\nCombinations of nums are [1], [3], [1,3], which form possible sums of: 1, 3, 4.\nNow if we add/patch 2 to nums, the combinations are: [1], [2], [3], [1,3], [2,3], [1,2,3].\nPossible sums are 1, 2, 3, 4, 5, 6, which now covers the range [1, 6].\nSo we only need 1 patch."}, {"full_text": "Example 2:\nInput: nums = [1,5,10], n = 20\nOutput: 2\nExplanation: The two patches can be [2, 4].", "input": "Input: nums = [1,5,10], n = 20", "output": "Output: 2", "explanation": "Explanation: The two patches can be [2, 4]."}, {"full_text": "Example 3:\nInput: nums = [1,2,2], n = 5\nOutput: 0", "input": "Input: nums = [1,2,2], n = 5", "output": "Output: 0", "explanation": ""}], "constraints": "Constraints:\n1 <= nums.length <= 1000\n1 <= nums[i] <= 10^4\nnums is sorted in ascending order.\n1 <= n <= 2^31 - 1", "notes": ""}, "329": {"label": "Hard", "title": "Longest Increasing Path in a Matrix", "tags": "algorithms,google,depth-first-search,topological-sort", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.49119999999999997, "total_accepted": 300600.0, "total_submissions": 611900.0, "testcase_example": "'[[9,9,4],[6,6,8],[2,1,1]]'", "body": "Given an m x n integers matrix, return the length of the longest increasing path in matrix.\nFrom each cell, you can either move in four directions: left, right, up, or down. You may not move diagonally or move outside the boundary (i.e., wrap-around is not allowed).", "examples": [{"full_text": "Example 1:\nInput: matrix = [[9,9,4],[6,6,8],[2,1,1]]\nOutput: 4\nExplanation: The longest increasing path is [1, 2, 6, 9].", "input": "Input: matrix = [[9,9,4],[6,6,8],[2,1,1]]", "output": "Output: 4", "explanation": "Explanation: The longest increasing path is [1, 2, 6, 9]."}, {"full_text": "Example 2:\nInput: matrix = [[3,4,5],[3,2,6],[2,2,1]]\nOutput: 4\nExplanation: The longest increasing path is [3, 4, 5, 6]. Moving diagonally is not allowed.", "input": "Input: matrix = [[3,4,5],[3,2,6],[2,2,1]]", "output": "Output: 4", "explanation": "Explanation: The longest increasing path is [3, 4, 5, 6]. Moving diagonally is not allowed."}, {"full_text": "Example 3:\nInput: matrix = [[1]]\nOutput: 1", "input": "Input: matrix = [[1]]", "output": "Output: 1", "explanation": ""}], "constraints": "Constraints:\nm == matrix.length\nn == matrix[i].length\n1 <= m, n <= 200\n0 <= matrix[i][j] <= 2^31 - 1", "notes": ""}, "327": {"label": "Hard", "title": "Count of Range Sum", "tags": "algorithms,google,divide-and-conquer,binary-search-tree", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.36, "total_accepted": 57300.0, "total_submissions": 159300.0, "testcase_example": "'[-2,5,-1]\\n-2\\n2'", "body": "Given an integer array nums and two integers lower and upper, return the number of range sums that lie in [lower, upper] inclusive.\nRange sum S(i, j) is defined as the sum of the elements in nums between indices i and j inclusive, where i <= j.", "examples": [{"full_text": "Example 1:\nInput: nums = [-2,5,-1], lower = -2, upper = 2\nOutput: 3\nExplanation: The three ranges are: [0,0], [2,2], and [0,2] and their respective sums are: -2, -1, 2.", "input": "Input: nums = [-2,5,-1], lower = -2, upper = 2", "output": "Output: 3", "explanation": "Explanation: The three ranges are: [0,0], [2,2], and [0,2] and their respective sums are: -2, -1, 2."}, {"full_text": "Example 2:\nInput: nums = [0], lower = 0, upper = 0\nOutput: 1", "input": "Input: nums = [0], lower = 0, upper = 0", "output": "Output: 1", "explanation": ""}], "constraints": "Constraints:\n1 <= nums.length <= 10^5\n-2^31 <= nums[i] <= 2^31 - 1\n-10^5 <= lower <= upper <= 10^5\nThe answer is guaranteed to fit in a 32-bit integer.", "notes": ""}, "321": {"label": "Hard", "title": "Create Maximum Number", "tags": "algorithms,google,dynamic-programming,greedy", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.2822, "total_accepted": 48400.0, "total_submissions": 171400.0, "testcase_example": "'[3,4,6,5]\\n[9,1,2,5,8,3]\\n5'", "body": "You are given two integer arrays nums1 and nums2 of lengths m and n respectively. nums1 and nums2 represent the digits of two numbers. You are also given an integer k.\nCreate the maximum number of length k <= m + n from digits of the two numbers. The relative order of the digits from the same array must be preserved.\nReturn an array of the k digits representing the answer.", "examples": [{"full_text": "Example 1:\nInput: nums1 = [3,4,6,5], nums2 = [9,1,2,5,8,3], k = 5\nOutput: [9,8,6,5,3]", "input": "Input: nums1 = [3,4,6,5], nums2 = [9,1,2,5,8,3], k = 5", "output": "Output: [9,8,6,5,3]", "explanation": ""}, {"full_text": "Example 2:\nInput: nums1 = [6,7], nums2 = [6,0,4], k = 5\nOutput: [6,7,6,0,4]", "input": "Input: nums1 = [6,7], nums2 = [6,0,4], k = 5", "output": "Output: [6,7,6,0,4]", "explanation": ""}, {"full_text": "Example 3:\nInput: nums1 = [3,9], nums2 = [8,9], k = 3\nOutput: [9,8,9]", "input": "Input: nums1 = [3,9], nums2 = [8,9], k = 3", "output": "Output: [9,8,9]", "explanation": ""}], "constraints": "Constraints:\nm == nums1.length\nn == nums2.length\n1 <= m, n <= 500\n0 <= nums1[i], nums2[i] <= 9\n1 <= k <= m + n", "notes": ""}, "315": {"label": "Hard", "title": "Count of Smaller Numbers After Self", "tags": "algorithms,google,binary-indexed-tree,divide-and-conquer,segment-tree,binary-search-tree", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.42060000000000003, "total_accepted": 217400.0, "total_submissions": 516799.99999999994, "testcase_example": "'[5,2,6,1]'", "body": "You are given an integer array nums and you have to return a new counts array. The counts array has the property where counts[i] is the number of smaller elements to the right of nums[i].", "examples": [{"full_text": "Example 1:\nInput: nums = [5,2,6,1]\nOutput: [2,1,1,0]\nExplanation:\nTo the right of 5 there are 2 smaller elements (2 and 1).\nTo the right of 2 there is only 1 smaller element (1).\nTo the right of 6 there is 1 smaller element (1).\nTo the right of 1 there is 0 smaller element.", "input": "Input: nums = [5,2,6,1]", "output": "Output: [2,1,1,0]", "explanation": "Explanation:\nTo the right of 5 there are 2 smaller elements (2 and 1).\nTo the right of 2 there is only 1 smaller element (1).\nTo the right of 6 there is 1 smaller element (1).\nTo the right of 1 there is 0 smaller element."}, {"full_text": "Example 2:\nInput: nums = [-1]\nOutput: [0]", "input": "Input: nums = [-1]", "output": "Output: [0]", "explanation": ""}, {"full_text": "Example 3:\nInput: nums = [-1,-1]\nOutput: [0,0]", "input": "Input: nums = [-1,-1]", "output": "Output: [0,0]", "explanation": ""}], "constraints": "Constraints:\n1 <= nums.length <= 10^5\n-10^4 <= nums[i] <= 10^4", "notes": ""}, "312": {"label": "Hard", "title": "Burst Balloons", "tags": "algorithms,google,snapchat,divide-and-conquer,dynamic-programming", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5609000000000001, "total_accepted": 177300.0, "total_submissions": 316100.0, "testcase_example": "'[3,1,5,8]'", "body": "You are given n balloons, indexed from 0 to n - 1. Each balloon is painted with a number on it represented by an array nums. You are asked to burst all the balloons.\nIf you burst the i^th balloon, you will get nums[i - 1] * nums[i] * nums[i + 1] coins. If i - 1 or i + 1 goes out of bounds of the array, then treat it as if there is a balloon with a 1 painted on it.\nReturn the maximum coins you can collect by bursting the balloons wisely.", "examples": [{"full_text": "Example 1:\nInput: nums = [3,1,5,8]\nOutput: 167\nExplanation:\nnums = [3,1,5,8] --> [3,5,8] --> [3,8] --> [8] --> []\ncoins = 3*1*5 + 3*5*8 + 1*3*8 + 1*8*1 = 167", "input": "Input: nums = [3,1,5,8]", "output": "Output: 167", "explanation": "Explanation:\nnums = [3,1,5,8] --> [3,5,8] --> [3,8] --> [8] --> []\ncoins = 3*1*5 + 3*5*8 + 1*3*8 + 1*8*1 = 167"}, {"full_text": "Example 2:\nInput: nums = [1,5]\nOutput: 10", "input": "Input: nums = [1,5]", "output": "Output: 10", "explanation": ""}], "constraints": "Constraints:\nn == nums.length\n1 <= n <= 300\n0 <= nums[i] <= 100", "notes": ""}, "301": {"label": "Hard", "title": "Remove Invalid Parentheses", "tags": "algorithms,facebook,breadth-first-search,depth-first-search", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.46549999999999997, "total_accepted": 331400.0, "total_submissions": 711800.0, "testcase_example": "'\"()())()\"'", "body": "Given a string s that contains parentheses and letters, remove the minimum number of invalid parentheses to make the input string valid.\nReturn all the possible results. You may return the answer in any order.", "examples": [{"full_text": "Example 1:\nInput: s = \"()())()\"\nOutput: [\"(())()\",\"()()()\"]", "input": "Input: s = \"()())()\"", "output": "Output: [\"(())()\",\"()()()\"]", "explanation": ""}, {"full_text": "Example 2:\nInput: s = \"(a)())()\"\nOutput: [\"(a())()\",\"(a)()()\"]", "input": "Input: s = \"(a)())()\"", "output": "Output: [\"(a())()\",\"(a)()()\"]", "explanation": ""}, {"full_text": "Example 3:\nInput: s = \")(\"\nOutput: [\"\"]", "input": "Input: s = \")(\"", "output": "Output: [\"\"]", "explanation": ""}], "constraints": "Constraints:\n1 <= s.length <= 25\ns consists of lowercase English letters and parentheses '(' and ')'.\nThere will be at most 20 parentheses in s.", "notes": ""}, "297": {"label": "Hard", "title": "Serialize and Deserialize Binary Tree", "tags": "algorithms,amazon,bloomberg,facebook,google,linkedin,microsoft,uber,yahoo,design,tree", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.531, "total_accepted": 565800.0, "total_submissions": 1100000.0, "testcase_example": "'[1,2,3,null,null,4,5]'", "body": "Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.\nDesign an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.\nClarification: The input/output format is the same as how LeetCode serializes a binary tree. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.", "examples": [{"full_text": "Example 1:\nInput: root = [1,2,3,null,null,4,5]\nOutput: [1,2,3,null,null,4,5]", "input": "Input: root = [1,2,3,null,null,4,5]", "output": "Output: [1,2,3,null,null,4,5]", "explanation": ""}, {"full_text": "Example 2:\nInput: root = []\nOutput: []", "input": "Input: root = []", "output": "Output: []", "explanation": ""}], "constraints": "Constraints:\nThe number of nodes in the tree is in the range [0, 10^4].\n-1000 <= Node.val <= 1000", "notes": ""}, "295": {"label": "Hard", "title": "Find Median from Data Stream", "tags": "algorithms,google,design,heap", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4997, "total_accepted": 421200.0, "total_submissions": 843000.0, "testcase_example": "'[\"MedianFinder\",\"addNum\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\"]\\n' +\n  '[[],[1],[2],[],[3],[]]'", "body": "The median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value and the median is the mean of the two middle values.\nFor example, for arr = [2,3,4], the median is 3.\nFor example, for arr = [2,3], the median is (2 + 3) / 2 = 2.5.\nImplement the MedianFinder class:\nMedianFinder() initializes the MedianFinder object.\nvoid addNum(int num) adds the integer num from the data stream to the data structure.\ndouble findMedian() returns the median of all elements so far. Answers within 10^-5 of the actual answer will be accepted.", "examples": [{"full_text": "Example 1:\nInput\n[\"MedianFinder\", \"addNum\", \"addNum\", \"findMedian\", \"addNum\", \"findMedian\"]\n[[], [1], [2], [], [3], []]\nOutput\n[null, null, null, 1.5, null, 2.0]\nExplanation\nMedianFinder medianFinder = new MedianFinder();\nmedianFinder.addNum(1); // arr = [1]\nmedianFinder.addNum(2); // arr = [1, 2]\nmedianFinder.findMedian(); // return 1.5 (i.e., (1 + 2) / 2)\nmedianFinder.addNum(3); // arr[1, 2, 3]\nmedianFinder.findMedian(); // return 2.0", "input": "Input\n[\"MedianFinder\", \"addNum\", \"addNum\", \"findMedian\", \"addNum\", \"findMedian\"]\n[[], [1], [2], [], [3], []]", "output": "Output\n[null, null, null, 1.5, null, 2.0]", "explanation": "Explanation\nMedianFinder medianFinder = new MedianFinder();\nmedianFinder.addNum(1); // arr = [1]\nmedianFinder.addNum(2); // arr = [1, 2]\nmedianFinder.findMedian(); // return 1.5 (i.e., (1 + 2) / 2)\nmedianFinder.addNum(3); // arr[1, 2, 3]\nmedianFinder.findMedian(); // return 2.0"}], "constraints": "Constraints:\n-10^5 <= num <= 10^5\nThere will be at least one element in the data structure before calling findMedian.\nAt most 5 * 10^4 calls will be made to addNum and findMedian.\nFollow up:\nIf all integer numbers from the stream are in the range [0, 100], how would you optimize your solution?\nIf 99% of all integer numbers from the stream are in the range [0, 100], how would you optimize your solution?", "notes": ""}, "282": {"label": "Hard", "title": "Expression Add Operators", "tags": "algorithms,facebook,google,divide-and-conquer", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3906, "total_accepted": 173300.0, "total_submissions": 443800.0, "testcase_example": "'\"123\"\\n6'", "body": "Given a string num that contains only digits and an integer target, return all possibilities to insert the binary operators '+', '-', and/or '*' between the digits of num so that the resultant expression evaluates to the target value.\nNote that operands in the returned expressions should not contain leading zeros.", "examples": [{"full_text": "Example 1:\nInput: num = \"123\", target = 6\nOutput: [\"1*2*3\",\"1+2+3\"]\nExplanation: Both \"1*2*3\" and \"1+2+3\" evaluate to 6.", "input": "Input: num = \"123\", target = 6", "output": "Output: [\"1*2*3\",\"1+2+3\"]", "explanation": "Explanation: Both \"1*2*3\" and \"1+2+3\" evaluate to 6."}, {"full_text": "Example 2:\nInput: num = \"232\", target = 8\nOutput: [\"2*3+2\",\"2+3*2\"]\nExplanation: Both \"2*3+2\" and \"2+3*2\" evaluate to 8.", "input": "Input: num = \"232\", target = 8", "output": "Output: [\"2*3+2\",\"2+3*2\"]", "explanation": "Explanation: Both \"2*3+2\" and \"2+3*2\" evaluate to 8."}, {"full_text": "Example 3:\nInput: num = \"3456237490\", target = 9191\nOutput: []\nExplanation: There are no expressions that can be created from \"3456237490\" to evaluate to 9191.", "input": "Input: num = \"3456237490\", target = 9191", "output": "Output: []", "explanation": "Explanation: There are no expressions that can be created from \"3456237490\" to evaluate to 9191."}], "constraints": "Constraints:\n1 <= num.length <= 10\nnum consists of only digits.\n-2^31 <= target <= 2^31 - 1", "notes": ""}, "273": {"label": "Hard", "title": "Integer to English Words", "tags": "algorithms,facebook,microsoft,math,string", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.2942, "total_accepted": 287800.0, "total_submissions": 978200.0, "testcase_example": "'123'", "body": "Convert a non-negative integer num to its English words representation.", "examples": [{"full_text": "Example 1:\nInput: num = 123\nOutput: \"One Hundred Twenty Three\"", "input": "Input: num = 123", "output": "Output: \"One Hundred Twenty Three\"", "explanation": ""}, {"full_text": "Example 2:\nInput: num = 12345\nOutput: \"Twelve Thousand Three Hundred Forty Five\"", "input": "Input: num = 12345", "output": "Output: \"Twelve Thousand Three Hundred Forty Five\"", "explanation": ""}, {"full_text": "Example 3:\nInput: num = 1234567\nOutput: \"One Million Two Hundred Thirty Four Thousand Five Hundred Sixty Seven\"", "input": "Input: num = 1234567", "output": "Output: \"One Million Two Hundred Thirty Four Thousand Five Hundred Sixty Seven\"", "explanation": ""}], "constraints": "Constraints:\n0 <= num <= 2^31 - 1", "notes": ""}, "262": {"label": "Hard", "title": "Trips and Users", "tags": "database,uber", "langs": "mssql,mysql,oraclesql", "related_topics": "database", "acceptance_ratio": 0.3754, "total_accepted": 106300.0, "total_submissions": 283100.0, "testcase_example": "'{\"headers\": {\"Trips\": [\"id\", \"client_id\", \"driver_id\", \"city_id\", \"status\", \"request_at\"], \"Users\": [\"users_id\", \"banned\", \"role\"]}, \"rows\": {\"Trips\": [[\"1\", \"1\", \"10\", \"1\", \"completed\", \"2013-10-01\"], [\"2\", \"2\", \"11\", \"1\", \"cancelled_by_driver\", \"2013-10-01\"], [\"3\", \"3\", \"12\", \"6\", \"completed\", \"2013-10-01\"], [\"4\", \"4\", \"13\", \"6\", \"cancelled_by_client\", \"2013-10-01\"], [\"5\", \"1\", \"10\", \"1\", \"completed\", \"2013-10-02\"], [\"6\", \"2\", \"11\", \"6\", \"completed\", \"2013-10-02\"], [\"7\", \"3\", \"12\", \"6\", \"completed\", \"2013-10-02\"], [\"8\", \"2\", \"12\", \"12\", \"completed\", \"2013-10-03\"], [\"9\", \"3\", \"10\", \"12\", \"completed\", \"2013-10-03\"], [\"10\", \"4\", \"13\", \"12\", \"cancelled_by_driver\", \"2013-10-03\"]], \"Users\": [[\"1\", \"No\", \"client\"], [\"2\", \"Yes\", \"client\"], [\"3\", \"No\", \"client\"], [\"4\", \"No\", \"client\"], [\"10\", \"No\", \"driver\"], [\"11\", \"No\", \"driver\"], [\"12\", \"No\", \"driver\"], [\"13\", \"No\", \"driver\"]]}}'", "body": "Table: Trips\n+-------------+----------+\n| Column Name | Type |\n+-------------+----------+\n| id | int |\n| client_id | int |\n| driver_id | int |\n| city_id | int |\n| status | enum |\n| request_at | date |\n+-------------+----------+\nid is the primary key for this table.\nThe table holds all taxi trips. Each trip has a unique id, while client_id and driver_id are foreign keys to the users_id at the Users table.\nStatus is an ENUM type of ('completed', 'cancelled_by_driver', 'cancelled_by_client').\nTable: Users\n+-------------+----------+\n| Column Name | Type |\n+-------------+----------+\n| users_id | int |\n| banned | enum |\n| role | enum |\n+-------------+----------+\nusers_id is the primary key for this table.\nThe table holds all users. Each user has a unique users_id, and role is an ENUM type of ('client', 'driver', 'partner').\nbanned is an ENUM type of ('Yes', 'No').\nThe cancellation rate is computed by dividing the number of canceled (by client or driver) requests with unbanned users by the total number of requests with unbanned users on that day.\nWrite a SQL query to find the cancellation rate of requests with unbanned users (both client and driver must not be banned) each day between \"2013-10-01\" and \"2013-10-03\". Round Cancellation Rate to two decimal points.\nReturn the result table in any order.\nThe query result format is in the following example.", "examples": [{"full_text": "Example 1:\nInput:\nTrips table:\n+----+-----------+-----------+---------+---------------------+------------+\n| id | client_id | driver_id | city_id | status | request_at |\n+----+-----------+-----------+---------+---------------------+------------+\n| 1 | 1 | 10 | 1 | completed | 2013-10-01 |\n| 2 | 2 | 11 | 1 | cancelled_by_driver | 2013-10-01 |\n| 3 | 3 | 12 | 6 | completed | 2013-10-01 |\n| 4 | 4 | 13 | 6 | cancelled_by_client | 2013-10-01 |\n| 5 | 1 | 10 | 1 | completed | 2013-10-02 |\n| 6 | 2 | 11 | 6 | completed | 2013-10-02 |\n| 7 | 3 | 12 | 6 | completed | 2013-10-02 |\n| 8 | 2 | 12 | 12 | completed | 2013-10-03 |\n| 9 | 3 | 10 | 12 | completed | 2013-10-03 |\n| 10 | 4 | 13 | 12 | cancelled_by_driver | 2013-10-03 |\n+----+-----------+-----------+---------+---------------------+------------+\nUsers table:\n+----------+--------+--------+\n| users_id | banned | role |\n+----------+--------+--------+\n| 1 | No | client |\n| 2 | Yes | client |\n| 3 | No | client |\n| 4 | No | client |\n| 10 | No | driver |\n| 11 | No | driver |\n| 12 | No | driver |\n| 13 | No | driver |\n+----------+--------+--------+\nOutput:\n+------------+-------------------+\n| Day | Cancellation Rate |\n+------------+-------------------+\n| 2013-10-01 | 0.33 |\n| 2013-10-02 | 0.00 |\n| 2013-10-03 | 0.50 |\n+------------+-------------------+\nExplanation:\nOn 2013-10-01:\n- There were 4 requests in total, 2 of which were canceled.\n- However, the request with Id=2 was made by a banned client (User_Id=2), so it is ignored in the calculation.\n- Hence there are 3 unbanned requests in total, 1 of which was canceled.\n- The Cancellation Rate is (1 / 3) = 0.33\nOn 2013-10-02:\n- There were 3 requests in total, 0 of which were canceled.\n- The request with Id=6 was made by a banned client, so it is ignored.\n- Hence there are 2 unbanned requests in total, 0 of which were canceled.\n- The Cancellation Rate is (0 / 2) = 0.00\nOn 2013-10-03:\n- There were 3 requests in total, 1 of which was canceled.\n- The request with Id=8 was made by a banned client, so it is ignored.\n- Hence there are 2 unbanned request in total, 1 of which were canceled.\n- The Cancellation Rate is (1 / 2) = 0.50", "input": "Input:\nTrips table:\n+----+-----------+-----------+---------+---------------------+------------+\n| id | client_id | driver_id | city_id | status | request_at |\n+----+-----------+-----------+---------+---------------------+------------+\n| 1 | 1 | 10 | 1 | completed | 2013-10-01 |\n| 2 | 2 | 11 | 1 | cancelled_by_driver | 2013-10-01 |\n| 3 | 3 | 12 | 6 | completed | 2013-10-01 |\n| 4 | 4 | 13 | 6 | cancelled_by_client | 2013-10-01 |\n| 5 | 1 | 10 | 1 | completed | 2013-10-02 |\n| 6 | 2 | 11 | 6 | completed | 2013-10-02 |\n| 7 | 3 | 12 | 6 | completed | 2013-10-02 |\n| 8 | 2 | 12 | 12 | completed | 2013-10-03 |\n| 9 | 3 | 10 | 12 | completed | 2013-10-03 |\n| 10 | 4 | 13 | 12 | cancelled_by_driver | 2013-10-03 |\n+----+-----------+-----------+---------+---------------------+------------+\nUsers table:\n+----------+--------+--------+\n| users_id | banned | role |\n+----------+--------+--------+\n| 1 | No | client |\n| 2 | Yes | client |\n| 3 | No | client |\n| 4 | No | client |\n| 10 | No | driver |\n| 11 | No | driver |\n| 12 | No | driver |\n| 13 | No | driver |\n+----------+--------+--------+", "output": "Output:\n+------------+-------------------+\n| Day | Cancellation Rate |\n+------------+-------------------+\n| 2013-10-01 | 0.33 |\n| 2013-10-02 | 0.00 |\n| 2013-10-03 | 0.50 |\n+------------+-------------------+", "explanation": "Explanation:\nOn 2013-10-01:\n- There were 4 requests in total, 2 of which were canceled.\n- However, the request with Id=2 was made by a banned client (User_Id=2), so it is ignored in the calculation.\n- Hence there are 3 unbanned requests in total, 1 of which was canceled.\n- The Cancellation Rate is (1 / 3) = 0.33\nOn 2013-10-02:\n- There were 3 requests in total, 0 of which were canceled.\n- The request with Id=6 was made by a banned client, so it is ignored.\n- Hence there are 2 unbanned requests in total, 0 of which were canceled.\n- The Cancellation Rate is (0 / 2) = 0.00\nOn 2013-10-03:\n- There were 3 requests in total, 1 of which was canceled.\n- The request with Id=8 was made by a banned client, so it is ignored.\n- Hence there are 2 unbanned request in total, 1 of which were canceled.\n- The Cancellation Rate is (1 / 2) = 0.50"}], "constraints": "", "notes": ""}, "239": {"label": "Hard", "title": "Sliding Window Maximum", "tags": "algorithms,amazon,google,zenefits,heap", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.46090000000000003, "total_accepted": 526700.0, "total_submissions": 1100000.0, "testcase_example": "'[1,3,-1,-3,5,3,6,7]\\n3'", "body": "You are given an array of integers\nnums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position.\nReturn the max sliding window.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,3,-1,-3,5,3,6,7], k = 3\nOutput: [3,3,5,5,6,7]\nExplanation:\nWindow position Max\n--------------- -----\n[1 3 -1] -3 5 3 6 7 3\n1 [3 -1 -3] 5 3 6 7 3\n1 3 [-1 -3 5] 3 6 7 5\n1 3 -1 [-3 5 3] 6 7 5\n1 3 -1 -3 [5 3 6] 7 6\n1 3 -1 -3 5 [3 6 7] 7", "input": "Input: nums = [1,3,-1,-3,5,3,6,7], k = 3", "output": "Output: [3,3,5,5,6,7]", "explanation": "Explanation:\nWindow position Max\n--------------- -----\n[1 3 -1] -3 5 3 6 7 3\n1 [3 -1 -3] 5 3 6 7 3\n1 3 [-1 -3 5] 3 6 7 5\n1 3 -1 [-3 5 3] 6 7 5\n1 3 -1 -3 [5 3 6] 7 6\n1 3 -1 -3 5 [3 6 7] 7"}, {"full_text": "Example 2:\nInput: nums = [1], k = 1\nOutput: [1]", "input": "Input: nums = [1], k = 1", "output": "Output: [1]", "explanation": ""}], "constraints": "Constraints:\n1 <= nums.length <= 10^5\n-10^4 <= nums[i] <= 10^4\n1 <= k <= nums.length", "notes": ""}, "233": {"label": "Hard", "title": "Number of Digit One", "tags": "algorithms,math", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3322, "total_accepted": 61800.0, "total_submissions": 186000.0, "testcase_example": "'13'", "body": "Given an integer n, count the total number of digit 1 appearing in all non-negative integers less than or equal to n.", "examples": [{"full_text": "Example 1:\nInput: n = 13\nOutput: 6", "input": "Input: n = 13", "output": "Output: 6", "explanation": ""}, {"full_text": "Example 2:\nInput: n = 0\nOutput: 0", "input": "Input: n = 0", "output": "Output: 0", "explanation": ""}], "constraints": "Constraints:\n0 <= n <= 10^9", "notes": ""}, "224": {"label": "Hard", "title": "Basic Calculator", "tags": "algorithms,google,math,stack", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.40159999999999996, "total_accepted": 276800.0, "total_submissions": 689300.0, "testcase_example": "'\"1 + 1\"'", "body": "Given a string s representing a valid expression, implement a basic calculator to evaluate it, and return the result of the evaluation.\nNote: You are not allowed to use any built-in function which evaluates strings as mathematical expressions, such as eval().", "examples": [{"full_text": "Example 1:\nInput: s = \"1 + 1\"\nOutput: 2", "input": "Input: s = \"1 + 1\"", "output": "Output: 2", "explanation": ""}, {"full_text": "Example 2:\nInput: s = \" 2-1 + 2 \"\nOutput: 3", "input": "Input: s = \" 2-1 + 2 \"", "output": "Output: 3", "explanation": ""}, {"full_text": "Example 3:\nInput: s = \"(1+(4+5+2)-3)+(6+8)\"\nOutput: 23", "input": "Input: s = \"(1+(4+5+2)-3)+(6+8)\"", "output": "Output: 23", "explanation": ""}], "constraints": "Constraints:\n1 <= s.length <= 3 * 10^5\ns consists of digits, '+', '-', '(', ')', and ' '.\ns represents a valid expression.\n'+' is not used as a unary operation (i.e., \"+1\" and \"+(2 + 3)\" is invalid).\n'-' could be used as a unary operation (i.e., \"-1\" and \"-(2 + 3)\" is valid).\nThere will be no two consecutive operators in the input.\nEvery number and running calculation will fit in a signed 32-bit integer.", "notes": ""}, "218": {"label": "Hard", "title": "The Skyline Problem", "tags": "algorithms,facebook,google,microsoft,twitter,yelp,binary-indexed-tree,divide-and-conquer,heap,segment-tree", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3835, "total_accepted": 198600.0, "total_submissions": 517799.99999999994, "testcase_example": "'[[2,9,10],[3,7,15],[5,12,12],[15,20,10],[19,24,8]]'", "body": "A city's skyline is the outer contour of the silhouette formed by all the buildings in that city when viewed from a distance. Given the locations and heights of all the buildings, return the skyline formed by these buildings collectively.\nThe geometric information of each building is given in the array buildings where buildings[i] = [lefti, righti, heighti]:\nlefti is the x coordinate of the left edge of the i^th building.\nrighti is the x coordinate of the right edge of the i^th building.\nheighti is the height of the i^th building.\nYou may assume all buildings are perfect rectangles grounded on an absolutely flat surface at height 0.\nThe skyline should be represented as a list of \"key points\" sorted by their x-coordinate in the form [[x1,y1],[x2,y2],...]. Each key point is the left endpoint of some horizontal segment in the skyline except the last point in the list, which always has a y-coordinate 0 and is used to mark the skyline's termination where the rightmost building ends. Any ground between the leftmost and rightmost buildings should be part of the skyline's contour.\nNote: There must be no consecutive horizontal lines of equal height in the output skyline. For instance, [...,[2 3],[4 5],[7 5],[11 5],[12 7],...] is not acceptable; the three lines of height 5 should be merged into one in the final output as such: [...,[2 3],[4 5],[12 7],...]", "examples": [{"full_text": "Example 1:\nInput: buildings = [[2,9,10],[3,7,15],[5,12,12],[15,20,10],[19,24,8]]\nOutput: [[2,10],[3,15],[7,12],[12,0],[15,10],[20,8],[24,0]]\nExplanation:\nFigure A shows the buildings of the input.\nFigure B shows the skyline formed by those buildings. The red points in figure B represent the key points in the output list.", "input": "Input: buildings = [[2,9,10],[3,7,15],[5,12,12],[15,20,10],[19,24,8]]", "output": "Output: [[2,10],[3,15],[7,12],[12,0],[15,10],[20,8],[24,0]]", "explanation": "Explanation:\nFigure A shows the buildings of the input.\nFigure B shows the skyline formed by those buildings. The red points in figure B represent the key points in the output list."}, {"full_text": "Example 2:\nInput: buildings = [[0,2,3],[2,5,3]]\nOutput: [[0,3],[5,0]]", "input": "Input: buildings = [[0,2,3],[2,5,3]]", "output": "Output: [[0,3],[5,0]]", "explanation": ""}], "constraints": "Constraints:\n1 <= buildings.length <= 10^4\n0 <= lefti < righti <= 2^31 - 1\n1 <= heighti <= 2^31 - 1\nbuildings is sorted by lefti in\nnon-decreasing order.", "notes": ""}, "214": {"label": "Hard", "title": "Shortest Palindrome", "tags": "algorithms,google,pocketgems,string", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3166, "total_accepted": 131800.0, "total_submissions": 416500.0, "testcase_example": "'\"aacecaaa\"'", "body": "You are given a string s. You can convert s to a palindrome by adding characters in front of it.\nReturn the shortest palindrome you can find by performing this transformation.", "examples": [{"full_text": "Example 1:\nInput: s = \"aacecaaa\"\nOutput: \"aaacecaaa\"", "input": "Input: s = \"aacecaaa\"", "output": "Output: \"aaacecaaa\"", "explanation": ""}, {"full_text": "Example 2:\nInput: s = \"abcd\"\nOutput: \"dcbabcd\"", "input": "Input: s = \"abcd\"", "output": "Output: \"dcbabcd\"", "explanation": ""}], "constraints": "Constraints:\n0 <= s.length <= 5 * 10^4\ns consists of lowercase English letters only.", "notes": ""}, "212": {"label": "Hard", "title": "Word Search II", "tags": "algorithms,airbnb,google,microsoft,backtracking,trie", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.38380000000000003, "total_accepted": 405900.0, "total_submissions": 1100000.0, "testcase_example": "'[[\"o\",\"a\",\"a\",\"n\"],[\"e\",\"t\",\"a\",\"e\"],[\"i\",\"h\",\"k\",\"r\"],[\"i\",\"f\",\"l\",\"v\"]]\\n' +\n  '[\"oath\",\"pea\",\"eat\",\"rain\"]'", "body": "Given an m x n board\nof characters and a list of strings words, return all words on the board.\nEach word must be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.", "examples": [{"full_text": "Example 1:\nInput: board = [[\"o\",\"a\",\"a\",\"n\"],[\"e\",\"t\",\"a\",\"e\"],[\"i\",\"h\",\"k\",\"r\"],[\"i\",\"f\",\"l\",\"v\"]], words = [\"oath\",\"pea\",\"eat\",\"rain\"]\nOutput: [\"eat\",\"oath\"]", "input": "Input: board = [[\"o\",\"a\",\"a\",\"n\"],[\"e\",\"t\",\"a\",\"e\"],[\"i\",\"h\",\"k\",\"r\"],[\"i\",\"f\",\"l\",\"v\"]], words = [\"oath\",\"pea\",\"eat\",\"rain\"]", "output": "Output: [\"eat\",\"oath\"]", "explanation": ""}, {"full_text": "Example 2:\nInput: board = [[\"a\",\"b\"],[\"c\",\"d\"]], words = [\"abcb\"]\nOutput: []", "input": "Input: board = [[\"a\",\"b\"],[\"c\",\"d\"]], words = [\"abcb\"]", "output": "Output: []", "explanation": ""}], "constraints": "Constraints:\nm == board.length\nn == board[i].length\n1 <= m, n <= 12\nboard[i][j] is a lowercase English letter.\n1 <= words.length <= 3 * 10^4\n1 <= words[i].length <= 10\nwords[i] consists of lowercase English letters.\nAll the strings of words are unique.", "notes": ""}, "188": {"label": "Hard", "title": "Best Time to Buy and Sell Stock IV", "tags": "algorithms,dynamic-programming", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3296, "total_accepted": 229700.0, "total_submissions": 696800.0, "testcase_example": "'2\\n[2,4,1]'", "body": "You are given an integer array prices where prices[i] is the price of a given stock on the i^th day, and an integer k.\nFind the maximum profit you can achieve. You may complete at most k transactions.\nNote: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).", "examples": [{"full_text": "Example 1:\nInput: k = 2, prices = [2,4,1]\nOutput: 2\nExplanation: Buy on day 1 (price = 2) and sell on day 2 (price = 4), profit = 4-2 = 2.", "input": "Input: k = 2, prices = [2,4,1]", "output": "Output: 2", "explanation": "Explanation: Buy on day 1 (price = 2) and sell on day 2 (price = 4), profit = 4-2 = 2."}, {"full_text": "Example 2:\nInput: k = 2, prices = [3,2,6,5,0,3]\nOutput: 7\nExplanation: Buy on day 2 (price = 2) and sell on day 3 (price = 6), profit = 6-2 = 4. Then buy on day 5 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.", "input": "Input: k = 2, prices = [3,2,6,5,0,3]", "output": "Output: 7", "explanation": "Explanation: Buy on day 2 (price = 2) and sell on day 3 (price = 6), profit = 6-2 = 4. Then buy on day 5 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3."}], "constraints": "Constraints:\n0 <= k <= 100\n0 <= prices.length <= 1000\n0 <= prices[i] <= 1000", "notes": ""}, "185": {"label": "Hard", "title": "Department Top Three Salaries", "tags": "database", "langs": "mssql,mysql,oraclesql", "related_topics": "database", "acceptance_ratio": 0.45840000000000003, "total_accepted": 153400.0, "total_submissions": 334700.0, "testcase_example": "'{\"headers\": {\"Employee\": [\"id\", \"name\", \"salary\", \"departmentId\"], \"Department\": [\"id\", \"name\"]}, \"rows\": {\"Employee\": [[1, \"Joe\", 85000, 1], [2, \"Henry\", 80000, 2], [3, \"Sam\", 60000, 2], [4, \"Max\", 90000, 1], [5, \"Janet\", 69000, 1], [6, \"Randy\", 85000, 1], [7, \"Will\", 70000, 1]], \"Department\": [[1, \"IT\"], [2, \"Sales\"]]}}'", "body": "Table: Employee\n+--------------+---------+\n| Column Name | Type |\n+--------------+---------+\n| id | int |\n| name | varchar |\n| salary | int |\n| departmentId | int |\n+--------------+---------+\nid is the primary key column for this table.\ndepartmentId is a foreign key of the ID from the Department table.\nEach row of this table indicates the ID, name, and salary of an employee. It also contains the ID of their department.\nTable: Department\n+-------------+---------+\n| Column Name | Type |\n+-------------+---------+\n| id | int |\n| name | varchar |\n+-------------+---------+\nid is the primary key column for this table.\nEach row of this table indicates the ID of a department and its name.\nA company's executives are interested in seeing who earns the most money in each of the company's departments. A high earner in a department is an employee who has a salary in the top three unique salaries for that department.\nWrite an SQL query to find the employees who are high earners in each of the departments.\nReturn the result table in any order.\nThe query result format is in the following example.", "examples": [{"full_text": "Example 1:\nInput:\nEmployee table:\n+----+-------+--------+--------------+\n| id | name | salary | departmentId |\n+----+-------+--------+--------------+\n| 1 | Joe | 85000 | 1 |\n| 2 | Henry | 80000 | 2 |\n| 3 | Sam | 60000 | 2 |\n| 4 | Max | 90000 | 1 |\n| 5 | Janet | 69000 | 1 |\n| 6 | Randy | 85000 | 1 |\n| 7 | Will | 70000 | 1 |\n+----+-------+--------+--------------+\nDepartment table:\n+----+-------+\n| id | name |\n+----+-------+\n| 1 | IT |\n| 2 | Sales |\n+----+-------+\nOutput:\n+------------+----------+--------+\n| Department | Employee | Salary |\n+------------+----------+--------+\n| IT | Max | 90000 |\n| IT | Joe | 85000 |\n| IT | Randy | 85000 |\n| IT | Will | 70000 |\n| Sales | Henry | 80000 |\n| Sales | Sam | 60000 |\n+------------+----------+--------+\nExplanation:\nIn the IT department:\n- Max earns the highest unique salary\n- Both Randy and Joe earn the second-highest unique salary\n- Will earns the third-highest unique salary\nIn the Sales department:\n- Henry earns the highest salary\n- Sam earns the second-highest salary\n- There is no third-highest salary as there are only two employees", "input": "Input:\nEmployee table:\n+----+-------+--------+--------------+\n| id | name | salary | departmentId |\n+----+-------+--------+--------------+\n| 1 | Joe | 85000 | 1 |\n| 2 | Henry | 80000 | 2 |\n| 3 | Sam | 60000 | 2 |\n| 4 | Max | 90000 | 1 |\n| 5 | Janet | 69000 | 1 |\n| 6 | Randy | 85000 | 1 |\n| 7 | Will | 70000 | 1 |\n+----+-------+--------+--------------+\nDepartment table:\n+----+-------+\n| id | name |\n+----+-------+\n| 1 | IT |\n| 2 | Sales |\n+----+-------+", "output": "Output:\n+------------+----------+--------+\n| Department | Employee | Salary |\n+------------+----------+--------+\n| IT | Max | 90000 |\n| IT | Joe | 85000 |\n| IT | Randy | 85000 |\n| IT | Will | 70000 |\n| Sales | Henry | 80000 |\n| Sales | Sam | 60000 |\n+------------+----------+--------+", "explanation": "Explanation:\nIn the IT department:\n- Max earns the highest unique salary\n- Both Randy and Joe earn the second-highest unique salary\n- Will earns the third-highest unique salary\nIn the Sales department:\n- Henry earns the highest salary\n- Sam earns the second-highest salary\n- There is no third-highest salary as there are only two employees"}], "constraints": "", "notes": ""}, "174": {"label": "Hard", "title": "Dungeon Game", "tags": "algorithms,microsoft,binary-search,dynamic-programming", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3614, "total_accepted": 164500.0, "total_submissions": 455100.0, "testcase_example": "'[[-2,-3,3],[-5,-10,1],[10,30,-5]]'", "body": "The demons had captured the princess and imprisoned her in the bottom-right corner of a dungeon. The dungeon consists of m x n rooms laid out in a 2D grid. Our valiant knight was initially positioned in the top-left room and must fight his way through dungeon to rescue the princess.\nThe knight has an initial health point represented by a positive integer. If at any point his health point drops to 0 or below, he dies immediately.\nSome of the rooms are guarded by demons (represented by negative integers), so the knight loses health upon entering these rooms; other rooms are either empty (represented as 0) or contain magic orbs that increase the knight's health (represented by positive integers).\nTo reach the princess as quickly as possible, the knight decides to move only rightward or downward in each step.\nReturn the knight's minimum initial health so that he can rescue the princess.\nNote that any room can contain threats or power-ups, even the first room the knight enters and the bottom-right room where the princess is imprisoned.", "examples": [{"full_text": "Example 1:\nInput: dungeon = [[-2,-3,3],[-5,-10,1],[10,30,-5]]\nOutput: 7\nExplanation: The initial health of the knight must be at least 7 if he follows the optimal path: RIGHT-> RIGHT -> DOWN -> DOWN.", "input": "Input: dungeon = [[-2,-3,3],[-5,-10,1],[10,30,-5]]", "output": "Output: 7", "explanation": "Explanation: The initial health of the knight must be at least 7 if he follows the optimal path: RIGHT-> RIGHT -> DOWN -> DOWN."}, {"full_text": "Example 2:\nInput: dungeon = [[0]]\nOutput: 1", "input": "Input: dungeon = [[0]]", "output": "Output: 1", "explanation": ""}], "constraints": "Constraints:\nm == dungeon.length\nn == dungeon[i].length\n1 <= m, n <= 200\n-1000 <= dungeon[i][j] <= 1000", "notes": ""}, "164": {"label": "Hard", "title": "Maximum Gap", "tags": "algorithms,sort", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4102, "total_accepted": 134200.0, "total_submissions": 327000.0, "testcase_example": "'[3,6,9,1]'", "body": "Given an integer array nums, return the maximum difference between two successive elements in its sorted form. If the array contains less than two elements, return 0.\nYou must write an algorithm that runs in linear time and uses linear extra space.", "examples": [{"full_text": "Example 1:\nInput: nums = [3,6,9,1]\nOutput: 3\nExplanation: The sorted form of the array is [1,3,6,9], either (3,6) or (6,9) has the maximum difference 3.", "input": "Input: nums = [3,6,9,1]", "output": "Output: 3", "explanation": "Explanation: The sorted form of the array is [1,3,6,9], either (3,6) or (6,9) has the maximum difference 3."}, {"full_text": "Example 2:\nInput: nums = [10]\nOutput: 0\nExplanation: The array contains less than 2 elements, therefore return 0.", "input": "Input: nums = [10]", "output": "Output: 0", "explanation": "Explanation: The array contains less than 2 elements, therefore return 0."}], "constraints": "Constraints:\n1 <= nums.length <= 10^5\n0 <= nums[i] <= 10^9", "notes": ""}, "154": {"label": "Hard", "title": "Find Minimum in Rotated Sorted Array II", "tags": "algorithms,array,binary-search", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4321, "total_accepted": 311500.0, "total_submissions": 720800.0, "testcase_example": "'[1,3,5]'", "body": "Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,4,4,5,6,7] might become:\n[4,5,6,7,0,1,4] if it was rotated 4 times.\n[0,1,4,4,5,6,7] if it was rotated 7 times.\nNotice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].\nGiven the sorted rotated array nums that may contain duplicates, return the minimum element of this array.\nYou must decrease the overall operation steps as much as possible.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,3,5]\nOutput: 1", "input": "Input: nums = [1,3,5]", "output": "Output: 1", "explanation": ""}, {"full_text": "Example 2:\nInput: nums = [2,2,2,0,1]\nOutput: 0", "input": "Input: nums = [2,2,2,0,1]", "output": "Output: 0", "explanation": ""}], "constraints": "Constraints:\nn == nums.length\n1 <= n <= 5000\n-5000 <= nums[i] <= 5000\nnums is sorted and rotated between 1 and n times.\nFollow up: This problem is similar to\nFind Minimum in Rotated Sorted Array, but\nnums may contain duplicates. Would this affect the runtime complexity? How and why?", "notes": ""}, "149": {"label": "Hard", "title": "Max Points on a Line", "tags": "algorithms,apple,linkedin,twitter,hash-table,math", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.19949999999999998, "total_accepted": 218700.0, "total_submissions": 1100000.0, "testcase_example": "'[[1,1],[2,2],[3,3]]'", "body": "Given an array of points where points[i] = [xi, yi] represents a point on the X-Y plane, return the maximum number of points that lie on the same straight line.", "examples": [{"full_text": "Example 1:\nInput: points = [[1,1],[2,2],[3,3]]\nOutput: 3", "input": "Input: points = [[1,1],[2,2],[3,3]]", "output": "Output: 3", "explanation": ""}, {"full_text": "Example 2:\nInput: points = [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]\nOutput: 4", "input": "Input: points = [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]", "output": "Output: 4", "explanation": ""}], "constraints": "Constraints:\n1 <= points.length <= 300\npoints[i].length == 2\n-10^4 <= xi, yi <= 10^4\nAll the points are unique.", "notes": ""}, "140": {"label": "Hard", "title": "Word Break II", "tags": "algorithms,dropbox,google,snapchat,twitter,uber,backtracking,dynamic-programming", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.41119999999999995, "total_accepted": 417900.0, "total_submissions": 1000000.0, "testcase_example": "'\"catsanddog\"\\n[\"cat\",\"cats\",\"and\",\"sand\",\"dog\"]'", "body": "Given a string s and a dictionary of strings wordDict, add spaces in s to construct a sentence where each word is a valid dictionary word. Return all such possible sentences in any order.\nNote that the same word in the dictionary may be reused multiple times in the segmentation.", "examples": [{"full_text": "Example 1:\nInput: s = \"catsanddog\", wordDict = [\"cat\",\"cats\",\"and\",\"sand\",\"dog\"]\nOutput: [\"cats and dog\",\"cat sand dog\"]", "input": "Input: s = \"catsanddog\", wordDict = [\"cat\",\"cats\",\"and\",\"sand\",\"dog\"]", "output": "Output: [\"cats and dog\",\"cat sand dog\"]", "explanation": ""}, {"full_text": "Example 2:\nInput: s = \"pineapplepenapple\", wordDict = [\"apple\",\"pen\",\"applepen\",\"pine\",\"pineapple\"]\nOutput: [\"pine apple pen apple\",\"pineapple pen apple\",\"pine applepen apple\"]\nExplanation: Note that you are allowed to reuse a dictionary word.", "input": "Input: s = \"pineapplepenapple\", wordDict = [\"apple\",\"pen\",\"applepen\",\"pine\",\"pineapple\"]", "output": "Output: [\"pine apple pen apple\",\"pineapple pen apple\",\"pine applepen apple\"]", "explanation": "Explanation: Note that you are allowed to reuse a dictionary word."}, {"full_text": "Example 3:\nInput: s = \"catsandog\", wordDict = [\"cats\",\"dog\",\"sand\",\"and\",\"cat\"]\nOutput: []", "input": "Input: s = \"catsandog\", wordDict = [\"cats\",\"dog\",\"sand\",\"and\",\"cat\"]", "output": "Output: []", "explanation": ""}], "constraints": "Constraints:\n1 <= s.length <= 20\n1 <= wordDict.length <= 1000\n1 <= wordDict[i].length <= 10\ns and wordDict[i] consist of only lowercase English letters.\nAll the strings of wordDict are unique.", "notes": ""}, "135": {"label": "Hard", "title": "Candy", "tags": "algorithms,greedy", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.366, "total_accepted": 204000.0, "total_submissions": 557300.0, "testcase_example": "'[1,0,2]'", "body": "There are n children standing in a line. Each child is assigned a rating value given in the integer array ratings.\nYou are giving candies to these children subjected to the following requirements:\nEach child must have at least one candy.\nChildren with a higher rating get more candies than their neighbors.\nReturn the minimum number of candies you need to have to distribute the candies to the children.", "examples": [{"full_text": "Example 1:\nInput: ratings = [1,0,2]\nOutput: 5\nExplanation: You can allocate to the first, second and third child with 2, 1, 2 candies respectively.", "input": "Input: ratings = [1,0,2]", "output": "Output: 5", "explanation": "Explanation: You can allocate to the first, second and third child with 2, 1, 2 candies respectively."}, {"full_text": "Example 2:\nInput: ratings = [1,2,2]\nOutput: 4\nExplanation: You can allocate to the first, second and third child with 1, 2, 1 candies respectively.\nThe third child gets 1 candy because it satisfies the above two conditions.", "input": "Input: ratings = [1,2,2]", "output": "Output: 4", "explanation": "Explanation: You can allocate to the first, second and third child with 1, 2, 1 candies respectively.\nThe third child gets 1 candy because it satisfies the above two conditions."}], "constraints": "Constraints:\nn == ratings.length\n1 <= n <= 2 * 10^4\n0 <= ratings[i] <= 2 * 10^4", "notes": ""}, "132": {"label": "Hard", "title": "Palindrome Partitioning II", "tags": "algorithms,dynamic-programming", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.33030000000000004, "total_accepted": 196200.0, "total_submissions": 593900.0, "testcase_example": "'\"aab\"'", "body": "Given a string s, partition s such that every substring of the partition is a palindrome.\nReturn the minimum cuts needed for a palindrome partitioning of s.", "examples": [{"full_text": "Example 1:\nInput: s = \"aab\"\nOutput: 1\nExplanation: The palindrome partitioning [\"aa\",\"b\"] could be produced using 1 cut.", "input": "Input: s = \"aab\"", "output": "Output: 1", "explanation": "Explanation: The palindrome partitioning [\"aa\",\"b\"] could be produced using 1 cut."}, {"full_text": "Example 2:\nInput: s = \"a\"\nOutput: 0", "input": "Input: s = \"a\"", "output": "Output: 0", "explanation": ""}, {"full_text": "Example 3:\nInput: s = \"ab\"\nOutput: 1", "input": "Input: s = \"ab\"", "output": "Output: 1", "explanation": ""}], "constraints": "Constraints:\n1 <= s.length <= 2000\ns consists of lowercase English letters only.", "notes": ""}, "127": {"label": "Hard", "title": "Word Ladder", "tags": "algorithms,amazon,facebook,linkedin,snapchat,yelp,breadth-first-search", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.34990000000000004, "total_accepted": 728800.0, "total_submissions": 2100000.0, "testcase_example": "'\"hit\"\\n\"cog\"\\n[\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]'", "body": "A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 -> ... -> sk such that:\nEvery adjacent pair of words differs by a single letter.\nEvery si for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList.\nsk == endWord\nGiven two words, beginWord and endWord, and a dictionary wordList, return the number of words in the shortest transformation sequence from beginWord to endWord, or 0 if no such sequence exists.", "examples": [{"full_text": "Example 1:\nInput: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]\nOutput: 5\nExplanation: One shortest transformation sequence is \"hit\" -> \"hot\" -> \"dot\" -> \"dog\" -> cog\", which is 5 words long.", "input": "Input: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]", "output": "Output: 5", "explanation": "Explanation: One shortest transformation sequence is \"hit\" -> \"hot\" -> \"dot\" -> \"dog\" -> cog\", which is 5 words long."}, {"full_text": "Example 2:\nInput: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]\nOutput: 0\nExplanation: The endWord \"cog\" is not in wordList, therefore there is no valid transformation sequence.", "input": "Input: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]", "output": "Output: 0", "explanation": "Explanation: The endWord \"cog\" is not in wordList, therefore there is no valid transformation sequence."}], "constraints": "Constraints:\n1 <= beginWord.length <= 10\nendWord.length == beginWord.length\n1 <= wordList.length <= 5000\nwordList[i].length == beginWord.length\nbeginWord, endWord, and wordList[i] consist of lowercase English letters.\nbeginWord != endWord\nAll the words in wordList are unique.", "notes": ""}, "126": {"label": "Hard", "title": "Word Ladder II", "tags": "algorithms,amazon,yelp,array,backtracking,breadth-first-search,string", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.2656, "total_accepted": 278800.0, "total_submissions": 1000000.0, "testcase_example": "'\"hit\"\\n\"cog\"\\n[\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]'", "body": "A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -> s1 -> s2 -> ... -> sk such that:\nEvery adjacent pair of words differs by a single letter.\nEvery si for 1 <= i <= k is in wordList. Note that beginWord does not need to be in wordList.\nsk == endWord\nGiven two words, beginWord and endWord, and a dictionary wordList, return all the shortest transformation sequences from beginWord to endWord, or an empty list if no such sequence exists. Each sequence should be returned as a list of the words [beginWord, s1, s2, ..., sk].", "examples": [{"full_text": "Example 1:\nInput: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]\nOutput: [[\"hit\",\"hot\",\"dot\",\"dog\",\"cog\"],[\"hit\",\"hot\",\"lot\",\"log\",\"cog\"]]\nExplanation:\nThere are 2 shortest transformation sequences:\n\"hit\" -> \"hot\" -> \"dot\" -> \"dog\" -> \"cog\"\n\"hit\" -> \"hot\" -> \"lot\" -> \"log\" -> \"cog\"", "input": "Input: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]", "output": "Output: [[\"hit\",\"hot\",\"dot\",\"dog\",\"cog\"],[\"hit\",\"hot\",\"lot\",\"log\",\"cog\"]]", "explanation": "Explanation:\nThere are 2 shortest transformation sequences:\n\"hit\" -> \"hot\" -> \"dot\" -> \"dog\" -> \"cog\"\n\"hit\" -> \"hot\" -> \"lot\" -> \"log\" -> \"cog\""}, {"full_text": "Example 2:\nInput: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]\nOutput: []\nExplanation: The endWord \"cog\" is not in wordList, therefore there is no valid transformation sequence.", "input": "Input: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]", "output": "Output: []", "explanation": "Explanation: The endWord \"cog\" is not in wordList, therefore there is no valid transformation sequence."}], "constraints": "Constraints:\n1 <= beginWord.length <= 5\nendWord.length == beginWord.length\n1 <= wordList.length <= 1000\nwordList[i].length == beginWord.length\nbeginWord, endWord, and wordList[i] consist of lowercase English letters.\nbeginWord != endWord\nAll the words in wordList are unique.", "notes": ""}, "124": {"label": "Hard", "title": "Binary Tree Maximum Path Sum", "tags": "algorithms,baidu,microsoft,depth-first-search,tree", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3734, "total_accepted": 676200.0, "total_submissions": 1800000.0, "testcase_example": "'[1,2,3]'", "body": "A path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence at most once. Note that the path does not need to pass through the root.\nThe path sum of a path is the sum of the node's values in the path.\nGiven the root of a binary tree, return the maximum path sum of any non-empty path.", "examples": [{"full_text": "Example 1:\nInput: root = [1,2,3]\nOutput: 6\nExplanation: The optimal path is 2 -> 1 -> 3 with a path sum of 2 + 1 + 3 = 6.", "input": "Input: root = [1,2,3]", "output": "Output: 6", "explanation": "Explanation: The optimal path is 2 -> 1 -> 3 with a path sum of 2 + 1 + 3 = 6."}, {"full_text": "Example 2:\nInput: root = [-10,9,20,null,null,15,7]\nOutput: 42\nExplanation: The optimal path is 15 -> 20 -> 7 with a path sum of 15 + 20 + 7 = 42.", "input": "Input: root = [-10,9,20,null,null,15,7]", "output": "Output: 42", "explanation": "Explanation: The optimal path is 15 -> 20 -> 7 with a path sum of 15 + 20 + 7 = 42."}], "constraints": "Constraints:\nThe number of nodes in the tree is in the range [1, 3 * 10^4].\n-1000 <= Node.val <= 1000", "notes": ""}, "123": {"label": "Hard", "title": "Best Time to Buy and Sell Stock III", "tags": "algorithms,array,dynamic-programming", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4274, "total_accepted": 362000.0, "total_submissions": 847000.0, "testcase_example": "'[3,3,5,0,0,3,1,4]'", "body": "You are given an array prices where prices[i] is the price of a given stock on the i^th day.\nFind the maximum profit you can achieve. You may complete at most two transactions.\nNote: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).", "examples": [{"full_text": "Example 1:\nInput: prices = [3,3,5,0,0,3,1,4]\nOutput: 6\nExplanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.\nThen buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.", "input": "Input: prices = [3,3,5,0,0,3,1,4]", "output": "Output: 6", "explanation": "Explanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.\nThen buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3."}, {"full_text": "Example 2:\nInput: prices = [1,2,3,4,5]\nOutput: 4\nExplanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.\nNote that you cannot buy on day 1, buy on day 2 and sell them later, as you are engaging multiple transactions at the same time. You must sell before buying again.", "input": "Input: prices = [1,2,3,4,5]", "output": "Output: 4", "explanation": "Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.\nNote that you cannot buy on day 1, buy on day 2 and sell them later, as you are engaging multiple transactions at the same time. You must sell before buying again."}, {"full_text": "Example 3:\nInput: prices = [7,6,4,3,1]\nOutput: 0\nExplanation: In this case, no transaction is done, i.e. max profit = 0.", "input": "Input: prices = [7,6,4,3,1]", "output": "Output: 0", "explanation": "Explanation: In this case, no transaction is done, i.e. max profit = 0."}], "constraints": "Constraints:\n1 <= prices.length <= 10^5\n0 <= prices[i] <= 10^5", "notes": ""}, "115": {"label": "Hard", "title": "Distinct Subsequences", "tags": "algorithms,dynamic-programming,string", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.41969999999999996, "total_accepted": 207900.0, "total_submissions": 495200.0, "testcase_example": "'\"rabbbit\"\\n\"rabbit\"'", "body": "Given two strings s and t, return the number of distinct subsequences of s which equals t.\nA string's subsequence is a new string formed from the original string by deleting some (can be none) of the characters without disturbing the remaining characters' relative positions. (i.e., \"ACE\" is a subsequence of \"ABCDE\" while \"AEC\" is not).\nThe test cases are generated so that the answer fits on a 32-bit signed integer.", "examples": [{"full_text": "Example 1:\nInput: s = \"rabbbit\", t = \"rabbit\"\nOutput: 3\nExplanation:\nAs shown below, there are 3 ways you can generate \"rabbit\" from S.\nrabbbit\nrabbbit\nrabbbit", "input": "Input: s = \"rabbbit\", t = \"rabbit\"", "output": "Output: 3", "explanation": "Explanation:\nAs shown below, there are 3 ways you can generate \"rabbit\" from S.\nrabbbit\nrabbbit\nrabbbit"}, {"full_text": "Example 2:\nInput: s = \"babgbag\", t = \"bag\"\nOutput: 5\nExplanation:\nAs shown below, there are 5 ways you can generate \"bag\" from S.\nbabgbag\nbabgbag\nbabgbag\nbabgbag\nbabgbag", "input": "Input: s = \"babgbag\", t = \"bag\"", "output": "Output: 5", "explanation": "Explanation:\nAs shown below, there are 5 ways you can generate \"bag\" from S.\nbabgbag\nbabgbag\nbabgbag\nbabgbag\nbabgbag"}], "constraints": "Constraints:\n1 <= s.length, t.length <= 1000\ns and t consist of English letters.", "notes": ""}, "87": {"label": "Hard", "title": "Scramble String", "tags": "algorithms,dynamic-programming,string", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3544, "total_accepted": 140100.0, "total_submissions": 395400.0, "testcase_example": "'\"great\"\\n\"rgeat\"'", "body": "We can scramble a string s to get a string t using the following algorithm:\nIf the length of the string is 1, stop.\nIf the length of the string is > 1, do the following:\n\nSplit the string into two non-empty substrings at a random index, i.e., if the string is s, divide it to x and y where s = x + y.\nRandomly\ndecide to swap the two substrings or to keep them in the same order. i.e., after this step, s may become s = x + y or s = y + x.\nApply step 1 recursively on each of the two substrings x and y.\n\n\nGiven two strings s1 and s2 of the same length, return true if s2 is a scrambled string of s1, otherwise, return false.", "examples": [{"full_text": "Example 1:\nInput: s1 = \"great\", s2 = \"rgeat\"\nOutput: true\nExplanation: One possible scenario applied on s1 is:\n\"great\" --> \"gr/eat\" // divide at random index.\n\"gr/eat\" --> \"gr/eat\" // random decision is not to swap the two substrings and keep them in order.\n\"gr/eat\" --> \"g/r / e/at\" // apply the same algorithm recursively on both substrings. divide at ranom index each of them.\n\"g/r / e/at\" --> \"r/g / e/at\" // random decision was to swap the first substring and to keep the second substring in the same order.\n\"r/g / e/at\" --> \"r/g / e/ a/t\" // again apply the algorithm recursively, divide \"at\" to \"a/t\".\n\"r/g / e/ a/t\" --> \"r/g / e/ a/t\" // random decision is to keep both substrings in the same order.\nThe algorithm stops now and the result string is \"rgeat\" which is s2.\nAs there is one possible scenario that led s1 to be scrambled to s2, we return true.", "input": "Input: s1 = \"great\", s2 = \"rgeat\"", "output": "Output: true", "explanation": "Explanation: One possible scenario applied on s1 is:\n\"great\" --> \"gr/eat\" // divide at random index.\n\"gr/eat\" --> \"gr/eat\" // random decision is not to swap the two substrings and keep them in order.\n\"gr/eat\" --> \"g/r / e/at\" // apply the same algorithm recursively on both substrings. divide at ranom index each of them.\n\"g/r / e/at\" --> \"r/g / e/at\" // random decision was to swap the first substring and to keep the second substring in the same order.\n\"r/g / e/at\" --> \"r/g / e/ a/t\" // again apply the algorithm recursively, divide \"at\" to \"a/t\".\n\"r/g / e/ a/t\" --> \"r/g / e/ a/t\" // random decision is to keep both substrings in the same order.\nThe algorithm stops now and the result string is \"rgeat\" which is s2.\nAs there is one possible scenario that led s1 to be scrambled to s2, we return true."}, {"full_text": "Example 2:\nInput: s1 = \"abcde\", s2 = \"caebd\"\nOutput: false", "input": "Input: s1 = \"abcde\", s2 = \"caebd\"", "output": "Output: false", "explanation": ""}, {"full_text": "Example 3:\nInput: s1 = \"a\", s2 = \"a\"\nOutput: true", "input": "Input: s1 = \"a\", s2 = \"a\"", "output": "Output: true", "explanation": ""}], "constraints": "Constraints:\ns1.length == s2.length\n1 <= s1.length <= 30\ns1 and s2 consist of lower-case English letters.", "notes": ""}, "85": {"label": "Hard", "title": "Maximal Rectangle", "tags": "algorithms,facebook,array,dynamic-programming,hash-table,stack", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4232, "total_accepted": 283600.0, "total_submissions": 670200.0, "testcase_example": "'[[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]]'", "body": "Given a rows x cols\nbinary matrix filled with 0's and 1's, find the largest rectangle containing only 1's and return its area.", "examples": [{"full_text": "Example 1:\nInput: matrix = [[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]]\nOutput: 6\nExplanation: The maximal rectangle is shown in the above picture.", "input": "Input: matrix = [[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]]", "output": "Output: 6", "explanation": "Explanation: The maximal rectangle is shown in the above picture."}, {"full_text": "Example 2:\nInput: matrix = [[\"0\"]]\nOutput: 0", "input": "Input: matrix = [[\"0\"]]", "output": "Output: 0", "explanation": ""}, {"full_text": "Example 3:\nInput: matrix = [[\"1\"]]\nOutput: 1", "input": "Input: matrix = [[\"1\"]]", "output": "Output: 1", "explanation": ""}], "constraints": "Constraints:\nrows == matrix.length\ncols == matrix[i].length\n1 <= row, cols <= 200\nmatrix[i][j] is '0' or '1'.", "notes": ""}, "84": {"label": "Hard", "title": "Largest Rectangle in Histogram", "tags": "algorithms,array,stack", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4035, "total_accepted": 475500.0, "total_submissions": 1200000.0, "testcase_example": "'[2,1,5,6,2,3]'", "body": "Given an array of integers heights representing the histogram's bar height where the width of each bar is 1, return the area of the largest rectangle in the histogram.", "examples": [{"full_text": "Example 1:\nInput: heights = [2,1,5,6,2,3]\nOutput: 10\nExplanation: The above is a histogram where width of each bar is 1.\nThe largest rectangle is shown in the red area, which has an area = 10 units.", "input": "Input: heights = [2,1,5,6,2,3]", "output": "Output: 10", "explanation": "Explanation: The above is a histogram where width of each bar is 1.\nThe largest rectangle is shown in the red area, which has an area = 10 units."}, {"full_text": "Example 2:\nInput: heights = [2,4]\nOutput: 4", "input": "Input: heights = [2,4]", "output": "Output: 4", "explanation": ""}], "constraints": "Constraints:\n1 <= heights.length <= 10^5\n0 <= heights[i] <= 10^4", "notes": ""}, "76": {"label": "Hard", "title": "Minimum Window Substring", "tags": "algorithms,facebook,linkedin,snapchat,uber,hash-table,string,two-pointers", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.38549999999999995, "total_accepted": 699500.0, "total_submissions": 1800000.0, "testcase_example": "'\"ADOBECODEBANC\"\\n\"ABC\"'", "body": "Given two strings s and t of lengths m and n respectively, return the minimum window substring of s such that every character in t (including duplicates) is included in the window. If there is no such substring, return the empty string \"\".\nThe testcases will be generated such that the answer is unique.\nA substring is a contiguous sequence of characters within the string.", "examples": [{"full_text": "Example 1:\nInput: s = \"ADOBECODEBANC\", t = \"ABC\"\nOutput: \"BANC\"\nExplanation: The minimum window substring \"BANC\" includes 'A', 'B', and 'C' from string t.", "input": "Input: s = \"ADOBECODEBANC\", t = \"ABC\"", "output": "Output: \"BANC\"", "explanation": "Explanation: The minimum window substring \"BANC\" includes 'A', 'B', and 'C' from string t."}, {"full_text": "Example 2:\nInput: s = \"a\", t = \"a\"\nOutput: \"a\"\nExplanation: The entire string s is the minimum window.", "input": "Input: s = \"a\", t = \"a\"", "output": "Output: \"a\"", "explanation": "Explanation: The entire string s is the minimum window."}, {"full_text": "Example 3:\nInput: s = \"a\", t = \"aa\"\nOutput: \"\"\nExplanation: Both 'a's from t must be included in the window.\nSince the largest window of s only has one 'a', return empty string.", "input": "Input: s = \"a\", t = \"aa\"", "output": "Output: \"\"", "explanation": "Explanation: Both 'a's from t must be included in the window.\nSince the largest window of s only has one 'a', return empty string."}], "constraints": "Constraints:\nm == s.length\nn == t.length\n1 <= m, n\n<= 10^5\ns and t consist of uppercase and lowercase English letters.\nFollow up: Could you find an algorithm that runs in O(m + n) time?", "notes": ""}, "72": {"label": "Hard", "title": "Edit Distance", "tags": "algorithms,dynamic-programming,string", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5015, "total_accepted": 441000.0, "total_submissions": 879400.0, "testcase_example": "'\"horse\"\\n\"ros\"'", "body": "Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.\nYou have the following three operations permitted on a word:\nInsert a character\nDelete a character\nReplace a character", "examples": [{"full_text": "Example 1:\nInput: word1 = \"horse\", word2 = \"ros\"\nOutput: 3\nExplanation:\nhorse -> rorse (replace 'h' with 'r')\nrorse -> rose (remove 'r')\nrose -> ros (remove 'e')", "input": "Input: word1 = \"horse\", word2 = \"ros\"", "output": "Output: 3", "explanation": "Explanation:\nhorse -> rorse (replace 'h' with 'r')\nrorse -> rose (remove 'r')\nrose -> ros (remove 'e')"}, {"full_text": "Example 2:\nInput: word1 = \"intention\", word2 = \"execution\"\nOutput: 5\nExplanation:\nintention -> inention (remove 't')\ninention -> enention (replace 'i' with 'e')\nenention -> exention (replace 'n' with 'x')\nexention -> exection (replace 'n' with 'c')\nexection -> execution (insert 'u')", "input": "Input: word1 = \"intention\", word2 = \"execution\"", "output": "Output: 5", "explanation": "Explanation:\nintention -> inention (remove 't')\ninention -> enention (replace 'i' with 'e')\nenention -> exention (replace 'n' with 'x')\nexention -> exection (replace 'n' with 'c')\nexection -> execution (insert 'u')"}], "constraints": "Constraints:\n0 <= word1.length, word2.length <= 500\nword1 and word2 consist of lowercase English letters.", "notes": ""}, "68": {"label": "Hard", "title": "Text Justification", "tags": "algorithms,airbnb,facebook,linkedin,string", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3428, "total_accepted": 228800.0, "total_submissions": 667200.0, "testcase_example": "'[\"This\", \"is\", \"an\", \"example\", \"of\", \"text\", \"justification.\"]\\n16'", "body": "Given an array of strings words and a width maxWidth, format the text such that each line has exactly maxWidth characters and is fully (left and right) justified.\nYou should pack your words in a greedy approach; that is, pack as many words as you can in each line. Pad extra spaces ' ' when necessary so that each line has exactly maxWidth characters.\nExtra spaces between words should be distributed as evenly as possible. If the number of spaces on a line does not divide evenly between words, the empty slots on the left will be assigned more spaces than the slots on the right.\nFor the last line of text, it should be left-justified and no extra space is inserted between words.\nNote:\nA word is defined as a character sequence consisting of non-space characters only.\nEach word's length is guaranteed to be greater than 0 and not exceed maxWidth.\nThe input array words contains at least one word.", "examples": [{"full_text": "Example 1:\nInput: words = [\"This\", \"is\", \"an\", \"example\", \"of\", \"text\", \"justification.\"], maxWidth = 16\nOutput:\n[\n\n\"This\n\nis\n\nan\",\n\n\"example\nof text\",\n\n\"justification.\n\"\n]", "input": "Input: words = [\"This\", \"is\", \"an\", \"example\", \"of\", \"text\", \"justification.\"], maxWidth = 16", "output": "Output:\n[\n\n\"This\n\nis\n\nan\",\n\n\"example\nof text\",\n\n\"justification.\n\"\n]", "explanation": ""}, {"full_text": "Example 2:\nInput: words = [\"What\",\"must\",\"be\",\"acknowledgment\",\"shall\",\"be\"], maxWidth = 16\nOutput:\n[\n\"What\nmust\nbe\",\n\"acknowledgment\n\",\n\"shall be\n\n\n\n\"\n]\nExplanation: Note that the last line is \"shall be \" instead of \"shall be\", because the last line must be left-justified instead of fully-justified.\nNote that the second line is also left-justified becase it contains only one word.", "input": "Input: words = [\"What\",\"must\",\"be\",\"acknowledgment\",\"shall\",\"be\"], maxWidth = 16", "output": "Output:\n[\n\"What\nmust\nbe\",\n\"acknowledgment\n\",\n\"shall be\n\n\n\n\"\n]", "explanation": "Explanation: Note that the last line is \"shall be \" instead of \"shall be\", because the last line must be left-justified instead of fully-justified.\nNote that the second line is also left-justified becase it contains only one word."}, {"full_text": "Example 3:\nInput: words = [\"Science\",\"is\",\"what\",\"we\",\"understand\",\"well\",\"enough\",\"to\",\"explain\",\"to\",\"a\",\"computer.\",\"Art\",\"is\",\"everything\",\"else\",\"we\",\"do\"], maxWidth = 20\nOutput:\n[\n\"Science\nis\nwhat we\",\n\"understand\n\n\nwell\",\n\"enough to explain to\",\n\"a\ncomputer.\nArt is\",\n\"everything\nelse\nwe\",\n\"do\n\n\n\n\n\n\n\n\n\"\n]", "input": "Input: words = [\"Science\",\"is\",\"what\",\"we\",\"understand\",\"well\",\"enough\",\"to\",\"explain\",\"to\",\"a\",\"computer.\",\"Art\",\"is\",\"everything\",\"else\",\"we\",\"do\"], maxWidth = 20", "output": "Output:\n[\n\"Science\nis\nwhat we\",\n\"understand\n\n\nwell\",\n\"enough to explain to\",\n\"a\ncomputer.\nArt is\",\n\"everything\nelse\nwe\",\n\"do\n\n\n\n\n\n\n\n\n\"\n]", "explanation": ""}], "constraints": "Constraints:\n1 <= words.length <= 300\n1 <= words[i].length <= 20\nwords[i] consists of only English letters and symbols.\n1 <= maxWidth <= 100\nwords[i].length <= maxWidth", "notes": ""}, "65": {"label": "Hard", "title": "Valid Number", "tags": "algorithms,linkedin,math,string", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.17800000000000002, "total_accepted": 257000.0, "total_submissions": 1400000.0, "testcase_example": "'\"0\"'", "body": "A valid number can be split up into these components (in order):\nA decimal number or an integer.\n(Optional) An 'e' or 'E', followed by an integer.\nA decimal number can be split up into these components (in order):\n(Optional) A sign character (either '+' or '-').\nOne of the following formats:\n\nOne or more digits, followed by a dot '.'.\nOne or more digits, followed by a dot '.', followed by one or more digits.\nA dot '.', followed by one or more digits.\n\n\nAn integer can be split up into these components (in order):\n(Optional) A sign character (either '+' or '-').\nOne or more digits.\nFor example, all the following are valid numbers: [\"2\", \"0089\", \"-0.1\", \"+3.14\", \"4.\", \"-.9\", \"2e10\", \"-90E3\", \"3e+7\", \"+6e-1\", \"53.5e93\", \"-123.456e789\"], while the following are not valid numbers: [\"abc\", \"1a\", \"1e\", \"e3\", \"99e2.5\", \"--6\", \"-+3\", \"95a54e53\"].\nGiven a string s, return true if s is a valid number.", "examples": [{"full_text": "Example 1:\nInput: s = \"0\"\nOutput: true", "input": "Input: s = \"0\"", "output": "Output: true", "explanation": ""}, {"full_text": "Example 2:\nInput: s = \"e\"\nOutput: false", "input": "Input: s = \"e\"", "output": "Output: false", "explanation": ""}, {"full_text": "Example 3:\nInput: s = \".\"\nOutput: false", "input": "Input: s = \".\"", "output": "Output: false", "explanation": ""}], "constraints": "Constraints:\n1 <= s.length <= 20\ns consists of only English letters (both uppercase and lowercase), digits (0-9), plus '+', minus '-', or dot '.'.", "notes": ""}, "60": {"label": "Hard", "title": "Permutation Sequence", "tags": "algorithms,twitter,backtracking,math", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.41590000000000005, "total_accepted": 258200.0, "total_submissions": 620700.0, "testcase_example": "'3\\n3'", "body": "The set [1, 2, 3, ...,\nn] contains a total of n! unique permutations.\nBy listing and labeling all of the permutations in order, we get the following sequence for n = 3:\n\"123\"\n\"132\"\n\"213\"\n\"231\"\n\"312\"\n\"321\"\nGiven n and k, return the k^th permutation sequence.", "examples": [{"full_text": "Example 1:\nInput: n = 3, k = 3\nOutput: \"213\"", "input": "Input: n = 3, k = 3", "output": "Output: \"213\"", "explanation": ""}, {"full_text": "Example 2:\nInput: n = 4, k = 9\nOutput: \"2314\"", "input": "Input: n = 4, k = 9", "output": "Output: \"2314\"", "explanation": ""}, {"full_text": "Example 3:\nInput: n = 3, k = 1\nOutput: \"123\"", "input": "Input: n = 3, k = 1", "output": "Output: \"123\"", "explanation": ""}], "constraints": "Constraints:\n1 <= n <= 9\n1 <= k <= n!", "notes": ""}, "52": {"label": "Hard", "title": "N-Queens II", "tags": "algorithms,zenefits,backtracking", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.6545000000000001, "total_accepted": 208700.0, "total_submissions": 318900.0, "testcase_example": "'4'", "body": "The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.\nGiven an integer n, return the number of distinct solutions to the\nn-queens puzzle.", "examples": [{"full_text": "Example 1:\nInput: n = 4\nOutput: 2\nExplanation: There are two distinct solutions to the 4-queens puzzle as shown.", "input": "Input: n = 4", "output": "Output: 2", "explanation": "Explanation: There are two distinct solutions to the 4-queens puzzle as shown."}, {"full_text": "Example 2:\nInput: n = 1\nOutput: 1", "input": "Input: n = 1", "output": "Output: 1", "explanation": ""}], "constraints": "Constraints:\n1 <= n <= 9", "notes": ""}, "51": {"label": "Hard", "title": "N-Queens", "tags": "algorithms,backtracking", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5626, "total_accepted": 340500.0, "total_submissions": 605200.0, "testcase_example": "'4'", "body": "The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.\nGiven an integer n, return all distinct solutions to the n-queens puzzle. You may return the answer in any order.\nEach solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space, respectively.", "examples": [{"full_text": "Example 1:\nInput: n = 4\nOutput: [[\".Q..\",\"...Q\",\"Q...\",\"..Q.\"],[\"..Q.\",\"Q...\",\"...Q\",\".Q..\"]]\nExplanation: There exist two distinct solutions to the 4-queens puzzle as shown above", "input": "Input: n = 4", "output": "Output: [[\".Q..\",\"...Q\",\"Q...\",\"..Q.\"],[\"..Q.\",\"Q...\",\"...Q\",\".Q..\"]]", "explanation": "Explanation: There exist two distinct solutions to the 4-queens puzzle as shown above"}, {"full_text": "Example 2:\nInput: n = 1\nOutput: [[\"Q\"]]", "input": "Input: n = 1", "output": "Output: [[\"Q\"]]", "explanation": ""}], "constraints": "Constraints:\n1 <= n <= 9", "notes": ""}, "44": {"label": "Hard", "title": "Wildcard Matching", "tags": "algorithms,facebook,google,snapchat,twitter,twosigma,backtracking,dynamic-programming,greedy,string", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.2639, "total_accepted": 364200.0, "total_submissions": 1400000.0, "testcase_example": "'\"aa\"\\n\"a\"'", "body": "Given an input string (s) and a pattern (p), implement wildcard pattern matching with support for '?' and '*' where:\n'?' Matches any single character.\n'*' Matches any sequence of characters (including the empty sequence).\nThe matching should cover the entire input string (not partial).", "examples": [{"full_text": "Example 1:\nInput: s = \"aa\", p = \"a\"\nOutput: false\nExplanation: \"a\" does not match the entire string \"aa\".", "input": "Input: s = \"aa\", p = \"a\"", "output": "Output: false", "explanation": "Explanation: \"a\" does not match the entire string \"aa\"."}, {"full_text": "Example 2:\nInput: s = \"aa\", p = \"*\"\nOutput: true\nExplanation:\n'*' matches any sequence.", "input": "Input: s = \"aa\", p = \"*\"", "output": "Output: true", "explanation": "Explanation:\n'*' matches any sequence."}, {"full_text": "Example 3:\nInput: s = \"cb\", p = \"?a\"\nOutput: false\nExplanation:\n'?' matches 'c', but the second letter is 'a', which does not match 'b'.", "input": "Input: s = \"cb\", p = \"?a\"", "output": "Output: false", "explanation": "Explanation:\n'?' matches 'c', but the second letter is 'a', which does not match 'b'."}], "constraints": "Constraints:\n0 <= s.length, p.length <= 2000\ns contains only lowercase English letters.\np contains only lowercase English letters, '?' or '*'.", "notes": ""}, "42": {"label": "Hard", "title": "Trapping Rain Water", "tags": "algorithms,amazon,apple,bloomberg,google,twitter,zenefits,array,stack,two-pointers", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5569, "total_accepted": 1000000.0, "total_submissions": 1800000.0, "testcase_example": "'[0,1,0,2,1,0,1,3,2,1,2,1]'", "body": "Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.", "examples": [{"full_text": "Example 1:\nInput: height = [0,1,0,2,1,0,1,3,2,1,2,1]\nOutput: 6\nExplanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.", "input": "Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]", "output": "Output: 6", "explanation": "Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped."}, {"full_text": "Example 2:\nInput: height = [4,2,0,3,2,5]\nOutput: 9", "input": "Input: height = [4,2,0,3,2,5]", "output": "Output: 9", "explanation": ""}], "constraints": "Constraints:\nn == height.length\n1 <= n <= 2 * 10^4\n0 <= height[i] <= 10^5", "notes": ""}, "41": {"label": "Hard", "title": "First Missing Positive", "tags": "algorithms,array", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3567, "total_accepted": 628800.0, "total_submissions": 1800000.0, "testcase_example": "'[1,2,0]'", "body": "Given an unsorted integer array nums, return the smallest missing positive integer.\nYou must implement an algorithm that runs in O(n) time and uses constant extra space.", "examples": [{"full_text": "Example 1:\nInput: nums = [1,2,0]\nOutput: 3", "input": "Input: nums = [1,2,0]", "output": "Output: 3", "explanation": ""}, {"full_text": "Example 2:\nInput: nums = [3,4,-1,1]\nOutput: 2", "input": "Input: nums = [3,4,-1,1]", "output": "Output: 2", "explanation": ""}, {"full_text": "Example 3:\nInput: nums = [7,8,9,11,12]\nOutput: 1", "input": "Input: nums = [7,8,9,11,12]", "output": "Output: 1", "explanation": ""}], "constraints": "Constraints:\n1 <= nums.length <= 5 * 10^5\n-2^31 <= nums[i] <= 2^31 - 1", "notes": ""}, "37": {"label": "Hard", "title": "Sudoku Solver", "tags": "algorithms,snapchat,uber,backtracking,hash-table", "langs": "c,cpp,csharp,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5294, "total_accepted": 324600.0, "total_submissions": 613200.0, "testcase_example": "'[[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]'", "body": "Write a program to solve a Sudoku puzzle by filling the empty cells.\nA sudoku solution must satisfy all of the following rules:\nEach of the digits 1-9 must occur exactly once in each row.\nEach of the digits 1-9 must occur exactly once in each column.\nEach of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.\nThe '.' character indicates empty cells.", "examples": [{"full_text": "Example 1:\nInput: board = [[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\nOutput: [[\"5\",\"3\",\"4\",\"6\",\"7\",\"8\",\"9\",\"1\",\"2\"],[\"6\",\"7\",\"2\",\"1\",\"9\",\"5\",\"3\",\"4\",\"8\"],[\"1\",\"9\",\"8\",\"3\",\"4\",\"2\",\"5\",\"6\",\"7\"],[\"8\",\"5\",\"9\",\"7\",\"6\",\"1\",\"4\",\"2\",\"3\"],[\"4\",\"2\",\"6\",\"8\",\"5\",\"3\",\"7\",\"9\",\"1\"],[\"7\",\"1\",\"3\",\"9\",\"2\",\"4\",\"8\",\"5\",\"6\"],[\"9\",\"6\",\"1\",\"5\",\"3\",\"7\",\"2\",\"8\",\"4\"],[\"2\",\"8\",\"7\",\"4\",\"1\",\"9\",\"6\",\"3\",\"5\"],[\"3\",\"4\",\"5\",\"2\",\"8\",\"6\",\"1\",\"7\",\"9\"]]\nExplanation:\nThe input board is shown above and the only valid solution is shown below:", "input": "Input: board = [[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]", "output": "Output: [[\"5\",\"3\",\"4\",\"6\",\"7\",\"8\",\"9\",\"1\",\"2\"],[\"6\",\"7\",\"2\",\"1\",\"9\",\"5\",\"3\",\"4\",\"8\"],[\"1\",\"9\",\"8\",\"3\",\"4\",\"2\",\"5\",\"6\",\"7\"],[\"8\",\"5\",\"9\",\"7\",\"6\",\"1\",\"4\",\"2\",\"3\"],[\"4\",\"2\",\"6\",\"8\",\"5\",\"3\",\"7\",\"9\",\"1\"],[\"7\",\"1\",\"3\",\"9\",\"2\",\"4\",\"8\",\"5\",\"6\"],[\"9\",\"6\",\"1\",\"5\",\"3\",\"7\",\"2\",\"8\",\"4\"],[\"2\",\"8\",\"7\",\"4\",\"1\",\"9\",\"6\",\"3\",\"5\"],[\"3\",\"4\",\"5\",\"2\",\"8\",\"6\",\"1\",\"7\",\"9\"]]", "explanation": "Explanation:\nThe input board is shown above and the only valid solution is shown below:"}], "constraints": "Constraints:\nboard.length == 9\nboard[i].length == 9\nboard[i][j] is a digit or '.'.\nIt is guaranteed that the input board has only one solution.", "notes": ""}, "32": {"label": "Hard", "title": "Longest Valid Parentheses", "tags": "algorithms,dynamic-programming,string", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.3106, "total_accepted": 456700.0, "total_submissions": 1500000.0, "testcase_example": "'\"(()\"'", "body": "Given a string containing just the characters '(' and ')', find the length of the longest valid (well-formed) parentheses substring.", "examples": [{"full_text": "Example 1:\nInput: s = \"(()\"\nOutput: 2\nExplanation: The longest valid parentheses substring is \"()\".", "input": "Input: s = \"(()\"", "output": "Output: 2", "explanation": "Explanation: The longest valid parentheses substring is \"()\"."}, {"full_text": "Example 2:\nInput: s = \")()())\"\nOutput: 4\nExplanation: The longest valid parentheses substring is \"()()\".", "input": "Input: s = \")()())\"", "output": "Output: 4", "explanation": "Explanation: The longest valid parentheses substring is \"()()\"."}, {"full_text": "Example 3:\nInput: s = \"\"\nOutput: 0", "input": "Input: s = \"\"", "output": "Output: 0", "explanation": ""}], "constraints": "Constraints:\n0 <= s.length <= 3 * 10^4\ns[i] is '(', or ')'.", "notes": ""}, "30": {"label": "Hard", "title": "Substring with Concatenation of All Words", "tags": "algorithms,hash-table,string,two-pointers", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.2775, "total_accepted": 241800.0, "total_submissions": 871300.0, "testcase_example": "'\"barfoothefoobarman\"\\n[\"foo\",\"bar\"]'", "body": "You are given a string s and an array of strings words of the same length. Return\nall starting indices of substring(s) in s\nthat is a concatenation of each word in words exactly once, in any order,\nand without any intervening characters.\nYou can return the answer in any order.", "examples": [{"full_text": "Example 1:\nInput: s = \"barfoothefoobarman\", words = [\"foo\",\"bar\"]\nOutput: [0,9]\nExplanation: Substrings starting at index 0 and 9 are \"barfoo\" and \"foobar\" respectively.\nThe output order does not matter, returning [9,0] is fine too.", "input": "Input: s = \"barfoothefoobarman\", words = [\"foo\",\"bar\"]", "output": "Output: [0,9]", "explanation": "Explanation: Substrings starting at index 0 and 9 are \"barfoo\" and \"foobar\" respectively.\nThe output order does not matter, returning [9,0] is fine too."}, {"full_text": "Example 2:\nInput: s = \"wordgoodgoodgoodbestword\", words = [\"word\",\"good\",\"best\",\"word\"]\nOutput: []", "input": "Input: s = \"wordgoodgoodgoodbestword\", words = [\"word\",\"good\",\"best\",\"word\"]", "output": "Output: []", "explanation": ""}, {"full_text": "Example 3:\nInput: s = \"barfoofoobarthefoobarman\", words = [\"bar\",\"foo\",\"the\"]\nOutput: [6,9,12]", "input": "Input: s = \"barfoofoobarthefoobarman\", words = [\"bar\",\"foo\",\"the\"]", "output": "Output: [6,9,12]", "explanation": ""}], "constraints": "Constraints:\n1 <= s.length <= 10^4\ns consists of lower-case English letters.\n1 <= words.length <= 5000\n1 <= words[i].length <= 30\nwords[i]\nconsists of lower-case English letters.", "notes": ""}, "25": {"label": "Hard", "title": "Reverse Nodes in k-Group", "tags": "algorithms,facebook,microsoft,linked-list", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.5015, "total_accepted": 473600.0, "total_submissions": 944400.0, "testcase_example": "'[1,2,3,4,5]\\n2'", "body": "Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.\nk is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.\nYou may not alter the values in the list's nodes, only nodes themselves may be changed.", "examples": [{"full_text": "Example 1:\nInput: head = [1,2,3,4,5], k = 2\nOutput: [2,1,4,3,5]", "input": "Input: head = [1,2,3,4,5], k = 2", "output": "Output: [2,1,4,3,5]", "explanation": ""}, {"full_text": "Example 2:\nInput: head = [1,2,3,4,5], k = 3\nOutput: [3,2,1,4,5]", "input": "Input: head = [1,2,3,4,5], k = 3", "output": "Output: [3,2,1,4,5]", "explanation": ""}], "constraints": "Constraints:\nThe number of nodes in the list is n.\n1 <= k <= n <= 5000\n0 <= Node.val <= 1000", "notes": "Follow-up: Can you solve the problem in O(1) extra memory space?"}, "23": {"label": "Hard", "title": "Merge k Sorted Lists", "tags": "algorithms,airbnb,amazon,facebook,google,linkedin,microsoft,twitter,uber,divide-and-conquer,heap,linked-list", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.4644, "total_accepted": 1200000.0, "total_submissions": 2500000.0, "testcase_example": "'[[1,4,5],[1,3,4],[2,6]]'", "body": "You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.\nMerge all the linked-lists into one sorted linked-list and return it.", "examples": [{"full_text": "Example 1:\nInput: lists = [[1,4,5],[1,3,4],[2,6]]\nOutput: [1,1,2,3,4,4,5,6]\nExplanation: The linked-lists are:\n[\n1->4->5,\n1->3->4,\n2->6\n]\nmerging them into one sorted list:\n1->1->2->3->4->4->5->6", "input": "Input: lists = [[1,4,5],[1,3,4],[2,6]]", "output": "Output: [1,1,2,3,4,4,5,6]", "explanation": "Explanation: The linked-lists are:\n[\n1->4->5,\n1->3->4,\n2->6\n]\nmerging them into one sorted list:\n1->1->2->3->4->4->5->6"}, {"full_text": "Example 2:\nInput: lists = []\nOutput: []", "input": "Input: lists = []", "output": "Output: []", "explanation": ""}, {"full_text": "Example 3:\nInput: lists = [[]]\nOutput: []", "input": "Input: lists = [[]]", "output": "Output: []", "explanation": ""}], "constraints": "Constraints:\nk == lists.length\n0 <= k <= 10^4\n0 <= lists[i].length <= 500\n-10^4 <= lists[i][j] <= 10^4\nlists[i] is sorted in ascending order.\nThe sum of lists[i].length will not exceed 10^4.", "notes": ""}, "10": {"label": "Hard", "title": "Regular Expression Matching", "tags": "algorithms,airbnb,facebook,google,twitter,uber,backtracking,dynamic-programming,string", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.2817, "total_accepted": 645100.0, "total_submissions": 2300000.0, "testcase_example": "'\"aa\"\\n\"a\"'", "body": "Given an input string s\nand a pattern p, implement regular expression matching with support for '.' and '*' where:\n'.' Matches any single character.\u200b\u200b\u200b\u200b\n'*' Matches zero or more of the preceding element.\nThe matching should cover the entire input string (not partial).", "examples": [{"full_text": "Example 1:\nInput: s = \"aa\", p = \"a\"\nOutput: false\nExplanation: \"a\" does not match the entire string \"aa\".", "input": "Input: s = \"aa\", p = \"a\"", "output": "Output: false", "explanation": "Explanation: \"a\" does not match the entire string \"aa\"."}, {"full_text": "Example 2:\nInput: s = \"aa\", p = \"a*\"\nOutput: true\nExplanation: '*' means zero or more of the preceding element, 'a'. Therefore, by repeating 'a' once, it becomes \"aa\".", "input": "Input: s = \"aa\", p = \"a*\"", "output": "Output: true", "explanation": "Explanation: '*' means zero or more of the preceding element, 'a'. Therefore, by repeating 'a' once, it becomes \"aa\"."}, {"full_text": "Example 3:\nInput: s = \"ab\", p = \".*\"\nOutput: true\nExplanation: \".*\" means \"zero or more (*) of any character (.)\".", "input": "Input: s = \"ab\", p = \".*\"", "output": "Output: true", "explanation": "Explanation: \".*\" means \"zero or more (*) of any character (.)\"."}], "constraints": "Constraints:\n1 <= s.length\n<= 20\n1 <= p.length\n<= 30\ns contains only lowercase English letters.\np contains only lowercase English letters, '.', and\n'*'.\nIt is guaranteed for each appearance of the character '*', there will be a previous valid character to match.", "notes": ""}, "4": {"label": "Hard", "title": "Median of Two Sorted Arrays", "tags": "algorithms,adobe,apple,dropbox,google,microsoft,yahoo,zenefits,array,binary-search,divide-and-conquer", "langs": "c,cpp,csharp,elixir,erlang,golang,java,javascript,kotlin,php,python,python3,racket,ruby,rust,scala,swift,typescript", "related_topics": "algorithms", "acceptance_ratio": 0.33649999999999997, "total_accepted": 1300000.0, "total_submissions": 3700000.0, "testcase_example": "'[1,3]\\n[2]'", "body": "Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.\nThe overall run time complexity should be O(log (m+n)).", "examples": [{"full_text": "Example 1:\nInput: nums1 = [1,3], nums2 = [2]\nOutput: 2.00000\nExplanation: merged array = [1,2,3] and median is 2.", "input": "Input: nums1 = [1,3], nums2 = [2]", "output": "Output: 2.00000", "explanation": "Explanation: merged array = [1,2,3] and median is 2."}, {"full_text": "Example 2:\nInput: nums1 = [1,2], nums2 = [3,4]\nOutput: 2.50000\nExplanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.", "input": "Input: nums1 = [1,2], nums2 = [3,4]", "output": "Output: 2.50000", "explanation": "Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5."}], "constraints": "Constraints:\nnums1.length == m\nnums2.length == n\n0 <= m <= 1000\n0 <= n <= 1000\n1 <= m + n <= 2000\n-10^6 <= nums1[i], nums2[i] <= 10^6", "notes": ""}}